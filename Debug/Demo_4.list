
Demo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  0801faa8  0801faa8  0002faa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020bcc  08020bcc  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08020bcc  08020bcc  00030bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020bd4  08020bd4  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020bd4  08020bd4  00030bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020bd8  08020bd8  00030bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08020bdc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a444  200002a0  08020e78  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a6e4  08020e78  0004a6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a69fe  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a391  00000000  00000000  000e6cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002858  00000000  00000000  000f1060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025b8  00000000  00000000  000f38b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003172d  00000000  00000000  000f5e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ef9  00000000  00000000  0012759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2d5  00000000  00000000  0016e496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025976b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bff8  00000000  00000000  002597c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fa90 	.word	0x0801fa90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	0801fa90 	.word	0x0801fa90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f011 f8e0 	bl	80123b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f011 f8d8 	bl	80123b8 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f011 f883 	bl	80123b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f011 f87b 	bl	80123b8 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f010 fcca 	bl	8011e58 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f013 fd06 	bl	801500c <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f002 ff9f 	bl	8004548 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f014 f86c 	bl	80156f4 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f002 ff91 	bl	8004548 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f013 fd63 	bl	80150f2 <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f002 ff89 	bl	8004548 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f014 fc51 	bl	8015eec <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f002 ff7a 	bl	8004548 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f013 fd04 	bl	8015062 <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20005f34 	.word	0x20005f34
 8001668:	40010000 	.word	0x40010000
 800166c:	20006038 	.word	0x20006038
 8001670:	20005ce8 	.word	0x20005ce8
 8001674:	40000400 	.word	0x40000400
 8001678:	20005b24 	.word	0x20005b24
 800167c:	40000800 	.word	0x40000800
 8001680:	20005ca8 	.word	0x20005ca8
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005ae4 	.word	0x20005ae4
 800168c:	40010400 	.word	0x40010400
 8001690:	20005f74 	.word	0x20005f74
 8001694:	40014000 	.word	0x40014000
 8001698:	20005c04 	.word	0x20005c04
 800169c:	40014400 	.word	0x40014400
 80016a0:	20005e4c 	.word	0x20005e4c
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20006158 	.word	0x20006158
 80016ac:	40001800 	.word	0x40001800
 80016b0:	20005dcc 	.word	0x20005dcc
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	20006118 	.word	0x20006118
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f013 ff26 	bl	8015568 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f002 ff11 	bl	8004548 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f010 fa74 	bl	8011e58 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f013 fbe8 	bl	8015148 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20005f34 	.word	0x20005f34
 80019ac:	20006038 	.word	0x20006038
 80019b0:	20005ce8 	.word	0x20005ce8
 80019b4:	20005b24 	.word	0x20005b24
 80019b8:	20005ca8 	.word	0x20005ca8
 80019bc:	20005ae4 	.word	0x20005ae4
 80019c0:	20005f74 	.word	0x20005f74
 80019c4:	20005c04 	.word	0x20005c04
 80019c8:	20005e4c 	.word	0x20005e4c
 80019cc:	20006158 	.word	0x20006158
 80019d0:	20005dcc 	.word	0x20005dcc
 80019d4:	20006118 	.word	0x20006118

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 f93f 	bl	8019c6c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f013 fb79 	bl	80151c4 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fd36 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f014 f9fe 	bl	8015eec <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fd27 	bl	8004548 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00f fd47 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00f fd7a 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00f fd59 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00f fd31 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00f fd64 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00f fd43 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00f fd1b 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00f fd4e 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00f fd2d 	bl	80115f0 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f013 fba5 	bl	80152e8 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005f34 	.word	0x20005f34
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	20006038 	.word	0x20006038
 8001bb4:	20005ce8 	.word	0x20005ce8
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20005b24 	.word	0x20005b24
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	20005ca8 	.word	0x20005ca8
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005ae4 	.word	0x20005ae4
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20006494 	.word	0x20006494
 8001c70:	20006498 	.word	0x20006498
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20006490 	.word	0x20006490
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	200064b8 	.word	0x200064b8
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	200064b4 	.word	0x200064b4
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200064bc 	.word	0x200064bc

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	20006494 	.word	0x20006494
 8001d84:	20006498 	.word	0x20006498
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20006490 	.word	0x20006490
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200064b8 	.word	0x200064b8
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	200064b4 	.word	0x200064b4
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200064bc 	.word	0x200064bc

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f010 fab8 	bl	80123b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f010 fab0 	bl	80123b8 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f010 fa9b 	bl	80123b8 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f010 fa92 	bl	80123b8 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f010 fa87 	bl	80123b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f010 fa7f 	bl	80123b8 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f010 fa6c 	bl	80123b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f010 fa64 	bl	80123b8 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f00f fb3b 	bl	80115b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f00f ff3e 	bl	8011e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f00f fef4 	bl	8011e58 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	200002bc 	.word	0x200002bc
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f00f feb4 	bl	8011e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f00f fe81 	bl	8011e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f00f fe40 	bl	8011e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f00f fe2f 	bl	8011e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f00f ff96 	bl	8012190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f00f ff91 	bl	8012190 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f00f f9cc 	bl	801160c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f00f f9c9 	bl	801160c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f00f ff7a 	bl	8012190 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f00f ff75 	bl	8012190 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f00f f9b0 	bl	801160c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f00f f9ad 	bl	801160c <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f00f ff5e 	bl	8012190 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f00f ff59 	bl	8012190 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f00f f994 	bl	801160c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f00f f991 	bl	801160c <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f00f faea 	bl	8011e58 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f00f fab8 	bl	8011e58 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f00f fa85 	bl	8011e58 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f00f fa52 	bl	8011e58 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f00f fa11 	bl	8011e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f00f fa01 	bl	8011e58 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f00f f9bd 	bl	8011e58 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f00f f974 	bl	8011e58 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f00f f933 	bl	8011e58 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f00f f923 	bl	8011e58 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f00f f8f1 	bl	8011e58 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f00f f8be 	bl	8011e58 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f00f f88c 	bl	8011e58 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f00f f847 	bl	8011e58 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f016 ff3c 	bl	8019c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f011 fb08 	bl	801447c <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fb69 	bl	8004548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f011 fd61 	bl	801495c <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fb52 	bl	8004548 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f011 fe40 	bl	8014b28 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f012 f800 	bl	801500c <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fa99 	bl	8004548 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f012 ff61 	bl	8015eec <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 fa8a 	bl	8004548 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f00e fa9e 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f00e fab5 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f00e fa8d 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00e faa4 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00e fa72 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f00e fa89 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e fa61 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e fa78 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f00e fa50 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f00e fa67 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f00e fa3f 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f00e fa56 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20005f34 	.word	0x20005f34
 800314c:	40010000 	.word	0x40010000
 8003150:	20006038 	.word	0x20006038
 8003154:	20005ce8 	.word	0x20005ce8
 8003158:	40000400 	.word	0x40000400
 800315c:	20005b24 	.word	0x20005b24
 8003160:	40000800 	.word	0x40000800
 8003164:	20005ca8 	.word	0x20005ca8
 8003168:	40000c00 	.word	0x40000c00
 800316c:	20005ef4 	.word	0x20005ef4
 8003170:	40001000 	.word	0x40001000
 8003174:	20006198 	.word	0x20006198
 8003178:	40001400 	.word	0x40001400
 800317c:	20005ae4 	.word	0x20005ae4
 8003180:	40010400 	.word	0x40010400
 8003184:	20005f74 	.word	0x20005f74
 8003188:	40014000 	.word	0x40014000
 800318c:	20005c04 	.word	0x20005c04
 8003190:	40014400 	.word	0x40014400
 8003194:	20005e4c 	.word	0x20005e4c
 8003198:	40014800 	.word	0x40014800
 800319c:	20006158 	.word	0x20006158
 80031a0:	40001800 	.word	0x40001800
 80031a4:	20005dcc 	.word	0x20005dcc
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	20006118 	.word	0x20006118
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e f9f7 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00e fa0e 	bl	80115f0 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f011 ff44 	bl	8015062 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f011 ff65 	bl	80150aa <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20006118 	.word	0x20006118

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f012 feae 	bl	801600c <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 f947 	bl	8004548 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e f971 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e f9a4 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00e f983 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f00e f953 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f00e f986 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f00e f965 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00e f935 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f00e f968 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f00e f947 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f00e f917 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f00e f94a 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f00e f929 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005e0c 	.word	0x20005e0c
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005ae0 	.word	0x20005ae0
 80033c4:	20006078 	.word	0x20006078
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20005e8c 	.word	0x20005e8c
 80033d0:	20005bc4 	.word	0x20005bc4
 80033d4:	40004800 	.word	0x40004800
 80033d8:	20005d29 	.word	0x20005d29
 80033dc:	20005ff8 	.word	0x20005ff8
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	20005ff4 	.word	0x20005ff4
 80033e8:	20005d2c 	.word	0x20005d2c
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20005ca4 	.word	0x20005ca4
 80033f4:	40011400 	.word	0x40011400
 80033f8:	20005d28 	.word	0x20005d28

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f00e f8b7 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f00e f8ea 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f00e f8c9 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f00e f899 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f00e f8cc 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f00e f8ab 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00e f87b 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e f8ae 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00e f88d 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00e f85d 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f00e f890 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f00e f86f 	bl	80115f0 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f00e f875 	bl	8011644 <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f000 fff2 	bl	8004548 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005a80 	.word	0x20005a80
 8003580:	40026088 	.word	0x40026088
 8003584:	20005b64 	.word	0x20005b64
 8003588:	40026028 	.word	0x40026028
 800358c:	20005a20 	.word	0x20005a20
 8003590:	40026040 	.word	0x40026040
 8003594:	200060b8 	.word	0x200060b8
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f012 fe6f 	bl	8016284 <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005e0c 	.word	0x20005e0c

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f012 fe65 	bl	8016284 <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20006078 	.word	0x20006078

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f012 fe5b 	bl	8016284 <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20005bc4 	.word	0x20005bc4

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f012 fe51 	bl	8016284 <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005ff8 	.word	0x20005ff8

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f012 fe47 	bl	8016284 <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20005d2c 	.word	0x20005d2c

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f012 fe3d 	bl	8016284 <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20005fb4 	.word	0x20005fb4

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f016 fb1b 	bl	8019c6c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f00c fff7 	bl	80106a8 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f000 ff42 	bl	8004548 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00d f8d0 	bl	80108a0 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f00d ff50 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f00d ff69 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f00d fc03 	bl	8010f2c <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f00d ff43 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f00d ff5c 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f00d fbf6 	bl	8010f2c <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f00d ff33 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f00d ff4c 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00d fbe6 	bl	8010f2c <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f00d ff26 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f00d ff3f 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f00d fbd9 	bl	8010f2c <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d f970 	bl	8010a60 <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20009f30 	.word	0x20009f30
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f00d fa7a 	bl	8010c9e <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f00d f96a 	bl	8010ae8 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 fe95 	bl	8004548 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f00d fa30 	bl	8010c9e <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f00d f925 	bl	8010ae8 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 fe50 	bl	8004548 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00d f90d 	bl	8010ae8 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 fe38 	bl	8004548 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20009f30 	.word	0x20009f30
 8003aa0:	2000a4f0 	.word	0x2000a4f0
 8003aa4:	20006ab8 	.word	0x20006ab8

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006a24 	.word	0x20006a24

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00d fd08 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00d fd1f 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00d fcfc 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00d fd13 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00d fceb 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00d fd02 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00d fcdf 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00d fcf6 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00d fcd2 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00d fce9 	bl	80115f0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00d fcc6 	bl	80115b8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00d fcdd 	bl	80115f0 <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00e fbd8 	bl	80123ec <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fc81 	bl	8004548 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20006b88 	.word	0x20006b88
 8003c54:	40005400 	.word	0x40005400
 8003c58:	20006be4 	.word	0x20006be4
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f00d fc6a 	bl	8011644 <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fbe7 	bl	8004548 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00d fc0e 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00d fc41 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00d fc20 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00d fbf8 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00d fc2b 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00d fc0a 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00d fbe6 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00d fc19 	bl	8011628 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00d fbf8 	bl	80115f0 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d fbb6 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00d fbcd 	bl	80115f0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d fbaa 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d fbc1 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00d fb99 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00d fbb0 	bl	80115f0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00d fb8d 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00d fba4 	bl	80115f0 <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00d fb80 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00d fb97 	bl	80115f0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00d fb74 	bl	80115b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00d fb8b 	bl	80115f0 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f00e fa86 	bl	80123ec <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fb2f 	bl	8004548 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20006b88 	.word	0x20006b88
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	20006be4 	.word	0x20006be4
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f00e fcef 	bl	8012900 <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20006be4 	.word	0x20006be4

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f00e fe52 	bl	8012bda <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20006be4 	.word	0x20006be4

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f00e fcdb 	bl	8012900 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200067d8 	.word	0x200067d8

08003f54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a4      	sub	sp, #144	; 0x90
 8003f58:	af00      	add	r7, sp, #0
	set();
 8003f5a:	f006 fd6b 	bl	800aa34 <set>
	const osThreadAttr_t MainTask_attributes =
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f015 fe80 	bl	8019c6c <memset>
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <main+0xe0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2318      	movs	r3, #24
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f015 fe70 	bl	8019c6c <memset>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <main+0xe4>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	2318      	movs	r3, #24
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 8003f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f015 fe62 	bl	8019c6c <memset>
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xe8>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 1024 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f015 fe55 	bl	8019c6c <memset>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0xec>)
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	2318      	movs	r3, #24
 8003fce:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8003fd0:	f012 ffb8 	bl	8016f44 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <main+0xf0>)
 8003fde:	f012 fffb 	bl	8016fd8 <osThreadNew>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <main+0xf4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <main+0xf8>)
 8003ff2:	f012 fff1 	bl	8016fd8 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <main+0xfc>)
 8003ffa:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8003ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <main+0x100>)
 8004006:	f012 ffe7 	bl	8016fd8 <osThreadNew>
 800400a:	4603      	mov	r3, r0
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <main+0x104>)
 800400e:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004010:	463b      	mov	r3, r7
 8004012:	461a      	mov	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	4811      	ldr	r0, [pc, #68]	; (800405c <main+0x108>)
 8004018:	f012 ffde 	bl	8016fd8 <osThreadNew>
 800401c:	4603      	mov	r3, r0
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <main+0x10c>)
 8004020:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <main+0x110>)
 8004024:	7853      	ldrb	r3, [r2, #1]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800402c:	f012 ffae 	bl	8016f8c <osKernelStart>

	while (1) {
 8004030:	e7fe      	b.n	8004030 <main+0xdc>
 8004032:	bf00      	nop
 8004034:	0801faa8 	.word	0x0801faa8
 8004038:	0801fab4 	.word	0x0801fab4
 800403c:	0801fac4 	.word	0x0801fac4
 8004040:	0801fad0 	.word	0x0801fad0
 8004044:	08004159 	.word	0x08004159
 8004048:	20007868 	.word	0x20007868
 800404c:	080042ad 	.word	0x080042ad
 8004050:	200072a0 	.word	0x200072a0
 8004054:	080043b1 	.word	0x080043b1
 8004058:	20009ec4 	.word	0x20009ec4
 800405c:	08004465 	.word	0x08004465
 8004060:	20009db8 	.word	0x20009db8
 8004064:	40020814 	.word	0x40020814

08004068 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 8004068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800406c:	b088      	sub	sp, #32
 800406e:	af08      	add	r7, sp, #32

	static int counter = 0;
	counter++;
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 8004078:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 800407a:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d147      	bne.n	8004116 <TIM6_DAC_IRQHandler+0xae>
	{
		led1 = !led1;
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <TIM6_DAC_IRQHandler+0xcc>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM6_DAC_IRQHandler+0xcc>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7853      	ldrb	r3, [r2, #1]
 800409e:	f361 1345 	bfi	r3, r1, #5, #1
 80040a2:	7053      	strb	r3, [r2, #1]
		counter = 0;
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <TIM6_DAC_IRQHandler+0xc8>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}

		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	4682      	mov	sl, r0
 80040b6:	468b      	mov	fp, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040b8:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	4604      	mov	r4, r0
 80040c4:	460d      	mov	r5, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc);
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 80040c8:	691b      	ldr	r3, [r3, #16]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld\n",
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	4680      	mov	r8, r0
 80040d2:	4689      	mov	r9, r1
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <TIM6_DAC_IRQHandler+0xd4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fa35 	bl	8000548 <__aeabi_f2d>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4917      	ldr	r1, [pc, #92]	; (8004140 <TIM6_DAC_IRQHandler+0xd8>)
 80040e4:	6809      	ldr	r1, [r1, #0]
 80040e6:	9106      	str	r1, [sp, #24]
 80040e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80040f0:	e9cd 4500 	strd	r4, r5, [sp]
 80040f4:	4652      	mov	r2, sl
 80040f6:	465b      	mov	r3, fp
 80040f8:	4912      	ldr	r1, [pc, #72]	; (8004144 <TIM6_DAC_IRQHandler+0xdc>)
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 80040fc:	f016 fd72 	bl	801abe4 <siprintf>
//		sprintf((char*) debug, "Left: %.2f Right: %.2f VESC: %.2f\n",
//				vesc1.vel, vesc2.vel, vesc_speed);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 8004100:	4811      	ldr	r0, [pc, #68]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 8004102:	f7fc f865 	bl	80001d0 <strlen>
 8004106:	4603      	mov	r3, r0
 8004108:	b29a      	uxth	r2, r3
 800410a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410e:	490e      	ldr	r1, [pc, #56]	; (8004148 <TIM6_DAC_IRQHandler+0xe0>)
 8004110:	480e      	ldr	r0, [pc, #56]	; (800414c <TIM6_DAC_IRQHandler+0xe4>)
 8004112:	f011 ffc8 	bl	80160a6 <HAL_UART_Transmit>
//	}
//
//	flywheelPID(vesc_speed);
//	flywheelAct();

	PathPlan(&pp);
 8004116:	4808      	ldr	r0, [pc, #32]	; (8004138 <TIM6_DAC_IRQHandler+0xd0>)
 8004118:	f001 fefa 	bl	8005f10 <PathPlan>
	CheckPickEnc();
 800411c:	f007 fc98 	bl	800ba50 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <TIM6_DAC_IRQHandler+0xe8>)
 8004122:	f011 f919 	bl	8015358 <HAL_TIM_IRQHandler>

}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	200002c0 	.word	0x200002c0
 8004134:	40020814 	.word	0x40020814
 8004138:	20006cc4 	.word	0x20006cc4
 800413c:	20007380 	.word	0x20007380
 8004140:	20006be0 	.word	0x20006be0
 8004144:	0801fae0 	.word	0x0801fae0
 8004148:	20007488 	.word	0x20007488
 800414c:	20005d2c 	.word	0x20005d2c
 8004150:	20005ef4 	.word	0x20005ef4
 8004154:	00000000 	.word	0x00000000

08004158 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004160:	f006 ff78 	bl	800b054 <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 8004164:	4b4c      	ldr	r3, [pc, #304]	; (8004298 <MainTask+0x140>)
 8004166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d110      	bne.n	800418e <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 800416c:	bf00      	nop
 800416e:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <MainTask+0x140>)
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d0fb      	beq.n	800416e <MainTask+0x16>
			mode++;
 8004176:	4b49      	ldr	r3, [pc, #292]	; (800429c <MainTask+0x144>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a47      	ldr	r2, [pc, #284]	; (800429c <MainTask+0x144>)
 800417e:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 8004180:	4b46      	ldr	r3, [pc, #280]	; (800429c <MainTask+0x144>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	dd02      	ble.n	800418e <MainTask+0x36>
				mode = 0;
 8004188:	4b44      	ldr	r3, [pc, #272]	; (800429c <MainTask+0x144>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <MainTask+0x140>)
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d12b      	bne.n	80041f0 <MainTask+0x98>
		{
			while(ps4.button == L1);
 8004198:	bf00      	nop
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <MainTask+0x140>)
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d0fa      	beq.n	800419a <MainTask+0x42>
			vesc_speed += 0.05;
 80041a4:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <MainTask+0x148>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f9cd 	bl	8000548 <__aeabi_f2d>
 80041ae:	a336      	add	r3, pc, #216	; (adr r3, 8004288 <MainTask+0x130>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc f86a 	bl	800028c <__adddf3>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	f7fc fd12 	bl	8000be8 <__aeabi_d2f>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4a36      	ldr	r2, [pc, #216]	; (80042a0 <MainTask+0x148>)
 80041c8:	6013      	str	r3, [r2, #0]
			vesc_duty += 0.0025;
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <MainTask+0x14c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f9ba 	bl	8000548 <__aeabi_f2d>
 80041d4:	a32e      	add	r3, pc, #184	; (adr r3, 8004290 <MainTask+0x138>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fc f857 	bl	800028c <__adddf3>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7fc fcff 	bl	8000be8 <__aeabi_d2f>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <MainTask+0x14c>)
 80041ee:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, 10);
		}

		if(ps4.button == R1)
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <MainTask+0x140>)
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f8:	d12b      	bne.n	8004252 <MainTask+0xfa>
		{
			while(ps4.button == R1);
 80041fa:	bf00      	nop
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <MainTask+0x140>)
 80041fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	d0fa      	beq.n	80041fc <MainTask+0xa4>
			vesc_speed -= 0.05;
 8004206:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <MainTask+0x148>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f99c 	bl	8000548 <__aeabi_f2d>
 8004210:	a31d      	add	r3, pc, #116	; (adr r3, 8004288 <MainTask+0x130>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc f837 	bl	8000288 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f7fc fce1 	bl	8000be8 <__aeabi_d2f>
 8004226:	4603      	mov	r3, r0
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <MainTask+0x148>)
 800422a:	6013      	str	r3, [r2, #0]
			vesc_duty -= 0.0025;
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <MainTask+0x14c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f989 	bl	8000548 <__aeabi_f2d>
 8004236:	a316      	add	r3, pc, #88	; (adr r3, 8004290 <MainTask+0x138>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc f824 	bl	8000288 <__aeabi_dsub>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fcce 	bl	8000be8 <__aeabi_d2f>
 800424c:	4603      	mov	r3, r0
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <MainTask+0x14c>)
 8004250:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, -10);
		}

		switch (mode)
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <MainTask+0x144>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d00f      	beq.n	800427a <MainTask+0x122>
 800425a:	2b02      	cmp	r3, #2
 800425c:	dc82      	bgt.n	8004164 <MainTask+0xc>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <MainTask+0x110>
 8004262:	2b01      	cmp	r3, #1
 8004264:	d003      	beq.n	800426e <MainTask+0x116>
 8004266:	e00b      	b.n	8004280 <MainTask+0x128>
		{
			case NORMAL:
				NormalControl();
 8004268:	f006 ff9e 	bl	800b1a8 <NormalControl>
			break;
 800426c:	e008      	b.n	8004280 <MainTask+0x128>

			case AUTO:
				Auto();
 800426e:	f007 f9ff 	bl	800b670 <Auto>
				LidarControl(&lidar);
 8004272:	480d      	ldr	r0, [pc, #52]	; (80042a8 <MainTask+0x150>)
 8004274:	f00b fecc 	bl	8010010 <LidarControl>
			break;
 8004278:	e002      	b.n	8004280 <MainTask+0x128>

			case TUNE:
				tune();
 800427a:	f008 f8e5 	bl	800c448 <tune>
			break;
 800427e:	bf00      	nop
		if (ps4.button == SELECT)
 8004280:	e770      	b.n	8004164 <MainTask+0xc>
 8004282:	bf00      	nop
 8004284:	f3af 8000 	nop.w
 8004288:	9999999a 	.word	0x9999999a
 800428c:	3fa99999 	.word	0x3fa99999
 8004290:	47ae147b 	.word	0x47ae147b
 8004294:	3f647ae1 	.word	0x3f647ae1
 8004298:	2000a014 	.word	0x2000a014
 800429c:	200092d0 	.word	0x200092d0
 80042a0:	2000659c 	.word	0x2000659c
 80042a4:	20007380 	.word	0x20007380
 80042a8:	20009030 	.word	0x20009030

080042ac <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		if(!load_start && !set_pick_enc && !reload)
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <NaviTask+0xd0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d115      	bne.n	80042e8 <NaviTask+0x3c>
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <NaviTask+0xd4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d111      	bne.n	80042e8 <NaviTask+0x3c>
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <NaviTask+0xd8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <NaviTask+0x3c>
			pick_manual(ps4.joyR_y * 14000);
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <NaviTask+0xdc>)
 80042ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80042d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800438c <NaviTask+0xe0>
 80042d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042de:	ee17 1a90 	vmov	r1, s15
 80042e2:	482b      	ldr	r0, [pc, #172]	; (8004390 <NaviTask+0xe4>)
 80042e4:	f7fc ff51 	bl	800118a <WriteBDC>

		VESCPDC(vesc_duty, &vesc1);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <NaviTask+0xe8>)
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	482a      	ldr	r0, [pc, #168]	; (8004398 <NaviTask+0xec>)
 80042f0:	eeb0 0a67 	vmov.f32	s0, s15
 80042f4:	f009 fa0c 	bl	800d710 <VESCPDC>
		VESCPDC(vesc_duty, &vesc2);
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <NaviTask+0xe8>)
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	4827      	ldr	r0, [pc, #156]	; (800439c <NaviTask+0xf0>)
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	f009 fa04 	bl	800d710 <VESCPDC>
//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0 && !In_LS_Shot_1 && !In_LS_Shot_2)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);
//		else if(stick_fence && In_LS_Shot_1 && In_LS_Shot_2)
//			RNSStop(&rns);

		enq();
 8004308:	f008 f880 	bl	800c40c <enq>
		pick_enc = QEIRead(QEI1);
 800430c:	2001      	movs	r0, #1
 800430e:	f7fd fcdd 	bl	8001ccc <QEIRead>
 8004312:	4603      	mov	r3, r0
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <NaviTask+0xf4>)
 8004316:	6013      	str	r3, [r2, #0]

		if(!pp.pp_start && !vel_adjust)
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <NaviTask+0xf8>)
 800431a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <NaviTask+0x8e>
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <NaviTask+0xfc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <NaviTask+0x8e>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 8004330:	491e      	ldr	r1, [pc, #120]	; (80043ac <NaviTask+0x100>)
 8004332:	4815      	ldr	r0, [pc, #84]	; (8004388 <NaviTask+0xdc>)
 8004334:	f000 f96c 	bl	8004610 <realMODN>
 8004338:	e01e      	b.n	8004378 <NaviTask+0xcc>
		}
		else if(pp.pp_start)
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <NaviTask+0xf8>)
 800433c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0b4      	beq.n	80042b4 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <NaviTask+0xf8>)
 800434c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <NaviTask+0xf8>)
 8004352:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <NaviTask+0xf8>)
 8004358:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <NaviTask+0xf8>)
 800435e:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004362:	4812      	ldr	r0, [pc, #72]	; (80043ac <NaviTask+0x100>)
 8004364:	eef0 1a46 	vmov.f32	s3, s12
 8004368:	eeb0 1a66 	vmov.f32	s2, s13
 800436c:	eef0 0a47 	vmov.f32	s1, s14
 8004370:	eeb0 0a67 	vmov.f32	s0, s15
 8004374:	f005 f928 	bl	80095c8 <RNSVelocity>
		if(!load_start && !set_pick_enc && !reload)
 8004378:	e79c      	b.n	80042b4 <NaviTask+0x8>
 800437a:	bf00      	nop
 800437c:	20007348 	.word	0x20007348
 8004380:	20007730 	.word	0x20007730
 8004384:	2000774c 	.word	0x2000774c
 8004388:	2000a014 	.word	0x2000a014
 800438c:	465ac000 	.word	0x465ac000
 8004390:	2000770c 	.word	0x2000770c
 8004394:	20007380 	.word	0x20007380
 8004398:	20006b04 	.word	0x20006b04
 800439c:	2000997c 	.word	0x2000997c
 80043a0:	20006be0 	.word	0x20006be0
 80043a4:	20006cc4 	.word	0x20006cc4
 80043a8:	20009028 	.word	0x20009028
 80043ac:	20008f08 	.word	0x20008f08

080043b0 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 80043b8:	f007 ff82 	bl	800c2c0 <Checking>
//		else
//		{
//			led4_off;
//		}

		if(blue)
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <CheckingTask+0x98>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <CheckingTask+0x20>
		{
			led4_on;
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <CheckingTask+0x9c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
 80043ce:	e003      	b.n	80043d8 <CheckingTask+0x28>
		}
		else
		{
			led4_off;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <CheckingTask+0x9c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
//		else
//		{
//			led5_off;
//		}

		if(In_Load)
 80043d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043dc:	481c      	ldr	r0, [pc, #112]	; (8004450 <CheckingTask+0xa0>)
 80043de:	f00d ffd3 	bl	8012388 <HAL_GPIO_ReadPin>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <CheckingTask+0x44>
		{
			led6_on;
 80043e8:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <CheckingTask+0xa4>)
 80043ea:	7e13      	ldrb	r3, [r2, #24]
 80043ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f0:	7613      	strb	r3, [r2, #24]
 80043f2:	e004      	b.n	80043fe <CheckingTask+0x4e>
		}
		else
		{
			led6_off;
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <CheckingTask+0xa4>)
 80043f6:	7e13      	ldrb	r3, [r2, #24]
 80043f8:	f36f 1386 	bfc	r3, #6, #1
 80043fc:	7613      	strb	r3, [r2, #24]
//		else
//		{
//			led7_off;
//		}

		if(led_enb)
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <CheckingTask+0xa8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0d8      	beq.n	80043b8 <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 8004406:	f00c f943 	bl	8010690 <HAL_GetTick>
 800440a:	4603      	mov	r3, r0
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <CheckingTask+0xac>)
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <CheckingTask+0xb0>)
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4293      	cmp	r3, r2
 8004418:	d3ce      	bcc.n	80043b8 <CheckingTask+0x8>
			{
				led8 = !led8;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <CheckingTask+0xa4>)
 800441c:	7e1b      	ldrb	r3, [r3, #24]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <CheckingTask+0xa4>)
 8004430:	7e13      	ldrb	r3, [r2, #24]
 8004432:	f361 1345 	bfi	r3, r1, #5, #1
 8004436:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 8004438:	f00c f92a 	bl	8010690 <HAL_GetTick>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <CheckingTask+0xac>)
 8004442:	601a      	str	r2, [r3, #0]
		Checking();
 8004444:	e7b8      	b.n	80043b8 <CheckingTask+0x8>
 8004446:	bf00      	nop
 8004448:	20006a1c 	.word	0x20006a1c
 800444c:	20005ca8 	.word	0x20005ca8
 8004450:	40021000 	.word	0x40021000
 8004454:	2000959c 	.word	0x2000959c
 8004458:	2000a5e0 	.word	0x2000a5e0
 800445c:	20006ad4 	.word	0x20006ad4
 8004460:	2000a388 	.word	0x2000a388

08004464 <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

	while (1) {

		if (ps4.button == TOUCH) {
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <EmergencyTask+0x80>)
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004474:	d1fa      	bne.n	800446c <EmergencyTask+0x8>
//			led3 = 1;
			RNSStop(&rns);
 8004476:	481c      	ldr	r0, [pc, #112]	; (80044e8 <EmergencyTask+0x84>)
 8004478:	f005 f822 	bl	80094c0 <RNSStop>
			PP_stop(&pp);
 800447c:	481b      	ldr	r0, [pc, #108]	; (80044ec <EmergencyTask+0x88>)
 800447e:	f001 fcbc 	bl	8005dfa <PP_stop>
			pitch_stop;
 8004482:	2100      	movs	r1, #0
 8004484:	481a      	ldr	r0, [pc, #104]	; (80044f0 <EmergencyTask+0x8c>)
 8004486:	f7fc fe80 	bl	800118a <WriteBDC>
			pick_stop;
 800448a:	2100      	movs	r1, #0
 800448c:	4819      	ldr	r0, [pc, #100]	; (80044f4 <EmergencyTask+0x90>)
 800448e:	f7fc fe7c 	bl	800118a <WriteBDC>
//			flywheelStop();
			push_stop;
 8004492:	2100      	movs	r1, #0
 8004494:	4818      	ldr	r0, [pc, #96]	; (80044f8 <EmergencyTask+0x94>)
 8004496:	f7fc fe78 	bl	800118a <WriteBDC>
			vesc_duty = 0.0;
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <EmergencyTask+0x98>)
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
//			ResetPickEnc();
			osThreadTerminate(MainTaskHandle);
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <EmergencyTask+0x9c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f012 fe28 	bl	80170fc <osThreadTerminate>
			osDelay(5);
 80044ac:	2005      	movs	r0, #5
 80044ae:	f012 fe52 	bl	8017156 <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f015 fbd6 	bl	8019c6c <memset>
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <EmergencyTask+0xa0>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	2318      	movs	r3, #24
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	461a      	mov	r2, r3
 80044d4:	2100      	movs	r1, #0
 80044d6:	480c      	ldr	r0, [pc, #48]	; (8004508 <EmergencyTask+0xa4>)
 80044d8:	f012 fd7e 	bl	8016fd8 <osThreadNew>
 80044dc:	4603      	mov	r3, r0
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <EmergencyTask+0x9c>)
 80044e0:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 80044e2:	e7c3      	b.n	800446c <EmergencyTask+0x8>
 80044e4:	2000a014 	.word	0x2000a014
 80044e8:	20008f08 	.word	0x20008f08
 80044ec:	20006cc4 	.word	0x20006cc4
 80044f0:	20006c44 	.word	0x20006c44
 80044f4:	2000770c 	.word	0x2000770c
 80044f8:	20009674 	.word	0x20009674
 80044fc:	20007380 	.word	0x20007380
 8004500:	20007868 	.word	0x20007868
 8004504:	0801faa8 	.word	0x0801faa8
 8004508:	08004159 	.word	0x08004159

0800450c <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_UART_RxCpltCallback+0x34>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d102      	bne.n	8004524 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800451e:	4808      	ldr	r0, [pc, #32]	; (8004540 <HAL_UART_RxCpltCallback+0x34>)
 8004520:	f004 fea4 	bl	800926c <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_UART_RxCpltCallback+0x38>)
 8004526:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d102      	bne.n	8004536 <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 8004530:	4804      	ldr	r0, [pc, #16]	; (8004544 <HAL_UART_RxCpltCallback+0x38>)
 8004532:	f00b fe45 	bl	80101c0 <ObstacleHandler>
	}
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20006c68 	.word	0x20006c68
 8004544:	20009030 	.word	0x20009030

08004548 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	ed87 0a04 	vstr	s0, [r7, #16]
 8004564:	edc7 0a03 	vstr	s1, [r7, #12]
 8004568:	ed87 1a02 	vstr	s2, [r7, #8]
 800456c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004570:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004572:	4a23      	ldr	r2, [pc, #140]	; (8004600 <MODNInit+0xa8>)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <MODNInit+0xa8>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <MODNInit+0xa8>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f7fb ffde 	bl	8000548 <__aeabi_f2d>
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MODNInit+0xac>)
 8004592:	f7fc f95b 	bl	800084c <__aeabi_ddiv>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	a316      	add	r3, pc, #88	; (adr r3, 80045f8 <MODNInit+0xa0>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fc f828 	bl	80005f8 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fc fb1a 	bl	8000be8 <__aeabi_d2f>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <MODNInit+0xa8>)
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 80045ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80045be:	edd7 7a01 	vldr	s15, [r7, #4]
 80045c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <MODNInit+0xa8>)
 80045c8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80045cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <MODNInit+0xa8>)
 80045d2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <MODNInit+0xa8>)
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = OPERATOR_TURNED_0_DEGREE;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <MODNInit+0xa8>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <MODNInit+0xa8>)
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <MODNInit+0xa8>)
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <MODNInit+0xa8>)
 80045ec:	4a06      	ldr	r2, [pc, #24]	; (8004608 <MODNInit+0xb0>)
 80045ee:	649a      	str	r2, [r3, #72]	; 0x48
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	54442eea 	.word	0x54442eea
 80045fc:	400921fb 	.word	0x400921fb
 8004600:	20006a6c 	.word	0x20006a6c
 8004604:	40668000 	.word	0x40668000
 8004608:	20006a70 	.word	0x20006a70
 800460c:	00000000 	.word	0x00000000

08004610 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	ed2d 8b02 	vpush	{d8}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation)
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <realMODN+0x158>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b03      	cmp	r3, #3
 8004624:	d86e      	bhi.n	8004704 <realMODN+0xf4>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <realMODN+0x1c>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800466f 	.word	0x0800466f
 8004634:	0800469d 	.word	0x0800469d
 8004638:	080046cf 	.word	0x080046cf
	{
		case OPERATOR_TURNED_0_DEGREE:
			MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004642:	eeb1 7a67 	vneg.f32	s14, s15
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <realMODN+0x158>)
 8004648:	edd3 7a07 	vldr	s15, [r3, #28]
 800464c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004650:	4b45      	ldr	r3, [pc, #276]	; (8004768 <realMODN+0x158>)
 8004652:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <realMODN+0x158>)
 800465e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	4b40      	ldr	r3, [pc, #256]	; (8004768 <realMODN+0x158>)
 8004668:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800466c:	e04a      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
			MODN.x_vel =  psx->joyL_y * MODN.speed;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004674:	4b3c      	ldr	r3, [pc, #240]	; (8004768 <realMODN+0x158>)
 8004676:	edd3 7a07 	vldr	s15, [r3, #28]
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <realMODN+0x158>)
 8004680:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <realMODN+0x158>)
 800468c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <realMODN+0x158>)
 8004696:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800469a:	e033      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_180_DEGREES:
			MODN.x_vel =  psx->joyL_x * MODN.speed;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <realMODN+0x158>)
 80046a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <realMODN+0x158>)
 80046ae:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_y * MODN.speed;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046b8:	eeb1 7a67 	vneg.f32	s14, s15
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <realMODN+0x158>)
 80046be:	edd3 7a07 	vldr	s15, [r3, #28]
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <realMODN+0x158>)
 80046c8:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80046cc:	e01a      	b.n	8004704 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
			MODN.x_vel = -psx->joyL_y * MODN.speed;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046d4:	eeb1 7a67 	vneg.f32	s14, s15
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <realMODN+0x158>)
 80046da:	edd3 7a07 	vldr	s15, [r3, #28]
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <realMODN+0x158>)
 80046e4:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_x * MODN.speed;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80046ee:	eeb1 7a67 	vneg.f32	s14, s15
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <realMODN+0x158>)
 80046f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80046f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <realMODN+0x158>)
 80046fe:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004702:	bf00      	nop
	}

	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004710:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <realMODN+0x158>)
 8004716:	edd3 7a07 	vldr	s15, [r3, #28]
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <realMODN+0x158>)
 8004720:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <realMODN+0x158>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d11b      	bne.n	800476c <realMODN+0x15c>
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <realMODN+0x158>)
 8004736:	edd3 7a01 	vldr	s15, [r3, #4]
 800473a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d113      	bne.n	800476c <realMODN+0x15c>
 8004744:	4b08      	ldr	r3, [pc, #32]	; (8004768 <realMODN+0x158>)
 8004746:	edd3 7a02 	vldr	s15, [r3, #8]
 800474a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d10b      	bne.n	800476c <realMODN+0x15c>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800475a:	2b01      	cmp	r3, #1
 800475c:	f000 8226 	beq.w	8004bac <realMODN+0x59c>
			RNSStop(rns);
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f004 fead 	bl	80094c0 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004766:	e221      	b.n	8004bac <realMODN+0x59c>
 8004768:	20006a6c 	.word	0x20006a6c
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 800476c:	4ba2      	ldr	r3, [pc, #648]	; (80049f8 <realMODN+0x3e8>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 8004772:	4ba2      	ldr	r3, [pc, #648]	; (80049fc <realMODN+0x3ec>)
 8004774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8141 	bne.w	8004a00 <realMODN+0x3f0>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 800477e:	4b9f      	ldr	r3, [pc, #636]	; (80049fc <realMODN+0x3ec>)
 8004780:	ed93 8a00 	vldr	s16, [r3]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7fb fedf 	bl	8000548 <__aeabi_f2d>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	a196      	add	r1, pc, #600	; (adr r1, 80049e8 <realMODN+0x3d8>)
 8004790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004794:	f7fb fd78 	bl	8000288 <__aeabi_dsub>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa22 	bl	8000be8 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	ee00 3a10 	vmov	s0, r3
 80047aa:	f019 ffdd 	bl	801e768 <cosf>
 80047ae:	eef0 7a40 	vmov.f32	s15, s0
 80047b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80047b6:	4b91      	ldr	r3, [pc, #580]	; (80049fc <realMODN+0x3ec>)
 80047b8:	edd3 8a01 	vldr	s17, [r3, #4]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7fb fec3 	bl	8000548 <__aeabi_f2d>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	a188      	add	r1, pc, #544	; (adr r1, 80049e8 <realMODN+0x3d8>)
 80047c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047cc:	f7fb fd5c 	bl	8000288 <__aeabi_dsub>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f7fc fa06 	bl	8000be8 <__aeabi_d2f>
 80047dc:	4603      	mov	r3, r0
 80047de:	ee00 3a10 	vmov	s0, r3
 80047e2:	f01a f809 	bl	801e7f8 <sinf>
 80047e6:	eef0 7a40 	vmov.f32	s15, s0
 80047ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80047ee:	ee38 7a27 	vadd.f32	s14, s16, s15
 80047f2:	4b82      	ldr	r3, [pc, #520]	; (80049fc <realMODN+0x3ec>)
 80047f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80047f8:	4b80      	ldr	r3, [pc, #512]	; (80049fc <realMODN+0x3ec>)
 80047fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80047fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	4b7d      	ldr	r3, [pc, #500]	; (80049fc <realMODN+0x3ec>)
 8004808:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800480c:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <realMODN+0x3ec>)
 800480e:	ed93 8a00 	vldr	s16, [r3]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7fb fe98 	bl	8000548 <__aeabi_f2d>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	a174      	add	r1, pc, #464	; (adr r1, 80049f0 <realMODN+0x3e0>)
 800481e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004822:	f7fb fd31 	bl	8000288 <__aeabi_dsub>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	f7fc f9db 	bl	8000be8 <__aeabi_d2f>
 8004832:	4603      	mov	r3, r0
 8004834:	ee00 3a10 	vmov	s0, r3
 8004838:	f019 ff96 	bl	801e768 <cosf>
 800483c:	eef0 7a40 	vmov.f32	s15, s0
 8004840:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <realMODN+0x3ec>)
 8004846:	edd3 8a01 	vldr	s17, [r3, #4]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7fb fe7c 	bl	8000548 <__aeabi_f2d>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	a166      	add	r1, pc, #408	; (adr r1, 80049f0 <realMODN+0x3e0>)
 8004856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800485a:	f7fb fd15 	bl	8000288 <__aeabi_dsub>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f7fc f9bf 	bl	8000be8 <__aeabi_d2f>
 800486a:	4603      	mov	r3, r0
 800486c:	ee00 3a10 	vmov	s0, r3
 8004870:	f019 ffc2 	bl	801e7f8 <sinf>
 8004874:	eef0 7a40 	vmov.f32	s15, s0
 8004878:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800487c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <realMODN+0x3ec>)
 8004882:	edd3 6a02 	vldr	s13, [r3, #8]
 8004886:	4b5d      	ldr	r3, [pc, #372]	; (80049fc <realMODN+0x3ec>)
 8004888:	edd3 7a08 	vldr	s15, [r3, #32]
 800488c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004894:	4b59      	ldr	r3, [pc, #356]	; (80049fc <realMODN+0x3ec>)
 8004896:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 800489a:	4b58      	ldr	r3, [pc, #352]	; (80049fc <realMODN+0x3ec>)
 800489c:	ed93 8a00 	vldr	s16, [r3]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7fb fe51 	bl	8000548 <__aeabi_f2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	a151      	add	r1, pc, #324	; (adr r1, 80049f0 <realMODN+0x3e0>)
 80048ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b0:	f7fb fcea 	bl	8000288 <__aeabi_dsub>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7fc f994 	bl	8000be8 <__aeabi_d2f>
 80048c0:	4603      	mov	r3, r0
 80048c2:	ee00 3a10 	vmov	s0, r3
 80048c6:	f019 ff4f 	bl	801e768 <cosf>
 80048ca:	eef0 7a40 	vmov.f32	s15, s0
 80048ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <realMODN+0x3ec>)
 80048d4:	edd3 8a01 	vldr	s17, [r3, #4]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7fb fe35 	bl	8000548 <__aeabi_f2d>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	a143      	add	r1, pc, #268	; (adr r1, 80049f0 <realMODN+0x3e0>)
 80048e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e8:	f7fb fcce 	bl	8000288 <__aeabi_dsub>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fc f978 	bl	8000be8 <__aeabi_d2f>
 80048f8:	4603      	mov	r3, r0
 80048fa:	ee00 3a10 	vmov	s0, r3
 80048fe:	f019 ff7b 	bl	801e7f8 <sinf>
 8004902:	eef0 7a40 	vmov.f32	s15, s0
 8004906:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800490a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <realMODN+0x3ec>)
 8004910:	edd3 6a02 	vldr	s13, [r3, #8]
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <realMODN+0x3ec>)
 8004916:	edd3 7a08 	vldr	s15, [r3, #32]
 800491a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800491e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <realMODN+0x3ec>)
 8004924:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8004928:	4b34      	ldr	r3, [pc, #208]	; (80049fc <realMODN+0x3ec>)
 800492a:	ed93 8a00 	vldr	s16, [r3]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7fb fe0a 	bl	8000548 <__aeabi_f2d>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	a12b      	add	r1, pc, #172	; (adr r1, 80049e8 <realMODN+0x3d8>)
 800493a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800493e:	f7fb fca3 	bl	8000288 <__aeabi_dsub>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f7fc f94d 	bl	8000be8 <__aeabi_d2f>
 800494e:	4603      	mov	r3, r0
 8004950:	ee00 3a10 	vmov	s0, r3
 8004954:	f019 ff08 	bl	801e768 <cosf>
 8004958:	eef0 7a40 	vmov.f32	s15, s0
 800495c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004960:	4b26      	ldr	r3, [pc, #152]	; (80049fc <realMODN+0x3ec>)
 8004962:	edd3 8a01 	vldr	s17, [r3, #4]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7fb fdee 	bl	8000548 <__aeabi_f2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	a11d      	add	r1, pc, #116	; (adr r1, 80049e8 <realMODN+0x3d8>)
 8004972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004976:	f7fb fc87 	bl	8000288 <__aeabi_dsub>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	f7fc f931 	bl	8000be8 <__aeabi_d2f>
 8004986:	4603      	mov	r3, r0
 8004988:	ee00 3a10 	vmov	s0, r3
 800498c:	f019 ff34 	bl	801e7f8 <sinf>
 8004990:	eef0 7a40 	vmov.f32	s15, s0
 8004994:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004998:	ee38 7a27 	vadd.f32	s14, s16, s15
 800499c:	4b17      	ldr	r3, [pc, #92]	; (80049fc <realMODN+0x3ec>)
 800499e:	edd3 6a02 	vldr	s13, [r3, #8]
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <realMODN+0x3ec>)
 80049a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80049a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <realMODN+0x3ec>)
 80049b2:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <realMODN+0x3ec>)
 80049b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <realMODN+0x3ec>)
 80049be:	ed93 7a04 	vldr	s14, [r3, #16]
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <realMODN+0x3ec>)
 80049c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <realMODN+0x3ec>)
 80049ca:	ed93 6a06 	vldr	s12, [r3, #24]
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	eef0 1a46 	vmov.f32	s3, s12
 80049d4:	eeb0 1a66 	vmov.f32	s2, s13
 80049d8:	eef0 0a47 	vmov.f32	s1, s14
 80049dc:	eeb0 0a67 	vmov.f32	s0, s15
 80049e0:	f004 fdf2 	bl	80095c8 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 80049e4:	e0e2      	b.n	8004bac <realMODN+0x59c>
 80049e6:	bf00      	nop
 80049e8:	2e48e8a7 	.word	0x2e48e8a7
 80049ec:	3fe921ff 	.word	0x3fe921ff
 80049f0:	62b6ae7d 	.word	0x62b6ae7d
 80049f4:	4002d97f 	.word	0x4002d97f
 80049f8:	20006cc4 	.word	0x20006cc4
 80049fc:	20006a6c 	.word	0x20006a6c
		else if (MODN.base == MODN_TRI_OMNI){
 8004a00:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <realMODN+0x5b8>)
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	f040 80d0 	bne.w	8004bac <realMODN+0x59c>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004a0c:	4b6e      	ldr	r3, [pc, #440]	; (8004bc8 <realMODN+0x5b8>)
 8004a0e:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a16:	eef1 7a67 	vneg.f32	s15, s15
 8004a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1e:	f019 feeb 	bl	801e7f8 <sinf>
 8004a22:	eef0 7a40 	vmov.f32	s15, s0
 8004a26:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a2a:	4b67      	ldr	r3, [pc, #412]	; (8004bc8 <realMODN+0x5b8>)
 8004a2c:	edd3 8a00 	vldr	s17, [r3]
 8004a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a34:	eef1 7a67 	vneg.f32	s15, s15
 8004a38:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3c:	f019 fe94 	bl	801e768 <cosf>
 8004a40:	eef0 7a40 	vmov.f32	s15, s0
 8004a44:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a48:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <realMODN+0x5b8>)
 8004a4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <realMODN+0x5b8>)
 8004a54:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <realMODN+0x5b8>)
 8004a62:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8004a66:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <realMODN+0x5b8>)
 8004a68:	ed93 8a01 	vldr	s16, [r3, #4]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fb fd6b 	bl	8000548 <__aeabi_f2d>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	a150      	add	r1, pc, #320	; (adr r1, 8004bb8 <realMODN+0x5a8>)
 8004a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7c:	f7fb fc04 	bl	8000288 <__aeabi_dsub>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f8ae 	bl	8000be8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	ee00 3a10 	vmov	s0, r3
 8004a92:	f019 feb1 	bl	801e7f8 <sinf>
 8004a96:	eef0 7a40 	vmov.f32	s15, s0
 8004a9a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <realMODN+0x5b8>)
 8004aa0:	edd3 8a00 	vldr	s17, [r3]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7fb fd4f 	bl	8000548 <__aeabi_f2d>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	a142      	add	r1, pc, #264	; (adr r1, 8004bb8 <realMODN+0x5a8>)
 8004ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab4:	f7fb fbe8 	bl	8000288 <__aeabi_dsub>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f7fc f892 	bl	8000be8 <__aeabi_d2f>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	ee00 3a10 	vmov	s0, r3
 8004aca:	f019 fe4d 	bl	801e768 <cosf>
 8004ace:	eef0 7a40 	vmov.f32	s15, s0
 8004ad2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ad6:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <realMODN+0x5b8>)
 8004adc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <realMODN+0x5b8>)
 8004ae2:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <realMODN+0x5b8>)
 8004af0:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004af4:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <realMODN+0x5b8>)
 8004af6:	ed93 8a01 	vldr	s16, [r3, #4]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7fb fd24 	bl	8000548 <__aeabi_f2d>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	a12e      	add	r1, pc, #184	; (adr r1, 8004bc0 <realMODN+0x5b0>)
 8004b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b0a:	f7fb fbbd 	bl	8000288 <__aeabi_dsub>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	f7fc f867 	bl	8000be8 <__aeabi_d2f>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	ee00 3a10 	vmov	s0, r3
 8004b20:	f019 fe6a 	bl	801e7f8 <sinf>
 8004b24:	eef0 7a40 	vmov.f32	s15, s0
 8004b28:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b2c:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <realMODN+0x5b8>)
 8004b2e:	edd3 8a00 	vldr	s17, [r3]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7fb fd08 	bl	8000548 <__aeabi_f2d>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	a120      	add	r1, pc, #128	; (adr r1, 8004bc0 <realMODN+0x5b0>)
 8004b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b42:	f7fb fba1 	bl	8000288 <__aeabi_dsub>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f7fc f84b 	bl	8000be8 <__aeabi_d2f>
 8004b52:	4603      	mov	r3, r0
 8004b54:	ee00 3a10 	vmov	s0, r3
 8004b58:	f019 fe06 	bl	801e768 <cosf>
 8004b5c:	eef0 7a40 	vmov.f32	s15, s0
 8004b60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b64:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <realMODN+0x5b8>)
 8004b6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <realMODN+0x5b8>)
 8004b70:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <realMODN+0x5b8>)
 8004b7e:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <realMODN+0x5b8>)
 8004b84:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <realMODN+0x5b8>)
 8004b8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <realMODN+0x5b8>)
 8004b90:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b94:	6838      	ldr	r0, [r7, #0]
 8004b96:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004bcc <realMODN+0x5bc>
 8004b9a:	eeb0 1a66 	vmov.f32	s2, s13
 8004b9e:	eef0 0a47 	vmov.f32	s1, s14
 8004ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ba6:	f004 fd0f 	bl	80095c8 <RNSVelocity>
}
 8004baa:	e7ff      	b.n	8004bac <realMODN+0x59c>
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	ecbd 8b02 	vpop	{d8}
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	c985f06f 	.word	0xc985f06f
 8004bbc:	4000c154 	.word	0x4000c154
 8004bc0:	c985f06f 	.word	0xc985f06f
 8004bc4:	3ff0c154 	.word	0x3ff0c154
 8004bc8:	20006a6c 	.word	0x20006a6c
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <setOrientationMODN+0x1c>)
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20006a6c 	.word	0x20006a6c

08004bf0 <setSpeedMODN>:

void setSpeedMODN(float speed){
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <setSpeedMODN+0x3c>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c10:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <setSpeedMODN+0x3c>)
 8004c1a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20006a6c 	.word	0x20006a6c

08004c30 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	float data=0;
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004c3e:	4b72      	ldr	r3, [pc, #456]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004c44:	231f      	movs	r3, #31
 8004c46:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004c48:	8afa      	ldrh	r2, [r7, #22]
 8004c4a:	8abb      	ldrh	r3, [r7, #20]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d136      	bne.n	8004cc4 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	749a      	strb	r2, [r3, #18]
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c68:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004c6a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	629a      	str	r2, [r3, #40]	; 0x28
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <decode_Odrive+0x1d8>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004c76:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fc60 	bl	8000548 <__aeabi_f2d>
 8004c88:	a35d      	add	r3, pc, #372	; (adr r3, 8004e00 <decode_Odrive+0x1d0>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb fcb3 	bl	80005f8 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4614      	mov	r4, r2
 8004c98:	461d      	mov	r5, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fc52 	bl	8000548 <__aeabi_f2d>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4620      	mov	r0, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	f7fb fca4 	bl	80005f8 <__aeabi_dmul>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fb ff96 	bl	8000be8 <__aeabi_d2f>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004cc2:	e097      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d123      	bne.n	8004d12 <decode_Odrive+0xe2>
 8004cca:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <decode_Odrive+0x1d8>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004cce:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004ce0:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <decode_Odrive+0x1d8>)
 8004ce2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004cec:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <decode_Odrive+0x1d8>)
 8004cee:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d178      	bne.n	8004df4 <decode_Odrive+0x1c4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7c1b      	ldrb	r3, [r3, #16]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d174      	bne.n	8004df4 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	741a      	strb	r2, [r3, #16]
}
 8004d10:	e070      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	2b17      	cmp	r3, #23
 8004d16:	d109      	bne.n	8004d2c <decode_Odrive+0xfc>
 8004d18:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d1c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	745a      	strb	r2, [r3, #17]
}
 8004d2a:	e063      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	2b15      	cmp	r3, #21
 8004d30:	d10f      	bne.n	8004d52 <decode_Odrive+0x122>
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d34:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d36:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d42:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	75da      	strb	r2, [r3, #23]
}
 8004d50:	e050      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	2b14      	cmp	r3, #20
 8004d56:	d10f      	bne.n	8004d78 <decode_Odrive+0x148>
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d5c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	665a      	str	r2, [r3, #100]	; 0x64
 8004d64:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d68:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	755a      	strb	r2, [r3, #21]
}
 8004d76:	e03d      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004d78:	8a7b      	ldrh	r3, [r7, #18]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d128      	bne.n	8004dd0 <decode_Odrive+0x1a0>
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <decode_Odrive+0x1d8>)
 8004d80:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d82:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8c:	ee17 2a90 	vmov	r2, s15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f836 	bl	8004e10 <Odrive_Error_To_String>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4619      	mov	r1, r3
 8004da8:	4620      	mov	r0, r4
 8004daa:	f015 ff7e 	bl	801acaa <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7fb fa0b 	bl	80001d0 <strlen>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4423      	add	r3, r4
 8004dbe:	4913      	ldr	r1, [pc, #76]	; (8004e0c <decode_Odrive+0x1dc>)
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	759a      	strb	r2, [r3, #22]
}
 8004dce:	e011      	b.n	8004df4 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	2b0a      	cmp	r3, #10
 8004dd4:	d10e      	bne.n	8004df4 <decode_Odrive+0x1c4>
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <decode_Odrive+0x1d8>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004dda:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <decode_Odrive+0x1d8>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004de6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	751a      	strb	r2, [r3, #20]
}
 8004df4:	bf00      	nop
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfc:	f3af 8000 	nop.w
 8004e00:	54442d18 	.word	0x54442d18
 8004e04:	400921fb 	.word	0x400921fb
 8004e08:	20006888 	.word	0x20006888
 8004e0c:	0801fbf8 	.word	0x0801fbf8

08004e10 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	f000 80fd 	beq.w	800501c <Odrive_Error_To_String+0x20c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	f200 80fa 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e32:	f000 80f1 	beq.w	8005018 <Odrive_Error_To_String+0x208>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3c:	f200 80f0 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e46:	f000 80e5 	beq.w	8005014 <Odrive_Error_To_String+0x204>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e50:	f200 80e6 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e5a:	f000 80d9 	beq.w	8005010 <Odrive_Error_To_String+0x200>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e64:	f200 80dc 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6e:	f000 80cd 	beq.w	800500c <Odrive_Error_To_String+0x1fc>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e78:	f200 80d2 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	f000 80c1 	beq.w	8005008 <Odrive_Error_To_String+0x1f8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	f200 80c8 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	f000 80b5 	beq.w	8005004 <Odrive_Error_To_String+0x1f4>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	f200 80be 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	f000 80a9 	beq.w	8005000 <Odrive_Error_To_String+0x1f0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb4:	f200 80b4 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	f000 809d 	beq.w	8004ffc <Odrive_Error_To_String+0x1ec>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec8:	f200 80aa 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	f000 8091 	beq.w	8004ff8 <Odrive_Error_To_String+0x1e8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	f200 80a0 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee6:	f000 8085 	beq.w	8004ff4 <Odrive_Error_To_String+0x1e4>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	f200 8096 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efa:	d079      	beq.n	8004ff0 <Odrive_Error_To_String+0x1e0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	f200 808d 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d06e      	beq.n	8004fec <Odrive_Error_To_String+0x1dc>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	f200 8084 	bhi.w	8005020 <Odrive_Error_To_String+0x210>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d063      	beq.n	8004fe8 <Odrive_Error_To_String+0x1d8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	d87b      	bhi.n	8005020 <Odrive_Error_To_String+0x210>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d848      	bhi.n	8004fc0 <Odrive_Error_To_String+0x1b0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d875      	bhi.n	8005020 <Odrive_Error_To_String+0x210>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <Odrive_Error_To_String+0x12c>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004fc9 	.word	0x08004fc9
 8004f40:	08004fcd 	.word	0x08004fcd
 8004f44:	08004fd1 	.word	0x08004fd1
 8004f48:	08005021 	.word	0x08005021
 8004f4c:	08004fd5 	.word	0x08004fd5
 8004f50:	08005021 	.word	0x08005021
 8004f54:	08005021 	.word	0x08005021
 8004f58:	08005021 	.word	0x08005021
 8004f5c:	08004fd9 	.word	0x08004fd9
 8004f60:	08005021 	.word	0x08005021
 8004f64:	08005021 	.word	0x08005021
 8004f68:	08005021 	.word	0x08005021
 8004f6c:	08005021 	.word	0x08005021
 8004f70:	08005021 	.word	0x08005021
 8004f74:	08005021 	.word	0x08005021
 8004f78:	08005021 	.word	0x08005021
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08005021 	.word	0x08005021
 8004f84:	08005021 	.word	0x08005021
 8004f88:	08005021 	.word	0x08005021
 8004f8c:	08005021 	.word	0x08005021
 8004f90:	08005021 	.word	0x08005021
 8004f94:	08005021 	.word	0x08005021
 8004f98:	08005021 	.word	0x08005021
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	08005021 	.word	0x08005021
 8004fa8:	08005021 	.word	0x08005021
 8004fac:	08005021 	.word	0x08005021
 8004fb0:	08005021 	.word	0x08005021
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d00e      	beq.n	8004fe4 <Odrive_Error_To_String+0x1d4>
 8004fc6:	e02b      	b.n	8005020 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <Odrive_Error_To_String+0x220>)
 8004fca:	e02a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <Odrive_Error_To_String+0x224>)
 8004fce:	e028      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <Odrive_Error_To_String+0x228>)
 8004fd2:	e026      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <Odrive_Error_To_String+0x22c>)
 8004fd6:	e024      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <Odrive_Error_To_String+0x230>)
 8004fda:	e022      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <Odrive_Error_To_String+0x234>)
 8004fde:	e020      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <Odrive_Error_To_String+0x238>)
 8004fe2:	e01e      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <Odrive_Error_To_String+0x23c>)
 8004fe6:	e01c      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8004fe8:	4b19      	ldr	r3, [pc, #100]	; (8005050 <Odrive_Error_To_String+0x240>)
 8004fea:	e01a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <Odrive_Error_To_String+0x244>)
 8004fee:	e018      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <Odrive_Error_To_String+0x248>)
 8004ff2:	e016      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <Odrive_Error_To_String+0x24c>)
 8004ff6:	e014      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <Odrive_Error_To_String+0x250>)
 8004ffa:	e012      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <Odrive_Error_To_String+0x254>)
 8004ffe:	e010      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <Odrive_Error_To_String+0x258>)
 8005002:	e00e      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <Odrive_Error_To_String+0x25c>)
 8005006:	e00c      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <Odrive_Error_To_String+0x260>)
 800500a:	e00a      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <Odrive_Error_To_String+0x264>)
 800500e:	e008      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <Odrive_Error_To_String+0x268>)
 8005012:	e006      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <Odrive_Error_To_String+0x26c>)
 8005016:	e004      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <Odrive_Error_To_String+0x270>)
 800501a:	e002      	b.n	8005022 <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <Odrive_Error_To_String+0x274>)
 800501e:	e000      	b.n	8005022 <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <Odrive_Error_To_String+0x278>)
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	0801fbfc 	.word	0x0801fbfc
 8005034:	0801fc08 	.word	0x0801fc08
 8005038:	0801fc18 	.word	0x0801fc18
 800503c:	0801fc28 	.word	0x0801fc28
 8005040:	0801fc38 	.word	0x0801fc38
 8005044:	0801fc4c 	.word	0x0801fc4c
 8005048:	0801fc58 	.word	0x0801fc58
 800504c:	0801fc64 	.word	0x0801fc64
 8005050:	0801fc74 	.word	0x0801fc74
 8005054:	0801fc88 	.word	0x0801fc88
 8005058:	0801fca0 	.word	0x0801fca0
 800505c:	0801fcb4 	.word	0x0801fcb4
 8005060:	0801fcd0 	.word	0x0801fcd0
 8005064:	0801fce8 	.word	0x0801fce8
 8005068:	0801fcf8 	.word	0x0801fcf8
 800506c:	0801fd0c 	.word	0x0801fd0c
 8005070:	0801fd28 	.word	0x0801fd28
 8005074:	0801fd44 	.word	0x0801fd44
 8005078:	0801fd5c 	.word	0x0801fd5c
 800507c:	0801fd6c 	.word	0x0801fd6c
 8005080:	0801fd80 	.word	0x0801fd80
 8005084:	0801fd94 	.word	0x0801fd94
 8005088:	0801fda8 	.word	0x0801fda8

0800508c <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8005092:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005096:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005098:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <OdriveCAN_Handler+0xcc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	b29a      	uxth	r2, r3
 800509e:	887b      	ldrh	r3, [r7, #2]
 80050a0:	4013      	ands	r3, r2
 80050a2:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 80050a4:	883b      	ldrh	r3, [r7, #0]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	803b      	strh	r3, [r7, #0]
	int i=0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
 80050b2:	e01f      	b.n	80050f4 <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 80050b4:	4b29      	ldr	r3, [pc, #164]	; (800515c <OdriveCAN_Handler+0xd0>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	8b1b      	ldrh	r3, [r3, #24]
 80050c2:	883a      	ldrh	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d112      	bne.n	80050ee <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 80050c8:	4b24      	ldr	r3, [pc, #144]	; (800515c <OdriveCAN_Handler+0xd0>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fdab 	bl	8004c30 <decode_Odrive>
			c[i]++;
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <OdriveCAN_Handler+0xd4>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	491e      	ldr	r1, [pc, #120]	; (8005160 <OdriveCAN_Handler+0xd4>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80050ec:	e007      	b.n	80050fe <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3301      	adds	r3, #1
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <OdriveCAN_Handler+0xd8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	dbda      	blt.n	80050b4 <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d111      	bne.n	800512a <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <OdriveCAN_Handler+0xdc>)
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <OdriveCAN_Handler+0xdc>)
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2d9      	uxtb	r1, r3
 8005122:	7853      	ldrb	r3, [r2, #1]
 8005124:	f361 1386 	bfi	r3, r1, #6, #1
 8005128:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 800512a:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <OdriveCAN_Handler+0xd4>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d10e      	bne.n	8005150 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <OdriveCAN_Handler+0xd4>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <OdriveCAN_Handler+0xdc>)
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <OdriveCAN_Handler+0xdc>)
 8005140:	43db      	mvns	r3, r3
 8005142:	b2db      	uxtb	r3, r3
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	b2d9      	uxtb	r1, r3
 8005148:	7853      	ldrb	r3, [r2, #1]
 800514a:	f361 13c7 	bfi	r3, r1, #7, #1
 800514e:	7053      	strb	r3, [r2, #1]
	}

}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	2000a4f0 	.word	0x2000a4f0
 800515c:	2000a614 	.word	0x2000a614
 8005160:	200002c8 	.word	0x200002c8
 8005164:	200002c4 	.word	0x200002c4
 8005168:	40020814 	.word	0x40020814

0800516c <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800519a:	edc7 0a08 	vstr	s1, [r7, #32]
 800519e:	ed87 1a07 	vstr	s2, [r7, #28]
 80051a2:	edc7 1a06 	vstr	s3, [r7, #24]
 80051a6:	ed87 2a05 	vstr	s4, [r7, #20]
 80051aa:	edc7 2a04 	vstr	s5, [r7, #16]
 80051ae:	ed87 3a03 	vstr	s6, [r7, #12]
 80051b2:	edc7 3a02 	vstr	s7, [r7, #8]
 80051b6:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f81b 	bl	8005224 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80051ee:	bf00      	nop
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8005202:	6079      	str	r1, [r7, #4]
 8005204:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	3302      	adds	r3, #2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f804 	bl	8005224 <PIDCoeffCalc>
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	edd3 7a08 	vldr	s15, [r3, #32]
 8005234:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d013      	beq.n	8005266 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	ed93 7a03 	vldr	s14, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	edd3 7a08 	vldr	s15, [r3, #32]
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
 8005264:	e007      	b.n	8005276 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	edd3 7a07 	vldr	s15, [r3, #28]
 800527c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005284:	d108      	bne.n	8005298 <PIDCoeffCalc+0x74>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800528c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005294:	f000 80ef 	beq.w	8005476 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	ed93 7a03 	vldr	s14, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a8:	ee17 0a90 	vmov	r0, s15
 80052ac:	f7fb f94c 	bl	8000548 <__aeabi_f2d>
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052b8:	f7fa ffe6 	bl	8000288 <__aeabi_dsub>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	461d      	mov	r5, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80052d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d4:	ee17 0a90 	vmov	r0, s15
 80052d8:	f7fb f936 	bl	8000548 <__aeabi_f2d>
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e4:	f7fa ffd2 	bl	800028c <__adddf3>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fb faac 	bl	800084c <__aeabi_ddiv>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7fb fc74 	bl	8000be8 <__aeabi_d2f>
 8005300:	4603      	mov	r3, r0
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef1 7a67 	vneg.f32	s15, s15
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f917 	bl	8000548 <__aeabi_f2d>
 800531a:	4604      	mov	r4, r0
 800531c:	460d      	mov	r5, r1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fb f910 	bl	8000548 <__aeabi_f2d>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	f7fa ffae 	bl	800028c <__adddf3>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4690      	mov	r8, r2
 8005336:	4699      	mov	r9, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f903 	bl	8000548 <__aeabi_f2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb f955 	bl	80005f8 <__aeabi_dmul>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4690      	mov	r8, r2
 8005354:	4699      	mov	r9, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	ee17 0a90 	vmov	r0, s15
 800536a:	f7fb f8ed 	bl	8000548 <__aeabi_f2d>
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005376:	f7fa ff89 	bl	800028c <__adddf3>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fb fa63 	bl	800084c <__aeabi_ddiv>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff7d 	bl	800028c <__adddf3>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fc25 	bl	8000be8 <__aeabi_d2f>
 800539e:	4602      	mov	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80053b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b4:	ee17 0a90 	vmov	r0, s15
 80053b8:	f7fb f8c6 	bl	8000548 <__aeabi_f2d>
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053c4:	f7fa ff60 	bl	8000288 <__aeabi_dsub>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4614      	mov	r4, r2
 80053ce:	461d      	mov	r5, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fb f8b7 	bl	8000548 <__aeabi_f2d>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb f909 	bl	80005f8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4614      	mov	r4, r2
 80053ec:	461d      	mov	r5, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f8a8 	bl	8000548 <__aeabi_f2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	f7fa ff46 	bl	800028c <__adddf3>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4690      	mov	r8, r2
 8005406:	4699      	mov	r9, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb f89b 	bl	8000548 <__aeabi_f2d>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fa ff2f 	bl	8000288 <__aeabi_dsub>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4614      	mov	r4, r2
 8005430:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	edd3 7a03 	vldr	s15, [r3, #12]
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	ee17 0a90 	vmov	r0, s15
 8005446:	f7fb f87f 	bl	8000548 <__aeabi_f2d>
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005452:	f7fa ff1b 	bl	800028c <__adddf3>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fb f9f5 	bl	800084c <__aeabi_ddiv>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	f7fb fbbd 	bl	8000be8 <__aeabi_d2f>
 800546e:	4602      	mov	r2, r0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	63da      	str	r2, [r3, #60]	; 0x3c
 8005474:	e00c      	b.n	8005490 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800549a <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80054ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	edd3 7a08 	vldr	s15, [r3, #32]
 8005506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d033      	beq.n	8005578 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005524:	edd7 7a03 	vldr	s15, [r7, #12]
 8005528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005532:	e003      	b.n	800553c <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800554e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005552:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005566:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	edd3 7a07 	vldr	s15, [r3, #28]
 800557e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	d107      	bne.n	8005598 <PID+0xc2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800558e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005596:	d02c      	beq.n	80055f2 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80055a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80055dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80055fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8005602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	dd0f      	ble.n	800562c <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	edd3 7a06 	vldr	s15, [r3, #24]
 8005618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	7813      	ldrb	r3, [r2, #0]
 8005624:	f36f 0300 	bfc	r3, #0, #1
 8005628:	7013      	strb	r3, [r2, #0]
 800562a:	e02b      	b.n	8005684 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005632:	eef1 7a67 	vneg.f32	s15, s15
 8005636:	ed97 7a02 	vldr	s14, [r7, #8]
 800563a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	d511      	bpl.n	8005668 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	ed93 7a04 	vldr	s14, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005654:	eef1 7a67 	vneg.f32	s15, s15
 8005658:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	7813      	ldrb	r3, [r2, #0]
 8005660:	f36f 0300 	bfc	r3, #0, #1
 8005664:	7013      	strb	r3, [r2, #0]
 8005666:	e00d      	b.n	8005684 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edd3 7a06 	vldr	s15, [r3, #24]
 800566e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005676:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	7813      	ldrb	r3, [r2, #0]
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	601a      	str	r2, [r3, #0]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7ff fd42 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80056ee:	4618      	mov	r0, r3
 80056f0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80056f4:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8005818 <PPInit+0x180>
 80056f8:	eddf 2a48 	vldr	s5, [pc, #288]	; 800581c <PPInit+0x184>
 80056fc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005700:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005704:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005708:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800570c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8005820 <PPInit+0x188>
 8005710:	f7ff fd3e 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff febd 	bl	800549a <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005732:	461a      	mov	r2, r3
 8005734:	f7ff fd1a 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800573e:	4618      	mov	r0, r3
 8005740:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005744:	ed9f 3a34 	vldr	s6, [pc, #208]	; 8005818 <PPInit+0x180>
 8005748:	eddf 2a34 	vldr	s5, [pc, #208]	; 800581c <PPInit+0x184>
 800574c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005750:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005754:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005758:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800575c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005820 <PPInit+0x188>
 8005760:	f7ff fd16 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fe95 	bl	800549a <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005782:	461a      	mov	r2, r3
 8005784:	f7ff fcf2 	bl	800516c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800578e:	4618      	mov	r0, r3
 8005790:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005794:	ed9f 3a23 	vldr	s6, [pc, #140]	; 8005824 <PPInit+0x18c>
 8005798:	eddf 2a22 	vldr	s5, [pc, #136]	; 8005824 <PPInit+0x18c>
 800579c:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80057a0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80057a4:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8005828 <PPInit+0x190>
 80057a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80057ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005820 <PPInit+0x188>
 80057b0:	f7ff fcee 	bl	8005190 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fe6d 	bl	800549a <PIDDelayInit>

	pp->tol_xy=0.20;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <PPInit+0x194>)
 80057c4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=5.0;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <PPInit+0x198>)
 80057cc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <PPInit+0x19c>)
 80057d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <PPInit+0x1a0>)
 80057dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=5.0;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <PPInit+0x198>)
 80057e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005808:	f36f 1304 	bfc	r3, #4, #1
 800580c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	3ecccccd 	.word	0x3ecccccd
 800581c:	00000000 	.word	0x00000000
 8005820:	3ba3d70a 	.word	0x3ba3d70a
 8005824:	3e4ccccd 	.word	0x3e4ccccd
 8005828:	3d088889 	.word	0x3d088889
 800582c:	3e4ccccd 	.word	0x3e4ccccd
 8005830:	40a00000 	.word	0x40a00000
 8005834:	3f19999a 	.word	0x3f19999a
 8005838:	3d75c28f 	.word	0x3d75c28f

0800583c <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	ed87 0a03 	vstr	s0, [r7, #12]
 8005846:	edc7 0a02 	vstr	s1, [r7, #8]
 800584a:	ed87 1a01 	vstr	s2, [r7, #4]
 800584e:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800586e:	4619      	mov	r1, r3
 8005870:	ed97 0a03 	vldr	s0, [r7, #12]
 8005874:	2004      	movs	r0, #4
 8005876:	f7ff fcbe 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005880:	4619      	mov	r1, r3
 8005882:	ed97 0a02 	vldr	s0, [r7, #8]
 8005886:	2005      	movs	r0, #5
 8005888:	f7ff fcb5 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005892:	4619      	mov	r1, r3
 8005894:	ed97 0a01 	vldr	s0, [r7, #4]
 8005898:	2006      	movs	r0, #6
 800589a:	f7ff fcac 	bl	80051f6 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058a4:	4619      	mov	r1, r3
 80058a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80058aa:	2004      	movs	r0, #4
 80058ac:	f7ff fca3 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058b6:	4619      	mov	r1, r3
 80058b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80058bc:	2005      	movs	r0, #5
 80058be:	f7ff fc9a 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80058c8:	4619      	mov	r1, r3
 80058ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80058ce:	2006      	movs	r0, #6
 80058d0:	f7ff fc91 	bl	80051f6 <PIDGainSet>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80058e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80058ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80058ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80058f2:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80058fa:	4619      	mov	r1, r3
 80058fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8005900:	2004      	movs	r0, #4
 8005902:	f7ff fc78 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800590c:	4619      	mov	r1, r3
 800590e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005912:	2005      	movs	r0, #5
 8005914:	f7ff fc6f 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800591e:	4619      	mov	r1, r3
 8005920:	ed97 0a03 	vldr	s0, [r7, #12]
 8005924:	2006      	movs	r0, #6
 8005926:	f7ff fc66 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005930:	4619      	mov	r1, r3
 8005932:	ed97 0a02 	vldr	s0, [r7, #8]
 8005936:	2003      	movs	r0, #3
 8005938:	f7ff fc5d 	bl	80051f6 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	601a      	str	r2, [r3, #0]
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	ed87 0a03 	vstr	s0, [r7, #12]
 8005958:	edc7 0a02 	vstr	s1, [r7, #8]
 800595c:	ed87 1a01 	vstr	s2, [r7, #4]
 8005960:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	ed2d 8b02 	vpush	{d8}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e114      	b.n	8005bc6 <PP_start+0x240>
	{
		pp->target_vel[i] = point[i][0];
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	3374      	adds	r3, #116	; 0x74
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80059d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	331a      	adds	r3, #26
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	3328      	adds	r3, #40	; 0x28
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3304      	adds	r3, #4
 8005a10:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3346      	adds	r3, #70	; 0x46
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3304      	adds	r3, #4
 8005a32:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3304      	adds	r3, #4
 8005a54:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11f      	bne.n	8005a9c <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6c:	eeb0 7ae7 	vabs.f32	s14, s15
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a80:	eef0 7ae7 	vabs.f32	s15, s15
 8005a84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a88:	eeb0 0a66 	vmov.f32	s0, s13
 8005a8c:	f018 fd98 	bl	801e5c0 <atanf>
 8005a90:	eef0 7a40 	vmov.f32	s15, s0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 8005a9a:	e03f      	b.n	8005b1c <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3b1c      	subs	r3, #28
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac8:	eeb0 7ae7 	vabs.f32	s14, s15
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3b1c      	subs	r3, #28
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005af4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005af8:	eef0 7ae7 	vabs.f32	s15, s15
 8005afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b00:	eeb0 0a66 	vmov.f32	s0, s13
 8005b04:	f018 fd5c 	bl	801e5c0 <atanf>
 8005b08:	eef0 7a40 	vmov.f32	s15, s0
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3364      	adds	r3, #100	; 0x64
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	3304      	adds	r3, #4
 8005b18:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3338      	adds	r3, #56	; 0x38
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	ed93 8a04 	vldr	s16, [r3, #16]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3364      	adds	r3, #100	; 0x64
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	3304      	adds	r3, #4
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	f018 fe01 	bl	801e768 <cosf>
 8005b66:	eef0 7a40 	vmov.f32	s15, s0
 8005b6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3384      	adds	r3, #132	; 0x84
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	3304      	adds	r3, #4
 8005b7a:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	ed93 8a04 	vldr	s16, [r3, #16]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3364      	adds	r3, #100	; 0x64
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	edd3 7a00 	vldr	s15, [r3]
 8005ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba6:	f018 fe27 	bl	801e7f8 <sinf>
 8005baa:	eef0 7a40 	vmov.f32	s15, s0
 8005bae:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3394      	adds	r3, #148	; 0x94
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f6ff aee6 	blt.w	800599c <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d166      	bne.n	8005cb0 <PP_start+0x32a>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf2:	eeb0 7ae7 	vabs.f32	s14, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c04:	db17      	blt.n	8005c36 <PP_start+0x2b0>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c16:	eef0 7ae7 	vabs.f32	s15, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c28:	4619      	mov	r1, r3
 8005c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8005c2e:	2002      	movs	r0, #2
 8005c30:	f7ff fae1 	bl	80051f6 <PIDGainSet>
 8005c34:	e008      	b.n	8005c48 <PP_start+0x2c2>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c42:	2002      	movs	r0, #2
 8005c44:	f7ff fad7 	bl	80051f6 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c58:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	db17      	blt.n	8005c9c <PP_start+0x316>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8005c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005c8e:	4619      	mov	r1, r3
 8005c90:	eeb0 0a47 	vmov.f32	s0, s14
 8005c94:	2002      	movs	r0, #2
 8005c96:	f7ff faae 	bl	80051f6 <PIDGainSet>
 8005c9a:	e06f      	b.n	8005d7c <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f7ff faa4 	bl	80051f6 <PIDGainSet>
 8005cae:	e065      	b.n	8005d7c <PP_start+0x3f6>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	eeb0 7ae7 	vabs.f32	s14, s15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	db17      	blt.n	8005d04 <PP_start+0x37e>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8005cfc:	2002      	movs	r0, #2
 8005cfe:	f7ff fa7a 	bl	80051f6 <PIDGainSet>
 8005d02:	e008      	b.n	8005d16 <PP_start+0x390>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d10:	2002      	movs	r0, #2
 8005d12:	f7ff fa70 	bl	80051f6 <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d26:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	db17      	blt.n	8005d6a <PP_start+0x3e4>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4a:	eef0 7ae7 	vabs.f32	s15, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d62:	2002      	movs	r0, #2
 8005d64:	f7ff fa47 	bl	80051f6 <PIDGainSet>
 8005d68:	e008      	b.n	8005d7c <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d70:	4619      	mov	r1, r3
 8005d72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d76:	2002      	movs	r0, #2
 8005d78:	f7ff fa3d 	bl	80051f6 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d88:	4619      	mov	r1, r3
 8005d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8e:	2003      	movs	r0, #3
 8005d90:	f7ff fa31 	bl	80051f6 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005da0:	4619      	mov	r1, r3
 8005da2:	eeb0 0a67 	vmov.f32	s0, s15
 8005da6:	2003      	movs	r0, #3
 8005da8:	f7ff fa25 	bl	80051f6 <PIDGainSet>

	pp->point_count=0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005dd8:	f36f 0382 	bfc	r3, #2, #1
 8005ddc:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005de6:	f36f 03c3 	bfc	r3, #3, #1
 8005dea:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	ecbd 8b02 	vpop	{d8}
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005e08:	f36f 0300 	bfc	r3, #0, #1
 8005e0c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fb3f 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fb39 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fb33 	bl	800549a <PIDDelayInit>

}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f04f 0200 	mov.w	r2, #0
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fafd 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff faf7 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff faf1 	bl	800549a <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eca:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f14:	ed2d 8b02 	vpush	{d8}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8134 	beq.w	8006198 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	edd3 7a00 	vldr	s15, [r3]
 8005f4c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	d516      	bpl.n	8005f88 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f60:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005f84 <PathPlan+0x74>
 8005f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	dd2b      	ble.n	8005fc6 <PathPlan+0xb6>
				pp->yaw_constant++;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8005f82:	e020      	b.n	8005fc6 <PathPlan+0xb6>
 8005f84:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	edd3 7a00 	vldr	s15, [r3]
 8005f90:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8005f84 <PathPlan+0x74>
 8005f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9c:	dd13      	ble.n	8005fc6 <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fa4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	d509      	bpl.n	8005fc6 <PathPlan+0xb6>
				pp->yaw_constant--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fab6 	bl	8000548 <__aeabi_f2d>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa faaf 	bl	8000548 <__aeabi_f2d>
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b68      	ldr	r3, [pc, #416]	; (8006190 <PathPlan+0x280>)
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa f946 	bl	800028c <__adddf3>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4614      	mov	r4, r2
 8006006:	461d      	mov	r5, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fa9b 	bl	8000548 <__aeabi_f2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa f935 	bl	8000288 <__aeabi_dsub>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4614      	mov	r4, r2
 8006024:	461d      	mov	r5, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa fa8c 	bl	8000548 <__aeabi_f2d>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f7fa f928 	bl	800028c <__adddf3>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f7fa fdd0 	bl	8000be8 <__aeabi_d2f>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa fa78 	bl	8000548 <__aeabi_f2d>
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	4b4d      	ldr	r3, [pc, #308]	; (8006194 <PathPlan+0x284>)
 800605e:	f7fa fbf5 	bl	800084c <__aeabi_ddiv>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	a347      	add	r3, pc, #284	; (adr r3, 8006188 <PathPlan+0x278>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f7fa fdb4 	bl	8000be8 <__aeabi_d2f>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006092:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	edd3 7a06 	vldr	s15, [r3, #24]
 800609c:	eeb0 0a67 	vmov.f32	s0, s15
 80060a0:	f018 fb62 	bl	801e768 <cosf>
 80060a4:	eef0 7a40 	vmov.f32	s15, s0
 80060a8:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80060b8:	ee77 8a67 	vsub.f32	s17, s14, s15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	edd3 7a06 	vldr	s15, [r3, #24]
 80060c2:	eeb0 0a67 	vmov.f32	s0, s15
 80060c6:	f018 fb97 	bl	801e7f8 <sinf>
 80060ca:	eef0 7a40 	vmov.f32	s15, s0
 80060ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80060d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80060e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ec:	eeb1 8a67 	vneg.f32	s16, s15
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	f018 fb7d 	bl	801e7f8 <sinf>
 80060fe:	eef0 7a40 	vmov.f32	s15, s0
 8006102:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006112:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	edd3 7a06 	vldr	s15, [r3, #24]
 800611c:	eeb0 0a67 	vmov.f32	s0, s15
 8006120:	f018 fb22 	bl	801e768 <cosf>
 8006124:	eef0 7a40 	vmov.f32	s15, s0
 8006128:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800612c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	649a      	str	r2, [r3, #72]	; 0x48
 8006182:	e009      	b.n	8006198 <PathPlan+0x288>
 8006184:	f3af 8000 	nop.w
 8006188:	54442d18 	.word	0x54442d18
 800618c:	400921fb 	.word	0x400921fb
 8006190:	40768000 	.word	0x40768000
 8006194:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f002 8513 	beq.w	8008bd0 <PathPlan+0x2cc0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f002 850a 	beq.w	8008bd0 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
 80061ce:	edd3 7a00 	vldr	s15, [r3]
 80061d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	f001 8389 	beq.w	80078f0 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8208 	bne.w	80065fa <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	331a      	adds	r3, #26
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	ed93 7a00 	vldr	s14, [r3]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006206:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800620a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	3304      	adds	r3, #4
 8006220:	edd3 8a00 	vldr	s17, [r3]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	3304      	adds	r3, #4
 8006234:	ed93 7a00 	vldr	s14, [r3]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800623e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	331a      	adds	r3, #26
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	ed93 7a00 	vldr	s14, [r3]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800625a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625e:	eef0 0a67 	vmov.f32	s1, s15
 8006262:	eeb0 0a66 	vmov.f32	s0, s13
 8006266:	f018 fb09 	bl	801e87c <atan2f>
 800626a:	eef0 7a40 	vmov.f32	s15, s0
 800626e:	eeb0 0a67 	vmov.f32	s0, s15
 8006272:	f018 fac1 	bl	801e7f8 <sinf>
 8006276:	eef0 7a40 	vmov.f32	s15, s0
 800627a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800627e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006288:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	3328      	adds	r3, #40	; 0x28
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	3304      	adds	r3, #4
 800629c:	ed93 7a00 	vldr	s14, [r3]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062ae:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	3304      	adds	r3, #4
 80062c4:	edd3 8a00 	vldr	s17, [r3]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	3328      	adds	r3, #40	; 0x28
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	3304      	adds	r3, #4
 80062d8:	ed93 7a00 	vldr	s14, [r3]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80062e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	331a      	adds	r3, #26
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	ed93 7a00 	vldr	s14, [r3]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80062fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006302:	eef0 0a67 	vmov.f32	s1, s15
 8006306:	eeb0 0a66 	vmov.f32	s0, s13
 800630a:	f018 fab7 	bl	801e87c <atan2f>
 800630e:	eef0 7a40 	vmov.f32	s15, s0
 8006312:	eeb0 0a67 	vmov.f32	s0, s15
 8006316:	f018 fa27 	bl	801e768 <cosf>
 800631a:	eef0 7a40 	vmov.f32	s15, s0
 800631e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006322:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 800632c:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	3338      	adds	r3, #56	; 0x38
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	edd3 6a00 	vldr	s13, [r3]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637e:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	e12d      	b.n	80065e4 <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8006388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800638c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006394:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006398:	eeb0 0a67 	vmov.f32	s0, s15
 800639c:	f018 fa70 	bl	801e880 <powf>
 80063a0:	eeb0 7a40 	vmov.f32	s14, s0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	ee17 0a90 	vmov	r0, s15
 80063b2:	f7fa f8c9 	bl	8000548 <__aeabi_f2d>
 80063b6:	4604      	mov	r4, r0
 80063b8:	460d      	mov	r5, r1
 80063ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063be:	edd7 7a03 	vldr	s15, [r7, #12]
 80063c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c6:	ee17 0a90 	vmov	r0, s15
 80063ca:	f7fa f8bd 	bl	8000548 <__aeabi_f2d>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	f7f9 ff5b 	bl	800028c <__adddf3>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4690      	mov	r8, r2
 80063dc:	4699      	mov	r9, r3
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7fa f8b2 	bl	8000548 <__aeabi_f2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fa f904 	bl	80005f8 <__aeabi_dmul>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4690      	mov	r8, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fa f8a1 	bl	8000548 <__aeabi_f2d>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7fa f8f3 	bl	80005f8 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 ff37 	bl	800028c <__adddf3>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4614      	mov	r4, r2
 8006424:	461d      	mov	r5, r3
 8006426:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800642a:	ed97 0a03 	vldr	s0, [r7, #12]
 800642e:	f018 fa27 	bl	801e880 <powf>
 8006432:	eeb0 7a40 	vmov.f32	s14, s0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	331a      	adds	r3, #26
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	edd3 7a00 	vldr	s15, [r3]
 8006448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644c:	ee17 0a90 	vmov	r0, s15
 8006450:	f7fa f87a 	bl	8000548 <__aeabi_f2d>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7f9 ff16 	bl	800028c <__adddf3>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4610      	mov	r0, r2
 8006466:	4619      	mov	r1, r3
 8006468:	f7fa fbbe 	bl	8000be8 <__aeabi_d2f>
 800646c:	4601      	mov	r1, r0
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 800647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006480:	edd7 7a03 	vldr	s15, [r7, #12]
 8006484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006488:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800648c:	eeb0 0a67 	vmov.f32	s0, s15
 8006490:	f018 f9f6 	bl	801e880 <powf>
 8006494:	eeb0 7a40 	vmov.f32	s14, s0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	ee17 0a90 	vmov	r0, s15
 80064a6:	f7fa f84f 	bl	8000548 <__aeabi_f2d>
 80064aa:	4604      	mov	r4, r0
 80064ac:	460d      	mov	r5, r1
 80064ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80064b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ba:	ee17 0a90 	vmov	r0, s15
 80064be:	f7fa f843 	bl	8000548 <__aeabi_f2d>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	f7f9 fee1 	bl	800028c <__adddf3>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4690      	mov	r8, r2
 80064d0:	4699      	mov	r9, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7fa f838 	bl	8000548 <__aeabi_f2d>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa f88a 	bl	80005f8 <__aeabi_dmul>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	4699      	mov	r9, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fa f827 	bl	8000548 <__aeabi_f2d>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7fa f879 	bl	80005f8 <__aeabi_dmul>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 febd 	bl	800028c <__adddf3>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4614      	mov	r4, r2
 8006518:	461d      	mov	r5, r3
 800651a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800651e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006522:	f018 f9ad 	bl	801e880 <powf>
 8006526:	eeb0 7a40 	vmov.f32	s14, s0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	3328      	adds	r3, #40	; 0x28
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	3304      	adds	r3, #4
 800653a:	edd3 7a00 	vldr	s15, [r3]
 800653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006542:	ee17 0a90 	vmov	r0, s15
 8006546:	f7f9 ffff 	bl	8000548 <__aeabi_f2d>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7f9 fe9b 	bl	800028c <__adddf3>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f7fa fb43 	bl	8000be8 <__aeabi_d2f>
 8006562:	4601      	mov	r1, r0
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	ed93 7a00 	vldr	s14, [r3]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	edd3 6a00 	vldr	s13, [r3]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	ee07 3a90 	vmov	s15, r3
 80065a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80065d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065da:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	f6ff aecb 	blt.w	8006388 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	ed93 7a00 	vldr	s14, [r3]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	ed93 7a00 	vldr	s14, [r3]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	ed93 7a00 	vldr	s14, [r3]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	edd3 7a04 	vldr	s15, [r3, #16]
 800665c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006672:	3b01      	subs	r3, #1
 8006674:	429a      	cmp	r2, r3
 8006676:	d14a      	bne.n	800670e <PathPlan+0x7fe>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800667e:	eef0 7ae7 	vabs.f32	s15, s15
 8006682:	ee17 0a90 	vmov	r0, s15
 8006686:	f7f9 ff5f 	bl	8000548 <__aeabi_f2d>
 800668a:	4604      	mov	r4, r0
 800668c:	460d      	mov	r5, r1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006694:	eef0 7ae7 	vabs.f32	s15, s15
 8006698:	ee17 0a90 	vmov	r0, s15
 800669c:	f7f9 ff54 	bl	8000548 <__aeabi_f2d>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fdf0 	bl	800028c <__adddf3>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4610      	mov	r0, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066bc:	f7fa f8c6 	bl	800084c <__aeabi_ddiv>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7f9 ff3a 	bl	8000548 <__aeabi_f2d>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4620      	mov	r0, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	f7fa f9fe 	bl	8000adc <__aeabi_dcmplt>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <PathPlan+0x7fe>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80066ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80066f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	d506      	bpl.n	800670e <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006706:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	e005      	b.n	800671a <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006732:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80069d8 <PathPlan+0xac8>
 8006744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	d811      	bhi.n	8006772 <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006754:	ed93 7a00 	vldr	s14, [r3]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800676c:	edc3 7a00 	vstr	s15, [r3]
 8006770:	e034      	b.n	80067dc <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006778:	edd3 6a00 	vldr	s13, [r3]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006782:	ed93 7a00 	vldr	s14, [r3]
 8006786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006790:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f7f9 fed3 	bl	8000548 <__aeabi_f2d>
 80067a2:	a38b      	add	r3, pc, #556	; (adr r3, 80069d0 <PathPlan+0xac0>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7fa f9ac 	bl	8000b04 <__aeabi_dcmpge>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80067ba:	e003      	b.n	80067c4 <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80067e2:	eef0 7ae7 	vabs.f32	s15, s15
 80067e6:	ee17 0a90 	vmov	r0, s15
 80067ea:	f7f9 fead 	bl	8000548 <__aeabi_f2d>
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80067f8:	eef0 7ae7 	vabs.f32	s15, s15
 80067fc:	ee17 0a90 	vmov	r0, s15
 8006800:	f7f9 fea2 	bl	8000548 <__aeabi_f2d>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4620      	mov	r0, r4
 800680a:	4629      	mov	r1, r5
 800680c:	f7f9 fd3e 	bl	800028c <__adddf3>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006820:	f7fa f814 	bl	800084c <__aeabi_ddiv>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fe88 	bl	8000548 <__aeabi_f2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f7fa f94c 	bl	8000adc <__aeabi_dcmplt>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8462 	beq.w	8007110 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006858:	3b01      	subs	r3, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	f280 8135 	bge.w	8006aca <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006866:	edd3 7a00 	vldr	s15, [r3]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006870:	4619      	mov	r1, r3
 8006872:	eeb0 0a67 	vmov.f32	s0, s15
 8006876:	2004      	movs	r0, #4
 8006878:	f7fe fcbd 	bl	80051f6 <PIDGainSet>
					pp->crnt_crv_pt++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	ed93 7a00 	vldr	s14, [r3]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80068a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	ed93 7a00 	vldr	s14, [r3]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	ed93 7a00 	vldr	s14, [r3]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80068ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	331a      	adds	r3, #26
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	ed93 7a00 	vldr	s14, [r3]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	d01d      	beq.n	8006958 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	331a      	adds	r3, #26
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	ed93 7a00 	vldr	s14, [r3]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006938:	eef0 7ae7 	vabs.f32	s15, s15
 800693c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800694a:	4619      	mov	r1, r3
 800694c:	eeb0 0a47 	vmov.f32	s0, s14
 8006950:	2002      	movs	r0, #2
 8006952:	f7fe fc50 	bl	80051f6 <PIDGainSet>
 8006956:	e008      	b.n	800696a <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800695e:	4619      	mov	r1, r3
 8006960:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006964:	2002      	movs	r0, #2
 8006966:	f7fe fc46 	bl	80051f6 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	3328      	adds	r3, #40	; 0x28
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	3304      	adds	r3, #4
 800697a:	ed93 7a00 	vldr	s14, [r3]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006988:	eef5 7a40 	vcmp.f32	s15, #0.0
 800698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006990:	d024      	beq.n	80069dc <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	3328      	adds	r3, #40	; 0x28
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3304      	adds	r3, #4
 80069a2:	ed93 7a00 	vldr	s14, [r3]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80069ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b0:	eef0 7ae7 	vabs.f32	s15, s15
 80069b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069c2:	4619      	mov	r1, r3
 80069c4:	eeb0 0a47 	vmov.f32	s0, s14
 80069c8:	2002      	movs	r0, #2
 80069ca:	f7fe fc14 	bl	80051f6 <PIDGainSet>
 80069ce:	e00e      	b.n	80069ee <PathPlan+0xade>
 80069d0:	66666666 	.word	0x66666666
 80069d4:	3fee6666 	.word	0x3fee6666
 80069d8:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80069e2:	4619      	mov	r1, r3
 80069e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80069e8:	2002      	movs	r0, #2
 80069ea:	f7fe fc04 	bl	80051f6 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069fa:	4619      	mov	r1, r3
 80069fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006a00:	2004      	movs	r0, #4
 8006a02:	f7fe fbf8 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a12:	4619      	mov	r1, r3
 8006a14:	eeb0 0a67 	vmov.f32	s0, s15
 8006a18:	2004      	movs	r0, #4
 8006a1a:	f7fe fbec 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a30:	2005      	movs	r0, #5
 8006a32:	f7fe fbe0 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a42:	4619      	mov	r1, r3
 8006a44:	eeb0 0a67 	vmov.f32	s0, s15
 8006a48:	2005      	movs	r0, #5
 8006a4a:	f7fe fbd4 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	2006      	movs	r0, #6
 8006a62:	f7fe fbc8 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a72:	4619      	mov	r1, r3
 8006a74:	eeb0 0a67 	vmov.f32	s0, s15
 8006a78:	2006      	movs	r0, #6
 8006a7a:	f7fe fbbc 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a98:	4619      	mov	r1, r3
 8006a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a9e:	2003      	movs	r0, #3
 8006aa0:	f7fe fba9 	bl	80051f6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	3394      	adds	r3, #148	; 0x94
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	edd3 7a00 	vldr	s15, [r3]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006abc:	4619      	mov	r1, r3
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	2003      	movs	r0, #3
 8006ac4:	f7fe fb97 	bl	80051f6 <PIDGainSet>
 8006ac8:	e322      	b.n	8007110 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f040 8252 	bne.w	8006f82 <PathPlan+0x1072>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006aea:	3b01      	subs	r3, #1
 8006aec:	429a      	cmp	r2, r3
 8006aee:	f280 8248 	bge.w	8006f82 <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006af8:	eef0 7ae7 	vabs.f32	s15, s15
 8006afc:	ee17 0a90 	vmov	r0, s15
 8006b00:	f7f9 fd22 	bl	8000548 <__aeabi_f2d>
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006b0e:	eef0 7ae7 	vabs.f32	s15, s15
 8006b12:	ee17 0a90 	vmov	r0, s15
 8006b16:	f7f9 fd17 	bl	8000548 <__aeabi_f2d>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fbb3 	bl	800028c <__adddf3>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b36:	f7f9 fe89 	bl	800084c <__aeabi_ddiv>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7f9 fcfd 	bl	8000548 <__aeabi_f2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 ffc1 	bl	8000adc <__aeabi_dcmplt>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 82d6 	beq.w	800710e <PathPlan+0x11fe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006b68:	eeb0 7ae7 	vabs.f32	s14, s15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	d400      	bmi.n	8006b7e <PathPlan+0xc6e>
 8006b7c:	e2c7      	b.n	800710e <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	3346      	adds	r3, #70	; 0x46
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	edd3 7a00 	vldr	s15, [r3]
 8006b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b96:	eef4 7a47 	vcmp.f32	s15, s14
 8006b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9e:	f040 80fd 	bne.w	8006d9c <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 82b0 	bne.w	800710e <PathPlan+0x11fe>

								pp->point_count++;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	331a      	adds	r3, #26
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	ed93 7a00 	vldr	s14, [r3]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be0:	d01d      	beq.n	8006c1e <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	331a      	adds	r3, #26
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	ed93 7a00 	vldr	s14, [r3]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bfe:	eef0 7ae7 	vabs.f32	s15, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c10:	4619      	mov	r1, r3
 8006c12:	eeb0 0a47 	vmov.f32	s0, s14
 8006c16:	2002      	movs	r0, #2
 8006c18:	f7fe faed 	bl	80051f6 <PIDGainSet>
 8006c1c:	e008      	b.n	8006c30 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006c24:	4619      	mov	r1, r3
 8006c26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c2a:	2002      	movs	r0, #2
 8006c2c:	f7fe fae3 	bl	80051f6 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	3328      	adds	r3, #40	; 0x28
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	ed93 7a00 	vldr	s14, [r3]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	d01e      	beq.n	8006c96 <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	3328      	adds	r3, #40	; 0x28
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	ed93 7a00 	vldr	s14, [r3]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c76:	eef0 7ae7 	vabs.f32	s15, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c88:	4619      	mov	r1, r3
 8006c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8006c8e:	2002      	movs	r0, #2
 8006c90:	f7fe fab1 	bl	80051f6 <PIDGainSet>
 8006c94:	e008      	b.n	8006ca8 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ca2:	2002      	movs	r0, #2
 8006ca4:	f7fe faa7 	bl	80051f6 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cba:	2004      	movs	r0, #4
 8006cbc:	f7fe fa9b 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ccc:	4619      	mov	r1, r3
 8006cce:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd2:	2004      	movs	r0, #4
 8006cd4:	f7fe fa8f 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cea:	2005      	movs	r0, #5
 8006cec:	f7fe fa83 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006d02:	2005      	movs	r0, #5
 8006d04:	f7fe fa77 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d14:	4619      	mov	r1, r3
 8006d16:	eeb0 0a67 	vmov.f32	s0, s15
 8006d1a:	2006      	movs	r0, #6
 8006d1c:	f7fe fa6b 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d32:	2006      	movs	r0, #6
 8006d34:	f7fe fa5f 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	3384      	adds	r3, #132	; 0x84
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	edd3 7a00 	vldr	s15, [r3]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d52:	4619      	mov	r1, r3
 8006d54:	eeb0 0a67 	vmov.f32	s0, s15
 8006d58:	2003      	movs	r0, #3
 8006d5a:	f7fe fa4c 	bl	80051f6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	3394      	adds	r3, #148	; 0x94
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	edd3 7a00 	vldr	s15, [r3]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d76:	4619      	mov	r1, r3
 8006d78:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f7fe fa3a 	bl	80051f6 <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006d9a:	e1b8      	b.n	800710e <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	331a      	adds	r3, #26
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	ed93 7a00 	vldr	s14, [r3]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	d01d      	beq.n	8006e0c <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	331a      	adds	r3, #26
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	ed93 7a00 	vldr	s14, [r3]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dec:	eef0 7ae7 	vabs.f32	s15, s15
 8006df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dfe:	4619      	mov	r1, r3
 8006e00:	eeb0 0a47 	vmov.f32	s0, s14
 8006e04:	2002      	movs	r0, #2
 8006e06:	f7fe f9f6 	bl	80051f6 <PIDGainSet>
 8006e0a:	e008      	b.n	8006e1e <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e12:	4619      	mov	r1, r3
 8006e14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e18:	2002      	movs	r0, #2
 8006e1a:	f7fe f9ec 	bl	80051f6 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	3328      	adds	r3, #40	; 0x28
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	ed93 7a00 	vldr	s14, [r3]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	d01e      	beq.n	8006e84 <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	3328      	adds	r3, #40	; 0x28
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	ed93 7a00 	vldr	s14, [r3]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e64:	eef0 7ae7 	vabs.f32	s15, s15
 8006e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e76:	4619      	mov	r1, r3
 8006e78:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7c:	2002      	movs	r0, #2
 8006e7e:	f7fe f9ba 	bl	80051f6 <PIDGainSet>
 8006e82:	e008      	b.n	8006e96 <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e90:	2002      	movs	r0, #2
 8006e92:	f7fe f9b0 	bl	80051f6 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea8:	2004      	movs	r0, #4
 8006eaa:	f7fe f9a4 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006eba:	4619      	mov	r1, r3
 8006ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec0:	2004      	movs	r0, #4
 8006ec2:	f7fe f998 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ed8:	2005      	movs	r0, #5
 8006eda:	f7fe f98c 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006eea:	4619      	mov	r1, r3
 8006eec:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef0:	2005      	movs	r0, #5
 8006ef2:	f7fe f980 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f02:	4619      	mov	r1, r3
 8006f04:	eeb0 0a67 	vmov.f32	s0, s15
 8006f08:	2006      	movs	r0, #6
 8006f0a:	f7fe f974 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f20:	2006      	movs	r0, #6
 8006f22:	f7fe f968 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	3384      	adds	r3, #132	; 0x84
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	3304      	adds	r3, #4
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f40:	4619      	mov	r1, r3
 8006f42:	eeb0 0a67 	vmov.f32	s0, s15
 8006f46:	2003      	movs	r0, #3
 8006f48:	f7fe f955 	bl	80051f6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	3394      	adds	r3, #148	; 0x94
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	edd3 7a00 	vldr	s15, [r3]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f64:	4619      	mov	r1, r3
 8006f66:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6a:	2003      	movs	r0, #3
 8006f6c:	f7fe f943 	bl	80051f6 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006f80:	e0c5      	b.n	800710e <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f040 80bd 	bne.w	8007110 <PathPlan+0x1200>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f040 80b3 	bne.w	8007110 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006fb0:	eeb0 7ae7 	vabs.f32	s14, s15
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc2:	f140 80a5 	bpl.w	8007110 <PathPlan+0x1200>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006fcc:	eeb0 7ae7 	vabs.f32	s14, s15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fde:	f140 8097 	bpl.w	8007110 <PathPlan+0x1200>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8006ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffe:	f200 8087 	bhi.w	8007110 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	3346      	adds	r3, #70	; 0x46
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	edd3 7a00 	vldr	s15, [r3]
 8007016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800701a:	eef4 7a47 	vcmp.f32	s15, s14
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d13e      	bne.n	80070a2 <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800702a:	2b01      	cmp	r3, #1
 800702c:	d170      	bne.n	8007110 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800703e:	4619      	mov	r1, r3
 8007040:	eeb0 0a67 	vmov.f32	s0, s15
 8007044:	2004      	movs	r0, #4
 8007046:	f7fe f8d6 	bl	80051f6 <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 800704a:	2201      	movs	r2, #1
 800704c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007050:	487e      	ldr	r0, [pc, #504]	; (800724c <PathPlan+0x133c>)
 8007052:	f00b f9b1 	bl	80123b8 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fa1c 	bl	800549a <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fa16 	bl	800549a <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fa10 	bl	800549a <PIDDelayInit>
								pp->crnt_crv_pt=0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007090:	f36f 0300 	bfc	r3, #0, #1
 8007094:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80070a0:	e036      	b.n	8007110 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80070a8:	edd3 7a00 	vldr	s15, [r3]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80070b2:	4619      	mov	r1, r3
 80070b4:	eeb0 0a67 	vmov.f32	s0, s15
 80070b8:	2004      	movs	r0, #4
 80070ba:	f7fe f89c 	bl	80051f6 <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80070be:	2201      	movs	r2, #1
 80070c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070c4:	4861      	ldr	r0, [pc, #388]	; (800724c <PathPlan+0x133c>)
 80070c6:	f00b f977 	bl	80123b8 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe f9e2 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe f9dc 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe f9d6 	bl	800549a <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007104:	f36f 0300 	bfc	r3, #0, #1
 8007108:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 800710c:	e000      	b.n	8007110 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 800710e:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	f001 8557 	beq.w	8008bd0 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	ed93 7a00 	vldr	s14, [r3]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800713c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	ed93 7a00 	vldr	s14, [r3]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007170:	f36f 03c3 	bfc	r3, #3, #1
 8007174:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800717e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007186:	d107      	bne.n	8007198 <PathPlan+0x1288>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800718e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007196:	d021      	beq.n	80071dc <PathPlan+0x12cc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800719e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	d107      	bne.n	80071b8 <PathPlan+0x12a8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80071ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b6:	d011      	beq.n	80071dc <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80071c4:	eef0 0a47 	vmov.f32	s1, s14
 80071c8:	eeb0 0a67 	vmov.f32	s0, s15
 80071cc:	f017 fb56 	bl	801e87c <atan2f>
 80071d0:	eef0 7a40 	vmov.f32	s15, s0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80071da:	e048      	b.n	800726e <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80071e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	d007      	beq.n	80071fc <PathPlan+0x12ec>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80071f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	d10b      	bne.n	8007214 <PathPlan+0x1304>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	d503      	bpl.n	8007214 <PathPlan+0x1304>
						pp->heading = 1.5708;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	; (8007250 <PathPlan+0x1340>)
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c
 8007212:	e02c      	b.n	800726e <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800721a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	d007      	beq.n	8007234 <PathPlan+0x1324>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800722a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800722e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007232:	d111      	bne.n	8007258 <PathPlan+0x1348>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800723a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	dd09      	ble.n	8007258 <PathPlan+0x1348>
						pp->heading = -1.5708;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a03      	ldr	r2, [pc, #12]	; (8007254 <PathPlan+0x1344>)
 8007248:	65da      	str	r2, [r3, #92]	; 0x5c
 800724a:	e010      	b.n	800726e <PathPlan+0x135e>
 800724c:	40020800 	.word	0x40020800
 8007250:	3fc90ff9 	.word	0x3fc90ff9
 8007254:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007266:	f043 0308 	orr.w	r3, r3, #8
 800726a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	3374      	adds	r3, #116	; 0x74
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	ed93 8a00 	vldr	s16, [r3]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007286:	eeb0 0a67 	vmov.f32	s0, s15
 800728a:	f017 fa6d 	bl	801e768 <cosf>
 800728e:	eef0 7a40 	vmov.f32	s15, s0
 8007292:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	3374      	adds	r3, #116	; 0x74
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	ed93 8a00 	vldr	s16, [r3]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80072b4:	eeb0 0a67 	vmov.f32	s0, s15
 80072b8:	f017 fa9e 	bl	801e7f8 <sinf>
 80072bc:	eef0 7a40 	vmov.f32	s15, s0
 80072c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	665a      	str	r2, [r3, #100]	; 0x64
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f8f0 	bl	80054d6 <PID>
				PID(&(pp->y));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe f8ea 	bl	80054d6 <PID>
				PID(&(pp->z));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe f8e4 	bl	80054d6 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	edd3 7a06 	vldr	s15, [r3, #24]
 800731a:	eeb0 0a67 	vmov.f32	s0, s15
 800731e:	f017 fa23 	bl	801e768 <cosf>
 8007322:	eef0 7a40 	vmov.f32	s15, s0
 8007326:	ee28 8a27 	vmul.f32	s16, s16, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	edd3 7a06 	vldr	s15, [r3, #24]
 8007336:	eeb0 0a67 	vmov.f32	s0, s15
 800733a:	f017 fa5d 	bl	801e7f8 <sinf>
 800733e:	eef0 7a40 	vmov.f32	s15, s0
 8007342:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007346:	ee78 7a67 	vsub.f32	s15, s16, s15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	edd3 7a06 	vldr	s15, [r3, #24]
 800735c:	eeb0 0a67 	vmov.f32	s0, s15
 8007360:	f017 fa4a 	bl	801e7f8 <sinf>
 8007364:	eef0 7a40 	vmov.f32	s15, s0
 8007368:	ee28 8a27 	vmul.f32	s16, s16, s15
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	edd3 7a06 	vldr	s15, [r3, #24]
 8007378:	eeb0 0a67 	vmov.f32	s0, s15
 800737c:	f017 f9f4 	bl	801e768 <cosf>
 8007380:	eef0 7a40 	vmov.f32	s15, s0
 8007384:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007388:	ee78 7a27 	vadd.f32	s15, s16, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	edd3 7a06 	vldr	s15, [r3, #24]
 800739e:	eeb0 0a67 	vmov.f32	s0, s15
 80073a2:	f017 f9e1 	bl	801e768 <cosf>
 80073a6:	eef0 7a40 	vmov.f32	s15, s0
 80073aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80073ba:	eeb0 0a67 	vmov.f32	s0, s15
 80073be:	f017 fa1b 	bl	801e7f8 <sinf>
 80073c2:	eef0 7a40 	vmov.f32	s15, s0
 80073c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80073ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80073e0:	eeb0 0a67 	vmov.f32	s0, s15
 80073e4:	f017 fa08 	bl	801e7f8 <sinf>
 80073e8:	eef0 7a40 	vmov.f32	s15, s0
 80073ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80073fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007400:	f017 f9b2 	bl	801e768 <cosf>
 8007404:	eef0 7a40 	vmov.f32	s15, s0
 8007408:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800740c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 8161 	bne.w	80076e4 <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800742e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007432:	ee17 0a90 	vmov	r0, s15
 8007436:	f7f9 f887 	bl	8000548 <__aeabi_f2d>
 800743a:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4614      	mov	r4, r2
 800744c:	461d      	mov	r5, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 f877 	bl	8000548 <__aeabi_f2d>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff11 	bl	8000288 <__aeabi_dsub>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	f7f9 fbbb 	bl	8000be8 <__aeabi_d2f>
 8007472:	4602      	mov	r2, r0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800748a:	ee17 0a90 	vmov	r0, s15
 800748e:	f7f9 f85b 	bl	8000548 <__aeabi_f2d>
 8007492:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f9 f8ad 	bl	80005f8 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4614      	mov	r4, r2
 80074a4:	461d      	mov	r5, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7f9 f84b 	bl	8000548 <__aeabi_f2d>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f8 fee7 	bl	800028c <__adddf3>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7f9 fb8f 	bl	8000be8 <__aeabi_d2f>
 80074ca:	4602      	mov	r2, r0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80074de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e2:	ee17 0a90 	vmov	r0, s15
 80074e6:	f7f9 f82f 	bl	8000548 <__aeabi_f2d>
 80074ea:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f9 f881 	bl	80005f8 <__aeabi_dmul>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4614      	mov	r4, r2
 80074fc:	461d      	mov	r5, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007504:	4618      	mov	r0, r3
 8007506:	f7f9 f81f 	bl	8000548 <__aeabi_f2d>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f8 febb 	bl	800028c <__adddf3>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4610      	mov	r0, r2
 800751c:	4619      	mov	r1, r3
 800751e:	f7f9 fb63 	bl	8000be8 <__aeabi_d2f>
 8007522:	4602      	mov	r2, r0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800753a:	ee17 0a90 	vmov	r0, s15
 800753e:	f7f9 f803 	bl	8000548 <__aeabi_f2d>
 8007542:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	f7f9 f855 	bl	80005f8 <__aeabi_dmul>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800755c:	4618      	mov	r0, r3
 800755e:	f7f8 fff3 	bl	8000548 <__aeabi_f2d>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 fe8d 	bl	8000288 <__aeabi_dsub>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f7f9 fb37 	bl	8000be8 <__aeabi_d2f>
 800757a:	4602      	mov	r2, r0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800758e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007592:	ee17 0a90 	vmov	r0, s15
 8007596:	f7f8 ffd7 	bl	8000548 <__aeabi_f2d>
 800759a:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4614      	mov	r4, r2
 80075ac:	461d      	mov	r5, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7f8 ffc7 	bl	8000548 <__aeabi_f2d>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f8 fe63 	bl	800028c <__adddf3>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	f7f9 fb0b 	bl	8000be8 <__aeabi_d2f>
 80075d2:	4602      	mov	r2, r0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80075e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ea:	ee17 0a90 	vmov	r0, s15
 80075ee:	f7f8 ffab 	bl	8000548 <__aeabi_f2d>
 80075f2:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4614      	mov	r4, r2
 8007604:	461d      	mov	r5, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800760c:	4618      	mov	r0, r3
 800760e:	f7f8 ff9b 	bl	8000548 <__aeabi_f2d>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f8 fe37 	bl	800028c <__adddf3>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	f7f9 fadf 	bl	8000be8 <__aeabi_d2f>
 800762a:	4602      	mov	r2, r0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800763e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007642:	ee17 0a90 	vmov	r0, s15
 8007646:	f7f8 ff7f 	bl	8000548 <__aeabi_f2d>
 800764a:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 ffd1 	bl	80005f8 <__aeabi_dmul>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4614      	mov	r4, r2
 800765c:	461d      	mov	r5, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007664:	4618      	mov	r0, r3
 8007666:	f7f8 ff6f 	bl	8000548 <__aeabi_f2d>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f8 fe0b 	bl	800028c <__adddf3>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4610      	mov	r0, r2
 800767c:	4619      	mov	r1, r3
 800767e:	f7f9 fab3 	bl	8000be8 <__aeabi_d2f>
 8007682:	4602      	mov	r2, r0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769a:	ee17 0a90 	vmov	r0, s15
 800769e:	f7f8 ff53 	bl	8000548 <__aeabi_f2d>
 80076a2:	a3f4      	add	r3, pc, #976	; (adr r3, 8007a74 <PathPlan+0x1b64>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	461d      	mov	r5, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f8 ff44 	bl	8000548 <__aeabi_f2d>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 fde0 	bl	800028c <__adddf3>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	f7f9 fa88 	bl	8000be8 <__aeabi_d2f>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 80076e0:	f001 ba76 	b.w	8008bd0 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	f041 8270 	bne.w	8008bd0 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7f8 ff26 	bl	8000548 <__aeabi_f2d>
 80076fc:	a3d8      	add	r3, pc, #864	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4614      	mov	r4, r2
 800770c:	461d      	mov	r5, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007714:	4618      	mov	r0, r3
 8007716:	f7f8 ff17 	bl	8000548 <__aeabi_f2d>
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	4bd2      	ldr	r3, [pc, #840]	; (8007a68 <PathPlan+0x1b58>)
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f7f8 fdac 	bl	8000288 <__aeabi_dsub>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4614      	mov	r4, r2
 8007736:	461d      	mov	r5, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800773e:	4618      	mov	r0, r3
 8007740:	f7f8 ff02 	bl	8000548 <__aeabi_f2d>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	f7f8 fd9e 	bl	800028c <__adddf3>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	f7f9 fa46 	bl	8000be8 <__aeabi_d2f>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800776a:	4618      	mov	r0, r3
 800776c:	f7f8 feec 	bl	8000548 <__aeabi_f2d>
 8007770:	a3bb      	add	r3, pc, #748	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 ff3f 	bl	80005f8 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fedd 	bl	8000548 <__aeabi_f2d>
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	4bb5      	ldr	r3, [pc, #724]	; (8007a68 <PathPlan+0x1b58>)
 8007794:	f7f8 ff30 	bl	80005f8 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd74 	bl	800028c <__adddf3>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fec8 	bl	8000548 <__aeabi_f2d>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f8 fd62 	bl	8000288 <__aeabi_dsub>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7f9 fa0c 	bl	8000be8 <__aeabi_d2f>
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80077e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7f8 fea7 	bl	8000548 <__aeabi_f2d>
 80077fa:	a399      	add	r3, pc, #612	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fefa 	bl	80005f8 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 fe98 	bl	8000548 <__aeabi_f2d>
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	4b92      	ldr	r3, [pc, #584]	; (8007a68 <PathPlan+0x1b58>)
 800781e:	f7f8 feeb 	bl	80005f8 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f8 fd2d 	bl	8000288 <__aeabi_dsub>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4614      	mov	r4, r2
 8007834:	461d      	mov	r5, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800783c:	4618      	mov	r0, r3
 800783e:	f7f8 fe83 	bl	8000548 <__aeabi_f2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	f7f9 f9c7 	bl	8000be8 <__aeabi_d2f>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe6d 	bl	8000548 <__aeabi_f2d>
 800786e:	a37c      	add	r3, pc, #496	; (adr r3, 8007a60 <PathPlan+0x1b50>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4614      	mov	r4, r2
 800787e:	461d      	mov	r5, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8007886:	4618      	mov	r0, r3
 8007888:	f7f8 fe5e 	bl	8000548 <__aeabi_f2d>
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	4b75      	ldr	r3, [pc, #468]	; (8007a68 <PathPlan+0x1b58>)
 8007892:	f7f8 feb1 	bl	80005f8 <__aeabi_dmul>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fcf5 	bl	800028c <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4614      	mov	r4, r2
 80078a8:	461d      	mov	r5, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f8 fe49 	bl	8000548 <__aeabi_f2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fce5 	bl	800028c <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7f9 f98d 	bl	8000be8 <__aeabi_d2f>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80078e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 80078ec:	f001 b970 	b.w	8008bd0 <PathPlan+0x2cc0>
			led3 = 1;
 80078f0:	4a5e      	ldr	r2, [pc, #376]	; (8007a6c <PathPlan+0x1b5c>)
 80078f2:	7853      	ldrb	r3, [r2, #1]
 80078f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f8:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	331a      	adds	r3, #26
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	ed93 7a00 	vldr	s14, [r3]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	3328      	adds	r3, #40	; 0x28
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	3304      	adds	r3, #4
 800792c:	ed93 7a00 	vldr	s14, [r3]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	3338      	adds	r3, #56	; 0x38
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	ed93 7a00 	vldr	s14, [r3]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	edd3 7a04 	vldr	s15, [r3, #16]
 8007958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007968:	eef0 7ae7 	vabs.f32	s15, s15
 800796c:	ee17 0a90 	vmov	r0, s15
 8007970:	f7f8 fdea 	bl	8000548 <__aeabi_f2d>
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800797e:	eef0 7ae7 	vabs.f32	s15, s15
 8007982:	ee17 0a90 	vmov	r0, s15
 8007986:	f7f8 fddf 	bl	8000548 <__aeabi_f2d>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079a6:	f7f8 ff51 	bl	800084c <__aeabi_ddiv>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4614      	mov	r4, r2
 80079b0:	461d      	mov	r5, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f8 fdc5 	bl	8000548 <__aeabi_f2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f9 f889 	bl	8000adc <__aeabi_dcmplt>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <PathPlan+0x1ae8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80079d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80079e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	d506      	bpl.n	80079f8 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80079f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e005      	b.n	8007a04 <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a0a:	edd3 7a00 	vldr	s15, [r3]
 8007a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a1c:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a26:	edd3 7a00 	vldr	s15, [r3]
 8007a2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007a70 <PathPlan+0x1b60>
 8007a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a36:	d821      	bhi.n	8007a7c <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a3e:	ed93 7a00 	vldr	s14, [r3]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007a48:	edd3 7a00 	vldr	s15, [r3]
 8007a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a56:	edc3 7a00 	vstr	s15, [r3]
 8007a5a:	e045      	b.n	8007ae8 <PathPlan+0x1bd8>
 8007a5c:	f3af 8000 	nop.w
 8007a60:	a1cac083 	.word	0xa1cac083
 8007a64:	3febb645 	.word	0x3febb645
 8007a68:	3fe00000 	.word	0x3fe00000
 8007a6c:	40020814 	.word	0x40020814
 8007a70:	42700000 	.word	0x42700000
 8007a74:	dbf8b9bb 	.word	0xdbf8b9bb
 8007a78:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007a82:	edd3 6a00 	vldr	s13, [r3]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007a8c:	ed93 7a00 	vldr	s14, [r3]
 8007a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007a9a:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f8 fd4e 	bl	8000548 <__aeabi_f2d>
 8007aac:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f9 f826 	bl	8000b04 <__aeabi_dcmpge>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007ac6:	e003      	b.n	8007ad0 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007aee:	eef0 7ae7 	vabs.f32	s15, s15
 8007af2:	ee17 0a90 	vmov	r0, s15
 8007af6:	f7f8 fd27 	bl	8000548 <__aeabi_f2d>
 8007afa:	4604      	mov	r4, r0
 8007afc:	460d      	mov	r5, r1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007b04:	eef0 7ae7 	vabs.f32	s15, s15
 8007b08:	ee17 0a90 	vmov	r0, s15
 8007b0c:	f7f8 fd1c 	bl	8000548 <__aeabi_f2d>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fbb8 	bl	800028c <__adddf3>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b2c:	f7f8 fe8e 	bl	800084c <__aeabi_ddiv>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	461d      	mov	r5, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7f8 fd02 	bl	8000548 <__aeabi_f2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 ffc6 	bl	8000adc <__aeabi_dcmplt>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 84a6 	beq.w	80084a4 <PathPlan+0x2594>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007b5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b70:	f140 8498 	bpl.w	80084a4 <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007b80:	3b02      	subs	r3, #2
 8007b82:	429a      	cmp	r2, r3
 8007b84:	f280 8206 	bge.w	8007f94 <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	3346      	adds	r3, #70	; 0x46
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	3304      	adds	r3, #4
 8007b98:	edd3 7a00 	vldr	s15, [r3]
 8007b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba0:	eef4 7a47 	vcmp.f32	s15, s14
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	f040 813a 	bne.w	8007e20 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	f040 8476 	bne.w	80084a4 <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	331a      	adds	r3, #26
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	ed93 7a00 	vldr	s14, [r3]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	3328      	adds	r3, #40	; 0x28
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	ed93 7a00 	vldr	s14, [r3]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	3338      	adds	r3, #56	; 0x38
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	ed93 7a00 	vldr	s14, [r3]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	331a      	adds	r3, #26
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	ed93 7a00 	vldr	s14, [r3]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	d03d      	beq.n	8007cd0 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	331a      	adds	r3, #26
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	ed93 7a00 	vldr	s14, [r3]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c70:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	3384      	adds	r3, #132	; 0x84
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	edd3 7a00 	vldr	s15, [r3]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ca8:	4618      	mov	r0, r3
 8007caa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007cae:	eeb0 3a65 	vmov.f32	s6, s11
 8007cb2:	eef0 2a46 	vmov.f32	s5, s12
 8007cb6:	eeb0 2a66 	vmov.f32	s4, s13
 8007cba:	eef0 1a67 	vmov.f32	s3, s15
 8007cbe:	eeb0 1a47 	vmov.f32	s2, s14
 8007cc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007cc6:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007f90 <PathPlan+0x2080>
 8007cca:	f7fd fa61 	bl	8005190 <PIDGainInit>
 8007cce:	e028      	b.n	8007d22 <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	3384      	adds	r3, #132	; 0x84
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	3304      	adds	r3, #4
 8007ce0:	edd3 7a00 	vldr	s15, [r3]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d02:	eeb0 3a46 	vmov.f32	s6, s12
 8007d06:	eef0 2a66 	vmov.f32	s5, s13
 8007d0a:	eeb0 2a47 	vmov.f32	s4, s14
 8007d0e:	eef0 1a67 	vmov.f32	s3, s15
 8007d12:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007d16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d1a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007f90 <PathPlan+0x2080>
 8007d1e:	f7fd fa37 	bl	8005190 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	3328      	adds	r3, #40	; 0x28
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	3304      	adds	r3, #4
 8007d32:	ed93 7a00 	vldr	s14, [r3]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	d03d      	beq.n	8007dc6 <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	3328      	adds	r3, #40	; 0x28
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	3304      	adds	r3, #4
 8007d5a:	ed93 7a00 	vldr	s14, [r3]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d68:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	3394      	adds	r3, #148	; 0x94
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	edd3 7a00 	vldr	s15, [r3]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d9e:	4618      	mov	r0, r3
 8007da0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007da4:	eeb0 3a65 	vmov.f32	s6, s11
 8007da8:	eef0 2a46 	vmov.f32	s5, s12
 8007dac:	eeb0 2a66 	vmov.f32	s4, s13
 8007db0:	eef0 1a67 	vmov.f32	s3, s15
 8007db4:	eeb0 1a47 	vmov.f32	s2, s14
 8007db8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007dbc:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8007f90 <PathPlan+0x2080>
 8007dc0:	f7fd f9e6 	bl	8005190 <PIDGainInit>
 8007dc4:	e027      	b.n	8007e16 <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	3394      	adds	r3, #148	; 0x94
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	edd3 7a00 	vldr	s15, [r3]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007df0:	4618      	mov	r0, r3
 8007df2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007df6:	eeb0 3a46 	vmov.f32	s6, s12
 8007dfa:	eef0 2a66 	vmov.f32	s5, s13
 8007dfe:	eeb0 2a47 	vmov.f32	s4, s14
 8007e02:	eef0 1a67 	vmov.f32	s3, s15
 8007e06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007e0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007e0e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8007f90 <PathPlan+0x2080>
 8007e12:	f7fd f9bd 	bl	8005190 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007e1e:	e341      	b.n	80084a4 <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	331a      	adds	r3, #26
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	ed93 7a00 	vldr	s14, [r3]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	3328      	adds	r3, #40	; 0x28
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	3304      	adds	r3, #4
 8007e60:	ed93 7a00 	vldr	s14, [r3]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	3338      	adds	r3, #56	; 0x38
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	ed93 7a00 	vldr	s14, [r3]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	331a      	adds	r3, #26
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	ed93 7a00 	vldr	s14, [r3]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eba:	d01d      	beq.n	8007ef8 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	331a      	adds	r3, #26
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	ed93 7a00 	vldr	s14, [r3]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8007edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007eea:	4619      	mov	r1, r3
 8007eec:	eeb0 0a47 	vmov.f32	s0, s14
 8007ef0:	2002      	movs	r0, #2
 8007ef2:	f7fd f980 	bl	80051f6 <PIDGainSet>
 8007ef6:	e008      	b.n	8007f0a <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007efe:	4619      	mov	r1, r3
 8007f00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f04:	2002      	movs	r0, #2
 8007f06:	f7fd f976 	bl	80051f6 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	3328      	adds	r3, #40	; 0x28
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	ed93 7a00 	vldr	s14, [r3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	d01e      	beq.n	8007f70 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	3328      	adds	r3, #40	; 0x28
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	ed93 7a00 	vldr	s14, [r3]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f50:	eef0 7ae7 	vabs.f32	s15, s15
 8007f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007f62:	4619      	mov	r1, r3
 8007f64:	eeb0 0a47 	vmov.f32	s0, s14
 8007f68:	2002      	movs	r0, #2
 8007f6a:	f7fd f944 	bl	80051f6 <PIDGainSet>
 8007f6e:	e299      	b.n	80084a4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007f76:	4619      	mov	r1, r3
 8007f78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f7fd f93a 	bl	80051f6 <PIDGainSet>
 8007f82:	e28f      	b.n	80084a4 <PathPlan+0x2594>
 8007f84:	f3af 8000 	nop.w
 8007f88:	66666666 	.word	0x66666666
 8007f8c:	3fee6666 	.word	0x3fee6666
 8007f90:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007fa0:	3b02      	subs	r3, #2
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	f040 81fe 	bne.w	80083a4 <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	3346      	adds	r3, #70	; 0x46
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	edd3 7a00 	vldr	s15, [r3]
 8007fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc0:	eef4 7a47 	vcmp.f32	s15, s14
 8007fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc8:	f040 813a 	bne.w	8008240 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	f040 8266 	bne.w	80084a4 <PathPlan+0x2594>
							pp->point_count++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	331a      	adds	r3, #26
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	ed93 7a00 	vldr	s14, [r3]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	3304      	adds	r3, #4
 8008018:	ed93 7a00 	vldr	s14, [r3]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	3338      	adds	r3, #56	; 0x38
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	ed93 7a00 	vldr	s14, [r3]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	edd3 7a04 	vldr	s15, [r3, #16]
 8008044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	331a      	adds	r3, #26
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	ed93 7a00 	vldr	s14, [r3]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800806a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800806e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008072:	d03d      	beq.n	80080f0 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	331a      	adds	r3, #26
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	ed93 7a00 	vldr	s14, [r3]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800808c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008090:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	3384      	adds	r3, #132	; 0x84
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	edd3 7a00 	vldr	s15, [r3]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80080c8:	4618      	mov	r0, r3
 80080ca:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80080ce:	eeb0 3a65 	vmov.f32	s6, s11
 80080d2:	eef0 2a46 	vmov.f32	s5, s12
 80080d6:	eeb0 2a66 	vmov.f32	s4, s13
 80080da:	eef0 1a67 	vmov.f32	s3, s15
 80080de:	eeb0 1a47 	vmov.f32	s2, s14
 80080e2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80080e6:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8007f90 <PathPlan+0x2080>
 80080ea:	f7fd f851 	bl	8005190 <PIDGainInit>
 80080ee:	e028      	b.n	8008142 <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	3384      	adds	r3, #132	; 0x84
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	edd3 7a00 	vldr	s15, [r3]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800811c:	4618      	mov	r0, r3
 800811e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008122:	eeb0 3a46 	vmov.f32	s6, s12
 8008126:	eef0 2a66 	vmov.f32	s5, s13
 800812a:	eeb0 2a47 	vmov.f32	s4, s14
 800812e:	eef0 1a67 	vmov.f32	s3, s15
 8008132:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008136:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800813a:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8007f90 <PathPlan+0x2080>
 800813e:	f7fd f827 	bl	8005190 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	3328      	adds	r3, #40	; 0x28
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	ed93 7a00 	vldr	s14, [r3]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800815c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008168:	d03d      	beq.n	80081e6 <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	3328      	adds	r3, #40	; 0x28
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	3304      	adds	r3, #4
 800817a:	ed93 7a00 	vldr	s14, [r3]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008188:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800818c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	3394      	adds	r3, #148	; 0x94
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	edd3 7a00 	vldr	s15, [r3]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80081be:	4618      	mov	r0, r3
 80081c0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081c4:	eeb0 3a65 	vmov.f32	s6, s11
 80081c8:	eef0 2a46 	vmov.f32	s5, s12
 80081cc:	eeb0 2a66 	vmov.f32	s4, s13
 80081d0:	eef0 1a67 	vmov.f32	s3, s15
 80081d4:	eeb0 1a47 	vmov.f32	s2, s14
 80081d8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081dc:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8007f90 <PathPlan+0x2080>
 80081e0:	f7fc ffd6 	bl	8005190 <PIDGainInit>
 80081e4:	e027      	b.n	8008236 <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	3394      	adds	r3, #148	; 0x94
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	edd3 7a00 	vldr	s15, [r3]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008210:	4618      	mov	r0, r3
 8008212:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008216:	eeb0 3a46 	vmov.f32	s6, s12
 800821a:	eef0 2a66 	vmov.f32	s5, s13
 800821e:	eeb0 2a47 	vmov.f32	s4, s14
 8008222:	eef0 1a67 	vmov.f32	s3, s15
 8008226:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800822a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800822e:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007f90 <PathPlan+0x2080>
 8008232:	f7fc ffad 	bl	8005190 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800823e:	e131      	b.n	80084a4 <PathPlan+0x2594>
						pp->point_count++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	331a      	adds	r3, #26
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	ed93 7a00 	vldr	s14, [r3]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	3328      	adds	r3, #40	; 0x28
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	3304      	adds	r3, #4
 8008280:	ed93 7a00 	vldr	s14, [r3]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800828a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	3338      	adds	r3, #56	; 0x38
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	ed93 7a00 	vldr	s14, [r3]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80082ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	331a      	adds	r3, #26
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	ed93 7a00 	vldr	s14, [r3]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80082ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	d01d      	beq.n	8008318 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	331a      	adds	r3, #26
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	ed93 7a00 	vldr	s14, [r3]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80082f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082f8:	eef0 7ae7 	vabs.f32	s15, s15
 80082fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800830a:	4619      	mov	r1, r3
 800830c:	eeb0 0a47 	vmov.f32	s0, s14
 8008310:	2002      	movs	r0, #2
 8008312:	f7fc ff70 	bl	80051f6 <PIDGainSet>
 8008316:	e008      	b.n	800832a <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800831e:	4619      	mov	r1, r3
 8008320:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008324:	2002      	movs	r0, #2
 8008326:	f7fc ff66 	bl	80051f6 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	3328      	adds	r3, #40	; 0x28
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	ed93 7a00 	vldr	s14, [r3]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008348:	eef5 7a40 	vcmp.f32	s15, #0.0
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	d01e      	beq.n	8008390 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	3328      	adds	r3, #40	; 0x28
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	3304      	adds	r3, #4
 8008362:	ed93 7a00 	vldr	s14, [r3]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800836c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008370:	eef0 7ae7 	vabs.f32	s15, s15
 8008374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008382:	4619      	mov	r1, r3
 8008384:	eeb0 0a47 	vmov.f32	s0, s14
 8008388:	2002      	movs	r0, #2
 800838a:	f7fc ff34 	bl	80051f6 <PIDGainSet>
 800838e:	e089      	b.n	80084a4 <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008396:	4619      	mov	r1, r3
 8008398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800839c:	2002      	movs	r0, #2
 800839e:	f7fc ff2a 	bl	80051f6 <PIDGainSet>
 80083a2:	e07f      	b.n	80084a4 <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80083aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80083b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	d572      	bpl.n	80084a4 <PathPlan+0x2594>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80083c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80083ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	d565      	bpl.n	80084a4 <PathPlan+0x2594>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80083de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80083ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f4:	d856      	bhi.n	80084a4 <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	3346      	adds	r3, #70	; 0x46
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	edd3 7a00 	vldr	s15, [r3]
 800840a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800840e:	eef4 7a47 	vcmp.f32	s15, s14
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	d127      	bne.n	8008468 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800841e:	2b01      	cmp	r3, #1
 8008420:	d140      	bne.n	80084a4 <PathPlan+0x2594>
							led3 = 0;
 8008422:	4a7d      	ldr	r2, [pc, #500]	; (8008618 <PathPlan+0x2708>)
 8008424:	7853      	ldrb	r3, [r2, #1]
 8008426:	f36f 13c7 	bfc	r3, #7, #1
 800842a:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008432:	4618      	mov	r0, r3
 8008434:	f7fd f831 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd f82b 	bl	800549a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800844a:	4618      	mov	r0, r3
 800844c:	f7fd f825 	bl	800549a <PIDDelayInit>
							pp->pp_start=0;
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008456:	f36f 0300 	bfc	r3, #0, #1
 800845a:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008466:	e01d      	b.n	80084a4 <PathPlan+0x2594>
						led3 = 0;
 8008468:	4a6b      	ldr	r2, [pc, #428]	; (8008618 <PathPlan+0x2708>)
 800846a:	7853      	ldrb	r3, [r2, #1]
 800846c:	f36f 13c7 	bfc	r3, #7, #1
 8008470:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd f80e 	bl	800549a <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008484:	4618      	mov	r0, r3
 8008486:	f7fd f808 	bl	800549a <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008490:	4618      	mov	r0, r3
 8008492:	f7fd f802 	bl	800549a <PIDDelayInit>
						pp->pp_start=0;
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800849c:	f36f 0300 	bfc	r3, #0, #1
 80084a0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 838d 	beq.w	8008bd0 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	331a      	adds	r3, #26
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	ed93 7a00 	vldr	s14, [r3]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80084ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	3328      	adds	r3, #40	; 0x28
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	ed93 7a00 	vldr	s14, [r3]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80084f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008502:	f36f 03c3 	bfc	r3, #3, #1
 8008506:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008510:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	d107      	bne.n	800852a <PathPlan+0x261a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008520:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008528:	d021      	beq.n	800856e <PathPlan+0x265e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	d107      	bne.n	800854a <PathPlan+0x263a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d011      	beq.n	800856e <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8008556:	eef0 0a47 	vmov.f32	s1, s14
 800855a:	eeb0 0a67 	vmov.f32	s0, s15
 800855e:	f016 f98d 	bl	801e87c <atan2f>
 8008562:	eef0 7a40 	vmov.f32	s15, s0
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 800856c:	e075      	b.n	800865a <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	d007      	beq.n	800858e <PathPlan+0x267e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008584:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d10b      	bne.n	80085a6 <PathPlan+0x2696>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	d503      	bpl.n	80085a6 <PathPlan+0x2696>
						pp->heading = -1.5708;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1e      	ldr	r2, [pc, #120]	; (800861c <PathPlan+0x270c>)
 80085a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80085a4:	e059      	b.n	800865a <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	d007      	beq.n	80085c6 <PathPlan+0x26b6>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	d10b      	bne.n	80085de <PathPlan+0x26ce>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d4:	dd03      	ble.n	80085de <PathPlan+0x26ce>
						pp->heading = 1.5708;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a11      	ldr	r2, [pc, #68]	; (8008620 <PathPlan+0x2710>)
 80085da:	65da      	str	r2, [r3, #92]	; 0x5c
 80085dc:	e03d      	b.n	800865a <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ec:	d007      	beq.n	80085fe <PathPlan+0x26ee>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80085f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fc:	d112      	bne.n	8008624 <PathPlan+0x2714>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860c:	dd0a      	ble.n	8008624 <PathPlan+0x2714>
						pp->heading = 0.0;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	65da      	str	r2, [r3, #92]	; 0x5c
 8008616:	e020      	b.n	800865a <PathPlan+0x274a>
 8008618:	40020814 	.word	0x40020814
 800861c:	bfc90ff9 	.word	0xbfc90ff9
 8008620:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800862a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	d007      	beq.n	8008644 <PathPlan+0x2734>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800863a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	d10a      	bne.n	800865a <PathPlan+0x274a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800864a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008652:	d502      	bpl.n	800865a <PathPlan+0x274a>
						pp->heading = M_PI;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4ad6      	ldr	r2, [pc, #856]	; (80089b0 <PathPlan+0x2aa0>)
 8008658:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	3374      	adds	r3, #116	; 0x74
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	ed93 8a00 	vldr	s16, [r3]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008672:	eeb0 0a67 	vmov.f32	s0, s15
 8008676:	f016 f877 	bl	801e768 <cosf>
 800867a:	eef0 7a40 	vmov.f32	s15, s0
 800867e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	3374      	adds	r3, #116	; 0x74
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	ed93 8a00 	vldr	s16, [r3]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80086a0:	eeb0 0a67 	vmov.f32	s0, s15
 80086a4:	f016 f8a8 	bl	801e7f8 <sinf>
 80086a8:	eef0 7a40 	vmov.f32	s15, s0
 80086ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	665a      	str	r2, [r3, #100]	; 0x64
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fc fefa 	bl	80054d6 <PID>
				PID(&(pp->y));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fc fef4 	bl	80054d6 <PID>
				PID(&(pp->z));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fc feee 	bl	80054d6 <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	edd3 7a06 	vldr	s15, [r3, #24]
 8008706:	eeb0 0a67 	vmov.f32	s0, s15
 800870a:	f016 f82d 	bl	801e768 <cosf>
 800870e:	eef0 7a40 	vmov.f32	s15, s0
 8008712:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008722:	eeb0 0a67 	vmov.f32	s0, s15
 8008726:	f016 f867 	bl	801e7f8 <sinf>
 800872a:	eef0 7a40 	vmov.f32	s15, s0
 800872e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008732:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	edd3 7a06 	vldr	s15, [r3, #24]
 8008748:	eeb0 0a67 	vmov.f32	s0, s15
 800874c:	f016 f854 	bl	801e7f8 <sinf>
 8008750:	eef0 7a40 	vmov.f32	s15, s0
 8008754:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	edd3 7a06 	vldr	s15, [r3, #24]
 8008764:	eeb0 0a67 	vmov.f32	s0, s15
 8008768:	f015 fffe 	bl	801e768 <cosf>
 800876c:	eef0 7a40 	vmov.f32	s15, s0
 8008770:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008774:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	edd3 7a06 	vldr	s15, [r3, #24]
 800878a:	eeb0 0a67 	vmov.f32	s0, s15
 800878e:	f015 ffeb 	bl	801e768 <cosf>
 8008792:	eef0 7a40 	vmov.f32	s15, s0
 8008796:	ee28 8a27 	vmul.f32	s16, s16, s15
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80087a6:	eeb0 0a67 	vmov.f32	s0, s15
 80087aa:	f016 f825 	bl	801e7f8 <sinf>
 80087ae:	eef0 7a40 	vmov.f32	s15, s0
 80087b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80087b6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80087cc:	eeb0 0a67 	vmov.f32	s0, s15
 80087d0:	f016 f812 	bl	801e7f8 <sinf>
 80087d4:	eef0 7a40 	vmov.f32	s15, s0
 80087d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80087e8:	eeb0 0a67 	vmov.f32	s0, s15
 80087ec:	f015 ffbc 	bl	801e768 <cosf>
 80087f0:	eef0 7a40 	vmov.f32	s15, s0
 80087f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80087f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008808:	2b02      	cmp	r3, #2
 800880a:	f040 80dd 	bne.w	80089c8 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008820:	eef1 7a67 	vneg.f32	s15, s15
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800883c:	4618      	mov	r0, r3
 800883e:	f7f7 fe83 	bl	8000548 <__aeabi_f2d>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	f7f8 f9cd 	bl	8000be8 <__aeabi_d2f>
 800884e:	4603      	mov	r3, r0
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef1 7a67 	vneg.f32	s15, s15
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800886a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800886e:	ee17 0a90 	vmov	r0, s15
 8008872:	f7f7 fe69 	bl	8000548 <__aeabi_f2d>
 8008876:	a34c      	add	r3, pc, #304	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 febc 	bl	80005f8 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4614      	mov	r4, r2
 8008886:	461d      	mov	r5, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800888e:	4618      	mov	r0, r3
 8008890:	f7f7 fe5a 	bl	8000548 <__aeabi_f2d>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4620      	mov	r0, r4
 800889a:	4629      	mov	r1, r5
 800889c:	f7f7 fcf6 	bl	800028c <__adddf3>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4610      	mov	r0, r2
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7f8 f99e 	bl	8000be8 <__aeabi_d2f>
 80088ac:	4602      	mov	r2, r0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80088c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088c4:	ee17 0a90 	vmov	r0, s15
 80088c8:	f7f7 fe3e 	bl	8000548 <__aeabi_f2d>
 80088cc:	a336      	add	r3, pc, #216	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4614      	mov	r4, r2
 80088dc:	461d      	mov	r5, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7f7 fe2f 	bl	8000548 <__aeabi_f2d>
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fccb 	bl	800028c <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7f8 f973 	bl	8000be8 <__aeabi_d2f>
 8008902:	4602      	mov	r2, r0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800891a:	ee17 0a90 	vmov	r0, s15
 800891e:	f7f7 fe13 	bl	8000548 <__aeabi_f2d>
 8008922:	a321      	add	r3, pc, #132	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4614      	mov	r4, r2
 8008932:	461d      	mov	r5, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe04 	bl	8000548 <__aeabi_f2d>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fca0 	bl	800028c <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4610      	mov	r0, r2
 8008952:	4619      	mov	r1, r3
 8008954:	f7f8 f948 	bl	8000be8 <__aeabi_d2f>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800896c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008970:	ee17 0a90 	vmov	r0, s15
 8008974:	f7f7 fde8 	bl	8000548 <__aeabi_f2d>
 8008978:	a30b      	add	r3, pc, #44	; (adr r3, 80089a8 <PathPlan+0x2a98>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fe3b 	bl	80005f8 <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4614      	mov	r4, r2
 8008988:	461d      	mov	r5, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fdd9 	bl	8000548 <__aeabi_f2d>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4620      	mov	r0, r4
 800899c:	4629      	mov	r1, r5
 800899e:	f7f7 fc75 	bl	800028c <__adddf3>
 80089a2:	4602      	mov	r2, r0
 80089a4:	e006      	b.n	80089b4 <PathPlan+0x2aa4>
 80089a6:	bf00      	nop
 80089a8:	dbf8b9bb 	.word	0xdbf8b9bb
 80089ac:	3fe6a09e 	.word	0x3fe6a09e
 80089b0:	40490fdb 	.word	0x40490fdb
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7f8 f915 	bl	8000be8 <__aeabi_d2f>
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 80089c6:	e103      	b.n	8008bd0 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	f040 80fe 	bne.w	8008bd0 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f7 fdb4 	bl	8000548 <__aeabi_f2d>
 80089e0:	a37f      	add	r3, pc, #508	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	f7f7 fe07 	bl	80005f8 <__aeabi_dmul>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4614      	mov	r4, r2
 80089f0:	461d      	mov	r5, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7f7 fda5 	bl	8000548 <__aeabi_f2d>
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	4b79      	ldr	r3, [pc, #484]	; (8008be8 <PathPlan+0x2cd8>)
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fc3a 	bl	8000288 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f7 fd90 	bl	8000548 <__aeabi_f2d>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2c 	bl	800028c <__adddf3>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f7f8 f8d4 	bl	8000be8 <__aeabi_d2f>
 8008a40:	4602      	mov	r2, r0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fd7a 	bl	8000548 <__aeabi_f2d>
 8008a54:	a362      	add	r3, pc, #392	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	461d      	mov	r5, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f7 fd6b 	bl	8000548 <__aeabi_f2d>
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	4b5c      	ldr	r3, [pc, #368]	; (8008be8 <PathPlan+0x2cd8>)
 8008a78:	f7f7 fdbe 	bl	80005f8 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	461d      	mov	r5, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fd56 	bl	8000548 <__aeabi_f2d>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbf0 	bl	8000288 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4610      	mov	r0, r2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f7f8 f89a 	bl	8000be8 <__aeabi_d2f>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7f7 fd35 	bl	8000548 <__aeabi_f2d>
 8008ade:	a340      	add	r3, pc, #256	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fd88 	bl	80005f8 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4614      	mov	r4, r2
 8008aee:	461d      	mov	r5, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fd26 	bl	8000548 <__aeabi_f2d>
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	4b39      	ldr	r3, [pc, #228]	; (8008be8 <PathPlan+0x2cd8>)
 8008b02:	f7f7 fd79 	bl	80005f8 <__aeabi_dmul>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fbbb 	bl	8000288 <__aeabi_dsub>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4614      	mov	r4, r2
 8008b18:	461d      	mov	r5, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7f7 fd11 	bl	8000548 <__aeabi_f2d>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7f7 fbad 	bl	800028c <__adddf3>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7f8 f855 	bl	8000be8 <__aeabi_d2f>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7f7 fcfb 	bl	8000548 <__aeabi_f2d>
 8008b52:	a323      	add	r3, pc, #140	; (adr r3, 8008be0 <PathPlan+0x2cd0>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	461d      	mov	r5, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f7 fcec 	bl	8000548 <__aeabi_f2d>
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <PathPlan+0x2cd8>)
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7f7 fb83 	bl	800028c <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4614      	mov	r4, r2
 8008b8c:	461d      	mov	r5, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f7 fcd7 	bl	8000548 <__aeabi_f2d>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fb73 	bl	800028c <__adddf3>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4610      	mov	r0, r2
 8008bac:	4619      	mov	r1, r3
 8008bae:	f7f8 f81b 	bl	8000be8 <__aeabi_d2f>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	ecbd 8b02 	vpop	{d8}
 8008bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008bde:	bf00      	nop
 8008be0:	a1cac083 	.word	0xa1cac083
 8008be4:	3febb645 	.word	0x3febb645
 8008be8:	3fe00000 	.word	0x3fe00000

08008bec <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	230b      	movs	r3, #11
 8008bfe:	2188      	movs	r1, #136	; 0x88
 8008c00:	f009 fd68 	bl	80126d4 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f81e 	bl	8008c46 <PSx_HandlerI2C>
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	230b      	movs	r3, #11
 8008c2c:	2188      	movs	r1, #136	; 0x88
 8008c2e:	f009 fd51 	bl	80126d4 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	789a      	ldrb	r2, [r3, #2]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	78da      	ldrb	r2, [r3, #3]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	791b      	ldrb	r3, [r3, #4]
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	795b      	ldrb	r3, [r3, #5]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	79db      	ldrb	r3, [r3, #7]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7a1b      	ldrb	r3, [r3, #8]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7a5b      	ldrb	r3, [r3, #9]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7a9a      	ldrb	r2, [r3, #10]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7ada      	ldrb	r2, [r3, #11]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f804 	bl	8008cc0 <PSxBTGetXY>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	ee07 3a90 	vmov	s15, r3
 8008cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8008fd8 <PSxBTGetXY+0x318>
 8008cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce0:	d53e      	bpl.n	8008d60 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	ee17 0a90 	vmov	r0, s15
 8008cf2:	f7f7 fc29 	bl	8000548 <__aeabi_f2d>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	a1b5      	add	r1, pc, #724	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	f7f7 fac2 	bl	8000288 <__aeabi_dsub>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	4bb2      	ldr	r3, [pc, #712]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008d12:	f7f7 fd9b 	bl	800084c <__aeabi_ddiv>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7f7 ff63 	bl	8000be8 <__aeabi_d2f>
 8008d22:	4602      	mov	r2, r0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d36:	d504      	bpl.n	8008d42 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d40:	e05d      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	dd53      	ble.n	8008dfe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008d5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d5e:	e04e      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	ee07 3a90 	vmov	s15, r3
 8008d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8008fe8 <PSxBTGetXY+0x328>
 8008d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d78:	dd3d      	ble.n	8008df6 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	ee17 0a90 	vmov	r0, s15
 8008d8a:	f7f7 fbdd 	bl	8000548 <__aeabi_f2d>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	4992      	ldr	r1, [pc, #584]	; (8008fe0 <PSxBTGetXY+0x320>)
 8008d98:	f7f7 fa76 	bl	8000288 <__aeabi_dsub>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4610      	mov	r0, r2
 8008da2:	4619      	mov	r1, r3
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	4b8c      	ldr	r3, [pc, #560]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008daa:	f7f7 fd4f 	bl	800084c <__aeabi_ddiv>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4610      	mov	r0, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7f7 ff17 	bl	8000be8 <__aeabi_d2f>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dce:	dd04      	ble.n	8008dda <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8008dd8:	e011      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008de0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	d507      	bpl.n	8008dfe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a7c      	ldr	r2, [pc, #496]	; (8008fe4 <PSxBTGetXY+0x324>)
 8008df2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008df4:	e003      	b.n	8008dfe <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008fd8 <PSxBTGetXY+0x318>
 8008e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	d53e      	bpl.n	8008e96 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e24:	ee17 0a90 	vmov	r0, s15
 8008e28:	f7f7 fb8e 	bl	8000548 <__aeabi_f2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	a167      	add	r1, pc, #412	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e36:	f7f7 fa27 	bl	8000288 <__aeabi_dsub>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4619      	mov	r1, r3
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	4b65      	ldr	r3, [pc, #404]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008e48:	f7f7 fd00 	bl	800084c <__aeabi_ddiv>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4610      	mov	r0, r2
 8008e52:	4619      	mov	r1, r3
 8008e54:	f7f7 fec8 	bl	8000be8 <__aeabi_d2f>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6c:	d504      	bpl.n	8008e78 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	651a      	str	r2, [r3, #80]	; 0x50
 8008e76:	e05d      	b.n	8008f34 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8a:	dd53      	ble.n	8008f34 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e92:	651a      	str	r2, [r3, #80]	; 0x50
 8008e94:	e04e      	b.n	8008f34 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8008fe8 <PSxBTGetXY+0x328>
 8008ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eae:	dd3d      	ble.n	8008f2c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	ee17 0a90 	vmov	r0, s15
 8008ec0:	f7f7 fb42 	bl	8000548 <__aeabi_f2d>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	f04f 0000 	mov.w	r0, #0
 8008ecc:	4944      	ldr	r1, [pc, #272]	; (8008fe0 <PSxBTGetXY+0x320>)
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	4b3f      	ldr	r3, [pc, #252]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008ee0:	f7f7 fcb4 	bl	800084c <__aeabi_ddiv>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4619      	mov	r1, r3
 8008eec:	f7f7 fe7c 	bl	8000be8 <__aeabi_d2f>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	dd04      	ble.n	8008f10 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	651a      	str	r2, [r3, #80]	; 0x50
 8008f0e:	e011      	b.n	8008f34 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008f16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f22:	d507      	bpl.n	8008f34 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a2f      	ldr	r2, [pc, #188]	; (8008fe4 <PSxBTGetXY+0x324>)
 8008f28:	651a      	str	r2, [r3, #80]	; 0x50
 8008f2a:	e003      	b.n	8008f34 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	ee07 3a90 	vmov	s15, r3
 8008f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f40:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008fd8 <PSxBTGetXY+0x318>
 8008f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4c:	d54e      	bpl.n	8008fec <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	ee17 0a90 	vmov	r0, s15
 8008f5e:	f7f7 faf3 	bl	8000548 <__aeabi_f2d>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	a11a      	add	r1, pc, #104	; (adr r1, 8008fd0 <PSxBTGetXY+0x310>)
 8008f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f6c:	f7f7 f98c 	bl	8000288 <__aeabi_dsub>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <PSxBTGetXY+0x31c>)
 8008f7e:	f7f7 fc65 	bl	800084c <__aeabi_ddiv>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4610      	mov	r0, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7f7 fe2d 	bl	8000be8 <__aeabi_d2f>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	d504      	bpl.n	8008fae <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f04f 0200 	mov.w	r2, #0
 8008faa:	655a      	str	r2, [r3, #84]	; 0x54
 8008fac:	e06d      	b.n	800908a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	dd63      	ble.n	800908a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008fc8:	655a      	str	r2, [r3, #84]	; 0x54
 8008fca:	e05e      	b.n	800908a <PSxBTGetXY+0x3ca>
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	405cc000 	.word	0x405cc000
 8008fd8:	42e60000 	.word	0x42e60000
 8008fdc:	40590000 	.word	0x40590000
 8008fe0:	40618000 	.word	0x40618000
 8008fe4:	bf800000 	.word	0xbf800000
 8008fe8:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff0:	ee07 3a90 	vmov	s15, r3
 8008ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8008fe8 <PSxBTGetXY+0x328>
 8008ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009004:	dd3d      	ble.n	8009082 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	ee17 0a90 	vmov	r0, s15
 8009016:	f7f7 fa97 	bl	8000548 <__aeabi_f2d>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	f04f 0000 	mov.w	r0, #0
 8009022:	4981      	ldr	r1, [pc, #516]	; (8009228 <PSxBTGetXY+0x568>)
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	4b7d      	ldr	r3, [pc, #500]	; (800922c <PSxBTGetXY+0x56c>)
 8009036:	f7f7 fc09 	bl	800084c <__aeabi_ddiv>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	f7f7 fdd1 	bl	8000be8 <__aeabi_d2f>
 8009046:	4602      	mov	r2, r0
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905a:	dd04      	ble.n	8009066 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	655a      	str	r2, [r3, #84]	; 0x54
 8009064:	e011      	b.n	800908a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800906c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	d507      	bpl.n	800908a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a6c      	ldr	r2, [pc, #432]	; (8009230 <PSxBTGetXY+0x570>)
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
 8009080:	e003      	b.n	800908a <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009096:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009234 <PSxBTGetXY+0x574>
 800909a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800909e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a2:	d53e      	bpl.n	8009122 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b0:	ee17 0a90 	vmov	r0, s15
 80090b4:	f7f7 fa48 	bl	8000548 <__aeabi_f2d>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	a156      	add	r1, pc, #344	; (adr r1, 8009218 <PSxBTGetXY+0x558>)
 80090be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c2:	f7f7 f8e1 	bl	8000288 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	4b56      	ldr	r3, [pc, #344]	; (800922c <PSxBTGetXY+0x56c>)
 80090d4:	f7f7 fbba 	bl	800084c <__aeabi_ddiv>
 80090d8:	4602      	mov	r2, r0
 80090da:	460b      	mov	r3, r1
 80090dc:	4610      	mov	r0, r2
 80090de:	4619      	mov	r1, r3
 80090e0:	f7f7 fd82 	bl	8000be8 <__aeabi_d2f>
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80090f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	d504      	bpl.n	8009104 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	659a      	str	r2, [r3, #88]	; 0x58
 8009102:	e05d      	b.n	80091c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800910a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800910e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009116:	dd53      	ble.n	80091c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800911e:	659a      	str	r2, [r3, #88]	; 0x58
 8009120:	e04e      	b.n	80091c0 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009238 <PSxBTGetXY+0x578>
 8009132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913a:	dd3d      	ble.n	80091b8 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	ee17 0a90 	vmov	r0, s15
 800914c:	f7f7 f9fc 	bl	8000548 <__aeabi_f2d>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	f04f 0000 	mov.w	r0, #0
 8009158:	4933      	ldr	r1, [pc, #204]	; (8009228 <PSxBTGetXY+0x568>)
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4610      	mov	r0, r2
 8009164:	4619      	mov	r1, r3
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	4b30      	ldr	r3, [pc, #192]	; (800922c <PSxBTGetXY+0x56c>)
 800916c:	f7f7 fb6e 	bl	800084c <__aeabi_ddiv>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f7f7 fd36 	bl	8000be8 <__aeabi_d2f>
 800917c:	4602      	mov	r2, r0
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800918c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009190:	dd04      	ble.n	800919c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f04f 0200 	mov.w	r2, #0
 8009198:	659a      	str	r2, [r3, #88]	; 0x58
 800919a:	e011      	b.n	80091c0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80091a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80091a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ae:	d507      	bpl.n	80091c0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <PSxBTGetXY+0x570>)
 80091b4:	659a      	str	r2, [r3, #88]	; 0x58
 80091b6:	e003      	b.n	80091c0 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f7 f99d 	bl	8000504 <__aeabi_ui2d>
 80091ca:	a315      	add	r3, pc, #84	; (adr r3, 8009220 <PSxBTGetXY+0x560>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 fb3c 	bl	800084c <__aeabi_ddiv>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4610      	mov	r0, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	f7f7 fd04 	bl	8000be8 <__aeabi_d2f>
 80091e0:	4602      	mov	r2, r0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 f98a 	bl	8000504 <__aeabi_ui2d>
 80091f0:	a30b      	add	r3, pc, #44	; (adr r3, 8009220 <PSxBTGetXY+0x560>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 fb29 	bl	800084c <__aeabi_ddiv>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	f7f7 fcf1 	bl	8000be8 <__aeabi_d2f>
 8009206:	4602      	mov	r2, r0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	f3af 8000 	nop.w
 8009218:	00000000 	.word	0x00000000
 800921c:	405cc000 	.word	0x405cc000
 8009220:	00000000 	.word	0x00000000
 8009224:	406fe000 	.word	0x406fe000
 8009228:	40618000 	.word	0x40618000
 800922c:	40590000 	.word	0x40590000
 8009230:	bf800000 	.word	0xbf800000
 8009234:	42e60000 	.word	0x42e60000
 8009238:	430c0000 	.word	0x430c0000

0800923c <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6858      	ldr	r0, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3308      	adds	r3, #8
 800925a:	2201      	movs	r2, #1
 800925c:	4619      	mov	r1, r3
 800925e:	f00c ffbb 	bl	80161d8 <HAL_UART_Receive_IT>

}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7f5b      	ldrb	r3, [r3, #29]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d035      	beq.n	80092e8 <R6091U_Handler+0x7c>
 800927c:	2b02      	cmp	r3, #2
 800927e:	f300 80b2 	bgt.w	80093e6 <R6091U_Handler+0x17a>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <R6091U_Handler+0x20>
 8009286:	2b01      	cmp	r3, #1
 8009288:	d011      	beq.n	80092ae <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 800928a:	e0ac      	b.n	80093e6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7a1b      	ldrb	r3, [r3, #8]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2baa      	cmp	r3, #170	; 0xaa
 8009294:	d102      	bne.n	800929c <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6858      	ldr	r0, [r3, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3308      	adds	r3, #8
 80092a4:	2201      	movs	r2, #1
 80092a6:	4619      	mov	r1, r3
 80092a8:	f00c ff96 	bl	80161d8 <HAL_UART_Receive_IT>
		break;
 80092ac:	e09b      	b.n	80093e6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7a1b      	ldrb	r3, [r3, #8]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6858      	ldr	r0, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3308      	adds	r3, #8
 80092c6:	220d      	movs	r2, #13
 80092c8:	4619      	mov	r1, r3
 80092ca:	f00c ff85 	bl	80161d8 <HAL_UART_Receive_IT>
		break;
 80092ce:	e08a      	b.n	80093e6 <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6858      	ldr	r0, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3308      	adds	r3, #8
 80092de:	2201      	movs	r2, #1
 80092e0:	4619      	mov	r1, r3
 80092e2:	f00c ff79 	bl	80161d8 <HAL_UART_Receive_IT>
		break;
 80092e6:	e07e      	b.n	80093e6 <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7a1b      	ldrb	r3, [r3, #8]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7a5b      	ldrb	r3, [r3, #9]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7a9b      	ldrb	r3, [r3, #10]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	4413      	add	r3, r2
 8009308:	b2da      	uxtb	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7adb      	ldrb	r3, [r3, #11]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	4413      	add	r3, r2
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7b1b      	ldrb	r3, [r3, #12]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4413      	add	r3, r2
 800931c:	b2da      	uxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	7b5b      	ldrb	r3, [r3, #13]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4413      	add	r3, r2
 8009326:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7b9b      	ldrb	r3, [r3, #14]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	4413      	add	r3, r2
 8009330:	b2da      	uxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	7bdb      	ldrb	r3, [r3, #15]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4413      	add	r3, r2
 800933a:	b2da      	uxtb	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7c1b      	ldrb	r3, [r3, #16]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4413      	add	r3, r2
 8009344:	b2da      	uxtb	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	7c5b      	ldrb	r3, [r3, #17]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4413      	add	r3, r2
 800934e:	b2da      	uxtb	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7c9b      	ldrb	r3, [r3, #18]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	4413      	add	r3, r2
 8009358:	b2da      	uxtb	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7cdb      	ldrb	r3, [r3, #19]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4413      	add	r3, r2
 8009362:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009370:	b2da      	uxtb	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7d1b      	ldrb	r3, [r3, #20]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	429a      	cmp	r2, r3
 800937a:	d121      	bne.n	80093c0 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3309      	adds	r3, #9
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 8009384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009390:	eddf 6a17 	vldr	s13, [pc, #92]	; 80093f0 <R6091U_Handler+0x184>
 8009394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009398:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80093f4 <R6091U_Handler+0x188>
 800939c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093a0:	4b15      	ldr	r3, [pc, #84]	; (80093f8 <R6091U_Handler+0x18c>)
 80093a2:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <R6091U_Handler+0x190>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b13      	cmp	r3, #19
 80093ac:	dd03      	ble.n	80093b6 <R6091U_Handler+0x14a>
				testCounter2 = 0;
 80093ae:	4b13      	ldr	r3, [pc, #76]	; (80093fc <R6091U_Handler+0x190>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e004      	b.n	80093c0 <R6091U_Handler+0x154>
				testCounter2 ++;
 80093b6:	4b11      	ldr	r3, [pc, #68]	; (80093fc <R6091U_Handler+0x190>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	4a0f      	ldr	r2, [pc, #60]	; (80093fc <R6091U_Handler+0x190>)
 80093be:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3308      	adds	r3, #8
 80093c4:	220d      	movs	r2, #13
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f010 fc4f 	bl	8019c6c <memset>
		IMU->State = PENDING_SYNC;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6858      	ldr	r0, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3308      	adds	r3, #8
 80093dc:	2201      	movs	r2, #1
 80093de:	4619      	mov	r1, r3
 80093e0:	f00c fefa 	bl	80161d8 <HAL_UART_Receive_IT>
		break;
 80093e4:	bf00      	nop
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	42c80000 	.word	0x42c80000
 80093f4:	43340000 	.word	0x43340000
 80093f8:	2000996c 	.word	0x2000996c
 80093fc:	200067c8 	.word	0x200067c8

08009400 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <RNSInit+0xb4>)
 8009412:	2201      	movs	r2, #1
 8009414:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <RNSInit+0xb4>)
 8009418:	2200      	movs	r2, #0
 800941a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	6818      	ldr	r0, [r3, #0]
 8009420:	2302      	movs	r3, #2
 8009422:	4a24      	ldr	r2, [pc, #144]	; (80094b4 <RNSInit+0xb4>)
 8009424:	2117      	movs	r1, #23
 8009426:	f7fa f9b5 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 8009432:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <RNSInit+0xb4>)
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8009438:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <RNSInit+0xb4>)
 800943a:	2214      	movs	r2, #20
 800943c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	2302      	movs	r3, #2
 8009444:	4a1b      	ldr	r2, [pc, #108]	; (80094b4 <RNSInit+0xb4>)
 8009446:	2117      	movs	r1, #23
 8009448:	f7fa f9a4 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009458:	e022      	b.n	80094a0 <RNSInit+0xa0>
		if(wait >= 2000000){
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <RNSInit+0xb8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	dd1b      	ble.n	800949a <RNSInit+0x9a>
			insData_send[0] = 1;
 8009462:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <RNSInit+0xb4>)
 8009464:	2201      	movs	r2, #1
 8009466:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <RNSInit+0xb4>)
 800946a:	2214      	movs	r2, #20
 800946c:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	2302      	movs	r3, #2
 8009474:	4a0f      	ldr	r2, [pc, #60]	; (80094b4 <RNSInit+0xb4>)
 8009476:	2117      	movs	r1, #23
 8009478:	f7fa f98c 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 800947c:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <RNSInit+0xbc>)
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	b25b      	sxtb	r3, r3
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <RNSInit+0xbc>)
 8009484:	43db      	mvns	r3, r3
 8009486:	b2db      	uxtb	r3, r3
 8009488:	09db      	lsrs	r3, r3, #7
 800948a:	b2d9      	uxtb	r1, r3
 800948c:	7853      	ldrb	r3, [r2, #1]
 800948e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009492:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e002      	b.n	80094a0 <RNSInit+0xa0>
		}else{
			wait ++;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d0d7      	beq.n	800945a <RNSInit+0x5a>
		}
	}
}
 80094aa:	bf00      	nop
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	2000a68c 	.word	0x2000a68c
 80094b8:	001e847f 	.word	0x001e847f
 80094bc:	40020814 	.word	0x40020814

080094c0 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2203      	movs	r2, #3
 80094cc:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80094f6:	4b31      	ldr	r3, [pc, #196]	; (80095bc <RNSStop+0xfc>)
 80094f8:	2211      	movs	r2, #17
 80094fa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	791a      	ldrb	r2, [r3, #4]
 8009500:	4b2e      	ldr	r3, [pc, #184]	; (80095bc <RNSStop+0xfc>)
 8009502:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	2302      	movs	r3, #2
 800950a:	4a2c      	ldr	r2, [pc, #176]	; (80095bc <RNSStop+0xfc>)
 800950c:	2117      	movs	r1, #23
 800950e:	f7fa f941 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f103 0208 	add.w	r2, r3, #8
 800951c:	2308      	movs	r3, #8
 800951e:	2118      	movs	r1, #24
 8009520:	f7fa f938 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f103 0210 	add.w	r2, r3, #16
 800952e:	2308      	movs	r3, #8
 8009530:	2119      	movs	r1, #25
 8009532:	f7fa f92f 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800953a:	e035      	b.n	80095a8 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <RNSStop+0x100>)
 8009540:	4293      	cmp	r3, r2
 8009542:	dd2e      	ble.n	80095a2 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 8009544:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <RNSStop+0xfc>)
 8009546:	2211      	movs	r2, #17
 8009548:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	791a      	ldrb	r2, [r3, #4]
 800954e:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <RNSStop+0xfc>)
 8009550:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	2302      	movs	r3, #2
 8009558:	4a18      	ldr	r2, [pc, #96]	; (80095bc <RNSStop+0xfc>)
 800955a:	2117      	movs	r1, #23
 800955c:	f7fa f91a 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f103 0208 	add.w	r2, r3, #8
 800956a:	2308      	movs	r3, #8
 800956c:	2118      	movs	r1, #24
 800956e:	f7fa f911 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f103 0210 	add.w	r2, r3, #16
 800957c:	2308      	movs	r3, #8
 800957e:	2119      	movs	r1, #25
 8009580:	f7fa f908 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <RNSStop+0x104>)
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	b25b      	sxtb	r3, r3
 800958a:	4a0e      	ldr	r2, [pc, #56]	; (80095c4 <RNSStop+0x104>)
 800958c:	43db      	mvns	r3, r3
 800958e:	b2db      	uxtb	r3, r3
 8009590:	09db      	lsrs	r3, r3, #7
 8009592:	b2d9      	uxtb	r1, r3
 8009594:	7853      	ldrb	r3, [r2, #1]
 8009596:	f361 13c7 	bfi	r3, r1, #7, #1
 800959a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e002      	b.n	80095a8 <RNSStop+0xe8>
		}
		else
			wait++;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d0c4      	beq.n	800953c <RNSStop+0x7c>
	}


}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	2000a68c 	.word	0x2000a68c
 80095c0:	001e847f 	.word	0x001e847f
 80095c4:	40020814 	.word	0x40020814

080095c8 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80095d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80095d6:	ed87 1a03 	vstr	s2, [r7, #12]
 80095da:	edc7 1a02 	vstr	s3, [r7, #8]
 80095de:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2205      	movs	r2, #5
 80095e4:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f804 	bl	800960c <RNSSendIns>

}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 8009614:	bf00      	nop
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800961c:	2b01      	cmp	r3, #1
 800961e:	d0fa      	beq.n	8009616 <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009628:	4b31      	ldr	r3, [pc, #196]	; (80096f0 <RNSSendIns+0xe4>)
 800962a:	2211      	movs	r2, #17
 800962c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	791a      	ldrb	r2, [r3, #4]
 8009632:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <RNSSendIns+0xe4>)
 8009634:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	2302      	movs	r3, #2
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <RNSSendIns+0xe4>)
 800963e:	2117      	movs	r1, #23
 8009640:	f7fa f8a8 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f103 0208 	add.w	r2, r3, #8
 800964e:	2308      	movs	r3, #8
 8009650:	2118      	movs	r1, #24
 8009652:	f7fa f89f 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f103 0210 	add.w	r2, r3, #16
 8009660:	2308      	movs	r3, #8
 8009662:	2119      	movs	r1, #25
 8009664:	f7fa f896 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800966c:	e035      	b.n	80096da <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4a20      	ldr	r2, [pc, #128]	; (80096f4 <RNSSendIns+0xe8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	dd2e      	ble.n	80096d4 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 8009676:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <RNSSendIns+0xe4>)
 8009678:	2211      	movs	r2, #17
 800967a:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	791a      	ldrb	r2, [r3, #4]
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <RNSSendIns+0xe4>)
 8009682:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	2302      	movs	r3, #2
 800968a:	4a19      	ldr	r2, [pc, #100]	; (80096f0 <RNSSendIns+0xe4>)
 800968c:	2117      	movs	r1, #23
 800968e:	f7fa f881 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f103 0208 	add.w	r2, r3, #8
 800969c:	2308      	movs	r3, #8
 800969e:	2118      	movs	r1, #24
 80096a0:	f7fa f878 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f103 0210 	add.w	r2, r3, #16
 80096ae:	2308      	movs	r3, #8
 80096b0:	2119      	movs	r1, #25
 80096b2:	f7fa f86f 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <RNSSendIns+0xec>)
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	4a0e      	ldr	r2, [pc, #56]	; (80096f8 <RNSSendIns+0xec>)
 80096be:	43db      	mvns	r3, r3
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	09db      	lsrs	r3, r3, #7
 80096c4:	b2d9      	uxtb	r1, r3
 80096c6:	7853      	ldrb	r3, [r2, #1]
 80096c8:	f361 13c7 	bfi	r3, r1, #7, #1
 80096cc:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e002      	b.n	80096da <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d0c4      	beq.n	800966e <RNSSendIns+0x62>
		}
	}

}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000a68c 	.word	0x2000a68c
 80096f4:	001e847f 	.word	0x001e847f
 80096f8:	40020814 	.word	0x40020814

080096fc <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 80096fc:	b40e      	push	{r1, r2, r3}
 80096fe:	b580      	push	{r7, lr}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7f3a      	ldrb	r2, [r7, #28]
 800970a:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800970c:	f107 0320 	add.w	r3, r7, #32
 8009710:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8009712:	bf00      	nop
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800971a:	2b02      	cmp	r3, #2
 800971c:	d0fa      	beq.n	8009714 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800971e:	7f3b      	ldrb	r3, [r7, #28]
 8009720:	2b18      	cmp	r3, #24
 8009722:	d92b      	bls.n	800977c <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	f103 0208 	add.w	r2, r3, #8
 8009730:	60ba      	str	r2, [r7, #8]
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	4610      	mov	r0, r2
 8009738:	4619      	mov	r1, r3
 800973a:	f7f7 fa55 	bl	8000be8 <__aeabi_d2f>
 800973e:	4602      	mov	r2, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f04f 0200 	mov.w	r2, #0
 8009752:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f04f 0200 	mov.w	r2, #0
 8009772:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 800977c:	7f3b      	ldrb	r3, [r7, #28]
 800977e:	2b1e      	cmp	r3, #30
 8009780:	d927      	bls.n	80097d2 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3307      	adds	r3, #7
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	f103 0208 	add.w	r2, r3, #8
 800978e:	60ba      	str	r2, [r7, #8]
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	f7f7 fa26 	bl	8000be8 <__aeabi_d2f>
 800979c:	4602      	mov	r2, r0
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 80097d2:	7f3b      	ldrb	r3, [r7, #28]
 80097d4:	2b23      	cmp	r3, #35	; 0x23
 80097d6:	d923      	bls.n	8009820 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	3307      	adds	r3, #7
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	f103 0208 	add.w	r2, r3, #8
 80097e4:	60ba      	str	r2, [r7, #8]
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	f7f7 f9fb 	bl	8000be8 <__aeabi_d2f>
 80097f2:	4602      	mov	r2, r0
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 8009820:	7f3b      	ldrb	r3, [r7, #28]
 8009822:	2b48      	cmp	r3, #72	; 0x48
 8009824:	d91f      	bls.n	8009866 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	3307      	adds	r3, #7
 800982a:	f023 0307 	bic.w	r3, r3, #7
 800982e:	f103 0208 	add.w	r2, r3, #8
 8009832:	60ba      	str	r2, [r7, #8]
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4610      	mov	r0, r2
 800983a:	4619      	mov	r1, r3
 800983c:	f7f7 f9d4 	bl	8000be8 <__aeabi_d2f>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 8009866:	7f3b      	ldrb	r3, [r7, #28]
 8009868:	2b50      	cmp	r3, #80	; 0x50
 800986a:	d91b      	bls.n	80098a4 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	3307      	adds	r3, #7
 8009870:	f023 0307 	bic.w	r3, r3, #7
 8009874:	f103 0208 	add.w	r2, r3, #8
 8009878:	60ba      	str	r2, [r7, #8]
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	4610      	mov	r0, r2
 8009880:	4619      	mov	r1, r3
 8009882:	f7f7 f9b1 	bl	8000be8 <__aeabi_d2f>
 8009886:	4602      	mov	r2, r0
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 80098a4:	7f3b      	ldrb	r3, [r7, #28]
 80098a6:	2b51      	cmp	r3, #81	; 0x51
 80098a8:	d917      	bls.n	80098da <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3307      	adds	r3, #7
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	f103 0208 	add.w	r2, r3, #8
 80098b6:	60ba      	str	r2, [r7, #8]
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4610      	mov	r0, r2
 80098be:	4619      	mov	r1, r3
 80098c0:	f7f7 f992 	bl	8000be8 <__aeabi_d2f>
 80098c4:	4602      	mov	r2, r0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 80098da:	7f3b      	ldrb	r3, [r7, #28]
 80098dc:	2b52      	cmp	r3, #82	; 0x52
 80098de:	d913      	bls.n	8009908 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	3307      	adds	r3, #7
 80098e4:	f023 0307 	bic.w	r3, r3, #7
 80098e8:	f103 0208 	add.w	r2, r3, #8
 80098ec:	60ba      	str	r2, [r7, #8]
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7f7 f977 	bl	8000be8 <__aeabi_d2f>
 80098fa:	4602      	mov	r2, r0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8009908:	7f3b      	ldrb	r3, [r7, #28]
 800990a:	2b54      	cmp	r3, #84	; 0x54
 800990c:	d90f      	bls.n	800992e <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	3307      	adds	r3, #7
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	f103 0208 	add.w	r2, r3, #8
 800991a:	60ba      	str	r2, [r7, #8]
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	4610      	mov	r0, r2
 8009922:	4619      	mov	r1, r3
 8009924:	f7f7 f960 	bl	8000be8 <__aeabi_d2f>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800992e:	4b4d      	ldr	r3, [pc, #308]	; (8009a64 <RNSSet+0x368>)
 8009930:	2211      	movs	r2, #17
 8009932:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	7e1a      	ldrb	r2, [r3, #24]
 8009938:	4b4a      	ldr	r3, [pc, #296]	; (8009a64 <RNSSet+0x368>)
 800993a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	2302      	movs	r3, #2
 8009942:	4a48      	ldr	r2, [pc, #288]	; (8009a64 <RNSSet+0x368>)
 8009944:	2117      	movs	r1, #23
 8009946:	f7f9 ff25 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f103 021c 	add.w	r2, r3, #28
 8009954:	2308      	movs	r3, #8
 8009956:	2118      	movs	r1, #24
 8009958:	f7f9 ff1c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009966:	2308      	movs	r3, #8
 8009968:	2119      	movs	r1, #25
 800996a:	f7f9 ff13 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800996e:	7f3b      	ldrb	r3, [r7, #28]
 8009970:	2b50      	cmp	r3, #80	; 0x50
 8009972:	d908      	bls.n	8009986 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800997e:	2308      	movs	r3, #8
 8009980:	211a      	movs	r1, #26
 8009982:	f7f9 ff07 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8009986:	7f3b      	ldrb	r3, [r7, #28]
 8009988:	2b52      	cmp	r3, #82	; 0x52
 800998a:	d908      	bls.n	800999e <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009996:	2308      	movs	r3, #8
 8009998:	211b      	movs	r1, #27
 800999a:	f7f9 fefb 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80099aa:	e04d      	b.n	8009a48 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a2e      	ldr	r2, [pc, #184]	; (8009a68 <RNSSet+0x36c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	dd46      	ble.n	8009a42 <RNSSet+0x346>
		{
			insData_send[0] = 17;
 80099b4:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <RNSSet+0x368>)
 80099b6:	2211      	movs	r2, #17
 80099b8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	7e1a      	ldrb	r2, [r3, #24]
 80099be:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <RNSSet+0x368>)
 80099c0:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	2302      	movs	r3, #2
 80099c8:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <RNSSet+0x368>)
 80099ca:	2117      	movs	r1, #23
 80099cc:	f7f9 fee2 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 021c 	add.w	r2, r3, #28
 80099da:	2308      	movs	r3, #8
 80099dc:	2118      	movs	r1, #24
 80099de:	f7f9 fed9 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80099ec:	2308      	movs	r3, #8
 80099ee:	2119      	movs	r1, #25
 80099f0:	f7f9 fed0 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 80099f4:	7f3b      	ldrb	r3, [r7, #28]
 80099f6:	2b50      	cmp	r3, #80	; 0x50
 80099f8:	d908      	bls.n	8009a0c <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009a04:	2308      	movs	r3, #8
 8009a06:	211a      	movs	r1, #26
 8009a08:	f7f9 fec4 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 8009a0c:	7f3b      	ldrb	r3, [r7, #28]
 8009a0e:	2b52      	cmp	r3, #82	; 0x52
 8009a10:	d908      	bls.n	8009a24 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	211b      	movs	r1, #27
 8009a20:	f7f9 feb8 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <RNSSet+0x370>)
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	4a10      	ldr	r2, [pc, #64]	; (8009a6c <RNSSet+0x370>)
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	09db      	lsrs	r3, r3, #7
 8009a32:	b2d9      	uxtb	r1, r3
 8009a34:	7853      	ldrb	r3, [r2, #1]
 8009a36:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a3a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e002      	b.n	8009a48 <RNSSet+0x34c>
		}
		else
			wait++;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3301      	adds	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d0ac      	beq.n	80099ac <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a5e:	b003      	add	sp, #12
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	2000a68c 	.word	0x2000a68c
 8009a68:	001e847f 	.word	0x001e847f
 8009a6c:	40020814 	.word	0x40020814

08009a70 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	79fa      	ldrb	r2, [r7, #7]
 8009a80:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009aaa:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <RNSEnquire+0x128>)
 8009aac:	2211      	movs	r2, #17
 8009aae:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	791a      	ldrb	r2, [r3, #4]
 8009ab4:	4b38      	ldr	r3, [pc, #224]	; (8009b98 <RNSEnquire+0x128>)
 8009ab6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	2302      	movs	r3, #2
 8009abe:	4a36      	ldr	r2, [pc, #216]	; (8009b98 <RNSEnquire+0x128>)
 8009ac0:	2117      	movs	r1, #23
 8009ac2:	f7f9 fe67 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f103 0208 	add.w	r2, r3, #8
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	2118      	movs	r1, #24
 8009ad4:	f7f9 fe5e 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	f103 0210 	add.w	r2, r3, #16
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	2119      	movs	r1, #25
 8009ae6:	f7f9 fe55 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009aee:	e035      	b.n	8009b5c <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <RNSEnquire+0x12c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	dd2e      	ble.n	8009b56 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 8009af8:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <RNSEnquire+0x128>)
 8009afa:	2211      	movs	r2, #17
 8009afc:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	791a      	ldrb	r2, [r3, #4]
 8009b02:	4b25      	ldr	r3, [pc, #148]	; (8009b98 <RNSEnquire+0x128>)
 8009b04:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	4a22      	ldr	r2, [pc, #136]	; (8009b98 <RNSEnquire+0x128>)
 8009b0e:	2117      	movs	r1, #23
 8009b10:	f7f9 fe40 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f103 0208 	add.w	r2, r3, #8
 8009b1e:	2308      	movs	r3, #8
 8009b20:	2118      	movs	r1, #24
 8009b22:	f7f9 fe37 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f103 0210 	add.w	r2, r3, #16
 8009b30:	2308      	movs	r3, #8
 8009b32:	2119      	movs	r1, #25
 8009b34:	f7f9 fe2e 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009b38:	4b19      	ldr	r3, [pc, #100]	; (8009ba0 <RNSEnquire+0x130>)
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	4a18      	ldr	r2, [pc, #96]	; (8009ba0 <RNSEnquire+0x130>)
 8009b40:	43db      	mvns	r3, r3
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	09db      	lsrs	r3, r3, #7
 8009b46:	b2d9      	uxtb	r1, r3
 8009b48:	7853      	ldrb	r3, [r2, #1]
 8009b4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8009b4e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e002      	b.n	8009b5c <RNSEnquire+0xec>
		}
		else wait++;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d0c4      	beq.n	8009af0 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009b8e:	2301      	movs	r3, #1
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	2000a68c 	.word	0x2000a68c
 8009b9c:	001e847f 	.word	0x001e847f
 8009ba0:	40020814 	.word	0x40020814

08009ba4 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08c      	sub	sp, #48	; 0x30
 8009ba8:	af02      	add	r7, sp, #8
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	605a      	str	r2, [r3, #4]
 8009bbc:	609a      	str	r2, [r3, #8]
 8009bbe:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a6d      	ldr	r2, [pc, #436]	; (8009d84 <ServoxInit+0x1e0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d106      	bne.n	8009be0 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4a6c      	ldr	r2, [pc, #432]	; (8009d88 <ServoxInit+0x1e4>)
 8009bd6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	22a7      	movs	r2, #167	; 0xa7
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e078      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a6a      	ldr	r2, [pc, #424]	; (8009d8c <ServoxInit+0x1e8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d107      	bne.n	8009bf8 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009bee:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2253      	movs	r2, #83	; 0x53
 8009bf4:	605a      	str	r2, [r3, #4]
 8009bf6:	e06c      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4a65      	ldr	r2, [pc, #404]	; (8009d90 <ServoxInit+0x1ec>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d106      	bne.n	8009c0e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	4a64      	ldr	r2, [pc, #400]	; (8009d94 <ServoxInit+0x1f0>)
 8009c04:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2253      	movs	r2, #83	; 0x53
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	e061      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4a61      	ldr	r2, [pc, #388]	; (8009d98 <ServoxInit+0x1f4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d106      	bne.n	8009c24 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	4a60      	ldr	r2, [pc, #384]	; (8009d9c <ServoxInit+0x1f8>)
 8009c1a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2253      	movs	r2, #83	; 0x53
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	e056      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4a5e      	ldr	r2, [pc, #376]	; (8009da0 <ServoxInit+0x1fc>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d106      	bne.n	8009c3a <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4a5d      	ldr	r2, [pc, #372]	; (8009da4 <ServoxInit+0x200>)
 8009c30:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2253      	movs	r2, #83	; 0x53
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e04b      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a5a      	ldr	r2, [pc, #360]	; (8009da8 <ServoxInit+0x204>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d106      	bne.n	8009c50 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4a59      	ldr	r2, [pc, #356]	; (8009dac <ServoxInit+0x208>)
 8009c46:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	22a7      	movs	r2, #167	; 0xa7
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	e040      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4a57      	ldr	r2, [pc, #348]	; (8009db0 <ServoxInit+0x20c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d106      	bne.n	8009c66 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	4a56      	ldr	r2, [pc, #344]	; (8009db4 <ServoxInit+0x210>)
 8009c5c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	22a7      	movs	r2, #167	; 0xa7
 8009c62:	605a      	str	r2, [r3, #4]
 8009c64:	e035      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a53      	ldr	r2, [pc, #332]	; (8009db8 <ServoxInit+0x214>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d106      	bne.n	8009c7c <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4a52      	ldr	r2, [pc, #328]	; (8009dbc <ServoxInit+0x218>)
 8009c72:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	22a7      	movs	r2, #167	; 0xa7
 8009c78:	605a      	str	r2, [r3, #4]
 8009c7a:	e02a      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a50      	ldr	r2, [pc, #320]	; (8009dc0 <ServoxInit+0x21c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d106      	bne.n	8009c92 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <ServoxInit+0x220>)
 8009c88:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	22a7      	movs	r2, #167	; 0xa7
 8009c8e:	605a      	str	r2, [r3, #4]
 8009c90:	e01f      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <ServoxInit+0x224>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d106      	bne.n	8009ca8 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	4a4b      	ldr	r2, [pc, #300]	; (8009dcc <ServoxInit+0x228>)
 8009c9e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2253      	movs	r2, #83	; 0x53
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	e014      	b.n	8009cd2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <ServoxInit+0x22c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d106      	bne.n	8009cbe <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4a48      	ldr	r2, [pc, #288]	; (8009dd4 <ServoxInit+0x230>)
 8009cb4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2253      	movs	r2, #83	; 0x53
 8009cba:	605a      	str	r2, [r3, #4]
 8009cbc:	e009      	b.n	8009cd2 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4a45      	ldr	r2, [pc, #276]	; (8009dd8 <ServoxInit+0x234>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d105      	bne.n	8009cd2 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a44      	ldr	r2, [pc, #272]	; (8009ddc <ServoxInit+0x238>)
 8009cca:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2253      	movs	r2, #83	; 0x53
 8009cd0:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009cde:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2280      	movs	r2, #128	; 0x80
 8009cea:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f00b f98d 	bl	801500c <HAL_TIM_Base_Init>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <ServoxInit+0x158>
		  {
		    Error_Handler();
 8009cf8:	f7fa fc26 	bl	8004548 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d00:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4619      	mov	r1, r3
 8009d08:	68b8      	ldr	r0, [r7, #8]
 8009d0a:	f00b fcf3 	bl	80156f4 <HAL_TIM_ConfigClockSource>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <ServoxInit+0x174>
		  {
		    Error_Handler();
 8009d14:	f7fa fc18 	bl	8004548 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f00b f9ea 	bl	80150f2 <HAL_TIM_PWM_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <ServoxInit+0x184>
			{
				Error_Handler();
 8009d24:	f7fa fc10 	bl	8004548 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	4619      	mov	r1, r3
 8009d36:	68b8      	ldr	r0, [r7, #8]
 8009d38:	f00c f8d8 	bl	8015eec <HAL_TIMEx_MasterConfigSynchronization>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <ServoxInit+0x1a2>
		{
			Error_Handler();
 8009d42:	f7fa fc01 	bl	8004548 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	f00b f98b 	bl	8015062 <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009d4c:	8879      	ldrh	r1, [r7, #2]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	2302      	movs	r3, #2
 8009d54:	2202      	movs	r2, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7f7 fad2 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d66:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8009d68:	887b      	ldrh	r3, [r7, #2]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d6e:	68b8      	ldr	r0, [r7, #8]
 8009d70:	f7f7 fca6 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	621a      	str	r2, [r3, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	3728      	adds	r7, #40	; 0x28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20005f34 	.word	0x20005f34
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	20006038 	.word	0x20006038
 8009d90:	20005ce8 	.word	0x20005ce8
 8009d94:	40000400 	.word	0x40000400
 8009d98:	20005b24 	.word	0x20005b24
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	20005ca8 	.word	0x20005ca8
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	20005ae4 	.word	0x20005ae4
 8009dac:	40010400 	.word	0x40010400
 8009db0:	20005f74 	.word	0x20005f74
 8009db4:	40014000 	.word	0x40014000
 8009db8:	20005c04 	.word	0x20005c04
 8009dbc:	40014400 	.word	0x40014400
 8009dc0:	20005e4c 	.word	0x20005e4c
 8009dc4:	40014800 	.word	0x40014800
 8009dc8:	20006158 	.word	0x20006158
 8009dcc:	40001800 	.word	0x40001800
 8009dd0:	20005dcc 	.word	0x20005dcc
 8009dd4:	40001c00 	.word	0x40001c00
 8009dd8:	20006118 	.word	0x20006118
 8009ddc:	40002000 	.word	0x40002000

08009de0 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d204      	bcs.n	8009dfe <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	621a      	str	r2, [r3, #32]
 8009dfc:	e00c      	b.n	8009e18 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d904      	bls.n	8009e12 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	621a      	str	r2, [r3, #32]
 8009e10:	e002      	b.n	8009e18 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d106      	bne.n	8009e2e <ServoSetPulse+0x4e>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6a12      	ldr	r2, [r2, #32]
 8009e2a:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009e2c:	e01b      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d106      	bne.n	8009e44 <ServoSetPulse+0x64>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009e42:	e010      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d106      	bne.n	8009e5a <ServoSetPulse+0x7a>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009e58:	e005      	b.n	8009e66 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	619a      	str	r2, [r3, #24]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8009e9c:	4802      	ldr	r0, [pc, #8]	; (8009ea8 <SPI1_IRQHandler+0x10>)
 8009e9e:	f00a ff97 	bl	8014dd0 <HAL_SPI_IRQHandler>
}
 8009ea2:	bf00      	nop
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20009c48 	.word	0x20009c48

08009eac <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8009eb0:	4802      	ldr	r0, [pc, #8]	; (8009ebc <SPI2_IRQHandler+0x10>)
 8009eb2:	f00a ff8d 	bl	8014dd0 <HAL_SPI_IRQHandler>
}
 8009eb6:	bf00      	nop
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200068b4 	.word	0x200068b4

08009ec0 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8009ec4:	4802      	ldr	r0, [pc, #8]	; (8009ed0 <SPI3_IRQHandler+0x10>)
 8009ec6:	f00a ff83 	bl	8014dd0 <HAL_SPI_IRQHandler>
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	2000777c 	.word	0x2000777c

08009ed4 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009eda:	f006 fba3 	bl	8010624 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009ede:	f7f8 ff7f 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009eee:	48c6      	ldr	r0, [pc, #792]	; (800a208 <Initialize+0x334>)
 8009ef0:	f7f7 fa06 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	2302      	movs	r3, #2
 8009efa:	2201      	movs	r2, #1
 8009efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f00:	48c1      	ldr	r0, [pc, #772]	; (800a208 <Initialize+0x334>)
 8009f02:	f7f7 f9fd 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f06:	2301      	movs	r3, #1
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f12:	48bd      	ldr	r0, [pc, #756]	; (800a208 <Initialize+0x334>)
 8009f14:	f7f7 f9f4 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f18:	2301      	movs	r3, #1
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2180      	movs	r1, #128	; 0x80
 8009f22:	48ba      	ldr	r0, [pc, #744]	; (800a20c <Initialize+0x338>)
 8009f24:	f7f7 f9ec 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009f28:	2301      	movs	r3, #1
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2101      	movs	r1, #1
 8009f32:	48b7      	ldr	r0, [pc, #732]	; (800a210 <Initialize+0x33c>)
 8009f34:	f7f7 f9e4 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f44:	48b2      	ldr	r0, [pc, #712]	; (800a210 <Initialize+0x33c>)
 8009f46:	f7f7 f9db 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	2200      	movs	r2, #0
 8009f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f56:	48ae      	ldr	r0, [pc, #696]	; (800a210 <Initialize+0x33c>)
 8009f58:	f7f7 f9d2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	2301      	movs	r3, #1
 8009f62:	2200      	movs	r2, #0
 8009f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f68:	48a9      	ldr	r0, [pc, #676]	; (800a210 <Initialize+0x33c>)
 8009f6a:	f7f7 f9c9 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f6e:	2301      	movs	r3, #1
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	2301      	movs	r3, #1
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f7a:	48a5      	ldr	r0, [pc, #660]	; (800a210 <Initialize+0x33c>)
 8009f7c:	f7f7 f9c0 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f80:	2301      	movs	r3, #1
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2301      	movs	r3, #1
 8009f86:	2200      	movs	r2, #0
 8009f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f8c:	489f      	ldr	r0, [pc, #636]	; (800a20c <Initialize+0x338>)
 8009f8e:	f7f7 f9b7 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009f92:	2301      	movs	r3, #1
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	2301      	movs	r3, #1
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f9e:	489b      	ldr	r0, [pc, #620]	; (800a20c <Initialize+0x338>)
 8009fa0:	f7f7 f9ae 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	2200      	movs	r2, #0
 8009fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fb0:	4898      	ldr	r0, [pc, #608]	; (800a214 <Initialize+0x340>)
 8009fb2:	f7f7 f9a5 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	2301      	movs	r3, #1
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fc2:	4894      	ldr	r0, [pc, #592]	; (800a214 <Initialize+0x340>)
 8009fc4:	f7f7 f99c 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fc8:	2301      	movs	r3, #1
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	2301      	movs	r3, #1
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fd4:	488c      	ldr	r0, [pc, #560]	; (800a208 <Initialize+0x334>)
 8009fd6:	f7f7 f993 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fda:	2301      	movs	r3, #1
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fe6:	488c      	ldr	r0, [pc, #560]	; (800a218 <Initialize+0x344>)
 8009fe8:	f7f7 f98a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009fec:	2301      	movs	r3, #1
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2108      	movs	r1, #8
 8009ff6:	4887      	ldr	r0, [pc, #540]	; (800a214 <Initialize+0x340>)
 8009ff8:	f7f7 f982 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2301      	movs	r3, #1
 800a002:	2200      	movs	r2, #0
 800a004:	2110      	movs	r1, #16
 800a006:	4883      	ldr	r0, [pc, #524]	; (800a214 <Initialize+0x340>)
 800a008:	f7f7 f97a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a00c:	2301      	movs	r3, #1
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2301      	movs	r3, #1
 800a012:	2200      	movs	r2, #0
 800a014:	2180      	movs	r1, #128	; 0x80
 800a016:	487f      	ldr	r0, [pc, #508]	; (800a214 <Initialize+0x340>)
 800a018:	f7f7 f972 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a01c:	2301      	movs	r3, #1
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2301      	movs	r3, #1
 800a022:	2200      	movs	r2, #0
 800a024:	2120      	movs	r1, #32
 800a026:	4879      	ldr	r0, [pc, #484]	; (800a20c <Initialize+0x338>)
 800a028:	f7f7 f96a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a02c:	2301      	movs	r3, #1
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2301      	movs	r3, #1
 800a032:	2200      	movs	r2, #0
 800a034:	2140      	movs	r1, #64	; 0x40
 800a036:	4875      	ldr	r0, [pc, #468]	; (800a20c <Initialize+0x338>)
 800a038:	f7f7 f962 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a03c:	2301      	movs	r3, #1
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2301      	movs	r3, #1
 800a042:	2200      	movs	r2, #0
 800a044:	2101      	movs	r1, #1
 800a046:	4870      	ldr	r0, [pc, #448]	; (800a208 <Initialize+0x334>)
 800a048:	f7f7 f95a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a04c:	2301      	movs	r3, #1
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	2301      	movs	r3, #1
 800a052:	2200      	movs	r2, #0
 800a054:	2102      	movs	r1, #2
 800a056:	486c      	ldr	r0, [pc, #432]	; (800a208 <Initialize+0x334>)
 800a058:	f7f7 f952 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a05c:	2301      	movs	r3, #1
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2301      	movs	r3, #1
 800a062:	2200      	movs	r2, #0
 800a064:	2104      	movs	r1, #4
 800a066:	4868      	ldr	r0, [pc, #416]	; (800a208 <Initialize+0x334>)
 800a068:	f7f7 f94a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a06c:	2301      	movs	r3, #1
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2301      	movs	r3, #1
 800a072:	2200      	movs	r2, #0
 800a074:	2108      	movs	r1, #8
 800a076:	4864      	ldr	r0, [pc, #400]	; (800a208 <Initialize+0x334>)
 800a078:	f7f7 f942 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a07c:	2301      	movs	r3, #1
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	2301      	movs	r3, #1
 800a082:	2200      	movs	r2, #0
 800a084:	2110      	movs	r1, #16
 800a086:	4860      	ldr	r0, [pc, #384]	; (800a208 <Initialize+0x334>)
 800a088:	f7f7 f93a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a08c:	2301      	movs	r3, #1
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2301      	movs	r3, #1
 800a092:	2200      	movs	r2, #0
 800a094:	2120      	movs	r1, #32
 800a096:	485c      	ldr	r0, [pc, #368]	; (800a208 <Initialize+0x334>)
 800a098:	f7f7 f932 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800a09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	4b5b      	ldr	r3, [pc, #364]	; (800a210 <Initialize+0x33c>)
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	4b58      	ldr	r3, [pc, #352]	; (800a210 <Initialize+0x33c>)
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	4a57      	ldr	r2, [pc, #348]	; (800a210 <Initialize+0x33c>)
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	4859      	ldr	r0, [pc, #356]	; (800a21c <Initialize+0x348>)
 800a0b8:	f7f7 fe76 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a0bc:	2003      	movs	r0, #3
 800a0be:	f007 fa70 	bl	80115a2 <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800a0c2:	4b57      	ldr	r3, [pc, #348]	; (800a220 <Initialize+0x34c>)
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	4957      	ldr	r1, [pc, #348]	; (800a224 <Initialize+0x350>)
 800a0c8:	4857      	ldr	r0, [pc, #348]	; (800a228 <Initialize+0x354>)
 800a0ca:	f7f9 fdcb 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4a56      	ldr	r2, [pc, #344]	; (800a22c <Initialize+0x358>)
 800a0d2:	2108      	movs	r1, #8
 800a0d4:	4856      	ldr	r0, [pc, #344]	; (800a230 <Initialize+0x35c>)
 800a0d6:	f7f9 fd13 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800a0da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a0de:	4955      	ldr	r1, [pc, #340]	; (800a234 <Initialize+0x360>)
 800a0e0:	4855      	ldr	r0, [pc, #340]	; (800a238 <Initialize+0x364>)
 800a0e2:	f7f9 f98b 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a0ec:	4853      	ldr	r0, [pc, #332]	; (800a23c <Initialize+0x368>)
 800a0ee:	f7f9 f87d 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a0f8:	4851      	ldr	r0, [pc, #324]	; (800a240 <Initialize+0x36c>)
 800a0fa:	f7f9 f877 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800a0fe:	2201      	movs	r2, #1
 800a100:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a104:	484f      	ldr	r0, [pc, #316]	; (800a244 <Initialize+0x370>)
 800a106:	f7f9 f871 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800a10a:	484f      	ldr	r0, [pc, #316]	; (800a248 <Initialize+0x374>)
 800a10c:	f7f7 fc64 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800a110:	484e      	ldr	r0, [pc, #312]	; (800a24c <Initialize+0x378>)
 800a112:	f7f7 fc61 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800a116:	484e      	ldr	r0, [pc, #312]	; (800a250 <Initialize+0x37c>)
 800a118:	f7f7 fc5e 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800a11c:	2300      	movs	r3, #0
 800a11e:	9302      	str	r3, [sp, #8]
 800a120:	2300      	movs	r3, #0
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	2104      	movs	r1, #4
 800a12e:	4849      	ldr	r0, [pc, #292]	; (800a254 <Initialize+0x380>)
 800a130:	f7f9 fa70 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800a134:	2300      	movs	r3, #0
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	230e      	movs	r3, #14
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	2300      	movs	r3, #0
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2300      	movs	r3, #0
 800a142:	2201      	movs	r2, #1
 800a144:	2104      	movs	r1, #4
 800a146:	4844      	ldr	r0, [pc, #272]	; (800a258 <Initialize+0x384>)
 800a148:	f7f9 fa64 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800a14c:	2253      	movs	r2, #83	; 0x53
 800a14e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a152:	4842      	ldr	r0, [pc, #264]	; (800a25c <Initialize+0x388>)
 800a154:	f7f7 f9ce 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800a158:	2301      	movs	r3, #1
 800a15a:	4a2c      	ldr	r2, [pc, #176]	; (800a20c <Initialize+0x338>)
 800a15c:	2108      	movs	r1, #8
 800a15e:	483f      	ldr	r0, [pc, #252]	; (800a25c <Initialize+0x388>)
 800a160:	f7f7 faae 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800a164:	2302      	movs	r3, #2
 800a166:	4a29      	ldr	r2, [pc, #164]	; (800a20c <Initialize+0x338>)
 800a168:	210c      	movs	r1, #12
 800a16a:	483c      	ldr	r0, [pc, #240]	; (800a25c <Initialize+0x388>)
 800a16c:	f7f7 faa8 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800a170:	2253      	movs	r2, #83	; 0x53
 800a172:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a176:	483a      	ldr	r0, [pc, #232]	; (800a260 <Initialize+0x38c>)
 800a178:	f7f7 f9bc 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800a17c:	2301      	movs	r3, #1
 800a17e:	4a26      	ldr	r2, [pc, #152]	; (800a218 <Initialize+0x344>)
 800a180:	2100      	movs	r1, #0
 800a182:	4837      	ldr	r0, [pc, #220]	; (800a260 <Initialize+0x38c>)
 800a184:	f7f7 fa9c 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800a188:	2302      	movs	r3, #2
 800a18a:	4a23      	ldr	r2, [pc, #140]	; (800a218 <Initialize+0x344>)
 800a18c:	2104      	movs	r1, #4
 800a18e:	4834      	ldr	r0, [pc, #208]	; (800a260 <Initialize+0x38c>)
 800a190:	f7f7 fa96 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800a194:	2304      	movs	r3, #4
 800a196:	4a20      	ldr	r2, [pc, #128]	; (800a218 <Initialize+0x344>)
 800a198:	2108      	movs	r1, #8
 800a19a:	4831      	ldr	r0, [pc, #196]	; (800a260 <Initialize+0x38c>)
 800a19c:	f7f7 fa90 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	4a1d      	ldr	r2, [pc, #116]	; (800a218 <Initialize+0x344>)
 800a1a4:	210c      	movs	r1, #12
 800a1a6:	482e      	ldr	r0, [pc, #184]	; (800a260 <Initialize+0x38c>)
 800a1a8:	f7f7 fa8a 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800a1ac:	22a7      	movs	r2, #167	; 0xa7
 800a1ae:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a1b2:	482c      	ldr	r0, [pc, #176]	; (800a264 <Initialize+0x390>)
 800a1b4:	f7f7 f99e 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	4a15      	ldr	r2, [pc, #84]	; (800a210 <Initialize+0x33c>)
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4829      	ldr	r0, [pc, #164]	; (800a264 <Initialize+0x390>)
 800a1c0:	f7f7 fa7e 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	4a12      	ldr	r2, [pc, #72]	; (800a210 <Initialize+0x33c>)
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	4826      	ldr	r0, [pc, #152]	; (800a264 <Initialize+0x390>)
 800a1cc:	f7f7 fa78 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	4b23      	ldr	r3, [pc, #140]	; (800a268 <Initialize+0x394>)
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	220c      	movs	r2, #12
 800a1e0:	491e      	ldr	r1, [pc, #120]	; (800a25c <Initialize+0x388>)
 800a1e2:	4822      	ldr	r0, [pc, #136]	; (800a26c <Initialize+0x398>)
 800a1e4:	f7f6 ff48 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	4b1d      	ldr	r3, [pc, #116]	; (800a268 <Initialize+0x394>)
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2208      	movs	r2, #8
 800a1f8:	4918      	ldr	r1, [pc, #96]	; (800a25c <Initialize+0x388>)
 800a1fa:	481d      	ldr	r0, [pc, #116]	; (800a270 <Initialize+0x39c>)
 800a1fc:	f7f6 ff3c 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800a200:	2308      	movs	r3, #8
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	2304      	movs	r3, #4
 800a206:	e035      	b.n	800a274 <Initialize+0x3a0>
 800a208:	40020800 	.word	0x40020800
 800a20c:	40020400 	.word	0x40020400
 800a210:	40021000 	.word	0x40021000
 800a214:	40020c00 	.word	0x40020c00
 800a218:	40020000 	.word	0x40020000
 800a21c:	2000959c 	.word	0x2000959c
 800a220:	00061a80 	.word	0x00061a80
 800a224:	20009fac 	.word	0x20009fac
 800a228:	20006b88 	.word	0x20006b88
 800a22c:	000186a0 	.word	0x000186a0
 800a230:	20006be4 	.word	0x20006be4
 800a234:	20005a80 	.word	0x20005a80
 800a238:	20006078 	.word	0x20006078
 800a23c:	20005bc4 	.word	0x20005bc4
 800a240:	20005ff8 	.word	0x20005ff8
 800a244:	20005d2c 	.word	0x20005d2c
 800a248:	20005f34 	.word	0x20005f34
 800a24c:	20005b24 	.word	0x20005b24
 800a250:	20005ae4 	.word	0x20005ae4
 800a254:	20009f30 	.word	0x20009f30
 800a258:	20009000 	.word	0x20009000
 800a25c:	20005ce8 	.word	0x20005ce8
 800a260:	20005ca8 	.word	0x20005ca8
 800a264:	20005f74 	.word	0x20005f74
 800a268:	200095b8 	.word	0x200095b8
 800a26c:	2000a534 	.word	0x2000a534
 800a270:	2000770c 	.word	0x2000770c
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	4b23      	ldr	r3, [pc, #140]	; (800a304 <Initialize+0x430>)
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	2200      	movs	r2, #0
 800a27e:	4922      	ldr	r1, [pc, #136]	; (800a308 <Initialize+0x434>)
 800a280:	4822      	ldr	r0, [pc, #136]	; (800a30c <Initialize+0x438>)
 800a282:	f7f6 fef9 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800a286:	2302      	movs	r3, #2
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	2301      	movs	r3, #1
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	4b1d      	ldr	r3, [pc, #116]	; (800a304 <Initialize+0x430>)
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	2204      	movs	r2, #4
 800a296:	491c      	ldr	r1, [pc, #112]	; (800a308 <Initialize+0x434>)
 800a298:	481d      	ldr	r0, [pc, #116]	; (800a310 <Initialize+0x43c>)
 800a29a:	f7f6 feed 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a29e:	2380      	movs	r3, #128	; 0x80
 800a2a0:	9302      	str	r3, [sp, #8]
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <Initialize+0x440>)
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	220c      	movs	r2, #12
 800a2ae:	491a      	ldr	r1, [pc, #104]	; (800a318 <Initialize+0x444>)
 800a2b0:	481a      	ldr	r0, [pc, #104]	; (800a31c <Initialize+0x448>)
 800a2b2:	f7f6 fee1 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	9302      	str	r3, [sp, #8]
 800a2ba:	2310      	movs	r3, #16
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	4b15      	ldr	r3, [pc, #84]	; (800a314 <Initialize+0x440>)
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	4914      	ldr	r1, [pc, #80]	; (800a318 <Initialize+0x444>)
 800a2c8:	4815      	ldr	r0, [pc, #84]	; (800a320 <Initialize+0x44c>)
 800a2ca:	f7f6 fed5 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	9302      	str	r3, [sp, #8]
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <Initialize+0x440>)
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2204      	movs	r2, #4
 800a2de:	490e      	ldr	r1, [pc, #56]	; (800a318 <Initialize+0x444>)
 800a2e0:	4810      	ldr	r0, [pc, #64]	; (800a324 <Initialize+0x450>)
 800a2e2:	f7f6 fec9 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	9302      	str	r3, [sp, #8]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <Initialize+0x440>)
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4908      	ldr	r1, [pc, #32]	; (800a318 <Initialize+0x444>)
 800a2f8:	480b      	ldr	r0, [pc, #44]	; (800a328 <Initialize+0x454>)
 800a2fa:	f7f6 febd 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800a2fe:	bf00      	nop
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200095b8 	.word	0x200095b8
 800a308:	20005f74 	.word	0x20005f74
 800a30c:	20006c44 	.word	0x20006c44
 800a310:	20009674 	.word	0x20009674
 800a314:	200095b4 	.word	0x200095b4
 800a318:	20005ca8 	.word	0x20005ca8
 800a31c:	2000a3b0 	.word	0x2000a3b0
 800a320:	200096f4 	.word	0x200096f4
 800a324:	20009718 	.word	0x20009718
 800a328:	20007324 	.word	0x20007324

0800a32c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a330:	4802      	ldr	r0, [pc, #8]	; (800a33c <CAN1_RX0_IRQHandler+0x10>)
 800a332:	f006 fe21 	bl	8010f78 <HAL_CAN_IRQHandler>

}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20009f30 	.word	0x20009f30

0800a340 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a344:	4802      	ldr	r0, [pc, #8]	; (800a350 <CAN2_RX1_IRQHandler+0x10>)
 800a346:	f006 fe17 	bl	8010f78 <HAL_CAN_IRQHandler>

}
 800a34a:	bf00      	nop
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20009000 	.word	0x20009000

0800a354 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d008      	beq.n	800a376 <CAN_PROCESS+0x22>
 800a364:	2b02      	cmp	r3, #2
 800a366:	dc36      	bgt.n	800a3d6 <CAN_PROCESS+0x82>
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <CAN_PROCESS+0x28>
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d132      	bne.n	800a3d6 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800a370:	f003 f908 	bl	800d584 <decode_VESC>
		break;
 800a374:	e02f      	b.n	800a3d6 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800a376:	f7fa fe89 	bl	800508c <OdriveCAN_Handler>
		break;
 800a37a:	e02c      	b.n	800a3d6 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800a37c:	4b18      	ldr	r3, [pc, #96]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d107      	bne.n	800a394 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800a384:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a386:	785a      	ldrb	r2, [r3, #1]
 800a388:	4b16      	ldr	r3, [pc, #88]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a390:	2202      	movs	r2, #2
 800a392:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b11      	cmp	r3, #17
 800a39a:	d11b      	bne.n	800a3d4 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <CAN_PROCESS+0x94>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d117      	bne.n	800a3d4 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a3a6:	785a      	ldrb	r2, [r3, #1]
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <CAN_PROCESS+0x98>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a0c      	ldr	r2, [pc, #48]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3b4:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <CAN_PROCESS+0x98>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4a0a      	ldr	r2, [pc, #40]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3bc:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800a3be:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <CAN_PROCESS+0x9c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3c4:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <CAN_PROCESS+0x9c>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4a06      	ldr	r2, [pc, #24]	; (800a3e4 <CAN_PROCESS+0x90>)
 800a3cc:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <CAN_PROCESS+0x8c>)
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800a3d4:	bf00      	nop
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20006a3c 	.word	0x20006a3c
 800a3e4:	20008f08 	.word	0x20008f08
 800a3e8:	200002d0 	.word	0x200002d0
 800a3ec:	20009c34 	.word	0x20009c34
 800a3f0:	20009d94 	.word	0x20009d94

0800a3f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a3f4:	b5b0      	push	{r4, r5, r7, lr}
 800a3f6:	b08c      	sub	sp, #48	; 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4aaa      	ldr	r2, [pc, #680]	; (800a6b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800a406:	4293      	cmp	r3, r2
 800a408:	f040 80b4 	bne.w	800a574 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a40c:	f107 030c 	add.w	r3, r7, #12
 800a410:	4aa8      	ldr	r2, [pc, #672]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f006 fc77 	bl	8010d08 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a41a:	4ba6      	ldr	r3, [pc, #664]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d118      	bne.n	800a454 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a422:	4aa5      	ldr	r2, [pc, #660]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a424:	4ba3      	ldr	r3, [pc, #652]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a426:	4614      	mov	r4, r2
 800a428:	461d      	mov	r5, r3
 800a42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a42e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a436:	4ba0      	ldr	r3, [pc, #640]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a438:	331c      	adds	r3, #28
 800a43a:	f107 020c 	add.w	r2, r7, #12
 800a43e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a442:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a446:	489c      	ldr	r0, [pc, #624]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a448:	f003 f90a 	bl	800d660 <set_rx_frames>
			source = VESC_PACKET;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a452:	e081      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a454:	2300      	movs	r3, #0
 800a456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a45a:	231f      	movs	r3, #31
 800a45c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a45e:	4b95      	ldr	r3, [pc, #596]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	b29a      	uxth	r2, r3
 800a464:	8b7b      	ldrh	r3, [r7, #26]
 800a466:	4013      	ands	r3, r2
 800a468:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a46a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a46e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a470:	4b90      	ldr	r3, [pc, #576]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	b29a      	uxth	r2, r3
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	4013      	ands	r3, r2
 800a47a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a47c:	8abb      	ldrh	r3, [r7, #20]
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a482:	2300      	movs	r3, #0
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
 800a486:	e016      	b.n	800a4b6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a488:	4b8c      	ldr	r3, [pc, #560]	; (800a6bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	8b1b      	ldrh	r3, [r3, #24]
 800a496:	8aba      	ldrh	r2, [r7, #20]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d109      	bne.n	800a4b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800a49c:	8b3b      	ldrh	r3, [r7, #24]
 800a49e:	2b09      	cmp	r3, #9
 800a4a0:	d002      	beq.n	800a4a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a4a2:	8b3b      	ldrh	r3, [r7, #24]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d103      	bne.n	800a4b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a4ae:	e007      	b.n	800a4c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4b6:	4b82      	ldr	r3, [pc, #520]	; (800a6c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	dbe3      	blt.n	800a488 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a4c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d112      	bne.n	800a4ee <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a4c8:	4a7e      	ldr	r2, [pc, #504]	; (800a6c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a4ca:	4b7a      	ldr	r3, [pc, #488]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a4dc:	4b75      	ldr	r3, [pc, #468]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4de:	691a      	ldr	r2, [r3, #16]
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4878      	ldr	r0, [pc, #480]	; (800a6c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a4e8:	f00f fbb2 	bl	8019c50 <memcpy>
 800a4ec:	e034      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a4ee:	4b71      	ldr	r3, [pc, #452]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b16      	cmp	r3, #22
 800a4f4:	d01b      	beq.n	800a52e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800a4f6:	2b16      	cmp	r3, #22
 800a4f8:	d825      	bhi.n	800a546 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800a4fa:	2b14      	cmp	r3, #20
 800a4fc:	d002      	beq.n	800a504 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d00c      	beq.n	800a51c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800a502:	e020      	b.n	800a546 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a504:	4b6b      	ldr	r3, [pc, #428]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	4619      	mov	r1, r3
 800a50e:	486f      	ldr	r0, [pc, #444]	; (800a6cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a510:	f00f fb9e 	bl	8019c50 <memcpy>
					buf2_flag = 0;
 800a514:	4b6e      	ldr	r3, [pc, #440]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]

					break;
 800a51a:	e01d      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a51c:	4b65      	ldr	r3, [pc, #404]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a51e:	691a      	ldr	r2, [r3, #16]
 800a520:	f107 030c 	add.w	r3, r7, #12
 800a524:	4619      	mov	r1, r3
 800a526:	486b      	ldr	r0, [pc, #428]	; (800a6d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a528:	f00f fb92 	bl	8019c50 <memcpy>

					break;
 800a52c:	e014      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a52e:	4b61      	ldr	r3, [pc, #388]	; (800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	f107 030c 	add.w	r3, r7, #12
 800a536:	4619      	mov	r1, r3
 800a538:	4867      	ldr	r0, [pc, #412]	; (800a6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a53a:	f00f fb89 	bl	8019c50 <memcpy>
					buf2_flag = 1;
 800a53e:	4b64      	ldr	r3, [pc, #400]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
					break;
 800a544:	e008      	b.n	800a558 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a54c:	f107 030c 	add.w	r3, r7, #12
 800a550:	4618      	mov	r0, r3
 800a552:	f7f9 faa9 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a556:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff fef5 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a56a:	2102      	movs	r1, #2
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f006 fcdd 	bl	8010f2c <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800a572:	e0cb      	b.n	800a70c <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	4a58      	ldr	r2, [pc, #352]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a57a:	2100      	movs	r1, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f006 fbc3 	bl	8010d08 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a582:	4b56      	ldr	r3, [pc, #344]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2b04      	cmp	r3, #4
 800a588:	d118      	bne.n	800a5bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a58a:	4a4b      	ldr	r2, [pc, #300]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a58c:	4b53      	ldr	r3, [pc, #332]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a58e:	4614      	mov	r4, r2
 800a590:	461d      	mov	r5, r3
 800a592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a59a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a59e:	4b46      	ldr	r3, [pc, #280]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a5a0:	331c      	adds	r3, #28
 800a5a2:	f107 020c 	add.w	r2, r7, #12
 800a5a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5aa:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a5ae:	4842      	ldr	r0, [pc, #264]	; (800a6b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a5b0:	f003 f856 	bl	800d660 <set_rx_frames>
			source = VESC_PACKET;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a5ba:	e09a      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a5c2:	231f      	movs	r3, #31
 800a5c4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a5c6:	4b45      	ldr	r3, [pc, #276]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a5d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a5d6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a5d8:	4b40      	ldr	r3, [pc, #256]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	8bfb      	ldrh	r3, [r7, #30]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a5e4:	8bbb      	ldrh	r3, [r7, #28]
 800a5e6:	095b      	lsrs	r3, r3, #5
 800a5e8:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ee:	e016      	b.n	800a61e <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a5f0:	4b32      	ldr	r3, [pc, #200]	; (800a6bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	8b1b      	ldrh	r3, [r3, #24]
 800a5fe:	8bba      	ldrh	r2, [r7, #28]
 800a600:	429a      	cmp	r2, r3
 800a602:	d109      	bne.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800a604:	8c3b      	ldrh	r3, [r7, #32]
 800a606:	2b09      	cmp	r3, #9
 800a608:	d002      	beq.n	800a610 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800a60a:	8c3b      	ldrh	r3, [r7, #32]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d103      	bne.n	800a618 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a610:	2302      	movs	r3, #2
 800a612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a616:	e007      	b.n	800a628 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	3301      	adds	r3, #1
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
 800a61e:	4b28      	ldr	r3, [pc, #160]	; (800a6c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a624:	429a      	cmp	r2, r3
 800a626:	dbe3      	blt.n	800a5f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d112      	bne.n	800a656 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a630:	4a24      	ldr	r2, [pc, #144]	; (800a6c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a632:	4b2a      	ldr	r3, [pc, #168]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a634:	4614      	mov	r4, r2
 800a636:	461d      	mov	r5, r3
 800a638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a63a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a63c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a644:	4b25      	ldr	r3, [pc, #148]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	f107 030c 	add.w	r3, r7, #12
 800a64c:	4619      	mov	r1, r3
 800a64e:	481e      	ldr	r0, [pc, #120]	; (800a6c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a650:	f00f fafe 	bl	8019c50 <memcpy>
 800a654:	e04d      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a656:	4b21      	ldr	r3, [pc, #132]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b16      	cmp	r3, #22
 800a65c:	d01b      	beq.n	800a696 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800a65e:	2b16      	cmp	r3, #22
 800a660:	d83e      	bhi.n	800a6e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800a662:	2b14      	cmp	r3, #20
 800a664:	d002      	beq.n	800a66c <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800a666:	2b15      	cmp	r3, #21
 800a668:	d00c      	beq.n	800a684 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800a66a:	e039      	b.n	800a6e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a66c:	4b1b      	ldr	r3, [pc, #108]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	4619      	mov	r1, r3
 800a676:	4815      	ldr	r0, [pc, #84]	; (800a6cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a678:	f00f faea 	bl	8019c50 <memcpy>
					buf2_flag = 0;
 800a67c:	4b14      	ldr	r3, [pc, #80]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a67e:	2200      	movs	r2, #0
 800a680:	701a      	strb	r2, [r3, #0]
					break;
 800a682:	e036      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a684:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	f107 030c 	add.w	r3, r7, #12
 800a68c:	4619      	mov	r1, r3
 800a68e:	4811      	ldr	r0, [pc, #68]	; (800a6d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a690:	f00f fade 	bl	8019c50 <memcpy>
					break;
 800a694:	e02d      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a698:	691a      	ldr	r2, [r3, #16]
 800a69a:	f107 030c 	add.w	r3, r7, #12
 800a69e:	4619      	mov	r1, r3
 800a6a0:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a6a2:	f00f fad5 	bl	8019c50 <memcpy>
					buf2_flag = 1;
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
					break;
 800a6ac:	e021      	b.n	800a6f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800a6ae:	bf00      	nop
 800a6b0:	20009f30 	.word	0x20009f30
 800a6b4:	2000a4f0 	.word	0x2000a4f0
 800a6b8:	200096c4 	.word	0x200096c4
 800a6bc:	2000a614 	.word	0x2000a614
 800a6c0:	200002c4 	.word	0x200002c4
 800a6c4:	20006888 	.word	0x20006888
 800a6c8:	200068a4 	.word	0x200068a4
 800a6cc:	20006a3c 	.word	0x20006a3c
 800a6d0:	200002d0 	.word	0x200002d0
 800a6d4:	20009c34 	.word	0x20009c34
 800a6d8:	20009d94 	.word	0x20009d94
 800a6dc:	20006ab8 	.word	0x20006ab8
					rns_can = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a6e6:	f107 030c 	add.w	r3, r7, #12
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f9 f9dc 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a6f0:	bf00      	nop
		if(rns_can)
 800a6f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fe28 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a704:	2102      	movs	r1, #2
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f006 fc10 	bl	8010f2c <HAL_CAN_ActivateNotification>
}
 800a70c:	bf00      	nop
 800a70e:	3730      	adds	r7, #48	; 0x30
 800a710:	46bd      	mov	sp, r7
 800a712:	bdb0      	pop	{r4, r5, r7, pc}

0800a714 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a714:	b5b0      	push	{r4, r5, r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4aaa      	ldr	r2, [pc, #680]	; (800a9d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800a726:	4293      	cmp	r3, r2
 800a728:	f040 80b4 	bne.w	800a894 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	4aa8      	ldr	r2, [pc, #672]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a732:	2101      	movs	r1, #1
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f006 fae7 	bl	8010d08 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a73a:	4ba6      	ldr	r3, [pc, #664]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d118      	bne.n	800a774 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a742:	4aa5      	ldr	r2, [pc, #660]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a744:	4ba3      	ldr	r3, [pc, #652]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a746:	4614      	mov	r4, r2
 800a748:	461d      	mov	r5, r3
 800a74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a74e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a756:	4ba0      	ldr	r3, [pc, #640]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a758:	331c      	adds	r3, #28
 800a75a:	f107 020c 	add.w	r2, r7, #12
 800a75e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a762:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a766:	489c      	ldr	r0, [pc, #624]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a768:	f002 ff7a 	bl	800d660 <set_rx_frames>
			source = VESC_PACKET;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a772:	e081      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a774:	2300      	movs	r3, #0
 800a776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a77a:	231f      	movs	r3, #31
 800a77c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a77e:	4b95      	ldr	r3, [pc, #596]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	b29a      	uxth	r2, r3
 800a784:	8b7b      	ldrh	r3, [r7, #26]
 800a786:	4013      	ands	r3, r2
 800a788:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a78a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a78e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a790:	4b90      	ldr	r3, [pc, #576]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	b29a      	uxth	r2, r3
 800a796:	8afb      	ldrh	r3, [r7, #22]
 800a798:	4013      	ands	r3, r2
 800a79a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a79c:	8abb      	ldrh	r3, [r7, #20]
 800a79e:	095b      	lsrs	r3, r3, #5
 800a7a0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7a6:	e016      	b.n	800a7d6 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a7a8:	4b8c      	ldr	r3, [pc, #560]	; (800a9dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	8b1b      	ldrh	r3, [r3, #24]
 800a7b6:	8aba      	ldrh	r2, [r7, #20]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d109      	bne.n	800a7d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a7bc:	8b3b      	ldrh	r3, [r7, #24]
 800a7be:	2b09      	cmp	r3, #9
 800a7c0:	d002      	beq.n	800a7c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800a7c2:	8b3b      	ldrh	r3, [r7, #24]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d103      	bne.n	800a7d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a7ce:	e007      	b.n	800a7e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7d6:	4b82      	ldr	r3, [pc, #520]	; (800a9e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	dbe3      	blt.n	800a7a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d112      	bne.n	800a80e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a7e8:	4a7e      	ldr	r2, [pc, #504]	; (800a9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a7ea:	4b7a      	ldr	r3, [pc, #488]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a7fc:	4b75      	ldr	r3, [pc, #468]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	f107 030c 	add.w	r3, r7, #12
 800a804:	4619      	mov	r1, r3
 800a806:	4878      	ldr	r0, [pc, #480]	; (800a9e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a808:	f00f fa22 	bl	8019c50 <memcpy>
 800a80c:	e034      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a80e:	4b71      	ldr	r3, [pc, #452]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b16      	cmp	r3, #22
 800a814:	d01b      	beq.n	800a84e <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800a816:	2b16      	cmp	r3, #22
 800a818:	d825      	bhi.n	800a866 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800a81a:	2b14      	cmp	r3, #20
 800a81c:	d002      	beq.n	800a824 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800a81e:	2b15      	cmp	r3, #21
 800a820:	d00c      	beq.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800a822:	e020      	b.n	800a866 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a824:	4b6b      	ldr	r3, [pc, #428]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a826:	691a      	ldr	r2, [r3, #16]
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	4619      	mov	r1, r3
 800a82e:	486f      	ldr	r0, [pc, #444]	; (800a9ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a830:	f00f fa0e 	bl	8019c50 <memcpy>
					buf2_flag = 0;
 800a834:	4b6e      	ldr	r3, [pc, #440]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]

					break;
 800a83a:	e01d      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a83c:	4b65      	ldr	r3, [pc, #404]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a83e:	691a      	ldr	r2, [r3, #16]
 800a840:	f107 030c 	add.w	r3, r7, #12
 800a844:	4619      	mov	r1, r3
 800a846:	486b      	ldr	r0, [pc, #428]	; (800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a848:	f00f fa02 	bl	8019c50 <memcpy>

					break;
 800a84c:	e014      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a84e:	4b61      	ldr	r3, [pc, #388]	; (800a9d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	4619      	mov	r1, r3
 800a858:	4867      	ldr	r0, [pc, #412]	; (800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a85a:	f00f f9f9 	bl	8019c50 <memcpy>
					buf2_flag = 1;
 800a85e:	4b64      	ldr	r3, [pc, #400]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a860:	2201      	movs	r2, #1
 800a862:	701a      	strb	r2, [r3, #0]
					break;
 800a864:	e008      	b.n	800a878 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	4618      	mov	r0, r3
 800a872:	f7f9 f919 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a876:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a878:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fd65 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a88a:	2110      	movs	r1, #16
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f006 fb4d 	bl	8010f2c <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800a892:	e0cb      	b.n	800aa2c <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a894:	f107 030c 	add.w	r3, r7, #12
 800a898:	4a58      	ldr	r2, [pc, #352]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a89a:	2101      	movs	r1, #1
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f006 fa33 	bl	8010d08 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a8a2:	4b56      	ldr	r3, [pc, #344]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d118      	bne.n	800a8dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a8aa:	4a4b      	ldr	r2, [pc, #300]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8ac:	4b53      	ldr	r3, [pc, #332]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8ae:	4614      	mov	r4, r2
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a8ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a8be:	4b46      	ldr	r3, [pc, #280]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8c0:	331c      	adds	r3, #28
 800a8c2:	f107 020c 	add.w	r2, r7, #12
 800a8c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8ca:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a8ce:	4842      	ldr	r0, [pc, #264]	; (800a9d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a8d0:	f002 fec6 	bl	800d660 <set_rx_frames>
			source = VESC_PACKET;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8da:	e09a      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a8e2:	231f      	movs	r3, #31
 800a8e4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a8e6:	4b45      	ldr	r3, [pc, #276]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a8f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a8f6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a8f8:	4b40      	ldr	r3, [pc, #256]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	8bfb      	ldrh	r3, [r7, #30]
 800a900:	4013      	ands	r3, r2
 800a902:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a904:	8bbb      	ldrh	r3, [r7, #28]
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	627b      	str	r3, [r7, #36]	; 0x24
 800a90e:	e016      	b.n	800a93e <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a910:	4b32      	ldr	r3, [pc, #200]	; (800a9dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	8b1b      	ldrh	r3, [r3, #24]
 800a91e:	8bba      	ldrh	r2, [r7, #28]
 800a920:	429a      	cmp	r2, r3
 800a922:	d109      	bne.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800a924:	8c3b      	ldrh	r3, [r7, #32]
 800a926:	2b09      	cmp	r3, #9
 800a928:	d002      	beq.n	800a930 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800a92a:	8c3b      	ldrh	r3, [r7, #32]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d103      	bne.n	800a938 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a930:	2302      	movs	r3, #2
 800a932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a936:	e007      	b.n	800a948 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	3301      	adds	r3, #1
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
 800a93e:	4b28      	ldr	r3, [pc, #160]	; (800a9e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a944:	429a      	cmp	r2, r3
 800a946:	dbe3      	blt.n	800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d112      	bne.n	800a976 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a952:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a95c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a964:	4b25      	ldr	r3, [pc, #148]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a966:	691a      	ldr	r2, [r3, #16]
 800a968:	f107 030c 	add.w	r3, r7, #12
 800a96c:	4619      	mov	r1, r3
 800a96e:	481e      	ldr	r0, [pc, #120]	; (800a9e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a970:	f00f f96e 	bl	8019c50 <memcpy>
 800a974:	e04d      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a976:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b16      	cmp	r3, #22
 800a97c:	d01b      	beq.n	800a9b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800a97e:	2b16      	cmp	r3, #22
 800a980:	d83e      	bhi.n	800aa00 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800a982:	2b14      	cmp	r3, #20
 800a984:	d002      	beq.n	800a98c <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800a986:	2b15      	cmp	r3, #21
 800a988:	d00c      	beq.n	800a9a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800a98a:	e039      	b.n	800aa00 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a98c:	4b1b      	ldr	r3, [pc, #108]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	f107 030c 	add.w	r3, r7, #12
 800a994:	4619      	mov	r1, r3
 800a996:	4815      	ldr	r0, [pc, #84]	; (800a9ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a998:	f00f f95a 	bl	8019c50 <memcpy>
					buf2_flag = 0;
 800a99c:	4b14      	ldr	r3, [pc, #80]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
					break;
 800a9a2:	e036      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a9a4:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4811      	ldr	r0, [pc, #68]	; (800a9f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a9b0:	f00f f94e 	bl	8019c50 <memcpy>
					break;
 800a9b4:	e02d      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9b8:	691a      	ldr	r2, [r3, #16]
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4619      	mov	r1, r3
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a9c2:	f00f f945 	bl	8019c50 <memcpy>
					buf2_flag = 1;
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	701a      	strb	r2, [r3, #0]
					break;
 800a9cc:	e021      	b.n	800aa12 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800a9ce:	bf00      	nop
 800a9d0:	20009f30 	.word	0x20009f30
 800a9d4:	2000a4f0 	.word	0x2000a4f0
 800a9d8:	200096c4 	.word	0x200096c4
 800a9dc:	2000a614 	.word	0x2000a614
 800a9e0:	200002c4 	.word	0x200002c4
 800a9e4:	20006888 	.word	0x20006888
 800a9e8:	200068a4 	.word	0x200068a4
 800a9ec:	20006a3c 	.word	0x20006a3c
 800a9f0:	200002d0 	.word	0x200002d0
 800a9f4:	20009c34 	.word	0x20009c34
 800a9f8:	20009d94 	.word	0x20009d94
 800a9fc:	20006ab8 	.word	0x20006ab8
					rns_can = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f9 f84c 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800aa10:	bf00      	nop
		if(rns_can)
 800aa12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d004      	beq.n	800aa24 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff fc98 	bl	800a354 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800aa24:	2110      	movs	r1, #16
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f006 fa80 	bl	8010f2c <HAL_CAN_ActivateNotification>
}
 800aa2c:	bf00      	nop
 800aa2e:	3730      	adds	r7, #48	; 0x30
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bdb0      	pop	{r4, r5, r7, pc}

0800aa34 <set>:

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};
float flywheelVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};
float flywheelLVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};

void set(void) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af02      	add	r7, sp, #8
	Initialize();
 800aa3a:	f7ff fa4b 	bl	8009ed4 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800aa3e:	49a4      	ldr	r1, [pc, #656]	; (800acd0 <set+0x29c>)
 800aa40:	48a4      	ldr	r0, [pc, #656]	; (800acd4 <set+0x2a0>)
 800aa42:	f7fe f8e6 	bl	8008c12 <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800aa46:	2254      	movs	r2, #84	; 0x54
 800aa48:	f241 3188 	movw	r1, #5000	; 0x1388
 800aa4c:	48a2      	ldr	r0, [pc, #648]	; (800acd8 <set+0x2a4>)
 800aa4e:	f7f8 fa33 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 5.5, 0.5, 2.0, 0.1);
 800aa52:	eddf 1aa2 	vldr	s3, [pc, #648]	; 800acdc <set+0x2a8>
 800aa56:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800aa5a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800aa5e:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800aa62:	2000      	movs	r0, #0
 800aa64:	f7f9 fd78 	bl	8004558 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800aa68:	4a9d      	ldr	r2, [pc, #628]	; (800ace0 <set+0x2ac>)
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	489d      	ldr	r0, [pc, #628]	; (800ace4 <set+0x2b0>)
 800aa6e:	f002 fecd 	bl	800d80c <LidarInit>
	RNS_config(&hcan1);
 800aa72:	489d      	ldr	r0, [pc, #628]	; (800ace8 <set+0x2b4>)
 800aa74:	f000 f988 	bl	800ad88 <RNS_config>
	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800aa78:	2304      	movs	r3, #4
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	4a9b      	ldr	r2, [pc, #620]	; (800acec <set+0x2b8>)
 800aa80:	499b      	ldr	r1, [pc, #620]	; (800acf0 <set+0x2bc>)
 800aa82:	489c      	ldr	r0, [pc, #624]	; (800acf4 <set+0x2c0>)
 800aa84:	f7ff f88e 	bl	8009ba4 <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800aa88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aa8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa90:	4898      	ldr	r0, [pc, #608]	; (800acf4 <set+0x2c0>)
 800aa92:	f7ff f9ee 	bl	8009e72 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2300);
 800aa96:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800aa9a:	4896      	ldr	r0, [pc, #600]	; (800acf4 <set+0x2c0>)
 800aa9c:	f7ff f9a0 	bl	8009de0 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800aaa0:	4b95      	ldr	r3, [pc, #596]	; (800acf8 <set+0x2c4>)
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4b95      	ldr	r3, [pc, #596]	; (800acfc <set+0x2c8>)
 800aaa6:	4a96      	ldr	r2, [pc, #600]	; (800ad00 <set+0x2cc>)
 800aaa8:	4996      	ldr	r1, [pc, #600]	; (800ad04 <set+0x2d0>)
 800aaaa:	2002      	movs	r0, #2
 800aaac:	f7fa fdf4 	bl	8005698 <PPInit>
	PP_SetZ(-180, &pp);
 800aab0:	4891      	ldr	r0, [pc, #580]	; (800acf8 <set+0x2c4>)
 800aab2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ad08 <set+0x2d4>
 800aab6:	f7fb fa03 	bl	8005ec0 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800aaba:	488f      	ldr	r0, [pc, #572]	; (800acf8 <set+0x2c4>)
 800aabc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800aac0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800aac4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aac8:	f7fa feb8 	bl	800583c <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800aacc:	488a      	ldr	r0, [pc, #552]	; (800acf8 <set+0x2c4>)
 800aace:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800ad0c <set+0x2d8>
 800aad2:	eddf 0a82 	vldr	s1, [pc, #520]	; 800acdc <set+0x2a8>
 800aad6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800aada:	f7fa ff38 	bl	800594e <PP_PIDEndSet>
	PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 800aade:	4886      	ldr	r0, [pc, #536]	; (800acf8 <set+0x2c4>)
 800aae0:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800aae4:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800ad10 <set+0x2dc>
 800aae8:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800ad14 <set+0x2e0>
 800aaec:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800aaf0:	f7fa fef4 	bl	80058dc <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800aaf4:	4980      	ldr	r1, [pc, #512]	; (800acf8 <set+0x2c4>)
 800aaf6:	200a      	movs	r0, #10
 800aaf8:	f7fb f9fa 	bl	8005ef0 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800aafc:	4986      	ldr	r1, [pc, #536]	; (800ad18 <set+0x2e4>)
 800aafe:	4887      	ldr	r0, [pc, #540]	; (800ad1c <set+0x2e8>)
 800ab00:	f7fe fb9c 	bl	800923c <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800ab04:	4a86      	ldr	r2, [pc, #536]	; (800ad20 <set+0x2ec>)
 800ab06:	4987      	ldr	r1, [pc, #540]	; (800ad24 <set+0x2f0>)
 800ab08:	4887      	ldr	r0, [pc, #540]	; (800ad28 <set+0x2f4>)
 800ab0a:	f7fa fb2f 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800ab0e:	4884      	ldr	r0, [pc, #528]	; (800ad20 <set+0x2ec>)
 800ab10:	f7fa fcc3 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800ab14:	4b85      	ldr	r3, [pc, #532]	; (800ad2c <set+0x2f8>)
 800ab16:	edd3 7a00 	vldr	s15, [r3]
 800ab1a:	4b84      	ldr	r3, [pc, #528]	; (800ad2c <set+0x2f8>)
 800ab1c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab20:	4b82      	ldr	r3, [pc, #520]	; (800ad2c <set+0x2f8>)
 800ab22:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab26:	4b81      	ldr	r3, [pc, #516]	; (800ad2c <set+0x2f8>)
 800ab28:	ed93 6a03 	vldr	s12, [r3, #12]
 800ab2c:	4b7f      	ldr	r3, [pc, #508]	; (800ad2c <set+0x2f8>)
 800ab2e:	edd3 5a04 	vldr	s11, [r3, #16]
 800ab32:	4b7e      	ldr	r3, [pc, #504]	; (800ad2c <set+0x2f8>)
 800ab34:	ed93 5a05 	vldr	s10, [r3, #20]
 800ab38:	4b7c      	ldr	r3, [pc, #496]	; (800ad2c <set+0x2f8>)
 800ab3a:	edd3 4a06 	vldr	s9, [r3, #24]
 800ab3e:	4878      	ldr	r0, [pc, #480]	; (800ad20 <set+0x2ec>)
 800ab40:	eef0 3a64 	vmov.f32	s7, s9
 800ab44:	eeb0 3a45 	vmov.f32	s6, s10
 800ab48:	eef0 2a65 	vmov.f32	s5, s11
 800ab4c:	eeb0 2a46 	vmov.f32	s4, s12
 800ab50:	eef0 1a66 	vmov.f32	s3, s13
 800ab54:	eeb0 1a47 	vmov.f32	s2, s14
 800ab58:	eef0 0a67 	vmov.f32	s1, s15
 800ab5c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800ad30 <set+0x2fc>
 800ab60:	f7fa fb16 	bl	8005190 <PIDGainInit>

	PIDSourceInit(&leftErr, &leftU, &left_PID);
 800ab64:	4a73      	ldr	r2, [pc, #460]	; (800ad34 <set+0x300>)
 800ab66:	4974      	ldr	r1, [pc, #464]	; (800ad38 <set+0x304>)
 800ab68:	4874      	ldr	r0, [pc, #464]	; (800ad3c <set+0x308>)
 800ab6a:	f7fa faff 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&left_PID);
 800ab6e:	4871      	ldr	r0, [pc, #452]	; (800ad34 <set+0x300>)
 800ab70:	f7fa fc93 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, flywheelLVG[0], flywheelLVG[1], flywheelLVG[2], flywheelLVG[3], flywheelLVG[4], flywheelLVG[5], flywheelLVG[6], &left_PID);
 800ab74:	4b72      	ldr	r3, [pc, #456]	; (800ad40 <set+0x30c>)
 800ab76:	edd3 7a00 	vldr	s15, [r3]
 800ab7a:	4b71      	ldr	r3, [pc, #452]	; (800ad40 <set+0x30c>)
 800ab7c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab80:	4b6f      	ldr	r3, [pc, #444]	; (800ad40 <set+0x30c>)
 800ab82:	edd3 6a02 	vldr	s13, [r3, #8]
 800ab86:	4b6e      	ldr	r3, [pc, #440]	; (800ad40 <set+0x30c>)
 800ab88:	ed93 6a03 	vldr	s12, [r3, #12]
 800ab8c:	4b6c      	ldr	r3, [pc, #432]	; (800ad40 <set+0x30c>)
 800ab8e:	edd3 5a04 	vldr	s11, [r3, #16]
 800ab92:	4b6b      	ldr	r3, [pc, #428]	; (800ad40 <set+0x30c>)
 800ab94:	ed93 5a05 	vldr	s10, [r3, #20]
 800ab98:	4b69      	ldr	r3, [pc, #420]	; (800ad40 <set+0x30c>)
 800ab9a:	edd3 4a06 	vldr	s9, [r3, #24]
 800ab9e:	4865      	ldr	r0, [pc, #404]	; (800ad34 <set+0x300>)
 800aba0:	eef0 3a64 	vmov.f32	s7, s9
 800aba4:	eeb0 3a45 	vmov.f32	s6, s10
 800aba8:	eef0 2a65 	vmov.f32	s5, s11
 800abac:	eeb0 2a46 	vmov.f32	s4, s12
 800abb0:	eef0 1a66 	vmov.f32	s3, s13
 800abb4:	eeb0 1a47 	vmov.f32	s2, s14
 800abb8:	eef0 0a67 	vmov.f32	s1, s15
 800abbc:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800ad30 <set+0x2fc>
 800abc0:	f7fa fae6 	bl	8005190 <PIDGainInit>

	PIDSourceInit(&rightErr, &rightU, &right_PID);
 800abc4:	4a5f      	ldr	r2, [pc, #380]	; (800ad44 <set+0x310>)
 800abc6:	4960      	ldr	r1, [pc, #384]	; (800ad48 <set+0x314>)
 800abc8:	4860      	ldr	r0, [pc, #384]	; (800ad4c <set+0x318>)
 800abca:	f7fa facf 	bl	800516c <PIDSourceInit>
	PIDDelayInit(&right_PID);
 800abce:	485d      	ldr	r0, [pc, #372]	; (800ad44 <set+0x310>)
 800abd0:	f7fa fc63 	bl	800549a <PIDDelayInit>
	PIDGainInit(0.005, flywheelVG[0], flywheelVG[1], flywheelVG[2], flywheelVG[3], flywheelVG[4], flywheelVG[5], flywheelVG[6], &right_PID);
 800abd4:	4b5e      	ldr	r3, [pc, #376]	; (800ad50 <set+0x31c>)
 800abd6:	edd3 7a00 	vldr	s15, [r3]
 800abda:	4b5d      	ldr	r3, [pc, #372]	; (800ad50 <set+0x31c>)
 800abdc:	ed93 7a01 	vldr	s14, [r3, #4]
 800abe0:	4b5b      	ldr	r3, [pc, #364]	; (800ad50 <set+0x31c>)
 800abe2:	edd3 6a02 	vldr	s13, [r3, #8]
 800abe6:	4b5a      	ldr	r3, [pc, #360]	; (800ad50 <set+0x31c>)
 800abe8:	ed93 6a03 	vldr	s12, [r3, #12]
 800abec:	4b58      	ldr	r3, [pc, #352]	; (800ad50 <set+0x31c>)
 800abee:	edd3 5a04 	vldr	s11, [r3, #16]
 800abf2:	4b57      	ldr	r3, [pc, #348]	; (800ad50 <set+0x31c>)
 800abf4:	ed93 5a05 	vldr	s10, [r3, #20]
 800abf8:	4b55      	ldr	r3, [pc, #340]	; (800ad50 <set+0x31c>)
 800abfa:	edd3 4a06 	vldr	s9, [r3, #24]
 800abfe:	4851      	ldr	r0, [pc, #324]	; (800ad44 <set+0x310>)
 800ac00:	eef0 3a64 	vmov.f32	s7, s9
 800ac04:	eeb0 3a45 	vmov.f32	s6, s10
 800ac08:	eef0 2a65 	vmov.f32	s5, s11
 800ac0c:	eeb0 2a46 	vmov.f32	s4, s12
 800ac10:	eef0 1a66 	vmov.f32	s3, s13
 800ac14:	eeb0 1a47 	vmov.f32	s2, s14
 800ac18:	eef0 0a67 	vmov.f32	s1, s15
 800ac1c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800ad30 <set+0x2fc>
 800ac20:	f7fa fab6 	bl	8005190 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800ac24:	4a4b      	ldr	r2, [pc, #300]	; (800ad54 <set+0x320>)
 800ac26:	f107 030c 	add.w	r3, r7, #12
 800ac2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800ac30:	4a48      	ldr	r2, [pc, #288]	; (800ad54 <set+0x320>)
 800ac32:	463b      	mov	r3, r7
 800ac34:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800ac3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac3e:	ed97 7a04 	vldr	s14, [r7, #16]
 800ac42:	edd7 6a05 	vldr	s13, [r7, #20]
 800ac46:	4b44      	ldr	r3, [pc, #272]	; (800ad58 <set+0x324>)
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4b44      	ldr	r3, [pc, #272]	; (800ad5c <set+0x328>)
 800ac4c:	4a44      	ldr	r2, [pc, #272]	; (800ad60 <set+0x32c>)
 800ac4e:	492d      	ldr	r1, [pc, #180]	; (800ad04 <set+0x2d0>)
 800ac50:	4844      	ldr	r0, [pc, #272]	; (800ad64 <set+0x330>)
 800ac52:	eef0 1a66 	vmov.f32	s3, s13
 800ac56:	eeb0 1a47 	vmov.f32	s2, s14
 800ac5a:	eef0 0a67 	vmov.f32	s1, s15
 800ac5e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800ad30 <set+0x2fc>
 800ac62:	f7f6 f9c3 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800ac66:	483c      	ldr	r0, [pc, #240]	; (800ad58 <set+0x324>)
 800ac68:	f7f6 f9ed 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800ac6c:	edd7 7a00 	vldr	s15, [r7]
 800ac70:	ed97 7a01 	vldr	s14, [r7, #4]
 800ac74:	edd7 6a02 	vldr	s13, [r7, #8]
 800ac78:	4b3b      	ldr	r3, [pc, #236]	; (800ad68 <set+0x334>)
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <set+0x338>)
 800ac7e:	4a3c      	ldr	r2, [pc, #240]	; (800ad70 <set+0x33c>)
 800ac80:	491f      	ldr	r1, [pc, #124]	; (800ad00 <set+0x2cc>)
 800ac82:	483c      	ldr	r0, [pc, #240]	; (800ad74 <set+0x340>)
 800ac84:	eef0 1a66 	vmov.f32	s3, s13
 800ac88:	eeb0 1a47 	vmov.f32	s2, s14
 800ac8c:	eef0 0a67 	vmov.f32	s1, s15
 800ac90:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800ad30 <set+0x2fc>
 800ac94:	f7f6 f9aa 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ac98:	4833      	ldr	r0, [pc, #204]	; (800ad68 <set+0x334>)
 800ac9a:	f7f6 f9d4 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800ac9e:	4936      	ldr	r1, [pc, #216]	; (800ad78 <set+0x344>)
 800aca0:	206f      	movs	r0, #111	; 0x6f
 800aca2:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800ad7c <set+0x348>
 800aca6:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800acaa:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800ad80 <set+0x34c>
 800acae:	f002 fd0d 	bl	800d6cc <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800acb2:	4934      	ldr	r1, [pc, #208]	; (800ad84 <set+0x350>)
 800acb4:	2070      	movs	r0, #112	; 0x70
 800acb6:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ad7c <set+0x348>
 800acba:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800acbe:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ad80 <set+0x34c>
 800acc2:	f002 fd03 	bl	800d6cc <VESCInit>
}
 800acc6:	bf00      	nop
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20006b88 	.word	0x20006b88
 800acd4:	2000a014 	.word	0x2000a014
 800acd8:	20005ef4 	.word	0x20005ef4
 800acdc:	3dcccccd 	.word	0x3dcccccd
 800ace0:	20009030 	.word	0x20009030
 800ace4:	20005ff8 	.word	0x20005ff8
 800ace8:	20009f30 	.word	0x20009f30
 800acec:	40020400 	.word	0x40020400
 800acf0:	20005ca8 	.word	0x20005ca8
 800acf4:	2000786c 	.word	0x2000786c
 800acf8:	20006cc4 	.word	0x20006cc4
 800acfc:	2000996c 	.word	0x2000996c
 800ad00:	20009808 	.word	0x20009808
 800ad04:	200099b4 	.word	0x200099b4
 800ad08:	c3340000 	.word	0xc3340000
 800ad0c:	3f333333 	.word	0x3f333333
 800ad10:	3e4ccccd 	.word	0x3e4ccccd
 800ad14:	3d4ccccd 	.word	0x3d4ccccd
 800ad18:	20005bc4 	.word	0x20005bc4
 800ad1c:	20006c68 	.word	0x20006c68
 800ad20:	20009810 	.word	0x20009810
 800ad24:	20007350 	.word	0x20007350
 800ad28:	200064d8 	.word	0x200064d8
 800ad2c:	20000000 	.word	0x20000000
 800ad30:	3ba3d70a 	.word	0x3ba3d70a
 800ad34:	20008eb4 	.word	0x20008eb4
 800ad38:	20006880 	.word	0x20006880
 800ad3c:	2000a010 	.word	0x2000a010
 800ad40:	20000038 	.word	0x20000038
 800ad44:	20009f58 	.word	0x20009f58
 800ad48:	20006b00 	.word	0x20006b00
 800ad4c:	20009dac 	.word	0x20009dac
 800ad50:	2000001c 	.word	0x2000001c
 800ad54:	0801fdb8 	.word	0x0801fdb8
 800ad58:	2000a300 	.word	0x2000a300
 800ad5c:	20006638 	.word	0x20006638
 800ad60:	2000986c 	.word	0x2000986c
 800ad64:	20006914 	.word	0x20006914
 800ad68:	200077d4 	.word	0x200077d4
 800ad6c:	2000720c 	.word	0x2000720c
 800ad70:	20006bdc 	.word	0x20006bdc
 800ad74:	2000a324 	.word	0x2000a324
 800ad78:	20006b04 	.word	0x20006b04
 800ad7c:	3e19999a 	.word	0x3e19999a
 800ad80:	4708b800 	.word	0x4708b800
 800ad84:	2000997c 	.word	0x2000997c

0800ad88 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af06      	add	r7, sp, #24
 800ad8e:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800ad90:	49a9      	ldr	r1, [pc, #676]	; (800b038 <RNS_config+0x2b0>)
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7fe fb34 	bl	8009400 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00001101, (float) fwd_omni,
 800ad98:	f04f 0200 	mov.w	r2, #0
 800ad9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ada0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adac:	e9cd 2300 	strd	r2, r3, [sp]
 800adb0:	f04f 0200 	mov.w	r2, #0
 800adb4:	4ba1      	ldr	r3, [pc, #644]	; (800b03c <RNS_config+0x2b4>)
 800adb6:	2124      	movs	r1, #36	; 0x24
 800adb8:	489f      	ldr	r0, [pc, #636]	; (800b038 <RNS_config+0x2b0>)
 800adba:	f7fe fc9f 	bl	80096fc <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800adbe:	f04f 0200 	mov.w	r2, #0
 800adc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adca:	a37d      	add	r3, pc, #500	; (adr r3, 800afc0 <RNS_config+0x238>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800addc:	e9cd 2300 	strd	r2, r3, [sp]
 800ade0:	a377      	add	r3, pc, #476	; (adr r3, 800afc0 <RNS_config+0x238>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	2149      	movs	r1, #73	; 0x49
 800ade8:	4893      	ldr	r0, [pc, #588]	; (800b038 <RNS_config+0x2b0>)
 800adea:	f7fe fc87 	bl	80096fc <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800adee:	a376      	add	r3, pc, #472	; (adr r3, 800afc8 <RNS_config+0x240>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	e9cd 2300 	strd	r2, r3, [sp]
 800adf8:	a375      	add	r3, pc, #468	; (adr r3, 800afd0 <RNS_config+0x248>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	211f      	movs	r1, #31
 800ae00:	488d      	ldr	r0, [pc, #564]	; (800b038 <RNS_config+0x2b0>)
 800ae02:	f7fe fc7b 	bl	80096fc <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800ae06:	a374      	add	r3, pc, #464	; (adr r3, 800afd8 <RNS_config+0x250>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae10:	a373      	add	r3, pc, #460	; (adr r3, 800afe0 <RNS_config+0x258>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	2120      	movs	r1, #32
 800ae18:	4887      	ldr	r0, [pc, #540]	; (800b038 <RNS_config+0x2b0>)
 800ae1a:	f7fe fc6f 	bl	80096fc <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800ae1e:	a372      	add	r3, pc, #456	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae28:	a371      	add	r3, pc, #452	; (adr r3, 800aff0 <RNS_config+0x268>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae32:	f04f 0200 	mov.w	r2, #0
 800ae36:	4b82      	ldr	r3, [pc, #520]	; (800b040 <RNS_config+0x2b8>)
 800ae38:	212b      	movs	r1, #43	; 0x2b
 800ae3a:	487f      	ldr	r0, [pc, #508]	; (800b038 <RNS_config+0x2b0>)
 800ae3c:	f7fe fc5e 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800ae40:	a369      	add	r3, pc, #420	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae4a:	a36b      	add	r3, pc, #428	; (adr r3, 800aff8 <RNS_config+0x270>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	e9cd 2300 	strd	r2, r3, [sp]
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	4b79      	ldr	r3, [pc, #484]	; (800b040 <RNS_config+0x2b8>)
 800ae5a:	212c      	movs	r1, #44	; 0x2c
 800ae5c:	4876      	ldr	r0, [pc, #472]	; (800b038 <RNS_config+0x2b0>)
 800ae5e:	f7fe fc4d 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800ae62:	a361      	add	r3, pc, #388	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae6c:	a364      	add	r3, pc, #400	; (adr r3, 800b000 <RNS_config+0x278>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9cd 2300 	strd	r2, r3, [sp]
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	4b71      	ldr	r3, [pc, #452]	; (800b040 <RNS_config+0x2b8>)
 800ae7c:	212d      	movs	r1, #45	; 0x2d
 800ae7e:	486e      	ldr	r0, [pc, #440]	; (800b038 <RNS_config+0x2b0>)
 800ae80:	f7fe fc3c 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800ae84:	a358      	add	r3, pc, #352	; (adr r3, 800afe8 <RNS_config+0x260>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae8e:	a35e      	add	r3, pc, #376	; (adr r3, 800b008 <RNS_config+0x280>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	e9cd 2300 	strd	r2, r3, [sp]
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	4b68      	ldr	r3, [pc, #416]	; (800b040 <RNS_config+0x2b8>)
 800ae9e:	212e      	movs	r1, #46	; 0x2e
 800aea0:	4865      	ldr	r0, [pc, #404]	; (800b038 <RNS_config+0x2b0>)
 800aea2:	f7fe fc2b 	bl	80096fc <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aea6:	a35a      	add	r3, pc, #360	; (adr r3, 800b010 <RNS_config+0x288>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeb0:	f04f 0200 	mov.w	r2, #0
 800aeb4:	4b63      	ldr	r3, [pc, #396]	; (800b044 <RNS_config+0x2bc>)
 800aeb6:	e9cd 2300 	strd	r2, r3, [sp]
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	4b60      	ldr	r3, [pc, #384]	; (800b040 <RNS_config+0x2b8>)
 800aec0:	212f      	movs	r1, #47	; 0x2f
 800aec2:	485d      	ldr	r0, [pc, #372]	; (800b038 <RNS_config+0x2b0>)
 800aec4:	f7fe fc1a 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aec8:	a351      	add	r3, pc, #324	; (adr r3, 800b010 <RNS_config+0x288>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	4b5b      	ldr	r3, [pc, #364]	; (800b044 <RNS_config+0x2bc>)
 800aed8:	e9cd 2300 	strd	r2, r3, [sp]
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	4b57      	ldr	r3, [pc, #348]	; (800b040 <RNS_config+0x2b8>)
 800aee2:	2130      	movs	r1, #48	; 0x30
 800aee4:	4854      	ldr	r0, [pc, #336]	; (800b038 <RNS_config+0x2b0>)
 800aee6:	f7fe fc09 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800aeea:	a349      	add	r3, pc, #292	; (adr r3, 800b010 <RNS_config+0x288>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	4b52      	ldr	r3, [pc, #328]	; (800b044 <RNS_config+0x2bc>)
 800aefa:	e9cd 2300 	strd	r2, r3, [sp]
 800aefe:	f04f 0200 	mov.w	r2, #0
 800af02:	4b4f      	ldr	r3, [pc, #316]	; (800b040 <RNS_config+0x2b8>)
 800af04:	2131      	movs	r1, #49	; 0x31
 800af06:	484c      	ldr	r0, [pc, #304]	; (800b038 <RNS_config+0x2b0>)
 800af08:	f7fe fbf8 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800af0c:	a340      	add	r3, pc, #256	; (adr r3, 800b010 <RNS_config+0x288>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af16:	f04f 0200 	mov.w	r2, #0
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <RNS_config+0x2bc>)
 800af1c:	e9cd 2300 	strd	r2, r3, [sp]
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	4b46      	ldr	r3, [pc, #280]	; (800b040 <RNS_config+0x2b8>)
 800af26:	2132      	movs	r1, #50	; 0x32
 800af28:	4843      	ldr	r0, [pc, #268]	; (800b038 <RNS_config+0x2b0>)
 800af2a:	f7fe fbe7 	bl	80096fc <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800af2e:	2116      	movs	r1, #22
 800af30:	4841      	ldr	r0, [pc, #260]	; (800b038 <RNS_config+0x2b0>)
 800af32:	f7fe fbe3 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	4b43      	ldr	r3, [pc, #268]	; (800b048 <RNS_config+0x2c0>)
 800af3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af40:	f04f 0200 	mov.w	r2, #0
 800af44:	4b40      	ldr	r3, [pc, #256]	; (800b048 <RNS_config+0x2c0>)
 800af46:	e9cd 2300 	strd	r2, r3, [sp]
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	4b3c      	ldr	r3, [pc, #240]	; (800b040 <RNS_config+0x2b8>)
 800af50:	2146      	movs	r1, #70	; 0x46
 800af52:	4839      	ldr	r0, [pc, #228]	; (800b038 <RNS_config+0x2b0>)
 800af54:	f7fe fbd2 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800af58:	a32f      	add	r3, pc, #188	; (adr r3, 800b018 <RNS_config+0x290>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af62:	a32f      	add	r3, pc, #188	; (adr r3, 800b020 <RNS_config+0x298>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	e9cd 2300 	strd	r2, r3, [sp]
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	4b35      	ldr	r3, [pc, #212]	; (800b048 <RNS_config+0x2c0>)
 800af72:	2147      	movs	r1, #71	; 0x47
 800af74:	4830      	ldr	r0, [pc, #192]	; (800b038 <RNS_config+0x2b0>)
 800af76:	f7fe fbc1 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800af7a:	f04f 0200 	mov.w	r2, #0
 800af7e:	4b33      	ldr	r3, [pc, #204]	; (800b04c <RNS_config+0x2c4>)
 800af80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af84:	a328      	add	r3, pc, #160	; (adr r3, 800b028 <RNS_config+0x2a0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af8e:	a328      	add	r3, pc, #160	; (adr r3, 800b030 <RNS_config+0x2a8>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	e9cd 2300 	strd	r2, r3, [sp]
 800af98:	f04f 0200 	mov.w	r2, #0
 800af9c:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <RNS_config+0x2c0>)
 800af9e:	214f      	movs	r1, #79	; 0x4f
 800afa0:	4825      	ldr	r0, [pc, #148]	; (800b038 <RNS_config+0x2b0>)
 800afa2:	f7fe fbab 	bl	80096fc <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	4b29      	ldr	r3, [pc, #164]	; (800b050 <RNS_config+0x2c8>)
 800afac:	211d      	movs	r1, #29
 800afae:	4822      	ldr	r0, [pc, #136]	; (800b038 <RNS_config+0x2b0>)
 800afb0:	f7fe fba4 	bl	80096fc <RNSSet>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	f3af 8000 	nop.w
 800afc0:	b9727cf5 	.word	0xb9727cf5
 800afc4:	3f049766 	.word	0x3f049766
 800afc8:	a0000000 	.word	0xa0000000
 800afcc:	3f564e14 	.word	0x3f564e14
 800afd0:	d7a1868c 	.word	0xd7a1868c
 800afd4:	3ff1f604 	.word	0x3ff1f604
 800afd8:	00000000 	.word	0x00000000
 800afdc:	3f58fd94 	.word	0x3f58fd94
 800afe0:	7c2c0ed1 	.word	0x7c2c0ed1
 800afe4:	3ff00652 	.word	0x3ff00652
 800afe8:	00000000 	.word	0x00000000
 800afec:	40d387c0 	.word	0x40d387c0
 800aff0:	6b29aca7 	.word	0x6b29aca7
 800aff4:	3fc29aca 	.word	0x3fc29aca
 800aff8:	dd1e2705 	.word	0xdd1e2705
 800affc:	3fbd8faa 	.word	0x3fbd8faa
 800b000:	b34c0e3d 	.word	0xb34c0e3d
 800b004:	3fc02e9a 	.word	0x3fc02e9a
 800b008:	21d938da 	.word	0x21d938da
 800b00c:	3fc06e6b 	.word	0x3fc06e6b
 800b010:	d2f1a9fc 	.word	0xd2f1a9fc
 800b014:	3f50624d 	.word	0x3f50624d
 800b018:	66666666 	.word	0x66666666
 800b01c:	3fe66666 	.word	0x3fe66666
 800b020:	9999999a 	.word	0x9999999a
 800b024:	3fb99999 	.word	0x3fb99999
 800b028:	9999999a 	.word	0x9999999a
 800b02c:	3fc99999 	.word	0x3fc99999
 800b030:	9999999a 	.word	0x9999999a
 800b034:	3fa99999 	.word	0x3fa99999
 800b038:	20008f08 	.word	0x20008f08
 800b03c:	402a0000 	.word	0x402a0000
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	3ff80000 	.word	0x3ff80000
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	40160000 	.word	0x40160000
 800b050:	40240000 	.word	0x40240000

0800b054 <RobotStart>:
	}

}

void RobotStart()
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
	before = 0;
 800b058:	4b33      	ldr	r3, [pc, #204]	; (800b128 <RobotStart+0xd4>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
	mode = 1;
 800b05e:	4b33      	ldr	r3, [pc, #204]	; (800b12c <RobotStart+0xd8>)
 800b060:	2201      	movs	r2, #1
 800b062:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800b064:	4b32      	ldr	r3, [pc, #200]	; (800b130 <RobotStart+0xdc>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800b06a:	4b32      	ldr	r3, [pc, #200]	; (800b134 <RobotStart+0xe0>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800b070:	4b31      	ldr	r3, [pc, #196]	; (800b138 <RobotStart+0xe4>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800b076:	4b31      	ldr	r3, [pc, #196]	; (800b13c <RobotStart+0xe8>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800b07c:	4b30      	ldr	r3, [pc, #192]	; (800b140 <RobotStart+0xec>)
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
	blue = 1;
 800b082:	4b30      	ldr	r3, [pc, #192]	; (800b144 <RobotStart+0xf0>)
 800b084:	2201      	movs	r2, #1
 800b086:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800b088:	4b2f      	ldr	r3, [pc, #188]	; (800b148 <RobotStart+0xf4>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800b08e:	4b2f      	ldr	r3, [pc, #188]	; (800b14c <RobotStart+0xf8>)
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800b094:	4b2e      	ldr	r3, [pc, #184]	; (800b150 <RobotStart+0xfc>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800b09a:	4a2e      	ldr	r2, [pc, #184]	; (800b154 <RobotStart+0x100>)
 800b09c:	7f13      	ldrb	r3, [r2, #28]
 800b09e:	f36f 1386 	bfc	r3, #6, #1
 800b0a2:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800b0a4:	4b2c      	ldr	r3, [pc, #176]	; (800b158 <RobotStart+0x104>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
	up_done = 0;
 800b0aa:	4b2c      	ldr	r3, [pc, #176]	; (800b15c <RobotStart+0x108>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800b0b0:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <RobotStart+0x10c>)
 800b0b2:	2264      	movs	r2, #100	; 0x64
 800b0b4:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800b0b6:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <RobotStart+0x110>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
	reload = 0;
 800b0bc:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <RobotStart+0x114>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <RobotStart+0x118>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800b0c8:	4b29      	ldr	r3, [pc, #164]	; (800b170 <RobotStart+0x11c>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800b0ce:	4b29      	ldr	r3, [pc, #164]	; (800b174 <RobotStart+0x120>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800b0d4:	4b28      	ldr	r3, [pc, #160]	; (800b178 <RobotStart+0x124>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800b0da:	4b28      	ldr	r3, [pc, #160]	; (800b17c <RobotStart+0x128>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800b0e0:	4b27      	ldr	r3, [pc, #156]	; (800b180 <RobotStart+0x12c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
	pick_enc_buf = 0;
 800b0e6:	4b27      	ldr	r3, [pc, #156]	; (800b184 <RobotStart+0x130>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
	vesc_speed = 0;
 800b0ec:	4b26      	ldr	r3, [pc, #152]	; (800b188 <RobotStart+0x134>)
 800b0ee:	f04f 0200 	mov.w	r2, #0
 800b0f2:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <RobotStart+0x138>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
	pick_left_manual = 0;
 800b0fa:	4b25      	ldr	r3, [pc, #148]	; (800b190 <RobotStart+0x13c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
	load_adjust = 1;
 800b100:	4b24      	ldr	r3, [pc, #144]	; (800b194 <RobotStart+0x140>)
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
	adjust_count = 0;
 800b106:	4b24      	ldr	r3, [pc, #144]	; (800b198 <RobotStart+0x144>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
	type_3_done = 0;
 800b10c:	4b23      	ldr	r3, [pc, #140]	; (800b19c <RobotStart+0x148>)
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800b112:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <RobotStart+0x14c>)
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
	cylinder_load_once = 0;
 800b118:	4b22      	ldr	r3, [pc, #136]	; (800b1a4 <RobotStart+0x150>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
}
 800b11e:	bf00      	nop
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	2000729c 	.word	0x2000729c
 800b12c:	200092d0 	.word	0x200092d0
 800b130:	20009868 	.word	0x20009868
 800b134:	20008f7c 	.word	0x20008f7c
 800b138:	200092cc 	.word	0x200092cc
 800b13c:	20007858 	.word	0x20007858
 800b140:	20009672 	.word	0x20009672
 800b144:	20006a1c 	.word	0x20006a1c
 800b148:	2000965c 	.word	0x2000965c
 800b14c:	200097fc 	.word	0x200097fc
 800b150:	20007214 	.word	0x20007214
 800b154:	2000959c 	.word	0x2000959c
 800b158:	20007730 	.word	0x20007730
 800b15c:	20007860 	.word	0x20007860
 800b160:	200072b4 	.word	0x200072b4
 800b164:	20009028 	.word	0x20009028
 800b168:	2000774c 	.word	0x2000774c
 800b16c:	20009978 	.word	0x20009978
 800b170:	20007348 	.word	0x20007348
 800b174:	20007484 	.word	0x20007484
 800b178:	200064dc 	.word	0x200064dc
 800b17c:	20009428 	.word	0x20009428
 800b180:	2000a5e0 	.word	0x2000a5e0
 800b184:	20009c40 	.word	0x20009c40
 800b188:	2000659c 	.word	0x2000659c
 800b18c:	200072bc 	.word	0x200072bc
 800b190:	200099a8 	.word	0x200099a8
 800b194:	2000943c 	.word	0x2000943c
 800b198:	20009474 	.word	0x20009474
 800b19c:	20009434 	.word	0x20009434
 800b1a0:	20009d90 	.word	0x20009d90
 800b1a4:	2000a570 	.word	0x2000a570

0800b1a8 <NormalControl>:

void NormalControl()
{
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b096      	sub	sp, #88	; 0x58
 800b1ac:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800b1ae:	4b8f      	ldr	r3, [pc, #572]	; (800b3ec <NormalControl+0x244>)
 800b1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b6:	d10a      	bne.n	800b1ce <NormalControl+0x26>
	{
		while (ps4.button == OPTION);
 800b1b8:	bf00      	nop
 800b1ba:	4b8c      	ldr	r3, [pc, #560]	; (800b3ec <NormalControl+0x244>)
 800b1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c2:	d0fa      	beq.n	800b1ba <NormalControl+0x12>
		ResetPickEnc();
 800b1c4:	f001 f916 	bl	800c3f4 <ResetPickEnc>
		mode = AUTO;
 800b1c8:	4b89      	ldr	r3, [pc, #548]	; (800b3f0 <NormalControl+0x248>)
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
//		pick_0 = 1;
//		pick_down;
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800b1ce:	4b87      	ldr	r3, [pc, #540]	; (800b3ec <NormalControl+0x244>)
 800b1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d6:	d11e      	bne.n	800b216 <NormalControl+0x6e>
	{
		while (ps4.button == TRIANGLE);
 800b1d8:	bf00      	nop
 800b1da:	4b84      	ldr	r3, [pc, #528]	; (800b3ec <NormalControl+0x244>)
 800b1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e2:	d0fa      	beq.n	800b1da <NormalControl+0x32>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		ResetCoordinate();
 800b1e4:	f001 f8f6 	bl	800c3d4 <ResetCoordinate>
		lidar.pos = POS_PENDING;
 800b1e8:	4b82      	ldr	r3, [pc, #520]	; (800b3f4 <NormalControl+0x24c>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = POS_PENDING;
 800b1f0:	4b80      	ldr	r3, [pc, #512]	; (800b3f4 <NormalControl+0x24c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		pick_right = 1;
 800b1f8:	4b7f      	ldr	r3, [pc, #508]	; (800b3f8 <NormalControl+0x250>)
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]
		vesc_speed = 4;
 800b1fe:	4b7f      	ldr	r3, [pc, #508]	; (800b3fc <NormalControl+0x254>)
 800b200:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b204:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800b206:	4a7e      	ldr	r2, [pc, #504]	; (800b400 <NormalControl+0x258>)
 800b208:	7f13      	ldrb	r3, [r2, #28]
 800b20a:	f36f 1386 	bfc	r3, #6, #1
 800b20e:	7713      	strb	r3, [r2, #28]
		mode = AUTO;
 800b210:	4b77      	ldr	r3, [pc, #476]	; (800b3f0 <NormalControl+0x248>)
 800b212:	2201      	movs	r2, #1
 800b214:	601a      	str	r2, [r3, #0]
	}

	// Servo
	if(ps4.button == SQUARE)
 800b216:	4b75      	ldr	r3, [pc, #468]	; (800b3ec <NormalControl+0x244>)
 800b218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b21a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21e:	d123      	bne.n	800b268 <NormalControl+0xc0>
	{
		while(ps4.button == SQUARE);
 800b220:	bf00      	nop
 800b222:	4b72      	ldr	r3, [pc, #456]	; (800b3ec <NormalControl+0x244>)
 800b224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b22a:	d0fa      	beq.n	800b222 <NormalControl+0x7a>
		if(!pp.pp_start)
 800b22c:	4b75      	ldr	r3, [pc, #468]	; (800b404 <NormalControl+0x25c>)
 800b22e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d112      	bne.n	800b262 <NormalControl+0xba>
		{
			static int counter = 0;

			if(counter == 0)
 800b23c:	4b72      	ldr	r3, [pc, #456]	; (800b408 <NormalControl+0x260>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d108      	bne.n	800b256 <NormalControl+0xae>
			{
				counter++;
 800b244:	4b70      	ldr	r3, [pc, #448]	; (800b408 <NormalControl+0x260>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3301      	adds	r3, #1
 800b24a:	4a6f      	ldr	r2, [pc, #444]	; (800b408 <NormalControl+0x260>)
 800b24c:	6013      	str	r3, [r2, #0]
				blue = 0;
 800b24e:	4b6f      	ldr	r3, [pc, #444]	; (800b40c <NormalControl+0x264>)
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e005      	b.n	800b262 <NormalControl+0xba>
			}
			else
			{
				blue = 1;
 800b256:	4b6d      	ldr	r3, [pc, #436]	; (800b40c <NormalControl+0x264>)
 800b258:	2201      	movs	r2, #1
 800b25a:	601a      	str	r2, [r3, #0]
				counter = 0;
 800b25c:	4b6a      	ldr	r3, [pc, #424]	; (800b408 <NormalControl+0x260>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
			}
		}
		mode = AUTO;
 800b262:	4b63      	ldr	r3, [pc, #396]	; (800b3f0 <NormalControl+0x248>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800b268:	4b60      	ldr	r3, [pc, #384]	; (800b3ec <NormalControl+0x244>)
 800b26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d112      	bne.n	800b296 <NormalControl+0xee>
	{
		while(ps4.button == UP);
 800b270:	bf00      	nop
 800b272:	4b5e      	ldr	r3, [pc, #376]	; (800b3ec <NormalControl+0x244>)
 800b274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b276:	2b10      	cmp	r3, #16
 800b278:	d0fb      	beq.n	800b272 <NormalControl+0xca>
		if(type_3_done)
 800b27a:	4b65      	ldr	r3, [pc, #404]	; (800b410 <NormalControl+0x268>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <NormalControl+0xe2>
			type_3_done = 0;
 800b282:	4b63      	ldr	r3, [pc, #396]	; (800b410 <NormalControl+0x268>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e002      	b.n	800b290 <NormalControl+0xe8>
		else
			type_3_done = 1;
 800b28a:	4b61      	ldr	r3, [pc, #388]	; (800b410 <NormalControl+0x268>)
 800b28c:	2201      	movs	r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
		mode = AUTO;
 800b290:	4b57      	ldr	r3, [pc, #348]	; (800b3f0 <NormalControl+0x248>)
 800b292:	2201      	movs	r2, #1
 800b294:	601a      	str	r2, [r3, #0]
	}

	// Shoot
	if(ps4.button == CROSS)
 800b296:	4b55      	ldr	r3, [pc, #340]	; (800b3ec <NormalControl+0x244>)
 800b298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b29e:	d13d      	bne.n	800b31c <NormalControl+0x174>
	{
		while(ps4.button == CROSS);
 800b2a0:	bf00      	nop
 800b2a2:	4b52      	ldr	r3, [pc, #328]	; (800b3ec <NormalControl+0x244>)
 800b2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2aa:	d0fa      	beq.n	800b2a2 <NormalControl+0xfa>
		static int counter = 0;

		if(counter == 0)
 800b2ac:	4b59      	ldr	r3, [pc, #356]	; (800b414 <NormalControl+0x26c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11b      	bne.n	800b2ec <NormalControl+0x144>
		{
			lidar.pos = CENTER_4;
 800b2b4:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <NormalControl+0x24c>)
 800b2b6:	2207      	movs	r2, #7
 800b2b8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_4;
 800b2bc:	4b4d      	ldr	r3, [pc, #308]	; (800b3f4 <NormalControl+0x24c>)
 800b2be:	2207      	movs	r2, #7
 800b2c0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			vesc_duty = type1Duty;
 800b2c4:	4b54      	ldr	r3, [pc, #336]	; (800b418 <NormalControl+0x270>)
 800b2c6:	4a55      	ldr	r2, [pc, #340]	; (800b41c <NormalControl+0x274>)
 800b2c8:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b2ca:	4b4c      	ldr	r3, [pc, #304]	; (800b3fc <NormalControl+0x254>)
 800b2cc:	4a54      	ldr	r2, [pc, #336]	; (800b420 <NormalControl+0x278>)
 800b2ce:	601a      	str	r2, [r3, #0]
			led7_on;
 800b2d0:	4b54      	ldr	r3, [pc, #336]	; (800b424 <NormalControl+0x27c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b2d8:	63da      	str	r2, [r3, #60]	; 0x3c
			mode = AUTO;
 800b2da:	4b45      	ldr	r3, [pc, #276]	; (800b3f0 <NormalControl+0x248>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
			counter++;
 800b2e0:	4b4c      	ldr	r3, [pc, #304]	; (800b414 <NormalControl+0x26c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a4b      	ldr	r2, [pc, #300]	; (800b414 <NormalControl+0x26c>)
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	e017      	b.n	800b31c <NormalControl+0x174>
		}
		else
		{
			lidar.pos = CENTER_1;
 800b2ec:	4b41      	ldr	r3, [pc, #260]	; (800b3f4 <NormalControl+0x24c>)
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_1;
 800b2f4:	4b3f      	ldr	r3, [pc, #252]	; (800b3f4 <NormalControl+0x24c>)
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			led7_off;
 800b2fc:	4b49      	ldr	r3, [pc, #292]	; (800b424 <NormalControl+0x27c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	63da      	str	r2, [r3, #60]	; 0x3c
			vesc_speed = type1;
 800b304:	4b3d      	ldr	r3, [pc, #244]	; (800b3fc <NormalControl+0x254>)
 800b306:	4a46      	ldr	r2, [pc, #280]	; (800b420 <NormalControl+0x278>)
 800b308:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b30a:	4b43      	ldr	r3, [pc, #268]	; (800b418 <NormalControl+0x270>)
 800b30c:	4a43      	ldr	r2, [pc, #268]	; (800b41c <NormalControl+0x274>)
 800b30e:	601a      	str	r2, [r3, #0]
			mode = AUTO;
 800b310:	4b37      	ldr	r3, [pc, #220]	; (800b3f0 <NormalControl+0x248>)
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
			counter = 0;
 800b316:	4b3f      	ldr	r3, [pc, #252]	; (800b414 <NormalControl+0x26c>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
		}
	}

	// Fly wheel
	if(ps4.button == CIRCLE)
 800b31c:	4b33      	ldr	r3, [pc, #204]	; (800b3ec <NormalControl+0x244>)
 800b31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b324:	d113      	bne.n	800b34e <NormalControl+0x1a6>
	{
		while(ps4.button == CIRCLE);
 800b326:	bf00      	nop
 800b328:	4b30      	ldr	r3, [pc, #192]	; (800b3ec <NormalControl+0x244>)
 800b32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b330:	d0fa      	beq.n	800b328 <NormalControl+0x180>
//			vesc_duty = 0;
//			VESCStop(&vesc1);
//			VESCStop(&vesc2);
//			counter = 0;
//		}
		if(MODN.orientation == OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE)
 800b332:	4b3d      	ldr	r3, [pc, #244]	; (800b428 <NormalControl+0x280>)
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	2b03      	cmp	r3, #3
 800b338:	d103      	bne.n	800b342 <NormalControl+0x19a>
			setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800b33a:	2000      	movs	r0, #0
 800b33c:	f7f9 fc48 	bl	8004bd0 <setOrientationMODN>
 800b340:	e002      	b.n	800b348 <NormalControl+0x1a0>
		else
			setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800b342:	2003      	movs	r0, #3
 800b344:	f7f9 fc44 	bl	8004bd0 <setOrientationMODN>
		mode = AUTO;
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <NormalControl+0x248>)
 800b34a:	2201      	movs	r2, #1
 800b34c:	601a      	str	r2, [r3, #0]
//		setPick(800);
//		open_servo;
	}

	if(ps4.button == RIGHT)
 800b34e:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <NormalControl+0x244>)
 800b350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b352:	2b20      	cmp	r3, #32
 800b354:	d11b      	bne.n	800b38e <NormalControl+0x1e6>
	{
		while(ps4.button == RIGHT);
 800b356:	bf00      	nop
 800b358:	4b24      	ldr	r3, [pc, #144]	; (800b3ec <NormalControl+0x244>)
 800b35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d0fb      	beq.n	800b358 <NormalControl+0x1b0>
		static int counter = 0;
		counter++;
 800b360:	4b32      	ldr	r3, [pc, #200]	; (800b42c <NormalControl+0x284>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	4a31      	ldr	r2, [pc, #196]	; (800b42c <NormalControl+0x284>)
 800b368:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b36a:	4b30      	ldr	r3, [pc, #192]	; (800b42c <NormalControl+0x284>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d105      	bne.n	800b37e <NormalControl+0x1d6>
		{
			open_servo;
 800b372:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b376:	482e      	ldr	r0, [pc, #184]	; (800b430 <NormalControl+0x288>)
 800b378:	f7fe fd32 	bl	8009de0 <ServoSetPulse>
 800b37c:	e007      	b.n	800b38e <NormalControl+0x1e6>
		}
		else
		{
			close_servo;
 800b37e:	f240 3152 	movw	r1, #850	; 0x352
 800b382:	482b      	ldr	r0, [pc, #172]	; (800b430 <NormalControl+0x288>)
 800b384:	f7fe fd2c 	bl	8009de0 <ServoSetPulse>
			counter = 0;
 800b388:	4b28      	ldr	r3, [pc, #160]	; (800b42c <NormalControl+0x284>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == LEFT)
 800b38e:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <NormalControl+0x244>)
 800b390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b392:	2b80      	cmp	r3, #128	; 0x80
 800b394:	f040 8116 	bne.w	800b5c4 <NormalControl+0x41c>
	{
		while(ps4.button == LEFT);
 800b398:	bf00      	nop
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <NormalControl+0x244>)
 800b39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b39e:	2b80      	cmp	r3, #128	; 0x80
 800b3a0:	d0fb      	beq.n	800b39a <NormalControl+0x1f2>
//		else
//			pick_right = 1;

//		pick_left = 1;
//		pick_left_manual = 1;
		ResetCoordinate();
 800b3a2:	f001 f817 	bl	800c3d4 <ResetCoordinate>
		lidar.pos = PICK_LEFT;
 800b3a6:	4b13      	ldr	r3, [pc, #76]	; (800b3f4 <NormalControl+0x24c>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800b3ae:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <NormalControl+0x24c>)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		cylinder_retract;
 800b3b6:	4a12      	ldr	r2, [pc, #72]	; (800b400 <NormalControl+0x258>)
 800b3b8:	7f13      	ldrb	r3, [r2, #28]
 800b3ba:	f36f 1386 	bfc	r3, #6, #1
 800b3be:	7713      	strb	r3, [r2, #28]
		vesc_speed = 4;
 800b3c0:	4b0e      	ldr	r3, [pc, #56]	; (800b3fc <NormalControl+0x254>)
 800b3c2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b3c6:	601a      	str	r2, [r3, #0]
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <NormalControl+0x28c>)
 800b3ca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800b3ce:	461d      	mov	r5, r3
 800b3d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b3d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800b3dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b3e0:	4a08      	ldr	r2, [pc, #32]	; (800b404 <NormalControl+0x25c>)
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fa face 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800b3ea:	e046      	b.n	800b47a <NormalControl+0x2d2>
 800b3ec:	2000a014 	.word	0x2000a014
 800b3f0:	200092d0 	.word	0x200092d0
 800b3f4:	20009030 	.word	0x20009030
 800b3f8:	2000a624 	.word	0x2000a624
 800b3fc:	2000659c 	.word	0x2000659c
 800b400:	2000959c 	.word	0x2000959c
 800b404:	20006cc4 	.word	0x20006cc4
 800b408:	200002d4 	.word	0x200002d4
 800b40c:	20006a1c 	.word	0x20006a1c
 800b410:	20009434 	.word	0x20009434
 800b414:	200002d8 	.word	0x200002d8
 800b418:	20007380 	.word	0x20007380
 800b41c:	3e2e147b 	.word	0x3e2e147b
 800b420:	40966666 	.word	0x40966666
 800b424:	20005ca8 	.word	0x20005ca8
 800b428:	20006a6c 	.word	0x20006a6c
 800b42c:	200002dc 	.word	0x200002dc
 800b430:	2000786c 	.word	0x2000786c
 800b434:	0801fdc4 	.word	0x0801fdc4
		{
			if(ps4.button == SQUARE)
 800b438:	4b7f      	ldr	r3, [pc, #508]	; (800b638 <NormalControl+0x490>)
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b440:	d108      	bne.n	800b454 <NormalControl+0x2ac>
			{
				while(ps4.button == SQUARE);
 800b442:	bf00      	nop
 800b444:	4b7c      	ldr	r3, [pc, #496]	; (800b638 <NormalControl+0x490>)
 800b446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b44c:	d0fa      	beq.n	800b444 <NormalControl+0x29c>
				PP_stop(&pp);
 800b44e:	487b      	ldr	r0, [pc, #492]	; (800b63c <NormalControl+0x494>)
 800b450:	f7fa fcd3 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800b454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b458:	4879      	ldr	r0, [pc, #484]	; (800b640 <NormalControl+0x498>)
 800b45a:	f006 ff95 	bl	8012388 <HAL_GPIO_ReadPin>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <NormalControl+0x2cc>
 800b464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b468:	4875      	ldr	r0, [pc, #468]	; (800b640 <NormalControl+0x498>)
 800b46a:	f006 ff8d 	bl	8012388 <HAL_GPIO_ReadPin>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <NormalControl+0x2d2>
				PP_stop(&pp);
 800b474:	4871      	ldr	r0, [pc, #452]	; (800b63c <NormalControl+0x494>)
 800b476:	f7fa fcc0 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800b47a:	4b70      	ldr	r3, [pc, #448]	; (800b63c <NormalControl+0x494>)
 800b47c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1d6      	bne.n	800b438 <NormalControl+0x290>
		}
		pick_left = 0;
 800b48a:	4b6e      	ldr	r3, [pc, #440]	; (800b644 <NormalControl+0x49c>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800b490:	4b6d      	ldr	r3, [pc, #436]	; (800b648 <NormalControl+0x4a0>)
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]

		setPick(0);
 800b496:	2000      	movs	r0, #0
 800b498:	f000 fac6 	bl	800ba28 <setPick>
		ResetCoordinate();
 800b49c:	f000 ff9a 	bl	800c3d4 <ResetCoordinate>

		float pick_left_point[1][7] = {{3.3, -10, -1.5, 0, 0, 0, 0}};
 800b4a0:	4b6a      	ldr	r3, [pc, #424]	; (800b64c <NormalControl+0x4a4>)
 800b4a2:	f107 0420 	add.w	r4, r7, #32
 800b4a6:	461d      	mov	r5, r3
 800b4a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800b4b4:	f107 0320 	add.w	r3, r7, #32
 800b4b8:	4a60      	ldr	r2, [pc, #384]	; (800b63c <NormalControl+0x494>)
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fa fa62 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800b4c2:	e039      	b.n	800b538 <NormalControl+0x390>
		{
			if(pp.real_x <= -0.3)
 800b4c4:	4b5d      	ldr	r3, [pc, #372]	; (800b63c <NormalControl+0x494>)
 800b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 f83d 	bl	8000548 <__aeabi_f2d>
 800b4ce:	a356      	add	r3, pc, #344	; (adr r3, 800b628 <NormalControl+0x480>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f5 fb0c 	bl	8000af0 <__aeabi_dcmple>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <NormalControl+0x33e>
				pp.target_vel[0] = 0.45;
 800b4de:	4b57      	ldr	r3, [pc, #348]	; (800b63c <NormalControl+0x494>)
 800b4e0:	4a5b      	ldr	r2, [pc, #364]	; (800b650 <NormalControl+0x4a8>)
 800b4e2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_x <= -0.4)
 800b4e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4ea:	485a      	ldr	r0, [pc, #360]	; (800b654 <NormalControl+0x4ac>)
 800b4ec:	f006 ff4c 	bl	8012388 <HAL_GPIO_ReadPin>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10f      	bne.n	800b516 <NormalControl+0x36e>
 800b4f6:	4b51      	ldr	r3, [pc, #324]	; (800b63c <NormalControl+0x494>)
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 f824 	bl	8000548 <__aeabi_f2d>
 800b500:	a34b      	add	r3, pc, #300	; (adr r3, 800b630 <NormalControl+0x488>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f5 faf3 	bl	8000af0 <__aeabi_dcmple>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <NormalControl+0x36e>
				PP_stop(&pp);
 800b510:	484a      	ldr	r0, [pc, #296]	; (800b63c <NormalControl+0x494>)
 800b512:	f7fa fc72 	bl	8005dfa <PP_stop>

			if(ps4.button == SQUARE)
 800b516:	4b48      	ldr	r3, [pc, #288]	; (800b638 <NormalControl+0x490>)
 800b518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b51e:	d10b      	bne.n	800b538 <NormalControl+0x390>
			{
				while(ps4.button == SQUARE);
 800b520:	bf00      	nop
 800b522:	4b45      	ldr	r3, [pc, #276]	; (800b638 <NormalControl+0x490>)
 800b524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b52a:	d0fa      	beq.n	800b522 <NormalControl+0x37a>
				PP_stop(&pp);
 800b52c:	4843      	ldr	r0, [pc, #268]	; (800b63c <NormalControl+0x494>)
 800b52e:	f7fa fc64 	bl	8005dfa <PP_stop>
				picked_left = 0;
 800b532:	4b45      	ldr	r3, [pc, #276]	; (800b648 <NormalControl+0x4a0>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800b538:	4b40      	ldr	r3, [pc, #256]	; (800b63c <NormalControl+0x494>)
 800b53a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1bd      	bne.n	800b4c4 <NormalControl+0x31c>
			}
		}
		if(picked_left)
 800b548:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <NormalControl+0x4a0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d036      	beq.n	800b5be <NormalControl+0x416>
		{
			float pick_left_adjust_servo[1][7] = {{3.5, 0.5, 0, 0, 0, 0, 0}};
 800b550:	4b41      	ldr	r3, [pc, #260]	; (800b658 <NormalControl+0x4b0>)
 800b552:	1d3c      	adds	r4, r7, #4
 800b554:	461d      	mov	r5, r3
 800b556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b55e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800b562:	1d3b      	adds	r3, r7, #4
 800b564:	4a35      	ldr	r2, [pc, #212]	; (800b63c <NormalControl+0x494>)
 800b566:	2101      	movs	r1, #1
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fa fa0c 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800b56e:	e00d      	b.n	800b58c <NormalControl+0x3e4>
			{
				if(ps4.button == SQUARE)
 800b570:	4b31      	ldr	r3, [pc, #196]	; (800b638 <NormalControl+0x490>)
 800b572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b578:	d108      	bne.n	800b58c <NormalControl+0x3e4>
				{
					while(ps4.button == SQUARE);
 800b57a:	bf00      	nop
 800b57c:	4b2e      	ldr	r3, [pc, #184]	; (800b638 <NormalControl+0x490>)
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b584:	d0fa      	beq.n	800b57c <NormalControl+0x3d4>
					PP_stop(&pp);
 800b586:	482d      	ldr	r0, [pc, #180]	; (800b63c <NormalControl+0x494>)
 800b588:	f7fa fc37 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800b58c:	4b2b      	ldr	r3, [pc, #172]	; (800b63c <NormalControl+0x494>)
 800b58e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e9      	bne.n	800b570 <NormalControl+0x3c8>
				}
			}
			LoadRing();
 800b59c:	f000 fe9c 	bl	800c2d8 <LoadRing>
			close_servo;
 800b5a0:	f240 3152 	movw	r1, #850	; 0x352
 800b5a4:	482d      	ldr	r0, [pc, #180]	; (800b65c <NormalControl+0x4b4>)
 800b5a6:	f7fe fc1b 	bl	8009de0 <ServoSetPulse>
			lidar.pos_counter = CENTER_1;
 800b5aa:	4b2d      	ldr	r3, [pc, #180]	; (800b660 <NormalControl+0x4b8>)
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			AdjustRings();
 800b5b2:	f000 fed7 	bl	800c364 <AdjustRings>
//			osDelay(500);
			setSpeedMODN(5.5);
 800b5b6:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800b5ba:	f7f9 fb19 	bl	8004bf0 <setSpeedMODN>
		}
		mode = AUTO;
 800b5be:	4b29      	ldr	r3, [pc, #164]	; (800b664 <NormalControl+0x4bc>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800b5c4:	4b1c      	ldr	r3, [pc, #112]	; (800b638 <NormalControl+0x490>)
 800b5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c8:	2b40      	cmp	r3, #64	; 0x40
 800b5ca:	d10b      	bne.n	800b5e4 <NormalControl+0x43c>
	{
		while(ps4.button == DOWN);
 800b5cc:	bf00      	nop
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	; (800b638 <NormalControl+0x490>)
 800b5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d2:	2b40      	cmp	r3, #64	; 0x40
 800b5d4:	d0fb      	beq.n	800b5ce <NormalControl+0x426>
//		stick_fence = 0;
		lidar.pos_counter = PICK_RIGHT;
 800b5d6:	4b22      	ldr	r3, [pc, #136]	; (800b660 <NormalControl+0x4b8>)
 800b5d8:	2209      	movs	r2, #9
 800b5da:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		mode = AUTO;
 800b5de:	4b21      	ldr	r3, [pc, #132]	; (800b664 <NormalControl+0x4bc>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - before >= NormalMode) {
 800b5e4:	f005 f854 	bl	8010690 <HAL_GetTick>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4a1f      	ldr	r2, [pc, #124]	; (800b668 <NormalControl+0x4c0>)
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b5f4:	d314      	bcc.n	800b620 <NormalControl+0x478>
		led9= !led9;
 800b5f6:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <NormalControl+0x4c4>)
 800b5f8:	7e1b      	ldrb	r3, [r3, #24]
 800b5fa:	f003 0310 	and.w	r3, r3, #16
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	bf0c      	ite	eq
 800b604:	2301      	moveq	r3, #1
 800b606:	2300      	movne	r3, #0
 800b608:	b2d9      	uxtb	r1, r3
 800b60a:	4a18      	ldr	r2, [pc, #96]	; (800b66c <NormalControl+0x4c4>)
 800b60c:	7e13      	ldrb	r3, [r2, #24]
 800b60e:	f361 1304 	bfi	r3, r1, #4, #1
 800b612:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b614:	f005 f83c 	bl	8010690 <HAL_GetTick>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	4b12      	ldr	r3, [pc, #72]	; (800b668 <NormalControl+0x4c0>)
 800b61e:	601a      	str	r2, [r3, #0]
	}
}
 800b620:	bf00      	nop
 800b622:	3758      	adds	r7, #88	; 0x58
 800b624:	46bd      	mov	sp, r7
 800b626:	bdb0      	pop	{r4, r5, r7, pc}
 800b628:	33333333 	.word	0x33333333
 800b62c:	bfd33333 	.word	0xbfd33333
 800b630:	9999999a 	.word	0x9999999a
 800b634:	bfd99999 	.word	0xbfd99999
 800b638:	2000a014 	.word	0x2000a014
 800b63c:	20006cc4 	.word	0x20006cc4
 800b640:	40020c00 	.word	0x40020c00
 800b644:	2000785c 	.word	0x2000785c
 800b648:	200097fc 	.word	0x200097fc
 800b64c:	0801fde0 	.word	0x0801fde0
 800b650:	3ee66666 	.word	0x3ee66666
 800b654:	40021000 	.word	0x40021000
 800b658:	0801fdfc 	.word	0x0801fdfc
 800b65c:	2000786c 	.word	0x2000786c
 800b660:	20009030 	.word	0x20009030
 800b664:	200092d0 	.word	0x200092d0
 800b668:	2000729c 	.word	0x2000729c
 800b66c:	2000959c 	.word	0x2000959c

0800b670 <Auto>:

void Auto() {
 800b670:	b5b0      	push	{r4, r5, r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800b676:	4b96      	ldr	r3, [pc, #600]	; (800b8d0 <Auto+0x260>)
 800b678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b67e:	d17b      	bne.n	800b778 <Auto+0x108>
	{
		while(ps4.button == OPTION);
 800b680:	bf00      	nop
 800b682:	4b93      	ldr	r3, [pc, #588]	; (800b8d0 <Auto+0x260>)
 800b684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68a:	d0fa      	beq.n	800b682 <Auto+0x12>

		static int counter = 0;
		counter++;
 800b68c:	4b91      	ldr	r3, [pc, #580]	; (800b8d4 <Auto+0x264>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	4a90      	ldr	r2, [pc, #576]	; (800b8d4 <Auto+0x264>)
 800b694:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b696:	4b8f      	ldr	r3, [pc, #572]	; (800b8d4 <Auto+0x264>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d11b      	bne.n	800b6d6 <Auto+0x66>
		{
			led_enb = 0;
 800b69e:	4b8e      	ldr	r3, [pc, #568]	; (800b8d8 <Auto+0x268>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]
			if(blue)
 800b6a4:	4b8d      	ldr	r3, [pc, #564]	; (800b8dc <Auto+0x26c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <Auto+0x4c>
			{
				vesc_speed = BlueType3;
 800b6ac:	4b8c      	ldr	r3, [pc, #560]	; (800b8e0 <Auto+0x270>)
 800b6ae:	4a8d      	ldr	r2, [pc, #564]	; (800b8e4 <Auto+0x274>)
 800b6b0:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800b6b2:	4b8d      	ldr	r3, [pc, #564]	; (800b8e8 <Auto+0x278>)
 800b6b4:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e006      	b.n	800b6ca <Auto+0x5a>
			}
			else
			{
				vesc_speed = RedType3;
 800b6bc:	4b88      	ldr	r3, [pc, #544]	; (800b8e0 <Auto+0x270>)
 800b6be:	4a8b      	ldr	r2, [pc, #556]	; (800b8ec <Auto+0x27c>)
 800b6c0:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800b6c2:	4b89      	ldr	r3, [pc, #548]	; (800b8e8 <Auto+0x278>)
 800b6c4:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800b6c8:	601a      	str	r2, [r3, #0]
			}
			led8 = 1;
 800b6ca:	4a89      	ldr	r2, [pc, #548]	; (800b8f0 <Auto+0x280>)
 800b6cc:	7e13      	ldrb	r3, [r2, #24]
 800b6ce:	f043 0320 	orr.w	r3, r3, #32
 800b6d2:	7613      	strb	r3, [r2, #24]
 800b6d4:	e050      	b.n	800b778 <Auto+0x108>
		}
		else if(counter == 2)
 800b6d6:	4b7f      	ldr	r3, [pc, #508]	; (800b8d4 <Auto+0x264>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d117      	bne.n	800b70e <Auto+0x9e>
		{
			led_enb = 1;
 800b6de:	4b7e      	ldr	r3, [pc, #504]	; (800b8d8 <Auto+0x268>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800b6e4:	4b83      	ldr	r3, [pc, #524]	; (800b8f4 <Auto+0x284>)
 800b6e6:	227d      	movs	r2, #125	; 0x7d
 800b6e8:	601a      	str	r2, [r3, #0]
			if(blue)
 800b6ea:	4b7c      	ldr	r3, [pc, #496]	; (800b8dc <Auto+0x26c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <Auto+0x90>
			{
				vesc_speed = BlueType2;
 800b6f2:	4b7b      	ldr	r3, [pc, #492]	; (800b8e0 <Auto+0x270>)
 800b6f4:	4a80      	ldr	r2, [pc, #512]	; (800b8f8 <Auto+0x288>)
 800b6f6:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800b6f8:	4b7b      	ldr	r3, [pc, #492]	; (800b8e8 <Auto+0x278>)
 800b6fa:	4a80      	ldr	r2, [pc, #512]	; (800b8fc <Auto+0x28c>)
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	e03b      	b.n	800b778 <Auto+0x108>
			}
			else
			{
				vesc_speed = RedType2;
 800b700:	4b77      	ldr	r3, [pc, #476]	; (800b8e0 <Auto+0x270>)
 800b702:	4a7f      	ldr	r2, [pc, #508]	; (800b900 <Auto+0x290>)
 800b704:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800b706:	4b78      	ldr	r3, [pc, #480]	; (800b8e8 <Auto+0x278>)
 800b708:	4a7e      	ldr	r2, [pc, #504]	; (800b904 <Auto+0x294>)
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e034      	b.n	800b778 <Auto+0x108>
			}
//			vesc_duty = 0.275;
//			vesc_speed = 8.0;
		}
		else if(counter == 3)
 800b70e:	4b71      	ldr	r3, [pc, #452]	; (800b8d4 <Auto+0x264>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d11b      	bne.n	800b74e <Auto+0xde>
		{
			led_enb = 1;
 800b716:	4b70      	ldr	r3, [pc, #448]	; (800b8d8 <Auto+0x268>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800b71c:	4b75      	ldr	r3, [pc, #468]	; (800b8f4 <Auto+0x284>)
 800b71e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b722:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.39;
 800b724:	4b70      	ldr	r3, [pc, #448]	; (800b8e8 <Auto+0x278>)
 800b726:	4a78      	ldr	r2, [pc, #480]	; (800b908 <Auto+0x298>)
 800b728:	601a      	str	r2, [r3, #0]
//			vesc_speed = 12.2;
			if(blue)
 800b72a:	4b6c      	ldr	r3, [pc, #432]	; (800b8dc <Auto+0x26c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d006      	beq.n	800b740 <Auto+0xd0>
			{
				vesc_speed = BlueOppoType2;
 800b732:	4b6b      	ldr	r3, [pc, #428]	; (800b8e0 <Auto+0x270>)
 800b734:	4a75      	ldr	r2, [pc, #468]	; (800b90c <Auto+0x29c>)
 800b736:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800b738:	4b6b      	ldr	r3, [pc, #428]	; (800b8e8 <Auto+0x278>)
 800b73a:	4a73      	ldr	r2, [pc, #460]	; (800b908 <Auto+0x298>)
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e01b      	b.n	800b778 <Auto+0x108>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800b740:	4b67      	ldr	r3, [pc, #412]	; (800b8e0 <Auto+0x270>)
 800b742:	4a73      	ldr	r2, [pc, #460]	; (800b910 <Auto+0x2a0>)
 800b744:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800b746:	4b68      	ldr	r3, [pc, #416]	; (800b8e8 <Auto+0x278>)
 800b748:	4a6f      	ldr	r2, [pc, #444]	; (800b908 <Auto+0x298>)
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e014      	b.n	800b778 <Auto+0x108>
			}
		}

		else if(counter == 4)
 800b74e:	4b61      	ldr	r3, [pc, #388]	; (800b8d4 <Auto+0x264>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b04      	cmp	r3, #4
 800b754:	d110      	bne.n	800b778 <Auto+0x108>
		{
			led_enb = 0;
 800b756:	4b60      	ldr	r3, [pc, #384]	; (800b8d8 <Auto+0x268>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b75c:	4b62      	ldr	r3, [pc, #392]	; (800b8e8 <Auto+0x278>)
 800b75e:	4a6d      	ldr	r2, [pc, #436]	; (800b914 <Auto+0x2a4>)
 800b760:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b762:	4b5f      	ldr	r3, [pc, #380]	; (800b8e0 <Auto+0x270>)
 800b764:	4a6c      	ldr	r2, [pc, #432]	; (800b918 <Auto+0x2a8>)
 800b766:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800b768:	4a61      	ldr	r2, [pc, #388]	; (800b8f0 <Auto+0x280>)
 800b76a:	7e13      	ldrb	r3, [r2, #24]
 800b76c:	f36f 1345 	bfc	r3, #5, #1
 800b770:	7613      	strb	r3, [r2, #24]
			counter = 0;
 800b772:	4b58      	ldr	r3, [pc, #352]	; (800b8d4 <Auto+0x264>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b778:	4b55      	ldr	r3, [pc, #340]	; (800b8d0 <Auto+0x260>)
 800b77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b77c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b780:	d113      	bne.n	800b7aa <Auto+0x13a>
	{
		while(ps4.button == CROSS);
 800b782:	bf00      	nop
 800b784:	4b52      	ldr	r3, [pc, #328]	; (800b8d0 <Auto+0x260>)
 800b786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b78c:	d0fa      	beq.n	800b784 <Auto+0x114>
		push_shoot;
 800b78e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b792:	4862      	ldr	r0, [pc, #392]	; (800b91c <Auto+0x2ac>)
 800b794:	f7f5 fcf9 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b798:	4b61      	ldr	r3, [pc, #388]	; (800b920 <Auto+0x2b0>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b79e:	4b61      	ldr	r3, [pc, #388]	; (800b924 <Auto+0x2b4>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
		cylinder_load_once = 1; // Only allow cylinder to load once every shot
 800b7a4:	4b60      	ldr	r3, [pc, #384]	; (800b928 <Auto+0x2b8>)
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	601a      	str	r2, [r3, #0]
//			pick_manual(5000);
//			counter = 0;
//		}
	}

	if(ps4.button == SQUARE)
 800b7aa:	4b49      	ldr	r3, [pc, #292]	; (800b8d0 <Auto+0x260>)
 800b7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b2:	d137      	bne.n	800b824 <Auto+0x1b4>
	{
		while(ps4.button == SQUARE);
 800b7b4:	bf00      	nop
 800b7b6:	4b46      	ldr	r3, [pc, #280]	; (800b8d0 <Auto+0x260>)
 800b7b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7be:	d0fa      	beq.n	800b7b6 <Auto+0x146>

		if(pp.pp_start)
 800b7c0:	4b5a      	ldr	r3, [pc, #360]	; (800b92c <Auto+0x2bc>)
 800b7c2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <Auto+0x168>
		{
			PP_stop(&pp);
 800b7d0:	4856      	ldr	r0, [pc, #344]	; (800b92c <Auto+0x2bc>)
 800b7d2:	f7fa fb12 	bl	8005dfa <PP_stop>
 800b7d6:	e025      	b.n	800b824 <Auto+0x1b4>
		}
		else
		{
			loaded = 0;
 800b7d8:	4b55      	ldr	r3, [pc, #340]	; (800b930 <Auto+0x2c0>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.0;
 800b7de:	4b42      	ldr	r3, [pc, #264]	; (800b8e8 <Auto+0x278>)
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
			flywheelStop();
 800b7e6:	f001 f94d 	bl	800ca84 <flywheelStop>
			setPick(500);
 800b7ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b7ee:	f000 f91b 	bl	800ba28 <setPick>
			cylinder_load;
 800b7f2:	4a3f      	ldr	r2, [pc, #252]	; (800b8f0 <Auto+0x280>)
 800b7f4:	7f13      	ldrb	r3, [r2, #28]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fa:	7713      	strb	r3, [r2, #28]
			open_servo;
 800b7fc:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b800:	484c      	ldr	r0, [pc, #304]	; (800b934 <Auto+0x2c4>)
 800b802:	f7fe faed 	bl	8009de0 <ServoSetPulse>
			reload = 0;
 800b806:	4b4c      	ldr	r3, [pc, #304]	; (800b938 <Auto+0x2c8>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
			load_start = 0;
 800b80c:	4b4b      	ldr	r3, [pc, #300]	; (800b93c <Auto+0x2cc>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
			load_adjust = 0;
 800b812:	4b4b      	ldr	r3, [pc, #300]	; (800b940 <Auto+0x2d0>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
			stick_fence = 0;
 800b818:	4b4a      	ldr	r3, [pc, #296]	; (800b944 <Auto+0x2d4>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]
			picked_manual = 0;
 800b81e:	4b4a      	ldr	r3, [pc, #296]	; (800b948 <Auto+0x2d8>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == CIRCLE)
 800b824:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <Auto+0x260>)
 800b826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b82c:	f040 80a9 	bne.w	800b982 <Auto+0x312>
	{
		while(ps4.button == CIRCLE);
 800b830:	bf00      	nop
 800b832:	4b27      	ldr	r3, [pc, #156]	; (800b8d0 <Auto+0x260>)
 800b834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b83a:	d0fa      	beq.n	800b832 <Auto+0x1c2>
		vesc_speed = 4;
 800b83c:	4b28      	ldr	r3, [pc, #160]	; (800b8e0 <Auto+0x270>)
 800b83e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b842:	601a      	str	r2, [r3, #0]
		static int counter = 0;

		if(counter == 0)
 800b844:	4b41      	ldr	r3, [pc, #260]	; (800b94c <Auto+0x2dc>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f040 8087 	bne.w	800b95c <Auto+0x2ec>
		{
			lidar.pos = PICK_LEFT;
 800b84e:	4b40      	ldr	r3, [pc, #256]	; (800b950 <Auto+0x2e0>)
 800b850:	2201      	movs	r2, #1
 800b852:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = PICK_LEFT;
 800b856:	4b3e      	ldr	r3, [pc, #248]	; (800b950 <Auto+0x2e0>)
 800b858:	2201      	movs	r2, #1
 800b85a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			setPick(2200);
 800b85e:	f640 0098 	movw	r0, #2200	; 0x898
 800b862:	f000 f8e1 	bl	800ba28 <setPick>

			float pick_left_point[1][7] = {{5.0, -3.9, 0.12, 0, 0, 0, 0}};
 800b866:	4b3b      	ldr	r3, [pc, #236]	; (800b954 <Auto+0x2e4>)
 800b868:	1d3c      	adds	r4, r7, #4
 800b86a:	461d      	mov	r5, r3
 800b86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b86e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800b878:	1d3b      	adds	r3, r7, #4
 800b87a:	4a2c      	ldr	r2, [pc, #176]	; (800b92c <Auto+0x2bc>)
 800b87c:	2101      	movs	r1, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fa f881 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800b884:	e00d      	b.n	800b8a2 <Auto+0x232>
			{
				if(ps4.button == SQUARE)
 800b886:	4b12      	ldr	r3, [pc, #72]	; (800b8d0 <Auto+0x260>)
 800b888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88e:	d108      	bne.n	800b8a2 <Auto+0x232>
				{
					while(ps4.button == SQUARE);
 800b890:	bf00      	nop
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <Auto+0x260>)
 800b894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b89a:	d0fa      	beq.n	800b892 <Auto+0x222>
					PP_stop(&pp);
 800b89c:	4823      	ldr	r0, [pc, #140]	; (800b92c <Auto+0x2bc>)
 800b89e:	f7fa faac 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <Auto+0x2bc>)
 800b8a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e9      	bne.n	800b886 <Auto+0x216>
				}
			}
			pick_left = 1;
 800b8b2:	4b29      	ldr	r3, [pc, #164]	; (800b958 <Auto+0x2e8>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	601a      	str	r2, [r3, #0]
			counter++;
 800b8b8:	4b24      	ldr	r3, [pc, #144]	; (800b94c <Auto+0x2dc>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	4a23      	ldr	r2, [pc, #140]	; (800b94c <Auto+0x2dc>)
 800b8c0:	6013      	str	r3, [r2, #0]
			cylinder_retract;
 800b8c2:	4a0b      	ldr	r2, [pc, #44]	; (800b8f0 <Auto+0x280>)
 800b8c4:	7f13      	ldrb	r3, [r2, #28]
 800b8c6:	f36f 1386 	bfc	r3, #6, #1
 800b8ca:	7713      	strb	r3, [r2, #28]
 800b8cc:	e059      	b.n	800b982 <Auto+0x312>
 800b8ce:	bf00      	nop
 800b8d0:	2000a014 	.word	0x2000a014
 800b8d4:	200002e0 	.word	0x200002e0
 800b8d8:	2000a5e0 	.word	0x2000a5e0
 800b8dc:	20006a1c 	.word	0x20006a1c
 800b8e0:	2000659c 	.word	0x2000659c
 800b8e4:	413c0000 	.word	0x413c0000
 800b8e8:	20007380 	.word	0x20007380
 800b8ec:	413b3333 	.word	0x413b3333
 800b8f0:	2000959c 	.word	0x2000959c
 800b8f4:	2000a388 	.word	0x2000a388
 800b8f8:	41026666 	.word	0x41026666
 800b8fc:	3e8ccccd 	.word	0x3e8ccccd
 800b900:	41033333 	.word	0x41033333
 800b904:	3e8a3d71 	.word	0x3e8a3d71
 800b908:	3ec7ae14 	.word	0x3ec7ae14
 800b90c:	4144cccd 	.word	0x4144cccd
 800b910:	41433333 	.word	0x41433333
 800b914:	3e2e147b 	.word	0x3e2e147b
 800b918:	40966666 	.word	0x40966666
 800b91c:	20009674 	.word	0x20009674
 800b920:	200092cc 	.word	0x200092cc
 800b924:	20007484 	.word	0x20007484
 800b928:	2000a570 	.word	0x2000a570
 800b92c:	20006cc4 	.word	0x20006cc4
 800b930:	20009428 	.word	0x20009428
 800b934:	2000786c 	.word	0x2000786c
 800b938:	2000774c 	.word	0x2000774c
 800b93c:	20007348 	.word	0x20007348
 800b940:	2000943c 	.word	0x2000943c
 800b944:	200072bc 	.word	0x200072bc
 800b948:	20009488 	.word	0x20009488
 800b94c:	200002e4 	.word	0x200002e4
 800b950:	20009030 	.word	0x20009030
 800b954:	0801fe18 	.word	0x0801fe18
 800b958:	2000785c 	.word	0x2000785c
		}
		else
		{
			counter = 0;
 800b95c:	4b29      	ldr	r3, [pc, #164]	; (800ba04 <Auto+0x394>)
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
			lidar.pos = POS_PENDING;
 800b962:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <Auto+0x398>)
 800b964:	2200      	movs	r2, #0
 800b966:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = POS_PENDING;
 800b96a:	4b27      	ldr	r3, [pc, #156]	; (800ba08 <Auto+0x398>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			pick_right = 1;
 800b972:	4b26      	ldr	r3, [pc, #152]	; (800ba0c <Auto+0x39c>)
 800b974:	2201      	movs	r2, #1
 800b976:	601a      	str	r2, [r3, #0]
			cylinder_retract;
 800b978:	4a25      	ldr	r2, [pc, #148]	; (800ba10 <Auto+0x3a0>)
 800b97a:	7f13      	ldrb	r3, [r2, #28]
 800b97c:	f36f 1386 	bfc	r3, #6, #1
 800b980:	7713      	strb	r3, [r2, #28]
		}
	}

	if(ps4.button == TRIANGLE)
 800b982:	4b24      	ldr	r3, [pc, #144]	; (800ba14 <Auto+0x3a4>)
 800b984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b98a:	d119      	bne.n	800b9c0 <Auto+0x350>
	{
		while(ps4.button == TRIANGLE);
 800b98c:	bf00      	nop
 800b98e:	4b21      	ldr	r3, [pc, #132]	; (800ba14 <Auto+0x3a4>)
 800b990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b996:	d0fa      	beq.n	800b98e <Auto+0x31e>
		LoadRing();
 800b998:	f000 fc9e 	bl	800c2d8 <LoadRing>
		picked_manual = 1;
 800b99c:	4b1e      	ldr	r3, [pc, #120]	; (800ba18 <Auto+0x3a8>)
 800b99e:	2201      	movs	r2, #1
 800b9a0:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800b9a2:	f240 31b6 	movw	r1, #950	; 0x3b6
 800b9a6:	481d      	ldr	r0, [pc, #116]	; (800ba1c <Auto+0x3ac>)
 800b9a8:	f7fe fa1a 	bl	8009de0 <ServoSetPulse>
		load_adjust = 1;
 800b9ac:	4b1c      	ldr	r3, [pc, #112]	; (800ba20 <Auto+0x3b0>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800b9b2:	4a17      	ldr	r2, [pc, #92]	; (800ba10 <Auto+0x3a0>)
 800b9b4:	7f13      	ldrb	r3, [r2, #28]
 800b9b6:	f36f 1386 	bfc	r3, #6, #1
 800b9ba:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800b9bc:	f000 fcd2 	bl	800c364 <AdjustRings>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800b9c0:	f004 fe66 	bl	8010690 <HAL_GetTick>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4a17      	ldr	r2, [pc, #92]	; (800ba24 <Auto+0x3b4>)
 800b9c8:	6812      	ldr	r2, [r2, #0]
 800b9ca:	1a9b      	subs	r3, r3, r2
 800b9cc:	2b7c      	cmp	r3, #124	; 0x7c
 800b9ce:	d914      	bls.n	800b9fa <Auto+0x38a>
	{
		led9= !led9;
 800b9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <Auto+0x3a0>)
 800b9d2:	7e1b      	ldrb	r3, [r3, #24]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bf0c      	ite	eq
 800b9de:	2301      	moveq	r3, #1
 800b9e0:	2300      	movne	r3, #0
 800b9e2:	b2d9      	uxtb	r1, r3
 800b9e4:	4a0a      	ldr	r2, [pc, #40]	; (800ba10 <Auto+0x3a0>)
 800b9e6:	7e13      	ldrb	r3, [r2, #24]
 800b9e8:	f361 1304 	bfi	r3, r1, #4, #1
 800b9ec:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b9ee:	f004 fe4f 	bl	8010690 <HAL_GetTick>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <Auto+0x3b4>)
 800b9f8:	601a      	str	r2, [r3, #0]
	}
}
 800b9fa:	bf00      	nop
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bdb0      	pop	{r4, r5, r7, pc}
 800ba02:	bf00      	nop
 800ba04:	200002e4 	.word	0x200002e4
 800ba08:	20009030 	.word	0x20009030
 800ba0c:	2000a624 	.word	0x2000a624
 800ba10:	2000959c 	.word	0x2000959c
 800ba14:	2000a014 	.word	0x2000a014
 800ba18:	20009488 	.word	0x20009488
 800ba1c:	2000786c 	.word	0x2000786c
 800ba20:	2000943c 	.word	0x2000943c
 800ba24:	2000729c 	.word	0x2000729c

0800ba28 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800ba30:	4a05      	ldr	r2, [pc, #20]	; (800ba48 <setPick+0x20>)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800ba36:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <setPick+0x24>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	200065a8 	.word	0x200065a8
 800ba4c:	20007730 	.word	0x20007730

0800ba50 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800ba54:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <CheckPickEnc+0x70>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02e      	beq.n	800baba <CheckPickEnc+0x6a>
	{
		pickErr = pick_target_enc - pick_enc;
 800ba5c:	4b19      	ldr	r3, [pc, #100]	; (800bac4 <CheckPickEnc+0x74>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4b19      	ldr	r3, [pc, #100]	; (800bac8 <CheckPickEnc+0x78>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba6e:	4b17      	ldr	r3, [pc, #92]	; (800bacc <CheckPickEnc+0x7c>)
 800ba70:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800ba74:	4816      	ldr	r0, [pc, #88]	; (800bad0 <CheckPickEnc+0x80>)
 800ba76:	f7f9 fd2e 	bl	80054d6 <PID>
		pick_manual((int32_t)pickU);
 800ba7a:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <CheckPickEnc+0x84>)
 800ba7c:	edd3 7a00 	vldr	s15, [r3]
 800ba80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba84:	ee17 1a90 	vmov	r1, s15
 800ba88:	4813      	ldr	r0, [pc, #76]	; (800bad8 <CheckPickEnc+0x88>)
 800ba8a:	f7f5 fb7e 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800ba8e:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <CheckPickEnc+0x7c>)
 800ba90:	edd3 7a00 	vldr	s15, [r3]
 800ba94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba98:	ee17 3a90 	vmov	r3, s15
 800ba9c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800baa0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800baa4:	4b0d      	ldr	r3, [pc, #52]	; (800badc <CheckPickEnc+0x8c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	da06      	bge.n	800baba <CheckPickEnc+0x6a>
		{
			set_pick_enc = 0;
 800baac:	4b04      	ldr	r3, [pc, #16]	; (800bac0 <CheckPickEnc+0x70>)
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
			pick_stop;
 800bab2:	2100      	movs	r1, #0
 800bab4:	4808      	ldr	r0, [pc, #32]	; (800bad8 <CheckPickEnc+0x88>)
 800bab6:	f7f5 fb68 	bl	800118a <WriteBDC>
		}
	}
}
 800baba:	bf00      	nop
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	20007730 	.word	0x20007730
 800bac4:	200065a8 	.word	0x200065a8
 800bac8:	20006be0 	.word	0x20006be0
 800bacc:	200064d8 	.word	0x200064d8
 800bad0:	20009810 	.word	0x20009810
 800bad4:	20007350 	.word	0x20007350
 800bad8:	2000770c 	.word	0x2000770c
 800badc:	200072b4 	.word	0x200072b4

0800bae0 <CheckPitch>:

void CheckPitch()
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
	if(set_pitch)
 800bae4:	4b1b      	ldr	r3, [pc, #108]	; (800bb54 <CheckPitch+0x74>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d02c      	beq.n	800bb46 <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800baec:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <CheckPitch+0x78>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <CheckPitch+0x1a>
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d013      	beq.n	800bb20 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800baf8:	e02a      	b.n	800bb50 <CheckPitch+0x70>
				if(In_Pitch70)
 800bafa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bafe:	4817      	ldr	r0, [pc, #92]	; (800bb5c <CheckPitch+0x7c>)
 800bb00:	f006 fc42 	bl	8012388 <HAL_GPIO_ReadPin>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d11f      	bne.n	800bb4a <CheckPitch+0x6a>
					pitch_stop;
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4814      	ldr	r0, [pc, #80]	; (800bb60 <CheckPitch+0x80>)
 800bb0e:	f7f5 fb3c 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800bb12:	4b11      	ldr	r3, [pc, #68]	; (800bb58 <CheckPitch+0x78>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bb18:	4b0e      	ldr	r3, [pc, #56]	; (800bb54 <CheckPitch+0x74>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]
				break;
 800bb1e:	e014      	b.n	800bb4a <CheckPitch+0x6a>
				if(In_Pitch45)
 800bb20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb24:	480d      	ldr	r0, [pc, #52]	; (800bb5c <CheckPitch+0x7c>)
 800bb26:	f006 fc2f 	bl	8012388 <HAL_GPIO_ReadPin>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10e      	bne.n	800bb4e <CheckPitch+0x6e>
					pitch_stop;
 800bb30:	2100      	movs	r1, #0
 800bb32:	480b      	ldr	r0, [pc, #44]	; (800bb60 <CheckPitch+0x80>)
 800bb34:	f7f5 fb29 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800bb38:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <CheckPitch+0x78>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bb3e:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <CheckPitch+0x74>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
				break;
 800bb44:	e003      	b.n	800bb4e <CheckPitch+0x6e>
	}
 800bb46:	bf00      	nop
 800bb48:	e002      	b.n	800bb50 <CheckPitch+0x70>
				break;
 800bb4a:	bf00      	nop
 800bb4c:	e000      	b.n	800bb50 <CheckPitch+0x70>
				break;
 800bb4e:	bf00      	nop
}
 800bb50:	bf00      	nop
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	2000965c 	.word	0x2000965c
 800bb58:	20009672 	.word	0x20009672
 800bb5c:	40020400 	.word	0x40020400
 800bb60:	20006c44 	.word	0x20006c44
 800bb64:	00000000 	.word	0x00000000

0800bb68 <CheckPick>:

void CheckPick()
{
 800bb68:	b5b0      	push	{r4, r5, r7, lr}
 800bb6a:	b0a4      	sub	sp, #144	; 0x90
 800bb6c:	af00      	add	r7, sp, #0
	if(pick_left)
 800bb6e:	4bbc      	ldr	r3, [pc, #752]	; (800be60 <CheckPick+0x2f8>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 8139 	beq.w	800bdea <CheckPick+0x282>
	{
		lidar.pos = PICK_LEFT;
 800bb78:	4bba      	ldr	r3, [pc, #744]	; (800be64 <CheckPick+0x2fc>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800bb80:	4bb8      	ldr	r3, [pc, #736]	; (800be64 <CheckPick+0x2fc>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800bb88:	4bb7      	ldr	r3, [pc, #732]	; (800be68 <CheckPick+0x300>)
 800bb8a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bb8e:	461d      	mov	r5, r3
 800bb90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800bb9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bba0:	4ab2      	ldr	r2, [pc, #712]	; (800be6c <CheckPick+0x304>)
 800bba2:	2101      	movs	r1, #1
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f9 feee 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bbaa:	e020      	b.n	800bbee <CheckPick+0x86>
		{
			if(ps4.button == SQUARE)
 800bbac:	4bb0      	ldr	r3, [pc, #704]	; (800be70 <CheckPick+0x308>)
 800bbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbb4:	d108      	bne.n	800bbc8 <CheckPick+0x60>
			{
				while(ps4.button == SQUARE);
 800bbb6:	bf00      	nop
 800bbb8:	4bad      	ldr	r3, [pc, #692]	; (800be70 <CheckPick+0x308>)
 800bbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbc0:	d0fa      	beq.n	800bbb8 <CheckPick+0x50>
				PP_stop(&pp);
 800bbc2:	48aa      	ldr	r0, [pc, #680]	; (800be6c <CheckPick+0x304>)
 800bbc4:	f7fa f919 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800bbc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbcc:	48a9      	ldr	r0, [pc, #676]	; (800be74 <CheckPick+0x30c>)
 800bbce:	f006 fbdb 	bl	8012388 <HAL_GPIO_ReadPin>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d007      	beq.n	800bbe8 <CheckPick+0x80>
 800bbd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bbdc:	48a5      	ldr	r0, [pc, #660]	; (800be74 <CheckPick+0x30c>)
 800bbde:	f006 fbd3 	bl	8012388 <HAL_GPIO_ReadPin>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <CheckPick+0x86>
				PP_stop(&pp);
 800bbe8:	48a0      	ldr	r0, [pc, #640]	; (800be6c <CheckPick+0x304>)
 800bbea:	f7fa f906 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800bbee:	4b9f      	ldr	r3, [pc, #636]	; (800be6c <CheckPick+0x304>)
 800bbf0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1d6      	bne.n	800bbac <CheckPick+0x44>
		}
		pick_left = 0;
 800bbfe:	4b98      	ldr	r3, [pc, #608]	; (800be60 <CheckPick+0x2f8>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800bc04:	4b9c      	ldr	r3, [pc, #624]	; (800be78 <CheckPick+0x310>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

		setPick(0);
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f7ff ff0c 	bl	800ba28 <setPick>

		if(pick_left_manual)
 800bc10:	4b9a      	ldr	r3, [pc, #616]	; (800be7c <CheckPick+0x314>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <CheckPick+0xb4>
			ResetCoordinate();
 800bc18:	f000 fbdc 	bl	800c3d4 <ResetCoordinate>

		float pick_left_point[1][7] = {{2.3, -10, -1.5, 0, 0, 0, 0}};
 800bc1c:	4b98      	ldr	r3, [pc, #608]	; (800be80 <CheckPick+0x318>)
 800bc1e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800bc22:	461d      	mov	r5, r3
 800bc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800bc30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bc34:	4a8d      	ldr	r2, [pc, #564]	; (800be6c <CheckPick+0x304>)
 800bc36:	2101      	movs	r1, #1
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7f9 fea4 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bc3e:	e062      	b.n	800bd06 <CheckPick+0x19e>
		{
			if(!pick_left_manual)
 800bc40:	4b8e      	ldr	r3, [pc, #568]	; (800be7c <CheckPick+0x314>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d127      	bne.n	800bc98 <CheckPick+0x130>
			{
				if(pp.real_x <= -4.9)
 800bc48:	4b88      	ldr	r3, [pc, #544]	; (800be6c <CheckPick+0x304>)
 800bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f4 fc7b 	bl	8000548 <__aeabi_f2d>
 800bc52:	a37f      	add	r3, pc, #508	; (adr r3, 800be50 <CheckPick+0x2e8>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 ff4a 	bl	8000af0 <__aeabi_dcmple>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d004      	beq.n	800bc6c <CheckPick+0x104>
					pp.target_vel[0] = 0.5;
 800bc62:	4b82      	ldr	r3, [pc, #520]	; (800be6c <CheckPick+0x304>)
 800bc64:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800bc68:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -5.0)
 800bc6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc70:	4884      	ldr	r0, [pc, #528]	; (800be84 <CheckPick+0x31c>)
 800bc72:	f006 fb89 	bl	8012388 <HAL_GPIO_ReadPin>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d133      	bne.n	800bce4 <CheckPick+0x17c>
 800bc7c:	4b7b      	ldr	r3, [pc, #492]	; (800be6c <CheckPick+0x304>)
 800bc7e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bc82:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800bc86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	d829      	bhi.n	800bce4 <CheckPick+0x17c>
					PP_stop(&pp);
 800bc90:	4876      	ldr	r0, [pc, #472]	; (800be6c <CheckPick+0x304>)
 800bc92:	f7fa f8b2 	bl	8005dfa <PP_stop>
 800bc96:	e025      	b.n	800bce4 <CheckPick+0x17c>
			}
			else
			{
				if(pp.real_x <= -0.25)
 800bc98:	4b74      	ldr	r3, [pc, #464]	; (800be6c <CheckPick+0x304>)
 800bc9a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bc9e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	d803      	bhi.n	800bcb4 <CheckPick+0x14c>
					pp.target_vel[0] = 0.55;
 800bcac:	4b6f      	ldr	r3, [pc, #444]	; (800be6c <CheckPick+0x304>)
 800bcae:	4a76      	ldr	r2, [pc, #472]	; (800be88 <CheckPick+0x320>)
 800bcb0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -0.3)
 800bcb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcb8:	4872      	ldr	r0, [pc, #456]	; (800be84 <CheckPick+0x31c>)
 800bcba:	f006 fb65 	bl	8012388 <HAL_GPIO_ReadPin>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10f      	bne.n	800bce4 <CheckPick+0x17c>
 800bcc4:	4b69      	ldr	r3, [pc, #420]	; (800be6c <CheckPick+0x304>)
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f4 fc3d 	bl	8000548 <__aeabi_f2d>
 800bcce:	a362      	add	r3, pc, #392	; (adr r3, 800be58 <CheckPick+0x2f0>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 ff0c 	bl	8000af0 <__aeabi_dcmple>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <CheckPick+0x17c>
					PP_stop(&pp);
 800bcde:	4863      	ldr	r0, [pc, #396]	; (800be6c <CheckPick+0x304>)
 800bce0:	f7fa f88b 	bl	8005dfa <PP_stop>
			}

			if(ps4.button == SQUARE)
 800bce4:	4b62      	ldr	r3, [pc, #392]	; (800be70 <CheckPick+0x308>)
 800bce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcec:	d10b      	bne.n	800bd06 <CheckPick+0x19e>
			{
				while(ps4.button == SQUARE);
 800bcee:	bf00      	nop
 800bcf0:	4b5f      	ldr	r3, [pc, #380]	; (800be70 <CheckPick+0x308>)
 800bcf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf8:	d0fa      	beq.n	800bcf0 <CheckPick+0x188>
				PP_stop(&pp);
 800bcfa:	485c      	ldr	r0, [pc, #368]	; (800be6c <CheckPick+0x304>)
 800bcfc:	f7fa f87d 	bl	8005dfa <PP_stop>
				picked_left = 0;
 800bd00:	4b5d      	ldr	r3, [pc, #372]	; (800be78 <CheckPick+0x310>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800bd06:	4b59      	ldr	r3, [pc, #356]	; (800be6c <CheckPick+0x304>)
 800bd08:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d194      	bne.n	800bc40 <CheckPick+0xd8>
			}
		}
		pick_left_manual = 0;
 800bd16:	4b59      	ldr	r3, [pc, #356]	; (800be7c <CheckPick+0x314>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
		if(picked_left)
 800bd1c:	4b56      	ldr	r3, [pc, #344]	; (800be78 <CheckPick+0x310>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d062      	beq.n	800bdea <CheckPick+0x282>
		{
			float pick_left_adjust_servo[1][7] = {{4.0, 0.5, 0.2, 0, 0, 0, 0}};
 800bd24:	4b59      	ldr	r3, [pc, #356]	; (800be8c <CheckPick+0x324>)
 800bd26:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800bd2a:	461d      	mov	r5, r3
 800bd2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bd34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800bd38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd3c:	4a4b      	ldr	r2, [pc, #300]	; (800be6c <CheckPick+0x304>)
 800bd3e:	2101      	movs	r1, #1
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7f9 fe20 	bl	8005986 <PP_start>
			while(pp.pp_start)
 800bd46:	e00d      	b.n	800bd64 <CheckPick+0x1fc>
			{
				if(ps4.button == SQUARE)
 800bd48:	4b49      	ldr	r3, [pc, #292]	; (800be70 <CheckPick+0x308>)
 800bd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd50:	d108      	bne.n	800bd64 <CheckPick+0x1fc>
				{
					while(ps4.button == SQUARE);
 800bd52:	bf00      	nop
 800bd54:	4b46      	ldr	r3, [pc, #280]	; (800be70 <CheckPick+0x308>)
 800bd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd5c:	d0fa      	beq.n	800bd54 <CheckPick+0x1ec>
					PP_stop(&pp);
 800bd5e:	4843      	ldr	r0, [pc, #268]	; (800be6c <CheckPick+0x304>)
 800bd60:	f7fa f84b 	bl	8005dfa <PP_stop>
			while(pp.pp_start)
 800bd64:	4b41      	ldr	r3, [pc, #260]	; (800be6c <CheckPick+0x304>)
 800bd66:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e9      	bne.n	800bd48 <CheckPick+0x1e0>
				}
			}
			LoadRing();
 800bd74:	f000 fab0 	bl	800c2d8 <LoadRing>
			close_servo;
 800bd78:	f240 3152 	movw	r1, #850	; 0x352
 800bd7c:	4844      	ldr	r0, [pc, #272]	; (800be90 <CheckPick+0x328>)
 800bd7e:	f7fe f82f 	bl	8009de0 <ServoSetPulse>
			load_adjust = 1;
 800bd82:	4b44      	ldr	r3, [pc, #272]	; (800be94 <CheckPick+0x32c>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	601a      	str	r2, [r3, #0]
			lidar.pos_counter = CENTER_1;
 800bd88:	4b36      	ldr	r3, [pc, #216]	; (800be64 <CheckPick+0x2fc>)
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			for(int i = 0; i < 4; i++)
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd96:	e020      	b.n	800bdda <CheckPick+0x272>
			{
				if(ps4.button == SQUARE)
 800bd98:	4b35      	ldr	r3, [pc, #212]	; (800be70 <CheckPick+0x308>)
 800bd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda0:	d106      	bne.n	800bdb0 <CheckPick+0x248>
				{
					while(ps4.button == SQUARE);
 800bda2:	bf00      	nop
 800bda4:	4b32      	ldr	r3, [pc, #200]	; (800be70 <CheckPick+0x308>)
 800bda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdac:	d0fa      	beq.n	800bda4 <CheckPick+0x23c>
					break;
 800bdae:	e018      	b.n	800bde2 <CheckPick+0x27a>
				}

				load_adjust_servo;
 800bdb0:	f240 414c 	movw	r1, #1100	; 0x44c
 800bdb4:	4836      	ldr	r0, [pc, #216]	; (800be90 <CheckPick+0x328>)
 800bdb6:	f7fe f813 	bl	8009de0 <ServoSetPulse>
				osDelay(100);
 800bdba:	2064      	movs	r0, #100	; 0x64
 800bdbc:	f00b f9cb 	bl	8017156 <osDelay>
				close_servo;
 800bdc0:	f240 3152 	movw	r1, #850	; 0x352
 800bdc4:	4832      	ldr	r0, [pc, #200]	; (800be90 <CheckPick+0x328>)
 800bdc6:	f7fe f80b 	bl	8009de0 <ServoSetPulse>
				osDelay(100);
 800bdca:	2064      	movs	r0, #100	; 0x64
 800bdcc:	f00b f9c3 	bl	8017156 <osDelay>
			for(int i = 0; i < 4; i++)
 800bdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	ddda      	ble.n	800bd98 <CheckPick+0x230>
			}
//			osDelay(500);
			setSpeedMODN(5.5);
 800bde2:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800bde6:	f7f8 ff03 	bl	8004bf0 <setSpeedMODN>
		}
	}

	if(pick_right)
 800bdea:	4b2b      	ldr	r3, [pc, #172]	; (800be98 <CheckPick+0x330>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 80f3 	beq.w	800bfda <CheckPick+0x472>
	{
		load_stop_once = 0;
 800bdf4:	4b29      	ldr	r3, [pc, #164]	; (800be9c <CheckPick+0x334>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800bdfa:	4b29      	ldr	r3, [pc, #164]	; (800bea0 <CheckPick+0x338>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
		load_adjust = 1;
 800be00:	4b24      	ldr	r3, [pc, #144]	; (800be94 <CheckPick+0x32c>)
 800be02:	2201      	movs	r2, #1
 800be04:	601a      	str	r2, [r3, #0]

//		pick_0 = 1;
//		pick_manual(-10000);

		lidar.pos = PICK_RIGHT;
 800be06:	4b17      	ldr	r3, [pc, #92]	; (800be64 <CheckPick+0x2fc>)
 800be08:	2209      	movs	r2, #9
 800be0a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800be0e:	4b15      	ldr	r3, [pc, #84]	; (800be64 <CheckPick+0x2fc>)
 800be10:	2209      	movs	r2, #9
 800be12:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		open_servo;
 800be16:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800be1a:	481d      	ldr	r0, [pc, #116]	; (800be90 <CheckPick+0x328>)
 800be1c:	f7fd ffe0 	bl	8009de0 <ServoSetPulse>
		pick_right = 0;
 800be20:	4b1d      	ldr	r3, [pc, #116]	; (800be98 <CheckPick+0x330>)
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 10, 0, -90, 0, 0, 0}};
 800be26:	4b1f      	ldr	r3, [pc, #124]	; (800bea4 <CheckPick+0x33c>)
 800be28:	f107 041c 	add.w	r4, r7, #28
 800be2c:	461d      	mov	r5, r3
 800be2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_right, 1, &pp);
 800be3a:	f107 031c 	add.w	r3, r7, #28
 800be3e:	4a0b      	ldr	r2, [pc, #44]	; (800be6c <CheckPick+0x304>)
 800be40:	2101      	movs	r1, #1
 800be42:	4618      	mov	r0, r3
 800be44:	f7f9 fd9f 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800be48:	e04f      	b.n	800beea <CheckPick+0x382>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	9999999a 	.word	0x9999999a
 800be54:	c0139999 	.word	0xc0139999
 800be58:	33333333 	.word	0x33333333
 800be5c:	bfd33333 	.word	0xbfd33333
 800be60:	2000785c 	.word	0x2000785c
 800be64:	20009030 	.word	0x20009030
 800be68:	0801fdc4 	.word	0x0801fdc4
 800be6c:	20006cc4 	.word	0x20006cc4
 800be70:	2000a014 	.word	0x2000a014
 800be74:	40020c00 	.word	0x40020c00
 800be78:	200097fc 	.word	0x200097fc
 800be7c:	200099a8 	.word	0x200099a8
 800be80:	0801fe34 	.word	0x0801fe34
 800be84:	40021000 	.word	0x40021000
 800be88:	3f0ccccd 	.word	0x3f0ccccd
 800be8c:	0801fe50 	.word	0x0801fe50
 800be90:	2000786c 	.word	0x2000786c
 800be94:	2000943c 	.word	0x2000943c
 800be98:	2000a624 	.word	0x2000a624
 800be9c:	20009978 	.word	0x20009978
 800bea0:	20009428 	.word	0x20009428
 800bea4:	0801fe6c 	.word	0x0801fe6c
		{
			if(ps4.button == SQUARE)
 800bea8:	4b51      	ldr	r3, [pc, #324]	; (800bff0 <CheckPick+0x488>)
 800beaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beb0:	d108      	bne.n	800bec4 <CheckPick+0x35c>
			{
				while(ps4.button == SQUARE);
 800beb2:	bf00      	nop
 800beb4:	4b4e      	ldr	r3, [pc, #312]	; (800bff0 <CheckPick+0x488>)
 800beb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bebc:	d0fa      	beq.n	800beb4 <CheckPick+0x34c>
				PP_stop(&pp);
 800bebe:	484d      	ldr	r0, [pc, #308]	; (800bff4 <CheckPick+0x48c>)
 800bec0:	f7f9 ff9b 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800bec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bec8:	484b      	ldr	r0, [pc, #300]	; (800bff8 <CheckPick+0x490>)
 800beca:	f006 fa5d 	bl	8012388 <HAL_GPIO_ReadPin>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d007      	beq.n	800bee4 <CheckPick+0x37c>
 800bed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bed8:	4847      	ldr	r0, [pc, #284]	; (800bff8 <CheckPick+0x490>)
 800beda:	f006 fa55 	bl	8012388 <HAL_GPIO_ReadPin>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <CheckPick+0x382>
				PP_stop(&pp);
 800bee4:	4843      	ldr	r0, [pc, #268]	; (800bff4 <CheckPick+0x48c>)
 800bee6:	f7f9 ff88 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800beea:	4b42      	ldr	r3, [pc, #264]	; (800bff4 <CheckPick+0x48c>)
 800beec:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1d6      	bne.n	800bea8 <CheckPick+0x340>
		}

		picked_right = 1;
 800befa:	4b40      	ldr	r3, [pc, #256]	; (800bffc <CheckPick+0x494>)
 800befc:	2201      	movs	r2, #1
 800befe:	601a      	str	r2, [r3, #0]
		ResetCoordinate();
 800bf00:	f000 fa68 	bl	800c3d4 <ResetCoordinate>
		setPick(0);
 800bf04:	2000      	movs	r0, #0
 800bf06:	f7ff fd8f 	bl	800ba28 <setPick>
		float pick_right_point[1][7] = {{2.5, 2.5, -10, -90, 0, 0, 0}};
 800bf0a:	4b3d      	ldr	r3, [pc, #244]	; (800c000 <CheckPick+0x498>)
 800bf0c:	463c      	mov	r4, r7
 800bf0e:	461d      	mov	r5, r3
 800bf10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_right_point, 1, &pp);
 800bf1c:	463b      	mov	r3, r7
 800bf1e:	4a35      	ldr	r2, [pc, #212]	; (800bff4 <CheckPick+0x48c>)
 800bf20:	2101      	movs	r1, #1
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f9 fd2f 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800bf28:	e037      	b.n	800bf9a <CheckPick+0x432>
		{
			if(ps4.button == SQUARE)
 800bf2a:	4b31      	ldr	r3, [pc, #196]	; (800bff0 <CheckPick+0x488>)
 800bf2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf32:	d10b      	bne.n	800bf4c <CheckPick+0x3e4>
			{
				while(ps4.button == SQUARE);
 800bf34:	bf00      	nop
 800bf36:	4b2e      	ldr	r3, [pc, #184]	; (800bff0 <CheckPick+0x488>)
 800bf38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf3e:	d0fa      	beq.n	800bf36 <CheckPick+0x3ce>
				PP_stop(&pp);
 800bf40:	482c      	ldr	r0, [pc, #176]	; (800bff4 <CheckPick+0x48c>)
 800bf42:	f7f9 ff5a 	bl	8005dfa <PP_stop>
				picked_right = 0;
 800bf46:	4b2d      	ldr	r3, [pc, #180]	; (800bffc <CheckPick+0x494>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
			}

			if(pp.real_y <= -0.25)
 800bf4c:	4b29      	ldr	r3, [pc, #164]	; (800bff4 <CheckPick+0x48c>)
 800bf4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800bf52:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bf56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5e:	d803      	bhi.n	800bf68 <CheckPick+0x400>
				pp.target_vel[0] = 0.65;
 800bf60:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <CheckPick+0x48c>)
 800bf62:	4a28      	ldr	r2, [pc, #160]	; (800c004 <CheckPick+0x49c>)
 800bf64:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_y <= -0.3)
 800bf68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf6c:	4826      	ldr	r0, [pc, #152]	; (800c008 <CheckPick+0x4a0>)
 800bf6e:	f006 fa0b 	bl	8012388 <HAL_GPIO_ReadPin>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d110      	bne.n	800bf9a <CheckPick+0x432>
 800bf78:	4b1e      	ldr	r3, [pc, #120]	; (800bff4 <CheckPick+0x48c>)
 800bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f4 fae3 	bl	8000548 <__aeabi_f2d>
 800bf82:	a319      	add	r3, pc, #100	; (adr r3, 800bfe8 <CheckPick+0x480>)
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	f7f4 fdb2 	bl	8000af0 <__aeabi_dcmple>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d100      	bne.n	800bf94 <CheckPick+0x42c>
 800bf92:	e002      	b.n	800bf9a <CheckPick+0x432>
				PP_stop(&pp);
 800bf94:	4817      	ldr	r0, [pc, #92]	; (800bff4 <CheckPick+0x48c>)
 800bf96:	f7f9 ff30 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800bf9a:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <CheckPick+0x48c>)
 800bf9c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1bf      	bne.n	800bf2a <CheckPick+0x3c2>
		}

		if(picked_right)
 800bfaa:	4b14      	ldr	r3, [pc, #80]	; (800bffc <CheckPick+0x494>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d013      	beq.n	800bfda <CheckPick+0x472>
		{
//			LoadRing()
			if(type_3_done)
 800bfb2:	4b16      	ldr	r3, [pc, #88]	; (800c00c <CheckPick+0x4a4>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d004      	beq.n	800bfc4 <CheckPick+0x45c>
				lidar.pos_counter = CENTER_4;
 800bfba:	4b15      	ldr	r3, [pc, #84]	; (800c010 <CheckPick+0x4a8>)
 800bfbc:	2207      	movs	r2, #7
 800bfbe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800bfc2:	e003      	b.n	800bfcc <CheckPick+0x464>
			else
				lidar.pos_counter = UPPER_RIGHT;
 800bfc4:	4b12      	ldr	r3, [pc, #72]	; (800c010 <CheckPick+0x4a8>)
 800bfc6:	2208      	movs	r2, #8
 800bfc8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
//			osDelay(500);
//			close_servo;
			load_adjust = 1;
 800bfcc:	4b11      	ldr	r3, [pc, #68]	; (800c014 <CheckPick+0x4ac>)
 800bfce:	2201      	movs	r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]
			setSpeedMODN(5.5);
 800bfd2:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800bfd6:	f7f8 fe0b 	bl	8004bf0 <setSpeedMODN>
		}
	}
}
 800bfda:	bf00      	nop
 800bfdc:	3790      	adds	r7, #144	; 0x90
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bdb0      	pop	{r4, r5, r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	33333333 	.word	0x33333333
 800bfec:	bfd33333 	.word	0xbfd33333
 800bff0:	2000a014 	.word	0x2000a014
 800bff4:	20006cc4 	.word	0x20006cc4
 800bff8:	40020c00 	.word	0x40020c00
 800bffc:	20007214 	.word	0x20007214
 800c000:	0801fe88 	.word	0x0801fe88
 800c004:	3f266666 	.word	0x3f266666
 800c008:	40021000 	.word	0x40021000
 800c00c:	20009434 	.word	0x20009434
 800c010:	20009030 	.word	0x20009030
 800c014:	2000943c 	.word	0x2000943c

0800c018 <CheckShoot>:

void CheckShoot()
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800c01c:	4b31      	ldr	r3, [pc, #196]	; (800c0e4 <CheckShoot+0xcc>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d012      	beq.n	800c04a <CheckShoot+0x32>
 800c024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c028:	482f      	ldr	r0, [pc, #188]	; (800c0e8 <CheckShoot+0xd0>)
 800c02a:	f006 f9ad 	bl	8012388 <HAL_GPIO_ReadPin>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <CheckShoot+0x32>
	{
		shoot_done = 1;
 800c034:	4b2d      	ldr	r3, [pc, #180]	; (800c0ec <CheckShoot+0xd4>)
 800c036:	2201      	movs	r2, #1
 800c038:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800c03a:	4b2a      	ldr	r3, [pc, #168]	; (800c0e4 <CheckShoot+0xcc>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	601a      	str	r2, [r3, #0]
		push_return;
 800c040:	492b      	ldr	r1, [pc, #172]	; (800c0f0 <CheckShoot+0xd8>)
 800c042:	482c      	ldr	r0, [pc, #176]	; (800c0f4 <CheckShoot+0xdc>)
 800c044:	f7f5 f8a1 	bl	800118a <WriteBDC>
 800c048:	e00e      	b.n	800c068 <CheckShoot+0x50>
	}
	else if(In_ShotDone)
 800c04a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c04e:	4826      	ldr	r0, [pc, #152]	; (800c0e8 <CheckShoot+0xd0>)
 800c050:	f006 f99a 	bl	8012388 <HAL_GPIO_ReadPin>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <CheckShoot+0x50>
	{
		push_return;
 800c05a:	4925      	ldr	r1, [pc, #148]	; (800c0f0 <CheckShoot+0xd8>)
 800c05c:	4825      	ldr	r0, [pc, #148]	; (800c0f4 <CheckShoot+0xdc>)
 800c05e:	f7f5 f894 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800c062:	4b22      	ldr	r3, [pc, #136]	; (800c0ec <CheckShoot+0xd4>)
 800c064:	2201      	movs	r2, #1
 800c066:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800c068:	4b20      	ldr	r3, [pc, #128]	; (800c0ec <CheckShoot+0xd4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d023      	beq.n	800c0b8 <CheckShoot+0xa0>
 800c070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c074:	481c      	ldr	r0, [pc, #112]	; (800c0e8 <CheckShoot+0xd0>)
 800c076:	f006 f987 	bl	8012388 <HAL_GPIO_ReadPin>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d11b      	bne.n	800c0b8 <CheckShoot+0xa0>
 800c080:	4b1d      	ldr	r3, [pc, #116]	; (800c0f8 <CheckShoot+0xe0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d017      	beq.n	800c0b8 <CheckShoot+0xa0>
	{
		wait_load = 0;
 800c088:	4b1b      	ldr	r3, [pc, #108]	; (800c0f8 <CheckShoot+0xe0>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800c08e:	4b17      	ldr	r3, [pc, #92]	; (800c0ec <CheckShoot+0xd4>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
		push_stop;
 800c094:	2100      	movs	r1, #0
 800c096:	4817      	ldr	r0, [pc, #92]	; (800c0f4 <CheckShoot+0xdc>)
 800c098:	f7f5 f877 	bl	800118a <WriteBDC>
		adjust_servo;
 800c09c:	f240 31b6 	movw	r1, #950	; 0x3b6
 800c0a0:	4816      	ldr	r0, [pc, #88]	; (800c0fc <CheckShoot+0xe4>)
 800c0a2:	f7fd fe9d 	bl	8009de0 <ServoSetPulse>
		reload = 1;
 800c0a6:	4b16      	ldr	r3, [pc, #88]	; (800c100 <CheckShoot+0xe8>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	601a      	str	r2, [r3, #0]
		pick_manual(5000);
 800c0ac:	f241 3188 	movw	r1, #5000	; 0x1388
 800c0b0:	4814      	ldr	r0, [pc, #80]	; (800c104 <CheckShoot+0xec>)
 800c0b2:	f7f5 f86a 	bl	800118a <WriteBDC>
	else if(shoot_done && In_ShotReady)
	{
		shoot_done = 0;
		push_stop;
	}
}
 800c0b6:	e012      	b.n	800c0de <CheckShoot+0xc6>
	else if(shoot_done && In_ShotReady)
 800c0b8:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <CheckShoot+0xd4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00e      	beq.n	800c0de <CheckShoot+0xc6>
 800c0c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0c4:	4808      	ldr	r0, [pc, #32]	; (800c0e8 <CheckShoot+0xd0>)
 800c0c6:	f006 f95f 	bl	8012388 <HAL_GPIO_ReadPin>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d106      	bne.n	800c0de <CheckShoot+0xc6>
		shoot_done = 0;
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <CheckShoot+0xd4>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
		push_stop;
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	4806      	ldr	r0, [pc, #24]	; (800c0f4 <CheckShoot+0xdc>)
 800c0da:	f7f5 f856 	bl	800118a <WriteBDC>
}
 800c0de:	bf00      	nop
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	200092cc 	.word	0x200092cc
 800c0e8:	40021000 	.word	0x40021000
 800c0ec:	20008f7c 	.word	0x20008f7c
 800c0f0:	ffffb1e1 	.word	0xffffb1e1
 800c0f4:	20009674 	.word	0x20009674
 800c0f8:	20007484 	.word	0x20007484
 800c0fc:	2000786c 	.word	0x2000786c
 800c100:	2000774c 	.word	0x2000774c
 800c104:	2000770c 	.word	0x2000770c

0800c108 <CheckLoad>:

void CheckLoad()
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800c10c:	4b61      	ldr	r3, [pc, #388]	; (800c294 <CheckLoad+0x18c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d103      	bne.n	800c11c <CheckLoad+0x14>
 800c114:	4b60      	ldr	r3, [pc, #384]	; (800c298 <CheckLoad+0x190>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d028      	beq.n	800c16e <CheckLoad+0x66>
	{
		if(pick_enc >= 9500 && !load_stop_once)
 800c11c:	4b5f      	ldr	r3, [pc, #380]	; (800c29c <CheckLoad+0x194>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f242 521b 	movw	r2, #9499	; 0x251b
 800c124:	4293      	cmp	r3, r2
 800c126:	dd12      	ble.n	800c14e <CheckLoad+0x46>
 800c128:	4b5d      	ldr	r3, [pc, #372]	; (800c2a0 <CheckLoad+0x198>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10e      	bne.n	800c14e <CheckLoad+0x46>
		{
			pick_stop;
 800c130:	2100      	movs	r1, #0
 800c132:	485c      	ldr	r0, [pc, #368]	; (800c2a4 <CheckLoad+0x19c>)
 800c134:	f7f5 f829 	bl	800118a <WriteBDC>
			osDelay(200);
 800c138:	20c8      	movs	r0, #200	; 0xc8
 800c13a:	f00b f80c 	bl	8017156 <osDelay>
			pick_manual(5000);
 800c13e:	f241 3188 	movw	r1, #5000	; 0x1388
 800c142:	4858      	ldr	r0, [pc, #352]	; (800c2a4 <CheckLoad+0x19c>)
 800c144:	f7f5 f821 	bl	800118a <WriteBDC>
//			close_servo;
			load_stop_once = 1;
 800c148:	4b55      	ldr	r3, [pc, #340]	; (800c2a0 <CheckLoad+0x198>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	601a      	str	r2, [r3, #0]
		}

		if(pick_enc >= 16500)
 800c14e:	4b53      	ldr	r3, [pc, #332]	; (800c29c <CheckLoad+0x194>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f244 0273 	movw	r2, #16499	; 0x4073
 800c156:	4293      	cmp	r3, r2
 800c158:	dd09      	ble.n	800c16e <CheckLoad+0x66>
		{
			load_start = 0;
 800c15a:	4b4e      	ldr	r3, [pc, #312]	; (800c294 <CheckLoad+0x18c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
			reload = 0;
 800c160:	4b4d      	ldr	r3, [pc, #308]	; (800c298 <CheckLoad+0x190>)
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
			pick_stop;
 800c166:	2100      	movs	r1, #0
 800c168:	484e      	ldr	r0, [pc, #312]	; (800c2a4 <CheckLoad+0x19c>)
 800c16a:	f7f5 f80e 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 8500)
 800c16e:	4b49      	ldr	r3, [pc, #292]	; (800c294 <CheckLoad+0x18c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d038      	beq.n	800c1e8 <CheckLoad+0xe0>
 800c176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c17a:	484b      	ldr	r0, [pc, #300]	; (800c2a8 <CheckLoad+0x1a0>)
 800c17c:	f006 f904 	bl	8012388 <HAL_GPIO_ReadPin>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d130      	bne.n	800c1e8 <CheckLoad+0xe0>
 800c186:	4b45      	ldr	r3, [pc, #276]	; (800c29c <CheckLoad+0x194>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f242 1233 	movw	r2, #8499	; 0x2133
 800c18e:	4293      	cmp	r3, r2
 800c190:	dd2a      	ble.n	800c1e8 <CheckLoad+0xe0>
	{
		load_start = 0;
 800c192:	4b40      	ldr	r3, [pc, #256]	; (800c294 <CheckLoad+0x18c>)
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
		pick_enc_buf = pick_enc;
 800c198:	4b40      	ldr	r3, [pc, #256]	; (800c29c <CheckLoad+0x194>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a43      	ldr	r2, [pc, #268]	; (800c2ac <CheckLoad+0x1a4>)
 800c19e:	6013      	str	r3, [r2, #0]
		if(blue)
 800c1a0:	4b43      	ldr	r3, [pc, #268]	; (800c2b0 <CheckLoad+0x1a8>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d012      	beq.n	800c1ce <CheckLoad+0xc6>
		{
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c1a8:	e004      	b.n	800c1b4 <CheckLoad+0xac>
				pick_manual(2000);
 800c1aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c1ae:	483d      	ldr	r0, [pc, #244]	; (800c2a4 <CheckLoad+0x19c>)
 800c1b0:	f7f4 ffeb 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c1b4:	4b39      	ldr	r3, [pc, #228]	; (800c29c <CheckLoad+0x194>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	4b3c      	ldr	r3, [pc, #240]	; (800c2ac <CheckLoad+0x1a4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	2bb3      	cmp	r3, #179	; 0xb3
 800c1c0:	ddf3      	ble.n	800c1aa <CheckLoad+0xa2>
 800c1c2:	e00b      	b.n	800c1dc <CheckLoad+0xd4>
		}
		else
		{
			while(pick_enc - pick_enc_buf < RedPickMore)
				pick_manual(2000);
 800c1c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c1c8:	4836      	ldr	r0, [pc, #216]	; (800c2a4 <CheckLoad+0x19c>)
 800c1ca:	f7f4 ffde 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < RedPickMore)
 800c1ce:	4b33      	ldr	r3, [pc, #204]	; (800c29c <CheckLoad+0x194>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b36      	ldr	r3, [pc, #216]	; (800c2ac <CheckLoad+0x1a4>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	2b99      	cmp	r3, #153	; 0x99
 800c1da:	ddf3      	ble.n	800c1c4 <CheckLoad+0xbc>
		}

		pick_stop;
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4831      	ldr	r0, [pc, #196]	; (800c2a4 <CheckLoad+0x19c>)
 800c1e0:	f7f4 ffd3 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800c1e4:	f000 f89c 	bl	800c320 <AutoLoadRing>
	}

	if(reload && In_Load)
 800c1e8:	4b2b      	ldr	r3, [pc, #172]	; (800c298 <CheckLoad+0x190>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d032      	beq.n	800c256 <CheckLoad+0x14e>
 800c1f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c1f4:	482c      	ldr	r0, [pc, #176]	; (800c2a8 <CheckLoad+0x1a0>)
 800c1f6:	f006 f8c7 	bl	8012388 <HAL_GPIO_ReadPin>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d12a      	bne.n	800c256 <CheckLoad+0x14e>
	{
		pick_enc_buf = pick_enc;
 800c200:	4b26      	ldr	r3, [pc, #152]	; (800c29c <CheckLoad+0x194>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a29      	ldr	r2, [pc, #164]	; (800c2ac <CheckLoad+0x1a4>)
 800c206:	6013      	str	r3, [r2, #0]

		if(blue)
 800c208:	4b29      	ldr	r3, [pc, #164]	; (800c2b0 <CheckLoad+0x1a8>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d012      	beq.n	800c236 <CheckLoad+0x12e>
		{
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c210:	e004      	b.n	800c21c <CheckLoad+0x114>
				pick_manual(2000);
 800c212:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c216:	4823      	ldr	r0, [pc, #140]	; (800c2a4 <CheckLoad+0x19c>)
 800c218:	f7f4 ffb7 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < BluePickMore)
 800c21c:	4b1f      	ldr	r3, [pc, #124]	; (800c29c <CheckLoad+0x194>)
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	4b22      	ldr	r3, [pc, #136]	; (800c2ac <CheckLoad+0x1a4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	2bb3      	cmp	r3, #179	; 0xb3
 800c228:	ddf3      	ble.n	800c212 <CheckLoad+0x10a>
 800c22a:	e00b      	b.n	800c244 <CheckLoad+0x13c>
		}
		else
		{
			while(pick_enc - pick_enc_buf < RedPickMore)
				pick_manual(2000);
 800c22c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c230:	481c      	ldr	r0, [pc, #112]	; (800c2a4 <CheckLoad+0x19c>)
 800c232:	f7f4 ffaa 	bl	800118a <WriteBDC>
			while(pick_enc - pick_enc_buf < RedPickMore)
 800c236:	4b19      	ldr	r3, [pc, #100]	; (800c29c <CheckLoad+0x194>)
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	4b1c      	ldr	r3, [pc, #112]	; (800c2ac <CheckLoad+0x1a4>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	2b99      	cmp	r3, #153	; 0x99
 800c242:	ddf3      	ble.n	800c22c <CheckLoad+0x124>
		}
		reload = 0;
 800c244:	4b14      	ldr	r3, [pc, #80]	; (800c298 <CheckLoad+0x190>)
 800c246:	2200      	movs	r2, #0
 800c248:	601a      	str	r2, [r3, #0]
		pick_stop;
 800c24a:	2100      	movs	r1, #0
 800c24c:	4815      	ldr	r0, [pc, #84]	; (800c2a4 <CheckLoad+0x19c>)
 800c24e:	f7f4 ff9c 	bl	800118a <WriteBDC>
		AutoLoadRing();
 800c252:	f000 f865 	bl	800c320 <AutoLoadRing>
	}

	if(reload)
 800c256:	4b10      	ldr	r3, [pc, #64]	; (800c298 <CheckLoad+0x190>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <CheckLoad+0x160>
		pick_manual(5000);
 800c25e:	f241 3188 	movw	r1, #5000	; 0x1388
 800c262:	4810      	ldr	r0, [pc, #64]	; (800c2a4 <CheckLoad+0x19c>)
 800c264:	f7f4 ff91 	bl	800118a <WriteBDC>

	if(loaded >= 7)
 800c268:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <CheckLoad+0x1ac>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b06      	cmp	r3, #6
 800c26e:	dd07      	ble.n	800c280 <CheckLoad+0x178>
	{
		adjust_servo;
 800c270:	f240 31b6 	movw	r1, #950	; 0x3b6
 800c274:	4810      	ldr	r0, [pc, #64]	; (800c2b8 <CheckLoad+0x1b0>)
 800c276:	f7fd fdb3 	bl	8009de0 <ServoSetPulse>
		load_adjust = 0;
 800c27a:	4b10      	ldr	r3, [pc, #64]	; (800c2bc <CheckLoad+0x1b4>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	601a      	str	r2, [r3, #0]

//	if(loaded >= 8)
//	{
//		load_adjust_servo;
//	}
	if(loaded >= 10)
 800c280:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <CheckLoad+0x1ac>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b09      	cmp	r3, #9
 800c286:	dd02      	ble.n	800c28e <CheckLoad+0x186>
		loaded = 0;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <CheckLoad+0x1ac>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]

}
 800c28e:	bf00      	nop
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20007348 	.word	0x20007348
 800c298:	2000774c 	.word	0x2000774c
 800c29c:	20006be0 	.word	0x20006be0
 800c2a0:	20009978 	.word	0x20009978
 800c2a4:	2000770c 	.word	0x2000770c
 800c2a8:	40021000 	.word	0x40021000
 800c2ac:	20009c40 	.word	0x20009c40
 800c2b0:	20006a1c 	.word	0x20006a1c
 800c2b4:	20009428 	.word	0x20009428
 800c2b8:	2000786c 	.word	0x2000786c
 800c2bc:	2000943c 	.word	0x2000943c

0800c2c0 <Checking>:
	}

}

void Checking()
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
	CheckShoot();
 800c2c4:	f7ff fea8 	bl	800c018 <CheckShoot>
	CheckLoad();
 800c2c8:	f7ff ff1e 	bl	800c108 <CheckLoad>
	CheckPick();
 800c2cc:	f7ff fc4c 	bl	800bb68 <CheckPick>
	CheckPitch();
 800c2d0:	f7ff fc06 	bl	800bae0 <CheckPitch>
}
 800c2d4:	bf00      	nop
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <LoadRing>:

void LoadRing(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
	load_start = 1;
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <LoadRing+0x20>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800c2e2:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <LoadRing+0x24>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]
	pick_up;
 800c2e8:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800c2ec:	4804      	ldr	r0, [pc, #16]	; (800c300 <LoadRing+0x28>)
 800c2ee:	f7f4 ff4c 	bl	800118a <WriteBDC>
}
 800c2f2:	bf00      	nop
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20007348 	.word	0x20007348
 800c2fc:	20009978 	.word	0x20009978
 800c300:	2000770c 	.word	0x2000770c

0800c304 <StopAutoPP>:

void StopAutoPP(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800c308:	4803      	ldr	r0, [pc, #12]	; (800c318 <StopAutoPP+0x14>)
 800c30a:	f7f9 fd76 	bl	8005dfa <PP_stop>
	RNSStop(&rns);
 800c30e:	4803      	ldr	r0, [pc, #12]	; (800c31c <StopAutoPP+0x18>)
 800c310:	f7fd f8d6 	bl	80094c0 <RNSStop>
}
 800c314:	bf00      	nop
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20006cc4 	.word	0x20006cc4
 800c31c:	20008f08 	.word	0x20008f08

0800c320 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
	cylinder_load;
 800c324:	4a0d      	ldr	r2, [pc, #52]	; (800c35c <AutoLoadRing+0x3c>)
 800c326:	7f13      	ldrb	r3, [r2, #28]
 800c328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32c:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c32e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c332:	f00a ff10 	bl	8017156 <osDelay>
	cylinder_retract;
 800c336:	4a09      	ldr	r2, [pc, #36]	; (800c35c <AutoLoadRing+0x3c>)
 800c338:	7f13      	ldrb	r3, [r2, #28]
 800c33a:	f36f 1386 	bfc	r3, #6, #1
 800c33e:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c344:	f00a ff07 	bl	8017156 <osDelay>
	loaded++;
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <AutoLoadRing+0x40>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3301      	adds	r3, #1
 800c34e:	4a04      	ldr	r2, [pc, #16]	; (800c360 <AutoLoadRing+0x40>)
 800c350:	6013      	str	r3, [r2, #0]

	AdjustRings();
 800c352:	f000 f807 	bl	800c364 <AdjustRings>
}
 800c356:	bf00      	nop
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	2000959c 	.word	0x2000959c
 800c360:	20009428 	.word	0x20009428

0800c364 <AdjustRings>:

void AdjustRings(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
	if(load_adjust)
 800c36a:	4b17      	ldr	r3, [pc, #92]	; (800c3c8 <AdjustRings+0x64>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d025      	beq.n	800c3be <AdjustRings+0x5a>
	{
		for(int i = 0; i < 4; i++)
 800c372:	2300      	movs	r3, #0
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	e01e      	b.n	800c3b6 <AdjustRings+0x52>
		{
			if(ps4.button == SQUARE)
 800c378:	4b14      	ldr	r3, [pc, #80]	; (800c3cc <AdjustRings+0x68>)
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c380:	d106      	bne.n	800c390 <AdjustRings+0x2c>
			{
				while(ps4.button == SQUARE);
 800c382:	bf00      	nop
 800c384:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <AdjustRings+0x68>)
 800c386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38c:	d0fa      	beq.n	800c384 <AdjustRings+0x20>
				break;
 800c38e:	e016      	b.n	800c3be <AdjustRings+0x5a>
			}

			load_adjust_servo;
 800c390:	f240 414c 	movw	r1, #1100	; 0x44c
 800c394:	480e      	ldr	r0, [pc, #56]	; (800c3d0 <AdjustRings+0x6c>)
 800c396:	f7fd fd23 	bl	8009de0 <ServoSetPulse>
			osDelay(100);
 800c39a:	2064      	movs	r0, #100	; 0x64
 800c39c:	f00a fedb 	bl	8017156 <osDelay>
			close_servo;
 800c3a0:	f240 3152 	movw	r1, #850	; 0x352
 800c3a4:	480a      	ldr	r0, [pc, #40]	; (800c3d0 <AdjustRings+0x6c>)
 800c3a6:	f7fd fd1b 	bl	8009de0 <ServoSetPulse>
			osDelay(100);
 800c3aa:	2064      	movs	r0, #100	; 0x64
 800c3ac:	f00a fed3 	bl	8017156 <osDelay>
		for(int i = 0; i < 4; i++)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	607b      	str	r3, [r7, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	dddd      	ble.n	800c378 <AdjustRings+0x14>
		}
	}
}
 800c3bc:	e7ff      	b.n	800c3be <AdjustRings+0x5a>
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	2000943c 	.word	0x2000943c
 800c3cc:	2000a014 	.word	0x2000a014
 800c3d0:	2000786c 	.word	0x2000786c

0800c3d4 <ResetCoordinate>:

void ResetCoordinate(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800c3d8:	2117      	movs	r1, #23
 800c3da:	4804      	ldr	r0, [pc, #16]	; (800c3ec <ResetCoordinate+0x18>)
 800c3dc:	f7fd f98e 	bl	80096fc <RNSSet>
	PP_reset(&pp);
 800c3e0:	4803      	ldr	r0, [pc, #12]	; (800c3f0 <ResetCoordinate+0x1c>)
 800c3e2:	f7f9 fd2b 	bl	8005e3c <PP_reset>
}
 800c3e6:	bf00      	nop
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20008f08 	.word	0x20008f08
 800c3f0:	20006cc4 	.word	0x20006cc4

0800c3f4 <ResetPickEnc>:

void ResetPickEnc(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	f7f5 fbeb 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800c3fe:	4b02      	ldr	r3, [pc, #8]	; (800c408 <ResetPickEnc+0x14>)
 800c400:	2200      	movs	r2, #0
 800c402:	601a      	str	r2, [r3, #0]
}
 800c404:	bf00      	nop
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20006be0 	.word	0x20006be0

0800c40c <enq>:

void enq(void) {
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800c410:	4908      	ldr	r1, [pc, #32]	; (800c434 <enq+0x28>)
 800c412:	2061      	movs	r0, #97	; 0x61
 800c414:	f7fd fb2c 	bl	8009a70 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800c418:	4b06      	ldr	r3, [pc, #24]	; (800c434 <enq+0x28>)
 800c41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41c:	4a06      	ldr	r2, [pc, #24]	; (800c438 <enq+0x2c>)
 800c41e:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800c420:	4b04      	ldr	r3, [pc, #16]	; (800c434 <enq+0x28>)
 800c422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c424:	4a05      	ldr	r2, [pc, #20]	; (800c43c <enq+0x30>)
 800c426:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800c428:	4b02      	ldr	r3, [pc, #8]	; (800c434 <enq+0x28>)
 800c42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c42c:	4a04      	ldr	r2, [pc, #16]	; (800c440 <enq+0x34>)
 800c42e:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800c430:	bf00      	nop
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20008f08 	.word	0x20008f08
 800c438:	200099b4 	.word	0x200099b4
 800c43c:	20009808 	.word	0x20009808
 800c440:	2000996c 	.word	0x2000996c
 800c444:	00000000 	.word	0x00000000

0800c448 <tune>:

void tune(void)
{
 800c448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af04      	add	r7, sp, #16
	if(ps4.button == UP)
 800c450:	4ba7      	ldr	r3, [pc, #668]	; (800c6f0 <tune+0x2a8>)
 800c452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c454:	2b10      	cmp	r3, #16
 800c456:	d10d      	bne.n	800c474 <tune+0x2c>
	{
		while(ps4.button == UP);
 800c458:	bf00      	nop
 800c45a:	4ba5      	ldr	r3, [pc, #660]	; (800c6f0 <tune+0x2a8>)
 800c45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45e:	2b10      	cmp	r3, #16
 800c460:	d0fb      	beq.n	800c45a <tune+0x12>
		tune_p = 1;
 800c462:	4ba4      	ldr	r3, [pc, #656]	; (800c6f4 <tune+0x2ac>)
 800c464:	2201      	movs	r2, #1
 800c466:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c468:	4ba3      	ldr	r3, [pc, #652]	; (800c6f8 <tune+0x2b0>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c46e:	4ba3      	ldr	r3, [pc, #652]	; (800c6fc <tune+0x2b4>)
 800c470:	2200      	movs	r2, #0
 800c472:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800c474:	4b9e      	ldr	r3, [pc, #632]	; (800c6f0 <tune+0x2a8>)
 800c476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c478:	2b40      	cmp	r3, #64	; 0x40
 800c47a:	d10d      	bne.n	800c498 <tune+0x50>
	{
		while(ps4.button == DOWN);
 800c47c:	bf00      	nop
 800c47e:	4b9c      	ldr	r3, [pc, #624]	; (800c6f0 <tune+0x2a8>)
 800c480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c482:	2b40      	cmp	r3, #64	; 0x40
 800c484:	d0fb      	beq.n	800c47e <tune+0x36>
		tune_p = 0;
 800c486:	4b9b      	ldr	r3, [pc, #620]	; (800c6f4 <tune+0x2ac>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]
		tune_i = 1;
 800c48c:	4b9a      	ldr	r3, [pc, #616]	; (800c6f8 <tune+0x2b0>)
 800c48e:	2201      	movs	r2, #1
 800c490:	601a      	str	r2, [r3, #0]
		tune_d = 0;
 800c492:	4b9a      	ldr	r3, [pc, #616]	; (800c6fc <tune+0x2b4>)
 800c494:	2200      	movs	r2, #0
 800c496:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == LEFT)
 800c498:	4b95      	ldr	r3, [pc, #596]	; (800c6f0 <tune+0x2a8>)
 800c49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d10d      	bne.n	800c4bc <tune+0x74>
	{
		while(ps4.button == LEFT);
 800c4a0:	bf00      	nop
 800c4a2:	4b93      	ldr	r3, [pc, #588]	; (800c6f0 <tune+0x2a8>)
 800c4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a6:	2b80      	cmp	r3, #128	; 0x80
 800c4a8:	d0fb      	beq.n	800c4a2 <tune+0x5a>
		tune_p = 0;
 800c4aa:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <tune+0x2ac>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c4b0:	4b91      	ldr	r3, [pc, #580]	; (800c6f8 <tune+0x2b0>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800c4b6:	4b91      	ldr	r3, [pc, #580]	; (800c6fc <tune+0x2b4>)
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800c4bc:	4b8c      	ldr	r3, [pc, #560]	; (800c6f0 <tune+0x2a8>)
 800c4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c0:	2b20      	cmp	r3, #32
 800c4c2:	d110      	bne.n	800c4e6 <tune+0x9e>
	{
		while(ps4.button == RIGHT);
 800c4c4:	bf00      	nop
 800c4c6:	4b8a      	ldr	r3, [pc, #552]	; (800c6f0 <tune+0x2a8>)
 800c4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ca:	2b20      	cmp	r3, #32
 800c4cc:	d0fb      	beq.n	800c4c6 <tune+0x7e>
		wheel++;
 800c4ce:	4b8c      	ldr	r3, [pc, #560]	; (800c700 <tune+0x2b8>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	4a8a      	ldr	r2, [pc, #552]	; (800c700 <tune+0x2b8>)
 800c4d6:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800c4d8:	4b89      	ldr	r3, [pc, #548]	; (800c700 <tune+0x2b8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	dd02      	ble.n	800c4e6 <tune+0x9e>
			wheel = 1;
 800c4e0:	4b87      	ldr	r3, [pc, #540]	; (800c700 <tune+0x2b8>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800c4e6:	4b83      	ldr	r3, [pc, #524]	; (800c6f4 <tune+0x2ac>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 809e 	beq.w	800c62c <tune+0x1e4>
	{
		switch(wheel)
 800c4f0:	4b83      	ldr	r3, [pc, #524]	; (800c700 <tune+0x2b8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	f200 81f4 	bhi.w	800c8e4 <tune+0x49c>
 800c4fc:	a201      	add	r2, pc, #4	; (adr r2, 800c504 <tune+0xbc>)
 800c4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c502:	bf00      	nop
 800c504:	0800c515 	.word	0x0800c515
 800c508:	0800c55b 	.word	0x0800c55b
 800c50c:	0800c5a1 	.word	0x0800c5a1
 800c510:	0800c5e7 	.word	0x0800c5e7
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800c514:	4b76      	ldr	r3, [pc, #472]	; (800c6f0 <tune+0x2a8>)
 800c516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c518:	4618      	mov	r0, r3
 800c51a:	f7f4 f815 	bl	8000548 <__aeabi_f2d>
 800c51e:	a372      	add	r3, pc, #456	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f4 f868 	bl	80005f8 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4614      	mov	r4, r2
 800c52e:	461d      	mov	r5, r3
 800c530:	4b74      	ldr	r3, [pc, #464]	; (800c704 <tune+0x2bc>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f7f4 f807 	bl	8000548 <__aeabi_f2d>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f3 fea3 	bl	800028c <__adddf3>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4610      	mov	r0, r2
 800c54c:	4619      	mov	r1, r3
 800c54e:	f7f4 fb4b 	bl	8000be8 <__aeabi_d2f>
 800c552:	4603      	mov	r3, r0
 800c554:	4a6b      	ldr	r2, [pc, #428]	; (800c704 <tune+0x2bc>)
 800c556:	6013      	str	r3, [r2, #0]
			break;
 800c558:	e1c4      	b.n	800c8e4 <tune+0x49c>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800c55a:	4b65      	ldr	r3, [pc, #404]	; (800c6f0 <tune+0x2a8>)
 800c55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c55e:	4618      	mov	r0, r3
 800c560:	f7f3 fff2 	bl	8000548 <__aeabi_f2d>
 800c564:	a360      	add	r3, pc, #384	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f7f4 f845 	bl	80005f8 <__aeabi_dmul>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4614      	mov	r4, r2
 800c574:	461d      	mov	r5, r3
 800c576:	4b64      	ldr	r3, [pc, #400]	; (800c708 <tune+0x2c0>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7f3 ffe4 	bl	8000548 <__aeabi_f2d>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f3 fe80 	bl	800028c <__adddf3>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4610      	mov	r0, r2
 800c592:	4619      	mov	r1, r3
 800c594:	f7f4 fb28 	bl	8000be8 <__aeabi_d2f>
 800c598:	4603      	mov	r3, r0
 800c59a:	4a5b      	ldr	r2, [pc, #364]	; (800c708 <tune+0x2c0>)
 800c59c:	6013      	str	r3, [r2, #0]
			break;
 800c59e:	e1a1      	b.n	800c8e4 <tune+0x49c>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800c5a0:	4b53      	ldr	r3, [pc, #332]	; (800c6f0 <tune+0x2a8>)
 800c5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7f3 ffcf 	bl	8000548 <__aeabi_f2d>
 800c5aa:	a34f      	add	r3, pc, #316	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	f7f4 f822 	bl	80005f8 <__aeabi_dmul>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	461d      	mov	r5, r3
 800c5bc:	4b53      	ldr	r3, [pc, #332]	; (800c70c <tune+0x2c4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f3 ffc1 	bl	8000548 <__aeabi_f2d>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f3 fe5d 	bl	800028c <__adddf3>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	4619      	mov	r1, r3
 800c5da:	f7f4 fb05 	bl	8000be8 <__aeabi_d2f>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4a4a      	ldr	r2, [pc, #296]	; (800c70c <tune+0x2c4>)
 800c5e2:	6013      	str	r3, [r2, #0]
			break;
 800c5e4:	e17e      	b.n	800c8e4 <tune+0x49c>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800c5e6:	4b42      	ldr	r3, [pc, #264]	; (800c6f0 <tune+0x2a8>)
 800c5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f3 ffac 	bl	8000548 <__aeabi_f2d>
 800c5f0:	a33d      	add	r3, pc, #244	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f3 ffff 	bl	80005f8 <__aeabi_dmul>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4614      	mov	r4, r2
 800c600:	461d      	mov	r5, r3
 800c602:	4b43      	ldr	r3, [pc, #268]	; (800c710 <tune+0x2c8>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4618      	mov	r0, r3
 800c608:	f7f3 ff9e 	bl	8000548 <__aeabi_f2d>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4620      	mov	r0, r4
 800c612:	4629      	mov	r1, r5
 800c614:	f7f3 fe3a 	bl	800028c <__adddf3>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4610      	mov	r0, r2
 800c61e:	4619      	mov	r1, r3
 800c620:	f7f4 fae2 	bl	8000be8 <__aeabi_d2f>
 800c624:	4603      	mov	r3, r0
 800c626:	4a3a      	ldr	r2, [pc, #232]	; (800c710 <tune+0x2c8>)
 800c628:	6013      	str	r3, [r2, #0]
			break;
 800c62a:	e15b      	b.n	800c8e4 <tune+0x49c>
		}
	}
	else if(tune_i)
 800c62c:	4b32      	ldr	r3, [pc, #200]	; (800c6f8 <tune+0x2b0>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	f000 80b9 	beq.w	800c7a8 <tune+0x360>
	{
		switch(wheel)
 800c636:	4b32      	ldr	r3, [pc, #200]	; (800c700 <tune+0x2b8>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	f200 8151 	bhi.w	800c8e4 <tune+0x49c>
 800c642:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <tune+0x200>)
 800c644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c648:	0800c659 	.word	0x0800c659
 800c64c:	0800c69f 	.word	0x0800c69f
 800c650:	0800c71d 	.word	0x0800c71d
 800c654:	0800c763 	.word	0x0800c763
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800c658:	4b25      	ldr	r3, [pc, #148]	; (800c6f0 <tune+0x2a8>)
 800c65a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7f3 ff73 	bl	8000548 <__aeabi_f2d>
 800c662:	a321      	add	r3, pc, #132	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c668:	f7f3 ffc6 	bl	80005f8 <__aeabi_dmul>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4614      	mov	r4, r2
 800c672:	461d      	mov	r5, r3
 800c674:	4b27      	ldr	r3, [pc, #156]	; (800c714 <tune+0x2cc>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4618      	mov	r0, r3
 800c67a:	f7f3 ff65 	bl	8000548 <__aeabi_f2d>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 fe01 	bl	800028c <__adddf3>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4610      	mov	r0, r2
 800c690:	4619      	mov	r1, r3
 800c692:	f7f4 faa9 	bl	8000be8 <__aeabi_d2f>
 800c696:	4603      	mov	r3, r0
 800c698:	4a1e      	ldr	r2, [pc, #120]	; (800c714 <tune+0x2cc>)
 800c69a:	6013      	str	r3, [r2, #0]
			break;
 800c69c:	e122      	b.n	800c8e4 <tune+0x49c>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800c69e:	4b14      	ldr	r3, [pc, #80]	; (800c6f0 <tune+0x2a8>)
 800c6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7f3 ff50 	bl	8000548 <__aeabi_f2d>
 800c6a8:	a30f      	add	r3, pc, #60	; (adr r3, 800c6e8 <tune+0x2a0>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f7f3 ffa3 	bl	80005f8 <__aeabi_dmul>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4614      	mov	r4, r2
 800c6b8:	461d      	mov	r5, r3
 800c6ba:	4b17      	ldr	r3, [pc, #92]	; (800c718 <tune+0x2d0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f3 ff42 	bl	8000548 <__aeabi_f2d>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 fdde 	bl	800028c <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	f7f4 fa86 	bl	8000be8 <__aeabi_d2f>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4a0e      	ldr	r2, [pc, #56]	; (800c718 <tune+0x2d0>)
 800c6e0:	6013      	str	r3, [r2, #0]
			break;
 800c6e2:	e0ff      	b.n	800c8e4 <tune+0x49c>
 800c6e4:	f3af 8000 	nop.w
 800c6e8:	eb1c432d 	.word	0xeb1c432d
 800c6ec:	3f1a36e2 	.word	0x3f1a36e2
 800c6f0:	2000a014 	.word	0x2000a014
 800c6f4:	2000737c 	.word	0x2000737c
 800c6f8:	20007210 	.word	0x20007210
 800c6fc:	2000980c 	.word	0x2000980c
 800c700:	200064dc 	.word	0x200064dc
 800c704:	2000a320 	.word	0x2000a320
 800c708:	200075b4 	.word	0x200075b4
 800c70c:	2000966c 	.word	0x2000966c
 800c710:	20009db0 	.word	0x20009db0
 800c714:	20007208 	.word	0x20007208
 800c718:	20009430 	.word	0x20009430
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800c71c:	4bb4      	ldr	r3, [pc, #720]	; (800c9f0 <tune+0x5a8>)
 800c71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c720:	4618      	mov	r0, r3
 800c722:	f7f3 ff11 	bl	8000548 <__aeabi_f2d>
 800c726:	a3ae      	add	r3, pc, #696	; (adr r3, 800c9e0 <tune+0x598>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f7f3 ff64 	bl	80005f8 <__aeabi_dmul>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4614      	mov	r4, r2
 800c736:	461d      	mov	r5, r3
 800c738:	4bae      	ldr	r3, [pc, #696]	; (800c9f4 <tune+0x5ac>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f3 ff03 	bl	8000548 <__aeabi_f2d>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f3 fd9f 	bl	800028c <__adddf3>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f4 fa47 	bl	8000be8 <__aeabi_d2f>
 800c75a:	4603      	mov	r3, r0
 800c75c:	4aa5      	ldr	r2, [pc, #660]	; (800c9f4 <tune+0x5ac>)
 800c75e:	6013      	str	r3, [r2, #0]
			break;
 800c760:	e0c0      	b.n	800c8e4 <tune+0x49c>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800c762:	4ba3      	ldr	r3, [pc, #652]	; (800c9f0 <tune+0x5a8>)
 800c764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c766:	4618      	mov	r0, r3
 800c768:	f7f3 feee 	bl	8000548 <__aeabi_f2d>
 800c76c:	a39c      	add	r3, pc, #624	; (adr r3, 800c9e0 <tune+0x598>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 ff41 	bl	80005f8 <__aeabi_dmul>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4614      	mov	r4, r2
 800c77c:	461d      	mov	r5, r3
 800c77e:	4b9e      	ldr	r3, [pc, #632]	; (800c9f8 <tune+0x5b0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4618      	mov	r0, r3
 800c784:	f7f3 fee0 	bl	8000548 <__aeabi_f2d>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	4620      	mov	r0, r4
 800c78e:	4629      	mov	r1, r5
 800c790:	f7f3 fd7c 	bl	800028c <__adddf3>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4610      	mov	r0, r2
 800c79a:	4619      	mov	r1, r3
 800c79c:	f7f4 fa24 	bl	8000be8 <__aeabi_d2f>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	4a95      	ldr	r2, [pc, #596]	; (800c9f8 <tune+0x5b0>)
 800c7a4:	6013      	str	r3, [r2, #0]
			break;
 800c7a6:	e09d      	b.n	800c8e4 <tune+0x49c>
		}
	}
	else
	{
		switch(wheel)
 800c7a8:	4b94      	ldr	r3, [pc, #592]	; (800c9fc <tune+0x5b4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	f200 8098 	bhi.w	800c8e4 <tune+0x49c>
 800c7b4:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <tune+0x374>)
 800c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ba:	bf00      	nop
 800c7bc:	0800c7cd 	.word	0x0800c7cd
 800c7c0:	0800c813 	.word	0x0800c813
 800c7c4:	0800c859 	.word	0x0800c859
 800c7c8:	0800c89f 	.word	0x0800c89f
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800c7cc:	4b88      	ldr	r3, [pc, #544]	; (800c9f0 <tune+0x5a8>)
 800c7ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7f3 feb9 	bl	8000548 <__aeabi_f2d>
 800c7d6:	a384      	add	r3, pc, #528	; (adr r3, 800c9e8 <tune+0x5a0>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 ff0c 	bl	80005f8 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4614      	mov	r4, r2
 800c7e6:	461d      	mov	r5, r3
 800c7e8:	4b85      	ldr	r3, [pc, #532]	; (800ca00 <tune+0x5b8>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7f3 feab 	bl	8000548 <__aeabi_f2d>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f3 fd47 	bl	800028c <__adddf3>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4610      	mov	r0, r2
 800c804:	4619      	mov	r1, r3
 800c806:	f7f4 f9ef 	bl	8000be8 <__aeabi_d2f>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4a7c      	ldr	r2, [pc, #496]	; (800ca00 <tune+0x5b8>)
 800c80e:	6013      	str	r3, [r2, #0]
			break;
 800c810:	e068      	b.n	800c8e4 <tune+0x49c>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800c812:	4b77      	ldr	r3, [pc, #476]	; (800c9f0 <tune+0x5a8>)
 800c814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c816:	4618      	mov	r0, r3
 800c818:	f7f3 fe96 	bl	8000548 <__aeabi_f2d>
 800c81c:	a372      	add	r3, pc, #456	; (adr r3, 800c9e8 <tune+0x5a0>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fee9 	bl	80005f8 <__aeabi_dmul>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	4614      	mov	r4, r2
 800c82c:	461d      	mov	r5, r3
 800c82e:	4b75      	ldr	r3, [pc, #468]	; (800ca04 <tune+0x5bc>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4618      	mov	r0, r3
 800c834:	f7f3 fe88 	bl	8000548 <__aeabi_f2d>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 fd24 	bl	800028c <__adddf3>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4610      	mov	r0, r2
 800c84a:	4619      	mov	r1, r3
 800c84c:	f7f4 f9cc 	bl	8000be8 <__aeabi_d2f>
 800c850:	4603      	mov	r3, r0
 800c852:	4a6c      	ldr	r2, [pc, #432]	; (800ca04 <tune+0x5bc>)
 800c854:	6013      	str	r3, [r2, #0]
			break;
 800c856:	e045      	b.n	800c8e4 <tune+0x49c>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800c858:	4b65      	ldr	r3, [pc, #404]	; (800c9f0 <tune+0x5a8>)
 800c85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f3 fe73 	bl	8000548 <__aeabi_f2d>
 800c862:	a361      	add	r3, pc, #388	; (adr r3, 800c9e8 <tune+0x5a0>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	f7f3 fec6 	bl	80005f8 <__aeabi_dmul>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4614      	mov	r4, r2
 800c872:	461d      	mov	r5, r3
 800c874:	4b64      	ldr	r3, [pc, #400]	; (800ca08 <tune+0x5c0>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f3 fe65 	bl	8000548 <__aeabi_f2d>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	f7f3 fd01 	bl	800028c <__adddf3>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4610      	mov	r0, r2
 800c890:	4619      	mov	r1, r3
 800c892:	f7f4 f9a9 	bl	8000be8 <__aeabi_d2f>
 800c896:	4603      	mov	r3, r0
 800c898:	4a5b      	ldr	r2, [pc, #364]	; (800ca08 <tune+0x5c0>)
 800c89a:	6013      	str	r3, [r2, #0]
			break;
 800c89c:	e022      	b.n	800c8e4 <tune+0x49c>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800c89e:	4b54      	ldr	r3, [pc, #336]	; (800c9f0 <tune+0x5a8>)
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f3 fe50 	bl	8000548 <__aeabi_f2d>
 800c8a8:	a34f      	add	r3, pc, #316	; (adr r3, 800c9e8 <tune+0x5a0>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	f7f3 fea3 	bl	80005f8 <__aeabi_dmul>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4614      	mov	r4, r2
 800c8b8:	461d      	mov	r5, r3
 800c8ba:	4b54      	ldr	r3, [pc, #336]	; (800ca0c <tune+0x5c4>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f3 fe42 	bl	8000548 <__aeabi_f2d>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7f3 fcde 	bl	800028c <__adddf3>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	f7f4 f986 	bl	8000be8 <__aeabi_d2f>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	4a4b      	ldr	r2, [pc, #300]	; (800ca0c <tune+0x5c4>)
 800c8e0:	6013      	str	r3, [r2, #0]
			break;
 800c8e2:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800c8e4:	4b42      	ldr	r3, [pc, #264]	; (800c9f0 <tune+0x5a8>)
 800c8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ec:	f040 80bc 	bne.w	800ca68 <tune+0x620>
	{
		while(ps4.button == OPTION);
 800c8f0:	bf00      	nop
 800c8f2:	4b3f      	ldr	r3, [pc, #252]	; (800c9f0 <tune+0x5a8>)
 800c8f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8fa:	d0fa      	beq.n	800c8f2 <tune+0x4aa>
		switch(wheel)
 800c8fc:	4b3f      	ldr	r3, [pc, #252]	; (800c9fc <tune+0x5b4>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	3b01      	subs	r3, #1
 800c902:	2b03      	cmp	r3, #3
 800c904:	f200 80b1 	bhi.w	800ca6a <tune+0x622>
 800c908:	a201      	add	r2, pc, #4	; (adr r2, 800c910 <tune+0x4c8>)
 800c90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90e:	bf00      	nop
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c961 	.word	0x0800c961
 800c918:	0800c9a1 	.word	0x0800c9a1
 800c91c:	0800ca29 	.word	0x0800ca29
		{
		case 1:
			RNSSet(&rns, RNS_F_LEFT_VEL_PID, AP, AI, AD);
 800c920:	4b3b      	ldr	r3, [pc, #236]	; (800ca10 <tune+0x5c8>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4618      	mov	r0, r3
 800c926:	f7f3 fe0f 	bl	8000548 <__aeabi_f2d>
 800c92a:	4680      	mov	r8, r0
 800c92c:	4689      	mov	r9, r1
 800c92e:	4b39      	ldr	r3, [pc, #228]	; (800ca14 <tune+0x5cc>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4618      	mov	r0, r3
 800c934:	f7f3 fe08 	bl	8000548 <__aeabi_f2d>
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	4b30      	ldr	r3, [pc, #192]	; (800ca00 <tune+0x5b8>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4618      	mov	r0, r3
 800c942:	f7f3 fe01 	bl	8000548 <__aeabi_f2d>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c94e:	e9cd 4500 	strd	r4, r5, [sp]
 800c952:	4642      	mov	r2, r8
 800c954:	464b      	mov	r3, r9
 800c956:	212f      	movs	r1, #47	; 0x2f
 800c958:	482f      	ldr	r0, [pc, #188]	; (800ca18 <tune+0x5d0>)
 800c95a:	f7fc fecf 	bl	80096fc <RNSSet>
			break;
 800c95e:	e084      	b.n	800ca6a <tune+0x622>

		case 2:
			RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI, BD);
 800c960:	4b2e      	ldr	r3, [pc, #184]	; (800ca1c <tune+0x5d4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7f3 fdef 	bl	8000548 <__aeabi_f2d>
 800c96a:	4680      	mov	r8, r0
 800c96c:	4689      	mov	r9, r1
 800c96e:	4b2c      	ldr	r3, [pc, #176]	; (800ca20 <tune+0x5d8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f7f3 fde8 	bl	8000548 <__aeabi_f2d>
 800c978:	4604      	mov	r4, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <tune+0x5bc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4618      	mov	r0, r3
 800c982:	f7f3 fde1 	bl	8000548 <__aeabi_f2d>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c98e:	e9cd 4500 	strd	r4, r5, [sp]
 800c992:	4642      	mov	r2, r8
 800c994:	464b      	mov	r3, r9
 800c996:	2130      	movs	r1, #48	; 0x30
 800c998:	481f      	ldr	r0, [pc, #124]	; (800ca18 <tune+0x5d0>)
 800c99a:	f7fc feaf 	bl	80096fc <RNSSet>
			break;
 800c99e:	e064      	b.n	800ca6a <tune+0x622>

		case 3:
			RNSSet(&rns, RNS_B_LEFT_VEL_PID, CP, CI, CD);
 800c9a0:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <tune+0x5dc>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7f3 fdcf 	bl	8000548 <__aeabi_f2d>
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	4689      	mov	r9, r1
 800c9ae:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <tune+0x5ac>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f3 fdc8 	bl	8000548 <__aeabi_f2d>
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <tune+0x5c0>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7f3 fdc1 	bl	8000548 <__aeabi_f2d>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9ce:	e9cd 4500 	strd	r4, r5, [sp]
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	2131      	movs	r1, #49	; 0x31
 800c9d8:	480f      	ldr	r0, [pc, #60]	; (800ca18 <tune+0x5d0>)
 800c9da:	f7fc fe8f 	bl	80096fc <RNSSet>
			break;
 800c9de:	e044      	b.n	800ca6a <tune+0x622>
 800c9e0:	eb1c432d 	.word	0xeb1c432d
 800c9e4:	3f1a36e2 	.word	0x3f1a36e2
 800c9e8:	88e368f1 	.word	0x88e368f1
 800c9ec:	3ee4f8b5 	.word	0x3ee4f8b5
 800c9f0:	2000a014 	.word	0x2000a014
 800c9f4:	20009804 	.word	0x20009804
 800c9f8:	20006a60 	.word	0x20006a60
 800c9fc:	200064dc 	.word	0x200064dc
 800ca00:	2000a2fc 	.word	0x2000a2fc
 800ca04:	20007204 	.word	0x20007204
 800ca08:	200064e0 	.word	0x200064e0
 800ca0c:	20009ad4 	.word	0x20009ad4
 800ca10:	2000a320 	.word	0x2000a320
 800ca14:	20007208 	.word	0x20007208
 800ca18:	20008f08 	.word	0x20008f08
 800ca1c:	200075b4 	.word	0x200075b4
 800ca20:	20009430 	.word	0x20009430
 800ca24:	2000966c 	.word	0x2000966c

		case 4:
			RNSSet(&rns, RNS_B_RIGHT_VEL_PID, DP, DI, DD);
 800ca28:	4b12      	ldr	r3, [pc, #72]	; (800ca74 <tune+0x62c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7f3 fd8b 	bl	8000548 <__aeabi_f2d>
 800ca32:	4680      	mov	r8, r0
 800ca34:	4689      	mov	r9, r1
 800ca36:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <tune+0x630>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f3 fd84 	bl	8000548 <__aeabi_f2d>
 800ca40:	4604      	mov	r4, r0
 800ca42:	460d      	mov	r5, r1
 800ca44:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <tune+0x634>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7f3 fd7d 	bl	8000548 <__aeabi_f2d>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca56:	e9cd 4500 	strd	r4, r5, [sp]
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	2132      	movs	r1, #50	; 0x32
 800ca60:	4807      	ldr	r0, [pc, #28]	; (800ca80 <tune+0x638>)
 800ca62:	f7fc fe4b 	bl	80096fc <RNSSet>
			break;
 800ca66:	e000      	b.n	800ca6a <tune+0x622>
		}
	}
 800ca68:	bf00      	nop
}
 800ca6a:	bf00      	nop
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ca72:	bf00      	nop
 800ca74:	20009db0 	.word	0x20009db0
 800ca78:	20006a60 	.word	0x20006a60
 800ca7c:	20009ad4 	.word	0x20009ad4
 800ca80:	20008f08 	.word	0x20008f08

0800ca84 <flywheelStop>:
	VESCPDC(leftU / 19999.00, &vesc1);
	VESCPDC(rightU / 19999.00, &vesc2);
}

void flywheelStop()
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	af00      	add	r7, sp, #0
	vesc_speed = 0;
 800ca88:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <flywheelStop+0x38>)
 800ca8a:	f04f 0200 	mov.w	r2, #0
 800ca8e:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&left_PID);
 800ca90:	480b      	ldr	r0, [pc, #44]	; (800cac0 <flywheelStop+0x3c>)
 800ca92:	f7f8 fd02 	bl	800549a <PIDDelayInit>
	PIDDelayInit(&right_PID);
 800ca96:	480b      	ldr	r0, [pc, #44]	; (800cac4 <flywheelStop+0x40>)
 800ca98:	f7f8 fcff 	bl	800549a <PIDDelayInit>

	leftU = 0;
 800ca9c:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <flywheelStop+0x44>)
 800ca9e:	f04f 0200 	mov.w	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]
	rightU = 0;
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <flywheelStop+0x48>)
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]

	VESCStop(&vesc1);
 800caac:	4808      	ldr	r0, [pc, #32]	; (800cad0 <flywheelStop+0x4c>)
 800caae:	f000 fe5d 	bl	800d76c <VESCStop>
	VESCStop(&vesc2);
 800cab2:	4808      	ldr	r0, [pc, #32]	; (800cad4 <flywheelStop+0x50>)
 800cab4:	f000 fe5a 	bl	800d76c <VESCStop>
}
 800cab8:	bf00      	nop
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	2000659c 	.word	0x2000659c
 800cac0:	20008eb4 	.word	0x20008eb4
 800cac4:	20009f58 	.word	0x20009f58
 800cac8:	20006880 	.word	0x20006880
 800cacc:	20006b00 	.word	0x20006b00
 800cad0:	20006b04 	.word	0x20006b04
 800cad4:	2000997c 	.word	0x2000997c

0800cad8 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800cadc:	4802      	ldr	r0, [pc, #8]	; (800cae8 <DMA1_Stream0_IRQHandler+0x10>)
 800cade:	f004 ff37 	bl	8011950 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800cae2:	bf00      	nop
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20009fac 	.word	0x20009fac

0800caec <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800caf0:	4802      	ldr	r0, [pc, #8]	; (800cafc <DMA1_Stream3_IRQHandler+0x10>)
 800caf2:	f004 ff2d 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800caf6:	bf00      	nop
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	2000653c 	.word	0x2000653c

0800cb00 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800cb04:	4802      	ldr	r0, [pc, #8]	; (800cb10 <DMA1_Stream2_IRQHandler+0x10>)
 800cb06:	f004 ff23 	bl	8011950 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800cb0a:	bf00      	nop
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20005a20 	.word	0x20005a20

0800cb14 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800cb18:	4802      	ldr	r0, [pc, #8]	; (800cb24 <DMA1_Stream1_IRQHandler+0x10>)
 800cb1a:	f004 ff19 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb1e:	bf00      	nop
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20005b64 	.word	0x20005b64

0800cb28 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800cb2c:	4802      	ldr	r0, [pc, #8]	; (800cb38 <DMA1_Stream4_IRQHandler+0x10>)
 800cb2e:	f004 ff0f 	bl	8011950 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800cb32:	bf00      	nop
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	200061d8 	.word	0x200061d8

0800cb3c <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cb40:	4802      	ldr	r0, [pc, #8]	; (800cb4c <DMA1_Stream5_IRQHandler+0x10>)
 800cb42:	f004 ff05 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb46:	bf00      	nop
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20005a80 	.word	0x20005a80

0800cb50 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cb54:	4802      	ldr	r0, [pc, #8]	; (800cb60 <DMA1_Stream6_IRQHandler+0x10>)
 800cb56:	f004 fefb 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb5a:	bf00      	nop
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20005d6c 	.word	0x20005d6c

0800cb64 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800cb68:	4802      	ldr	r0, [pc, #8]	; (800cb74 <DMA1_Stream7_IRQHandler+0x10>)
 800cb6a:	f004 fef1 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb6e:	bf00      	nop
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20006238 	.word	0x20006238

0800cb78 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800cb7c:	4802      	ldr	r0, [pc, #8]	; (800cb88 <DMA2_Stream0_IRQHandler+0x10>)
 800cb7e:	f004 fee7 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb82:	bf00      	nop
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200063d0 	.word	0x200063d0

0800cb8c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800cb90:	4802      	ldr	r0, [pc, #8]	; (800cb9c <DMA2_Stream1_IRQHandler+0x10>)
 800cb92:	f004 fedd 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cb96:	bf00      	nop
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	200062e0 	.word	0x200062e0

0800cba0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800cba4:	4802      	ldr	r0, [pc, #8]	; (800cbb0 <DMA2_Stream2_IRQHandler+0x10>)
 800cba6:	f004 fed3 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cbaa:	bf00      	nop
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20009ed0 	.word	0x20009ed0

0800cbb4 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800cbb8:	4802      	ldr	r0, [pc, #8]	; (800cbc4 <DMA2_Stream3_IRQHandler+0x10>)
 800cbba:	f004 fec9 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cbbe:	bf00      	nop
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20006430 	.word	0x20006430

0800cbc8 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800cbcc:	4802      	ldr	r0, [pc, #8]	; (800cbd8 <DMA2_Stream5_IRQHandler+0x10>)
 800cbce:	f004 febf 	bl	8011950 <HAL_DMA_IRQHandler>
}
 800cbd2:	bf00      	nop
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	2000a328 	.word	0x2000a328

0800cbdc <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0

}
 800cbe0:	bf00      	nop
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800cbea:	b480      	push	{r7}
 800cbec:	af00      	add	r7, sp, #0

}
 800cbee:	bf00      	nop
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	af00      	add	r7, sp, #0

	while(1){
 800cbfc:	e7fe      	b.n	800cbfc <MemManage_Handler+0x4>

0800cbfe <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	af00      	add	r7, sp, #0

}
 800cc02:	bf00      	nop
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0

}
 800cc10:	bf00      	nop
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	af00      	add	r7, sp, #0

}
 800cc1e:	bf00      	nop
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800cc2c:	4b14      	ldr	r3, [pc, #80]	; (800cc80 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b81      	cmp	r3, #129	; 0x81
 800cc34:	d109      	bne.n	800cc4a <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800cc36:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	3301      	adds	r3, #1
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	b21a      	sxth	r2, r3
 800cc44:	4b0f      	ldr	r3, [pc, #60]	; (800cc84 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc46:	805a      	strh	r2, [r3, #2]
 800cc48:	e00d      	b.n	800cc66 <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b91      	cmp	r3, #145	; 0x91
 800cc52:	d108      	bne.n	800cc66 <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800cc54:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	b21a      	sxth	r2, r3
 800cc62:	4b08      	ldr	r3, [pc, #32]	; (800cc84 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc64:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800cc66:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800cc6e:	20c8      	movs	r0, #200	; 0xc8
 800cc70:	f7f5 f810 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800cc74:	4804      	ldr	r0, [pc, #16]	; (800cc88 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800cc76:	f008 fb6f 	bl	8015358 <HAL_TIM_IRQHandler>
	return;
 800cc7a:	bf00      	nop
}
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20005f34 	.word	0x20005f34
 800cc84:	20006494 	.word	0x20006494
 800cc88:	20005c04 	.word	0x20005c04

0800cc8c <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800cc90:	4b12      	ldr	r3, [pc, #72]	; (800ccdc <TIM4_IRQHandler+0x50>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b81      	cmp	r3, #129	; 0x81
 800cc98:	d109      	bne.n	800ccae <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800cc9a:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <TIM4_IRQHandler+0x54>)
 800cc9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3301      	adds	r3, #1
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	b21a      	sxth	r2, r3
 800cca8:	4b0d      	ldr	r3, [pc, #52]	; (800cce0 <TIM4_IRQHandler+0x54>)
 800ccaa:	805a      	strh	r2, [r3, #2]
 800ccac:	e00d      	b.n	800ccca <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800ccae:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <TIM4_IRQHandler+0x50>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b91      	cmp	r3, #145	; 0x91
 800ccb6:	d108      	bne.n	800ccca <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800ccb8:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <TIM4_IRQHandler+0x54>)
 800ccba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	4b06      	ldr	r3, [pc, #24]	; (800cce0 <TIM4_IRQHandler+0x54>)
 800ccc8:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800ccca:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <TIM4_IRQHandler+0x50>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800ccd2:	2064      	movs	r0, #100	; 0x64
 800ccd4:	f7f4 ffde 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800ccd8:	bf00      	nop
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20005b24 	.word	0x20005b24
 800cce0:	200064b8 	.word	0x200064b8

0800cce4 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800cce8:	4803      	ldr	r0, [pc, #12]	; (800ccf8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800ccea:	f008 fb35 	bl	8015358 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800ccee:	4803      	ldr	r0, [pc, #12]	; (800ccfc <TIM8_UP_TIM13_IRQHandler+0x18>)
 800ccf0:	f008 fb32 	bl	8015358 <HAL_TIM_IRQHandler>
	return;
 800ccf4:	bf00      	nop
}
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20005ae4 	.word	0x20005ae4
 800ccfc:	20005dcc 	.word	0x20005dcc

0800cd00 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800cd04:	4802      	ldr	r0, [pc, #8]	; (800cd10 <TIM2_IRQHandler+0x10>)
 800cd06:	f008 fb27 	bl	8015358 <HAL_TIM_IRQHandler>
}
 800cd0a:	bf00      	nop
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20006038 	.word	0x20006038

0800cd14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd24:	d109      	bne.n	800cd3a <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800cd26:	f003 fc9f 	bl	8010668 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800cd2a:	4806      	ldr	r0, [pc, #24]	; (800cd44 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800cd2c:	f7f5 f87d 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800cd30:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	4a04      	ldr	r2, [pc, #16]	; (800cd48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd38:	6013      	str	r3, [r2, #0]
	}
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	2000959c 	.word	0x2000959c
 800cd48:	200096f0 	.word	0x200096f0

0800cd4c <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800cd54:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cd56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d102      	bne.n	800cd64 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800cd5e:	4803      	ldr	r0, [pc, #12]	; (800cd6c <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cd60:	f7fb ff44 	bl	8008bec <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	2000a014 	.word	0x2000a014

0800cd70 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800cd70:	b580      	push	{r7, lr}
 800cd72:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800cd74:	4802      	ldr	r0, [pc, #8]	; (800cd80 <I2C1_EV_IRQHandler+0x10>)
 800cd76:	f005 fdc3 	bl	8012900 <HAL_I2C_EV_IRQHandler>

}
 800cd7a:	bf00      	nop
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20006b88 	.word	0x20006b88

0800cd84 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800cd84:	b580      	push	{r7, lr}
 800cd86:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800cd88:	480a      	ldr	r0, [pc, #40]	; (800cdb4 <I2C1_ER_IRQHandler+0x30>)
 800cd8a:	f005 ff26 	bl	8012bda <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800cd8e:	480a      	ldr	r0, [pc, #40]	; (800cdb8 <I2C1_ER_IRQHandler+0x34>)
 800cd90:	f004 fd06 	bl	80117a0 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800cd94:	4807      	ldr	r0, [pc, #28]	; (800cdb4 <I2C1_ER_IRQHandler+0x30>)
 800cd96:	f005 fc6d 	bl	8012674 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800cd9a:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <I2C1_ER_IRQHandler+0x38>)
 800cd9c:	2208      	movs	r2, #8
 800cd9e:	4906      	ldr	r1, [pc, #24]	; (800cdb8 <I2C1_ER_IRQHandler+0x34>)
 800cda0:	4804      	ldr	r0, [pc, #16]	; (800cdb4 <I2C1_ER_IRQHandler+0x30>)
 800cda2:	f7f6 ff5f 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800cda6:	4903      	ldr	r1, [pc, #12]	; (800cdb4 <I2C1_ER_IRQHandler+0x30>)
 800cda8:	4805      	ldr	r0, [pc, #20]	; (800cdc0 <I2C1_ER_IRQHandler+0x3c>)
 800cdaa:	f7fb ff32 	bl	8008c12 <PSxInitDMA>

}
 800cdae:	bf00      	nop
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	20006b88 	.word	0x20006b88
 800cdb8:	20009fac 	.word	0x20009fac
 800cdbc:	00061a80 	.word	0x00061a80
 800cdc0:	2000a014 	.word	0x2000a014

0800cdc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08c      	sub	sp, #48	; 0x30
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	201c      	movs	r0, #28
 800cdda:	f004 fbed 	bl	80115b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cdde:	201c      	movs	r0, #28
 800cde0:	f004 fc06 	bl	80115f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	4b20      	ldr	r3, [pc, #128]	; (800ce6c <HAL_InitTick+0xa8>)
 800cdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdec:	4a1f      	ldr	r2, [pc, #124]	; (800ce6c <HAL_InitTick+0xa8>)
 800cdee:	f043 0301 	orr.w	r3, r3, #1
 800cdf2:	6413      	str	r3, [r2, #64]	; 0x40
 800cdf4:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <HAL_InitTick+0xa8>)
 800cdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	60fb      	str	r3, [r7, #12]
 800cdfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ce00:	f107 0210 	add.w	r2, r7, #16
 800ce04:	f107 0314 	add.w	r3, r7, #20
 800ce08:	4611      	mov	r1, r2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f007 ffae 	bl	8014d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ce10:	f007 ff84 	bl	8014d1c <HAL_RCC_GetPCLK1Freq>
 800ce14:	4603      	mov	r3, r0
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	4a14      	ldr	r2, [pc, #80]	; (800ce70 <HAL_InitTick+0xac>)
 800ce1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce22:	0c9b      	lsrs	r3, r3, #18
 800ce24:	3b01      	subs	r3, #1
 800ce26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ce28:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ce2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800ce30:	4b10      	ldr	r3, [pc, #64]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce32:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce36:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ce38:	4a0e      	ldr	r2, [pc, #56]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce44:	4b0b      	ldr	r3, [pc, #44]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce46:	2200      	movs	r2, #0
 800ce48:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ce4a:	480a      	ldr	r0, [pc, #40]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce4c:	f008 f8de 	bl	801500c <HAL_TIM_Base_Init>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d104      	bne.n	800ce60 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ce56:	4807      	ldr	r0, [pc, #28]	; (800ce74 <HAL_InitTick+0xb0>)
 800ce58:	f008 f927 	bl	80150aa <HAL_TIM_Base_Start_IT>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	e000      	b.n	800ce62 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3730      	adds	r7, #48	; 0x30
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	40023800 	.word	0x40023800
 800ce70:	431bde83 	.word	0x431bde83
 800ce74:	20006038 	.word	0x20006038

0800ce78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	af00      	add	r7, sp, #0
	return 1;
 800ce7c:	2301      	movs	r3, #1
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <_kill>:

int _kill(int pid, int sig)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ce92:	f00c feab 	bl	8019bec <__errno>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2216      	movs	r2, #22
 800ce9a:	601a      	str	r2, [r3, #0]
	return -1;
 800ce9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <_exit>:

void _exit (int status)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ceb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff ffe7 	bl	800ce88 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ceba:	e7fe      	b.n	800ceba <_exit+0x12>

0800cebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	e00a      	b.n	800cee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cece:	f3af 8000 	nop.w
 800ced2:	4601      	mov	r1, r0
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	60ba      	str	r2, [r7, #8]
 800ceda:	b2ca      	uxtb	r2, r1
 800cedc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	3301      	adds	r3, #1
 800cee2:	617b      	str	r3, [r7, #20]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	dbf0      	blt.n	800cece <_read+0x12>
	}

return len;
 800ceec:	687b      	ldr	r3, [r7, #4]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b086      	sub	sp, #24
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	60f8      	str	r0, [r7, #12]
 800cefe:	60b9      	str	r1, [r7, #8]
 800cf00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]
 800cf06:	e009      	b.n	800cf1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	60ba      	str	r2, [r7, #8]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	617b      	str	r3, [r7, #20]
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	dbf1      	blt.n	800cf08 <_write+0x12>
	}
	return len;
 800cf24:	687b      	ldr	r3, [r7, #4]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_close>:

int _close(int file)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
	return -1;
 800cf36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cf56:	605a      	str	r2, [r3, #4]
	return 0;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <_isatty>:

int _isatty(int file)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b083      	sub	sp, #12
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
	return 1;
 800cf6e:	2301      	movs	r3, #1
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
	return 0;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
	...

0800cf98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cfa0:	4a14      	ldr	r2, [pc, #80]	; (800cff4 <_sbrk+0x5c>)
 800cfa2:	4b15      	ldr	r3, [pc, #84]	; (800cff8 <_sbrk+0x60>)
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cfac:	4b13      	ldr	r3, [pc, #76]	; (800cffc <_sbrk+0x64>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cfb4:	4b11      	ldr	r3, [pc, #68]	; (800cffc <_sbrk+0x64>)
 800cfb6:	4a12      	ldr	r2, [pc, #72]	; (800d000 <_sbrk+0x68>)
 800cfb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cfba:	4b10      	ldr	r3, [pc, #64]	; (800cffc <_sbrk+0x64>)
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d207      	bcs.n	800cfd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cfc8:	f00c fe10 	bl	8019bec <__errno>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	220c      	movs	r2, #12
 800cfd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cfd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfd6:	e009      	b.n	800cfec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cfd8:	4b08      	ldr	r3, [pc, #32]	; (800cffc <_sbrk+0x64>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cfde:	4b07      	ldr	r3, [pc, #28]	; (800cffc <_sbrk+0x64>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	4a05      	ldr	r2, [pc, #20]	; (800cffc <_sbrk+0x64>)
 800cfe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cfea:	68fb      	ldr	r3, [r7, #12]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20020000 	.word	0x20020000
 800cff8:	00000400 	.word	0x00000400
 800cffc:	200002e8 	.word	0x200002e8
 800d000:	2000a6e8 	.word	0x2000a6e8

0800d004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d008:	4b08      	ldr	r3, [pc, #32]	; (800d02c <SystemInit+0x28>)
 800d00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d00e:	4a07      	ldr	r2, [pc, #28]	; (800d02c <SystemInit+0x28>)
 800d010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d018:	4b04      	ldr	r3, [pc, #16]	; (800d02c <SystemInit+0x28>)
 800d01a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d01e:	609a      	str	r2, [r3, #8]
#endif
}
 800d020:	bf00      	nop
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	e000ed00 	.word	0xe000ed00

0800d030 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	send_func = func;
 800d038:	4a04      	ldr	r2, [pc, #16]	; (800d04c <bldc_interface_init+0x1c>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6013      	str	r3, [r2, #0]
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	200002ec 	.word	0x200002ec

0800d050 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	1618      	asrs	r0, r3, #24
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	1c59      	adds	r1, r3, #1
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6011      	str	r1, [r2, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	b2c2      	uxtb	r2, r0
 800d072:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	1418      	asrs	r0, r3, #16
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	1c59      	adds	r1, r3, #1
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	6011      	str	r1, [r2, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4413      	add	r3, r2
 800d088:	b2c2      	uxtb	r2, r0
 800d08a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	1218      	asrs	r0, r3, #8
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	1c59      	adds	r1, r3, #1
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	6011      	str	r1, [r2, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4413      	add	r3, r2
 800d0a0:	b2c2      	uxtb	r2, r0
 800d0a2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	1c59      	adds	r1, r3, #1
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	6011      	str	r1, [r2, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800d0c6:	b480      	push	{r7}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	021b      	lsls	r3, r3, #8
 800d0de:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	440b      	add	r3, r1
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	1c9a      	adds	r2, r3, #2
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	601a      	str	r2, [r3, #0]
	return res;
 800d0fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4413      	add	r3, r2
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3301      	adds	r3, #1
 800d12a:	6879      	ldr	r1, [r7, #4]
 800d12c:	440b      	add	r3, r1
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d132:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3302      	adds	r3, #2
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	440b      	add	r3, r1
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800d142:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	6812      	ldr	r2, [r2, #0]
 800d148:	3203      	adds	r2, #3
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	440a      	add	r2, r1
 800d14e:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800d150:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d152:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	1d1a      	adds	r2, r3, #4
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	601a      	str	r2, [r3, #0]
	return res;
 800d15e:	68fb      	ldr	r3, [r7, #12]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	ed87 0a02 	vstr	s0, [r7, #8]
 800d178:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f7ff ffa2 	bl	800d0c6 <buffer_get_int16>
 800d182:	4603      	mov	r3, r0
 800d184:	ee07 3a90 	vmov	s15, r3
 800d188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d18c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d190:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d194:	eef0 7a66 	vmov.f32	s15, s13
}
 800d198:	eeb0 0a67 	vmov.f32	s0, s15
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	ed87 0a02 	vstr	s0, [r7, #8]
 800d1ae:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff ffaa 	bl	800d10c <buffer_get_int32>
 800d1b8:	ee07 0a90 	vmov	s15, r0
 800d1bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d1c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d1c8:	eef0 7a66 	vmov.f32	s15, s13
}
 800d1cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	e016      	b.n	800d21a <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d1ec:	897b      	ldrh	r3, [r7, #10]
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	1c5a      	adds	r2, r3, #1
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	404b      	eors	r3, r1
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	4a0b      	ldr	r2, [pc, #44]	; (800d230 <crc16+0x58>)
 800d202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d206:	b21a      	sxth	r2, r3
 800d208:	897b      	ldrh	r3, [r7, #10]
 800d20a:	021b      	lsls	r3, r3, #8
 800d20c:	b21b      	sxth	r3, r3
 800d20e:	4053      	eors	r3, r2
 800d210:	b21b      	sxth	r3, r3
 800d212:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d3e4      	bcc.n	800d1ec <crc16+0x14>
	}
	return cksum;
 800d222:	897b      	ldrh	r3, [r7, #10]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	080200e8 	.word	0x080200e8

0800d234 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	; 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	461a      	mov	r2, r3
 800d240:	4603      	mov	r3, r0
 800d242:	73fb      	strb	r3, [r7, #15]
 800d244:	4613      	mov	r3, r2
 800d246:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b06      	cmp	r3, #6
 800d24c:	d82b      	bhi.n	800d2a6 <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	61ba      	str	r2, [r7, #24]
 800d258:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d25c:	4413      	add	r3, r2
 800d25e:	221e      	movs	r2, #30
 800d260:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	61ba      	str	r2, [r7, #24]
 800d26a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d26e:	4413      	add	r3, r2
 800d270:	7bba      	ldrb	r2, [r7, #14]
 800d272:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800d276:	f107 0210 	add.w	r2, r7, #16
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	4413      	add	r3, r2
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	68b9      	ldr	r1, [r7, #8]
 800d282:	4618      	mov	r0, r3
 800d284:	f00c fce4 	bl	8019c50 <memcpy>
		ind += len;
 800d288:	69ba      	ldr	r2, [r7, #24]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4413      	add	r3, r2
 800d28e:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800d290:	7bfb      	ldrb	r3, [r7, #15]
 800d292:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	f107 0210 	add.w	r2, r7, #16
 800d29e:	4872      	ldr	r0, [pc, #456]	; (800d468 <comm_can_send_buffer+0x234>)
 800d2a0:	f7f6 fac2 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800d2a4:	e0dc      	b.n	800d460 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d2ae:	e03d      	b.n	800d32c <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	2bff      	cmp	r3, #255	; 0xff
 800d2b4:	d83f      	bhi.n	800d336 <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	3307      	adds	r3, #7
 800d2ba:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800d2bc:	2307      	movs	r3, #7
 800d2be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	3307      	adds	r3, #7
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d30b      	bcc.n	800d2ea <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800d2d2:	f107 0310 	add.w	r3, r7, #16
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2dc:	4411      	add	r1, r2
 800d2de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f00c fcb4 	bl	8019c50 <memcpy>
 800d2e8:	e011      	b.n	800d30e <comm_can_send_buffer+0xda>
				send_len = len - i;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800d2f8:	f107 0310 	add.w	r3, r7, #16
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	68b9      	ldr	r1, [r7, #8]
 800d300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d302:	4411      	add	r1, r2
 800d304:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d308:	4618      	mov	r0, r3
 800d30a:	f00c fca1 	bl	8019c50 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
 800d310:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800d314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d318:	3301      	adds	r3, #1
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	f107 0210 	add.w	r2, r7, #16
 800d320:	4851      	ldr	r0, [pc, #324]	; (800d468 <comm_can_send_buffer+0x234>)
 800d322:	f7f6 fa81 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	3307      	adds	r3, #7
 800d32a:	633b      	str	r3, [r7, #48]	; 0x30
 800d32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d3bd      	bcc.n	800d2b0 <comm_can_send_buffer+0x7c>
 800d334:	e000      	b.n	800d338 <comm_can_send_buffer+0x104>
				break;
 800d336:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d33c:	e03b      	b.n	800d3b6 <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800d33e:	2306      	movs	r3, #6
 800d340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	0a1b      	lsrs	r3, r3, #8
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800d34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	3306      	adds	r3, #6
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d30b      	bcc.n	800d374 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800d35c:	f107 0310 	add.w	r3, r7, #16
 800d360:	3302      	adds	r3, #2
 800d362:	68b9      	ldr	r1, [r7, #8]
 800d364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d366:	4411      	add	r1, r2
 800d368:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d36c:	4618      	mov	r0, r3
 800d36e:	f00c fc6f 	bl	8019c50 <memcpy>
 800d372:	e011      	b.n	800d398 <comm_can_send_buffer+0x164>
				send_len = len - i;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	b2da      	uxtb	r2, r3
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800d382:	f107 0310 	add.w	r3, r7, #16
 800d386:	3302      	adds	r3, #2
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d38c:	4411      	add	r1, r2
 800d38e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d392:	4618      	mov	r0, r3
 800d394:	f00c fc5c 	bl	8019c50 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800d39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a2:	3302      	adds	r3, #2
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	f107 0210 	add.w	r2, r7, #16
 800d3aa:	482f      	ldr	r0, [pc, #188]	; (800d468 <comm_can_send_buffer+0x234>)
 800d3ac:	f7f6 fa3c 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	3306      	adds	r3, #6
 800d3b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d3bf      	bcc.n	800d33e <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	623a      	str	r2, [r7, #32]
 800d3c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d3cc:	4413      	add	r3, r2
 800d3ce:	221e      	movs	r2, #30
 800d3d0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	623a      	str	r2, [r7, #32]
 800d3da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d3de:	4413      	add	r3, r2
 800d3e0:	7bba      	ldrb	r2, [r7, #14]
 800d3e2:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	0a19      	lsrs	r1, r3, #8
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	623a      	str	r2, [r7, #32]
 800d3f0:	b2ca      	uxtb	r2, r1
 800d3f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d3f6:	440b      	add	r3, r1
 800d3f8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	1c5a      	adds	r2, r3, #1
 800d400:	623a      	str	r2, [r7, #32]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	b2d2      	uxtb	r2, r2
 800d406:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d40a:	440b      	add	r3, r1
 800d40c:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	68b8      	ldr	r0, [r7, #8]
 800d414:	f7ff fee0 	bl	800d1d8 <crc16>
 800d418:	4603      	mov	r3, r0
 800d41a:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800d41c:	8bfb      	ldrh	r3, [r7, #30]
 800d41e:	0a1b      	lsrs	r3, r3, #8
 800d420:	b299      	uxth	r1, r3
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	623a      	str	r2, [r7, #32]
 800d428:	b2ca      	uxtb	r2, r1
 800d42a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d42e:	440b      	add	r3, r1
 800d430:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	623a      	str	r2, [r7, #32]
 800d43a:	8bfa      	ldrh	r2, [r7, #30]
 800d43c:	b2d2      	uxtb	r2, r2
 800d43e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d442:	440b      	add	r3, r1
 800d444:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f107 0210 	add.w	r2, r7, #16
 800d45a:	4803      	ldr	r0, [pc, #12]	; (800d468 <comm_can_send_buffer+0x234>)
 800d45c:	f7f6 f9e4 	bl	8003828 <CAN_TxMsgEID>
}
 800d460:	bf00      	nop
 800d462:	3738      	adds	r7, #56	; 0x38
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20009000 	.word	0x20009000
 800d46c:	00000000 	.word	0x00000000

0800d470 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	4603      	mov	r3, r0
 800d478:	ed87 0a00 	vstr	s0, [r7]
 800d47c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800d482:	6838      	ldr	r0, [r7, #0]
 800d484:	f7f3 f860 	bl	8000548 <__aeabi_f2d>
 800d488:	a310      	add	r3, pc, #64	; (adr r3, 800d4cc <comm_can_set_duty+0x5c>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	f7f3 f8b3 	bl	80005f8 <__aeabi_dmul>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4610      	mov	r0, r2
 800d498:	4619      	mov	r1, r3
 800d49a:	f7f3 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800d49e:	4601      	mov	r1, r0
 800d4a0:	f107 020c 	add.w	r2, r7, #12
 800d4a4:	f107 0308 	add.w	r3, r7, #8
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff fdd1 	bl	800d050 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d4ae:	79f9      	ldrb	r1, [r7, #7]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	f107 0208 	add.w	r2, r7, #8
 800d4b8:	4803      	ldr	r0, [pc, #12]	; (800d4c8 <comm_can_set_duty+0x58>)
 800d4ba:	f7f6 f9b5 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20009000 	.word	0x20009000
 800d4cc:	00000000 	.word	0x00000000
 800d4d0:	40f86a00 	.word	0x40f86a00

0800d4d4 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	ed87 0a00 	vstr	s0, [r7]
 800d4e0:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800d4e6:	6838      	ldr	r0, [r7, #0]
 800d4e8:	f7f3 f82e 	bl	8000548 <__aeabi_f2d>
 800d4ec:	f04f 0200 	mov.w	r2, #0
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <comm_can_set_current+0x5c>)
 800d4f2:	f7f3 f881 	bl	80005f8 <__aeabi_dmul>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f7f3 fb2b 	bl	8000b58 <__aeabi_d2iz>
 800d502:	4601      	mov	r1, r0
 800d504:	f107 020c 	add.w	r2, r7, #12
 800d508:	f107 0308 	add.w	r3, r7, #8
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff fd9f 	bl	800d050 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f107 0208 	add.w	r2, r7, #8
 800d520:	4804      	ldr	r0, [pc, #16]	; (800d534 <comm_can_set_current+0x60>)
 800d522:	f7f6 f981 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800d526:	bf00      	nop
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	408f4000 	.word	0x408f4000
 800d534:	20009000 	.word	0x20009000

0800d538 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	4603      	mov	r3, r0
 800d540:	ed87 0a00 	vstr	s0, [r7]
 800d544:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d546:	2300      	movs	r3, #0
 800d548:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800d54a:	edd7 7a00 	vldr	s15, [r7]
 800d54e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d552:	f107 020c 	add.w	r2, r7, #12
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	ee17 1a90 	vmov	r1, s15
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff fd76 	bl	800d050 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d564:	79fb      	ldrb	r3, [r7, #7]
 800d566:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f107 0208 	add.w	r2, r7, #8
 800d572:	4803      	ldr	r0, [pc, #12]	; (800d580 <comm_can_set_rpm+0x48>)
 800d574:	f7f6 f958 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20009000 	.word	0x20009000

0800d584 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	603b      	str	r3, [r7, #0]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800d58e:	4b30      	ldr	r3, [pc, #192]	; (800d650 <decode_VESC+0xcc>)
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	2b04      	cmp	r3, #4
 800d594:	d158      	bne.n	800d648 <decode_VESC+0xc4>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800d596:	4b2e      	ldr	r3, [pc, #184]	; (800d650 <decode_VESC+0xcc>)
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	71fb      	strb	r3, [r7, #7]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800d59c:	4b2c      	ldr	r3, [pc, #176]	; (800d650 <decode_VESC+0xcc>)
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	0a1b      	lsrs	r3, r3, #8
 800d5a2:	71bb      	strb	r3, [r7, #6]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800d5a4:	79bb      	ldrb	r3, [r7, #6]
 800d5a6:	2b09      	cmp	r3, #9
 800d5a8:	d14e      	bne.n	800d648 <decode_VESC+0xc4>
			{
				if(id == 111)
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	2b6f      	cmp	r3, #111	; 0x6f
 800d5ae:	d124      	bne.n	800d5fa <decode_VESC+0x76>
				{
					vesc1.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d5b8:	4826      	ldr	r0, [pc, #152]	; (800d654 <decode_VESC+0xd0>)
 800d5ba:	f7ff fdf2 	bl	800d1a2 <buffer_get_float32>
 800d5be:	eef0 7a40 	vmov.f32	s15, s0
 800d5c2:	4b25      	ldr	r3, [pc, #148]	; (800d658 <decode_VESC+0xd4>)
 800d5c4:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc1.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d5d0:	4820      	ldr	r0, [pc, #128]	; (800d654 <decode_VESC+0xd0>)
 800d5d2:	f7ff fdcb 	bl	800d16c <buffer_get_float16>
 800d5d6:	eef0 7a40 	vmov.f32	s15, s0
 800d5da:	4b1f      	ldr	r3, [pc, #124]	; (800d658 <decode_VESC+0xd4>)
 800d5dc:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc1.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d5e8:	481a      	ldr	r0, [pc, #104]	; (800d654 <decode_VESC+0xd0>)
 800d5ea:	f7ff fdbf 	bl	800d16c <buffer_get_float16>
 800d5ee:	eef0 7a40 	vmov.f32	s15, s0
 800d5f2:	4b19      	ldr	r3, [pc, #100]	; (800d658 <decode_VESC+0xd4>)
 800d5f4:	edc3 7a05 	vstr	s15, [r3, #20]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800d5f8:	e026      	b.n	800d648 <decode_VESC+0xc4>
				else if(id == 112)
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	2b70      	cmp	r3, #112	; 0x70
 800d5fe:	d123      	bne.n	800d648 <decode_VESC+0xc4>
					vesc2.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d600:	463b      	mov	r3, r7
 800d602:	4619      	mov	r1, r3
 800d604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d608:	4812      	ldr	r0, [pc, #72]	; (800d654 <decode_VESC+0xd0>)
 800d60a:	f7ff fdca 	bl	800d1a2 <buffer_get_float32>
 800d60e:	eef0 7a40 	vmov.f32	s15, s0
 800d612:	4b12      	ldr	r3, [pc, #72]	; (800d65c <decode_VESC+0xd8>)
 800d614:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d618:	463b      	mov	r3, r7
 800d61a:	4619      	mov	r1, r3
 800d61c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d620:	480c      	ldr	r0, [pc, #48]	; (800d654 <decode_VESC+0xd0>)
 800d622:	f7ff fda3 	bl	800d16c <buffer_get_float16>
 800d626:	eef0 7a40 	vmov.f32	s15, s0
 800d62a:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <decode_VESC+0xd8>)
 800d62c:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d630:	463b      	mov	r3, r7
 800d632:	4619      	mov	r1, r3
 800d634:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d638:	4806      	ldr	r0, [pc, #24]	; (800d654 <decode_VESC+0xd0>)
 800d63a:	f7ff fd97 	bl	800d16c <buffer_get_float16>
 800d63e:	eef0 7a40 	vmov.f32	s15, s0
 800d642:	4b06      	ldr	r3, [pc, #24]	; (800d65c <decode_VESC+0xd8>)
 800d644:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	200096c4 	.word	0x200096c4
 800d654:	200096e0 	.word	0x200096e0
 800d658:	20006b04 	.word	0x20006b04
 800d65c:	2000997c 	.word	0x2000997c

0800d660 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800d660:	b4b0      	push	{r4, r5, r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800d668:	4b16      	ldr	r3, [pc, #88]	; (800d6c4 <set_rx_frames+0x64>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	1c53      	adds	r3, r2, #1
 800d66e:	4915      	ldr	r1, [pc, #84]	; (800d6c4 <set_rx_frames+0x64>)
 800d670:	600b      	str	r3, [r1, #0]
 800d672:	4915      	ldr	r1, [pc, #84]	; (800d6c8 <set_rx_frames+0x68>)
 800d674:	4613      	mov	r3, r2
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	4413      	add	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	18ca      	adds	r2, r1, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4614      	mov	r4, r2
 800d682:	461d      	mov	r5, r3
 800d684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d68a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800d690:	4b0c      	ldr	r3, [pc, #48]	; (800d6c4 <set_rx_frames+0x64>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b64      	cmp	r3, #100	; 0x64
 800d696:	d102      	bne.n	800d69e <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800d698:	4b0a      	ldr	r3, [pc, #40]	; (800d6c4 <set_rx_frames+0x64>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	0a1b      	lsrs	r3, r3, #8
 800d6a4:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b07      	cmp	r3, #7
 800d6aa:	d002      	beq.n	800d6b2 <set_rx_frames+0x52>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b08      	cmp	r3, #8
 800d6b0:	d101      	bne.n	800d6b6 <set_rx_frames+0x56>
		return 112;
 800d6b2:	2370      	movs	r3, #112	; 0x70
 800d6b4:	e000      	b.n	800d6b8 <set_rx_frames+0x58>
	else
		return 0;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bcb0      	pop	{r4, r5, r7}
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	20001100 	.word	0x20001100
 800d6c8:	200002f0 	.word	0x200002f0

0800d6cc <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	ed87 0a05 	vstr	s0, [r7, #20]
 800d6d6:	edc7 0a04 	vstr	s1, [r7, #16]
 800d6da:	ed87 1a03 	vstr	s2, [r7, #12]
 800d6de:	4603      	mov	r3, r0
 800d6e0:	6079      	str	r1, [r7, #4]
 800d6e2:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800d6e4:	4809      	ldr	r0, [pc, #36]	; (800d70c <VESCInit+0x40>)
 800d6e6:	f7ff fca3 	bl	800d030 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	897a      	ldrh	r2, [r7, #10]
 800d700:	819a      	strh	r2, [r3, #12]
}
 800d702:	bf00      	nop
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	0800d7e9 	.word	0x0800d7e9

0800d710 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	ed87 0a01 	vstr	s0, [r7, #4]
 800d71a:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7f2 ff13 	bl	8000548 <__aeabi_f2d>
 800d722:	a310      	add	r3, pc, #64	; (adr r3, 800d764 <VESCPDC+0x54>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	f7f3 f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <VESCPDC+0x26>
		Duty = 0.9;
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <VESCPDC+0x50>)
 800d734:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	899b      	ldrh	r3, [r3, #12]
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	ed97 0a01 	vldr	s0, [r7, #4]
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff fe95 	bl	800d470 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	f892 3020 	ldrb.w	r3, [r2, #32]
 800d74c:	f043 0304 	orr.w	r3, r3, #4
 800d750:	f882 3020 	strb.w	r3, [r2, #32]
}
 800d754:	bf00      	nop
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	f3af 8000 	nop.w
 800d760:	3f666666 	.word	0x3f666666
 800d764:	cccccccd 	.word	0xcccccccd
 800d768:	3feccccc 	.word	0x3feccccc

0800d76c <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d007      	beq.n	800d794 <VESCStop+0x28>
		comm_can_set_duty(vesc->Instance, 0.0);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	899b      	ldrh	r3, [r3, #12]
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800d7e4 <VESCStop+0x78>
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fe6e 	bl	800d470 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d007      	beq.n	800d7b4 <VESCStop+0x48>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	899b      	ldrh	r3, [r3, #12]
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d7e4 <VESCStop+0x78>
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fec2 	bl	800d538 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d007      	beq.n	800d7d4 <VESCStop+0x68>
		comm_can_set_current(vesc->Instance, 0.0);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	899b      	ldrh	r3, [r3, #12]
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800d7e4 <VESCStop+0x78>
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff fe80 	bl	800d4d4 <comm_can_set_current>
	}

	vesc->flags = 0;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2020 	strb.w	r2, [r3, #32]
}
 800d7dc:	bf00      	nop
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	00000000 	.word	0x00000000

0800d7e8 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800d7f6:	7bf8      	ldrb	r0, [r7, #15]
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	f7ff fd19 	bl	800d234 <comm_can_send_buffer>
}
 800d802:	bf00      	nop
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.19, 0.94, 1.23, 0.96, -1.38, 0.89, -0.21, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	460b      	mov	r3, r1
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7afa      	ldrb	r2, [r7, #11]
 800d826:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800d830:	f36f 0382 	bfc	r3, #2, #1
 800d834:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294

	if(lidar->mode == CONTINUOUS)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d110      	bne.n	800d864 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	33c9      	adds	r3, #201	; 0xc9
 800d84c:	2205      	movs	r2, #5
 800d84e:	4619      	mov	r1, r3
 800d850:	f008 fcc2 	bl	80161d8 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 800d85a:	f36f 0300 	bfc	r3, #0, #1
 800d85e:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
		lidar->angle = B;
		lidar->angle_counter = 2;
		lidar->AdjEnb = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800d862:	e099      	b.n	800d998 <LidarInit+0x18c>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800d864:	4b4e      	ldr	r3, [pc, #312]	; (800d9a0 <LidarInit+0x194>)
 800d866:	edd3 7a00 	vldr	s15, [r3]
 800d86a:	4b4d      	ldr	r3, [pc, #308]	; (800d9a0 <LidarInit+0x194>)
 800d86c:	ed93 7a01 	vldr	s14, [r3, #4]
 800d870:	4b4b      	ldr	r3, [pc, #300]	; (800d9a0 <LidarInit+0x194>)
 800d872:	edd3 6a02 	vldr	s13, [r3, #8]
 800d876:	4b4a      	ldr	r3, [pc, #296]	; (800d9a0 <LidarInit+0x194>)
 800d878:	ed93 6a03 	vldr	s12, [r3, #12]
 800d87c:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <LidarInit+0x194>)
 800d87e:	edd3 5a04 	vldr	s11, [r3, #16]
 800d882:	4b47      	ldr	r3, [pc, #284]	; (800d9a0 <LidarInit+0x194>)
 800d884:	ed93 5a05 	vldr	s10, [r3, #20]
 800d888:	4b45      	ldr	r3, [pc, #276]	; (800d9a0 <LidarInit+0x194>)
 800d88a:	ed93 3a06 	vldr	s6, [r3, #24]
 800d88e:	4b44      	ldr	r3, [pc, #272]	; (800d9a0 <LidarInit+0x194>)
 800d890:	edd3 3a07 	vldr	s7, [r3, #28]
 800d894:	4b42      	ldr	r3, [pc, #264]	; (800d9a0 <LidarInit+0x194>)
 800d896:	ed93 4a08 	vldr	s8, [r3, #32]
 800d89a:	4b41      	ldr	r3, [pc, #260]	; (800d9a0 <LidarInit+0x194>)
 800d89c:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	eef0 2a45 	vmov.f32	s5, s10
 800d8a6:	eeb0 2a65 	vmov.f32	s4, s11
 800d8aa:	eef0 1a46 	vmov.f32	s3, s12
 800d8ae:	eeb0 1a66 	vmov.f32	s2, s13
 800d8b2:	eef0 0a47 	vmov.f32	s1, s14
 800d8b6:	eeb0 0a67 	vmov.f32	s0, s15
 800d8ba:	f000 f8df 	bl	800da7c <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800d8be:	4b39      	ldr	r3, [pc, #228]	; (800d9a4 <LidarInit+0x198>)
 800d8c0:	edd3 7a00 	vldr	s15, [r3]
 800d8c4:	4b37      	ldr	r3, [pc, #220]	; (800d9a4 <LidarInit+0x198>)
 800d8c6:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8ca:	4b36      	ldr	r3, [pc, #216]	; (800d9a4 <LidarInit+0x198>)
 800d8cc:	edd3 6a02 	vldr	s13, [r3, #8]
 800d8d0:	4b34      	ldr	r3, [pc, #208]	; (800d9a4 <LidarInit+0x198>)
 800d8d2:	ed93 6a03 	vldr	s12, [r3, #12]
 800d8d6:	4b33      	ldr	r3, [pc, #204]	; (800d9a4 <LidarInit+0x198>)
 800d8d8:	edd3 5a04 	vldr	s11, [r3, #16]
 800d8dc:	4b31      	ldr	r3, [pc, #196]	; (800d9a4 <LidarInit+0x198>)
 800d8de:	ed93 5a05 	vldr	s10, [r3, #20]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	eef0 2a45 	vmov.f32	s5, s10
 800d8e8:	eeb0 2a65 	vmov.f32	s4, s11
 800d8ec:	eef0 1a46 	vmov.f32	s3, s12
 800d8f0:	eeb0 1a66 	vmov.f32	s2, s13
 800d8f4:	eef0 0a47 	vmov.f32	s1, s14
 800d8f8:	eeb0 0a67 	vmov.f32	s0, s15
 800d8fc:	f000 f856 	bl	800d9ac <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800d900:	4b29      	ldr	r3, [pc, #164]	; (800d9a8 <LidarInit+0x19c>)
 800d902:	edd3 7a00 	vldr	s15, [r3]
 800d906:	4b28      	ldr	r3, [pc, #160]	; (800d9a8 <LidarInit+0x19c>)
 800d908:	ed93 7a01 	vldr	s14, [r3, #4]
 800d90c:	4b26      	ldr	r3, [pc, #152]	; (800d9a8 <LidarInit+0x19c>)
 800d90e:	edd3 6a02 	vldr	s13, [r3, #8]
 800d912:	4b25      	ldr	r3, [pc, #148]	; (800d9a8 <LidarInit+0x19c>)
 800d914:	ed93 6a03 	vldr	s12, [r3, #12]
 800d918:	4b23      	ldr	r3, [pc, #140]	; (800d9a8 <LidarInit+0x19c>)
 800d91a:	edd3 5a04 	vldr	s11, [r3, #16]
 800d91e:	4b22      	ldr	r3, [pc, #136]	; (800d9a8 <LidarInit+0x19c>)
 800d920:	ed93 5a05 	vldr	s10, [r3, #20]
 800d924:	4b20      	ldr	r3, [pc, #128]	; (800d9a8 <LidarInit+0x19c>)
 800d926:	edd3 4a06 	vldr	s9, [r3, #24]
 800d92a:	4b1f      	ldr	r3, [pc, #124]	; (800d9a8 <LidarInit+0x19c>)
 800d92c:	ed93 4a07 	vldr	s8, [r3, #28]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	eef0 3a44 	vmov.f32	s7, s8
 800d936:	eeb0 3a64 	vmov.f32	s6, s9
 800d93a:	eef0 2a45 	vmov.f32	s5, s10
 800d93e:	eeb0 2a65 	vmov.f32	s4, s11
 800d942:	eef0 1a46 	vmov.f32	s3, s12
 800d946:	eeb0 1a66 	vmov.f32	s2, s13
 800d94a:	eef0 0a47 	vmov.f32	s1, s14
 800d94e:	eeb0 0a67 	vmov.f32	s0, s15
 800d952:	f000 f859 	bl	800da08 <LidarCenterOffsetInit>
		lidar->response = NO;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->pos = PICK_LEFT;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = B;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2202      	movs	r2, #2
 800d972:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	33c9      	adds	r3, #201	; 0xc9
 800d990:	2202      	movs	r2, #2
 800d992:	4619      	mov	r1, r3
 800d994:	f008 fc20 	bl	80161d8 <HAL_UART_Receive_IT>
}
 800d998:	bf00      	nop
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20000070 	.word	0x20000070
 800d9a4:	20000058 	.word	0x20000058
 800d9a8:	20000098 	.word	0x20000098

0800d9ac <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b089      	sub	sp, #36	; 0x24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	ed87 0a07 	vstr	s0, [r7, #28]
 800d9b6:	edc7 0a06 	vstr	s1, [r7, #24]
 800d9ba:	ed87 1a05 	vstr	s2, [r7, #20]
 800d9be:	edc7 1a04 	vstr	s3, [r7, #16]
 800d9c2:	ed87 2a03 	vstr	s4, [r7, #12]
 800d9c6:	edc7 2a02 	vstr	s5, [r7, #8]
 800d9ca:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	69fa      	ldr	r2, [r7, #28]
 800d9d0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800d9fc:	bf00      	nop
 800d9fe:	3724      	adds	r7, #36	; 0x24
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800da08:	b480      	push	{r7}
 800da0a:	b08b      	sub	sp, #44	; 0x2c
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800da12:	edc7 0a08 	vstr	s1, [r7, #32]
 800da16:	ed87 1a07 	vstr	s2, [r7, #28]
 800da1a:	edc7 1a06 	vstr	s3, [r7, #24]
 800da1e:	ed87 2a05 	vstr	s4, [r7, #20]
 800da22:	edc7 2a04 	vstr	s5, [r7, #16]
 800da26:	ed87 3a03 	vstr	s6, [r7, #12]
 800da2a:	edc7 3a02 	vstr	s7, [r7, #8]
 800da2e:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a3a      	ldr	r2, [r7, #32]
 800da3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	69fa      	ldr	r2, [r7, #28]
 800da44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800da70:	bf00      	nop
 800da72:	372c      	adds	r7, #44	; 0x2c
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b08d      	sub	sp, #52	; 0x34
 800da80:	af00      	add	r7, sp, #0
 800da82:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800da86:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800da8a:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800da8e:	edc7 1a08 	vstr	s3, [r7, #32]
 800da92:	ed87 2a07 	vstr	s4, [r7, #28]
 800da96:	edc7 2a06 	vstr	s5, [r7, #24]
 800da9a:	ed87 3a05 	vstr	s6, [r7, #20]
 800da9e:	edc7 3a04 	vstr	s7, [r7, #16]
 800daa2:	ed87 4a03 	vstr	s8, [r7, #12]
 800daa6:	edc7 4a02 	vstr	s9, [r7, #8]
 800daaa:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac0:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a3a      	ldr	r2, [r7, #32]
 800dac8:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	69fa      	ldr	r2, [r7, #28]
 800dad0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	69ba      	ldr	r2, [r7, #24]
 800dad8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800dafc:	bf00      	nop
 800dafe:	3734      	adds	r7, #52	; 0x34
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800db08:	b5b0      	push	{r4, r5, r7, lr}
 800db0a:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 800db0e:	af00      	add	r7, sp, #0
 800db10:	4602      	mov	r2, r0
 800db12:	463b      	mov	r3, r7
 800db14:	6019      	str	r1, [r3, #0]
 800db16:	1dfb      	adds	r3, r7, #7
 800db18:	701a      	strb	r2, [r3, #0]
	// Pick Left
	float pick_left_adjust[1][7] = {{3.5, 1.8, 0.6, -90.0, 0, 0, 0}};
 800db1a:	4bc4      	ldr	r3, [pc, #784]	; (800de2c <LidarSetPos+0x324>)
 800db1c:	f507 7471 	add.w	r4, r7, #964	; 0x3c4
 800db20:	461d      	mov	r5, r3
 800db22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float bang_fence[1][7] = {{0.5, 0, 10, -90, 0, 0, 0}};
 800db2e:	4bc0      	ldr	r3, [pc, #768]	; (800de30 <LidarSetPos+0x328>)
 800db30:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 800db34:	461d      	mov	r5, r3
 800db36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};
 800db42:	4bbc      	ldr	r3, [pc, #752]	; (800de34 <LidarSetPos+0x32c>)
 800db44:	f507 7463 	add.w	r4, r7, #908	; 0x38c
 800db48:	461d      	mov	r5, r3
 800db4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{PoleSpeed, 1.3, 0.1, pp.real_z, 1, 0, 0}};
 800db56:	4bb8      	ldr	r3, [pc, #736]	; (800de38 <LidarSetPos+0x330>)
 800db58:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 800db5c:	4bb7      	ldr	r3, [pc, #732]	; (800de3c <LidarSetPos+0x334>)
 800db5e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800db62:	4bb7      	ldr	r3, [pc, #732]	; (800de40 <LidarSetPos+0x338>)
 800db64:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800db68:	4bb6      	ldr	r3, [pc, #728]	; (800de44 <LidarSetPos+0x33c>)
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800db70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800db74:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 800db78:	f04f 0300 	mov.w	r3, #0
 800db7c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800db80:	f04f 0300 	mov.w	r3, #0
 800db84:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	float center_2_to_center_1[1][7] = {{PoleSpeed, -1.30, 0.1, pp.real_z, 1, 0, 0}};
 800db88:	4bab      	ldr	r3, [pc, #684]	; (800de38 <LidarSetPos+0x330>)
 800db8a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800db8e:	4bae      	ldr	r3, [pc, #696]	; (800de48 <LidarSetPos+0x340>)
 800db90:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800db94:	4baa      	ldr	r3, [pc, #680]	; (800de40 <LidarSetPos+0x338>)
 800db96:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800db9a:	4baa      	ldr	r3, [pc, #680]	; (800de44 <LidarSetPos+0x33c>)
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800dba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dba6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800dbaa:	f04f 0300 	mov.w	r3, #0
 800dbae:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800dbb2:	f04f 0300 	mov.w	r3, #0
 800dbb6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	float center_2_to_center[1][7] = {{PoleSpeed, 1.1, 0.1, pp.real_z, 1, 0, 0}};
 800dbba:	4b9f      	ldr	r3, [pc, #636]	; (800de38 <LidarSetPos+0x330>)
 800dbbc:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800dbc0:	4ba2      	ldr	r3, [pc, #648]	; (800de4c <LidarSetPos+0x344>)
 800dbc2:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800dbc6:	4b9e      	ldr	r3, [pc, #632]	; (800de40 <LidarSetPos+0x338>)
 800dbc8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800dbcc:	4b9d      	ldr	r3, [pc, #628]	; (800de44 <LidarSetPos+0x33c>)
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800dbd4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dbd8:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800dbe4:	f04f 0300 	mov.w	r3, #0
 800dbe8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
	float center_to_center_2[1][7] = {{PoleSpeed, -1.1, 0.1, pp.real_z, 1, 0, 0}};
 800dbec:	4b92      	ldr	r3, [pc, #584]	; (800de38 <LidarSetPos+0x330>)
 800dbee:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800dbf2:	4b97      	ldr	r3, [pc, #604]	; (800de50 <LidarSetPos+0x348>)
 800dbf4:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800dbf8:	4b91      	ldr	r3, [pc, #580]	; (800de40 <LidarSetPos+0x338>)
 800dbfa:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800dbfe:	4b91      	ldr	r3, [pc, #580]	; (800de44 <LidarSetPos+0x33c>)
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800dc06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc0a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800dc0e:	f04f 0300 	mov.w	r3, #0
 800dc12:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	float center_to_center_3[1][7] = {{PoleSpeed, 0.9, 0.1, pp.real_z, 1, 0, 0}};
 800dc1e:	4b86      	ldr	r3, [pc, #536]	; (800de38 <LidarSetPos+0x330>)
 800dc20:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800dc24:	4b8b      	ldr	r3, [pc, #556]	; (800de54 <LidarSetPos+0x34c>)
 800dc26:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800dc2a:	4b85      	ldr	r3, [pc, #532]	; (800de40 <LidarSetPos+0x338>)
 800dc2c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800dc30:	4b84      	ldr	r3, [pc, #528]	; (800de44 <LidarSetPos+0x33c>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800dc38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc3c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800dc40:	f04f 0300 	mov.w	r3, #0
 800dc44:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800dc48:	f04f 0300 	mov.w	r3, #0
 800dc4c:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
	float center_3_to_center[1][7] = {{PoleSpeed, -0.7, 0.1, pp.real_z, 1, 0, 0}};
 800dc50:	4b79      	ldr	r3, [pc, #484]	; (800de38 <LidarSetPos+0x330>)
 800dc52:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800dc56:	4b80      	ldr	r3, [pc, #512]	; (800de58 <LidarSetPos+0x350>)
 800dc58:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800dc5c:	4b78      	ldr	r3, [pc, #480]	; (800de40 <LidarSetPos+0x338>)
 800dc5e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800dc62:	4b78      	ldr	r3, [pc, #480]	; (800de44 <LidarSetPos+0x33c>)
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800dc6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dc6e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800dc72:	f04f 0300 	mov.w	r3, #0
 800dc76:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
	float center_3_to_center_4[1][7] = {{PoleSpeed, 1.6, 0.1, pp.real_z, 1, 0, 0}};
 800dc82:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc86:	4a6c      	ldr	r2, [pc, #432]	; (800de38 <LidarSetPos+0x330>)
 800dc88:	601a      	str	r2, [r3, #0]
 800dc8a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc8e:	4a73      	ldr	r2, [pc, #460]	; (800de5c <LidarSetPos+0x354>)
 800dc90:	605a      	str	r2, [r3, #4]
 800dc92:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dc96:	4a6a      	ldr	r2, [pc, #424]	; (800de40 <LidarSetPos+0x338>)
 800dc98:	609a      	str	r2, [r3, #8]
 800dc9a:	4b6a      	ldr	r3, [pc, #424]	; (800de44 <LidarSetPos+0x33c>)
 800dc9c:	691a      	ldr	r2, [r3, #16]
 800dc9e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dca2:	60da      	str	r2, [r3, #12]
 800dca4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dca8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dcac:	611a      	str	r2, [r3, #16]
 800dcae:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dcb2:	f04f 0200 	mov.w	r2, #0
 800dcb6:	615a      	str	r2, [r3, #20]
 800dcb8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800dcbc:	f04f 0200 	mov.w	r2, #0
 800dcc0:	619a      	str	r2, [r3, #24]
	float center_4_to_center_3[1][7] = {{PoleSpeed, -1.6, 0.1, pp.real_z, 1, 0, 0}};
 800dcc2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcc6:	4a5c      	ldr	r2, [pc, #368]	; (800de38 <LidarSetPos+0x330>)
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcce:	4a64      	ldr	r2, [pc, #400]	; (800de60 <LidarSetPos+0x358>)
 800dcd0:	605a      	str	r2, [r3, #4]
 800dcd2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcd6:	4a5a      	ldr	r2, [pc, #360]	; (800de40 <LidarSetPos+0x338>)
 800dcd8:	609a      	str	r2, [r3, #8]
 800dcda:	4b5a      	ldr	r3, [pc, #360]	; (800de44 <LidarSetPos+0x33c>)
 800dcdc:	691a      	ldr	r2, [r3, #16]
 800dcde:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dce2:	60da      	str	r2, [r3, #12]
 800dce4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dce8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800dcec:	611a      	str	r2, [r3, #16]
 800dcee:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcf2:	f04f 0200 	mov.w	r2, #0
 800dcf6:	615a      	str	r2, [r3, #20]
 800dcf8:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800dcfc:	f04f 0200 	mov.w	r2, #0
 800dd00:	619a      	str	r2, [r3, #24]
	float center_4_to_upper_right[1][7] = {{PoleSpeed, 1.55, 0.0, pp.real_z, 0, 0, 0}};
 800dd02:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd06:	4a4c      	ldr	r2, [pc, #304]	; (800de38 <LidarSetPos+0x330>)
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd0e:	4a55      	ldr	r2, [pc, #340]	; (800de64 <LidarSetPos+0x35c>)
 800dd10:	605a      	str	r2, [r3, #4]
 800dd12:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd16:	f04f 0200 	mov.w	r2, #0
 800dd1a:	609a      	str	r2, [r3, #8]
 800dd1c:	4b49      	ldr	r3, [pc, #292]	; (800de44 <LidarSetPos+0x33c>)
 800dd1e:	691a      	ldr	r2, [r3, #16]
 800dd20:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd24:	60da      	str	r2, [r3, #12]
 800dd26:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd2a:	f04f 0200 	mov.w	r2, #0
 800dd2e:	611a      	str	r2, [r3, #16]
 800dd30:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd34:	f04f 0200 	mov.w	r2, #0
 800dd38:	615a      	str	r2, [r3, #20]
 800dd3a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dd3e:	f04f 0200 	mov.w	r2, #0
 800dd42:	619a      	str	r2, [r3, #24]
	float center_4_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dd44:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800dd48:	4a47      	ldr	r2, [pc, #284]	; (800de68 <LidarSetPos+0x360>)
 800dd4a:	461c      	mov	r4, r3
 800dd4c:	4615      	mov	r5, r2
 800dd4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4[1][7] = {{PoleSpeed, 0.5, -4.1, -90, 0, 0, 0}};
 800dd5a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800dd5e:	4a43      	ldr	r2, [pc, #268]	; (800de6c <LidarSetPos+0x364>)
 800dd60:	461c      	mov	r4, r3
 800dd62:	4615      	mov	r5, r2
 800dd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4_2[1][7] = {{PoleSpeed, -1.3, 0.0, -90.0, 0, 0, 0}};
 800dd70:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800dd74:	4a3e      	ldr	r2, [pc, #248]	; (800de70 <LidarSetPos+0x368>)
 800dd76:	461c      	mov	r4, r3
 800dd78:	4615      	mov	r5, r2
 800dd7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_pick_right[1][7] = {{PoleSpeed, 0.5, -4.35, -180.0, 0, 0, 0}};
 800dd86:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800dd8a:	4a3a      	ldr	r2, [pc, #232]	; (800de74 <LidarSetPos+0x36c>)
 800dd8c:	461c      	mov	r4, r3
 800dd8e:	4615      	mov	r5, r2
 800dd90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right[1][7] = {{PoleSpeed, -0.2, 0.5, -90, 0, 0, 0}};
 800dd9c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800dda0:	4a35      	ldr	r2, [pc, #212]	; (800de78 <LidarSetPos+0x370>)
 800dda2:	461c      	mov	r4, r3
 800dda4:	4615      	mov	r5, r2
 800dda6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dda8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right_2[1][7] = {{PoleSpeed, 0.2, 6, -178.0, 0, 0, 0}};
 800ddb2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800ddb6:	4a31      	ldr	r2, [pc, #196]	; (800de7c <LidarSetPos+0x374>)
 800ddb8:	461c      	mov	r4, r3
 800ddba:	4615      	mov	r5, r2
 800ddbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Offset 2 poles
	float center_1_to_center[1][7] = {{PoleSpeed, 2.7, 0.1, pp.real_z, 1, 0, 0}};
 800ddc8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddcc:	4a1a      	ldr	r2, [pc, #104]	; (800de38 <LidarSetPos+0x330>)
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddd4:	4a2a      	ldr	r2, [pc, #168]	; (800de80 <LidarSetPos+0x378>)
 800ddd6:	605a      	str	r2, [r3, #4]
 800ddd8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800dddc:	4a18      	ldr	r2, [pc, #96]	; (800de40 <LidarSetPos+0x338>)
 800ddde:	609a      	str	r2, [r3, #8]
 800dde0:	4b18      	ldr	r3, [pc, #96]	; (800de44 <LidarSetPos+0x33c>)
 800dde2:	691a      	ldr	r2, [r3, #16]
 800dde4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800dde8:	60da      	str	r2, [r3, #12]
 800ddea:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ddf2:	611a      	str	r2, [r3, #16]
 800ddf4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ddf8:	f04f 0200 	mov.w	r2, #0
 800ddfc:	615a      	str	r2, [r3, #20]
 800ddfe:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800de02:	f04f 0200 	mov.w	r2, #0
 800de06:	619a      	str	r2, [r3, #24]
	float center_to_center_1[1][7] = {{PoleSpeed, -2.7, 0.1, pp.real_z, 1, 0, 0}};
 800de08:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de0c:	4a0a      	ldr	r2, [pc, #40]	; (800de38 <LidarSetPos+0x330>)
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de14:	4a1b      	ldr	r2, [pc, #108]	; (800de84 <LidarSetPos+0x37c>)
 800de16:	605a      	str	r2, [r3, #4]
 800de18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de1c:	4a08      	ldr	r2, [pc, #32]	; (800de40 <LidarSetPos+0x338>)
 800de1e:	609a      	str	r2, [r3, #8]
 800de20:	4b08      	ldr	r3, [pc, #32]	; (800de44 <LidarSetPos+0x33c>)
 800de22:	691a      	ldr	r2, [r3, #16]
 800de24:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de28:	60da      	str	r2, [r3, #12]
 800de2a:	e02d      	b.n	800de88 <LidarSetPos+0x380>
 800de2c:	0801fea4 	.word	0x0801fea4
 800de30:	0801fec0 	.word	0x0801fec0
 800de34:	0801fedc 	.word	0x0801fedc
 800de38:	40d00000 	.word	0x40d00000
 800de3c:	3fa66666 	.word	0x3fa66666
 800de40:	3dcccccd 	.word	0x3dcccccd
 800de44:	20006cc4 	.word	0x20006cc4
 800de48:	bfa66666 	.word	0xbfa66666
 800de4c:	3f8ccccd 	.word	0x3f8ccccd
 800de50:	bf8ccccd 	.word	0xbf8ccccd
 800de54:	3f666666 	.word	0x3f666666
 800de58:	bf333333 	.word	0xbf333333
 800de5c:	3fcccccd 	.word	0x3fcccccd
 800de60:	bfcccccd 	.word	0xbfcccccd
 800de64:	3fc66666 	.word	0x3fc66666
 800de68:	0801fef8 	.word	0x0801fef8
 800de6c:	0801ff14 	.word	0x0801ff14
 800de70:	0801ff30 	.word	0x0801ff30
 800de74:	0801ff4c 	.word	0x0801ff4c
 800de78:	0801ff68 	.word	0x0801ff68
 800de7c:	0801ff84 	.word	0x0801ff84
 800de80:	402ccccd 	.word	0x402ccccd
 800de84:	c02ccccd 	.word	0xc02ccccd
 800de88:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800de90:	611a      	str	r2, [r3, #16]
 800de92:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	615a      	str	r2, [r3, #20]
 800de9c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dea0:	f04f 0200 	mov.w	r2, #0
 800dea4:	619a      	str	r2, [r3, #24]
	float center_to_center_4[1][7] = {{PoleSpeed, 2.35, 0.1, pp.real_z, 1, 0, 0}};
 800dea6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800deaa:	4abd      	ldr	r2, [pc, #756]	; (800e1a0 <LidarSetPos+0x698>)
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800deb2:	4abc      	ldr	r2, [pc, #752]	; (800e1a4 <LidarSetPos+0x69c>)
 800deb4:	605a      	str	r2, [r3, #4]
 800deb6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800deba:	4abb      	ldr	r2, [pc, #748]	; (800e1a8 <LidarSetPos+0x6a0>)
 800debc:	609a      	str	r2, [r3, #8]
 800debe:	4bbb      	ldr	r3, [pc, #748]	; (800e1ac <LidarSetPos+0x6a4>)
 800dec0:	691a      	ldr	r2, [r3, #16]
 800dec2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800dec6:	60da      	str	r2, [r3, #12]
 800dec8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800decc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ded0:	611a      	str	r2, [r3, #16]
 800ded2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800ded6:	f04f 0200 	mov.w	r2, #0
 800deda:	615a      	str	r2, [r3, #20]
 800dedc:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800dee0:	f04f 0200 	mov.w	r2, #0
 800dee4:	619a      	str	r2, [r3, #24]
	float center_4_to_center[1][7] = {{PoleSpeed, -2.56, 0.1, pp.real_z, 1, 0, 0}};
 800dee6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800deea:	4aad      	ldr	r2, [pc, #692]	; (800e1a0 <LidarSetPos+0x698>)
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800def2:	4aaf      	ldr	r2, [pc, #700]	; (800e1b0 <LidarSetPos+0x6a8>)
 800def4:	605a      	str	r2, [r3, #4]
 800def6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800defa:	4aab      	ldr	r2, [pc, #684]	; (800e1a8 <LidarSetPos+0x6a0>)
 800defc:	609a      	str	r2, [r3, #8]
 800defe:	4bab      	ldr	r3, [pc, #684]	; (800e1ac <LidarSetPos+0x6a4>)
 800df00:	691a      	ldr	r2, [r3, #16]
 800df02:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800df06:	60da      	str	r2, [r3, #12]
 800df08:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800df0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df10:	611a      	str	r2, [r3, #16]
 800df12:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800df16:	f04f 0200 	mov.w	r2, #0
 800df1a:	615a      	str	r2, [r3, #20]
 800df1c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800df20:	f04f 0200 	mov.w	r2, #0
 800df24:	619a      	str	r2, [r3, #24]
	float center_2_to_center_3[1][7] = {{PoleSpeed, 2.1, 0.1, pp.real_z, 1, 0, 0}};
 800df26:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df2a:	4a9d      	ldr	r2, [pc, #628]	; (800e1a0 <LidarSetPos+0x698>)
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df32:	4aa0      	ldr	r2, [pc, #640]	; (800e1b4 <LidarSetPos+0x6ac>)
 800df34:	605a      	str	r2, [r3, #4]
 800df36:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df3a:	4a9b      	ldr	r2, [pc, #620]	; (800e1a8 <LidarSetPos+0x6a0>)
 800df3c:	609a      	str	r2, [r3, #8]
 800df3e:	4b9b      	ldr	r3, [pc, #620]	; (800e1ac <LidarSetPos+0x6a4>)
 800df40:	691a      	ldr	r2, [r3, #16]
 800df42:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df46:	60da      	str	r2, [r3, #12]
 800df48:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df50:	611a      	str	r2, [r3, #16]
 800df52:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df56:	f04f 0200 	mov.w	r2, #0
 800df5a:	615a      	str	r2, [r3, #20]
 800df5c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800df60:	f04f 0200 	mov.w	r2, #0
 800df64:	619a      	str	r2, [r3, #24]
	float center_3_to_center_2[1][7] = {{PoleSpeed, -2.0, 0.1, pp.real_z, 1, 0, 0}};
 800df66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df6a:	4a8d      	ldr	r2, [pc, #564]	; (800e1a0 <LidarSetPos+0x698>)
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df72:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800df76:	605a      	str	r2, [r3, #4]
 800df78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df7c:	4a8a      	ldr	r2, [pc, #552]	; (800e1a8 <LidarSetPos+0x6a0>)
 800df7e:	609a      	str	r2, [r3, #8]
 800df80:	4b8a      	ldr	r3, [pc, #552]	; (800e1ac <LidarSetPos+0x6a4>)
 800df82:	691a      	ldr	r2, [r3, #16]
 800df84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df92:	611a      	str	r2, [r3, #16]
 800df94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df98:	f04f 0200 	mov.w	r2, #0
 800df9c:	615a      	str	r2, [r3, #20]
 800df9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dfa2:	f04f 0200 	mov.w	r2, #0
 800dfa6:	619a      	str	r2, [r3, #24]
	float center_3_to_upper_right[1][7] = {{PoleSpeed, 3.4, 0.1, pp.real_z, 0, 0, 0}};
 800dfa8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfac:	4a7c      	ldr	r2, [pc, #496]	; (800e1a0 <LidarSetPos+0x698>)
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfb4:	4a80      	ldr	r2, [pc, #512]	; (800e1b8 <LidarSetPos+0x6b0>)
 800dfb6:	605a      	str	r2, [r3, #4]
 800dfb8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfbc:	4a7a      	ldr	r2, [pc, #488]	; (800e1a8 <LidarSetPos+0x6a0>)
 800dfbe:	609a      	str	r2, [r3, #8]
 800dfc0:	4b7a      	ldr	r3, [pc, #488]	; (800e1ac <LidarSetPos+0x6a4>)
 800dfc2:	691a      	ldr	r2, [r3, #16]
 800dfc4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfce:	f04f 0200 	mov.w	r2, #0
 800dfd2:	611a      	str	r2, [r3, #16]
 800dfd4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfd8:	f04f 0200 	mov.w	r2, #0
 800dfdc:	615a      	str	r2, [r3, #20]
 800dfde:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dfe2:	f04f 0200 	mov.w	r2, #0
 800dfe6:	619a      	str	r2, [r3, #24]
	float center_3_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dfe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfec:	4a73      	ldr	r2, [pc, #460]	; (800e1bc <LidarSetPos+0x6b4>)
 800dfee:	461c      	mov	r4, r3
 800dff0:	4615      	mov	r5, r2
 800dff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3[1][7] = {{PoleSpeed, 0.5, -4.2, -90, 0, 0, 0}};
 800dffe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e002:	4a6f      	ldr	r2, [pc, #444]	; (800e1c0 <LidarSetPos+0x6b8>)
 800e004:	461c      	mov	r4, r3
 800e006:	4615      	mov	r5, r2
 800e008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e00a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e00c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3_2[1][7] = {{PoleSpeed, -3.3, 0.0, -90, 0, 0, 0}};
 800e014:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e018:	4a6a      	ldr	r2, [pc, #424]	; (800e1c4 <LidarSetPos+0x6bc>)
 800e01a:	461c      	mov	r4, r3
 800e01c:	4615      	mov	r5, r2
 800e01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_pick_right[1][7] = {{PoleSpeed, 1.6, -0.5, -90, 0, 0, 0}};
 800e02a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e02e:	4a66      	ldr	r2, [pc, #408]	; (800e1c8 <LidarSetPos+0x6c0>)
 800e030:	461c      	mov	r4, r3
 800e032:	4615      	mov	r5, r2
 800e034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float pick_right_to_center_4_servo[1][7] = {{4.0, 0, 0.4, -90, 0, 0, 0}};
 800e040:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e044:	4a61      	ldr	r2, [pc, #388]	; (800e1cc <LidarSetPos+0x6c4>)
 800e046:	461c      	mov	r4, r3
 800e048:	4615      	mov	r5, r2
 800e04a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e04c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e04e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{PoleSpeed, -2.1, 0.3, -90, 1, 0, 0}};
 800e056:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e05a:	4a5d      	ldr	r2, [pc, #372]	; (800e1d0 <LidarSetPos+0x6c8>)
 800e05c:	461c      	mov	r4, r3
 800e05e:	4615      	mov	r5, r2
 800e060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e068:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float center_3_to_pick_right[1][7] = {{PoleSpeed, 2.7, -0.5, -90, 0, 0, 0}};
 800e06c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e070:	4a58      	ldr	r2, [pc, #352]	; (800e1d4 <LidarSetPos+0x6cc>)
 800e072:	461c      	mov	r4, r3
 800e074:	4615      	mov	r5, r2
 800e076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e07a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e07e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_pick_right[1][7] = {{PoleSpeed, 4.1, -0.5, -90, 0, 0, 0}};
 800e082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e086:	4a54      	ldr	r2, [pc, #336]	; (800e1d8 <LidarSetPos+0x6d0>)
 800e088:	461c      	mov	r4, r3
 800e08a:	4615      	mov	r5, r2
 800e08c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e08e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_pick_right[1][7] = {{PoleSpeed, 5.5, -0.5, -90, 0, 0, 0}};
 800e098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e09c:	4a4f      	ldr	r2, [pc, #316]	; (800e1dc <LidarSetPos+0x6d4>)
 800e09e:	461c      	mov	r4, r3
 800e0a0:	4615      	mov	r5, r2
 800e0a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e0aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_pick_right[1][7] = {{PoleSpeed, 6.8, -0.5, -90, 0, 0, 0}};
 800e0ae:	f107 030c 	add.w	r3, r7, #12
 800e0b2:	4a4b      	ldr	r2, [pc, #300]	; (800e1e0 <LidarSetPos+0x6d8>)
 800e0b4:	461c      	mov	r4, r3
 800e0b6:	4615      	mov	r5, r2
 800e0b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e0c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(pose) // Target Pose
 800e0c4:	1dfb      	adds	r3, r7, #7
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	3b02      	subs	r3, #2
 800e0ca:	2b07      	cmp	r3, #7
 800e0cc:	f201 8554 	bhi.w	800fb78 <LidarSetPos+0x2070>
 800e0d0:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <LidarSetPos+0x5d0>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e0f9 	.word	0x0800e0f9
 800e0dc:	0800e167 	.word	0x0800e167
 800e0e0:	0800e455 	.word	0x0800e455
 800e0e4:	0800e75f 	.word	0x0800e75f
 800e0e8:	0800eae1 	.word	0x0800eae1
 800e0ec:	0800eee7 	.word	0x0800eee7
 800e0f0:	0800f311 	.word	0x0800f311
 800e0f4:	0800f71d 	.word	0x0800f71d
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e100:	3b01      	subs	r3, #1
 800e102:	2b08      	cmp	r3, #8
 800e104:	d82c      	bhi.n	800e160 <LidarSetPos+0x658>
 800e106:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <LidarSetPos+0x604>)
 800e108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10c:	0800e131 	.word	0x0800e131
 800e110:	0800e161 	.word	0x0800e161
 800e114:	0800e161 	.word	0x0800e161
 800e118:	0800e161 	.word	0x0800e161
 800e11c:	0800e149 	.word	0x0800e149
 800e120:	0800e161 	.word	0x0800e161
 800e124:	0800e161 	.word	0x0800e161
 800e128:	0800e155 	.word	0x0800e155
 800e12c:	0800e13d 	.word	0x0800e13d
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800e130:	463b      	mov	r3, r7
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2202      	movs	r2, #2
 800e136:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e13a:	e012      	b.n	800e162 <LidarSetPos+0x65a>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800e13c:	463b      	mov	r3, r7
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2202      	movs	r2, #2
 800e142:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e146:	e00c      	b.n	800e162 <LidarSetPos+0x65a>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800e148:	463b      	mov	r3, r7
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2202      	movs	r2, #2
 800e14e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e152:	e006      	b.n	800e162 <LidarSetPos+0x65a>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800e154:	463b      	mov	r3, r7
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2202      	movs	r2, #2
 800e15a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e15e:	e000      	b.n	800e162 <LidarSetPos+0x65a>

				default:
					break;
 800e160:	bf00      	nop

			}
			break;
 800e162:	f001 bd0a 	b.w	800fb7a <LidarSetPos+0x2072>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800e166:	463b      	mov	r3, r7
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e16e:	3b01      	subs	r3, #1
 800e170:	2b08      	cmp	r3, #8
 800e172:	f200 8163 	bhi.w	800e43c <LidarSetPos+0x934>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <LidarSetPos+0x674>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e1e5 	.word	0x0800e1e5
 800e180:	0800e2cd 	.word	0x0800e2cd
 800e184:	0800e43d 	.word	0x0800e43d
 800e188:	0800e2e5 	.word	0x0800e2e5
 800e18c:	0800e391 	.word	0x0800e391
 800e190:	0800e43d 	.word	0x0800e43d
 800e194:	0800e43d 	.word	0x0800e43d
 800e198:	0800e2d9 	.word	0x0800e2d9
 800e19c:	0800e2c1 	.word	0x0800e2c1
 800e1a0:	40d00000 	.word	0x40d00000
 800e1a4:	40166666 	.word	0x40166666
 800e1a8:	3dcccccd 	.word	0x3dcccccd
 800e1ac:	20006cc4 	.word	0x20006cc4
 800e1b0:	c023d70a 	.word	0xc023d70a
 800e1b4:	40066666 	.word	0x40066666
 800e1b8:	4059999a 	.word	0x4059999a
 800e1bc:	0801fef8 	.word	0x0801fef8
 800e1c0:	0801ffa0 	.word	0x0801ffa0
 800e1c4:	0801ffbc 	.word	0x0801ffbc
 800e1c8:	0801ffd8 	.word	0x0801ffd8
 800e1cc:	0801fff4 	.word	0x0801fff4
 800e1d0:	08020010 	.word	0x08020010
 800e1d4:	0802002c 	.word	0x0802002c
 800e1d8:	08020048 	.word	0x08020048
 800e1dc:	08020064 	.word	0x08020064
 800e1e0:	08020080 	.word	0x08020080
			{
				case PICK_LEFT:
					stick_fence = 0;
 800e1e4:	4bb6      	ldr	r3, [pc, #728]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e1ea:	4bb6      	ldr	r3, [pc, #728]	; (800e4c4 <LidarSetPos+0x9bc>)
 800e1ec:	4ab6      	ldr	r2, [pc, #728]	; (800e4c8 <LidarSetPos+0x9c0>)
 800e1ee:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e1f0:	4bb6      	ldr	r3, [pc, #728]	; (800e4cc <LidarSetPos+0x9c4>)
 800e1f2:	4ab7      	ldr	r2, [pc, #732]	; (800e4d0 <LidarSetPos+0x9c8>)
 800e1f4:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e1f6:	f7fe f8ed 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e1fa:	463b      	mov	r3, r7
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2203      	movs	r2, #3
 800e200:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					PP_start(pick_left_adjust, 1, &pp);
 800e204:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800e208:	4ab2      	ldr	r2, [pc, #712]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e20a:	2101      	movs	r1, #1
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f7 fbba 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e212:	e00d      	b.n	800e230 <LidarSetPos+0x728>
					{
						if(ps4.button == SQUARE)
 800e214:	4bb0      	ldr	r3, [pc, #704]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e21c:	d108      	bne.n	800e230 <LidarSetPos+0x728>
						{
							while(ps4.button == SQUARE);
 800e21e:	bf00      	nop
 800e220:	4bad      	ldr	r3, [pc, #692]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e228:	d0fa      	beq.n	800e220 <LidarSetPos+0x718>
							PP_stop(&pp);
 800e22a:	48aa      	ldr	r0, [pc, #680]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e22c:	f7f7 fde5 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e230:	4ba8      	ldr	r3, [pc, #672]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e232:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1e9      	bne.n	800e214 <LidarSetPos+0x70c>
						}
					}

					// Stick to fence
					PP_start(pick_left_to_center_1, 1, &pp);
 800e240:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800e244:	4aa3      	ldr	r2, [pc, #652]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e246:	2101      	movs	r1, #1
 800e248:	4618      	mov	r0, r3
 800e24a:	f7f7 fb9c 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e24e:	e01e      	b.n	800e28e <LidarSetPos+0x786>
					{
						if(ps4.button == SQUARE)
 800e250:	4ba1      	ldr	r3, [pc, #644]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e258:	d108      	bne.n	800e26c <LidarSetPos+0x764>
						{
							while(ps4.button == SQUARE);
 800e25a:	bf00      	nop
 800e25c:	4b9e      	ldr	r3, [pc, #632]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e264:	d0fa      	beq.n	800e25c <LidarSetPos+0x754>
							PP_stop(&pp);
 800e266:	489b      	ldr	r0, [pc, #620]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e268:	f7f7 fdc7 	bl	8005dfa <PP_stop>
//							lidar->pos = PICK_LEFT;
//							lidar->pos_counter = PICK_LEFT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e26c:	2108      	movs	r1, #8
 800e26e:	489b      	ldr	r0, [pc, #620]	; (800e4dc <LidarSetPos+0x9d4>)
 800e270:	f004 f88a 	bl	8012388 <HAL_GPIO_ReadPin>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d006      	beq.n	800e288 <LidarSetPos+0x780>
 800e27a:	2110      	movs	r1, #16
 800e27c:	4897      	ldr	r0, [pc, #604]	; (800e4dc <LidarSetPos+0x9d4>)
 800e27e:	f004 f883 	bl	8012388 <HAL_GPIO_ReadPin>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <LidarSetPos+0x786>
							PP_stop(&pp);
 800e288:	4892      	ldr	r0, [pc, #584]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e28a:	f7f7 fdb6 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e28e:	4b91      	ldr	r3, [pc, #580]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e290:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d1d8      	bne.n	800e250 <LidarSetPos+0x748>
					}

//					Shot();
					stick_fence = 1;
 800e29e:	4b88      	ldr	r3, [pc, #544]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e2ac:	1dfa      	adds	r2, r7, #7
 800e2ae:	7812      	ldrb	r2, [r2, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	f040 80c6 	bne.w	800e442 <LidarSetPos+0x93a>
						LidarAdjust(lidar);
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	f001 fc7b 	bl	800fbb4 <LidarAdjust>
					break;
 800e2be:	e0c0      	b.n	800e442 <LidarSetPos+0x93a>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800e2c0:	463b      	mov	r3, r7
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2203      	movs	r2, #3
 800e2c6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e2ca:	e0c1      	b.n	800e450 <LidarSetPos+0x948>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800e2cc:	463b      	mov	r3, r7
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e2d6:	e0bb      	b.n	800e450 <LidarSetPos+0x948>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800e2d8:	463b      	mov	r3, r7
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2203      	movs	r2, #3
 800e2de:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e2e2:	e0b5      	b.n	800e450 <LidarSetPos+0x948>

				case CENTER_2:
					stick_fence = 0;
 800e2e4:	4b76      	ldr	r3, [pc, #472]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e2ea:	4b76      	ldr	r3, [pc, #472]	; (800e4c4 <LidarSetPos+0x9bc>)
 800e2ec:	4a76      	ldr	r2, [pc, #472]	; (800e4c8 <LidarSetPos+0x9c0>)
 800e2ee:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e2f0:	4b76      	ldr	r3, [pc, #472]	; (800e4cc <LidarSetPos+0x9c4>)
 800e2f2:	4a77      	ldr	r2, [pc, #476]	; (800e4d0 <LidarSetPos+0x9c8>)
 800e2f4:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e2f6:	f7fe f86d 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e2fa:	463b      	mov	r3, r7
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2203      	movs	r2, #3
 800e300:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_1, 1, &pp);
 800e304:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800e308:	4a72      	ldr	r2, [pc, #456]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e30a:	2101      	movs	r1, #1
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7f7 fb3a 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e312:	e025      	b.n	800e360 <LidarSetPos+0x858>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e314:	2108      	movs	r1, #8
 800e316:	4871      	ldr	r0, [pc, #452]	; (800e4dc <LidarSetPos+0x9d4>)
 800e318:	f004 f836 	bl	8012388 <HAL_GPIO_ReadPin>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d006      	beq.n	800e330 <LidarSetPos+0x828>
 800e322:	2110      	movs	r1, #16
 800e324:	486d      	ldr	r0, [pc, #436]	; (800e4dc <LidarSetPos+0x9d4>)
 800e326:	f004 f82f 	bl	8012388 <HAL_GPIO_ReadPin>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d109      	bne.n	800e344 <LidarSetPos+0x83c>
						{
							pp.target_y[0] = pp.real_y;
 800e330:	4b68      	ldr	r3, [pc, #416]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e334:	4a67      	ldr	r2, [pc, #412]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e336:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e33a:	4b66      	ldr	r3, [pc, #408]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e33c:	f04f 0200 	mov.w	r2, #0
 800e340:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e344:	4b64      	ldr	r3, [pc, #400]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e34c:	d108      	bne.n	800e360 <LidarSetPos+0x858>
						{
							while(ps4.button == SQUARE);
 800e34e:	bf00      	nop
 800e350:	4b61      	ldr	r3, [pc, #388]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e358:	d0fa      	beq.n	800e350 <LidarSetPos+0x848>
							PP_stop(&pp);
 800e35a:	485e      	ldr	r0, [pc, #376]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e35c:	f7f7 fd4d 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e360:	4b5c      	ldr	r3, [pc, #368]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e362:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1d1      	bne.n	800e314 <LidarSetPos+0x80c>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					stick_fence = 1;
 800e370:	4b53      	ldr	r3, [pc, #332]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e372:	2201      	movs	r2, #1
 800e374:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e376:	463b      	mov	r3, r7
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e37e:	1dfa      	adds	r2, r7, #7
 800e380:	7812      	ldrb	r2, [r2, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	d160      	bne.n	800e448 <LidarSetPos+0x940>
						LidarAdjust(lidar);
 800e386:	463b      	mov	r3, r7
 800e388:	6818      	ldr	r0, [r3, #0]
 800e38a:	f001 fc13 	bl	800fbb4 <LidarAdjust>
					break;
 800e38e:	e05b      	b.n	800e448 <LidarSetPos+0x940>

				case CENTER:
					stick_fence = 0;
 800e390:	4b4b      	ldr	r3, [pc, #300]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e396:	4b4b      	ldr	r3, [pc, #300]	; (800e4c4 <LidarSetPos+0x9bc>)
 800e398:	4a4b      	ldr	r2, [pc, #300]	; (800e4c8 <LidarSetPos+0x9c0>)
 800e39a:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e39c:	4b4b      	ldr	r3, [pc, #300]	; (800e4cc <LidarSetPos+0x9c4>)
 800e39e:	4a4c      	ldr	r2, [pc, #304]	; (800e4d0 <LidarSetPos+0x9c8>)
 800e3a0:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e3a2:	f7fe f817 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2203      	movs	r2, #3
 800e3ac:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_1, 1, &pp);
 800e3b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800e3b4:	4a47      	ldr	r2, [pc, #284]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7f7 fae4 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e3be:	e025      	b.n	800e40c <LidarSetPos+0x904>
					{
						if(ps4.button == SQUARE)
 800e3c0:	4b45      	ldr	r3, [pc, #276]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3c8:	d108      	bne.n	800e3dc <LidarSetPos+0x8d4>
						{
							while(ps4.button == SQUARE);
 800e3ca:	bf00      	nop
 800e3cc:	4b42      	ldr	r3, [pc, #264]	; (800e4d8 <LidarSetPos+0x9d0>)
 800e3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3d4:	d0fa      	beq.n	800e3cc <LidarSetPos+0x8c4>
							PP_stop(&pp);
 800e3d6:	483f      	ldr	r0, [pc, #252]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e3d8:	f7f7 fd0f 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER; // PP Failed
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e3dc:	2108      	movs	r1, #8
 800e3de:	483f      	ldr	r0, [pc, #252]	; (800e4dc <LidarSetPos+0x9d4>)
 800e3e0:	f003 ffd2 	bl	8012388 <HAL_GPIO_ReadPin>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d006      	beq.n	800e3f8 <LidarSetPos+0x8f0>
 800e3ea:	2110      	movs	r1, #16
 800e3ec:	483b      	ldr	r0, [pc, #236]	; (800e4dc <LidarSetPos+0x9d4>)
 800e3ee:	f003 ffcb 	bl	8012388 <HAL_GPIO_ReadPin>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d109      	bne.n	800e40c <LidarSetPos+0x904>
						{
							pp.target_y[0] = pp.real_y;
 800e3f8:	4b36      	ldr	r3, [pc, #216]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3fc:	4a35      	ldr	r2, [pc, #212]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e3fe:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e402:	4b34      	ldr	r3, [pc, #208]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e404:	f04f 0200 	mov.w	r2, #0
 800e408:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e40c:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <LidarSetPos+0x9cc>)
 800e40e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1d1      	bne.n	800e3c0 <LidarSetPos+0x8b8>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e41c:	4b28      	ldr	r3, [pc, #160]	; (800e4c0 <LidarSetPos+0x9b8>)
 800e41e:	2201      	movs	r2, #1
 800e420:	601a      	str	r2, [r3, #0]




					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e422:	463b      	mov	r3, r7
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e42a:	1dfa      	adds	r2, r7, #7
 800e42c:	7812      	ldrb	r2, [r2, #0]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d10d      	bne.n	800e44e <LidarSetPos+0x946>
						LidarAdjust(lidar);
 800e432:	463b      	mov	r3, r7
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f001 fbbd 	bl	800fbb4 <LidarAdjust>
					break;
 800e43a:	e008      	b.n	800e44e <LidarSetPos+0x946>

				default:
					break;
 800e43c:	bf00      	nop
 800e43e:	f001 bb9c 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800e442:	bf00      	nop
 800e444:	f001 bb99 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800e448:	bf00      	nop
 800e44a:	f001 bb96 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800e44e:	bf00      	nop
			}
			break;
 800e450:	f001 bb93 	b.w	800fb7a <LidarSetPos+0x2072>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 800e454:	463b      	mov	r3, r7
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e45c:	3b01      	subs	r3, #1
 800e45e:	2b08      	cmp	r3, #8
 800e460:	f200 8174 	bhi.w	800e74c <LidarSetPos+0xc44>
 800e464:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <LidarSetPos+0x964>)
 800e466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46a:	bf00      	nop
 800e46c:	0800e491 	.word	0x0800e491
 800e470:	0800e4a9 	.word	0x0800e4a9
 800e474:	0800e4e1 	.word	0x0800e4e1
 800e478:	0800e74d 	.word	0x0800e74d
 800e47c:	0800e5a5 	.word	0x0800e5a5
 800e480:	0800e68d 	.word	0x0800e68d
 800e484:	0800e74d 	.word	0x0800e74d
 800e488:	0800e4b5 	.word	0x0800e4b5
 800e48c:	0800e49d 	.word	0x0800e49d
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 800e490:	463b      	mov	r3, r7
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2204      	movs	r2, #4
 800e496:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e49a:	e15e      	b.n	800e75a <LidarSetPos+0xc52>

				case PICK_RIGHT:
					lidar->pos = CENTER_2;
 800e49c:	463b      	mov	r3, r7
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e4a6:	e158      	b.n	800e75a <LidarSetPos+0xc52>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 800e4a8:	463b      	mov	r3, r7
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2204      	movs	r2, #4
 800e4ae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e4b2:	e152      	b.n	800e75a <LidarSetPos+0xc52>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2204      	movs	r2, #4
 800e4ba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e4be:	e14c      	b.n	800e75a <LidarSetPos+0xc52>
 800e4c0:	200072bc 	.word	0x200072bc
 800e4c4:	20007380 	.word	0x20007380
 800e4c8:	3e2e147b 	.word	0x3e2e147b
 800e4cc:	2000659c 	.word	0x2000659c
 800e4d0:	40966666 	.word	0x40966666
 800e4d4:	20006cc4 	.word	0x20006cc4
 800e4d8:	2000a014 	.word	0x2000a014
 800e4dc:	40020c00 	.word	0x40020c00

				case CENTER_1:
					stick_fence = 0;
 800e4e0:	4bb0      	ldr	r3, [pc, #704]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	601a      	str	r2, [r3, #0]
					if(blue)
 800e4e6:	4bb0      	ldr	r3, [pc, #704]	; (800e7a8 <LidarSetPos+0xca0>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d006      	beq.n	800e4fc <LidarSetPos+0x9f4>
					{
						vesc_speed = BlueType2;
 800e4ee:	4baf      	ldr	r3, [pc, #700]	; (800e7ac <LidarSetPos+0xca4>)
 800e4f0:	4aaf      	ldr	r2, [pc, #700]	; (800e7b0 <LidarSetPos+0xca8>)
 800e4f2:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e4f4:	4baf      	ldr	r3, [pc, #700]	; (800e7b4 <LidarSetPos+0xcac>)
 800e4f6:	4ab0      	ldr	r2, [pc, #704]	; (800e7b8 <LidarSetPos+0xcb0>)
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	e005      	b.n	800e508 <LidarSetPos+0xa00>
					}
					else
					{
						vesc_speed = RedType2;
 800e4fc:	4bab      	ldr	r3, [pc, #684]	; (800e7ac <LidarSetPos+0xca4>)
 800e4fe:	4aaf      	ldr	r2, [pc, #700]	; (800e7bc <LidarSetPos+0xcb4>)
 800e500:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e502:	4bac      	ldr	r3, [pc, #688]	; (800e7b4 <LidarSetPos+0xcac>)
 800e504:	4aae      	ldr	r2, [pc, #696]	; (800e7c0 <LidarSetPos+0xcb8>)
 800e506:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e508:	f7fd ff64 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e50c:	463b      	mov	r3, r7
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2204      	movs	r2, #4
 800e512:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center_2, 1, &pp);
 800e516:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e51a:	4aaa      	ldr	r2, [pc, #680]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e51c:	2101      	movs	r1, #1
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f7 fa31 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e524:	e025      	b.n	800e572 <LidarSetPos+0xa6a>
					{
						if(ps4.button == SQUARE)
 800e526:	4ba8      	ldr	r3, [pc, #672]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e52a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e52e:	d108      	bne.n	800e542 <LidarSetPos+0xa3a>
						{
							while(ps4.button == SQUARE);
 800e530:	bf00      	nop
 800e532:	4ba5      	ldr	r3, [pc, #660]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e53a:	d0fa      	beq.n	800e532 <LidarSetPos+0xa2a>
							PP_stop(&pp);
 800e53c:	48a1      	ldr	r0, [pc, #644]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e53e:	f7f7 fc5c 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_1;
//							lidar->pos_counter = CENTER_1;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e542:	2108      	movs	r1, #8
 800e544:	48a1      	ldr	r0, [pc, #644]	; (800e7cc <LidarSetPos+0xcc4>)
 800e546:	f003 ff1f 	bl	8012388 <HAL_GPIO_ReadPin>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <LidarSetPos+0xa56>
 800e550:	2110      	movs	r1, #16
 800e552:	489e      	ldr	r0, [pc, #632]	; (800e7cc <LidarSetPos+0xcc4>)
 800e554:	f003 ff18 	bl	8012388 <HAL_GPIO_ReadPin>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d109      	bne.n	800e572 <LidarSetPos+0xa6a>
						{
							pp.target_y[0] = pp.real_y;
 800e55e:	4b99      	ldr	r3, [pc, #612]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e562:	4a98      	ldr	r2, [pc, #608]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e564:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e568:	4b96      	ldr	r3, [pc, #600]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e56a:	f04f 0200 	mov.w	r2, #0
 800e56e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e572:	4b94      	ldr	r3, [pc, #592]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e574:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e578:	f003 0301 	and.w	r3, r3, #1
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1d1      	bne.n	800e526 <LidarSetPos+0xa1e>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e582:	4b88      	ldr	r3, [pc, #544]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e584:	2201      	movs	r2, #1
 800e586:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e588:	463b      	mov	r3, r7
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e590:	1dfa      	adds	r2, r7, #7
 800e592:	7812      	ldrb	r2, [r2, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	f040 80dc 	bne.w	800e752 <LidarSetPos+0xc4a>
						LidarAdjust(lidar);
 800e59a:	463b      	mov	r3, r7
 800e59c:	6818      	ldr	r0, [r3, #0]
 800e59e:	f001 fb09 	bl	800fbb4 <LidarAdjust>
					break;
 800e5a2:	e0d6      	b.n	800e752 <LidarSetPos+0xc4a>

				case CENTER:
					stick_fence = 0;
 800e5a4:	4b7f      	ldr	r3, [pc, #508]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	601a      	str	r2, [r3, #0]
					if(blue)
 800e5aa:	4b7f      	ldr	r3, [pc, #508]	; (800e7a8 <LidarSetPos+0xca0>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d006      	beq.n	800e5c0 <LidarSetPos+0xab8>
					{
						vesc_speed = BlueType2;
 800e5b2:	4b7e      	ldr	r3, [pc, #504]	; (800e7ac <LidarSetPos+0xca4>)
 800e5b4:	4a7e      	ldr	r2, [pc, #504]	; (800e7b0 <LidarSetPos+0xca8>)
 800e5b6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e5b8:	4b7e      	ldr	r3, [pc, #504]	; (800e7b4 <LidarSetPos+0xcac>)
 800e5ba:	4a7f      	ldr	r2, [pc, #508]	; (800e7b8 <LidarSetPos+0xcb0>)
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	e005      	b.n	800e5cc <LidarSetPos+0xac4>
					}
					else
					{
						vesc_speed = RedType2;
 800e5c0:	4b7a      	ldr	r3, [pc, #488]	; (800e7ac <LidarSetPos+0xca4>)
 800e5c2:	4a7e      	ldr	r2, [pc, #504]	; (800e7bc <LidarSetPos+0xcb4>)
 800e5c4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e5c6:	4b7b      	ldr	r3, [pc, #492]	; (800e7b4 <LidarSetPos+0xcac>)
 800e5c8:	4a7d      	ldr	r2, [pc, #500]	; (800e7c0 <LidarSetPos+0xcb8>)
 800e5ca:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e5cc:	f7fd ff02 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2204      	movs	r2, #4
 800e5d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_2, 1, &pp);
 800e5da:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800e5de:	4a79      	ldr	r2, [pc, #484]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f7 f9cf 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e5e8:	e038      	b.n	800e65c <LidarSetPos+0xb54>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e5ea:	2108      	movs	r1, #8
 800e5ec:	4877      	ldr	r0, [pc, #476]	; (800e7cc <LidarSetPos+0xcc4>)
 800e5ee:	f003 fecb 	bl	8012388 <HAL_GPIO_ReadPin>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d006      	beq.n	800e606 <LidarSetPos+0xafe>
 800e5f8:	2110      	movs	r1, #16
 800e5fa:	4874      	ldr	r0, [pc, #464]	; (800e7cc <LidarSetPos+0xcc4>)
 800e5fc:	f003 fec4 	bl	8012388 <HAL_GPIO_ReadPin>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d104      	bne.n	800e610 <LidarSetPos+0xb08>
							pp.error_y = 0;
 800e606:	4b6f      	ldr	r3, [pc, #444]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e608:	f04f 0200 	mov.w	r2, #0
 800e60c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

						if(ps4.button == SQUARE)
 800e610:	4b6d      	ldr	r3, [pc, #436]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e618:	d108      	bne.n	800e62c <LidarSetPos+0xb24>
						{
							while(ps4.button == SQUARE);
 800e61a:	bf00      	nop
 800e61c:	4b6a      	ldr	r3, [pc, #424]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e624:	d0fa      	beq.n	800e61c <LidarSetPos+0xb14>
							PP_stop(&pp);
 800e626:	4867      	ldr	r0, [pc, #412]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e628:	f7f7 fbe7 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e62c:	2108      	movs	r1, #8
 800e62e:	4867      	ldr	r0, [pc, #412]	; (800e7cc <LidarSetPos+0xcc4>)
 800e630:	f003 feaa 	bl	8012388 <HAL_GPIO_ReadPin>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d006      	beq.n	800e648 <LidarSetPos+0xb40>
 800e63a:	2110      	movs	r1, #16
 800e63c:	4863      	ldr	r0, [pc, #396]	; (800e7cc <LidarSetPos+0xcc4>)
 800e63e:	f003 fea3 	bl	8012388 <HAL_GPIO_ReadPin>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d109      	bne.n	800e65c <LidarSetPos+0xb54>
						{
							pp.target_y[0] = pp.real_y;
 800e648:	4b5e      	ldr	r3, [pc, #376]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e64c:	4a5d      	ldr	r2, [pc, #372]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e64e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e652:	4b5c      	ldr	r3, [pc, #368]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e654:	f04f 0200 	mov.w	r2, #0
 800e658:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e65c:	4b59      	ldr	r3, [pc, #356]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e65e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1be      	bne.n	800e5ea <LidarSetPos+0xae2>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e66c:	4b4d      	ldr	r3, [pc, #308]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e66e:	2201      	movs	r2, #1
 800e670:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e672:	463b      	mov	r3, r7
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e67a:	1dfa      	adds	r2, r7, #7
 800e67c:	7812      	ldrb	r2, [r2, #0]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d16a      	bne.n	800e758 <LidarSetPos+0xc50>
						LidarAdjust(lidar);
 800e682:	463b      	mov	r3, r7
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	f001 fa95 	bl	800fbb4 <LidarAdjust>
					break;
 800e68a:	e065      	b.n	800e758 <LidarSetPos+0xc50>

				case CENTER_3:
					stick_fence = 0;
 800e68c:	4b45      	ldr	r3, [pc, #276]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]
					if(blue)
 800e692:	4b45      	ldr	r3, [pc, #276]	; (800e7a8 <LidarSetPos+0xca0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d006      	beq.n	800e6a8 <LidarSetPos+0xba0>
					{
						vesc_speed = BlueType2;
 800e69a:	4b44      	ldr	r3, [pc, #272]	; (800e7ac <LidarSetPos+0xca4>)
 800e69c:	4a44      	ldr	r2, [pc, #272]	; (800e7b0 <LidarSetPos+0xca8>)
 800e69e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e6a0:	4b44      	ldr	r3, [pc, #272]	; (800e7b4 <LidarSetPos+0xcac>)
 800e6a2:	4a45      	ldr	r2, [pc, #276]	; (800e7b8 <LidarSetPos+0xcb0>)
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	e005      	b.n	800e6b4 <LidarSetPos+0xbac>
					}
					else
					{
						vesc_speed = RedType2;
 800e6a8:	4b40      	ldr	r3, [pc, #256]	; (800e7ac <LidarSetPos+0xca4>)
 800e6aa:	4a44      	ldr	r2, [pc, #272]	; (800e7bc <LidarSetPos+0xcb4>)
 800e6ac:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e6ae:	4b41      	ldr	r3, [pc, #260]	; (800e7b4 <LidarSetPos+0xcac>)
 800e6b0:	4a43      	ldr	r2, [pc, #268]	; (800e7c0 <LidarSetPos+0xcb8>)
 800e6b2:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e6b4:	f7fd fe8e 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e6b8:	463b      	mov	r3, r7
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2204      	movs	r2, #4
 800e6be:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_2, 1, &pp);
 800e6c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6c6:	4a3f      	ldr	r2, [pc, #252]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7f7 f95b 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e6d0:	e025      	b.n	800e71e <LidarSetPos+0xc16>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e6d2:	2108      	movs	r1, #8
 800e6d4:	483d      	ldr	r0, [pc, #244]	; (800e7cc <LidarSetPos+0xcc4>)
 800e6d6:	f003 fe57 	bl	8012388 <HAL_GPIO_ReadPin>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d006      	beq.n	800e6ee <LidarSetPos+0xbe6>
 800e6e0:	2110      	movs	r1, #16
 800e6e2:	483a      	ldr	r0, [pc, #232]	; (800e7cc <LidarSetPos+0xcc4>)
 800e6e4:	f003 fe50 	bl	8012388 <HAL_GPIO_ReadPin>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d109      	bne.n	800e702 <LidarSetPos+0xbfa>
						{
							pp.target_y[0] = pp.real_y;
 800e6ee:	4b35      	ldr	r3, [pc, #212]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6f2:	4a34      	ldr	r2, [pc, #208]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e6f4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e6f8:	4b32      	ldr	r3, [pc, #200]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e6fa:	f04f 0200 	mov.w	r2, #0
 800e6fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e702:	4b31      	ldr	r3, [pc, #196]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e70a:	d108      	bne.n	800e71e <LidarSetPos+0xc16>
						{
							while(ps4.button == SQUARE);
 800e70c:	bf00      	nop
 800e70e:	4b2e      	ldr	r3, [pc, #184]	; (800e7c8 <LidarSetPos+0xcc0>)
 800e710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e716:	d0fa      	beq.n	800e70e <LidarSetPos+0xc06>
							PP_stop(&pp);
 800e718:	482a      	ldr	r0, [pc, #168]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e71a:	f7f7 fb6e 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e71e:	4b29      	ldr	r3, [pc, #164]	; (800e7c4 <LidarSetPos+0xcbc>)
 800e720:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e724:	f003 0301 	and.w	r3, r3, #1
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1d1      	bne.n	800e6d2 <LidarSetPos+0xbca>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e72e:	4b1d      	ldr	r3, [pc, #116]	; (800e7a4 <LidarSetPos+0xc9c>)
 800e730:	2201      	movs	r2, #1
 800e732:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e734:	463b      	mov	r3, r7
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e73c:	1dfa      	adds	r2, r7, #7
 800e73e:	7812      	ldrb	r2, [r2, #0]
 800e740:	429a      	cmp	r2, r3
 800e742:	d103      	bne.n	800e74c <LidarSetPos+0xc44>
						LidarAdjust(lidar);
 800e744:	463b      	mov	r3, r7
 800e746:	6818      	ldr	r0, [r3, #0]
 800e748:	f001 fa34 	bl	800fbb4 <LidarAdjust>

				default:
					break;
 800e74c:	bf00      	nop
 800e74e:	f001 ba14 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800e752:	bf00      	nop
 800e754:	f001 ba11 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800e758:	bf00      	nop
			}
			break;
 800e75a:	f001 ba0e 	b.w	800fb7a <LidarSetPos+0x2072>

		case CENTER:
			switch(lidar->pos) // Self Pose
 800e75e:	463b      	mov	r3, r7
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e766:	3b01      	subs	r3, #1
 800e768:	2b08      	cmp	r3, #8
 800e76a:	f200 819c 	bhi.w	800eaa6 <LidarSetPos+0xf9e>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <LidarSetPos+0xc6c>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e799 	.word	0x0800e799
 800e778:	0800e7dd 	.word	0x0800e7dd
 800e77c:	0800e7f5 	.word	0x0800e7f5
 800e780:	0800e8a3 	.word	0x0800e8a3
 800e784:	0800eaa7 	.word	0x0800eaa7
 800e788:	0800e951 	.word	0x0800e951
 800e78c:	0800e9fd 	.word	0x0800e9fd
 800e790:	0800e7e9 	.word	0x0800e7e9
 800e794:	0800e7d1 	.word	0x0800e7d1
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 800e798:	463b      	mov	r3, r7
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2205      	movs	r2, #5
 800e79e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7a2:	e18a      	b.n	800eaba <LidarSetPos+0xfb2>
 800e7a4:	200072bc 	.word	0x200072bc
 800e7a8:	20006a1c 	.word	0x20006a1c
 800e7ac:	2000659c 	.word	0x2000659c
 800e7b0:	41026666 	.word	0x41026666
 800e7b4:	20007380 	.word	0x20007380
 800e7b8:	3e8ccccd 	.word	0x3e8ccccd
 800e7bc:	41033333 	.word	0x41033333
 800e7c0:	3e8a3d71 	.word	0x3e8a3d71
 800e7c4:	20006cc4 	.word	0x20006cc4
 800e7c8:	2000a014 	.word	0x2000a014
 800e7cc:	40020c00 	.word	0x40020c00

				case PICK_RIGHT:
					lidar->pos = CENTER;
 800e7d0:	463b      	mov	r3, r7
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	2205      	movs	r2, #5
 800e7d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7da:	e16e      	b.n	800eaba <LidarSetPos+0xfb2>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 800e7dc:	463b      	mov	r3, r7
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2205      	movs	r2, #5
 800e7e2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7e6:	e168      	b.n	800eaba <LidarSetPos+0xfb2>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 800e7e8:	463b      	mov	r3, r7
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e7f2:	e162      	b.n	800eaba <LidarSetPos+0xfb2>

				case CENTER_1:
					stick_fence = 0;
 800e7f4:	4bb2      	ldr	r3, [pc, #712]	; (800eac0 <LidarSetPos+0xfb8>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e7fa:	4bb2      	ldr	r3, [pc, #712]	; (800eac4 <LidarSetPos+0xfbc>)
 800e7fc:	4ab2      	ldr	r2, [pc, #712]	; (800eac8 <LidarSetPos+0xfc0>)
 800e7fe:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e800:	4bb2      	ldr	r3, [pc, #712]	; (800eacc <LidarSetPos+0xfc4>)
 800e802:	4ab3      	ldr	r2, [pc, #716]	; (800ead0 <LidarSetPos+0xfc8>)
 800e804:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e806:	f7fd fde5 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER;
 800e80a:	463b      	mov	r3, r7
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2205      	movs	r2, #5
 800e810:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center, 1, &pp);
 800e814:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800e818:	4aae      	ldr	r2, [pc, #696]	; (800ead4 <LidarSetPos+0xfcc>)
 800e81a:	2101      	movs	r1, #1
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7f7 f8b2 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e822:	e025      	b.n	800e870 <LidarSetPos+0xd68>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e824:	2108      	movs	r1, #8
 800e826:	48ac      	ldr	r0, [pc, #688]	; (800ead8 <LidarSetPos+0xfd0>)
 800e828:	f003 fdae 	bl	8012388 <HAL_GPIO_ReadPin>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d006      	beq.n	800e840 <LidarSetPos+0xd38>
 800e832:	2110      	movs	r1, #16
 800e834:	48a8      	ldr	r0, [pc, #672]	; (800ead8 <LidarSetPos+0xfd0>)
 800e836:	f003 fda7 	bl	8012388 <HAL_GPIO_ReadPin>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d109      	bne.n	800e854 <LidarSetPos+0xd4c>
						{
							pp.target_y[0] = pp.real_y;
 800e840:	4ba4      	ldr	r3, [pc, #656]	; (800ead4 <LidarSetPos+0xfcc>)
 800e842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e844:	4aa3      	ldr	r2, [pc, #652]	; (800ead4 <LidarSetPos+0xfcc>)
 800e846:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e84a:	4ba2      	ldr	r3, [pc, #648]	; (800ead4 <LidarSetPos+0xfcc>)
 800e84c:	f04f 0200 	mov.w	r2, #0
 800e850:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e854:	4ba1      	ldr	r3, [pc, #644]	; (800eadc <LidarSetPos+0xfd4>)
 800e856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e85c:	d108      	bne.n	800e870 <LidarSetPos+0xd68>
						{
							while(ps4.button == SQUARE);
 800e85e:	bf00      	nop
 800e860:	4b9e      	ldr	r3, [pc, #632]	; (800eadc <LidarSetPos+0xfd4>)
 800e862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e868:	d0fa      	beq.n	800e860 <LidarSetPos+0xd58>
							PP_stop(&pp);
 800e86a:	489a      	ldr	r0, [pc, #616]	; (800ead4 <LidarSetPos+0xfcc>)
 800e86c:	f7f7 fac5 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800e870:	4b98      	ldr	r3, [pc, #608]	; (800ead4 <LidarSetPos+0xfcc>)
 800e872:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1d1      	bne.n	800e824 <LidarSetPos+0xd1c>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e880:	4b8f      	ldr	r3, [pc, #572]	; (800eac0 <LidarSetPos+0xfb8>)
 800e882:	2201      	movs	r2, #1
 800e884:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e886:	463b      	mov	r3, r7
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e88e:	1dfa      	adds	r2, r7, #7
 800e890:	7812      	ldrb	r2, [r2, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	f040 810a 	bne.w	800eaac <LidarSetPos+0xfa4>
						LidarAdjust(lidar);
 800e898:	463b      	mov	r3, r7
 800e89a:	6818      	ldr	r0, [r3, #0]
 800e89c:	f001 f98a 	bl	800fbb4 <LidarAdjust>
					break;
 800e8a0:	e104      	b.n	800eaac <LidarSetPos+0xfa4>


				case CENTER_2:
					stick_fence = 0;
 800e8a2:	4b87      	ldr	r3, [pc, #540]	; (800eac0 <LidarSetPos+0xfb8>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e8a8:	4b86      	ldr	r3, [pc, #536]	; (800eac4 <LidarSetPos+0xfbc>)
 800e8aa:	4a87      	ldr	r2, [pc, #540]	; (800eac8 <LidarSetPos+0xfc0>)
 800e8ac:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e8ae:	4b87      	ldr	r3, [pc, #540]	; (800eacc <LidarSetPos+0xfc4>)
 800e8b0:	4a87      	ldr	r2, [pc, #540]	; (800ead0 <LidarSetPos+0xfc8>)
 800e8b2:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e8b4:	f7fd fd8e 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER;
 800e8b8:	463b      	mov	r3, r7
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2205      	movs	r2, #5
 800e8be:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center, 1, &pp);
 800e8c2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800e8c6:	4a83      	ldr	r2, [pc, #524]	; (800ead4 <LidarSetPos+0xfcc>)
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7f7 f85b 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e8d0:	e025      	b.n	800e91e <LidarSetPos+0xe16>
					{
						if(ps4.button == SQUARE)
 800e8d2:	4b82      	ldr	r3, [pc, #520]	; (800eadc <LidarSetPos+0xfd4>)
 800e8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8da:	d108      	bne.n	800e8ee <LidarSetPos+0xde6>
						{
							while(ps4.button == SQUARE);
 800e8dc:	bf00      	nop
 800e8de:	4b7f      	ldr	r3, [pc, #508]	; (800eadc <LidarSetPos+0xfd4>)
 800e8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8e6:	d0fa      	beq.n	800e8de <LidarSetPos+0xdd6>
							PP_stop(&pp);
 800e8e8:	487a      	ldr	r0, [pc, #488]	; (800ead4 <LidarSetPos+0xfcc>)
 800e8ea:	f7f7 fa86 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_2;
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e8ee:	2108      	movs	r1, #8
 800e8f0:	4879      	ldr	r0, [pc, #484]	; (800ead8 <LidarSetPos+0xfd0>)
 800e8f2:	f003 fd49 	bl	8012388 <HAL_GPIO_ReadPin>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <LidarSetPos+0xe02>
 800e8fc:	2110      	movs	r1, #16
 800e8fe:	4876      	ldr	r0, [pc, #472]	; (800ead8 <LidarSetPos+0xfd0>)
 800e900:	f003 fd42 	bl	8012388 <HAL_GPIO_ReadPin>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d109      	bne.n	800e91e <LidarSetPos+0xe16>
						{
							pp.target_y[0] = pp.real_y;
 800e90a:	4b72      	ldr	r3, [pc, #456]	; (800ead4 <LidarSetPos+0xfcc>)
 800e90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90e:	4a71      	ldr	r2, [pc, #452]	; (800ead4 <LidarSetPos+0xfcc>)
 800e910:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e914:	4b6f      	ldr	r3, [pc, #444]	; (800ead4 <LidarSetPos+0xfcc>)
 800e916:	f04f 0200 	mov.w	r2, #0
 800e91a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e91e:	4b6d      	ldr	r3, [pc, #436]	; (800ead4 <LidarSetPos+0xfcc>)
 800e920:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1d1      	bne.n	800e8d2 <LidarSetPos+0xdca>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e92e:	4b64      	ldr	r3, [pc, #400]	; (800eac0 <LidarSetPos+0xfb8>)
 800e930:	2201      	movs	r2, #1
 800e932:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e934:	463b      	mov	r3, r7
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e93c:	1dfa      	adds	r2, r7, #7
 800e93e:	7812      	ldrb	r2, [r2, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	f040 80b6 	bne.w	800eab2 <LidarSetPos+0xfaa>
						LidarAdjust(lidar);
 800e946:	463b      	mov	r3, r7
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	f001 f933 	bl	800fbb4 <LidarAdjust>
					break;
 800e94e:	e0b0      	b.n	800eab2 <LidarSetPos+0xfaa>

				case CENTER_3:
					stick_fence = 0;
 800e950:	4b5b      	ldr	r3, [pc, #364]	; (800eac0 <LidarSetPos+0xfb8>)
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e956:	4b5b      	ldr	r3, [pc, #364]	; (800eac4 <LidarSetPos+0xfbc>)
 800e958:	4a5b      	ldr	r2, [pc, #364]	; (800eac8 <LidarSetPos+0xfc0>)
 800e95a:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e95c:	4b5b      	ldr	r3, [pc, #364]	; (800eacc <LidarSetPos+0xfc4>)
 800e95e:	4a5c      	ldr	r2, [pc, #368]	; (800ead0 <LidarSetPos+0xfc8>)
 800e960:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e962:	f7fd fd37 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER;
 800e966:	463b      	mov	r3, r7
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2205      	movs	r2, #5
 800e96c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center, 1, &pp);
 800e970:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800e974:	4a57      	ldr	r2, [pc, #348]	; (800ead4 <LidarSetPos+0xfcc>)
 800e976:	2101      	movs	r1, #1
 800e978:	4618      	mov	r0, r3
 800e97a:	f7f7 f804 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800e97e:	e025      	b.n	800e9cc <LidarSetPos+0xec4>
					{
						if(ps4.button == SQUARE)
 800e980:	4b56      	ldr	r3, [pc, #344]	; (800eadc <LidarSetPos+0xfd4>)
 800e982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e988:	d108      	bne.n	800e99c <LidarSetPos+0xe94>
						{
							while(ps4.button == SQUARE);
 800e98a:	bf00      	nop
 800e98c:	4b53      	ldr	r3, [pc, #332]	; (800eadc <LidarSetPos+0xfd4>)
 800e98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e994:	d0fa      	beq.n	800e98c <LidarSetPos+0xe84>
							PP_stop(&pp);
 800e996:	484f      	ldr	r0, [pc, #316]	; (800ead4 <LidarSetPos+0xfcc>)
 800e998:	f7f7 fa2f 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e99c:	2108      	movs	r1, #8
 800e99e:	484e      	ldr	r0, [pc, #312]	; (800ead8 <LidarSetPos+0xfd0>)
 800e9a0:	f003 fcf2 	bl	8012388 <HAL_GPIO_ReadPin>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d006      	beq.n	800e9b8 <LidarSetPos+0xeb0>
 800e9aa:	2110      	movs	r1, #16
 800e9ac:	484a      	ldr	r0, [pc, #296]	; (800ead8 <LidarSetPos+0xfd0>)
 800e9ae:	f003 fceb 	bl	8012388 <HAL_GPIO_ReadPin>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d109      	bne.n	800e9cc <LidarSetPos+0xec4>
						{
							pp.target_y[0] = pp.real_y;
 800e9b8:	4b46      	ldr	r3, [pc, #280]	; (800ead4 <LidarSetPos+0xfcc>)
 800e9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9bc:	4a45      	ldr	r2, [pc, #276]	; (800ead4 <LidarSetPos+0xfcc>)
 800e9be:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e9c2:	4b44      	ldr	r3, [pc, #272]	; (800ead4 <LidarSetPos+0xfcc>)
 800e9c4:	f04f 0200 	mov.w	r2, #0
 800e9c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e9cc:	4b41      	ldr	r3, [pc, #260]	; (800ead4 <LidarSetPos+0xfcc>)
 800e9ce:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1d1      	bne.n	800e980 <LidarSetPos+0xe78>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e9dc:	4b38      	ldr	r3, [pc, #224]	; (800eac0 <LidarSetPos+0xfb8>)
 800e9de:	2201      	movs	r2, #1
 800e9e0:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e9ea:	1dfa      	adds	r2, r7, #7
 800e9ec:	7812      	ldrb	r2, [r2, #0]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d162      	bne.n	800eab8 <LidarSetPos+0xfb0>
						LidarAdjust(lidar);
 800e9f2:	463b      	mov	r3, r7
 800e9f4:	6818      	ldr	r0, [r3, #0]
 800e9f6:	f001 f8dd 	bl	800fbb4 <LidarAdjust>
					break;
 800e9fa:	e05d      	b.n	800eab8 <LidarSetPos+0xfb0>

				case CENTER_4:
					stick_fence = 0;
 800e9fc:	4b30      	ldr	r3, [pc, #192]	; (800eac0 <LidarSetPos+0xfb8>)
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800ea02:	4b30      	ldr	r3, [pc, #192]	; (800eac4 <LidarSetPos+0xfbc>)
 800ea04:	4a30      	ldr	r2, [pc, #192]	; (800eac8 <LidarSetPos+0xfc0>)
 800ea06:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ea08:	4b30      	ldr	r3, [pc, #192]	; (800eacc <LidarSetPos+0xfc4>)
 800ea0a:	4a31      	ldr	r2, [pc, #196]	; (800ead0 <LidarSetPos+0xfc8>)
 800ea0c:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ea0e:	f7fd fce1 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER;
 800ea12:	463b      	mov	r3, r7
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2205      	movs	r2, #5
 800ea18:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center, 1, &pp);
 800ea1c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800ea20:	4a2c      	ldr	r2, [pc, #176]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea22:	2101      	movs	r1, #1
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7f6 ffae 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ea2a:	e025      	b.n	800ea78 <LidarSetPos+0xf70>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ea2c:	2108      	movs	r1, #8
 800ea2e:	482a      	ldr	r0, [pc, #168]	; (800ead8 <LidarSetPos+0xfd0>)
 800ea30:	f003 fcaa 	bl	8012388 <HAL_GPIO_ReadPin>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d006      	beq.n	800ea48 <LidarSetPos+0xf40>
 800ea3a:	2110      	movs	r1, #16
 800ea3c:	4826      	ldr	r0, [pc, #152]	; (800ead8 <LidarSetPos+0xfd0>)
 800ea3e:	f003 fca3 	bl	8012388 <HAL_GPIO_ReadPin>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d109      	bne.n	800ea5c <LidarSetPos+0xf54>
						{
							pp.target_y[0] = pp.real_y;
 800ea48:	4b22      	ldr	r3, [pc, #136]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea4c:	4a21      	ldr	r2, [pc, #132]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea4e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ea52:	4b20      	ldr	r3, [pc, #128]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea54:	f04f 0200 	mov.w	r2, #0
 800ea58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800ea5c:	4b1f      	ldr	r3, [pc, #124]	; (800eadc <LidarSetPos+0xfd4>)
 800ea5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea64:	d108      	bne.n	800ea78 <LidarSetPos+0xf70>
						{
							while(ps4.button == SQUARE);
 800ea66:	bf00      	nop
 800ea68:	4b1c      	ldr	r3, [pc, #112]	; (800eadc <LidarSetPos+0xfd4>)
 800ea6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea70:	d0fa      	beq.n	800ea68 <LidarSetPos+0xf60>
							PP_stop(&pp);
 800ea72:	4818      	ldr	r0, [pc, #96]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea74:	f7f7 f9c1 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800ea78:	4b16      	ldr	r3, [pc, #88]	; (800ead4 <LidarSetPos+0xfcc>)
 800ea7a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ea7e:	f003 0301 	and.w	r3, r3, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1d1      	bne.n	800ea2c <LidarSetPos+0xf24>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ea88:	4b0d      	ldr	r3, [pc, #52]	; (800eac0 <LidarSetPos+0xfb8>)
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ea8e:	463b      	mov	r3, r7
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ea96:	1dfa      	adds	r2, r7, #7
 800ea98:	7812      	ldrb	r2, [r2, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d103      	bne.n	800eaa6 <LidarSetPos+0xf9e>
						LidarAdjust(lidar);
 800ea9e:	463b      	mov	r3, r7
 800eaa0:	6818      	ldr	r0, [r3, #0]
 800eaa2:	f001 f887 	bl	800fbb4 <LidarAdjust>

				default:
					break;
 800eaa6:	bf00      	nop
 800eaa8:	f001 b867 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eaac:	bf00      	nop
 800eaae:	f001 b864 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eab2:	bf00      	nop
 800eab4:	f001 b861 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eab8:	bf00      	nop
			}
			break;
 800eaba:	f001 b85e 	b.w	800fb7a <LidarSetPos+0x2072>
 800eabe:	bf00      	nop
 800eac0:	200072bc 	.word	0x200072bc
 800eac4:	20007380 	.word	0x20007380
 800eac8:	3e2e147b 	.word	0x3e2e147b
 800eacc:	2000659c 	.word	0x2000659c
 800ead0:	40966666 	.word	0x40966666
 800ead4:	20006cc4 	.word	0x20006cc4
 800ead8:	40020c00 	.word	0x40020c00
 800eadc:	2000a014 	.word	0x2000a014

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 800eae0:	463b      	mov	r3, r7
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eae8:	3b01      	subs	r3, #1
 800eaea:	2b08      	cmp	r3, #8
 800eaec:	f200 81ef 	bhi.w	800eece <LidarSetPos+0x13c6>
 800eaf0:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <LidarSetPos+0xff0>)
 800eaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf6:	bf00      	nop
 800eaf8:	0800eb1d 	.word	0x0800eb1d
 800eafc:	0800eb35 	.word	0x0800eb35
 800eb00:	0800eecf 	.word	0x0800eecf
 800eb04:	0800ed0d 	.word	0x0800ed0d
 800eb08:	0800ec4b 	.word	0x0800ec4b
 800eb0c:	0800eecf 	.word	0x0800eecf
 800eb10:	0800edd1 	.word	0x0800edd1
 800eb14:	0800eb41 	.word	0x0800eb41
 800eb18:	0800eb29 	.word	0x0800eb29
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 800eb1c:	463b      	mov	r3, r7
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2206      	movs	r2, #6
 800eb22:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eb26:	e1dc      	b.n	800eee2 <LidarSetPos+0x13da>

				case PICK_RIGHT:
					lidar->pos = CENTER_3;
 800eb28:	463b      	mov	r3, r7
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2206      	movs	r2, #6
 800eb2e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eb32:	e1d6      	b.n	800eee2 <LidarSetPos+0x13da>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 800eb34:	463b      	mov	r3, r7
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2206      	movs	r2, #6
 800eb3a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800eb3e:	e1d0      	b.n	800eee2 <LidarSetPos+0x13da>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 800eb40:	463b      	mov	r3, r7
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2206      	movs	r2, #6
 800eb46:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800eb4a:	4bab      	ldr	r3, [pc, #684]	; (800edf8 <LidarSetPos+0x12f0>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d006      	beq.n	800eb60 <LidarSetPos+0x1058>
					{
						vesc_speed = BlueType2;
 800eb52:	4baa      	ldr	r3, [pc, #680]	; (800edfc <LidarSetPos+0x12f4>)
 800eb54:	4aaa      	ldr	r2, [pc, #680]	; (800ee00 <LidarSetPos+0x12f8>)
 800eb56:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800eb58:	4baa      	ldr	r3, [pc, #680]	; (800ee04 <LidarSetPos+0x12fc>)
 800eb5a:	4aab      	ldr	r2, [pc, #684]	; (800ee08 <LidarSetPos+0x1300>)
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	e005      	b.n	800eb6c <LidarSetPos+0x1064>
					}
					else
					{
						vesc_speed = RedType2;
 800eb60:	4ba6      	ldr	r3, [pc, #664]	; (800edfc <LidarSetPos+0x12f4>)
 800eb62:	4aaa      	ldr	r2, [pc, #680]	; (800ee0c <LidarSetPos+0x1304>)
 800eb64:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800eb66:	4ba7      	ldr	r3, [pc, #668]	; (800ee04 <LidarSetPos+0x12fc>)
 800eb68:	4aa9      	ldr	r2, [pc, #676]	; (800ee10 <LidarSetPos+0x1308>)
 800eb6a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800eb6c:	f7fd fc32 	bl	800c3d4 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800eb70:	2000      	movs	r0, #0
 800eb72:	f7f6 f82d 	bl	8004bd0 <setOrientationMODN>
					PP_start(upper_right_to_center_3, 1, &pp);
 800eb76:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800eb7a:	4aa6      	ldr	r2, [pc, #664]	; (800ee14 <LidarSetPos+0x130c>)
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f6 ff01 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800eb84:	e020      	b.n	800ebc8 <LidarSetPos+0x10c0>
					{
						if(ps4.button == SQUARE)
 800eb86:	4ba4      	ldr	r3, [pc, #656]	; (800ee18 <LidarSetPos+0x1310>)
 800eb88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb8e:	d108      	bne.n	800eba2 <LidarSetPos+0x109a>
						{
							while(ps4.button == SQUARE);
 800eb90:	bf00      	nop
 800eb92:	4ba1      	ldr	r3, [pc, #644]	; (800ee18 <LidarSetPos+0x1310>)
 800eb94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb9a:	d0fa      	beq.n	800eb92 <LidarSetPos+0x108a>
							PP_stop(&pp);
 800eb9c:	489d      	ldr	r0, [pc, #628]	; (800ee14 <LidarSetPos+0x130c>)
 800eb9e:	f7f7 f92c 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800eba2:	4b9c      	ldr	r3, [pc, #624]	; (800ee14 <LidarSetPos+0x130c>)
 800eba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7f1 fcce 	bl	8000548 <__aeabi_f2d>
 800ebac:	a390      	add	r3, pc, #576	; (adr r3, 800edf0 <LidarSetPos+0x12e8>)
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	f7f1 ff9d 	bl	8000af0 <__aeabi_dcmple>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d100      	bne.n	800ebbe <LidarSetPos+0x10b6>
 800ebbc:	e004      	b.n	800ebc8 <LidarSetPos+0x10c0>
							pp.target_vel[0] = 2.0;
 800ebbe:	4b95      	ldr	r3, [pc, #596]	; (800ee14 <LidarSetPos+0x130c>)
 800ebc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ebc4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800ebc8:	4b92      	ldr	r3, [pc, #584]	; (800ee14 <LidarSetPos+0x130c>)
 800ebca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1d6      	bne.n	800eb86 <LidarSetPos+0x107e>
					}

					PP_start(upper_right_to_center_3_2, 1, &pp);
 800ebd8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ebdc:	4a8d      	ldr	r2, [pc, #564]	; (800ee14 <LidarSetPos+0x130c>)
 800ebde:	2101      	movs	r1, #1
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f6 fed0 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ebe6:	e020      	b.n	800ec2a <LidarSetPos+0x1122>
					{
						if(ps4.button == SQUARE)
 800ebe8:	4b8b      	ldr	r3, [pc, #556]	; (800ee18 <LidarSetPos+0x1310>)
 800ebea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebf0:	d108      	bne.n	800ec04 <LidarSetPos+0x10fc>
						{
							while(ps4.button == SQUARE);
 800ebf2:	bf00      	nop
 800ebf4:	4b88      	ldr	r3, [pc, #544]	; (800ee18 <LidarSetPos+0x1310>)
 800ebf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebfc:	d0fa      	beq.n	800ebf4 <LidarSetPos+0x10ec>
							PP_stop(&pp);
 800ebfe:	4885      	ldr	r0, [pc, #532]	; (800ee14 <LidarSetPos+0x130c>)
 800ec00:	f7f7 f8fb 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ec04:	2108      	movs	r1, #8
 800ec06:	4885      	ldr	r0, [pc, #532]	; (800ee1c <LidarSetPos+0x1314>)
 800ec08:	f003 fbbe 	bl	8012388 <HAL_GPIO_ReadPin>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d006      	beq.n	800ec20 <LidarSetPos+0x1118>
 800ec12:	2110      	movs	r1, #16
 800ec14:	4881      	ldr	r0, [pc, #516]	; (800ee1c <LidarSetPos+0x1314>)
 800ec16:	f003 fbb7 	bl	8012388 <HAL_GPIO_ReadPin>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d104      	bne.n	800ec2a <LidarSetPos+0x1122>
							pp.error_y = 0;
 800ec20:	4b7c      	ldr	r3, [pc, #496]	; (800ee14 <LidarSetPos+0x130c>)
 800ec22:	f04f 0200 	mov.w	r2, #0
 800ec26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ec2a:	4b7a      	ldr	r3, [pc, #488]	; (800ee14 <LidarSetPos+0x130c>)
 800ec2c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1d6      	bne.n	800ebe8 <LidarSetPos+0x10e0>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					AdjustRings();
 800ec3a:	f7fd fb93 	bl	800c364 <AdjustRings>
					adjust_servo;
 800ec3e:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ec42:	4877      	ldr	r0, [pc, #476]	; (800ee20 <LidarSetPos+0x1318>)
 800ec44:	f7fb f8cc 	bl	8009de0 <ServoSetPulse>

					break;
 800ec48:	e14b      	b.n	800eee2 <LidarSetPos+0x13da>

				case CENTER:
					stick_fence = 0;
 800ec4a:	4b76      	ldr	r3, [pc, #472]	; (800ee24 <LidarSetPos+0x131c>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]
					if(blue)
 800ec50:	4b69      	ldr	r3, [pc, #420]	; (800edf8 <LidarSetPos+0x12f0>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d006      	beq.n	800ec66 <LidarSetPos+0x115e>
					{
						vesc_speed = BlueType2;
 800ec58:	4b68      	ldr	r3, [pc, #416]	; (800edfc <LidarSetPos+0x12f4>)
 800ec5a:	4a69      	ldr	r2, [pc, #420]	; (800ee00 <LidarSetPos+0x12f8>)
 800ec5c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ec5e:	4b69      	ldr	r3, [pc, #420]	; (800ee04 <LidarSetPos+0x12fc>)
 800ec60:	4a69      	ldr	r2, [pc, #420]	; (800ee08 <LidarSetPos+0x1300>)
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	e005      	b.n	800ec72 <LidarSetPos+0x116a>
					}
					else
					{
						vesc_speed = RedType2;
 800ec66:	4b65      	ldr	r3, [pc, #404]	; (800edfc <LidarSetPos+0x12f4>)
 800ec68:	4a68      	ldr	r2, [pc, #416]	; (800ee0c <LidarSetPos+0x1304>)
 800ec6a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ec6c:	4b65      	ldr	r3, [pc, #404]	; (800ee04 <LidarSetPos+0x12fc>)
 800ec6e:	4a68      	ldr	r2, [pc, #416]	; (800ee10 <LidarSetPos+0x1308>)
 800ec70:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ec72:	f7fd fbaf 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ec76:	463b      	mov	r3, r7
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2206      	movs	r2, #6
 800ec7c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_3, 1, &pp);
 800ec80:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800ec84:	4a63      	ldr	r2, [pc, #396]	; (800ee14 <LidarSetPos+0x130c>)
 800ec86:	2101      	movs	r1, #1
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7f6 fe7c 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ec8e:	e024      	b.n	800ecda <LidarSetPos+0x11d2>
					{
						if(ps4.button == SQUARE)
 800ec90:	4b61      	ldr	r3, [pc, #388]	; (800ee18 <LidarSetPos+0x1310>)
 800ec92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec98:	d107      	bne.n	800ecaa <LidarSetPos+0x11a2>
						{
							while(ps4.button == SQUARE);
 800ec9a:	bf00      	nop
 800ec9c:	4b5e      	ldr	r3, [pc, #376]	; (800ee18 <LidarSetPos+0x1310>)
 800ec9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eca4:	d0fa      	beq.n	800ec9c <LidarSetPos+0x1194>
							StopAutoPP();
 800eca6:	f7fd fb2d 	bl	800c304 <StopAutoPP>
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ecaa:	2108      	movs	r1, #8
 800ecac:	485b      	ldr	r0, [pc, #364]	; (800ee1c <LidarSetPos+0x1314>)
 800ecae:	f003 fb6b 	bl	8012388 <HAL_GPIO_ReadPin>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d006      	beq.n	800ecc6 <LidarSetPos+0x11be>
 800ecb8:	2110      	movs	r1, #16
 800ecba:	4858      	ldr	r0, [pc, #352]	; (800ee1c <LidarSetPos+0x1314>)
 800ecbc:	f003 fb64 	bl	8012388 <HAL_GPIO_ReadPin>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d109      	bne.n	800ecda <LidarSetPos+0x11d2>
						{
							pp.target_y[0] = pp.real_y;
 800ecc6:	4b53      	ldr	r3, [pc, #332]	; (800ee14 <LidarSetPos+0x130c>)
 800ecc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecca:	4a52      	ldr	r2, [pc, #328]	; (800ee14 <LidarSetPos+0x130c>)
 800eccc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ecd0:	4b50      	ldr	r3, [pc, #320]	; (800ee14 <LidarSetPos+0x130c>)
 800ecd2:	f04f 0200 	mov.w	r2, #0
 800ecd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ecda:	4b4e      	ldr	r3, [pc, #312]	; (800ee14 <LidarSetPos+0x130c>)
 800ecdc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1d2      	bne.n	800ec90 <LidarSetPos+0x1188>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ecea:	4b4e      	ldr	r3, [pc, #312]	; (800ee24 <LidarSetPos+0x131c>)
 800ecec:	2201      	movs	r2, #1
 800ecee:	601a      	str	r2, [r3, #0]



					// Only adjust after reached destination
					if(lidar->pos == pose)
 800ecf0:	463b      	mov	r3, r7
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ecf8:	1dfa      	adds	r2, r7, #7
 800ecfa:	7812      	ldrb	r2, [r2, #0]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	f040 80e9 	bne.w	800eed4 <LidarSetPos+0x13cc>
						LidarAdjust(lidar);
 800ed02:	463b      	mov	r3, r7
 800ed04:	6818      	ldr	r0, [r3, #0]
 800ed06:	f000 ff55 	bl	800fbb4 <LidarAdjust>
					break;
 800ed0a:	e0e3      	b.n	800eed4 <LidarSetPos+0x13cc>

				case CENTER_2:
					stick_fence = 0;
 800ed0c:	4b45      	ldr	r3, [pc, #276]	; (800ee24 <LidarSetPos+0x131c>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
					if(blue)
 800ed12:	4b39      	ldr	r3, [pc, #228]	; (800edf8 <LidarSetPos+0x12f0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d006      	beq.n	800ed28 <LidarSetPos+0x1220>
					{
						vesc_speed = BlueType2;
 800ed1a:	4b38      	ldr	r3, [pc, #224]	; (800edfc <LidarSetPos+0x12f4>)
 800ed1c:	4a38      	ldr	r2, [pc, #224]	; (800ee00 <LidarSetPos+0x12f8>)
 800ed1e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ed20:	4b38      	ldr	r3, [pc, #224]	; (800ee04 <LidarSetPos+0x12fc>)
 800ed22:	4a39      	ldr	r2, [pc, #228]	; (800ee08 <LidarSetPos+0x1300>)
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	e005      	b.n	800ed34 <LidarSetPos+0x122c>
					}
					else
					{
						vesc_speed = RedType2;
 800ed28:	4b34      	ldr	r3, [pc, #208]	; (800edfc <LidarSetPos+0x12f4>)
 800ed2a:	4a38      	ldr	r2, [pc, #224]	; (800ee0c <LidarSetPos+0x1304>)
 800ed2c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ed2e:	4b35      	ldr	r3, [pc, #212]	; (800ee04 <LidarSetPos+0x12fc>)
 800ed30:	4a37      	ldr	r2, [pc, #220]	; (800ee10 <LidarSetPos+0x1308>)
 800ed32:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ed34:	f7fd fb4e 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ed38:	463b      	mov	r3, r7
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2206      	movs	r2, #6
 800ed3e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_3, 1, &pp);
 800ed42:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800ed46:	4a33      	ldr	r2, [pc, #204]	; (800ee14 <LidarSetPos+0x130c>)
 800ed48:	2101      	movs	r1, #1
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7f6 fe1b 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ed50:	e025      	b.n	800ed9e <LidarSetPos+0x1296>
					{
						if(ps4.button == SQUARE)
 800ed52:	4b31      	ldr	r3, [pc, #196]	; (800ee18 <LidarSetPos+0x1310>)
 800ed54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed5a:	d108      	bne.n	800ed6e <LidarSetPos+0x1266>
						{
							while(ps4.button == SQUARE);
 800ed5c:	bf00      	nop
 800ed5e:	4b2e      	ldr	r3, [pc, #184]	; (800ee18 <LidarSetPos+0x1310>)
 800ed60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed66:	d0fa      	beq.n	800ed5e <LidarSetPos+0x1256>
							PP_stop(&pp);
 800ed68:	482a      	ldr	r0, [pc, #168]	; (800ee14 <LidarSetPos+0x130c>)
 800ed6a:	f7f7 f846 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_2; // PP Failed
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ed6e:	2108      	movs	r1, #8
 800ed70:	482a      	ldr	r0, [pc, #168]	; (800ee1c <LidarSetPos+0x1314>)
 800ed72:	f003 fb09 	bl	8012388 <HAL_GPIO_ReadPin>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d006      	beq.n	800ed8a <LidarSetPos+0x1282>
 800ed7c:	2110      	movs	r1, #16
 800ed7e:	4827      	ldr	r0, [pc, #156]	; (800ee1c <LidarSetPos+0x1314>)
 800ed80:	f003 fb02 	bl	8012388 <HAL_GPIO_ReadPin>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d109      	bne.n	800ed9e <LidarSetPos+0x1296>
						{
							pp.target_y[0] = pp.real_y;
 800ed8a:	4b22      	ldr	r3, [pc, #136]	; (800ee14 <LidarSetPos+0x130c>)
 800ed8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed8e:	4a21      	ldr	r2, [pc, #132]	; (800ee14 <LidarSetPos+0x130c>)
 800ed90:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ed94:	4b1f      	ldr	r3, [pc, #124]	; (800ee14 <LidarSetPos+0x130c>)
 800ed96:	f04f 0200 	mov.w	r2, #0
 800ed9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ed9e:	4b1d      	ldr	r3, [pc, #116]	; (800ee14 <LidarSetPos+0x130c>)
 800eda0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1d1      	bne.n	800ed52 <LidarSetPos+0x124a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800edae:	4b1d      	ldr	r3, [pc, #116]	; (800ee24 <LidarSetPos+0x131c>)
 800edb0:	2201      	movs	r2, #1
 800edb2:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800edb4:	463b      	mov	r3, r7
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800edbc:	1dfa      	adds	r2, r7, #7
 800edbe:	7812      	ldrb	r2, [r2, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	f040 808a 	bne.w	800eeda <LidarSetPos+0x13d2>
						LidarAdjust(lidar);
 800edc6:	463b      	mov	r3, r7
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	f000 fef3 	bl	800fbb4 <LidarAdjust>
					break;
 800edce:	e084      	b.n	800eeda <LidarSetPos+0x13d2>


				case CENTER_4:
					stick_fence = 0;
 800edd0:	4b14      	ldr	r3, [pc, #80]	; (800ee24 <LidarSetPos+0x131c>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
					if(blue)
 800edd6:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <LidarSetPos+0x12f0>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d024      	beq.n	800ee28 <LidarSetPos+0x1320>
					{
						vesc_speed = BlueType2;
 800edde:	4b07      	ldr	r3, [pc, #28]	; (800edfc <LidarSetPos+0x12f4>)
 800ede0:	4a07      	ldr	r2, [pc, #28]	; (800ee00 <LidarSetPos+0x12f8>)
 800ede2:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ede4:	4b07      	ldr	r3, [pc, #28]	; (800ee04 <LidarSetPos+0x12fc>)
 800ede6:	4a08      	ldr	r2, [pc, #32]	; (800ee08 <LidarSetPos+0x1300>)
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	e023      	b.n	800ee34 <LidarSetPos+0x132c>
 800edec:	f3af 8000 	nop.w
 800edf0:	9999999a 	.word	0x9999999a
 800edf4:	c0059999 	.word	0xc0059999
 800edf8:	20006a1c 	.word	0x20006a1c
 800edfc:	2000659c 	.word	0x2000659c
 800ee00:	41026666 	.word	0x41026666
 800ee04:	20007380 	.word	0x20007380
 800ee08:	3e8ccccd 	.word	0x3e8ccccd
 800ee0c:	41033333 	.word	0x41033333
 800ee10:	3e8a3d71 	.word	0x3e8a3d71
 800ee14:	20006cc4 	.word	0x20006cc4
 800ee18:	2000a014 	.word	0x2000a014
 800ee1c:	40020c00 	.word	0x40020c00
 800ee20:	2000786c 	.word	0x2000786c
 800ee24:	200072bc 	.word	0x200072bc
					}
					else
					{
						vesc_speed = RedType2;
 800ee28:	4bb6      	ldr	r3, [pc, #728]	; (800f104 <LidarSetPos+0x15fc>)
 800ee2a:	4ab7      	ldr	r2, [pc, #732]	; (800f108 <LidarSetPos+0x1600>)
 800ee2c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ee2e:	4bb7      	ldr	r3, [pc, #732]	; (800f10c <LidarSetPos+0x1604>)
 800ee30:	4ab7      	ldr	r2, [pc, #732]	; (800f110 <LidarSetPos+0x1608>)
 800ee32:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ee34:	f7fd face 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ee38:	463b      	mov	r3, r7
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2206      	movs	r2, #6
 800ee3e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center_3, 1, &pp);
 800ee42:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ee46:	4ab3      	ldr	r2, [pc, #716]	; (800f114 <LidarSetPos+0x160c>)
 800ee48:	2101      	movs	r1, #1
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7f6 fd9b 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ee50:	e025      	b.n	800ee9e <LidarSetPos+0x1396>
					{
						if(ps4.button == SQUARE)
 800ee52:	4bb1      	ldr	r3, [pc, #708]	; (800f118 <LidarSetPos+0x1610>)
 800ee54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee5a:	d108      	bne.n	800ee6e <LidarSetPos+0x1366>
						{
							while(ps4.button == SQUARE);
 800ee5c:	bf00      	nop
 800ee5e:	4bae      	ldr	r3, [pc, #696]	; (800f118 <LidarSetPos+0x1610>)
 800ee60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee66:	d0fa      	beq.n	800ee5e <LidarSetPos+0x1356>
							PP_stop(&pp);
 800ee68:	48aa      	ldr	r0, [pc, #680]	; (800f114 <LidarSetPos+0x160c>)
 800ee6a:	f7f6 ffc6 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ee6e:	2108      	movs	r1, #8
 800ee70:	48aa      	ldr	r0, [pc, #680]	; (800f11c <LidarSetPos+0x1614>)
 800ee72:	f003 fa89 	bl	8012388 <HAL_GPIO_ReadPin>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d006      	beq.n	800ee8a <LidarSetPos+0x1382>
 800ee7c:	2110      	movs	r1, #16
 800ee7e:	48a7      	ldr	r0, [pc, #668]	; (800f11c <LidarSetPos+0x1614>)
 800ee80:	f003 fa82 	bl	8012388 <HAL_GPIO_ReadPin>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <LidarSetPos+0x1396>
						{
							pp.target_y[0] = pp.real_y;
 800ee8a:	4ba2      	ldr	r3, [pc, #648]	; (800f114 <LidarSetPos+0x160c>)
 800ee8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee8e:	4aa1      	ldr	r2, [pc, #644]	; (800f114 <LidarSetPos+0x160c>)
 800ee90:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ee94:	4b9f      	ldr	r3, [pc, #636]	; (800f114 <LidarSetPos+0x160c>)
 800ee96:	f04f 0200 	mov.w	r2, #0
 800ee9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ee9e:	4b9d      	ldr	r3, [pc, #628]	; (800f114 <LidarSetPos+0x160c>)
 800eea0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eea4:	f003 0301 	and.w	r3, r3, #1
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1d1      	bne.n	800ee52 <LidarSetPos+0x134a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800eeae:	4b9c      	ldr	r3, [pc, #624]	; (800f120 <LidarSetPos+0x1618>)
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800eeb4:	463b      	mov	r3, r7
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eebc:	1dfa      	adds	r2, r7, #7
 800eebe:	7812      	ldrb	r2, [r2, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d10d      	bne.n	800eee0 <LidarSetPos+0x13d8>
						LidarAdjust(lidar);
 800eec4:	463b      	mov	r3, r7
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	f000 fe74 	bl	800fbb4 <LidarAdjust>
					break;
 800eecc:	e008      	b.n	800eee0 <LidarSetPos+0x13d8>
				default:
					break;
 800eece:	bf00      	nop
 800eed0:	f000 be53 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eed4:	bf00      	nop
 800eed6:	f000 be50 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eeda:	bf00      	nop
 800eedc:	f000 be4d 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800eee0:	bf00      	nop
			}
			break;
 800eee2:	f000 be4a 	b.w	800fb7a <LidarSetPos+0x2072>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 800eee6:	463b      	mov	r3, r7
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eeee:	3b01      	subs	r3, #1
 800eef0:	2b08      	cmp	r3, #8
 800eef2:	f200 8204 	bhi.w	800f2fe <LidarSetPos+0x17f6>
 800eef6:	a201      	add	r2, pc, #4	; (adr r2, 800eefc <LidarSetPos+0x13f4>)
 800eef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eefc:	0800ef21 	.word	0x0800ef21
 800ef00:	0800f0c9 	.word	0x0800f0c9
 800ef04:	0800f2ff 	.word	0x0800f2ff
 800ef08:	0800f2ff 	.word	0x0800f2ff
 800ef0c:	0800ef2d 	.word	0x0800ef2d
 800ef10:	0800f253 	.word	0x0800f253
 800ef14:	0800f2ff 	.word	0x0800f2ff
 800ef18:	0800f0d5 	.word	0x0800f0d5
 800ef1c:	0800efd7 	.word	0x0800efd7
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 800ef20:	463b      	mov	r3, r7
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2207      	movs	r2, #7
 800ef26:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef2a:	e1ef      	b.n	800f30c <LidarSetPos+0x1804>

				case CENTER:
					stick_fence = 0;
 800ef2c:	4b7c      	ldr	r3, [pc, #496]	; (800f120 <LidarSetPos+0x1618>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800ef32:	4b76      	ldr	r3, [pc, #472]	; (800f10c <LidarSetPos+0x1604>)
 800ef34:	4a7b      	ldr	r2, [pc, #492]	; (800f124 <LidarSetPos+0x161c>)
 800ef36:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ef38:	4b72      	ldr	r3, [pc, #456]	; (800f104 <LidarSetPos+0x15fc>)
 800ef3a:	4a7b      	ldr	r2, [pc, #492]	; (800f128 <LidarSetPos+0x1620>)
 800ef3c:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ef3e:	f7fd fa49 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800ef42:	463b      	mov	r3, r7
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2207      	movs	r2, #7
 800ef48:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_4, 1, &pp);
 800ef4c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800ef50:	4a70      	ldr	r2, [pc, #448]	; (800f114 <LidarSetPos+0x160c>)
 800ef52:	2101      	movs	r1, #1
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f6 fd16 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800ef5a:	e025      	b.n	800efa8 <LidarSetPos+0x14a0>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ef5c:	2108      	movs	r1, #8
 800ef5e:	486f      	ldr	r0, [pc, #444]	; (800f11c <LidarSetPos+0x1614>)
 800ef60:	f003 fa12 	bl	8012388 <HAL_GPIO_ReadPin>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d006      	beq.n	800ef78 <LidarSetPos+0x1470>
 800ef6a:	2110      	movs	r1, #16
 800ef6c:	486b      	ldr	r0, [pc, #428]	; (800f11c <LidarSetPos+0x1614>)
 800ef6e:	f003 fa0b 	bl	8012388 <HAL_GPIO_ReadPin>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d109      	bne.n	800ef8c <LidarSetPos+0x1484>
						{
							pp.target_y[0] = pp.real_y;
 800ef78:	4b66      	ldr	r3, [pc, #408]	; (800f114 <LidarSetPos+0x160c>)
 800ef7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef7c:	4a65      	ldr	r2, [pc, #404]	; (800f114 <LidarSetPos+0x160c>)
 800ef7e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ef82:	4b64      	ldr	r3, [pc, #400]	; (800f114 <LidarSetPos+0x160c>)
 800ef84:	f04f 0200 	mov.w	r2, #0
 800ef88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800ef8c:	4b62      	ldr	r3, [pc, #392]	; (800f118 <LidarSetPos+0x1610>)
 800ef8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef94:	d108      	bne.n	800efa8 <LidarSetPos+0x14a0>
						{
							while(ps4.button == SQUARE);
 800ef96:	bf00      	nop
 800ef98:	4b5f      	ldr	r3, [pc, #380]	; (800f118 <LidarSetPos+0x1610>)
 800ef9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa0:	d0fa      	beq.n	800ef98 <LidarSetPos+0x1490>
							PP_stop(&pp);
 800efa2:	485c      	ldr	r0, [pc, #368]	; (800f114 <LidarSetPos+0x160c>)
 800efa4:	f7f6 ff29 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800efa8:	4b5a      	ldr	r3, [pc, #360]	; (800f114 <LidarSetPos+0x160c>)
 800efaa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1d1      	bne.n	800ef5c <LidarSetPos+0x1454>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800efb8:	4b59      	ldr	r3, [pc, #356]	; (800f120 <LidarSetPos+0x1618>)
 800efba:	2201      	movs	r2, #1
 800efbc:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800efbe:	463b      	mov	r3, r7
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800efc6:	1dfa      	adds	r2, r7, #7
 800efc8:	7812      	ldrb	r2, [r2, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d103      	bne.n	800efd6 <LidarSetPos+0x14ce>
						LidarAdjust(lidar);
 800efce:	463b      	mov	r3, r7
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f000 fdef 	bl	800fbb4 <LidarAdjust>

				case PICK_RIGHT:
					stick_fence = 0;
 800efd6:	4b52      	ldr	r3, [pc, #328]	; (800f120 <LidarSetPos+0x1618>)
 800efd8:	2200      	movs	r2, #0
 800efda:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800efdc:	4b4b      	ldr	r3, [pc, #300]	; (800f10c <LidarSetPos+0x1604>)
 800efde:	4a51      	ldr	r2, [pc, #324]	; (800f124 <LidarSetPos+0x161c>)
 800efe0:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800efe2:	4b48      	ldr	r3, [pc, #288]	; (800f104 <LidarSetPos+0x15fc>)
 800efe4:	4a50      	ldr	r2, [pc, #320]	; (800f128 <LidarSetPos+0x1620>)
 800efe6:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800efe8:	f7fd f9f4 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800efec:	463b      	mov	r3, r7
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2207      	movs	r2, #7
 800eff2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 800eff6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800effa:	4a46      	ldr	r2, [pc, #280]	; (800f114 <LidarSetPos+0x160c>)
 800effc:	2101      	movs	r1, #1
 800effe:	4618      	mov	r0, r3
 800f000:	f7f6 fcc1 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f004:	e00d      	b.n	800f022 <LidarSetPos+0x151a>
					{
						if(ps4.button == SQUARE)
 800f006:	4b44      	ldr	r3, [pc, #272]	; (800f118 <LidarSetPos+0x1610>)
 800f008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f00e:	d108      	bne.n	800f022 <LidarSetPos+0x151a>
						{
							while(ps4.button == SQUARE);
 800f010:	bf00      	nop
 800f012:	4b41      	ldr	r3, [pc, #260]	; (800f118 <LidarSetPos+0x1610>)
 800f014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f01a:	d0fa      	beq.n	800f012 <LidarSetPos+0x150a>
							PP_stop(&pp);
 800f01c:	483d      	ldr	r0, [pc, #244]	; (800f114 <LidarSetPos+0x160c>)
 800f01e:	f7f6 feec 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f022:	4b3c      	ldr	r3, [pc, #240]	; (800f114 <LidarSetPos+0x160c>)
 800f024:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d1e9      	bne.n	800f006 <LidarSetPos+0x14fe>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}
					}
					LoadRing();
 800f032:	f7fd f951 	bl	800c2d8 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_4, 1, &pp);
 800f036:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f03a:	4a36      	ldr	r2, [pc, #216]	; (800f114 <LidarSetPos+0x160c>)
 800f03c:	2101      	movs	r1, #1
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f6 fca1 	bl	8005986 <PP_start>

					AdjustRings();
 800f044:	f7fd f98e 	bl	800c364 <AdjustRings>
					while(pp.pp_start)
 800f048:	e020      	b.n	800f08c <LidarSetPos+0x1584>
					{
						if(ps4.button == SQUARE)
 800f04a:	4b33      	ldr	r3, [pc, #204]	; (800f118 <LidarSetPos+0x1610>)
 800f04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f052:	d108      	bne.n	800f066 <LidarSetPos+0x155e>
						{
							while(ps4.button == SQUARE);
 800f054:	bf00      	nop
 800f056:	4b30      	ldr	r3, [pc, #192]	; (800f118 <LidarSetPos+0x1610>)
 800f058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f05e:	d0fa      	beq.n	800f056 <LidarSetPos+0x154e>
							PP_stop(&pp);
 800f060:	482c      	ldr	r0, [pc, #176]	; (800f114 <LidarSetPos+0x160c>)
 800f062:	f7f6 feca 	bl	8005dfa <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f066:	2108      	movs	r1, #8
 800f068:	482c      	ldr	r0, [pc, #176]	; (800f11c <LidarSetPos+0x1614>)
 800f06a:	f003 f98d 	bl	8012388 <HAL_GPIO_ReadPin>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d006      	beq.n	800f082 <LidarSetPos+0x157a>
 800f074:	2110      	movs	r1, #16
 800f076:	4829      	ldr	r0, [pc, #164]	; (800f11c <LidarSetPos+0x1614>)
 800f078:	f003 f986 	bl	8012388 <HAL_GPIO_ReadPin>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d104      	bne.n	800f08c <LidarSetPos+0x1584>
							pp.error_y = 0;
 800f082:	4b24      	ldr	r3, [pc, #144]	; (800f114 <LidarSetPos+0x160c>)
 800f084:	f04f 0200 	mov.w	r2, #0
 800f088:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f08c:	4b21      	ldr	r3, [pc, #132]	; (800f114 <LidarSetPos+0x160c>)
 800f08e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1d6      	bne.n	800f04a <LidarSetPos+0x1542>
//						load_adjust_servo;
//						osDelay(100);
//						close_servo;
//						osDelay(100);
//					}
					adjust_servo;
 800f09c:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f0a0:	4822      	ldr	r0, [pc, #136]	; (800f12c <LidarSetPos+0x1624>)
 800f0a2:	f7fa fe9d 	bl	8009de0 <ServoSetPulse>

					stick_fence = 1;
 800f0a6:	4b1e      	ldr	r3, [pc, #120]	; (800f120 <LidarSetPos+0x1618>)
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f0ac:	463b      	mov	r3, r7
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f0b4:	1dfa      	adds	r2, r7, #7
 800f0b6:	7812      	ldrb	r2, [r2, #0]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	f040 8123 	bne.w	800f304 <LidarSetPos+0x17fc>
						LidarAdjust(lidar);
 800f0be:	463b      	mov	r3, r7
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	f000 fd77 	bl	800fbb4 <LidarAdjust>
					break;
 800f0c6:	e11d      	b.n	800f304 <LidarSetPos+0x17fc>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 800f0c8:	463b      	mov	r3, r7
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2207      	movs	r2, #7
 800f0ce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f0d2:	e11b      	b.n	800f30c <LidarSetPos+0x1804>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 800f0d4:	463b      	mov	r3, r7
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2207      	movs	r2, #7
 800f0da:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800f0de:	2000      	movs	r0, #0
 800f0e0:	f7f5 fd76 	bl	8004bd0 <setOrientationMODN>
					vesc_duty = type1Duty;
 800f0e4:	4b09      	ldr	r3, [pc, #36]	; (800f10c <LidarSetPos+0x1604>)
 800f0e6:	4a0f      	ldr	r2, [pc, #60]	; (800f124 <LidarSetPos+0x161c>)
 800f0e8:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800f0ea:	4b06      	ldr	r3, [pc, #24]	; (800f104 <LidarSetPos+0x15fc>)
 800f0ec:	4a0e      	ldr	r2, [pc, #56]	; (800f128 <LidarSetPos+0x1620>)
 800f0ee:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f0f0:	f7fd f970 	bl	800c3d4 <ResetCoordinate>
					PP_start(upper_right_to_center_4, 1, &pp);
 800f0f4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f0f8:	4a06      	ldr	r2, [pc, #24]	; (800f114 <LidarSetPos+0x160c>)
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f6 fc42 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f102:	e036      	b.n	800f172 <LidarSetPos+0x166a>
 800f104:	2000659c 	.word	0x2000659c
 800f108:	41033333 	.word	0x41033333
 800f10c:	20007380 	.word	0x20007380
 800f110:	3e8a3d71 	.word	0x3e8a3d71
 800f114:	20006cc4 	.word	0x20006cc4
 800f118:	2000a014 	.word	0x2000a014
 800f11c:	40020c00 	.word	0x40020c00
 800f120:	200072bc 	.word	0x200072bc
 800f124:	3e2e147b 	.word	0x3e2e147b
 800f128:	40966666 	.word	0x40966666
 800f12c:	2000786c 	.word	0x2000786c
					{
						if(ps4.button == SQUARE)
 800f130:	4baf      	ldr	r3, [pc, #700]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f138:	d108      	bne.n	800f14c <LidarSetPos+0x1644>
						{
							while(ps4.button == SQUARE);
 800f13a:	bf00      	nop
 800f13c:	4bac      	ldr	r3, [pc, #688]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f144:	d0fa      	beq.n	800f13c <LidarSetPos+0x1634>
							PP_stop(&pp);
 800f146:	48ab      	ldr	r0, [pc, #684]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f148:	f7f6 fe57 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -3.1)
 800f14c:	4ba9      	ldr	r3, [pc, #676]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f150:	4618      	mov	r0, r3
 800f152:	f7f1 f9f9 	bl	8000548 <__aeabi_f2d>
 800f156:	a3a4      	add	r3, pc, #656	; (adr r3, 800f3e8 <LidarSetPos+0x18e0>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 fcc8 	bl	8000af0 <__aeabi_dcmple>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d100      	bne.n	800f168 <LidarSetPos+0x1660>
 800f166:	e004      	b.n	800f172 <LidarSetPos+0x166a>
						{
							pp.target_vel[0] = 2.0;
 800f168:	4ba2      	ldr	r3, [pc, #648]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f16a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f16e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f172:	4ba0      	ldr	r3, [pc, #640]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f174:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f178:	f003 0301 	and.w	r3, r3, #1
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1d6      	bne.n	800f130 <LidarSetPos+0x1628>
						}
					}

					PP_start(upper_right_to_center_4_2, 1, &pp);
 800f182:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800f186:	4a9b      	ldr	r2, [pc, #620]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f188:	2101      	movs	r1, #1
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7f6 fbfb 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f190:	e020      	b.n	800f1d4 <LidarSetPos+0x16cc>
					{
						if(ps4.button == SQUARE)
 800f192:	4b97      	ldr	r3, [pc, #604]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f19a:	d108      	bne.n	800f1ae <LidarSetPos+0x16a6>
						{
							while(ps4.button == SQUARE);
 800f19c:	bf00      	nop
 800f19e:	4b94      	ldr	r3, [pc, #592]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1a6:	d0fa      	beq.n	800f19e <LidarSetPos+0x1696>
							PP_stop(&pp);
 800f1a8:	4892      	ldr	r0, [pc, #584]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f1aa:	f7f6 fe26 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f1ae:	2108      	movs	r1, #8
 800f1b0:	4891      	ldr	r0, [pc, #580]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f1b2:	f003 f8e9 	bl	8012388 <HAL_GPIO_ReadPin>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d006      	beq.n	800f1ca <LidarSetPos+0x16c2>
 800f1bc:	2110      	movs	r1, #16
 800f1be:	488e      	ldr	r0, [pc, #568]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f1c0:	f003 f8e2 	bl	8012388 <HAL_GPIO_ReadPin>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d104      	bne.n	800f1d4 <LidarSetPos+0x16cc>
							pp.error_y = 0;
 800f1ca:	4b8a      	ldr	r3, [pc, #552]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f1cc:	f04f 0200 	mov.w	r2, #0
 800f1d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f1d4:	4b87      	ldr	r3, [pc, #540]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f1d6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f1da:	f003 0301 	and.w	r3, r3, #1
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1d6      	bne.n	800f192 <LidarSetPos+0x168a>
					}

					PP_start(bang_fence, 1, &pp);
 800f1e4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800f1e8:	4a82      	ldr	r2, [pc, #520]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f6 fbca 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f1f2:	e01e      	b.n	800f232 <LidarSetPos+0x172a>
					{
						if(ps4.button == SQUARE)
 800f1f4:	4b7e      	ldr	r3, [pc, #504]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1fc:	d108      	bne.n	800f210 <LidarSetPos+0x1708>
						{
							while(ps4.button == SQUARE);
 800f1fe:	bf00      	nop
 800f200:	4b7b      	ldr	r3, [pc, #492]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f208:	d0fa      	beq.n	800f200 <LidarSetPos+0x16f8>
							PP_stop(&pp);
 800f20a:	487a      	ldr	r0, [pc, #488]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f20c:	f7f6 fdf5 	bl	8005dfa <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f210:	2108      	movs	r1, #8
 800f212:	4879      	ldr	r0, [pc, #484]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f214:	f003 f8b8 	bl	8012388 <HAL_GPIO_ReadPin>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d006      	beq.n	800f22c <LidarSetPos+0x1724>
 800f21e:	2110      	movs	r1, #16
 800f220:	4875      	ldr	r0, [pc, #468]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f222:	f003 f8b1 	bl	8012388 <HAL_GPIO_ReadPin>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d102      	bne.n	800f232 <LidarSetPos+0x172a>
							PP_stop(&pp);
 800f22c:	4871      	ldr	r0, [pc, #452]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f22e:	f7f6 fde4 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f232:	4b70      	ldr	r3, [pc, #448]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f234:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f238:	f003 0301 	and.w	r3, r3, #1
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1d8      	bne.n	800f1f4 <LidarSetPos+0x16ec>
					}

					AdjustRings();
 800f242:	f7fd f88f 	bl	800c364 <AdjustRings>
					adjust_servo;
 800f246:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f24a:	486c      	ldr	r0, [pc, #432]	; (800f3fc <LidarSetPos+0x18f4>)
 800f24c:	f7fa fdc8 	bl	8009de0 <ServoSetPulse>

					break;
 800f250:	e05c      	b.n	800f30c <LidarSetPos+0x1804>

				case CENTER_3:
					stick_fence = 0;
 800f252:	4b6b      	ldr	r3, [pc, #428]	; (800f400 <LidarSetPos+0x18f8>)
 800f254:	2200      	movs	r2, #0
 800f256:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800f258:	4b6a      	ldr	r3, [pc, #424]	; (800f404 <LidarSetPos+0x18fc>)
 800f25a:	4a6b      	ldr	r2, [pc, #428]	; (800f408 <LidarSetPos+0x1900>)
 800f25c:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800f25e:	4b6b      	ldr	r3, [pc, #428]	; (800f40c <LidarSetPos+0x1904>)
 800f260:	4a6b      	ldr	r2, [pc, #428]	; (800f410 <LidarSetPos+0x1908>)
 800f262:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f264:	f7fd f8b6 	bl	800c3d4 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800f268:	463b      	mov	r3, r7
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2207      	movs	r2, #7
 800f26e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_4, 1, &pp);
 800f272:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800f276:	4a5f      	ldr	r2, [pc, #380]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f278:	2101      	movs	r1, #1
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f6 fb83 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f280:	e025      	b.n	800f2ce <LidarSetPos+0x17c6>
					{
						if(ps4.button == SQUARE)
 800f282:	4b5b      	ldr	r3, [pc, #364]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f28a:	d108      	bne.n	800f29e <LidarSetPos+0x1796>
						{
							while(ps4.button == SQUARE);
 800f28c:	bf00      	nop
 800f28e:	4b58      	ldr	r3, [pc, #352]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f296:	d0fa      	beq.n	800f28e <LidarSetPos+0x1786>
							PP_stop(&pp);
 800f298:	4856      	ldr	r0, [pc, #344]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f29a:	f7f6 fdae 	bl	8005dfa <PP_stop>
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f29e:	2108      	movs	r1, #8
 800f2a0:	4855      	ldr	r0, [pc, #340]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f2a2:	f003 f871 	bl	8012388 <HAL_GPIO_ReadPin>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d006      	beq.n	800f2ba <LidarSetPos+0x17b2>
 800f2ac:	2110      	movs	r1, #16
 800f2ae:	4852      	ldr	r0, [pc, #328]	; (800f3f8 <LidarSetPos+0x18f0>)
 800f2b0:	f003 f86a 	bl	8012388 <HAL_GPIO_ReadPin>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d109      	bne.n	800f2ce <LidarSetPos+0x17c6>
						{
							pp.target_y[0] = pp.real_y;
 800f2ba:	4b4e      	ldr	r3, [pc, #312]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2be:	4a4d      	ldr	r2, [pc, #308]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f2c0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800f2c4:	4b4b      	ldr	r3, [pc, #300]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f2c6:	f04f 0200 	mov.w	r2, #0
 800f2ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f2ce:	4b49      	ldr	r3, [pc, #292]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f2d0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f2d4:	f003 0301 	and.w	r3, r3, #1
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1d1      	bne.n	800f282 <LidarSetPos+0x177a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800f2de:	4b48      	ldr	r3, [pc, #288]	; (800f400 <LidarSetPos+0x18f8>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(lidar->pos == pose)
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f2ec:	1dfa      	adds	r2, r7, #7
 800f2ee:	7812      	ldrb	r2, [r2, #0]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d10a      	bne.n	800f30a <LidarSetPos+0x1802>
						LidarAdjust(lidar);
 800f2f4:	463b      	mov	r3, r7
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	f000 fc5c 	bl	800fbb4 <LidarAdjust>
					break;
 800f2fc:	e005      	b.n	800f30a <LidarSetPos+0x1802>

				default:
					break;
 800f2fe:	bf00      	nop
 800f300:	f000 bc3b 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800f304:	bf00      	nop
 800f306:	f000 bc38 	b.w	800fb7a <LidarSetPos+0x2072>
					break;
 800f30a:	bf00      	nop
			}
			break;
 800f30c:	f000 bc35 	b.w	800fb7a <LidarSetPos+0x2072>


		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
 800f310:	463b      	mov	r3, r7
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f318:	3b01      	subs	r3, #1
 800f31a:	2b08      	cmp	r3, #8
 800f31c:	f200 81e8 	bhi.w	800f6f0 <LidarSetPos+0x1be8>
 800f320:	a201      	add	r2, pc, #4	; (adr r2, 800f328 <LidarSetPos+0x1820>)
 800f322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f326:	bf00      	nop
 800f328:	0800f34d 	.word	0x0800f34d
 800f32c:	0800f4cd 	.word	0x0800f4cd
 800f330:	0800f6f1 	.word	0x0800f6f1
 800f334:	0800f6f1 	.word	0x0800f6f1
 800f338:	0800f4d9 	.word	0x0800f4d9
 800f33c:	0800f4e5 	.word	0x0800f4e5
 800f340:	0800f5eb 	.word	0x0800f5eb
 800f344:	0800f6f1 	.word	0x0800f6f1
 800f348:	0800f359 	.word	0x0800f359
			{
				case PICK_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f34c:	463b      	mov	r3, r7
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2208      	movs	r2, #8
 800f352:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f356:	e1cc      	b.n	800f6f2 <LidarSetPos+0x1bea>

				case PICK_RIGHT:
					lidar->pos = UPPER_RIGHT;
 800f358:	463b      	mov	r3, r7
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2208      	movs	r2, #8
 800f35e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f362:	4b2c      	ldr	r3, [pc, #176]	; (800f414 <LidarSetPos+0x190c>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d007      	beq.n	800f37a <LidarSetPos+0x1872>
					{
						vesc_speed = BlueType3;
 800f36a:	4b28      	ldr	r3, [pc, #160]	; (800f40c <LidarSetPos+0x1904>)
 800f36c:	4a2a      	ldr	r2, [pc, #168]	; (800f418 <LidarSetPos+0x1910>)
 800f36e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f370:	4b24      	ldr	r3, [pc, #144]	; (800f404 <LidarSetPos+0x18fc>)
 800f372:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f376:	601a      	str	r2, [r3, #0]
 800f378:	e006      	b.n	800f388 <LidarSetPos+0x1880>
					}
					else
					{
						vesc_speed = RedType3;
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <LidarSetPos+0x1904>)
 800f37c:	4a27      	ldr	r2, [pc, #156]	; (800f41c <LidarSetPos+0x1914>)
 800f37e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f380:	4b20      	ldr	r3, [pc, #128]	; (800f404 <LidarSetPos+0x18fc>)
 800f382:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f386:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f388:	2003      	movs	r0, #3
 800f38a:	f7f5 fc21 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f38e:	f7fd f821 	bl	800c3d4 <ResetCoordinate>
					PP_start(pick_right_to_upper_right, 1, &pp);
 800f392:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800f396:	4a17      	ldr	r2, [pc, #92]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f398:	2101      	movs	r1, #1
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7f6 faf3 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f3a0:	e00d      	b.n	800f3be <LidarSetPos+0x18b6>
					{
						if(ps4.button == SQUARE)
 800f3a2:	4b13      	ldr	r3, [pc, #76]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3aa:	d108      	bne.n	800f3be <LidarSetPos+0x18b6>
						{
							while(ps4.button == SQUARE);
 800f3ac:	bf00      	nop
 800f3ae:	4b10      	ldr	r3, [pc, #64]	; (800f3f0 <LidarSetPos+0x18e8>)
 800f3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3b6:	d0fa      	beq.n	800f3ae <LidarSetPos+0x18a6>
							PP_stop(&pp);
 800f3b8:	480e      	ldr	r0, [pc, #56]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f3ba:	f7f6 fd1e 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f3be:	4b0d      	ldr	r3, [pc, #52]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f3c0:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f3c4:	f003 0301 	and.w	r3, r3, #1
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1e9      	bne.n	800f3a2 <LidarSetPos+0x189a>
						}
					}
					LoadRing();
 800f3ce:	f7fc ff83 	bl	800c2d8 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_upper_right_2, 1, &pp);
 800f3d2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800f3d6:	4a07      	ldr	r2, [pc, #28]	; (800f3f4 <LidarSetPos+0x18ec>)
 800f3d8:	2101      	movs	r1, #1
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7f6 fad3 	bl	8005986 <PP_start>
					AdjustRings();
 800f3e0:	f7fc ffc0 	bl	800c364 <AdjustRings>
					while(pp.pp_start)
 800f3e4:	e062      	b.n	800f4ac <LidarSetPos+0x19a4>
 800f3e6:	bf00      	nop
 800f3e8:	cccccccd 	.word	0xcccccccd
 800f3ec:	c008cccc 	.word	0xc008cccc
 800f3f0:	2000a014 	.word	0x2000a014
 800f3f4:	20006cc4 	.word	0x20006cc4
 800f3f8:	40020c00 	.word	0x40020c00
 800f3fc:	2000786c 	.word	0x2000786c
 800f400:	200072bc 	.word	0x200072bc
 800f404:	20007380 	.word	0x20007380
 800f408:	3e2e147b 	.word	0x3e2e147b
 800f40c:	2000659c 	.word	0x2000659c
 800f410:	40966666 	.word	0x40966666
 800f414:	20006a1c 	.word	0x20006a1c
 800f418:	413c0000 	.word	0x413c0000
 800f41c:	413b3333 	.word	0x413b3333
					{
						if(ps4.button == SQUARE)
 800f420:	4bb4      	ldr	r3, [pc, #720]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f428:	d108      	bne.n	800f43c <LidarSetPos+0x1934>
						{
							while(ps4.button == SQUARE);
 800f42a:	bf00      	nop
 800f42c:	4bb1      	ldr	r3, [pc, #708]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f434:	d0fa      	beq.n	800f42c <LidarSetPos+0x1924>
							PP_stop(&pp);
 800f436:	48b0      	ldr	r0, [pc, #704]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f438:	f7f6 fcdf 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y >= 3.0)
 800f43c:	4bae      	ldr	r3, [pc, #696]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f43e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f442:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	db04      	blt.n	800f45a <LidarSetPos+0x1952>
							pp.target_vel[0] = 1.0;
 800f450:	4ba9      	ldr	r3, [pc, #676]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f452:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f456:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2 && pp.real_z < -150 && pp.real_y > 3)
 800f45a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f45e:	48a7      	ldr	r0, [pc, #668]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f460:	f002 ff92 	bl	8012388 <HAL_GPIO_ReadPin>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d120      	bne.n	800f4ac <LidarSetPos+0x19a4>
 800f46a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f46e:	48a3      	ldr	r0, [pc, #652]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f470:	f002 ff8a 	bl	8012388 <HAL_GPIO_ReadPin>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d118      	bne.n	800f4ac <LidarSetPos+0x19a4>
 800f47a:	4b9f      	ldr	r3, [pc, #636]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f47c:	edd3 7a04 	vldr	s15, [r3, #16]
 800f480:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800f700 <LidarSetPos+0x1bf8>
 800f484:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48c:	d400      	bmi.n	800f490 <LidarSetPos+0x1988>
 800f48e:	e00d      	b.n	800f4ac <LidarSetPos+0x19a4>
 800f490:	4b99      	ldr	r3, [pc, #612]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f492:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f496:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f49a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a2:	dc00      	bgt.n	800f4a6 <LidarSetPos+0x199e>
 800f4a4:	e002      	b.n	800f4ac <LidarSetPos+0x19a4>
							PP_stop(&pp);
 800f4a6:	4894      	ldr	r0, [pc, #592]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f4a8:	f7f6 fca7 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f4ac:	4b92      	ldr	r3, [pc, #584]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f4ae:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f4b2:	f003 0301 	and.w	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1b1      	bne.n	800f420 <LidarSetPos+0x1918>
					}

					AdjustRings();
 800f4bc:	f7fc ff52 	bl	800c364 <AdjustRings>
					adjust_servo;
 800f4c0:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f4c4:	488f      	ldr	r0, [pc, #572]	; (800f704 <LidarSetPos+0x1bfc>)
 800f4c6:	f7fa fc8b 	bl	8009de0 <ServoSetPulse>
					break;
 800f4ca:	e112      	b.n	800f6f2 <LidarSetPos+0x1bea>

				case UPPER_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f4cc:	463b      	mov	r3, r7
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2208      	movs	r2, #8
 800f4d2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f4d6:	e10c      	b.n	800f6f2 <LidarSetPos+0x1bea>

				case CENTER:
					lidar->pos = UPPER_RIGHT;
 800f4d8:	463b      	mov	r3, r7
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2208      	movs	r2, #8
 800f4de:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f4e2:	e106      	b.n	800f6f2 <LidarSetPos+0x1bea>

				case CENTER_3:
					lidar->pos = UPPER_RIGHT;
 800f4e4:	463b      	mov	r3, r7
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2208      	movs	r2, #8
 800f4ea:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f4ee:	4b86      	ldr	r3, [pc, #536]	; (800f708 <LidarSetPos+0x1c00>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d007      	beq.n	800f506 <LidarSetPos+0x19fe>
					{
						vesc_speed = BlueType3;
 800f4f6:	4b85      	ldr	r3, [pc, #532]	; (800f70c <LidarSetPos+0x1c04>)
 800f4f8:	4a85      	ldr	r2, [pc, #532]	; (800f710 <LidarSetPos+0x1c08>)
 800f4fa:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f4fc:	4b85      	ldr	r3, [pc, #532]	; (800f714 <LidarSetPos+0x1c0c>)
 800f4fe:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	e006      	b.n	800f514 <LidarSetPos+0x1a0c>
					}
					else
					{
						vesc_speed = RedType3;
 800f506:	4b81      	ldr	r3, [pc, #516]	; (800f70c <LidarSetPos+0x1c04>)
 800f508:	4a83      	ldr	r2, [pc, #524]	; (800f718 <LidarSetPos+0x1c10>)
 800f50a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f50c:	4b81      	ldr	r3, [pc, #516]	; (800f714 <LidarSetPos+0x1c0c>)
 800f50e:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f512:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f514:	2003      	movs	r0, #3
 800f516:	f7f5 fb5b 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f51a:	f7fc ff5b 	bl	800c3d4 <ResetCoordinate>
					PP_start(center_3_to_upper_right, 1, &pp);
 800f51e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800f522:	4a75      	ldr	r2, [pc, #468]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f524:	2101      	movs	r1, #1
 800f526:	4618      	mov	r0, r3
 800f528:	f7f6 fa2d 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f52c:	e00d      	b.n	800f54a <LidarSetPos+0x1a42>
					{
						if(ps4.button == SQUARE)
 800f52e:	4b71      	ldr	r3, [pc, #452]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f536:	d108      	bne.n	800f54a <LidarSetPos+0x1a42>
						{
							while(ps4.button == SQUARE);
 800f538:	bf00      	nop
 800f53a:	4b6e      	ldr	r3, [pc, #440]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f542:	d0fa      	beq.n	800f53a <LidarSetPos+0x1a32>
							PP_stop(&pp);
 800f544:	486c      	ldr	r0, [pc, #432]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f546:	f7f6 fc58 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f54a:	4b6b      	ldr	r3, [pc, #428]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f54c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	b2db      	uxtb	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e9      	bne.n	800f52e <LidarSetPos+0x1a26>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_3_to_upper_right_2, 1, &pp);
 800f55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f55e:	4a66      	ldr	r2, [pc, #408]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f560:	2101      	movs	r1, #1
 800f562:	4618      	mov	r0, r3
 800f564:	f7f6 fa0f 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f568:	e02f      	b.n	800f5ca <LidarSetPos+0x1ac2>
					{
						if(ps4.button == SQUARE)
 800f56a:	4b62      	ldr	r3, [pc, #392]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f56c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f56e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f572:	d108      	bne.n	800f586 <LidarSetPos+0x1a7e>
						{
							while(ps4.button == SQUARE);
 800f574:	bf00      	nop
 800f576:	4b5f      	ldr	r3, [pc, #380]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f57e:	d0fa      	beq.n	800f576 <LidarSetPos+0x1a6e>
							PP_stop(&pp);
 800f580:	485d      	ldr	r0, [pc, #372]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f582:	f7f6 fc3a 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y >= 2.0)
 800f586:	4b5c      	ldr	r3, [pc, #368]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f588:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f58c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f590:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	db04      	blt.n	800f5a4 <LidarSetPos+0x1a9c>
							pp.target_vel[0] = 1.0;
 800f59a:	4b57      	ldr	r3, [pc, #348]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f59c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f5a0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f5a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f5a8:	4854      	ldr	r0, [pc, #336]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f5aa:	f002 feed 	bl	8012388 <HAL_GPIO_ReadPin>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10a      	bne.n	800f5ca <LidarSetPos+0x1ac2>
 800f5b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f5b8:	4850      	ldr	r0, [pc, #320]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f5ba:	f002 fee5 	bl	8012388 <HAL_GPIO_ReadPin>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d102      	bne.n	800f5ca <LidarSetPos+0x1ac2>
							PP_stop(&pp);
 800f5c4:	484c      	ldr	r0, [pc, #304]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f5c6:	f7f6 fc18 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f5ca:	4b4b      	ldr	r3, [pc, #300]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f5cc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1c7      	bne.n	800f56a <LidarSetPos+0x1a62>
					}

					AdjustRings();
 800f5da:	f7fc fec3 	bl	800c364 <AdjustRings>
					adjust_servo;
 800f5de:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f5e2:	4848      	ldr	r0, [pc, #288]	; (800f704 <LidarSetPos+0x1bfc>)
 800f5e4:	f7fa fbfc 	bl	8009de0 <ServoSetPulse>


					break;
 800f5e8:	e083      	b.n	800f6f2 <LidarSetPos+0x1bea>

				case CENTER_4:
					lidar->pos = UPPER_RIGHT;
 800f5ea:	463b      	mov	r3, r7
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2208      	movs	r2, #8
 800f5f0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f5f4:	4b44      	ldr	r3, [pc, #272]	; (800f708 <LidarSetPos+0x1c00>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <LidarSetPos+0x1b04>
					{
						vesc_speed = BlueType3;
 800f5fc:	4b43      	ldr	r3, [pc, #268]	; (800f70c <LidarSetPos+0x1c04>)
 800f5fe:	4a44      	ldr	r2, [pc, #272]	; (800f710 <LidarSetPos+0x1c08>)
 800f600:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f602:	4b44      	ldr	r3, [pc, #272]	; (800f714 <LidarSetPos+0x1c0c>)
 800f604:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	e006      	b.n	800f61a <LidarSetPos+0x1b12>
					}
					else
					{
						vesc_speed = RedType3;
 800f60c:	4b3f      	ldr	r3, [pc, #252]	; (800f70c <LidarSetPos+0x1c04>)
 800f60e:	4a42      	ldr	r2, [pc, #264]	; (800f718 <LidarSetPos+0x1c10>)
 800f610:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f612:	4b40      	ldr	r3, [pc, #256]	; (800f714 <LidarSetPos+0x1c0c>)
 800f614:	f04f 527b 	mov.w	r2, #1052770304	; 0x3ec00000
 800f618:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f61a:	2003      	movs	r0, #3
 800f61c:	f7f5 fad8 	bl	8004bd0 <setOrientationMODN>
					ResetCoordinate();
 800f620:	f7fc fed8 	bl	800c3d4 <ResetCoordinate>
					PP_start(center_4_to_upper_right, 1, &pp);
 800f624:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800f628:	4a33      	ldr	r2, [pc, #204]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f62a:	2101      	movs	r1, #1
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f6 f9aa 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f632:	e00d      	b.n	800f650 <LidarSetPos+0x1b48>
					{
						if(ps4.button == SQUARE)
 800f634:	4b2f      	ldr	r3, [pc, #188]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f63c:	d108      	bne.n	800f650 <LidarSetPos+0x1b48>
						{
							while(ps4.button == SQUARE);
 800f63e:	bf00      	nop
 800f640:	4b2c      	ldr	r3, [pc, #176]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f648:	d0fa      	beq.n	800f640 <LidarSetPos+0x1b38>
							PP_stop(&pp);
 800f64a:	482b      	ldr	r0, [pc, #172]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f64c:	f7f6 fbd5 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f650:	4b29      	ldr	r3, [pc, #164]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f652:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e9      	bne.n	800f634 <LidarSetPos+0x1b2c>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_4_to_upper_right_2, 1, &pp);
 800f660:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800f664:	4a24      	ldr	r2, [pc, #144]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f666:	2101      	movs	r1, #1
 800f668:	4618      	mov	r0, r3
 800f66a:	f7f6 f98c 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f66e:	e02f      	b.n	800f6d0 <LidarSetPos+0x1bc8>
					{
						if(ps4.button == SQUARE)
 800f670:	4b20      	ldr	r3, [pc, #128]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f678:	d108      	bne.n	800f68c <LidarSetPos+0x1b84>
						{
							while(ps4.button == SQUARE)
 800f67a:	e002      	b.n	800f682 <LidarSetPos+0x1b7a>
							PP_stop(&pp);
 800f67c:	481e      	ldr	r0, [pc, #120]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f67e:	f7f6 fbbc 	bl	8005dfa <PP_stop>
							while(ps4.button == SQUARE)
 800f682:	4b1c      	ldr	r3, [pc, #112]	; (800f6f4 <LidarSetPos+0x1bec>)
 800f684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f68a:	d0f7      	beq.n	800f67c <LidarSetPos+0x1b74>
						}

						if(pp.real_y >= 2.0)
 800f68c:	4b1a      	ldr	r3, [pc, #104]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f68e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f692:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69e:	db04      	blt.n	800f6aa <LidarSetPos+0x1ba2>
							pp.target_vel[0] = 1.0;
 800f6a0:	4b15      	ldr	r3, [pc, #84]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f6a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f6a6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f6aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f6ae:	4813      	ldr	r0, [pc, #76]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f6b0:	f002 fe6a 	bl	8012388 <HAL_GPIO_ReadPin>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d10a      	bne.n	800f6d0 <LidarSetPos+0x1bc8>
 800f6ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f6be:	480f      	ldr	r0, [pc, #60]	; (800f6fc <LidarSetPos+0x1bf4>)
 800f6c0:	f002 fe62 	bl	8012388 <HAL_GPIO_ReadPin>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <LidarSetPos+0x1bc8>
							PP_stop(&pp);
 800f6ca:	480b      	ldr	r0, [pc, #44]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f6cc:	f7f6 fb95 	bl	8005dfa <PP_stop>
					while(pp.pp_start)
 800f6d0:	4b09      	ldr	r3, [pc, #36]	; (800f6f8 <LidarSetPos+0x1bf0>)
 800f6d2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f6d6:	f003 0301 	and.w	r3, r3, #1
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1c7      	bne.n	800f670 <LidarSetPos+0x1b68>
					}

					AdjustRings();
 800f6e0:	f7fc fe40 	bl	800c364 <AdjustRings>
					adjust_servo;
 800f6e4:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f6e8:	4806      	ldr	r0, [pc, #24]	; (800f704 <LidarSetPos+0x1bfc>)
 800f6ea:	f7fa fb79 	bl	8009de0 <ServoSetPulse>

					break;
 800f6ee:	e000      	b.n	800f6f2 <LidarSetPos+0x1bea>

				default:
					break;
 800f6f0:	bf00      	nop
			}
			break;
 800f6f2:	e242      	b.n	800fb7a <LidarSetPos+0x2072>
 800f6f4:	2000a014 	.word	0x2000a014
 800f6f8:	20006cc4 	.word	0x20006cc4
 800f6fc:	40020c00 	.word	0x40020c00
 800f700:	c3160000 	.word	0xc3160000
 800f704:	2000786c 	.word	0x2000786c
 800f708:	20006a1c 	.word	0x20006a1c
 800f70c:	2000659c 	.word	0x2000659c
 800f710:	413c0000 	.word	0x413c0000
 800f714:	20007380 	.word	0x20007380
 800f718:	413b3333 	.word	0x413b3333

		case PICK_RIGHT:
			switch(lidar->pos)
 800f71c:	463b      	mov	r3, r7
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f724:	3b03      	subs	r3, #3
 800f726:	2b05      	cmp	r3, #5
 800f728:	f200 8225 	bhi.w	800fb76 <LidarSetPos+0x206e>
 800f72c:	a201      	add	r2, pc, #4	; (adr r2, 800f734 <LidarSetPos+0x1c2c>)
 800f72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f732:	bf00      	nop
 800f734:	0800f7fd 	.word	0x0800f7fd
 800f738:	0800f8a5 	.word	0x0800f8a5
 800f73c:	0800f947 	.word	0x0800f947
 800f740:	0800fa2d 	.word	0x0800fa2d
 800f744:	0800fad5 	.word	0x0800fad5
 800f748:	0800f74d 	.word	0x0800f74d
			{
				case UPPER_RIGHT:
					lidar->pos = PICK_RIGHT;
 800f74c:	463b      	mov	r3, r7
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2209      	movs	r2, #9
 800f752:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f756:	f7fc fe3d 	bl	800c3d4 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800f75a:	2000      	movs	r0, #0
 800f75c:	f7f5 fa38 	bl	8004bd0 <setOrientationMODN>
					loaded = 0;
 800f760:	4ba9      	ldr	r3, [pc, #676]	; (800fa08 <LidarSetPos+0x1f00>)
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f766:	4ba9      	ldr	r3, [pc, #676]	; (800fa0c <LidarSetPos+0x1f04>)
 800f768:	f04f 0200 	mov.w	r2, #0
 800f76c:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f76e:	4ba8      	ldr	r3, [pc, #672]	; (800fa10 <LidarSetPos+0x1f08>)
 800f770:	f04f 0200 	mov.w	r2, #0
 800f774:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f77a:	f7fc f955 	bl	800ba28 <setPick>
					open_servo;
 800f77e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f782:	48a4      	ldr	r0, [pc, #656]	; (800fa14 <LidarSetPos+0x1f0c>)
 800f784:	f7fa fb2c 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f788:	4aa3      	ldr	r2, [pc, #652]	; (800fa18 <LidarSetPos+0x1f10>)
 800f78a:	7f13      	ldrb	r3, [r2, #28]
 800f78c:	f36f 1386 	bfc	r3, #6, #1
 800f790:	7713      	strb	r3, [r2, #28]
					PP_start(upper_right_to_pick_right, 1, &pp);
 800f792:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800f796:	4aa1      	ldr	r2, [pc, #644]	; (800fa1c <LidarSetPos+0x1f14>)
 800f798:	2101      	movs	r1, #1
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f6 f8f3 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f7a0:	e020      	b.n	800f7e4 <LidarSetPos+0x1cdc>
					{
						if(ps4.button == SQUARE)
 800f7a2:	4b9f      	ldr	r3, [pc, #636]	; (800fa20 <LidarSetPos+0x1f18>)
 800f7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7aa:	d108      	bne.n	800f7be <LidarSetPos+0x1cb6>
						{
							while(ps4.button == SQUARE);
 800f7ac:	bf00      	nop
 800f7ae:	4b9c      	ldr	r3, [pc, #624]	; (800fa20 <LidarSetPos+0x1f18>)
 800f7b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7b6:	d0fa      	beq.n	800f7ae <LidarSetPos+0x1ca6>
							PP_stop(&pp);
 800f7b8:	4898      	ldr	r0, [pc, #608]	; (800fa1c <LidarSetPos+0x1f14>)
 800f7ba:	f7f6 fb1e 	bl	8005dfa <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800f7be:	4b97      	ldr	r3, [pc, #604]	; (800fa1c <LidarSetPos+0x1f14>)
 800f7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f0 fec0 	bl	8000548 <__aeabi_f2d>
 800f7c8:	a389      	add	r3, pc, #548	; (adr r3, 800f9f0 <LidarSetPos+0x1ee8>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f1 f98f 	bl	8000af0 <__aeabi_dcmple>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d100      	bne.n	800f7da <LidarSetPos+0x1cd2>
 800f7d8:	e004      	b.n	800f7e4 <LidarSetPos+0x1cdc>
							pp.target_vel[0] = 1.5;
 800f7da:	4b90      	ldr	r3, [pc, #576]	; (800fa1c <LidarSetPos+0x1f14>)
 800f7dc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800f7e0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f7e4:	4b8d      	ldr	r3, [pc, #564]	; (800fa1c <LidarSetPos+0x1f14>)
 800f7e6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1d6      	bne.n	800f7a2 <LidarSetPos+0x1c9a>
					}
					pick_right = 1;
 800f7f4:	4b8b      	ldr	r3, [pc, #556]	; (800fa24 <LidarSetPos+0x1f1c>)
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	601a      	str	r2, [r3, #0]
					break;
 800f7fa:	e1bd      	b.n	800fb78 <LidarSetPos+0x2070>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 800f7fc:	463b      	mov	r3, r7
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2209      	movs	r2, #9
 800f802:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f806:	f7fc fde5 	bl	800c3d4 <ResetCoordinate>
					loaded = 0;
 800f80a:	4b7f      	ldr	r3, [pc, #508]	; (800fa08 <LidarSetPos+0x1f00>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f810:	4b7e      	ldr	r3, [pc, #504]	; (800fa0c <LidarSetPos+0x1f04>)
 800f812:	f04f 0200 	mov.w	r2, #0
 800f816:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f818:	4b7d      	ldr	r3, [pc, #500]	; (800fa10 <LidarSetPos+0x1f08>)
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f824:	f7fc f900 	bl	800ba28 <setPick>
					open_servo;
 800f828:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f82c:	4879      	ldr	r0, [pc, #484]	; (800fa14 <LidarSetPos+0x1f0c>)
 800f82e:	f7fa fad7 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f832:	4a79      	ldr	r2, [pc, #484]	; (800fa18 <LidarSetPos+0x1f10>)
 800f834:	7f13      	ldrb	r3, [r2, #28]
 800f836:	f36f 1386 	bfc	r3, #6, #1
 800f83a:	7713      	strb	r3, [r2, #28]
					PP_start(center_1_to_pick_right, 1, &pp);
 800f83c:	f107 030c 	add.w	r3, r7, #12
 800f840:	4a76      	ldr	r2, [pc, #472]	; (800fa1c <LidarSetPos+0x1f14>)
 800f842:	2101      	movs	r1, #1
 800f844:	4618      	mov	r0, r3
 800f846:	f7f6 f89e 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f84a:	e01f      	b.n	800f88c <LidarSetPos+0x1d84>
					{
						if(ps4.button == SQUARE)
 800f84c:	4b74      	ldr	r3, [pc, #464]	; (800fa20 <LidarSetPos+0x1f18>)
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f854:	d108      	bne.n	800f868 <LidarSetPos+0x1d60>
						{
							while(ps4.button == SQUARE);
 800f856:	bf00      	nop
 800f858:	4b71      	ldr	r3, [pc, #452]	; (800fa20 <LidarSetPos+0x1f18>)
 800f85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f860:	d0fa      	beq.n	800f858 <LidarSetPos+0x1d50>
							PP_stop(&pp);
 800f862:	486e      	ldr	r0, [pc, #440]	; (800fa1c <LidarSetPos+0x1f14>)
 800f864:	f7f6 fac9 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 5.2)
 800f868:	4b6c      	ldr	r3, [pc, #432]	; (800fa1c <LidarSetPos+0x1f14>)
 800f86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7f0 fe6b 	bl	8000548 <__aeabi_f2d>
 800f872:	a361      	add	r3, pc, #388	; (adr r3, 800f9f8 <LidarSetPos+0x1ef0>)
 800f874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f878:	f7f1 f944 	bl	8000b04 <__aeabi_dcmpge>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d100      	bne.n	800f884 <LidarSetPos+0x1d7c>
 800f882:	e003      	b.n	800f88c <LidarSetPos+0x1d84>
							pp.target_vel[0] = 1.7;
 800f884:	4b65      	ldr	r3, [pc, #404]	; (800fa1c <LidarSetPos+0x1f14>)
 800f886:	4a68      	ldr	r2, [pc, #416]	; (800fa28 <LidarSetPos+0x1f20>)
 800f888:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f88c:	4b63      	ldr	r3, [pc, #396]	; (800fa1c <LidarSetPos+0x1f14>)
 800f88e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1d7      	bne.n	800f84c <LidarSetPos+0x1d44>
					}
					pick_right = 1;
 800f89c:	4b61      	ldr	r3, [pc, #388]	; (800fa24 <LidarSetPos+0x1f1c>)
 800f89e:	2201      	movs	r2, #1
 800f8a0:	601a      	str	r2, [r3, #0]
					break;
 800f8a2:	e169      	b.n	800fb78 <LidarSetPos+0x2070>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 800f8a4:	463b      	mov	r3, r7
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2209      	movs	r2, #9
 800f8aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f8ae:	f7fc fd91 	bl	800c3d4 <ResetCoordinate>
					loaded = 0;
 800f8b2:	4b55      	ldr	r3, [pc, #340]	; (800fa08 <LidarSetPos+0x1f00>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f8b8:	4b54      	ldr	r3, [pc, #336]	; (800fa0c <LidarSetPos+0x1f04>)
 800f8ba:	f04f 0200 	mov.w	r2, #0
 800f8be:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f8c0:	4b53      	ldr	r3, [pc, #332]	; (800fa10 <LidarSetPos+0x1f08>)
 800f8c2:	f04f 0200 	mov.w	r2, #0
 800f8c6:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f8c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f8cc:	f7fc f8ac 	bl	800ba28 <setPick>
					open_servo;
 800f8d0:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f8d4:	484f      	ldr	r0, [pc, #316]	; (800fa14 <LidarSetPos+0x1f0c>)
 800f8d6:	f7fa fa83 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f8da:	4a4f      	ldr	r2, [pc, #316]	; (800fa18 <LidarSetPos+0x1f10>)
 800f8dc:	7f13      	ldrb	r3, [r2, #28]
 800f8de:	f36f 1386 	bfc	r3, #6, #1
 800f8e2:	7713      	strb	r3, [r2, #28]
					PP_start(center_2_to_pick_right, 1, &pp);
 800f8e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8e8:	4a4c      	ldr	r2, [pc, #304]	; (800fa1c <LidarSetPos+0x1f14>)
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7f6 f84a 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f8f2:	e01c      	b.n	800f92e <LidarSetPos+0x1e26>
					{
						if(ps4.button == SQUARE)
 800f8f4:	4b4a      	ldr	r3, [pc, #296]	; (800fa20 <LidarSetPos+0x1f18>)
 800f8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8fc:	d108      	bne.n	800f910 <LidarSetPos+0x1e08>
						{
							while(ps4.button == SQUARE);
 800f8fe:	bf00      	nop
 800f900:	4b47      	ldr	r3, [pc, #284]	; (800fa20 <LidarSetPos+0x1f18>)
 800f902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f908:	d0fa      	beq.n	800f900 <LidarSetPos+0x1df8>
							PP_stop(&pp);
 800f90a:	4844      	ldr	r0, [pc, #272]	; (800fa1c <LidarSetPos+0x1f14>)
 800f90c:	f7f6 fa75 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 4.5)
 800f910:	4b42      	ldr	r3, [pc, #264]	; (800fa1c <LidarSetPos+0x1f14>)
 800f912:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f916:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800f91a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	da00      	bge.n	800f926 <LidarSetPos+0x1e1e>
 800f924:	e003      	b.n	800f92e <LidarSetPos+0x1e26>
							pp.target_vel[0] = 1.7;
 800f926:	4b3d      	ldr	r3, [pc, #244]	; (800fa1c <LidarSetPos+0x1f14>)
 800f928:	4a3f      	ldr	r2, [pc, #252]	; (800fa28 <LidarSetPos+0x1f20>)
 800f92a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f92e:	4b3b      	ldr	r3, [pc, #236]	; (800fa1c <LidarSetPos+0x1f14>)
 800f930:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1da      	bne.n	800f8f4 <LidarSetPos+0x1dec>
					}
					pick_right = 1;
 800f93e:	4b39      	ldr	r3, [pc, #228]	; (800fa24 <LidarSetPos+0x1f1c>)
 800f940:	2201      	movs	r2, #1
 800f942:	601a      	str	r2, [r3, #0]
					break;
 800f944:	e118      	b.n	800fb78 <LidarSetPos+0x2070>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 800f946:	463b      	mov	r3, r7
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2209      	movs	r2, #9
 800f94c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f950:	f7fc fd40 	bl	800c3d4 <ResetCoordinate>
					loaded = 0;
 800f954:	4b2c      	ldr	r3, [pc, #176]	; (800fa08 <LidarSetPos+0x1f00>)
 800f956:	2200      	movs	r2, #0
 800f958:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f95a:	4b2c      	ldr	r3, [pc, #176]	; (800fa0c <LidarSetPos+0x1f04>)
 800f95c:	f04f 0200 	mov.w	r2, #0
 800f960:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f962:	4b2b      	ldr	r3, [pc, #172]	; (800fa10 <LidarSetPos+0x1f08>)
 800f964:	f04f 0200 	mov.w	r2, #0
 800f968:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f96a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f96e:	f7fc f85b 	bl	800ba28 <setPick>
					open_servo;
 800f972:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f976:	4827      	ldr	r0, [pc, #156]	; (800fa14 <LidarSetPos+0x1f0c>)
 800f978:	f7fa fa32 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800f97c:	4a26      	ldr	r2, [pc, #152]	; (800fa18 <LidarSetPos+0x1f10>)
 800f97e:	7f13      	ldrb	r3, [r2, #28]
 800f980:	f36f 1386 	bfc	r3, #6, #1
 800f984:	7713      	strb	r3, [r2, #28]
					PP_start(center_to_pick_right, 1, &pp);
 800f986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f98a:	4a24      	ldr	r2, [pc, #144]	; (800fa1c <LidarSetPos+0x1f14>)
 800f98c:	2101      	movs	r1, #1
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f5 fff9 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800f994:	e01f      	b.n	800f9d6 <LidarSetPos+0x1ece>
					{
						if(ps4.button == SQUARE)
 800f996:	4b22      	ldr	r3, [pc, #136]	; (800fa20 <LidarSetPos+0x1f18>)
 800f998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f99a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f99e:	d108      	bne.n	800f9b2 <LidarSetPos+0x1eaa>
						{
							while(ps4.button == SQUARE);
 800f9a0:	bf00      	nop
 800f9a2:	4b1f      	ldr	r3, [pc, #124]	; (800fa20 <LidarSetPos+0x1f18>)
 800f9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9aa:	d0fa      	beq.n	800f9a2 <LidarSetPos+0x1e9a>
							PP_stop(&pp);
 800f9ac:	481b      	ldr	r0, [pc, #108]	; (800fa1c <LidarSetPos+0x1f14>)
 800f9ae:	f7f6 fa24 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 3.7)
 800f9b2:	4b1a      	ldr	r3, [pc, #104]	; (800fa1c <LidarSetPos+0x1f14>)
 800f9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f0 fdc6 	bl	8000548 <__aeabi_f2d>
 800f9bc:	a310      	add	r3, pc, #64	; (adr r3, 800fa00 <LidarSetPos+0x1ef8>)
 800f9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c2:	f7f1 f89f 	bl	8000b04 <__aeabi_dcmpge>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d100      	bne.n	800f9ce <LidarSetPos+0x1ec6>
 800f9cc:	e003      	b.n	800f9d6 <LidarSetPos+0x1ece>
							pp.target_vel[0] = 1.7;
 800f9ce:	4b13      	ldr	r3, [pc, #76]	; (800fa1c <LidarSetPos+0x1f14>)
 800f9d0:	4a15      	ldr	r2, [pc, #84]	; (800fa28 <LidarSetPos+0x1f20>)
 800f9d2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f9d6:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <LidarSetPos+0x1f14>)
 800f9d8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f9dc:	f003 0301 	and.w	r3, r3, #1
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1d7      	bne.n	800f996 <LidarSetPos+0x1e8e>
					}
					pick_right = 1;
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <LidarSetPos+0x1f1c>)
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	601a      	str	r2, [r3, #0]
					break;
 800f9ec:	e0c4      	b.n	800fb78 <LidarSetPos+0x2070>
 800f9ee:	bf00      	nop
 800f9f0:	9999999a 	.word	0x9999999a
 800f9f4:	c0059999 	.word	0xc0059999
 800f9f8:	cccccccd 	.word	0xcccccccd
 800f9fc:	4014cccc 	.word	0x4014cccc
 800fa00:	9999999a 	.word	0x9999999a
 800fa04:	400d9999 	.word	0x400d9999
 800fa08:	20009428 	.word	0x20009428
 800fa0c:	20007380 	.word	0x20007380
 800fa10:	2000659c 	.word	0x2000659c
 800fa14:	2000786c 	.word	0x2000786c
 800fa18:	2000959c 	.word	0x2000959c
 800fa1c:	20006cc4 	.word	0x20006cc4
 800fa20:	2000a014 	.word	0x2000a014
 800fa24:	2000a624 	.word	0x2000a624
 800fa28:	3fd9999a 	.word	0x3fd9999a

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 800fa2c:	463b      	mov	r3, r7
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2209      	movs	r2, #9
 800fa32:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800fa36:	f7fc fccd 	bl	800c3d4 <ResetCoordinate>
					loaded = 0;
 800fa3a:	4b55      	ldr	r3, [pc, #340]	; (800fb90 <LidarSetPos+0x2088>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800fa40:	4b54      	ldr	r3, [pc, #336]	; (800fb94 <LidarSetPos+0x208c>)
 800fa42:	f04f 0200 	mov.w	r2, #0
 800fa46:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800fa48:	4b53      	ldr	r3, [pc, #332]	; (800fb98 <LidarSetPos+0x2090>)
 800fa4a:	f04f 0200 	mov.w	r2, #0
 800fa4e:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800fa50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fa54:	f7fb ffe8 	bl	800ba28 <setPick>
					open_servo;
 800fa58:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800fa5c:	484f      	ldr	r0, [pc, #316]	; (800fb9c <LidarSetPos+0x2094>)
 800fa5e:	f7fa f9bf 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800fa62:	4a4f      	ldr	r2, [pc, #316]	; (800fba0 <LidarSetPos+0x2098>)
 800fa64:	7f13      	ldrb	r3, [r2, #28]
 800fa66:	f36f 1386 	bfc	r3, #6, #1
 800fa6a:	7713      	strb	r3, [r2, #28]
					PP_start(center_3_to_pick_right, 1, &pp);
 800fa6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa70:	4a4c      	ldr	r2, [pc, #304]	; (800fba4 <LidarSetPos+0x209c>)
 800fa72:	2101      	movs	r1, #1
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f5 ff86 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800fa7a:	e01f      	b.n	800fabc <LidarSetPos+0x1fb4>
					{
						if(ps4.button == SQUARE)
 800fa7c:	4b4a      	ldr	r3, [pc, #296]	; (800fba8 <LidarSetPos+0x20a0>)
 800fa7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa84:	d108      	bne.n	800fa98 <LidarSetPos+0x1f90>
						{
							while(ps4.button == SQUARE);
 800fa86:	bf00      	nop
 800fa88:	4b47      	ldr	r3, [pc, #284]	; (800fba8 <LidarSetPos+0x20a0>)
 800fa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa90:	d0fa      	beq.n	800fa88 <LidarSetPos+0x1f80>
							PP_stop(&pp);
 800fa92:	4844      	ldr	r0, [pc, #272]	; (800fba4 <LidarSetPos+0x209c>)
 800fa94:	f7f6 f9b1 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 2.4)
 800fa98:	4b42      	ldr	r3, [pc, #264]	; (800fba4 <LidarSetPos+0x209c>)
 800fa9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7f0 fd53 	bl	8000548 <__aeabi_f2d>
 800faa2:	a339      	add	r3, pc, #228	; (adr r3, 800fb88 <LidarSetPos+0x2080>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	f7f1 f82c 	bl	8000b04 <__aeabi_dcmpge>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d100      	bne.n	800fab4 <LidarSetPos+0x1fac>
 800fab2:	e003      	b.n	800fabc <LidarSetPos+0x1fb4>
							pp.target_vel[0] = 1.7;
 800fab4:	4b3b      	ldr	r3, [pc, #236]	; (800fba4 <LidarSetPos+0x209c>)
 800fab6:	4a3d      	ldr	r2, [pc, #244]	; (800fbac <LidarSetPos+0x20a4>)
 800fab8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800fabc:	4b39      	ldr	r3, [pc, #228]	; (800fba4 <LidarSetPos+0x209c>)
 800fabe:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fac2:	f003 0301 	and.w	r3, r3, #1
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1d7      	bne.n	800fa7c <LidarSetPos+0x1f74>
					}
					pick_right = 1;
 800facc:	4b38      	ldr	r3, [pc, #224]	; (800fbb0 <LidarSetPos+0x20a8>)
 800face:	2201      	movs	r2, #1
 800fad0:	601a      	str	r2, [r3, #0]

					break;
 800fad2:	e051      	b.n	800fb78 <LidarSetPos+0x2070>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 800fad4:	463b      	mov	r3, r7
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2209      	movs	r2, #9
 800fada:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800fade:	f7fc fc79 	bl	800c3d4 <ResetCoordinate>
					loaded = 0;
 800fae2:	4b2b      	ldr	r3, [pc, #172]	; (800fb90 <LidarSetPos+0x2088>)
 800fae4:	2200      	movs	r2, #0
 800fae6:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800fae8:	4b2a      	ldr	r3, [pc, #168]	; (800fb94 <LidarSetPos+0x208c>)
 800faea:	f04f 0200 	mov.w	r2, #0
 800faee:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800faf0:	4b29      	ldr	r3, [pc, #164]	; (800fb98 <LidarSetPos+0x2090>)
 800faf2:	f04f 0200 	mov.w	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800faf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fafc:	f7fb ff94 	bl	800ba28 <setPick>
					open_servo;
 800fb00:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800fb04:	4825      	ldr	r0, [pc, #148]	; (800fb9c <LidarSetPos+0x2094>)
 800fb06:	f7fa f96b 	bl	8009de0 <ServoSetPulse>
					cylinder_retract;
 800fb0a:	4a25      	ldr	r2, [pc, #148]	; (800fba0 <LidarSetPos+0x2098>)
 800fb0c:	7f13      	ldrb	r3, [r2, #28]
 800fb0e:	f36f 1386 	bfc	r3, #6, #1
 800fb12:	7713      	strb	r3, [r2, #28]
					PP_start(center_4_to_pick_right, 1, &pp);
 800fb14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fb18:	4a22      	ldr	r2, [pc, #136]	; (800fba4 <LidarSetPos+0x209c>)
 800fb1a:	2101      	movs	r1, #1
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f5 ff32 	bl	8005986 <PP_start>
					while(pp.pp_start)
 800fb22:	e01c      	b.n	800fb5e <LidarSetPos+0x2056>
					{
						if(ps4.button == SQUARE)
 800fb24:	4b20      	ldr	r3, [pc, #128]	; (800fba8 <LidarSetPos+0x20a0>)
 800fb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb2c:	d108      	bne.n	800fb40 <LidarSetPos+0x2038>
						{
							while(ps4.button == SQUARE);
 800fb2e:	bf00      	nop
 800fb30:	4b1d      	ldr	r3, [pc, #116]	; (800fba8 <LidarSetPos+0x20a0>)
 800fb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb38:	d0fa      	beq.n	800fb30 <LidarSetPos+0x2028>
							PP_stop(&pp);
 800fb3a:	481a      	ldr	r0, [pc, #104]	; (800fba4 <LidarSetPos+0x209c>)
 800fb3c:	f7f6 f95d 	bl	8005dfa <PP_stop>
						}

						if(pp.real_x >= 1.5)
 800fb40:	4b18      	ldr	r3, [pc, #96]	; (800fba4 <LidarSetPos+0x209c>)
 800fb42:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fb46:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800fb4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb52:	da00      	bge.n	800fb56 <LidarSetPos+0x204e>
 800fb54:	e003      	b.n	800fb5e <LidarSetPos+0x2056>
							pp.target_vel[0] = 1.7;
 800fb56:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <LidarSetPos+0x209c>)
 800fb58:	4a14      	ldr	r2, [pc, #80]	; (800fbac <LidarSetPos+0x20a4>)
 800fb5a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800fb5e:	4b11      	ldr	r3, [pc, #68]	; (800fba4 <LidarSetPos+0x209c>)
 800fb60:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1da      	bne.n	800fb24 <LidarSetPos+0x201c>
					}

					pick_right = 1;
 800fb6e:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <LidarSetPos+0x20a8>)
 800fb70:	2201      	movs	r2, #1
 800fb72:	601a      	str	r2, [r3, #0]
					break;
 800fb74:	e000      	b.n	800fb78 <LidarSetPos+0x2070>

				default:
					break;
 800fb76:	bf00      	nop
			}

		default:
			break;
 800fb78:	bf00      	nop
		}
}
 800fb7a:	bf00      	nop
 800fb7c:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bdb0      	pop	{r4, r5, r7, pc}
 800fb84:	f3af 8000 	nop.w
 800fb88:	33333333 	.word	0x33333333
 800fb8c:	40033333 	.word	0x40033333
 800fb90:	20009428 	.word	0x20009428
 800fb94:	20007380 	.word	0x20007380
 800fb98:	2000659c 	.word	0x2000659c
 800fb9c:	2000786c 	.word	0x2000786c
 800fba0:	2000959c 	.word	0x2000959c
 800fba4:	20006cc4 	.word	0x20006cc4
 800fba8:	2000a014 	.word	0x2000a014
 800fbac:	3fd9999a 	.word	0x3fd9999a
 800fbb0:	2000a624 	.word	0x2000a624

0800fbb4 <LidarAdjust>:
			break;
	}
}

void LidarAdjust(Lidar_t* lidar)
{
 800fbb4:	b5b0      	push	{r4, r5, r7, lr}
 800fbb6:	b08a      	sub	sp, #40	; 0x28
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 81c3 	beq.w	800ff4e <LidarAdjust+0x39a>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 800fbc8:	4bb8      	ldr	r3, [pc, #736]	; (800feac <LidarAdjust+0x2f8>)
 800fbca:	f107 040c 	add.w	r4, r7, #12
 800fbce:	461d      	mov	r5, r3
 800fbd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800fbdc:	f107 030c 	add.w	r3, r7, #12
 800fbe0:	4ab3      	ldr	r2, [pc, #716]	; (800feb0 <LidarAdjust+0x2fc>)
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7f5 fece 	bl	8005986 <PP_start>
		while(pp.pp_start)
 800fbea:	e01e      	b.n	800fc2a <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 800fbec:	4bb1      	ldr	r3, [pc, #708]	; (800feb4 <LidarAdjust+0x300>)
 800fbee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbf4:	d108      	bne.n	800fc08 <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 800fbf6:	bf00      	nop
 800fbf8:	4bae      	ldr	r3, [pc, #696]	; (800feb4 <LidarAdjust+0x300>)
 800fbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc00:	d0fa      	beq.n	800fbf8 <LidarAdjust+0x44>
				PP_stop(&pp);
 800fc02:	48ab      	ldr	r0, [pc, #684]	; (800feb0 <LidarAdjust+0x2fc>)
 800fc04:	f7f6 f8f9 	bl	8005dfa <PP_stop>
			}

			if(In_LS_Shot_1 || In_LS_Shot_2)
 800fc08:	2108      	movs	r1, #8
 800fc0a:	48ab      	ldr	r0, [pc, #684]	; (800feb8 <LidarAdjust+0x304>)
 800fc0c:	f002 fbbc 	bl	8012388 <HAL_GPIO_ReadPin>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d006      	beq.n	800fc24 <LidarAdjust+0x70>
 800fc16:	2110      	movs	r1, #16
 800fc18:	48a7      	ldr	r0, [pc, #668]	; (800feb8 <LidarAdjust+0x304>)
 800fc1a:	f002 fbb5 	bl	8012388 <HAL_GPIO_ReadPin>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d102      	bne.n	800fc2a <LidarAdjust+0x76>
				PP_stop(&pp);
 800fc24:	48a2      	ldr	r0, [pc, #648]	; (800feb0 <LidarAdjust+0x2fc>)
 800fc26:	f7f6 f8e8 	bl	8005dfa <PP_stop>
		while(pp.pp_start)
 800fc2a:	4ba1      	ldr	r3, [pc, #644]	; (800feb0 <LidarAdjust+0x2fc>)
 800fc2c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1d8      	bne.n	800fbec <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fc40:	3b02      	subs	r3, #2
 800fc42:	2b06      	cmp	r3, #6
 800fc44:	f200 8182 	bhi.w	800ff4c <LidarAdjust+0x398>
 800fc48:	a201      	add	r2, pc, #4	; (adr r2, 800fc50 <LidarAdjust+0x9c>)
 800fc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4e:	bf00      	nop
 800fc50:	0800ff4d 	.word	0x0800ff4d
 800fc54:	0800fc6d 	.word	0x0800fc6d
 800fc58:	0800fcfd 	.word	0x0800fcfd
 800fc5c:	0800fd8d 	.word	0x0800fd8d
 800fc60:	0800fe1d 	.word	0x0800fe1d
 800fc64:	0800febd 	.word	0x0800febd
 800fc68:	0800ff4d 	.word	0x0800ff4d
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 800fc6c:	6879      	ldr	r1, [r7, #4]
 800fc6e:	2001      	movs	r0, #1
 800fc70:	f000 fa68 	bl	8010144 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7f0 fc61 	bl	8000548 <__aeabi_f2d>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	f7f0 fafb 	bl	8000288 <__aeabi_dsub>
 800fc92:	4602      	mov	r2, r0
 800fc94:	460b      	mov	r3, r1
 800fc96:	4610      	mov	r0, r2
 800fc98:	4619      	mov	r1, r3
 800fc9a:	f7f0 ffa5 	bl	8000be8 <__aeabi_d2f>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f0 fc48 	bl	8000548 <__aeabi_f2d>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	f7f0 fae2 	bl	8000288 <__aeabi_dsub>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4619      	mov	r1, r3
 800fccc:	f7f0 ff8c 	bl	8000be8 <__aeabi_d2f>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fce4:	4b72      	ldr	r3, [pc, #456]	; (800feb0 <LidarAdjust+0x2fc>)
 800fce6:	edd3 6a04 	vldr	s13, [r3, #16]
 800fcea:	eeb0 1a66 	vmov.f32	s2, s13
 800fcee:	eef0 0a47 	vmov.f32	s1, s14
 800fcf2:	eeb0 0a67 	vmov.f32	s0, s15
 800fcf6:	f000 f931 	bl	800ff5c <LidarAdjustPP>
				break;
 800fcfa:	e128      	b.n	800ff4e <LidarAdjust+0x39a>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 800fcfc:	6879      	ldr	r1, [r7, #4]
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f000 fa20 	bl	8010144 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7f0 fc19 	bl	8000548 <__aeabi_f2d>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	f7f0 fab3 	bl	8000288 <__aeabi_dsub>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4610      	mov	r0, r2
 800fd28:	4619      	mov	r1, r3
 800fd2a:	f7f0 ff5d 	bl	8000be8 <__aeabi_d2f>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7f0 fc00 	bl	8000548 <__aeabi_f2d>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	4629      	mov	r1, r5
 800fd50:	f7f0 fa9a 	bl	8000288 <__aeabi_dsub>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4610      	mov	r0, r2
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	f7f0 ff44 	bl	8000be8 <__aeabi_d2f>
 800fd60:	4602      	mov	r2, r0
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fd74:	4b4e      	ldr	r3, [pc, #312]	; (800feb0 <LidarAdjust+0x2fc>)
 800fd76:	edd3 6a04 	vldr	s13, [r3, #16]
 800fd7a:	eeb0 1a66 	vmov.f32	s2, s13
 800fd7e:	eef0 0a47 	vmov.f32	s1, s14
 800fd82:	eeb0 0a67 	vmov.f32	s0, s15
 800fd86:	f000 f8e9 	bl	800ff5c <LidarAdjustPP>
				break;
 800fd8a:	e0e0      	b.n	800ff4e <LidarAdjust+0x39a>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 800fd8c:	6879      	ldr	r1, [r7, #4]
 800fd8e:	2001      	movs	r0, #1
 800fd90:	f000 f9d8 	bl	8010144 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7f0 fbd1 	bl	8000548 <__aeabi_f2d>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	4620      	mov	r0, r4
 800fdac:	4629      	mov	r1, r5
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f7f0 ff15 	bl	8000be8 <__aeabi_d2f>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7f0 fbb8 	bl	8000548 <__aeabi_f2d>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	460b      	mov	r3, r1
 800fddc:	4620      	mov	r0, r4
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 fa52 	bl	8000288 <__aeabi_dsub>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4610      	mov	r0, r2
 800fdea:	4619      	mov	r1, r3
 800fdec:	f7f0 fefc 	bl	8000be8 <__aeabi_d2f>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fe04:	4b2a      	ldr	r3, [pc, #168]	; (800feb0 <LidarAdjust+0x2fc>)
 800fe06:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe0a:	eeb0 1a66 	vmov.f32	s2, s13
 800fe0e:	eef0 0a47 	vmov.f32	s1, s14
 800fe12:	eeb0 0a67 	vmov.f32	s0, s15
 800fe16:	f000 f8a1 	bl	800ff5c <LidarAdjustPP>
				break;
 800fe1a:	e098      	b.n	800ff4e <LidarAdjust+0x39a>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 800fe1c:	6879      	ldr	r1, [r7, #4]
 800fe1e:	2001      	movs	r0, #1
 800fe20:	f000 f990 	bl	8010144 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7f0 fb89 	bl	8000548 <__aeabi_f2d>
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	f7f0 fa23 	bl	8000288 <__aeabi_dsub>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	4610      	mov	r0, r2
 800fe48:	4619      	mov	r1, r3
 800fe4a:	f7f0 fecd 	bl	8000be8 <__aeabi_d2f>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f0 fb70 	bl	8000548 <__aeabi_f2d>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	4629      	mov	r1, r5
 800fe70:	f7f0 fa0a 	bl	8000288 <__aeabi_dsub>
 800fe74:	4602      	mov	r2, r0
 800fe76:	460b      	mov	r3, r1
 800fe78:	4610      	mov	r0, r2
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	f7f0 feb4 	bl	8000be8 <__aeabi_d2f>
 800fe80:	4602      	mov	r2, r0
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fe94:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <LidarAdjust+0x2fc>)
 800fe96:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe9a:	eeb0 1a66 	vmov.f32	s2, s13
 800fe9e:	eef0 0a47 	vmov.f32	s1, s14
 800fea2:	eeb0 0a67 	vmov.f32	s0, s15
 800fea6:	f000 f859 	bl	800ff5c <LidarAdjustPP>
				break;
 800feaa:	e050      	b.n	800ff4e <LidarAdjust+0x39a>
 800feac:	0802009c 	.word	0x0802009c
 800feb0:	20006cc4 	.word	0x20006cc4
 800feb4:	2000a014 	.word	0x2000a014
 800feb8:	40020c00 	.word	0x40020c00

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	2001      	movs	r0, #1
 800fec0:	f000 f940 	bl	8010144 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7f0 fb39 	bl	8000548 <__aeabi_f2d>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4620      	mov	r0, r4
 800fedc:	4629      	mov	r1, r5
 800fede:	f7f0 f9d3 	bl	8000288 <__aeabi_dsub>
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	4610      	mov	r0, r2
 800fee8:	4619      	mov	r1, r3
 800feea:	f7f0 fe7d 	bl	8000be8 <__aeabi_d2f>
 800feee:	4602      	mov	r2, r0
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7f0 fb20 	bl	8000548 <__aeabi_f2d>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	f7f0 f9ba 	bl	8000288 <__aeabi_dsub>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	4610      	mov	r0, r2
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	f7f0 fe64 	bl	8000be8 <__aeabi_d2f>
 800ff20:	4602      	mov	r2, r0
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, pp.real_z);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800ff34:	4b08      	ldr	r3, [pc, #32]	; (800ff58 <LidarAdjust+0x3a4>)
 800ff36:	edd3 6a04 	vldr	s13, [r3, #16]
 800ff3a:	eeb0 1a66 	vmov.f32	s2, s13
 800ff3e:	eef0 0a47 	vmov.f32	s1, s14
 800ff42:	eeb0 0a67 	vmov.f32	s0, s15
 800ff46:	f000 f809 	bl	800ff5c <LidarAdjustPP>
				break;
 800ff4a:	e000      	b.n	800ff4e <LidarAdjust+0x39a>

			case UPPER_RIGHT:
				break;

			default:
				break;
 800ff4c:	bf00      	nop
		}
	}
}
 800ff4e:	bf00      	nop
 800ff50:	3728      	adds	r7, #40	; 0x28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bdb0      	pop	{r4, r5, r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20006cc4 	.word	0x20006cc4

0800ff5c <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b08c      	sub	sp, #48	; 0x30
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	ed87 0a03 	vstr	s0, [r7, #12]
 800ff66:	edc7 0a02 	vstr	s1, [r7, #8]
 800ff6a:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 800ff6e:	f7fc fa31 	bl	800c3d4 <ResetCoordinate>

	float adj_point[1][7] = {{1.0, adj_x, adj_y, z, 0, 1, 0}};
 800ff72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ff76:	617b      	str	r3, [r7, #20]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	61bb      	str	r3, [r7, #24]
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	61fb      	str	r3, [r7, #28]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	623b      	str	r3, [r7, #32]
 800ff84:	f04f 0300 	mov.w	r3, #0
 800ff88:	627b      	str	r3, [r7, #36]	; 0x24
 800ff8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ff8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff90:	f04f 0300 	mov.w	r3, #0
 800ff94:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 800ff96:	f107 0314 	add.w	r3, r7, #20
 800ff9a:	4a1a      	ldr	r2, [pc, #104]	; (8010004 <LidarAdjustPP+0xa8>)
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f5 fcf1 	bl	8005986 <PP_start>

	while(pp.pp_start)
 800ffa4:	e020      	b.n	800ffe8 <LidarAdjustPP+0x8c>
	{
		if(ps4.button == SQUARE)
 800ffa6:	4b18      	ldr	r3, [pc, #96]	; (8010008 <LidarAdjustPP+0xac>)
 800ffa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffae:	d108      	bne.n	800ffc2 <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 800ffb0:	bf00      	nop
 800ffb2:	4b15      	ldr	r3, [pc, #84]	; (8010008 <LidarAdjustPP+0xac>)
 800ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffba:	d0fa      	beq.n	800ffb2 <LidarAdjustPP+0x56>
			PP_stop(&pp);
 800ffbc:	4811      	ldr	r0, [pc, #68]	; (8010004 <LidarAdjustPP+0xa8>)
 800ffbe:	f7f5 ff1c 	bl	8005dfa <PP_stop>
		}

		if(In_LS_Shot_1 || In_LS_Shot_2)
 800ffc2:	2108      	movs	r1, #8
 800ffc4:	4811      	ldr	r0, [pc, #68]	; (801000c <LidarAdjustPP+0xb0>)
 800ffc6:	f002 f9df 	bl	8012388 <HAL_GPIO_ReadPin>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d006      	beq.n	800ffde <LidarAdjustPP+0x82>
 800ffd0:	2110      	movs	r1, #16
 800ffd2:	480e      	ldr	r0, [pc, #56]	; (801000c <LidarAdjustPP+0xb0>)
 800ffd4:	f002 f9d8 	bl	8012388 <HAL_GPIO_ReadPin>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d104      	bne.n	800ffe8 <LidarAdjustPP+0x8c>
			pp.error_y = 0;
 800ffde:	4b09      	ldr	r3, [pc, #36]	; (8010004 <LidarAdjustPP+0xa8>)
 800ffe0:	f04f 0200 	mov.w	r2, #0
 800ffe4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	while(pp.pp_start)
 800ffe8:	4b06      	ldr	r3, [pc, #24]	; (8010004 <LidarAdjustPP+0xa8>)
 800ffea:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ffee:	f003 0301 	and.w	r3, r3, #1
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1d6      	bne.n	800ffa6 <LidarAdjustPP+0x4a>
	}
}
 800fff8:	bf00      	nop
 800fffa:	bf00      	nop
 800fffc:	3730      	adds	r7, #48	; 0x30
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20006cc4 	.word	0x20006cc4
 8010008:	2000a014 	.word	0x2000a014
 801000c:	40020c00 	.word	0x40020c00

08010010 <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 8010018:	4b23      	ldr	r3, [pc, #140]	; (80100a8 <LidarControl+0x98>)
 801001a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801001c:	2b80      	cmp	r3, #128	; 0x80
 801001e:	d10b      	bne.n	8010038 <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 8010020:	bf00      	nop
 8010022:	4b21      	ldr	r3, [pc, #132]	; (80100a8 <LidarControl+0x98>)
 8010024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010026:	2b80      	cmp	r3, #128	; 0x80
 8010028:	d0fb      	beq.n	8010022 <LidarControl+0x12>
		lidar->pos_counter--;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010030:	1e5a      	subs	r2, r3, #1
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == RIGHT)
 8010038:	4b1b      	ldr	r3, [pc, #108]	; (80100a8 <LidarControl+0x98>)
 801003a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801003c:	2b20      	cmp	r3, #32
 801003e:	d10b      	bne.n	8010058 <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 8010040:	bf00      	nop
 8010042:	4b19      	ldr	r3, [pc, #100]	; (80100a8 <LidarControl+0x98>)
 8010044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010046:	2b20      	cmp	r3, #32
 8010048:	d0fb      	beq.n	8010042 <LidarControl+0x32>
		lidar->pos_counter++;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == UP)
 8010058:	4b13      	ldr	r3, [pc, #76]	; (80100a8 <LidarControl+0x98>)
 801005a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801005c:	2b10      	cmp	r3, #16
 801005e:	d10b      	bne.n	8010078 <LidarControl+0x68>
	{
		while(ps4.button == UP);
 8010060:	bf00      	nop
 8010062:	4b11      	ldr	r3, [pc, #68]	; (80100a8 <LidarControl+0x98>)
 8010064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010066:	2b10      	cmp	r3, #16
 8010068:	d0fb      	beq.n	8010062 <LidarControl+0x52>
		lidar->pos_counter += 2;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010070:	1c9a      	adds	r2, r3, #2
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == DOWN)
 8010078:	4b0b      	ldr	r3, [pc, #44]	; (80100a8 <LidarControl+0x98>)
 801007a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801007c:	2b40      	cmp	r3, #64	; 0x40
 801007e:	d10b      	bne.n	8010098 <LidarControl+0x88>
	{
		while(ps4.button == DOWN);
 8010080:	bf00      	nop
 8010082:	4b09      	ldr	r3, [pc, #36]	; (80100a8 <LidarControl+0x98>)
 8010084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010086:	2b40      	cmp	r3, #64	; 0x40
 8010088:	d0fb      	beq.n	8010082 <LidarControl+0x72>
		lidar->pos_counter -= 2;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010090:	1e9a      	subs	r2, r3, #2
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	LidarCheckPos(lidar);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 f807 	bl	80100ac <LidarCheckPos>
//	LidarCheckAngle(lidar);
}
 801009e:	bf00      	nop
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	2000a014 	.word	0x2000a014

080100ac <LidarCheckPos>:
			break;
	}
}

void LidarCheckPos(Lidar_t* lidar)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80100ba:	3b02      	subs	r3, #2
 80100bc:	2b07      	cmp	r3, #7
 80100be:	d83b      	bhi.n	8010138 <LidarCheckPos+0x8c>
 80100c0:	a201      	add	r2, pc, #4	; (adr r2, 80100c8 <LidarCheckPos+0x1c>)
 80100c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100c6:	bf00      	nop
 80100c8:	080100f3 	.word	0x080100f3
 80100cc:	080100fd 	.word	0x080100fd
 80100d0:	08010107 	.word	0x08010107
 80100d4:	08010111 	.word	0x08010111
 80100d8:	0801011b 	.word	0x0801011b
 80100dc:	08010125 	.word	0x08010125
 80100e0:	0801012f 	.word	0x0801012f
 80100e4:	080100e9 	.word	0x080100e9
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 80100e8:	6879      	ldr	r1, [r7, #4]
 80100ea:	2009      	movs	r0, #9
 80100ec:	f7fd fd0c 	bl	800db08 <LidarSetPos>
			break;
 80100f0:	e023      	b.n	801013a <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 80100f2:	6879      	ldr	r1, [r7, #4]
 80100f4:	2002      	movs	r0, #2
 80100f6:	f7fd fd07 	bl	800db08 <LidarSetPos>
			break;
 80100fa:	e01e      	b.n	801013a <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 80100fc:	6879      	ldr	r1, [r7, #4]
 80100fe:	2003      	movs	r0, #3
 8010100:	f7fd fd02 	bl	800db08 <LidarSetPos>
			break;
 8010104:	e019      	b.n	801013a <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	2004      	movs	r0, #4
 801010a:	f7fd fcfd 	bl	800db08 <LidarSetPos>
			break;
 801010e:	e014      	b.n	801013a <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	2005      	movs	r0, #5
 8010114:	f7fd fcf8 	bl	800db08 <LidarSetPos>
			break;
 8010118:	e00f      	b.n	801013a <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	2006      	movs	r0, #6
 801011e:	f7fd fcf3 	bl	800db08 <LidarSetPos>
			break;
 8010122:	e00a      	b.n	801013a <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 8010124:	6879      	ldr	r1, [r7, #4]
 8010126:	2007      	movs	r0, #7
 8010128:	f7fd fcee 	bl	800db08 <LidarSetPos>
			break;
 801012c:	e005      	b.n	801013a <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	2008      	movs	r0, #8
 8010132:	f7fd fce9 	bl	800db08 <LidarSetPos>
			break;
 8010136:	e000      	b.n	801013a <LidarCheckPos+0x8e>

		default:
			break;
 8010138:	bf00      	nop
	}
}
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop

08010144 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	4603      	mov	r3, r0
 801014c:	6039      	str	r1, [r7, #0]
 801014e:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	2201      	movs	r2, #1
 8010154:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	79fa      	ldrb	r2, [r7, #7]
 801015c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2201      	movs	r2, #1
 8010164:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	3302      	adds	r3, #2
 801016a:	683a      	ldr	r2, [r7, #0]
 801016c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8010170:	7812      	ldrb	r2, [r2, #0]
 8010172:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	1c59      	adds	r1, r3, #1
 801017e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010182:	2202      	movs	r2, #2
 8010184:	f005 ff8f 	bl	80160a6 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	33c9      	adds	r3, #201	; 0xc9
 8010192:	2219      	movs	r2, #25
 8010194:	4619      	mov	r1, r3
 8010196:	f006 f81f 	bl	80161d8 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 801019a:	e004      	b.n	80101a6 <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 801019c:	4b07      	ldr	r3, [pc, #28]	; (80101bc <LidarSendIns+0x78>)
 801019e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101a4:	d005      	beq.n	80101b2 <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d0f5      	beq.n	801019c <LidarSendIns+0x58>
			break;
	}
}
 80101b0:	e000      	b.n	80101b4 <LidarSendIns+0x70>
			break;
 80101b2:	bf00      	nop
}
 80101b4:	bf00      	nop
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	2000a014 	.word	0x2000a014

080101c0 <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 80101c0:	b5b0      	push	{r4, r5, r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f040 8115 	bne.w	80103fe <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 80101d4:	4baa      	ldr	r3, [pc, #680]	; (8010480 <ObstacleHandler+0x2c0>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d002      	beq.n	80101e2 <ObstacleHandler+0x22>
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d061      	beq.n	80102a4 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 80101e0:	e1f1      	b.n	80105c6 <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	f040 81eb 	bne.w	80105c4 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	32ca      	adds	r2, #202	; 0xca
 80101f8:	6812      	ldr	r2, [r2, #0]
 80101fa:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	b2db      	uxtb	r3, r3
 8010208:	2b00      	cmp	r3, #0
 801020a:	d110      	bne.n	801022e <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010212:	461a      	mov	r2, r3
 8010214:	4613      	mov	r3, r2
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	4413      	add	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4618      	mov	r0, r3
 801021e:	f009 fd0f 	bl	8019c40 <malloc>
 8010222:	4603      	mov	r3, r0
 8010224:	461a      	mov	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 801022c:	e012      	b.n	8010254 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801023a:	4619      	mov	r1, r3
 801023c:	460b      	mov	r3, r1
 801023e:	005b      	lsls	r3, r3, #1
 8010240:	440b      	add	r3, r1
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4619      	mov	r1, r3
 8010246:	4610      	mov	r0, r2
 8010248:	f00a fc3c 	bl	801aac4 <realloc>
 801024c:	4602      	mov	r2, r0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 8010260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010264:	2204      	movs	r2, #4
 8010266:	f005 ff1e 	bl	80160a6 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801027c:	b29b      	uxth	r3, r3
 801027e:	461a      	mov	r2, r3
 8010280:	0052      	lsls	r2, r2, #1
 8010282:	4413      	add	r3, r2
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	b29b      	uxth	r3, r3
 8010288:	461a      	mov	r2, r3
 801028a:	f005 ffa5 	bl	80161d8 <HAL_UART_Receive_IT>
					mode = 1;
 801028e:	4b7c      	ldr	r3, [pc, #496]	; (8010480 <ObstacleHandler+0x2c0>)
 8010290:	2201      	movs	r2, #1
 8010292:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 801029a:	f043 0301 	orr.w	r3, r3, #1
 801029e:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				break;
 80102a2:	e18f      	b.n	80105c4 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 80102a4:	2300      	movs	r3, #0
 80102a6:	617b      	str	r3, [r7, #20]
 80102a8:	e05b      	b.n	8010362 <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	4613      	mov	r3, r2
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	4413      	add	r3, r2
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	33c8      	adds	r3, #200	; 0xc8
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	4413      	add	r3, r2
 80102c0:	3301      	adds	r3, #1
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80102cc:	697a      	ldr	r2, [r7, #20]
 80102ce:	4613      	mov	r3, r2
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	4413      	add	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	3304      	adds	r3, #4
 80102d8:	33c8      	adds	r3, #200	; 0xc8
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	4413      	add	r3, r2
 80102de:	3301      	adds	r3, #1
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80102ea:	697a      	ldr	r2, [r7, #20]
 80102ec:	4613      	mov	r3, r2
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	4413      	add	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	3308      	adds	r3, #8
 80102f6:	33c8      	adds	r3, #200	; 0xc8
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	4413      	add	r3, r2
 80102fc:	3301      	adds	r3, #1
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 801030e:	f7f0 fa9d 	bl	800084c <__aeabi_ddiv>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	4610      	mov	r0, r2
 8010318:	4619      	mov	r1, r3
 801031a:	f7f0 fc65 	bl	8000be8 <__aeabi_d2f>
 801031e:	4603      	mov	r3, r0
 8010320:	ee00 3a10 	vmov	s0, r3
 8010324:	f00e f94c 	bl	801e5c0 <atanf>
 8010328:	ee10 3a10 	vmov	r3, s0
 801032c:	4618      	mov	r0, r3
 801032e:	f7f0 f90b 	bl	8000548 <__aeabi_f2d>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	015b      	lsls	r3, r3, #5
 8010346:	441a      	add	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4615      	mov	r5, r2
 801034c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8010350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010358:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	3301      	adds	r3, #1
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010368:	697a      	ldr	r2, [r7, #20]
 801036a:	429a      	cmp	r2, r3
 801036c:	db9d      	blt.n	80102aa <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 801036e:	2300      	movs	r3, #0
 8010370:	613b      	str	r3, [r7, #16]
 8010372:	e031      	b.n	80103d8 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	015b      	lsls	r3, r3, #5
 8010384:	4413      	add	r3, r2
 8010386:	4619      	mov	r1, r3
 8010388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801038c:	2204      	movs	r2, #4
 801038e:	f005 fe8a 	bl	80160a6 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	015b      	lsls	r3, r3, #5
 80103a2:	4413      	add	r3, r2
 80103a4:	f103 0108 	add.w	r1, r3, #8
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103ac:	2204      	movs	r2, #4
 80103ae:	f005 fe7a 	bl	80160a6 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	015b      	lsls	r3, r3, #5
 80103c2:	4413      	add	r3, r2
 80103c4:	f103 0110 	add.w	r1, r3, #16
 80103c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103cc:	2204      	movs	r2, #4
 80103ce:	f005 fe6a 	bl	80160a6 <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	3301      	adds	r3, #1
 80103d6:	613b      	str	r3, [r7, #16]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80103de:	693a      	ldr	r2, [r7, #16]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	dbc7      	blt.n	8010374 <ObstacleHandler+0x1b4>
				mode = 0;
 80103e4:	4b26      	ldr	r3, [pc, #152]	; (8010480 <ObstacleHandler+0x2c0>)
 80103e6:	2200      	movs	r2, #0
 80103e8:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	33c9      	adds	r3, #201	; 0xc9
 80103f4:	2205      	movs	r2, #5
 80103f6:	4619      	mov	r1, r3
 80103f8:	f005 feee 	bl	80161d8 <HAL_UART_Receive_IT>
				break;
 80103fc:	e0e3      	b.n	80105c6 <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 8010404:	f003 0304 	and.w	r3, r3, #4
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d13a      	bne.n	8010484 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010414:	2b01      	cmp	r3, #1
 8010416:	f040 80d6 	bne.w	80105c6 <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f203 1399 	addw	r3, r3, #409	; 0x199
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	32ca      	adds	r2, #202	; 0xca
 8010424:	7812      	ldrb	r2, [r2, #0]
 8010426:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 801043a:	2b00      	cmp	r3, #0
 801043c:	f040 80c3 	bne.w	80105c6 <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f203 1199 	addw	r1, r3, #409	; 0x199
 801044c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010450:	2201      	movs	r2, #1
 8010452:	f005 fe28 	bl	80160a6 <HAL_UART_Transmit>
					lidar->start = 1;
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 801045c:	f043 0304 	orr.w	r3, r3, #4
 8010460:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
					lidar->response = NO;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	33c9      	adds	r3, #201	; 0xc9
 8010476:	2219      	movs	r2, #25
 8010478:	4619      	mov	r1, r3
 801047a:	f005 fead 	bl	80161d8 <HAL_UART_Receive_IT>
}
 801047e:	e0a2      	b.n	80105c6 <ObstacleHandler+0x406>
 8010480:	20001104 	.word	0x20001104
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f203 1399 	addw	r3, r3, #409	; 0x199
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	32c9      	adds	r2, #201	; 0xc9
 801048e:	7812      	ldrb	r2, [r2, #0]
 8010490:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d152      	bne.n	801054e <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	33ca      	adds	r3, #202	; 0xca
 80104b2:	2208      	movs	r2, #8
 80104b4:	4619      	mov	r1, r3
 80104b6:	f009 fbcb 	bl	8019c50 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	33d2      	adds	r3, #210	; 0xd2
 80104c4:	2208      	movs	r2, #8
 80104c6:	4619      	mov	r1, r3
 80104c8:	f009 fbc2 	bl	8019c50 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	33da      	adds	r3, #218	; 0xda
 80104d6:	2208      	movs	r2, #8
 80104d8:	4619      	mov	r1, r3
 80104da:	f009 fbb9 	bl	8019c50 <memcpy>
				float temp = lidar->pole.x;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80104e4:	4610      	mov	r0, r2
 80104e6:	4619      	mov	r1, r3
 80104e8:	f7f0 fb7e 	bl	8000be8 <__aeabi_d2f>
 80104ec:	4603      	mov	r3, r0
 80104ee:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 80104f6:	4614      	mov	r4, r2
 80104f8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	f7f0 f820 	bl	8000548 <__aeabi_f2d>
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	6879      	ldr	r1, [r7, #4]
 801050e:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 801051e:	f7f0 f995 	bl	800084c <__aeabi_ddiv>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4610      	mov	r0, r2
 8010528:	4619      	mov	r1, r3
 801052a:	f7f0 fb5d 	bl	8000be8 <__aeabi_d2f>
 801052e:	4603      	mov	r3, r0
 8010530:	ee00 3a10 	vmov	s0, r3
 8010534:	f00e f844 	bl	801e5c0 <atanf>
 8010538:	ee10 3a10 	vmov	r3, s0
 801053c:	4618      	mov	r0, r3
 801053e:	f7f0 f803 	bl	8000548 <__aeabi_f2d>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	6879      	ldr	r1, [r7, #4]
 8010548:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 801054c:	e00d      	b.n	801056a <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	f892 3294 	ldrb.w	r3, [r2, #660]	; 0x294
 8010554:	f043 0302 	orr.w	r3, r3, #2
 8010558:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
				LidarSendIns(lidar->inst, lidar);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8010562:	6879      	ldr	r1, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	f7ff fded 	bl	8010144 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801057a:	2201      	movs	r2, #1
 801057c:	f005 fd93 	bl	80160a6 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 801058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010590:	2208      	movs	r2, #8
 8010592:	f005 fd88 	bl	80160a6 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80105a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105a6:	2208      	movs	r2, #8
 80105a8:	f005 fd7d 	bl	80160a6 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80105b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105bc:	2208      	movs	r2, #8
 80105be:	f005 fd72 	bl	80160a6 <HAL_UART_Transmit>
}
 80105c2:	e000      	b.n	80105c6 <ObstacleHandler+0x406>
				break;
 80105c4:	bf00      	nop
}
 80105c6:	bf00      	nop
 80105c8:	3718      	adds	r7, #24
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bdb0      	pop	{r4, r5, r7, pc}
 80105ce:	bf00      	nop

080105d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80105d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80105d4:	480d      	ldr	r0, [pc, #52]	; (801060c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80105d6:	490e      	ldr	r1, [pc, #56]	; (8010610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80105d8:	4a0e      	ldr	r2, [pc, #56]	; (8010614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80105da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80105dc:	e002      	b.n	80105e4 <LoopCopyDataInit>

080105de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80105de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80105e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80105e2:	3304      	adds	r3, #4

080105e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80105e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80105e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80105e8:	d3f9      	bcc.n	80105de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80105ea:	4a0b      	ldr	r2, [pc, #44]	; (8010618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80105ec:	4c0b      	ldr	r4, [pc, #44]	; (801061c <LoopFillZerobss+0x26>)
  movs r3, #0
 80105ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80105f0:	e001      	b.n	80105f6 <LoopFillZerobss>

080105f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80105f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80105f4:	3204      	adds	r2, #4

080105f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80105f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80105f8:	d3fb      	bcc.n	80105f2 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80105fa:	f7fc fd03 	bl	800d004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80105fe:	f009 fafb 	bl	8019bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010602:	f7f3 fca7 	bl	8003f54 <main>
  bx  lr    
 8010606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 801060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010610:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8010614:	08020bdc 	.word	0x08020bdc
  ldr r2, =_sbss
 8010618:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 801061c:	2000a6e4 	.word	0x2000a6e4

08010620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010620:	e7fe      	b.n	8010620 <ADC_IRQHandler>
	...

08010624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010628:	4b0e      	ldr	r3, [pc, #56]	; (8010664 <HAL_Init+0x40>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a0d      	ldr	r2, [pc, #52]	; (8010664 <HAL_Init+0x40>)
 801062e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010634:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <HAL_Init+0x40>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a0a      	ldr	r2, [pc, #40]	; (8010664 <HAL_Init+0x40>)
 801063a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801063e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010640:	4b08      	ldr	r3, [pc, #32]	; (8010664 <HAL_Init+0x40>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a07      	ldr	r2, [pc, #28]	; (8010664 <HAL_Init+0x40>)
 8010646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801064a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801064c:	2003      	movs	r0, #3
 801064e:	f000 ffa8 	bl	80115a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010652:	2000      	movs	r0, #0
 8010654:	f7fc fbb6 	bl	800cdc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010658:	f7f1 fc4e 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801065c:	2300      	movs	r3, #0
}
 801065e:	4618      	mov	r0, r3
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	40023c00 	.word	0x40023c00

08010668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010668:	b480      	push	{r7}
 801066a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801066c:	4b06      	ldr	r3, [pc, #24]	; (8010688 <HAL_IncTick+0x20>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	461a      	mov	r2, r3
 8010672:	4b06      	ldr	r3, [pc, #24]	; (801068c <HAL_IncTick+0x24>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4413      	add	r3, r2
 8010678:	4a04      	ldr	r2, [pc, #16]	; (801068c <HAL_IncTick+0x24>)
 801067a:	6013      	str	r3, [r2, #0]
}
 801067c:	bf00      	nop
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	200000bc 	.word	0x200000bc
 801068c:	2000a690 	.word	0x2000a690

08010690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010690:	b480      	push	{r7}
 8010692:	af00      	add	r7, sp, #0
  return uwTick;
 8010694:	4b03      	ldr	r3, [pc, #12]	; (80106a4 <HAL_GetTick+0x14>)
 8010696:	681b      	ldr	r3, [r3, #0]
}
 8010698:	4618      	mov	r0, r3
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	2000a690 	.word	0x2000a690

080106a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80106b6:	2301      	movs	r3, #1
 80106b8:	e0ed      	b.n	8010896 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d102      	bne.n	80106cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7f1 fc42 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f022 0202 	bic.w	r2, r2, #2
 80106da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80106dc:	f7ff ffd8 	bl	8010690 <HAL_GetTick>
 80106e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80106e2:	e012      	b.n	801070a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80106e4:	f7ff ffd4 	bl	8010690 <HAL_GetTick>
 80106e8:	4602      	mov	r2, r0
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	2b0a      	cmp	r3, #10
 80106f0:	d90b      	bls.n	801070a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2205      	movs	r2, #5
 8010702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	e0c5      	b.n	8010896 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	f003 0302 	and.w	r3, r3, #2
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1e5      	bne.n	80106e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f042 0201 	orr.w	r2, r2, #1
 8010726:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010728:	f7ff ffb2 	bl	8010690 <HAL_GetTick>
 801072c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801072e:	e012      	b.n	8010756 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010730:	f7ff ffae 	bl	8010690 <HAL_GetTick>
 8010734:	4602      	mov	r2, r0
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	2b0a      	cmp	r3, #10
 801073c:	d90b      	bls.n	8010756 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010742:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2205      	movs	r2, #5
 801074e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	e09f      	b.n	8010896 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0e5      	beq.n	8010730 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	7e1b      	ldrb	r3, [r3, #24]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d108      	bne.n	801077e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801077a:	601a      	str	r2, [r3, #0]
 801077c:	e007      	b.n	801078e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801078c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	7e5b      	ldrb	r3, [r3, #25]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d108      	bne.n	80107a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	e007      	b.n	80107b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	7e9b      	ldrb	r3, [r3, #26]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d108      	bne.n	80107d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f042 0220 	orr.w	r2, r2, #32
 80107ce:	601a      	str	r2, [r3, #0]
 80107d0:	e007      	b.n	80107e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f022 0220 	bic.w	r2, r2, #32
 80107e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7edb      	ldrb	r3, [r3, #27]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d108      	bne.n	80107fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f022 0210 	bic.w	r2, r2, #16
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	e007      	b.n	801080c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f042 0210 	orr.w	r2, r2, #16
 801080a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	7f1b      	ldrb	r3, [r3, #28]
 8010810:	2b01      	cmp	r3, #1
 8010812:	d108      	bne.n	8010826 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f042 0208 	orr.w	r2, r2, #8
 8010822:	601a      	str	r2, [r3, #0]
 8010824:	e007      	b.n	8010836 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f022 0208 	bic.w	r2, r2, #8
 8010834:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	7f5b      	ldrb	r3, [r3, #29]
 801083a:	2b01      	cmp	r3, #1
 801083c:	d108      	bne.n	8010850 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f042 0204 	orr.w	r2, r2, #4
 801084c:	601a      	str	r2, [r3, #0]
 801084e:	e007      	b.n	8010860 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f022 0204 	bic.w	r2, r2, #4
 801085e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	689a      	ldr	r2, [r3, #8]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	431a      	orrs	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	431a      	orrs	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	695b      	ldr	r3, [r3, #20]
 8010874:	ea42 0103 	orr.w	r1, r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	1e5a      	subs	r2, r3, #1
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	430a      	orrs	r2, r1
 8010884:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2201      	movs	r2, #1
 8010890:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
	...

080108a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80108b8:	7cfb      	ldrb	r3, [r7, #19]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d003      	beq.n	80108c6 <HAL_CAN_ConfigFilter+0x26>
 80108be:	7cfb      	ldrb	r3, [r7, #19]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	f040 80be 	bne.w	8010a42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80108c6:	4b65      	ldr	r3, [pc, #404]	; (8010a5c <HAL_CAN_ConfigFilter+0x1bc>)
 80108c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108d0:	f043 0201 	orr.w	r2, r3, #1
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f4:	021b      	lsls	r3, r3, #8
 80108f6:	431a      	orrs	r2, r3
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	695b      	ldr	r3, [r3, #20]
 8010902:	f003 031f 	and.w	r3, r3, #31
 8010906:	2201      	movs	r2, #1
 8010908:	fa02 f303 	lsl.w	r3, r2, r3
 801090c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	43db      	mvns	r3, r3
 8010918:	401a      	ands	r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	69db      	ldr	r3, [r3, #28]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d123      	bne.n	8010970 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	43db      	mvns	r3, r3
 8010932:	401a      	ands	r2, r3
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801094a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	3248      	adds	r2, #72	; 0x48
 8010950:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010964:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010966:	6979      	ldr	r1, [r7, #20]
 8010968:	3348      	adds	r3, #72	; 0x48
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	440b      	add	r3, r1
 801096e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	2b01      	cmp	r3, #1
 8010976:	d122      	bne.n	80109be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	431a      	orrs	r2, r3
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010998:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	3248      	adds	r2, #72	; 0x48
 801099e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80109b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80109b4:	6979      	ldr	r1, [r7, #20]
 80109b6:	3348      	adds	r3, #72	; 0x48
 80109b8:	00db      	lsls	r3, r3, #3
 80109ba:	440b      	add	r3, r1
 80109bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	699b      	ldr	r3, [r3, #24]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d109      	bne.n	80109da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	43db      	mvns	r3, r3
 80109d0:	401a      	ands	r2, r3
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80109d8:	e007      	b.n	80109ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	431a      	orrs	r2, r3
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d109      	bne.n	8010a06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	43db      	mvns	r3, r3
 80109fc:	401a      	ands	r2, r3
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010a04:	e007      	b.n	8010a16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	6a1b      	ldr	r3, [r3, #32]
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d107      	bne.n	8010a2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	431a      	orrs	r2, r3
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010a34:	f023 0201 	bic.w	r2, r3, #1
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e006      	b.n	8010a50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010a4e:	2301      	movs	r3, #1
  }
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	371c      	adds	r7, #28
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr
 8010a5c:	40006400 	.word	0x40006400

08010a60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d12e      	bne.n	8010ad2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2202      	movs	r2, #2
 8010a78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f022 0201 	bic.w	r2, r2, #1
 8010a8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010a8c:	f7ff fe00 	bl	8010690 <HAL_GetTick>
 8010a90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010a92:	e012      	b.n	8010aba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010a94:	f7ff fdfc 	bl	8010690 <HAL_GetTick>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b0a      	cmp	r3, #10
 8010aa0:	d90b      	bls.n	8010aba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2205      	movs	r2, #5
 8010ab2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e012      	b.n	8010ae0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	f003 0301 	and.w	r3, r3, #1
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d1e5      	bne.n	8010a94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e006      	b.n	8010ae0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
  }
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b089      	sub	sp, #36	; 0x24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010afc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8010b06:	7ffb      	ldrb	r3, [r7, #31]
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d003      	beq.n	8010b14 <HAL_CAN_AddTxMessage+0x2c>
 8010b0c:	7ffb      	ldrb	r3, [r7, #31]
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	f040 80b8 	bne.w	8010c84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10a      	bne.n	8010b34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d105      	bne.n	8010b34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f000 80a0 	beq.w	8010c74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	0e1b      	lsrs	r3, r3, #24
 8010b38:	f003 0303 	and.w	r3, r3, #3
 8010b3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2b02      	cmp	r3, #2
 8010b42:	d907      	bls.n	8010b54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010b50:	2301      	movs	r3, #1
 8010b52:	e09e      	b.n	8010c92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8010b54:	2201      	movs	r2, #1
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	409a      	lsls	r2, r3
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d10d      	bne.n	8010b82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010b70:	68f9      	ldr	r1, [r7, #12]
 8010b72:	6809      	ldr	r1, [r1, #0]
 8010b74:	431a      	orrs	r2, r3
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	3318      	adds	r3, #24
 8010b7a:	011b      	lsls	r3, r3, #4
 8010b7c:	440b      	add	r3, r1
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	e00f      	b.n	8010ba2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b92:	68f9      	ldr	r1, [r7, #12]
 8010b94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8010b96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	3318      	adds	r3, #24
 8010b9c:	011b      	lsls	r3, r3, #4
 8010b9e:	440b      	add	r3, r1
 8010ba0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6819      	ldr	r1, [r3, #0]
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	691a      	ldr	r2, [r3, #16]
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	3318      	adds	r3, #24
 8010bae:	011b      	lsls	r3, r3, #4
 8010bb0:	440b      	add	r3, r1
 8010bb2:	3304      	adds	r3, #4
 8010bb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	7d1b      	ldrb	r3, [r3, #20]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d111      	bne.n	8010be2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	3318      	adds	r3, #24
 8010bc6:	011b      	lsls	r3, r3, #4
 8010bc8:	4413      	add	r3, r2
 8010bca:	3304      	adds	r3, #4
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	6811      	ldr	r1, [r2, #0]
 8010bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	3318      	adds	r3, #24
 8010bda:	011b      	lsls	r3, r3, #4
 8010bdc:	440b      	add	r3, r1
 8010bde:	3304      	adds	r3, #4
 8010be0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3307      	adds	r3, #7
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	061a      	lsls	r2, r3, #24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	3306      	adds	r3, #6
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	041b      	lsls	r3, r3, #16
 8010bf2:	431a      	orrs	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	3305      	adds	r3, #5
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	3204      	adds	r2, #4
 8010c02:	7812      	ldrb	r2, [r2, #0]
 8010c04:	4610      	mov	r0, r2
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	6811      	ldr	r1, [r2, #0]
 8010c0a:	ea43 0200 	orr.w	r2, r3, r0
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	440b      	add	r3, r1
 8010c14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010c18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3303      	adds	r3, #3
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	061a      	lsls	r2, r3, #24
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	3302      	adds	r3, #2
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	041b      	lsls	r3, r3, #16
 8010c2a:	431a      	orrs	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	021b      	lsls	r3, r3, #8
 8010c34:	4313      	orrs	r3, r2
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	7812      	ldrb	r2, [r2, #0]
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	6811      	ldr	r1, [r2, #0]
 8010c40:	ea43 0200 	orr.w	r2, r3, r0
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	440b      	add	r3, r1
 8010c4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8010c4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	3318      	adds	r3, #24
 8010c58:	011b      	lsls	r3, r3, #4
 8010c5a:	4413      	add	r3, r2
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	6811      	ldr	r1, [r2, #0]
 8010c62:	f043 0201 	orr.w	r2, r3, #1
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	3318      	adds	r3, #24
 8010c6a:	011b      	lsls	r3, r3, #4
 8010c6c:	440b      	add	r3, r1
 8010c6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8010c70:	2300      	movs	r3, #0
 8010c72:	e00e      	b.n	8010c92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8010c80:	2301      	movs	r3, #1
 8010c82:	e006      	b.n	8010c92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
  }
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3724      	adds	r7, #36	; 0x24
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8010c9e:	b480      	push	{r7}
 8010ca0:	b085      	sub	sp, #20
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cb0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8010cb2:	7afb      	ldrb	r3, [r7, #11]
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d002      	beq.n	8010cbe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8010cb8:	7afb      	ldrb	r3, [r7, #11]
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d11d      	bne.n	8010cfa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d002      	beq.n	8010cd2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	3301      	adds	r3, #1
 8010cd0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b087      	sub	sp, #28
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d003      	beq.n	8010d2c <HAL_CAN_GetRxMessage+0x24>
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
 8010d26:	2b02      	cmp	r3, #2
 8010d28:	f040 80f3 	bne.w	8010f12 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10e      	bne.n	8010d50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f003 0303 	and.w	r3, r3, #3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d116      	bne.n	8010d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e0e7      	b.n	8010f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	f003 0303 	and.w	r3, r3, #3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d107      	bne.n	8010d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e0d8      	b.n	8010f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	331b      	adds	r3, #27
 8010d76:	011b      	lsls	r3, r3, #4
 8010d78:	4413      	add	r3, r2
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 0204 	and.w	r2, r3, #4
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10c      	bne.n	8010da6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	331b      	adds	r3, #27
 8010d94:	011b      	lsls	r3, r3, #4
 8010d96:	4413      	add	r3, r2
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	0d5b      	lsrs	r3, r3, #21
 8010d9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	e00b      	b.n	8010dbe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	331b      	adds	r3, #27
 8010dae:	011b      	lsls	r3, r3, #4
 8010db0:	4413      	add	r3, r2
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	08db      	lsrs	r3, r3, #3
 8010db6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	331b      	adds	r3, #27
 8010dc6:	011b      	lsls	r3, r3, #4
 8010dc8:	4413      	add	r3, r2
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f003 0202 	and.w	r2, r3, #2
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681a      	ldr	r2, [r3, #0]
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	331b      	adds	r3, #27
 8010ddc:	011b      	lsls	r3, r3, #4
 8010dde:	4413      	add	r3, r2
 8010de0:	3304      	adds	r3, #4
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f003 020f 	and.w	r2, r3, #15
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	331b      	adds	r3, #27
 8010df4:	011b      	lsls	r3, r3, #4
 8010df6:	4413      	add	r3, r2
 8010df8:	3304      	adds	r3, #4
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	0a1b      	lsrs	r3, r3, #8
 8010dfe:	b2da      	uxtb	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	331b      	adds	r3, #27
 8010e0c:	011b      	lsls	r3, r3, #4
 8010e0e:	4413      	add	r3, r2
 8010e10:	3304      	adds	r3, #4
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	0c1b      	lsrs	r3, r3, #16
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	011b      	lsls	r3, r3, #4
 8010e24:	4413      	add	r3, r2
 8010e26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	011b      	lsls	r3, r3, #4
 8010e3a:	4413      	add	r3, r2
 8010e3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	0a1a      	lsrs	r2, r3, #8
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	3301      	adds	r3, #1
 8010e48:	b2d2      	uxtb	r2, r2
 8010e4a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	011b      	lsls	r3, r3, #4
 8010e54:	4413      	add	r3, r2
 8010e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	0c1a      	lsrs	r2, r3, #16
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	3302      	adds	r3, #2
 8010e62:	b2d2      	uxtb	r2, r2
 8010e64:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	011b      	lsls	r3, r3, #4
 8010e6e:	4413      	add	r3, r2
 8010e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	0e1a      	lsrs	r2, r3, #24
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	3303      	adds	r3, #3
 8010e7c:	b2d2      	uxtb	r2, r2
 8010e7e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	011b      	lsls	r3, r3, #4
 8010e88:	4413      	add	r3, r2
 8010e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	3304      	adds	r3, #4
 8010e94:	b2d2      	uxtb	r2, r2
 8010e96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	011b      	lsls	r3, r3, #4
 8010ea0:	4413      	add	r3, r2
 8010ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	0a1a      	lsrs	r2, r3, #8
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	3305      	adds	r3, #5
 8010eae:	b2d2      	uxtb	r2, r2
 8010eb0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	011b      	lsls	r3, r3, #4
 8010eba:	4413      	add	r3, r2
 8010ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	0c1a      	lsrs	r2, r3, #16
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	3306      	adds	r3, #6
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	011b      	lsls	r3, r3, #4
 8010ed4:	4413      	add	r3, r2
 8010ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	0e1a      	lsrs	r2, r3, #24
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	3307      	adds	r3, #7
 8010ee2:	b2d2      	uxtb	r2, r2
 8010ee4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d108      	bne.n	8010efe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	68da      	ldr	r2, [r3, #12]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f042 0220 	orr.w	r2, r2, #32
 8010efa:	60da      	str	r2, [r3, #12]
 8010efc:	e007      	b.n	8010f0e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	691a      	ldr	r2, [r3, #16]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f042 0220 	orr.w	r2, r2, #32
 8010f0c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	e006      	b.n	8010f20 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010f1e:	2301      	movs	r3, #1
  }
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	371c      	adds	r7, #28
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f3c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d002      	beq.n	8010f4a <HAL_CAN_ActivateNotification+0x1e>
 8010f44:	7bfb      	ldrb	r3, [r7, #15]
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	d109      	bne.n	8010f5e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	6959      	ldr	r1, [r3, #20]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	683a      	ldr	r2, [r7, #0]
 8010f56:	430a      	orrs	r2, r1
 8010f58:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e006      	b.n	8010f6c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
  }
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b08a      	sub	sp, #40	; 0x28
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8010f80:	2300      	movs	r3, #0
 8010f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	695b      	ldr	r3, [r3, #20]
 8010f8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d07c      	beq.n	80110b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	f003 0301 	and.w	r3, r3, #1
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d023      	beq.n	8011010 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	f003 0302 	and.w	r3, r3, #2
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d003      	beq.n	8010fe2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 f983 	bl	80112e6 <HAL_CAN_TxMailbox0CompleteCallback>
 8010fe0:	e016      	b.n	8011010 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	f003 0304 	and.w	r3, r3, #4
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8010ff4:	e00c      	b.n	8011010 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8010ff6:	69bb      	ldr	r3, [r7, #24]
 8010ff8:	f003 0308 	and.w	r3, r3, #8
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d004      	beq.n	801100a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
 8011008:	e002      	b.n	8011010 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 f989 	bl	8011322 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011016:	2b00      	cmp	r3, #0
 8011018:	d024      	beq.n	8011064 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801102a:	2b00      	cmp	r3, #0
 801102c:	d003      	beq.n	8011036 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f963 	bl	80112fa <HAL_CAN_TxMailbox1CompleteCallback>
 8011034:	e016      	b.n	8011064 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011036:	69bb      	ldr	r3, [r7, #24]
 8011038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801103c:	2b00      	cmp	r3, #0
 801103e:	d004      	beq.n	801104a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011046:	627b      	str	r3, [r7, #36]	; 0x24
 8011048:	e00c      	b.n	8011064 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801105a:	627b      	str	r3, [r7, #36]	; 0x24
 801105c:	e002      	b.n	8011064 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f969 	bl	8011336 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801106a:	2b00      	cmp	r3, #0
 801106c:	d024      	beq.n	80110b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011076:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 f943 	bl	801130e <HAL_CAN_TxMailbox2CompleteCallback>
 8011088:	e016      	b.n	80110b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
 801109c:	e00c      	b.n	80110b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d004      	beq.n	80110b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
 80110b0:	e002      	b.n	80110b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 f949 	bl	801134a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80110b8:	6a3b      	ldr	r3, [r7, #32]
 80110ba:	f003 0308 	and.w	r3, r3, #8
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00c      	beq.n	80110dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	f003 0310 	and.w	r3, r3, #16
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d007      	beq.n	80110dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2210      	movs	r2, #16
 80110da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80110dc:	6a3b      	ldr	r3, [r7, #32]
 80110de:	f003 0304 	and.w	r3, r3, #4
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00b      	beq.n	80110fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	f003 0308 	and.w	r3, r3, #8
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2208      	movs	r2, #8
 80110f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f930 	bl	801135e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80110fe:	6a3b      	ldr	r3, [r7, #32]
 8011100:	f003 0302 	and.w	r3, r3, #2
 8011104:	2b00      	cmp	r3, #0
 8011106:	d009      	beq.n	801111c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	f003 0303 	and.w	r3, r3, #3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d002      	beq.n	801111c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7f9 f96c 	bl	800a3f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801111c:	6a3b      	ldr	r3, [r7, #32]
 801111e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00c      	beq.n	8011140 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	f003 0310 	and.w	r3, r3, #16
 801112c:	2b00      	cmp	r3, #0
 801112e:	d007      	beq.n	8011140 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011136:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2210      	movs	r2, #16
 801113e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011140:	6a3b      	ldr	r3, [r7, #32]
 8011142:	f003 0320 	and.w	r3, r3, #32
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00b      	beq.n	8011162 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	f003 0308 	and.w	r3, r3, #8
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2208      	movs	r2, #8
 801115a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f908 	bl	8011372 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8011162:	6a3b      	ldr	r3, [r7, #32]
 8011164:	f003 0310 	and.w	r3, r3, #16
 8011168:	2b00      	cmp	r3, #0
 801116a:	d009      	beq.n	8011180 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	f003 0303 	and.w	r3, r3, #3
 8011176:	2b00      	cmp	r3, #0
 8011178:	d002      	beq.n	8011180 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7f9 faca 	bl	800a714 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8011180:	6a3b      	ldr	r3, [r7, #32]
 8011182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00b      	beq.n	80111a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	f003 0310 	and.w	r3, r3, #16
 8011190:	2b00      	cmp	r3, #0
 8011192:	d006      	beq.n	80111a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2210      	movs	r2, #16
 801119a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 f8f2 	bl	8011386 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00b      	beq.n	80111c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	f003 0308 	and.w	r3, r3, #8
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d006      	beq.n	80111c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2208      	movs	r2, #8
 80111bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f8eb 	bl	801139a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d07b      	beq.n	80112c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	f003 0304 	and.w	r3, r3, #4
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d072      	beq.n	80112be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	f043 0301 	orr.w	r3, r3, #1
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d008      	beq.n	8011210 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011204:	2b00      	cmp	r3, #0
 8011206:	d003      	beq.n	8011210 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	f043 0302 	orr.w	r3, r3, #2
 801120e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011210:	6a3b      	ldr	r3, [r7, #32]
 8011212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011216:	2b00      	cmp	r3, #0
 8011218:	d008      	beq.n	801122c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011220:	2b00      	cmp	r3, #0
 8011222:	d003      	beq.n	801122c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011226:	f043 0304 	orr.w	r3, r3, #4
 801122a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011232:	2b00      	cmp	r3, #0
 8011234:	d043      	beq.n	80112be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801123c:	2b00      	cmp	r3, #0
 801123e:	d03e      	beq.n	80112be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011246:	2b60      	cmp	r3, #96	; 0x60
 8011248:	d02b      	beq.n	80112a2 <HAL_CAN_IRQHandler+0x32a>
 801124a:	2b60      	cmp	r3, #96	; 0x60
 801124c:	d82e      	bhi.n	80112ac <HAL_CAN_IRQHandler+0x334>
 801124e:	2b50      	cmp	r3, #80	; 0x50
 8011250:	d022      	beq.n	8011298 <HAL_CAN_IRQHandler+0x320>
 8011252:	2b50      	cmp	r3, #80	; 0x50
 8011254:	d82a      	bhi.n	80112ac <HAL_CAN_IRQHandler+0x334>
 8011256:	2b40      	cmp	r3, #64	; 0x40
 8011258:	d019      	beq.n	801128e <HAL_CAN_IRQHandler+0x316>
 801125a:	2b40      	cmp	r3, #64	; 0x40
 801125c:	d826      	bhi.n	80112ac <HAL_CAN_IRQHandler+0x334>
 801125e:	2b30      	cmp	r3, #48	; 0x30
 8011260:	d010      	beq.n	8011284 <HAL_CAN_IRQHandler+0x30c>
 8011262:	2b30      	cmp	r3, #48	; 0x30
 8011264:	d822      	bhi.n	80112ac <HAL_CAN_IRQHandler+0x334>
 8011266:	2b10      	cmp	r3, #16
 8011268:	d002      	beq.n	8011270 <HAL_CAN_IRQHandler+0x2f8>
 801126a:	2b20      	cmp	r3, #32
 801126c:	d005      	beq.n	801127a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801126e:	e01d      	b.n	80112ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	f043 0308 	orr.w	r3, r3, #8
 8011276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011278:	e019      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	f043 0310 	orr.w	r3, r3, #16
 8011280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011282:	e014      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8011284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011286:	f043 0320 	orr.w	r3, r3, #32
 801128a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801128c:	e00f      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011294:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011296:	e00a      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801129e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80112a0:	e005      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80112aa:	e000      	b.n	80112ae <HAL_CAN_IRQHandler+0x336>
            break;
 80112ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	699a      	ldr	r2, [r3, #24]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80112bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2204      	movs	r2, #4
 80112c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d008      	beq.n	80112de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	431a      	orrs	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 f868 	bl	80113ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80112de:	bf00      	nop
 80112e0:	3728      	adds	r7, #40	; 0x28
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80112e6:	b480      	push	{r7}
 80112e8:	b083      	sub	sp, #12
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80112ee:	bf00      	nop
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80112fa:	b480      	push	{r7}
 80112fc:	b083      	sub	sp, #12
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8011302:	bf00      	nop
 8011304:	370c      	adds	r7, #12
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr

0801130e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801130e:	b480      	push	{r7}
 8011310:	b083      	sub	sp, #12
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011316:	bf00      	nop
 8011318:	370c      	adds	r7, #12
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011322:	b480      	push	{r7}
 8011324:	b083      	sub	sp, #12
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801132a:	bf00      	nop
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr

08011336 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011336:	b480      	push	{r7}
 8011338:	b083      	sub	sp, #12
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801133e:	bf00      	nop
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801134a:	b480      	push	{r7}
 801134c:	b083      	sub	sp, #12
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8011352:	bf00      	nop
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801135e:	b480      	push	{r7}
 8011360:	b083      	sub	sp, #12
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011366:	bf00      	nop
 8011368:	370c      	adds	r7, #12
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr

08011372 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8011372:	b480      	push	{r7}
 8011374:	b083      	sub	sp, #12
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801137a:	bf00      	nop
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8011386:	b480      	push	{r7}
 8011388:	b083      	sub	sp, #12
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801138e:	bf00      	nop
 8011390:	370c      	adds	r7, #12
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr

0801139a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801139a:	b480      	push	{r7}
 801139c:	b083      	sub	sp, #12
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80113a2:	bf00      	nop
 80113a4:	370c      	adds	r7, #12
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80113ae:	b480      	push	{r7}
 80113b0:	b083      	sub	sp, #12
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80113b6:	bf00      	nop
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr
	...

080113c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f003 0307 	and.w	r3, r3, #7
 80113d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80113d4:	4b0c      	ldr	r3, [pc, #48]	; (8011408 <__NVIC_SetPriorityGrouping+0x44>)
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80113da:	68ba      	ldr	r2, [r7, #8]
 80113dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80113e0:	4013      	ands	r3, r2
 80113e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80113ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80113f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80113f6:	4a04      	ldr	r2, [pc, #16]	; (8011408 <__NVIC_SetPriorityGrouping+0x44>)
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	60d3      	str	r3, [r2, #12]
}
 80113fc:	bf00      	nop
 80113fe:	3714      	adds	r7, #20
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr
 8011408:	e000ed00 	.word	0xe000ed00

0801140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801140c:	b480      	push	{r7}
 801140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011410:	4b04      	ldr	r3, [pc, #16]	; (8011424 <__NVIC_GetPriorityGrouping+0x18>)
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	0a1b      	lsrs	r3, r3, #8
 8011416:	f003 0307 	and.w	r3, r3, #7
}
 801141a:	4618      	mov	r0, r3
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr
 8011424:	e000ed00 	.word	0xe000ed00

08011428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	4603      	mov	r3, r0
 8011430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011436:	2b00      	cmp	r3, #0
 8011438:	db0b      	blt.n	8011452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801143a:	79fb      	ldrb	r3, [r7, #7]
 801143c:	f003 021f 	and.w	r2, r3, #31
 8011440:	4907      	ldr	r1, [pc, #28]	; (8011460 <__NVIC_EnableIRQ+0x38>)
 8011442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011446:	095b      	lsrs	r3, r3, #5
 8011448:	2001      	movs	r0, #1
 801144a:	fa00 f202 	lsl.w	r2, r0, r2
 801144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8011452:	bf00      	nop
 8011454:	370c      	adds	r7, #12
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
 801145e:	bf00      	nop
 8011460:	e000e100 	.word	0xe000e100

08011464 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	4603      	mov	r3, r0
 801146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011472:	2b00      	cmp	r3, #0
 8011474:	db12      	blt.n	801149c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	f003 021f 	and.w	r2, r3, #31
 801147c:	490a      	ldr	r1, [pc, #40]	; (80114a8 <__NVIC_DisableIRQ+0x44>)
 801147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011482:	095b      	lsrs	r3, r3, #5
 8011484:	2001      	movs	r0, #1
 8011486:	fa00 f202 	lsl.w	r2, r0, r2
 801148a:	3320      	adds	r3, #32
 801148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011490:	f3bf 8f4f 	dsb	sy
}
 8011494:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011496:	f3bf 8f6f 	isb	sy
}
 801149a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801149c:	bf00      	nop
 801149e:	370c      	adds	r7, #12
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	e000e100 	.word	0xe000e100

080114ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	4603      	mov	r3, r0
 80114b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	db0c      	blt.n	80114d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	f003 021f 	and.w	r2, r3, #31
 80114c4:	4907      	ldr	r1, [pc, #28]	; (80114e4 <__NVIC_ClearPendingIRQ+0x38>)
 80114c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114ca:	095b      	lsrs	r3, r3, #5
 80114cc:	2001      	movs	r0, #1
 80114ce:	fa00 f202 	lsl.w	r2, r0, r2
 80114d2:	3360      	adds	r3, #96	; 0x60
 80114d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80114d8:	bf00      	nop
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	e000e100 	.word	0xe000e100

080114e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	4603      	mov	r3, r0
 80114f0:	6039      	str	r1, [r7, #0]
 80114f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80114f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	db0a      	blt.n	8011512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	490c      	ldr	r1, [pc, #48]	; (8011534 <__NVIC_SetPriority+0x4c>)
 8011502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011506:	0112      	lsls	r2, r2, #4
 8011508:	b2d2      	uxtb	r2, r2
 801150a:	440b      	add	r3, r1
 801150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011510:	e00a      	b.n	8011528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	b2da      	uxtb	r2, r3
 8011516:	4908      	ldr	r1, [pc, #32]	; (8011538 <__NVIC_SetPriority+0x50>)
 8011518:	79fb      	ldrb	r3, [r7, #7]
 801151a:	f003 030f 	and.w	r3, r3, #15
 801151e:	3b04      	subs	r3, #4
 8011520:	0112      	lsls	r2, r2, #4
 8011522:	b2d2      	uxtb	r2, r2
 8011524:	440b      	add	r3, r1
 8011526:	761a      	strb	r2, [r3, #24]
}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	e000e100 	.word	0xe000e100
 8011538:	e000ed00 	.word	0xe000ed00

0801153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801153c:	b480      	push	{r7}
 801153e:	b089      	sub	sp, #36	; 0x24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f003 0307 	and.w	r3, r3, #7
 801154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	f1c3 0307 	rsb	r3, r3, #7
 8011556:	2b04      	cmp	r3, #4
 8011558:	bf28      	it	cs
 801155a:	2304      	movcs	r3, #4
 801155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	3304      	adds	r3, #4
 8011562:	2b06      	cmp	r3, #6
 8011564:	d902      	bls.n	801156c <NVIC_EncodePriority+0x30>
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	3b03      	subs	r3, #3
 801156a:	e000      	b.n	801156e <NVIC_EncodePriority+0x32>
 801156c:	2300      	movs	r3, #0
 801156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011574:	69bb      	ldr	r3, [r7, #24]
 8011576:	fa02 f303 	lsl.w	r3, r2, r3
 801157a:	43da      	mvns	r2, r3
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	401a      	ands	r2, r3
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	fa01 f303 	lsl.w	r3, r1, r3
 801158e:	43d9      	mvns	r1, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011594:	4313      	orrs	r3, r2
         );
}
 8011596:	4618      	mov	r0, r3
 8011598:	3724      	adds	r7, #36	; 0x24
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr

080115a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b082      	sub	sp, #8
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7ff ff0a 	bl	80113c4 <__NVIC_SetPriorityGrouping>
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	4603      	mov	r3, r0
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
 80115c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80115c6:	2300      	movs	r3, #0
 80115c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80115ca:	f7ff ff1f 	bl	801140c <__NVIC_GetPriorityGrouping>
 80115ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	68b9      	ldr	r1, [r7, #8]
 80115d4:	6978      	ldr	r0, [r7, #20]
 80115d6:	f7ff ffb1 	bl	801153c <NVIC_EncodePriority>
 80115da:	4602      	mov	r2, r0
 80115dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff ff80 	bl	80114e8 <__NVIC_SetPriority>
}
 80115e8:	bf00      	nop
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80115fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff ff12 	bl	8011428 <__NVIC_EnableIRQ>
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	4603      	mov	r3, r0
 8011614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801161a:	4618      	mov	r0, r3
 801161c:	f7ff ff22 	bl	8011464 <__NVIC_DisableIRQ>
}
 8011620:	bf00      	nop
 8011622:	3708      	adds	r7, #8
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}

08011628 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8011632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011636:	4618      	mov	r0, r3
 8011638:	f7ff ff38 	bl	80114ac <__NVIC_ClearPendingIRQ>
}
 801163c:	bf00      	nop
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b086      	sub	sp, #24
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801164c:	2300      	movs	r3, #0
 801164e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011650:	f7ff f81e 	bl	8010690 <HAL_GetTick>
 8011654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d101      	bne.n	8011660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801165c:	2301      	movs	r3, #1
 801165e:	e099      	b.n	8011794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2202      	movs	r2, #2
 801166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f022 0201 	bic.w	r2, r2, #1
 801167e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011680:	e00f      	b.n	80116a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011682:	f7ff f805 	bl	8010690 <HAL_GetTick>
 8011686:	4602      	mov	r2, r0
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	2b05      	cmp	r3, #5
 801168e:	d908      	bls.n	80116a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2220      	movs	r2, #32
 8011694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2203      	movs	r2, #3
 801169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801169e:	2303      	movs	r3, #3
 80116a0:	e078      	b.n	8011794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f003 0301 	and.w	r3, r3, #1
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1e8      	bne.n	8011682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	4b38      	ldr	r3, [pc, #224]	; (801179c <HAL_DMA_Init+0x158>)
 80116bc:	4013      	ands	r3, r2
 80116be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80116da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	699b      	ldr	r3, [r3, #24]
 80116e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80116e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6a1b      	ldr	r3, [r3, #32]
 80116ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	4313      	orrs	r3, r2
 80116f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f8:	2b04      	cmp	r3, #4
 80116fa:	d107      	bne.n	801170c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011704:	4313      	orrs	r3, r2
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	4313      	orrs	r3, r2
 801170a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	697a      	ldr	r2, [r7, #20]
 8011712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	695b      	ldr	r3, [r3, #20]
 801171a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	f023 0307 	bic.w	r3, r3, #7
 8011722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	4313      	orrs	r3, r2
 801172c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011732:	2b04      	cmp	r3, #4
 8011734:	d117      	bne.n	8011766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801173a:	697a      	ldr	r2, [r7, #20]
 801173c:	4313      	orrs	r3, r2
 801173e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011744:	2b00      	cmp	r3, #0
 8011746:	d00e      	beq.n	8011766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fb09 	bl	8011d60 <DMA_CheckFifoParam>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d008      	beq.n	8011766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2240      	movs	r2, #64	; 0x40
 8011758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2201      	movs	r2, #1
 801175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011762:	2301      	movs	r3, #1
 8011764:	e016      	b.n	8011794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 fac0 	bl	8011cf4 <DMA_CalcBaseAndBitshift>
 8011774:	4603      	mov	r3, r0
 8011776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801177c:	223f      	movs	r2, #63	; 0x3f
 801177e:	409a      	lsls	r2, r3
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2201      	movs	r2, #1
 801178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011792:	2300      	movs	r3, #0
}
 8011794:	4618      	mov	r0, r3
 8011796:	3718      	adds	r7, #24
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	f010803f 	.word	0xf010803f

080117a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80117ae:	2301      	movs	r3, #1
 80117b0:	e050      	b.n	8011854 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	2b02      	cmp	r3, #2
 80117bc:	d101      	bne.n	80117c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80117be:	2302      	movs	r3, #2
 80117c0:	e048      	b.n	8011854 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f022 0201 	bic.w	r2, r2, #1
 80117d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2200      	movs	r2, #0
 80117d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2200      	movs	r2, #0
 80117e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2200      	movs	r2, #0
 80117e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2200      	movs	r2, #0
 80117f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2221      	movs	r2, #33	; 0x21
 8011800:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 fa76 	bl	8011cf4 <DMA_CalcBaseAndBitshift>
 8011808:	4603      	mov	r3, r0
 801180a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2200      	movs	r2, #0
 8011822:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2200      	movs	r2, #0
 801182e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011834:	223f      	movs	r2, #63	; 0x3f
 8011836:	409a      	lsls	r2, r3
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2200      	movs	r2, #0
 8011840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011852:	2300      	movs	r3, #0
}
 8011854:	4618      	mov	r0, r3
 8011856:	3710      	adds	r7, #16
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b086      	sub	sp, #24
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
 8011868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801187a:	2b01      	cmp	r3, #1
 801187c:	d101      	bne.n	8011882 <HAL_DMA_Start_IT+0x26>
 801187e:	2302      	movs	r3, #2
 8011880:	e040      	b.n	8011904 <HAL_DMA_Start_IT+0xa8>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2201      	movs	r2, #1
 8011886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b01      	cmp	r3, #1
 8011894:	d12f      	bne.n	80118f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2202      	movs	r2, #2
 801189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2200      	movs	r2, #0
 80118a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	68b9      	ldr	r1, [r7, #8]
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f000 f9f4 	bl	8011c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118b4:	223f      	movs	r2, #63	; 0x3f
 80118b6:	409a      	lsls	r2, r3
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f042 0216 	orr.w	r2, r2, #22
 80118ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d007      	beq.n	80118e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f042 0208 	orr.w	r2, r2, #8
 80118e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f042 0201 	orr.w	r2, r2, #1
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	e005      	b.n	8011902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80118fe:	2302      	movs	r3, #2
 8011900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011902:	7dfb      	ldrb	r3, [r7, #23]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801191a:	b2db      	uxtb	r3, r3
 801191c:	2b02      	cmp	r3, #2
 801191e:	d004      	beq.n	801192a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2280      	movs	r2, #128	; 0x80
 8011924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8011926:	2301      	movs	r3, #1
 8011928:	e00c      	b.n	8011944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2205      	movs	r2, #5
 801192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f022 0201 	bic.w	r2, r2, #1
 8011940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011942:	2300      	movs	r3, #0
}
 8011944:	4618      	mov	r0, r3
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011958:	2300      	movs	r3, #0
 801195a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801195c:	4b92      	ldr	r3, [pc, #584]	; (8011ba8 <HAL_DMA_IRQHandler+0x258>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a92      	ldr	r2, [pc, #584]	; (8011bac <HAL_DMA_IRQHandler+0x25c>)
 8011962:	fba2 2303 	umull	r2, r3, r2, r3
 8011966:	0a9b      	lsrs	r3, r3, #10
 8011968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801196e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801197a:	2208      	movs	r2, #8
 801197c:	409a      	lsls	r2, r3
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	4013      	ands	r3, r2
 8011982:	2b00      	cmp	r3, #0
 8011984:	d01a      	beq.n	80119bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f003 0304 	and.w	r3, r3, #4
 8011990:	2b00      	cmp	r3, #0
 8011992:	d013      	beq.n	80119bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f022 0204 	bic.w	r2, r2, #4
 80119a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119a8:	2208      	movs	r2, #8
 80119aa:	409a      	lsls	r2, r3
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119b4:	f043 0201 	orr.w	r2, r3, #1
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119c0:	2201      	movs	r2, #1
 80119c2:	409a      	lsls	r2, r3
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	4013      	ands	r3, r2
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d012      	beq.n	80119f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	695b      	ldr	r3, [r3, #20]
 80119d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00b      	beq.n	80119f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119de:	2201      	movs	r2, #1
 80119e0:	409a      	lsls	r2, r3
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ea:	f043 0202 	orr.w	r2, r3, #2
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119f6:	2204      	movs	r2, #4
 80119f8:	409a      	lsls	r2, r3
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	4013      	ands	r3, r2
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d012      	beq.n	8011a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f003 0302 	and.w	r3, r3, #2
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a14:	2204      	movs	r2, #4
 8011a16:	409a      	lsls	r2, r3
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a20:	f043 0204 	orr.w	r2, r3, #4
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a2c:	2210      	movs	r2, #16
 8011a2e:	409a      	lsls	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	4013      	ands	r3, r2
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d043      	beq.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f003 0308 	and.w	r3, r3, #8
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d03c      	beq.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a4a:	2210      	movs	r2, #16
 8011a4c:	409a      	lsls	r2, r3
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d018      	beq.n	8011a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d108      	bne.n	8011a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d024      	beq.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	4798      	blx	r3
 8011a7e:	e01f      	b.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01b      	beq.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	4798      	blx	r3
 8011a90:	e016      	b.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d107      	bne.n	8011ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f022 0208 	bic.w	r2, r2, #8
 8011aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d003      	beq.n	8011ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ac4:	2220      	movs	r2, #32
 8011ac6:	409a      	lsls	r2, r3
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	4013      	ands	r3, r2
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 808e 	beq.w	8011bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f003 0310 	and.w	r3, r3, #16
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 8086 	beq.w	8011bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ae6:	2220      	movs	r2, #32
 8011ae8:	409a      	lsls	r2, r3
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b05      	cmp	r3, #5
 8011af8:	d136      	bne.n	8011b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f022 0216 	bic.w	r2, r2, #22
 8011b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	695a      	ldr	r2, [r3, #20]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d103      	bne.n	8011b2a <HAL_DMA_IRQHandler+0x1da>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d007      	beq.n	8011b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f022 0208 	bic.w	r2, r2, #8
 8011b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b3e:	223f      	movs	r2, #63	; 0x3f
 8011b40:	409a      	lsls	r2, r3
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2201      	movs	r2, #1
 8011b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d07d      	beq.n	8011c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	4798      	blx	r3
        }
        return;
 8011b66:	e078      	b.n	8011c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d01c      	beq.n	8011bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d108      	bne.n	8011b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d030      	beq.n	8011bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	4798      	blx	r3
 8011b94:	e02b      	b.n	8011bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d027      	beq.n	8011bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	4798      	blx	r3
 8011ba6:	e022      	b.n	8011bee <HAL_DMA_IRQHandler+0x29e>
 8011ba8:	20000054 	.word	0x20000054
 8011bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d10f      	bne.n	8011bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f022 0210 	bic.w	r2, r2, #16
 8011bcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2201      	movs	r2, #1
 8011bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d003      	beq.n	8011bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d032      	beq.n	8011c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d022      	beq.n	8011c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2205      	movs	r2, #5
 8011c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f022 0201 	bic.w	r2, r2, #1
 8011c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	60bb      	str	r3, [r7, #8]
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d307      	bcc.n	8011c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	f003 0301 	and.w	r3, r3, #1
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1f2      	bne.n	8011c1a <HAL_DMA_IRQHandler+0x2ca>
 8011c34:	e000      	b.n	8011c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011c36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2201      	movs	r2, #1
 8011c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d005      	beq.n	8011c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	4798      	blx	r3
 8011c58:	e000      	b.n	8011c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8011c5a:	bf00      	nop
    }
  }
}
 8011c5c:	3718      	adds	r7, #24
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop

08011c64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c72:	b2db      	uxtb	r3, r3
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b085      	sub	sp, #20
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	683a      	ldr	r2, [r7, #0]
 8011cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	2b40      	cmp	r3, #64	; 0x40
 8011cc4:	d108      	bne.n	8011cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011cd6:	e007      	b.n	8011ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	60da      	str	r2, [r3, #12]
}
 8011ce8:	bf00      	nop
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	3b10      	subs	r3, #16
 8011d04:	4a14      	ldr	r2, [pc, #80]	; (8011d58 <DMA_CalcBaseAndBitshift+0x64>)
 8011d06:	fba2 2303 	umull	r2, r3, r2, r3
 8011d0a:	091b      	lsrs	r3, r3, #4
 8011d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011d0e:	4a13      	ldr	r2, [pc, #76]	; (8011d5c <DMA_CalcBaseAndBitshift+0x68>)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	4413      	add	r3, r2
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	461a      	mov	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2b03      	cmp	r3, #3
 8011d20:	d909      	bls.n	8011d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011d2a:	f023 0303 	bic.w	r3, r3, #3
 8011d2e:	1d1a      	adds	r2, r3, #4
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	659a      	str	r2, [r3, #88]	; 0x58
 8011d34:	e007      	b.n	8011d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011d3e:	f023 0303 	bic.w	r3, r3, #3
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3714      	adds	r7, #20
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	bf00      	nop
 8011d58:	aaaaaaab 	.word	0xaaaaaaab
 8011d5c:	080202e8 	.word	0x080202e8

08011d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	699b      	ldr	r3, [r3, #24]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d11f      	bne.n	8011dba <DMA_CheckFifoParam+0x5a>
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2b03      	cmp	r3, #3
 8011d7e:	d856      	bhi.n	8011e2e <DMA_CheckFifoParam+0xce>
 8011d80:	a201      	add	r2, pc, #4	; (adr r2, 8011d88 <DMA_CheckFifoParam+0x28>)
 8011d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d86:	bf00      	nop
 8011d88:	08011d99 	.word	0x08011d99
 8011d8c:	08011dab 	.word	0x08011dab
 8011d90:	08011d99 	.word	0x08011d99
 8011d94:	08011e2f 	.word	0x08011e2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d046      	beq.n	8011e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011da4:	2301      	movs	r3, #1
 8011da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011da8:	e043      	b.n	8011e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011db2:	d140      	bne.n	8011e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011db4:	2301      	movs	r3, #1
 8011db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011db8:	e03d      	b.n	8011e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	699b      	ldr	r3, [r3, #24]
 8011dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011dc2:	d121      	bne.n	8011e08 <DMA_CheckFifoParam+0xa8>
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2b03      	cmp	r3, #3
 8011dc8:	d837      	bhi.n	8011e3a <DMA_CheckFifoParam+0xda>
 8011dca:	a201      	add	r2, pc, #4	; (adr r2, 8011dd0 <DMA_CheckFifoParam+0x70>)
 8011dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd0:	08011de1 	.word	0x08011de1
 8011dd4:	08011de7 	.word	0x08011de7
 8011dd8:	08011de1 	.word	0x08011de1
 8011ddc:	08011df9 	.word	0x08011df9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011de0:	2301      	movs	r3, #1
 8011de2:	73fb      	strb	r3, [r7, #15]
      break;
 8011de4:	e030      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d025      	beq.n	8011e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011df2:	2301      	movs	r3, #1
 8011df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011df6:	e022      	b.n	8011e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011e00:	d11f      	bne.n	8011e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011e06:	e01c      	b.n	8011e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	2b02      	cmp	r3, #2
 8011e0c:	d903      	bls.n	8011e16 <DMA_CheckFifoParam+0xb6>
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	2b03      	cmp	r3, #3
 8011e12:	d003      	beq.n	8011e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011e14:	e018      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8011e16:	2301      	movs	r3, #1
 8011e18:	73fb      	strb	r3, [r7, #15]
      break;
 8011e1a:	e015      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00e      	beq.n	8011e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8011e2c:	e00b      	b.n	8011e46 <DMA_CheckFifoParam+0xe6>
      break;
 8011e2e:	bf00      	nop
 8011e30:	e00a      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;
 8011e32:	bf00      	nop
 8011e34:	e008      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;
 8011e36:	bf00      	nop
 8011e38:	e006      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;
 8011e3a:	bf00      	nop
 8011e3c:	e004      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;
 8011e3e:	bf00      	nop
 8011e40:	e002      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8011e42:	bf00      	nop
 8011e44:	e000      	b.n	8011e48 <DMA_CheckFifoParam+0xe8>
      break;
 8011e46:	bf00      	nop
    }
  } 
  
  return status; 
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop

08011e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b089      	sub	sp, #36	; 0x24
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011e62:	2300      	movs	r3, #0
 8011e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011e66:	2300      	movs	r3, #0
 8011e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011e6e:	2300      	movs	r3, #0
 8011e70:	61fb      	str	r3, [r7, #28]
 8011e72:	e16b      	b.n	801214c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011e74:	2201      	movs	r2, #1
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	fa02 f303 	lsl.w	r3, r2, r3
 8011e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	697a      	ldr	r2, [r7, #20]
 8011e84:	4013      	ands	r3, r2
 8011e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	f040 815a 	bne.w	8012146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d00b      	beq.n	8011eb2 <HAL_GPIO_Init+0x5a>
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	d007      	beq.n	8011eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011ea6:	2b11      	cmp	r3, #17
 8011ea8:	d003      	beq.n	8011eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	2b12      	cmp	r3, #18
 8011eb0:	d130      	bne.n	8011f14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	005b      	lsls	r3, r3, #1
 8011ebc:	2203      	movs	r2, #3
 8011ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8011ec2:	43db      	mvns	r3, r3
 8011ec4:	69ba      	ldr	r2, [r7, #24]
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	68da      	ldr	r2, [r3, #12]
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	005b      	lsls	r3, r3, #1
 8011ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ed6:	69ba      	ldr	r2, [r7, #24]
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	69ba      	ldr	r2, [r7, #24]
 8011ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011ee8:	2201      	movs	r2, #1
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	fa02 f303 	lsl.w	r3, r2, r3
 8011ef0:	43db      	mvns	r3, r3
 8011ef2:	69ba      	ldr	r2, [r7, #24]
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	091b      	lsrs	r3, r3, #4
 8011efe:	f003 0201 	and.w	r2, r3, #1
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	fa02 f303 	lsl.w	r3, r2, r3
 8011f08:	69ba      	ldr	r2, [r7, #24]
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	69ba      	ldr	r2, [r7, #24]
 8011f12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	005b      	lsls	r3, r3, #1
 8011f1e:	2203      	movs	r2, #3
 8011f20:	fa02 f303 	lsl.w	r3, r2, r3
 8011f24:	43db      	mvns	r3, r3
 8011f26:	69ba      	ldr	r2, [r7, #24]
 8011f28:	4013      	ands	r3, r2
 8011f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	689a      	ldr	r2, [r3, #8]
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	fa02 f303 	lsl.w	r3, r2, r3
 8011f38:	69ba      	ldr	r2, [r7, #24]
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	69ba      	ldr	r2, [r7, #24]
 8011f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	2b02      	cmp	r3, #2
 8011f4a:	d003      	beq.n	8011f54 <HAL_GPIO_Init+0xfc>
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	2b12      	cmp	r3, #18
 8011f52:	d123      	bne.n	8011f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	08da      	lsrs	r2, r3, #3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	3208      	adds	r2, #8
 8011f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	f003 0307 	and.w	r3, r3, #7
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	220f      	movs	r2, #15
 8011f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f70:	43db      	mvns	r3, r3
 8011f72:	69ba      	ldr	r2, [r7, #24]
 8011f74:	4013      	ands	r3, r2
 8011f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	691a      	ldr	r2, [r3, #16]
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	f003 0307 	and.w	r3, r3, #7
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	fa02 f303 	lsl.w	r3, r2, r3
 8011f88:	69ba      	ldr	r2, [r7, #24]
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	08da      	lsrs	r2, r3, #3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	3208      	adds	r2, #8
 8011f96:	69b9      	ldr	r1, [r7, #24]
 8011f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	2203      	movs	r2, #3
 8011fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8011fac:	43db      	mvns	r3, r3
 8011fae:	69ba      	ldr	r2, [r7, #24]
 8011fb0:	4013      	ands	r3, r2
 8011fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	f003 0203 	and.w	r2, r3, #3
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8011fc4:	69ba      	ldr	r2, [r7, #24]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	69ba      	ldr	r2, [r7, #24]
 8011fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 80b4 	beq.w	8012146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011fde:	2300      	movs	r3, #0
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	4b60      	ldr	r3, [pc, #384]	; (8012164 <HAL_GPIO_Init+0x30c>)
 8011fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fe6:	4a5f      	ldr	r2, [pc, #380]	; (8012164 <HAL_GPIO_Init+0x30c>)
 8011fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fec:	6453      	str	r3, [r2, #68]	; 0x44
 8011fee:	4b5d      	ldr	r3, [pc, #372]	; (8012164 <HAL_GPIO_Init+0x30c>)
 8011ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ff6:	60fb      	str	r3, [r7, #12]
 8011ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011ffa:	4a5b      	ldr	r2, [pc, #364]	; (8012168 <HAL_GPIO_Init+0x310>)
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	089b      	lsrs	r3, r3, #2
 8012000:	3302      	adds	r3, #2
 8012002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	f003 0303 	and.w	r3, r3, #3
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	220f      	movs	r2, #15
 8012012:	fa02 f303 	lsl.w	r3, r2, r3
 8012016:	43db      	mvns	r3, r3
 8012018:	69ba      	ldr	r2, [r7, #24]
 801201a:	4013      	ands	r3, r2
 801201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4a52      	ldr	r2, [pc, #328]	; (801216c <HAL_GPIO_Init+0x314>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d02b      	beq.n	801207e <HAL_GPIO_Init+0x226>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4a51      	ldr	r2, [pc, #324]	; (8012170 <HAL_GPIO_Init+0x318>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d025      	beq.n	801207a <HAL_GPIO_Init+0x222>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4a50      	ldr	r2, [pc, #320]	; (8012174 <HAL_GPIO_Init+0x31c>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d01f      	beq.n	8012076 <HAL_GPIO_Init+0x21e>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4a4f      	ldr	r2, [pc, #316]	; (8012178 <HAL_GPIO_Init+0x320>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d019      	beq.n	8012072 <HAL_GPIO_Init+0x21a>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4a4e      	ldr	r2, [pc, #312]	; (801217c <HAL_GPIO_Init+0x324>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d013      	beq.n	801206e <HAL_GPIO_Init+0x216>
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4a4d      	ldr	r2, [pc, #308]	; (8012180 <HAL_GPIO_Init+0x328>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d00d      	beq.n	801206a <HAL_GPIO_Init+0x212>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4a4c      	ldr	r2, [pc, #304]	; (8012184 <HAL_GPIO_Init+0x32c>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d007      	beq.n	8012066 <HAL_GPIO_Init+0x20e>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	4a4b      	ldr	r2, [pc, #300]	; (8012188 <HAL_GPIO_Init+0x330>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d101      	bne.n	8012062 <HAL_GPIO_Init+0x20a>
 801205e:	2307      	movs	r3, #7
 8012060:	e00e      	b.n	8012080 <HAL_GPIO_Init+0x228>
 8012062:	2308      	movs	r3, #8
 8012064:	e00c      	b.n	8012080 <HAL_GPIO_Init+0x228>
 8012066:	2306      	movs	r3, #6
 8012068:	e00a      	b.n	8012080 <HAL_GPIO_Init+0x228>
 801206a:	2305      	movs	r3, #5
 801206c:	e008      	b.n	8012080 <HAL_GPIO_Init+0x228>
 801206e:	2304      	movs	r3, #4
 8012070:	e006      	b.n	8012080 <HAL_GPIO_Init+0x228>
 8012072:	2303      	movs	r3, #3
 8012074:	e004      	b.n	8012080 <HAL_GPIO_Init+0x228>
 8012076:	2302      	movs	r3, #2
 8012078:	e002      	b.n	8012080 <HAL_GPIO_Init+0x228>
 801207a:	2301      	movs	r3, #1
 801207c:	e000      	b.n	8012080 <HAL_GPIO_Init+0x228>
 801207e:	2300      	movs	r3, #0
 8012080:	69fa      	ldr	r2, [r7, #28]
 8012082:	f002 0203 	and.w	r2, r2, #3
 8012086:	0092      	lsls	r2, r2, #2
 8012088:	4093      	lsls	r3, r2
 801208a:	69ba      	ldr	r2, [r7, #24]
 801208c:	4313      	orrs	r3, r2
 801208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012090:	4935      	ldr	r1, [pc, #212]	; (8012168 <HAL_GPIO_Init+0x310>)
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	089b      	lsrs	r3, r3, #2
 8012096:	3302      	adds	r3, #2
 8012098:	69ba      	ldr	r2, [r7, #24]
 801209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801209e:	4b3b      	ldr	r3, [pc, #236]	; (801218c <HAL_GPIO_Init+0x334>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	43db      	mvns	r3, r3
 80120a8:	69ba      	ldr	r2, [r7, #24]
 80120aa:	4013      	ands	r3, r2
 80120ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d003      	beq.n	80120c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80120ba:	69ba      	ldr	r2, [r7, #24]
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	4313      	orrs	r3, r2
 80120c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80120c2:	4a32      	ldr	r2, [pc, #200]	; (801218c <HAL_GPIO_Init+0x334>)
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80120c8:	4b30      	ldr	r3, [pc, #192]	; (801218c <HAL_GPIO_Init+0x334>)
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	43db      	mvns	r3, r3
 80120d2:	69ba      	ldr	r2, [r7, #24]
 80120d4:	4013      	ands	r3, r2
 80120d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d003      	beq.n	80120ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80120e4:	69ba      	ldr	r2, [r7, #24]
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80120ec:	4a27      	ldr	r2, [pc, #156]	; (801218c <HAL_GPIO_Init+0x334>)
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80120f2:	4b26      	ldr	r3, [pc, #152]	; (801218c <HAL_GPIO_Init+0x334>)
 80120f4:	689b      	ldr	r3, [r3, #8]
 80120f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	43db      	mvns	r3, r3
 80120fc:	69ba      	ldr	r2, [r7, #24]
 80120fe:	4013      	ands	r3, r2
 8012100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801210a:	2b00      	cmp	r3, #0
 801210c:	d003      	beq.n	8012116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801210e:	69ba      	ldr	r2, [r7, #24]
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	4313      	orrs	r3, r2
 8012114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012116:	4a1d      	ldr	r2, [pc, #116]	; (801218c <HAL_GPIO_Init+0x334>)
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801211c:	4b1b      	ldr	r3, [pc, #108]	; (801218c <HAL_GPIO_Init+0x334>)
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	43db      	mvns	r3, r3
 8012126:	69ba      	ldr	r2, [r7, #24]
 8012128:	4013      	ands	r3, r2
 801212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012134:	2b00      	cmp	r3, #0
 8012136:	d003      	beq.n	8012140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012138:	69ba      	ldr	r2, [r7, #24]
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	4313      	orrs	r3, r2
 801213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012140:	4a12      	ldr	r2, [pc, #72]	; (801218c <HAL_GPIO_Init+0x334>)
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	3301      	adds	r3, #1
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	2b0f      	cmp	r3, #15
 8012150:	f67f ae90 	bls.w	8011e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012154:	bf00      	nop
 8012156:	bf00      	nop
 8012158:	3724      	adds	r7, #36	; 0x24
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop
 8012164:	40023800 	.word	0x40023800
 8012168:	40013800 	.word	0x40013800
 801216c:	40020000 	.word	0x40020000
 8012170:	40020400 	.word	0x40020400
 8012174:	40020800 	.word	0x40020800
 8012178:	40020c00 	.word	0x40020c00
 801217c:	40021000 	.word	0x40021000
 8012180:	40021400 	.word	0x40021400
 8012184:	40021800 	.word	0x40021800
 8012188:	40021c00 	.word	0x40021c00
 801218c:	40013c00 	.word	0x40013c00

08012190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012190:	b480      	push	{r7}
 8012192:	b087      	sub	sp, #28
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801219a:	2300      	movs	r3, #0
 801219c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801219e:	2300      	movs	r3, #0
 80121a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80121a2:	2300      	movs	r3, #0
 80121a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80121a6:	2300      	movs	r3, #0
 80121a8:	617b      	str	r3, [r7, #20]
 80121aa:	e0cd      	b.n	8012348 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80121ac:	2201      	movs	r2, #1
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	fa02 f303 	lsl.w	r3, r2, r3
 80121b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80121b6:	683a      	ldr	r2, [r7, #0]
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	4013      	ands	r3, r2
 80121bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80121be:	68fa      	ldr	r2, [r7, #12]
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	f040 80bd 	bne.w	8012342 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80121c8:	4a65      	ldr	r2, [pc, #404]	; (8012360 <HAL_GPIO_DeInit+0x1d0>)
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	089b      	lsrs	r3, r3, #2
 80121ce:	3302      	adds	r3, #2
 80121d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	f003 0303 	and.w	r3, r3, #3
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	220f      	movs	r2, #15
 80121e0:	fa02 f303 	lsl.w	r3, r2, r3
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	4013      	ands	r3, r2
 80121e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	4a5d      	ldr	r2, [pc, #372]	; (8012364 <HAL_GPIO_DeInit+0x1d4>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d02b      	beq.n	801224a <HAL_GPIO_DeInit+0xba>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4a5c      	ldr	r2, [pc, #368]	; (8012368 <HAL_GPIO_DeInit+0x1d8>)
 80121f6:	4293      	cmp	r3, r2
 80121f8:	d025      	beq.n	8012246 <HAL_GPIO_DeInit+0xb6>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4a5b      	ldr	r2, [pc, #364]	; (801236c <HAL_GPIO_DeInit+0x1dc>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d01f      	beq.n	8012242 <HAL_GPIO_DeInit+0xb2>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	4a5a      	ldr	r2, [pc, #360]	; (8012370 <HAL_GPIO_DeInit+0x1e0>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d019      	beq.n	801223e <HAL_GPIO_DeInit+0xae>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	4a59      	ldr	r2, [pc, #356]	; (8012374 <HAL_GPIO_DeInit+0x1e4>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d013      	beq.n	801223a <HAL_GPIO_DeInit+0xaa>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4a58      	ldr	r2, [pc, #352]	; (8012378 <HAL_GPIO_DeInit+0x1e8>)
 8012216:	4293      	cmp	r3, r2
 8012218:	d00d      	beq.n	8012236 <HAL_GPIO_DeInit+0xa6>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	4a57      	ldr	r2, [pc, #348]	; (801237c <HAL_GPIO_DeInit+0x1ec>)
 801221e:	4293      	cmp	r3, r2
 8012220:	d007      	beq.n	8012232 <HAL_GPIO_DeInit+0xa2>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	4a56      	ldr	r2, [pc, #344]	; (8012380 <HAL_GPIO_DeInit+0x1f0>)
 8012226:	4293      	cmp	r3, r2
 8012228:	d101      	bne.n	801222e <HAL_GPIO_DeInit+0x9e>
 801222a:	2307      	movs	r3, #7
 801222c:	e00e      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 801222e:	2308      	movs	r3, #8
 8012230:	e00c      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 8012232:	2306      	movs	r3, #6
 8012234:	e00a      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 8012236:	2305      	movs	r3, #5
 8012238:	e008      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 801223a:	2304      	movs	r3, #4
 801223c:	e006      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 801223e:	2303      	movs	r3, #3
 8012240:	e004      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 8012242:	2302      	movs	r3, #2
 8012244:	e002      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 8012246:	2301      	movs	r3, #1
 8012248:	e000      	b.n	801224c <HAL_GPIO_DeInit+0xbc>
 801224a:	2300      	movs	r3, #0
 801224c:	697a      	ldr	r2, [r7, #20]
 801224e:	f002 0203 	and.w	r2, r2, #3
 8012252:	0092      	lsls	r2, r2, #2
 8012254:	4093      	lsls	r3, r2
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	429a      	cmp	r2, r3
 801225a:	d132      	bne.n	80122c2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801225c:	4b49      	ldr	r3, [pc, #292]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	43db      	mvns	r3, r3
 8012264:	4947      	ldr	r1, [pc, #284]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 8012266:	4013      	ands	r3, r2
 8012268:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801226a:	4b46      	ldr	r3, [pc, #280]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 801226c:	685a      	ldr	r2, [r3, #4]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	43db      	mvns	r3, r3
 8012272:	4944      	ldr	r1, [pc, #272]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 8012274:	4013      	ands	r3, r2
 8012276:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012278:	4b42      	ldr	r3, [pc, #264]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 801227a:	689a      	ldr	r2, [r3, #8]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	43db      	mvns	r3, r3
 8012280:	4940      	ldr	r1, [pc, #256]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 8012282:	4013      	ands	r3, r2
 8012284:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012286:	4b3f      	ldr	r3, [pc, #252]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 8012288:	68da      	ldr	r2, [r3, #12]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	43db      	mvns	r3, r3
 801228e:	493d      	ldr	r1, [pc, #244]	; (8012384 <HAL_GPIO_DeInit+0x1f4>)
 8012290:	4013      	ands	r3, r2
 8012292:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	f003 0303 	and.w	r3, r3, #3
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	220f      	movs	r2, #15
 801229e:	fa02 f303 	lsl.w	r3, r2, r3
 80122a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80122a4:	4a2e      	ldr	r2, [pc, #184]	; (8012360 <HAL_GPIO_DeInit+0x1d0>)
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	089b      	lsrs	r3, r3, #2
 80122aa:	3302      	adds	r3, #2
 80122ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	43da      	mvns	r2, r3
 80122b4:	482a      	ldr	r0, [pc, #168]	; (8012360 <HAL_GPIO_DeInit+0x1d0>)
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	089b      	lsrs	r3, r3, #2
 80122ba:	400a      	ands	r2, r1
 80122bc:	3302      	adds	r3, #2
 80122be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	2103      	movs	r1, #3
 80122cc:	fa01 f303 	lsl.w	r3, r1, r3
 80122d0:	43db      	mvns	r3, r3
 80122d2:	401a      	ands	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	08da      	lsrs	r2, r3, #3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	3208      	adds	r2, #8
 80122e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	f003 0307 	and.w	r3, r3, #7
 80122ea:	009b      	lsls	r3, r3, #2
 80122ec:	220f      	movs	r2, #15
 80122ee:	fa02 f303 	lsl.w	r3, r2, r3
 80122f2:	43db      	mvns	r3, r3
 80122f4:	697a      	ldr	r2, [r7, #20]
 80122f6:	08d2      	lsrs	r2, r2, #3
 80122f8:	4019      	ands	r1, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	3208      	adds	r2, #8
 80122fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	68da      	ldr	r2, [r3, #12]
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	2103      	movs	r1, #3
 801230c:	fa01 f303 	lsl.w	r3, r1, r3
 8012310:	43db      	mvns	r3, r3
 8012312:	401a      	ands	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	2101      	movs	r1, #1
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	fa01 f303 	lsl.w	r3, r1, r3
 8012324:	43db      	mvns	r3, r3
 8012326:	401a      	ands	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689a      	ldr	r2, [r3, #8]
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	005b      	lsls	r3, r3, #1
 8012334:	2103      	movs	r1, #3
 8012336:	fa01 f303 	lsl.w	r3, r1, r3
 801233a:	43db      	mvns	r3, r3
 801233c:	401a      	ands	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	3301      	adds	r3, #1
 8012346:	617b      	str	r3, [r7, #20]
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	2b0f      	cmp	r3, #15
 801234c:	f67f af2e 	bls.w	80121ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012350:	bf00      	nop
 8012352:	bf00      	nop
 8012354:	371c      	adds	r7, #28
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop
 8012360:	40013800 	.word	0x40013800
 8012364:	40020000 	.word	0x40020000
 8012368:	40020400 	.word	0x40020400
 801236c:	40020800 	.word	0x40020800
 8012370:	40020c00 	.word	0x40020c00
 8012374:	40021000 	.word	0x40021000
 8012378:	40021400 	.word	0x40021400
 801237c:	40021800 	.word	0x40021800
 8012380:	40021c00 	.word	0x40021c00
 8012384:	40013c00 	.word	0x40013c00

08012388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	460b      	mov	r3, r1
 8012392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	691a      	ldr	r2, [r3, #16]
 8012398:	887b      	ldrh	r3, [r7, #2]
 801239a:	4013      	ands	r3, r2
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80123a0:	2301      	movs	r3, #1
 80123a2:	73fb      	strb	r3, [r7, #15]
 80123a4:	e001      	b.n	80123aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80123aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3714      	adds	r7, #20
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	807b      	strh	r3, [r7, #2]
 80123c4:	4613      	mov	r3, r2
 80123c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80123c8:	787b      	ldrb	r3, [r7, #1]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d003      	beq.n	80123d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80123ce:	887a      	ldrh	r2, [r7, #2]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80123d4:	e003      	b.n	80123de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80123d6:	887b      	ldrh	r3, [r7, #2]
 80123d8:	041a      	lsls	r2, r3, #16
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	619a      	str	r2, [r3, #24]
}
 80123de:	bf00      	nop
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr
	...

080123ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b084      	sub	sp, #16
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e12b      	b.n	8012656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2200      	movs	r2, #0
 801240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ef fe3c 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2224      	movs	r2, #36	; 0x24
 801241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f022 0201 	bic.w	r2, r2, #1
 801242e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801243e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801244e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012450:	f002 fc64 	bl	8014d1c <HAL_RCC_GetPCLK1Freq>
 8012454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	4a81      	ldr	r2, [pc, #516]	; (8012660 <HAL_I2C_Init+0x274>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d807      	bhi.n	8012470 <HAL_I2C_Init+0x84>
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	4a80      	ldr	r2, [pc, #512]	; (8012664 <HAL_I2C_Init+0x278>)
 8012464:	4293      	cmp	r3, r2
 8012466:	bf94      	ite	ls
 8012468:	2301      	movls	r3, #1
 801246a:	2300      	movhi	r3, #0
 801246c:	b2db      	uxtb	r3, r3
 801246e:	e006      	b.n	801247e <HAL_I2C_Init+0x92>
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4a7d      	ldr	r2, [pc, #500]	; (8012668 <HAL_I2C_Init+0x27c>)
 8012474:	4293      	cmp	r3, r2
 8012476:	bf94      	ite	ls
 8012478:	2301      	movls	r3, #1
 801247a:	2300      	movhi	r3, #0
 801247c:	b2db      	uxtb	r3, r3
 801247e:	2b00      	cmp	r3, #0
 8012480:	d001      	beq.n	8012486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012482:	2301      	movs	r3, #1
 8012484:	e0e7      	b.n	8012656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	4a78      	ldr	r2, [pc, #480]	; (801266c <HAL_I2C_Init+0x280>)
 801248a:	fba2 2303 	umull	r2, r3, r2, r3
 801248e:	0c9b      	lsrs	r3, r3, #18
 8012490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68ba      	ldr	r2, [r7, #8]
 80124a2:	430a      	orrs	r2, r1
 80124a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	6a1b      	ldr	r3, [r3, #32]
 80124ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	4a6a      	ldr	r2, [pc, #424]	; (8012660 <HAL_I2C_Init+0x274>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d802      	bhi.n	80124c0 <HAL_I2C_Init+0xd4>
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	3301      	adds	r3, #1
 80124be:	e009      	b.n	80124d4 <HAL_I2C_Init+0xe8>
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80124c6:	fb02 f303 	mul.w	r3, r2, r3
 80124ca:	4a69      	ldr	r2, [pc, #420]	; (8012670 <HAL_I2C_Init+0x284>)
 80124cc:	fba2 2303 	umull	r2, r3, r2, r3
 80124d0:	099b      	lsrs	r3, r3, #6
 80124d2:	3301      	adds	r3, #1
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	6812      	ldr	r2, [r2, #0]
 80124d8:	430b      	orrs	r3, r1
 80124da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	69db      	ldr	r3, [r3, #28]
 80124e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80124e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	495c      	ldr	r1, [pc, #368]	; (8012660 <HAL_I2C_Init+0x274>)
 80124f0:	428b      	cmp	r3, r1
 80124f2:	d819      	bhi.n	8012528 <HAL_I2C_Init+0x13c>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	1e59      	subs	r1, r3, #1
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8012502:	1c59      	adds	r1, r3, #1
 8012504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012508:	400b      	ands	r3, r1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00a      	beq.n	8012524 <HAL_I2C_Init+0x138>
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	1e59      	subs	r1, r3, #1
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	fbb1 f3f3 	udiv	r3, r1, r3
 801251c:	3301      	adds	r3, #1
 801251e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012522:	e051      	b.n	80125c8 <HAL_I2C_Init+0x1dc>
 8012524:	2304      	movs	r3, #4
 8012526:	e04f      	b.n	80125c8 <HAL_I2C_Init+0x1dc>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	689b      	ldr	r3, [r3, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d111      	bne.n	8012554 <HAL_I2C_Init+0x168>
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	1e58      	subs	r0, r3, #1
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6859      	ldr	r1, [r3, #4]
 8012538:	460b      	mov	r3, r1
 801253a:	005b      	lsls	r3, r3, #1
 801253c:	440b      	add	r3, r1
 801253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012542:	3301      	adds	r3, #1
 8012544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012548:	2b00      	cmp	r3, #0
 801254a:	bf0c      	ite	eq
 801254c:	2301      	moveq	r3, #1
 801254e:	2300      	movne	r3, #0
 8012550:	b2db      	uxtb	r3, r3
 8012552:	e012      	b.n	801257a <HAL_I2C_Init+0x18e>
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	1e58      	subs	r0, r3, #1
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6859      	ldr	r1, [r3, #4]
 801255c:	460b      	mov	r3, r1
 801255e:	009b      	lsls	r3, r3, #2
 8012560:	440b      	add	r3, r1
 8012562:	0099      	lsls	r1, r3, #2
 8012564:	440b      	add	r3, r1
 8012566:	fbb0 f3f3 	udiv	r3, r0, r3
 801256a:	3301      	adds	r3, #1
 801256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012570:	2b00      	cmp	r3, #0
 8012572:	bf0c      	ite	eq
 8012574:	2301      	moveq	r3, #1
 8012576:	2300      	movne	r3, #0
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b00      	cmp	r3, #0
 801257c:	d001      	beq.n	8012582 <HAL_I2C_Init+0x196>
 801257e:	2301      	movs	r3, #1
 8012580:	e022      	b.n	80125c8 <HAL_I2C_Init+0x1dc>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d10e      	bne.n	80125a8 <HAL_I2C_Init+0x1bc>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	1e58      	subs	r0, r3, #1
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6859      	ldr	r1, [r3, #4]
 8012592:	460b      	mov	r3, r1
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	440b      	add	r3, r1
 8012598:	fbb0 f3f3 	udiv	r3, r0, r3
 801259c:	3301      	adds	r3, #1
 801259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125a6:	e00f      	b.n	80125c8 <HAL_I2C_Init+0x1dc>
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	1e58      	subs	r0, r3, #1
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6859      	ldr	r1, [r3, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	440b      	add	r3, r1
 80125b6:	0099      	lsls	r1, r3, #2
 80125b8:	440b      	add	r3, r1
 80125ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80125be:	3301      	adds	r3, #1
 80125c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80125c8:	6879      	ldr	r1, [r7, #4]
 80125ca:	6809      	ldr	r1, [r1, #0]
 80125cc:	4313      	orrs	r3, r2
 80125ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	69da      	ldr	r2, [r3, #28]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6a1b      	ldr	r3, [r3, #32]
 80125e2:	431a      	orrs	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	430a      	orrs	r2, r1
 80125ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80125f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	6911      	ldr	r1, [r2, #16]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	68d2      	ldr	r2, [r2, #12]
 8012602:	4311      	orrs	r1, r2
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	6812      	ldr	r2, [r2, #0]
 8012608:	430b      	orrs	r3, r1
 801260a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	695a      	ldr	r2, [r3, #20]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	431a      	orrs	r2, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	430a      	orrs	r2, r1
 8012626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f042 0201 	orr.w	r2, r2, #1
 8012636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2200      	movs	r2, #0
 801263c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2220      	movs	r2, #32
 8012642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2200      	movs	r2, #0
 801264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	000186a0 	.word	0x000186a0
 8012664:	001e847f 	.word	0x001e847f
 8012668:	003d08ff 	.word	0x003d08ff
 801266c:	431bde83 	.word	0x431bde83
 8012670:	10624dd3 	.word	0x10624dd3

08012674 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d101      	bne.n	8012686 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	e021      	b.n	80126ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2224      	movs	r2, #36	; 0x24
 801268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f022 0201 	bic.w	r2, r2, #1
 801269c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ef fdcc 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2200      	movs	r2, #0
 80126ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2200      	movs	r2, #0
 80126b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2200      	movs	r2, #0
 80126bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
	...

080126d4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	607a      	str	r2, [r7, #4]
 80126de:	461a      	mov	r2, r3
 80126e0:	460b      	mov	r3, r1
 80126e2:	817b      	strh	r3, [r7, #10]
 80126e4:	4613      	mov	r3, r2
 80126e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80126e8:	2300      	movs	r3, #0
 80126ea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	2b20      	cmp	r3, #32
 80126f6:	f040 80f4 	bne.w	80128e2 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80126fa:	4b7c      	ldr	r3, [pc, #496]	; (80128ec <HAL_I2C_Master_Receive_DMA+0x218>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	08db      	lsrs	r3, r3, #3
 8012700:	4a7b      	ldr	r2, [pc, #492]	; (80128f0 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8012702:	fba2 2303 	umull	r2, r3, r2, r3
 8012706:	0a1a      	lsrs	r2, r3, #8
 8012708:	4613      	mov	r3, r2
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	4413      	add	r3, r2
 801270e:	009a      	lsls	r2, r3, #2
 8012710:	4413      	add	r3, r2
 8012712:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	3b01      	subs	r3, #1
 8012718:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d116      	bne.n	801274e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2200      	movs	r2, #0
 8012724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2220      	movs	r2, #32
 801272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801273a:	f043 0220 	orr.w	r2, r3, #32
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2200      	movs	r2, #0
 8012746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801274a:	2301      	movs	r3, #1
 801274c:	e0ca      	b.n	80128e4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	699b      	ldr	r3, [r3, #24]
 8012754:	f003 0302 	and.w	r3, r3, #2
 8012758:	2b02      	cmp	r3, #2
 801275a:	d0db      	beq.n	8012714 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012762:	2b01      	cmp	r3, #1
 8012764:	d101      	bne.n	801276a <HAL_I2C_Master_Receive_DMA+0x96>
 8012766:	2302      	movs	r3, #2
 8012768:	e0bc      	b.n	80128e4 <HAL_I2C_Master_Receive_DMA+0x210>
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2201      	movs	r2, #1
 801276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	2b01      	cmp	r3, #1
 801277e:	d007      	beq.n	8012790 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f042 0201 	orr.w	r2, r2, #1
 801278e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801279e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	2222      	movs	r2, #34	; 0x22
 80127a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2210      	movs	r2, #16
 80127ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2200      	movs	r2, #0
 80127b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	893a      	ldrh	r2, [r7, #8]
 80127c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	4a49      	ldr	r2, [pc, #292]	; (80128f4 <HAL_I2C_Master_Receive_DMA+0x220>)
 80127d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80127d2:	897a      	ldrh	r2, [r7, #10]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d062      	beq.n	80128a6 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e4:	4a44      	ldr	r2, [pc, #272]	; (80128f8 <HAL_I2C_Master_Receive_DMA+0x224>)
 80127e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ec:	4a43      	ldr	r2, [pc, #268]	; (80128fc <HAL_I2C_Master_Receive_DMA+0x228>)
 80127ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127f4:	2200      	movs	r2, #0
 80127f6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127fc:	2200      	movs	r2, #0
 80127fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012804:	2200      	movs	r2, #0
 8012806:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801280c:	2200      	movs	r2, #0
 801280e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3310      	adds	r3, #16
 801281a:	4619      	mov	r1, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012820:	461a      	mov	r2, r3
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012826:	f7ff f819 	bl	801185c <HAL_DMA_Start_IT>
 801282a:	4603      	mov	r3, r0
 801282c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 801282e:	7dfb      	ldrb	r3, [r7, #23]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d124      	bne.n	801287e <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012842:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012852:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2200      	movs	r2, #0
 8012858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	685a      	ldr	r2, [r3, #4]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801286a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801287a:	605a      	str	r2, [r3, #4]
 801287c:	e02f      	b.n	80128de <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2220      	movs	r2, #32
 8012882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012892:	f043 0210 	orr.w	r2, r3, #16
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2200      	movs	r2, #0
 801289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80128a2:	2301      	movs	r3, #1
 80128a4:	e01e      	b.n	80128e4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80128b4:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80128c4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2200      	movs	r2, #0
 80128ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	685a      	ldr	r2, [r3, #4]
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80128dc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	e000      	b.n	80128e4 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80128e2:	2302      	movs	r3, #2
  }
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3718      	adds	r7, #24
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20000054 	.word	0x20000054
 80128f0:	14f8b589 	.word	0x14f8b589
 80128f4:	ffff0000 	.word	0xffff0000
 80128f8:	0801406d 	.word	0x0801406d
 80128fc:	08014217 	.word	0x08014217

08012900 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b088      	sub	sp, #32
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8012908:	2300      	movs	r3, #0
 801290a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012918:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012920:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012928:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b10      	cmp	r3, #16
 801292e:	d003      	beq.n	8012938 <HAL_I2C_EV_IRQHandler+0x38>
 8012930:	7bfb      	ldrb	r3, [r7, #15]
 8012932:	2b40      	cmp	r3, #64	; 0x40
 8012934:	f040 80bd 	bne.w	8012ab2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	699b      	ldr	r3, [r3, #24]
 801293e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	695b      	ldr	r3, [r3, #20]
 8012946:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d10d      	bne.n	801296e <HAL_I2C_EV_IRQHandler+0x6e>
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012958:	d003      	beq.n	8012962 <HAL_I2C_EV_IRQHandler+0x62>
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012960:	d101      	bne.n	8012966 <HAL_I2C_EV_IRQHandler+0x66>
 8012962:	2301      	movs	r3, #1
 8012964:	e000      	b.n	8012968 <HAL_I2C_EV_IRQHandler+0x68>
 8012966:	2300      	movs	r3, #0
 8012968:	2b01      	cmp	r3, #1
 801296a:	f000 812e 	beq.w	8012bca <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	f003 0301 	and.w	r3, r3, #1
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00c      	beq.n	8012992 <HAL_I2C_EV_IRQHandler+0x92>
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	0a5b      	lsrs	r3, r3, #9
 801297c:	f003 0301 	and.w	r3, r3, #1
 8012980:	2b00      	cmp	r3, #0
 8012982:	d006      	beq.n	8012992 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f001 fd5d 	bl	8014444 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 fd58 	bl	8013440 <I2C_Master_SB>
 8012990:	e08e      	b.n	8012ab0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012992:	69fb      	ldr	r3, [r7, #28]
 8012994:	08db      	lsrs	r3, r3, #3
 8012996:	f003 0301 	and.w	r3, r3, #1
 801299a:	2b00      	cmp	r3, #0
 801299c:	d009      	beq.n	80129b2 <HAL_I2C_EV_IRQHandler+0xb2>
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	0a5b      	lsrs	r3, r3, #9
 80129a2:	f003 0301 	and.w	r3, r3, #1
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d003      	beq.n	80129b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f000 fdce 	bl	801354c <I2C_Master_ADD10>
 80129b0:	e07e      	b.n	8012ab0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	085b      	lsrs	r3, r3, #1
 80129b6:	f003 0301 	and.w	r3, r3, #1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d009      	beq.n	80129d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	0a5b      	lsrs	r3, r3, #9
 80129c2:	f003 0301 	and.w	r3, r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d003      	beq.n	80129d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f000 fde8 	bl	80135a0 <I2C_Master_ADDR>
 80129d0:	e06e      	b.n	8012ab0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80129d2:	69bb      	ldr	r3, [r7, #24]
 80129d4:	089b      	lsrs	r3, r3, #2
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d037      	beq.n	8012a4e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129ec:	f000 80ef 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	09db      	lsrs	r3, r3, #7
 80129f4:	f003 0301 	and.w	r3, r3, #1
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d00f      	beq.n	8012a1c <HAL_I2C_EV_IRQHandler+0x11c>
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	0a9b      	lsrs	r3, r3, #10
 8012a00:	f003 0301 	and.w	r3, r3, #1
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d009      	beq.n	8012a1c <HAL_I2C_EV_IRQHandler+0x11c>
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	089b      	lsrs	r3, r3, #2
 8012a0c:	f003 0301 	and.w	r3, r3, #1
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d103      	bne.n	8012a1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 f9e5 	bl	8012de4 <I2C_MasterTransmit_TXE>
 8012a1a:	e049      	b.n	8012ab0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	089b      	lsrs	r3, r3, #2
 8012a20:	f003 0301 	and.w	r3, r3, #1
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	f000 80d2 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	0a5b      	lsrs	r3, r3, #9
 8012a2e:	f003 0301 	and.w	r3, r3, #1
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f000 80cb 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
 8012a3a:	2b10      	cmp	r3, #16
 8012a3c:	d103      	bne.n	8012a46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 fa6c 	bl	8012f1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a44:	e0c3      	b.n	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 fad0 	bl	8012fec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a4c:	e0bf      	b.n	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a5c:	f000 80b7 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	099b      	lsrs	r3, r3, #6
 8012a64:	f003 0301 	and.w	r3, r3, #1
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00f      	beq.n	8012a8c <HAL_I2C_EV_IRQHandler+0x18c>
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	0a9b      	lsrs	r3, r3, #10
 8012a70:	f003 0301 	and.w	r3, r3, #1
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d009      	beq.n	8012a8c <HAL_I2C_EV_IRQHandler+0x18c>
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	089b      	lsrs	r3, r3, #2
 8012a7c:	f003 0301 	and.w	r3, r3, #1
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d103      	bne.n	8012a8c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 fb40 	bl	801310a <I2C_MasterReceive_RXNE>
 8012a8a:	e011      	b.n	8012ab0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	089b      	lsrs	r3, r3, #2
 8012a90:	f003 0301 	and.w	r3, r3, #1
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 809a 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	0a5b      	lsrs	r3, r3, #9
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f000 8093 	beq.w	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 fbdf 	bl	801326c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012aae:	e08e      	b.n	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
 8012ab0:	e08d      	b.n	8012bce <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d004      	beq.n	8012ac4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	695b      	ldr	r3, [r3, #20]
 8012ac0:	61fb      	str	r3, [r7, #28]
 8012ac2:	e007      	b.n	8012ad4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	695b      	ldr	r3, [r3, #20]
 8012ad2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	085b      	lsrs	r3, r3, #1
 8012ad8:	f003 0301 	and.w	r3, r3, #1
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d012      	beq.n	8012b06 <HAL_I2C_EV_IRQHandler+0x206>
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	0a5b      	lsrs	r3, r3, #9
 8012ae4:	f003 0301 	and.w	r3, r3, #1
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00c      	beq.n	8012b06 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	699b      	ldr	r3, [r3, #24]
 8012afa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8012afc:	69b9      	ldr	r1, [r7, #24]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 ff9d 	bl	8013a3e <I2C_Slave_ADDR>
 8012b04:	e066      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	091b      	lsrs	r3, r3, #4
 8012b0a:	f003 0301 	and.w	r3, r3, #1
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d009      	beq.n	8012b26 <HAL_I2C_EV_IRQHandler+0x226>
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	0a5b      	lsrs	r3, r3, #9
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d003      	beq.n	8012b26 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 ffd2 	bl	8013ac8 <I2C_Slave_STOPF>
 8012b24:	e056      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012b26:	7bbb      	ldrb	r3, [r7, #14]
 8012b28:	2b21      	cmp	r3, #33	; 0x21
 8012b2a:	d002      	beq.n	8012b32 <HAL_I2C_EV_IRQHandler+0x232>
 8012b2c:	7bbb      	ldrb	r3, [r7, #14]
 8012b2e:	2b29      	cmp	r3, #41	; 0x29
 8012b30:	d125      	bne.n	8012b7e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	09db      	lsrs	r3, r3, #7
 8012b36:	f003 0301 	and.w	r3, r3, #1
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00f      	beq.n	8012b5e <HAL_I2C_EV_IRQHandler+0x25e>
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	0a9b      	lsrs	r3, r3, #10
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d009      	beq.n	8012b5e <HAL_I2C_EV_IRQHandler+0x25e>
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	089b      	lsrs	r3, r3, #2
 8012b4e:	f003 0301 	and.w	r3, r3, #1
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d103      	bne.n	8012b5e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 feb3 	bl	80138c2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b5c:	e039      	b.n	8012bd2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	089b      	lsrs	r3, r3, #2
 8012b62:	f003 0301 	and.w	r3, r3, #1
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d033      	beq.n	8012bd2 <HAL_I2C_EV_IRQHandler+0x2d2>
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	0a5b      	lsrs	r3, r3, #9
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d02d      	beq.n	8012bd2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 fee0 	bl	801393c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b7c:	e029      	b.n	8012bd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	099b      	lsrs	r3, r3, #6
 8012b82:	f003 0301 	and.w	r3, r3, #1
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00f      	beq.n	8012baa <HAL_I2C_EV_IRQHandler+0x2aa>
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	0a9b      	lsrs	r3, r3, #10
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d009      	beq.n	8012baa <HAL_I2C_EV_IRQHandler+0x2aa>
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	089b      	lsrs	r3, r3, #2
 8012b9a:	f003 0301 	and.w	r3, r3, #1
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d103      	bne.n	8012baa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 feeb 	bl	801397e <I2C_SlaveReceive_RXNE>
 8012ba8:	e014      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	089b      	lsrs	r3, r3, #2
 8012bae:	f003 0301 	and.w	r3, r3, #1
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00e      	beq.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	0a5b      	lsrs	r3, r3, #9
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d008      	beq.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 ff19 	bl	80139fa <I2C_SlaveReceive_BTF>
 8012bc8:	e004      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8012bca:	bf00      	nop
 8012bcc:	e002      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012bce:	bf00      	nop
 8012bd0:	e000      	b.n	8012bd4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012bd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b08a      	sub	sp, #40	; 0x28
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	695b      	ldr	r3, [r3, #20]
 8012be8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	0a1b      	lsrs	r3, r3, #8
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d00e      	beq.n	8012c28 <HAL_I2C_ER_IRQHandler+0x4e>
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	0a1b      	lsrs	r3, r3, #8
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d008      	beq.n	8012c28 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8012c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c18:	f043 0301 	orr.w	r3, r3, #1
 8012c1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012c26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	0a5b      	lsrs	r3, r3, #9
 8012c2c:	f003 0301 	and.w	r3, r3, #1
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00e      	beq.n	8012c52 <HAL_I2C_ER_IRQHandler+0x78>
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	0a1b      	lsrs	r3, r3, #8
 8012c38:	f003 0301 	and.w	r3, r3, #1
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d008      	beq.n	8012c52 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8012c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c42:	f043 0302 	orr.w	r3, r3, #2
 8012c46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8012c50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012c52:	6a3b      	ldr	r3, [r7, #32]
 8012c54:	0a9b      	lsrs	r3, r3, #10
 8012c56:	f003 0301 	and.w	r3, r3, #1
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d03f      	beq.n	8012cde <HAL_I2C_ER_IRQHandler+0x104>
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	0a1b      	lsrs	r3, r3, #8
 8012c62:	f003 0301 	and.w	r3, r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d039      	beq.n	8012cde <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8012c6a:	7efb      	ldrb	r3, [r7, #27]
 8012c6c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c7c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c82:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8012c84:	7ebb      	ldrb	r3, [r7, #26]
 8012c86:	2b20      	cmp	r3, #32
 8012c88:	d112      	bne.n	8012cb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d10f      	bne.n	8012cb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8012c90:	7cfb      	ldrb	r3, [r7, #19]
 8012c92:	2b21      	cmp	r3, #33	; 0x21
 8012c94:	d008      	beq.n	8012ca8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8012c96:	7cfb      	ldrb	r3, [r7, #19]
 8012c98:	2b29      	cmp	r3, #41	; 0x29
 8012c9a:	d005      	beq.n	8012ca8 <HAL_I2C_ER_IRQHandler+0xce>
 8012c9c:	7cfb      	ldrb	r3, [r7, #19]
 8012c9e:	2b28      	cmp	r3, #40	; 0x28
 8012ca0:	d106      	bne.n	8012cb0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b21      	cmp	r3, #33	; 0x21
 8012ca6:	d103      	bne.n	8012cb0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f001 f83d 	bl	8013d28 <I2C_Slave_AF>
 8012cae:	e016      	b.n	8012cde <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012cb8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	f043 0304 	orr.w	r3, r3, #4
 8012cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8012cc2:	7efb      	ldrb	r3, [r7, #27]
 8012cc4:	2b10      	cmp	r3, #16
 8012cc6:	d002      	beq.n	8012cce <HAL_I2C_ER_IRQHandler+0xf4>
 8012cc8:	7efb      	ldrb	r3, [r7, #27]
 8012cca:	2b40      	cmp	r3, #64	; 0x40
 8012ccc:	d107      	bne.n	8012cde <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012cdc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012cde:	6a3b      	ldr	r3, [r7, #32]
 8012ce0:	0adb      	lsrs	r3, r3, #11
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00e      	beq.n	8012d08 <HAL_I2C_ER_IRQHandler+0x12e>
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	0a1b      	lsrs	r3, r3, #8
 8012cee:	f003 0301 	and.w	r3, r3, #1
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d008      	beq.n	8012d08 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	f043 0308 	orr.w	r3, r3, #8
 8012cfc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8012d06:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d008      	beq.n	8012d20 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d14:	431a      	orrs	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f001 f874 	bl	8013e08 <I2C_ITError>
  }
}
 8012d20:	bf00      	nop
 8012d22:	3728      	adds	r7, #40	; 0x28
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8012d30:	bf00      	nop
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr

08012d3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8012d44:	bf00      	nop
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8012d58:	bf00      	nop
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	70fb      	strb	r3, [r7, #3]
 8012d70:	4613      	mov	r3, r2
 8012d72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8012d74:	bf00      	nop
 8012d76:	370c      	adds	r7, #12
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr

08012d80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8012d88:	bf00      	nop
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr

08012d94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012da8:	b480      	push	{r7}
 8012daa:	b083      	sub	sp, #12
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8012db0:	bf00      	nop
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr

08012dbc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8012dc4:	bf00      	nop
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8012dd8:	bf00      	nop
 8012dda:	370c      	adds	r7, #12
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012df2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012dfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d150      	bne.n	8012eac <I2C_MasterTransmit_TXE+0xc8>
 8012e0a:	7bfb      	ldrb	r3, [r7, #15]
 8012e0c:	2b21      	cmp	r3, #33	; 0x21
 8012e0e:	d14d      	bne.n	8012eac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2b08      	cmp	r3, #8
 8012e14:	d01d      	beq.n	8012e52 <I2C_MasterTransmit_TXE+0x6e>
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	2b20      	cmp	r3, #32
 8012e1a:	d01a      	beq.n	8012e52 <I2C_MasterTransmit_TXE+0x6e>
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012e22:	d016      	beq.n	8012e52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	685a      	ldr	r2, [r3, #4]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012e32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2211      	movs	r2, #17
 8012e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2220      	movs	r2, #32
 8012e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f7ff ff6c 	bl	8012d28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e50:	e060      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	685a      	ldr	r2, [r3, #4]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012e60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2220      	movs	r2, #32
 8012e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	2b40      	cmp	r3, #64	; 0x40
 8012e8a:	d107      	bne.n	8012e9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff ff7d 	bl	8012d94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012e9a:	e03b      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7ff ff3f 	bl	8012d28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012eaa:	e033      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8012eac:	7bfb      	ldrb	r3, [r7, #15]
 8012eae:	2b21      	cmp	r3, #33	; 0x21
 8012eb0:	d005      	beq.n	8012ebe <I2C_MasterTransmit_TXE+0xda>
 8012eb2:	7bbb      	ldrb	r3, [r7, #14]
 8012eb4:	2b40      	cmp	r3, #64	; 0x40
 8012eb6:	d12d      	bne.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8012eb8:	7bfb      	ldrb	r3, [r7, #15]
 8012eba:	2b22      	cmp	r3, #34	; 0x22
 8012ebc:	d12a      	bne.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d108      	bne.n	8012eda <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	685a      	ldr	r2, [r3, #4]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ed6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8012ed8:	e01c      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b40      	cmp	r3, #64	; 0x40
 8012ee4:	d103      	bne.n	8012eee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f000 f880 	bl	8012fec <I2C_MemoryTransmit_TXE_BTF>
}
 8012eec:	e012      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ef2:	781a      	ldrb	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efe:	1c5a      	adds	r2, r3, #1
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012f12:	e7ff      	b.n	8012f14 <I2C_MasterTransmit_TXE+0x130>
 8012f14:	bf00      	nop
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	2b21      	cmp	r3, #33	; 0x21
 8012f34:	d156      	bne.n	8012fe4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d012      	beq.n	8012f66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f50:	1c5a      	adds	r2, r3, #1
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8012f64:	e03e      	b.n	8012fe4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b08      	cmp	r3, #8
 8012f6a:	d01d      	beq.n	8012fa8 <I2C_MasterTransmit_BTF+0x8c>
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2b20      	cmp	r3, #32
 8012f70:	d01a      	beq.n	8012fa8 <I2C_MasterTransmit_BTF+0x8c>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012f78:	d016      	beq.n	8012fa8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	685a      	ldr	r2, [r3, #4]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012f88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2211      	movs	r2, #17
 8012f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2220      	movs	r2, #32
 8012f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7ff fec1 	bl	8012d28 <HAL_I2C_MasterTxCpltCallback>
}
 8012fa6:	e01d      	b.n	8012fe4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	685a      	ldr	r2, [r3, #4]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012fb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012fc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2220      	movs	r2, #32
 8012fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7ff fea2 	bl	8012d28 <HAL_I2C_MasterTxCpltCallback>
}
 8012fe4:	bf00      	nop
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b084      	sub	sp, #16
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013000:	2b00      	cmp	r3, #0
 8013002:	d11d      	bne.n	8013040 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013008:	2b01      	cmp	r3, #1
 801300a:	d10b      	bne.n	8013024 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013010:	b2da      	uxtb	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801301c:	1c9a      	adds	r2, r3, #2
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8013022:	e06e      	b.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013028:	b29b      	uxth	r3, r3
 801302a:	121b      	asrs	r3, r3, #8
 801302c:	b2da      	uxtb	r2, r3
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013038:	1c5a      	adds	r2, r3, #1
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801303e:	e060      	b.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013044:	2b01      	cmp	r3, #1
 8013046:	d10b      	bne.n	8013060 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801304c:	b2da      	uxtb	r2, r3
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801305e:	e050      	b.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013064:	2b02      	cmp	r3, #2
 8013066:	d14c      	bne.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8013068:	7bfb      	ldrb	r3, [r7, #15]
 801306a:	2b22      	cmp	r3, #34	; 0x22
 801306c:	d108      	bne.n	8013080 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801307c:	601a      	str	r2, [r3, #0]
}
 801307e:	e040      	b.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013084:	b29b      	uxth	r3, r3
 8013086:	2b00      	cmp	r3, #0
 8013088:	d015      	beq.n	80130b6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 801308a:	7bfb      	ldrb	r3, [r7, #15]
 801308c:	2b21      	cmp	r3, #33	; 0x21
 801308e:	d112      	bne.n	80130b6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013094:	781a      	ldrb	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	3b01      	subs	r3, #1
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80130b4:	e025      	b.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d120      	bne.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80130c0:	7bfb      	ldrb	r3, [r7, #15]
 80130c2:	2b21      	cmp	r3, #33	; 0x21
 80130c4:	d11d      	bne.n	8013102 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	685a      	ldr	r2, [r3, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80130d4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	681a      	ldr	r2, [r3, #0]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130e4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2200      	movs	r2, #0
 80130ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2220      	movs	r2, #32
 80130f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7ff fe49 	bl	8012d94 <HAL_I2C_MemTxCpltCallback>
}
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}

0801310a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801310a:	b580      	push	{r7, lr}
 801310c:	b084      	sub	sp, #16
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b22      	cmp	r3, #34	; 0x22
 801311c:	f040 80a2 	bne.w	8013264 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013124:	b29b      	uxth	r3, r3
 8013126:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2b03      	cmp	r3, #3
 801312c:	d921      	bls.n	8013172 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	691a      	ldr	r2, [r3, #16]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013138:	b2d2      	uxtb	r2, r2
 801313a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013140:	1c5a      	adds	r2, r3, #1
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801314a:	b29b      	uxth	r3, r3
 801314c:	3b01      	subs	r3, #1
 801314e:	b29a      	uxth	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013158:	b29b      	uxth	r3, r3
 801315a:	2b03      	cmp	r3, #3
 801315c:	f040 8082 	bne.w	8013264 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	685a      	ldr	r2, [r3, #4]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801316e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8013170:	e078      	b.n	8013264 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013176:	2b02      	cmp	r3, #2
 8013178:	d074      	beq.n	8013264 <I2C_MasterReceive_RXNE+0x15a>
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d002      	beq.n	8013186 <I2C_MasterReceive_RXNE+0x7c>
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d16e      	bne.n	8013264 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f001 f92a 	bl	80143e0 <I2C_WaitOnSTOPRequestThroughIT>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d142      	bne.n	8013218 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80131a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	685a      	ldr	r2, [r3, #4]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80131b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	691a      	ldr	r2, [r3, #16]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131bc:	b2d2      	uxtb	r2, r2
 80131be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c4:	1c5a      	adds	r2, r3, #1
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	3b01      	subs	r3, #1
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2220      	movs	r2, #32
 80131dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b40      	cmp	r3, #64	; 0x40
 80131ea:	d10a      	bne.n	8013202 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2200      	movs	r2, #0
 80131f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2200      	movs	r2, #0
 80131f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7ff fdd4 	bl	8012da8 <HAL_I2C_MemRxCpltCallback>
}
 8013200:	e030      	b.n	8013264 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2212      	movs	r2, #18
 801320e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7f9 fd9b 	bl	800cd4c <HAL_I2C_MasterRxCpltCallback>
}
 8013216:	e025      	b.n	8013264 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013226:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	691a      	ldr	r2, [r3, #16]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013232:	b2d2      	uxtb	r2, r2
 8013234:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323a:	1c5a      	adds	r2, r3, #1
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013244:	b29b      	uxth	r3, r3
 8013246:	3b01      	subs	r3, #1
 8013248:	b29a      	uxth	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2220      	movs	r2, #32
 8013252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7ff fdac 	bl	8012dbc <HAL_I2C_ErrorCallback>
}
 8013264:	bf00      	nop
 8013266:	3710      	adds	r7, #16
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013278:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801327e:	b29b      	uxth	r3, r3
 8013280:	2b04      	cmp	r3, #4
 8013282:	d11b      	bne.n	80132bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	685a      	ldr	r2, [r3, #4]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013292:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	691a      	ldr	r2, [r3, #16]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329e:	b2d2      	uxtb	r2, r2
 80132a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a6:	1c5a      	adds	r2, r3, #1
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	3b01      	subs	r3, #1
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80132ba:	e0bd      	b.n	8013438 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	2b03      	cmp	r3, #3
 80132c4:	d129      	bne.n	801331a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	685a      	ldr	r2, [r3, #4]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b04      	cmp	r3, #4
 80132da:	d00a      	beq.n	80132f2 <I2C_MasterReceive_BTF+0x86>
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2b02      	cmp	r3, #2
 80132e0:	d007      	beq.n	80132f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	691a      	ldr	r2, [r3, #16]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fc:	b2d2      	uxtb	r2, r2
 80132fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013304:	1c5a      	adds	r2, r3, #1
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801330e:	b29b      	uxth	r3, r3
 8013310:	3b01      	subs	r3, #1
 8013312:	b29a      	uxth	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013318:	e08e      	b.n	8013438 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801331e:	b29b      	uxth	r3, r3
 8013320:	2b02      	cmp	r3, #2
 8013322:	d176      	bne.n	8013412 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2b01      	cmp	r3, #1
 8013328:	d002      	beq.n	8013330 <I2C_MasterReceive_BTF+0xc4>
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2b10      	cmp	r3, #16
 801332e:	d108      	bne.n	8013342 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801333e:	601a      	str	r2, [r3, #0]
 8013340:	e019      	b.n	8013376 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2b04      	cmp	r3, #4
 8013346:	d002      	beq.n	801334e <I2C_MasterReceive_BTF+0xe2>
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2b02      	cmp	r3, #2
 801334c:	d108      	bne.n	8013360 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801335c:	601a      	str	r2, [r3, #0]
 801335e:	e00a      	b.n	8013376 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b10      	cmp	r3, #16
 8013364:	d007      	beq.n	8013376 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013374:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	691a      	ldr	r2, [r3, #16]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013380:	b2d2      	uxtb	r2, r2
 8013382:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013388:	1c5a      	adds	r2, r3, #1
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013392:	b29b      	uxth	r3, r3
 8013394:	3b01      	subs	r3, #1
 8013396:	b29a      	uxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	691a      	ldr	r2, [r3, #16]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a6:	b2d2      	uxtb	r2, r2
 80133a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	3b01      	subs	r3, #1
 80133bc:	b29a      	uxth	r2, r3
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80133d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2220      	movs	r2, #32
 80133d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b40      	cmp	r3, #64	; 0x40
 80133e4:	d10a      	bne.n	80133fc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2200      	movs	r2, #0
 80133f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f7ff fcd7 	bl	8012da8 <HAL_I2C_MemRxCpltCallback>
}
 80133fa:	e01d      	b.n	8013438 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2200      	movs	r2, #0
 8013400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2212      	movs	r2, #18
 8013408:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7f9 fc9e 	bl	800cd4c <HAL_I2C_MasterRxCpltCallback>
}
 8013410:	e012      	b.n	8013438 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	691a      	ldr	r2, [r3, #16]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801341c:	b2d2      	uxtb	r2, r2
 801341e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013424:	1c5a      	adds	r2, r3, #1
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801342e:	b29b      	uxth	r3, r3
 8013430:	3b01      	subs	r3, #1
 8013432:	b29a      	uxth	r2, r3
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013438:	bf00      	nop
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8013440:	b480      	push	{r7}
 8013442:	b083      	sub	sp, #12
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801344e:	b2db      	uxtb	r3, r3
 8013450:	2b40      	cmp	r3, #64	; 0x40
 8013452:	d117      	bne.n	8013484 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013458:	2b00      	cmp	r3, #0
 801345a:	d109      	bne.n	8013470 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013460:	b2db      	uxtb	r3, r3
 8013462:	461a      	mov	r2, r3
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801346c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801346e:	e067      	b.n	8013540 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013474:	b2db      	uxtb	r3, r3
 8013476:	f043 0301 	orr.w	r3, r3, #1
 801347a:	b2da      	uxtb	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	611a      	str	r2, [r3, #16]
}
 8013482:	e05d      	b.n	8013540 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801348c:	d133      	bne.n	80134f6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013494:	b2db      	uxtb	r3, r3
 8013496:	2b21      	cmp	r3, #33	; 0x21
 8013498:	d109      	bne.n	80134ae <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	461a      	mov	r2, r3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80134aa:	611a      	str	r2, [r3, #16]
 80134ac:	e008      	b.n	80134c0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	f043 0301 	orr.w	r3, r3, #1
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <I2C_Master_SB+0x92>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d108      	bne.n	80134e4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d032      	beq.n	8013540 <I2C_Master_SB+0x100>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d02d      	beq.n	8013540 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	685a      	ldr	r2, [r3, #4]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80134f2:	605a      	str	r2, [r3, #4]
}
 80134f4:	e024      	b.n	8013540 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d10e      	bne.n	801351c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013502:	b29b      	uxth	r3, r3
 8013504:	11db      	asrs	r3, r3, #7
 8013506:	b2db      	uxtb	r3, r3
 8013508:	f003 0306 	and.w	r3, r3, #6
 801350c:	b2db      	uxtb	r3, r3
 801350e:	f063 030f 	orn	r3, r3, #15
 8013512:	b2da      	uxtb	r2, r3
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	611a      	str	r2, [r3, #16]
}
 801351a:	e011      	b.n	8013540 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013520:	2b01      	cmp	r3, #1
 8013522:	d10d      	bne.n	8013540 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013528:	b29b      	uxth	r3, r3
 801352a:	11db      	asrs	r3, r3, #7
 801352c:	b2db      	uxtb	r3, r3
 801352e:	f003 0306 	and.w	r3, r3, #6
 8013532:	b2db      	uxtb	r3, r3
 8013534:	f063 030e 	orn	r3, r3, #14
 8013538:	b2da      	uxtb	r2, r3
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	611a      	str	r2, [r3, #16]
}
 8013540:	bf00      	nop
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013558:	b2da      	uxtb	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013564:	2b00      	cmp	r3, #0
 8013566:	d103      	bne.n	8013570 <I2C_Master_ADD10+0x24>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801356c:	2b00      	cmp	r3, #0
 801356e:	d011      	beq.n	8013594 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013576:	2b00      	cmp	r3, #0
 8013578:	d104      	bne.n	8013584 <I2C_Master_ADD10+0x38>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013580:	2b00      	cmp	r3, #0
 8013582:	d007      	beq.n	8013594 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	685a      	ldr	r2, [r3, #4]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013592:	605a      	str	r2, [r3, #4]
    }
  }
}
 8013594:	bf00      	nop
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b091      	sub	sp, #68	; 0x44
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80135ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b22      	cmp	r3, #34	; 0x22
 80135c8:	f040 8169 	bne.w	801389e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d10f      	bne.n	80135f4 <I2C_Master_ADDR+0x54>
 80135d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135d8:	2b40      	cmp	r3, #64	; 0x40
 80135da:	d10b      	bne.n	80135f4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80135dc:	2300      	movs	r3, #0
 80135de:	633b      	str	r3, [r7, #48]	; 0x30
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	695b      	ldr	r3, [r3, #20]
 80135e6:	633b      	str	r3, [r7, #48]	; 0x30
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	633b      	str	r3, [r7, #48]	; 0x30
 80135f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f2:	e160      	b.n	80138b6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d11d      	bne.n	8013638 <I2C_Master_ADDR+0x98>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013604:	d118      	bne.n	8013638 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013606:	2300      	movs	r3, #0
 8013608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	695b      	ldr	r3, [r3, #20]
 8013610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801362a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013630:	1c5a      	adds	r2, r3, #1
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	651a      	str	r2, [r3, #80]	; 0x50
 8013636:	e13e      	b.n	80138b6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801363c:	b29b      	uxth	r3, r3
 801363e:	2b00      	cmp	r3, #0
 8013640:	d113      	bne.n	801366a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013642:	2300      	movs	r3, #0
 8013644:	62bb      	str	r3, [r7, #40]	; 0x28
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	695b      	ldr	r3, [r3, #20]
 801364c:	62bb      	str	r3, [r7, #40]	; 0x28
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	699b      	ldr	r3, [r3, #24]
 8013654:	62bb      	str	r3, [r7, #40]	; 0x28
 8013656:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013666:	601a      	str	r2, [r3, #0]
 8013668:	e115      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801366e:	b29b      	uxth	r3, r3
 8013670:	2b01      	cmp	r3, #1
 8013672:	f040 808a 	bne.w	801378a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801367c:	d137      	bne.n	80136ee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801368c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801369c:	d113      	bne.n	80136c6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136ac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136ae:	2300      	movs	r3, #0
 80136b0:	627b      	str	r3, [r7, #36]	; 0x24
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	695b      	ldr	r3, [r3, #20]
 80136b8:	627b      	str	r3, [r7, #36]	; 0x24
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	699b      	ldr	r3, [r3, #24]
 80136c0:	627b      	str	r3, [r7, #36]	; 0x24
 80136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c4:	e0e7      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136c6:	2300      	movs	r3, #0
 80136c8:	623b      	str	r3, [r7, #32]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	695b      	ldr	r3, [r3, #20]
 80136d0:	623b      	str	r3, [r7, #32]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	699b      	ldr	r3, [r3, #24]
 80136d8:	623b      	str	r3, [r7, #32]
 80136da:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136ea:	601a      	str	r2, [r3, #0]
 80136ec:	e0d3      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80136ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f0:	2b08      	cmp	r3, #8
 80136f2:	d02e      	beq.n	8013752 <I2C_Master_ADDR+0x1b2>
 80136f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f6:	2b20      	cmp	r3, #32
 80136f8:	d02b      	beq.n	8013752 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80136fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136fc:	2b12      	cmp	r3, #18
 80136fe:	d102      	bne.n	8013706 <I2C_Master_ADDR+0x166>
 8013700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013702:	2b01      	cmp	r3, #1
 8013704:	d125      	bne.n	8013752 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8013706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013708:	2b04      	cmp	r3, #4
 801370a:	d00e      	beq.n	801372a <I2C_Master_ADDR+0x18a>
 801370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370e:	2b02      	cmp	r3, #2
 8013710:	d00b      	beq.n	801372a <I2C_Master_ADDR+0x18a>
 8013712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013714:	2b10      	cmp	r3, #16
 8013716:	d008      	beq.n	801372a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013726:	601a      	str	r2, [r3, #0]
 8013728:	e007      	b.n	801373a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013738:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801373a:	2300      	movs	r3, #0
 801373c:	61fb      	str	r3, [r7, #28]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	695b      	ldr	r3, [r3, #20]
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	699b      	ldr	r3, [r3, #24]
 801374c:	61fb      	str	r3, [r7, #28]
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	e0a1      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	681a      	ldr	r2, [r3, #0]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013760:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013762:	2300      	movs	r3, #0
 8013764:	61bb      	str	r3, [r7, #24]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	695b      	ldr	r3, [r3, #20]
 801376c:	61bb      	str	r3, [r7, #24]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	699b      	ldr	r3, [r3, #24]
 8013774:	61bb      	str	r3, [r7, #24]
 8013776:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013786:	601a      	str	r2, [r3, #0]
 8013788:	e085      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801378e:	b29b      	uxth	r3, r3
 8013790:	2b02      	cmp	r3, #2
 8013792:	d14d      	bne.n	8013830 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8013794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013796:	2b04      	cmp	r3, #4
 8013798:	d016      	beq.n	80137c8 <I2C_Master_ADDR+0x228>
 801379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801379c:	2b02      	cmp	r3, #2
 801379e:	d013      	beq.n	80137c8 <I2C_Master_ADDR+0x228>
 80137a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a2:	2b10      	cmp	r3, #16
 80137a4:	d010      	beq.n	80137c8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80137b4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80137c4:	601a      	str	r2, [r3, #0]
 80137c6:	e007      	b.n	80137d8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80137d6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137e6:	d117      	bne.n	8013818 <I2C_Master_ADDR+0x278>
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80137ee:	d00b      	beq.n	8013808 <I2C_Master_ADDR+0x268>
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d008      	beq.n	8013808 <I2C_Master_ADDR+0x268>
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	2b08      	cmp	r3, #8
 80137fa:	d005      	beq.n	8013808 <I2C_Master_ADDR+0x268>
 80137fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fe:	2b10      	cmp	r3, #16
 8013800:	d002      	beq.n	8013808 <I2C_Master_ADDR+0x268>
 8013802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013804:	2b20      	cmp	r3, #32
 8013806:	d107      	bne.n	8013818 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	685a      	ldr	r2, [r3, #4]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013816:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013818:	2300      	movs	r3, #0
 801381a:	617b      	str	r3, [r7, #20]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	695b      	ldr	r3, [r3, #20]
 8013822:	617b      	str	r3, [r7, #20]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	699b      	ldr	r3, [r3, #24]
 801382a:	617b      	str	r3, [r7, #20]
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	e032      	b.n	8013896 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801383e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801384e:	d117      	bne.n	8013880 <I2C_Master_ADDR+0x2e0>
 8013850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013852:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013856:	d00b      	beq.n	8013870 <I2C_Master_ADDR+0x2d0>
 8013858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385a:	2b01      	cmp	r3, #1
 801385c:	d008      	beq.n	8013870 <I2C_Master_ADDR+0x2d0>
 801385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013860:	2b08      	cmp	r3, #8
 8013862:	d005      	beq.n	8013870 <I2C_Master_ADDR+0x2d0>
 8013864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013866:	2b10      	cmp	r3, #16
 8013868:	d002      	beq.n	8013870 <I2C_Master_ADDR+0x2d0>
 801386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801386c:	2b20      	cmp	r3, #32
 801386e:	d107      	bne.n	8013880 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	685a      	ldr	r2, [r3, #4]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801387e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013880:	2300      	movs	r3, #0
 8013882:	613b      	str	r3, [r7, #16]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	695b      	ldr	r3, [r3, #20]
 801388a:	613b      	str	r3, [r7, #16]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	699b      	ldr	r3, [r3, #24]
 8013892:	613b      	str	r3, [r7, #16]
 8013894:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2200      	movs	r2, #0
 801389a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801389c:	e00b      	b.n	80138b6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801389e:	2300      	movs	r3, #0
 80138a0:	60fb      	str	r3, [r7, #12]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	695b      	ldr	r3, [r3, #20]
 80138a8:	60fb      	str	r3, [r7, #12]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	699b      	ldr	r3, [r3, #24]
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	68fb      	ldr	r3, [r7, #12]
}
 80138b4:	e7ff      	b.n	80138b6 <I2C_Master_ADDR+0x316>
 80138b6:	bf00      	nop
 80138b8:	3744      	adds	r7, #68	; 0x44
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b084      	sub	sp, #16
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80138d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d02b      	beq.n	8013934 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e0:	781a      	ldrb	r2, [r3, #0]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ec:	1c5a      	adds	r2, r3, #1
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	3b01      	subs	r3, #1
 80138fa:	b29a      	uxth	r2, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013904:	b29b      	uxth	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d114      	bne.n	8013934 <I2C_SlaveTransmit_TXE+0x72>
 801390a:	7bfb      	ldrb	r3, [r7, #15]
 801390c:	2b29      	cmp	r3, #41	; 0x29
 801390e:	d111      	bne.n	8013934 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801391e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2221      	movs	r2, #33	; 0x21
 8013924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2228      	movs	r2, #40	; 0x28
 801392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7ff fa04 	bl	8012d3c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8013934:	bf00      	nop
 8013936:	3710      	adds	r7, #16
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013948:	b29b      	uxth	r3, r3
 801394a:	2b00      	cmp	r3, #0
 801394c:	d011      	beq.n	8013972 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013952:	781a      	ldrb	r2, [r3, #0]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013968:	b29b      	uxth	r3, r3
 801396a:	3b01      	subs	r3, #1
 801396c:	b29a      	uxth	r2, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8013972:	bf00      	nop
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr

0801397e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b084      	sub	sp, #16
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801398c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013992:	b29b      	uxth	r3, r3
 8013994:	2b00      	cmp	r3, #0
 8013996:	d02c      	beq.n	80139f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	691a      	ldr	r2, [r3, #16]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139aa:	1c5a      	adds	r2, r3, #1
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	3b01      	subs	r3, #1
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d114      	bne.n	80139f2 <I2C_SlaveReceive_RXNE+0x74>
 80139c8:	7bfb      	ldrb	r3, [r7, #15]
 80139ca:	2b2a      	cmp	r3, #42	; 0x2a
 80139cc:	d111      	bne.n	80139f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	685a      	ldr	r2, [r3, #4]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2222      	movs	r2, #34	; 0x22
 80139e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2228      	movs	r2, #40	; 0x28
 80139e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff f9af 	bl	8012d50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80139f2:	bf00      	nop
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}

080139fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80139fa:	b480      	push	{r7}
 80139fc:	b083      	sub	sp, #12
 80139fe:	af00      	add	r7, sp, #0
 8013a00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d012      	beq.n	8013a32 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	691a      	ldr	r2, [r3, #16]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a16:	b2d2      	uxtb	r2, r2
 8013a18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8013a32:	bf00      	nop
 8013a34:	370c      	adds	r7, #12
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr

08013a3e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b084      	sub	sp, #16
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
 8013a46:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013a58:	2b28      	cmp	r3, #40	; 0x28
 8013a5a:	d127      	bne.n	8013aac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	685a      	ldr	r2, [r3, #4]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a6a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	089b      	lsrs	r3, r3, #2
 8013a70:	f003 0301 	and.w	r3, r3, #1
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d101      	bne.n	8013a7c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	09db      	lsrs	r3, r3, #7
 8013a80:	f003 0301 	and.w	r3, r3, #1
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d103      	bne.n	8013a90 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	81bb      	strh	r3, [r7, #12]
 8013a8e:	e002      	b.n	8013a96 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	699b      	ldr	r3, [r3, #24]
 8013a94:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8013a9e:	89ba      	ldrh	r2, [r7, #12]
 8013aa0:	7bfb      	ldrb	r3, [r7, #15]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7ff f95d 	bl	8012d64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8013aaa:	e008      	b.n	8013abe <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f06f 0202 	mvn.w	r2, #2
 8013ab4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8013abe:	bf00      	nop
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
	...

08013ac8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ad6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	685a      	ldr	r2, [r3, #4]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013ae6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8013ae8:	2300      	movs	r3, #0
 8013aea:	60bb      	str	r3, [r7, #8]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	695b      	ldr	r3, [r3, #20]
 8013af2:	60bb      	str	r3, [r7, #8]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f042 0201 	orr.w	r2, r2, #1
 8013b02:	601a      	str	r2, [r3, #0]
 8013b04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b24:	d172      	bne.n	8013c0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
 8013b28:	2b22      	cmp	r3, #34	; 0x22
 8013b2a:	d002      	beq.n	8013b32 <I2C_Slave_STOPF+0x6a>
 8013b2c:	7bfb      	ldrb	r3, [r7, #15]
 8013b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b30:	d135      	bne.n	8013b9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d005      	beq.n	8013b56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b4e:	f043 0204 	orr.w	r2, r3, #4
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	685a      	ldr	r2, [r3, #4]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013b64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe f87a 	bl	8011c64 <HAL_DMA_GetState>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d049      	beq.n	8013c0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b7a:	4a69      	ldr	r2, [pc, #420]	; (8013d20 <I2C_Slave_STOPF+0x258>)
 8013b7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7fd fec2 	bl	801190c <HAL_DMA_Abort_IT>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d03d      	beq.n	8013c0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013b98:	4610      	mov	r0, r2
 8013b9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013b9c:	e035      	b.n	8013c0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d005      	beq.n	8013bc2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bba:	f043 0204 	orr.w	r2, r3, #4
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	685a      	ldr	r2, [r3, #4]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013bd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7fe f844 	bl	8011c64 <HAL_DMA_GetState>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d014      	beq.n	8013c0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013be6:	4a4e      	ldr	r2, [pc, #312]	; (8013d20 <I2C_Slave_STOPF+0x258>)
 8013be8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fd fe8c 	bl	801190c <HAL_DMA_Abort_IT>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d008      	beq.n	8013c0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013c04:	4610      	mov	r0, r2
 8013c06:	4798      	blx	r3
 8013c08:	e000      	b.n	8013c0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013c0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d03e      	beq.n	8013c94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	695b      	ldr	r3, [r3, #20]
 8013c1c:	f003 0304 	and.w	r3, r3, #4
 8013c20:	2b04      	cmp	r3, #4
 8013c22:	d112      	bne.n	8013c4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	691a      	ldr	r2, [r3, #16]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c2e:	b2d2      	uxtb	r2, r2
 8013c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c36:	1c5a      	adds	r2, r3, #1
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	3b01      	subs	r3, #1
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	695b      	ldr	r3, [r3, #20]
 8013c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c54:	2b40      	cmp	r3, #64	; 0x40
 8013c56:	d112      	bne.n	8013c7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	691a      	ldr	r2, [r3, #16]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c62:	b2d2      	uxtb	r2, r2
 8013c64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c6a:	1c5a      	adds	r2, r3, #1
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	3b01      	subs	r3, #1
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d005      	beq.n	8013c94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8c:	f043 0204 	orr.w	r2, r3, #4
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d003      	beq.n	8013ca4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 f8b3 	bl	8013e08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8013ca2:	e039      	b.n	8013d18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013ca4:	7bfb      	ldrb	r3, [r7, #15]
 8013ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ca8:	d109      	bne.n	8013cbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2228      	movs	r2, #40	; 0x28
 8013cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff f849 	bl	8012d50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b28      	cmp	r3, #40	; 0x28
 8013cc8:	d111      	bne.n	8013cee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4a15      	ldr	r2, [pc, #84]	; (8013d24 <I2C_Slave_STOPF+0x25c>)
 8013cce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2220      	movs	r2, #32
 8013cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f7ff f84a 	bl	8012d80 <HAL_I2C_ListenCpltCallback>
}
 8013cec:	e014      	b.n	8013d18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cf2:	2b22      	cmp	r3, #34	; 0x22
 8013cf4:	d002      	beq.n	8013cfc <I2C_Slave_STOPF+0x234>
 8013cf6:	7bfb      	ldrb	r3, [r7, #15]
 8013cf8:	2b22      	cmp	r3, #34	; 0x22
 8013cfa:	d10d      	bne.n	8013d18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2220      	movs	r2, #32
 8013d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff f81c 	bl	8012d50 <HAL_I2C_SlaveRxCpltCallback>
}
 8013d18:	bf00      	nop
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	08014291 	.word	0x08014291
 8013d24:	ffff0000 	.word	0xffff0000

08013d28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	2b08      	cmp	r3, #8
 8013d42:	d002      	beq.n	8013d4a <I2C_Slave_AF+0x22>
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	2b20      	cmp	r3, #32
 8013d48:	d129      	bne.n	8013d9e <I2C_Slave_AF+0x76>
 8013d4a:	7bfb      	ldrb	r3, [r7, #15]
 8013d4c:	2b28      	cmp	r3, #40	; 0x28
 8013d4e:	d126      	bne.n	8013d9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	4a2c      	ldr	r2, [pc, #176]	; (8013e04 <I2C_Slave_AF+0xdc>)
 8013d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	685a      	ldr	r2, [r3, #4]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013d64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013d6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013d7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2200      	movs	r2, #0
 8013d84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2220      	movs	r2, #32
 8013d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2200      	movs	r2, #0
 8013d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7fe fff2 	bl	8012d80 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8013d9c:	e02e      	b.n	8013dfc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8013d9e:	7bfb      	ldrb	r3, [r7, #15]
 8013da0:	2b21      	cmp	r3, #33	; 0x21
 8013da2:	d126      	bne.n	8013df2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	4a17      	ldr	r2, [pc, #92]	; (8013e04 <I2C_Slave_AF+0xdc>)
 8013da8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2221      	movs	r2, #33	; 0x21
 8013dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2220      	movs	r2, #32
 8013db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	685a      	ldr	r2, [r3, #4]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013dce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013dd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013de8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7fe ffa6 	bl	8012d3c <HAL_I2C_SlaveTxCpltCallback>
}
 8013df0:	e004      	b.n	8013dfc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013dfa:	615a      	str	r2, [r3, #20]
}
 8013dfc:	bf00      	nop
 8013dfe:	3710      	adds	r7, #16
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	ffff0000 	.word	0xffff0000

08013e08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b084      	sub	sp, #16
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013e20:	7bbb      	ldrb	r3, [r7, #14]
 8013e22:	2b10      	cmp	r3, #16
 8013e24:	d002      	beq.n	8013e2c <I2C_ITError+0x24>
 8013e26:	7bbb      	ldrb	r3, [r7, #14]
 8013e28:	2b40      	cmp	r3, #64	; 0x40
 8013e2a:	d10a      	bne.n	8013e42 <I2C_ITError+0x3a>
 8013e2c:	7bfb      	ldrb	r3, [r7, #15]
 8013e2e:	2b22      	cmp	r3, #34	; 0x22
 8013e30:	d107      	bne.n	8013e42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013e40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013e42:	7bfb      	ldrb	r3, [r7, #15]
 8013e44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013e48:	2b28      	cmp	r3, #40	; 0x28
 8013e4a:	d107      	bne.n	8013e5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2228      	movs	r2, #40	; 0x28
 8013e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013e5a:	e015      	b.n	8013e88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e6a:	d00a      	beq.n	8013e82 <I2C_ITError+0x7a>
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
 8013e6e:	2b60      	cmp	r3, #96	; 0x60
 8013e70:	d007      	beq.n	8013e82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2220      	movs	r2, #32
 8013e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2200      	movs	r2, #0
 8013e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e96:	d162      	bne.n	8013f5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013ea6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d020      	beq.n	8013ef8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eba:	4a6a      	ldr	r2, [pc, #424]	; (8014064 <I2C_ITError+0x25c>)
 8013ebc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fd fd22 	bl	801190c <HAL_DMA_Abort_IT>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f000 8089 	beq.w	8013fe2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	681a      	ldr	r2, [r3, #0]
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	f022 0201 	bic.w	r2, r2, #1
 8013ede:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2220      	movs	r2, #32
 8013ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	4798      	blx	r3
 8013ef6:	e074      	b.n	8013fe2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013efc:	4a59      	ldr	r2, [pc, #356]	; (8014064 <I2C_ITError+0x25c>)
 8013efe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fd fd01 	bl	801190c <HAL_DMA_Abort_IT>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d068      	beq.n	8013fe2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	695b      	ldr	r3, [r3, #20]
 8013f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f1a:	2b40      	cmp	r3, #64	; 0x40
 8013f1c:	d10b      	bne.n	8013f36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	691a      	ldr	r2, [r3, #16]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f28:	b2d2      	uxtb	r2, r2
 8013f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f30:	1c5a      	adds	r2, r3, #1
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f022 0201 	bic.w	r2, r2, #1
 8013f44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2220      	movs	r2, #32
 8013f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013f58:	4610      	mov	r0, r2
 8013f5a:	4798      	blx	r3
 8013f5c:	e041      	b.n	8013fe2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	2b60      	cmp	r3, #96	; 0x60
 8013f68:	d125      	bne.n	8013fb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2220      	movs	r2, #32
 8013f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2200      	movs	r2, #0
 8013f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	695b      	ldr	r3, [r3, #20]
 8013f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f82:	2b40      	cmp	r3, #64	; 0x40
 8013f84:	d10b      	bne.n	8013f9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	691a      	ldr	r2, [r3, #16]
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f90:	b2d2      	uxtb	r2, r2
 8013f92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f98:	1c5a      	adds	r2, r3, #1
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f022 0201 	bic.w	r2, r2, #1
 8013fac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f7fe ff0e 	bl	8012dd0 <HAL_I2C_AbortCpltCallback>
 8013fb4:	e015      	b.n	8013fe2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	695b      	ldr	r3, [r3, #20]
 8013fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fc0:	2b40      	cmp	r3, #64	; 0x40
 8013fc2:	d10b      	bne.n	8013fdc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	691a      	ldr	r2, [r3, #16]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fce:	b2d2      	uxtb	r2, r2
 8013fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd6:	1c5a      	adds	r2, r3, #1
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7fe feed 	bl	8012dbc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d10e      	bne.n	8014010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d109      	bne.n	8014010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8014002:	2b00      	cmp	r3, #0
 8014004:	d104      	bne.n	8014010 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801400c:	2b00      	cmp	r3, #0
 801400e:	d007      	beq.n	8014020 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801401e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014026:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801402c:	f003 0304 	and.w	r3, r3, #4
 8014030:	2b04      	cmp	r3, #4
 8014032:	d113      	bne.n	801405c <I2C_ITError+0x254>
 8014034:	7bfb      	ldrb	r3, [r7, #15]
 8014036:	2b28      	cmp	r3, #40	; 0x28
 8014038:	d110      	bne.n	801405c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4a0a      	ldr	r2, [pc, #40]	; (8014068 <I2C_ITError+0x260>)
 801403e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2220      	movs	r2, #32
 801404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2200      	movs	r2, #0
 8014052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f7fe fe92 	bl	8012d80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801405c:	bf00      	nop
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	08014291 	.word	0x08014291
 8014068:	ffff0000 	.word	0xffff0000

0801406c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b086      	sub	sp, #24
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014078:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014080:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014088:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801408e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	685a      	ldr	r2, [r3, #4]
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801409e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d003      	beq.n	80140b0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140ac:	2200      	movs	r2, #0
 80140ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d003      	beq.n	80140c0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140bc:	2200      	movs	r2, #0
 80140be:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80140c0:	7cfb      	ldrb	r3, [r7, #19]
 80140c2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80140c6:	2b21      	cmp	r3, #33	; 0x21
 80140c8:	d007      	beq.n	80140da <I2C_DMAXferCplt+0x6e>
 80140ca:	7cfb      	ldrb	r3, [r7, #19]
 80140cc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80140d0:	2b22      	cmp	r3, #34	; 0x22
 80140d2:	d131      	bne.n	8014138 <I2C_DMAXferCplt+0xcc>
 80140d4:	7cbb      	ldrb	r3, [r7, #18]
 80140d6:	2b20      	cmp	r3, #32
 80140d8:	d12e      	bne.n	8014138 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	685a      	ldr	r2, [r3, #4]
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80140e8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	2200      	movs	r2, #0
 80140ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80140f0:	7cfb      	ldrb	r3, [r7, #19]
 80140f2:	2b29      	cmp	r3, #41	; 0x29
 80140f4:	d10a      	bne.n	801410c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	2221      	movs	r2, #33	; 0x21
 80140fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	2228      	movs	r2, #40	; 0x28
 8014100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014104:	6978      	ldr	r0, [r7, #20]
 8014106:	f7fe fe19 	bl	8012d3c <HAL_I2C_SlaveTxCpltCallback>
 801410a:	e00c      	b.n	8014126 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801410c:	7cfb      	ldrb	r3, [r7, #19]
 801410e:	2b2a      	cmp	r3, #42	; 0x2a
 8014110:	d109      	bne.n	8014126 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	2222      	movs	r2, #34	; 0x22
 8014116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	2228      	movs	r2, #40	; 0x28
 801411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014120:	6978      	ldr	r0, [r7, #20]
 8014122:	f7fe fe15 	bl	8012d50 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	685a      	ldr	r2, [r3, #4]
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8014134:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8014136:	e06a      	b.n	801420e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b00      	cmp	r3, #0
 8014142:	d064      	beq.n	801420e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014148:	b29b      	uxth	r3, r3
 801414a:	2b01      	cmp	r3, #1
 801414c:	d107      	bne.n	801415e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801415c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	685a      	ldr	r2, [r3, #4]
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801416c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014174:	d009      	beq.n	801418a <I2C_DMAXferCplt+0x11e>
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2b08      	cmp	r3, #8
 801417a:	d006      	beq.n	801418a <I2C_DMAXferCplt+0x11e>
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014182:	d002      	beq.n	801418a <I2C_DMAXferCplt+0x11e>
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b20      	cmp	r3, #32
 8014188:	d107      	bne.n	801419a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014198:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	685a      	ldr	r2, [r3, #4]
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80141a8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	685a      	ldr	r2, [r3, #4]
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80141b8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	2200      	movs	r2, #0
 80141be:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d003      	beq.n	80141d0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80141c8:	6978      	ldr	r0, [r7, #20]
 80141ca:	f7fe fdf7 	bl	8012dbc <HAL_I2C_ErrorCallback>
}
 80141ce:	e01e      	b.n	801420e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	2220      	movs	r2, #32
 80141d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	2b40      	cmp	r3, #64	; 0x40
 80141e2:	d10a      	bne.n	80141fa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	2200      	movs	r2, #0
 80141e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	2200      	movs	r2, #0
 80141f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80141f2:	6978      	ldr	r0, [r7, #20]
 80141f4:	f7fe fdd8 	bl	8012da8 <HAL_I2C_MemRxCpltCallback>
}
 80141f8:	e009      	b.n	801420e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	2200      	movs	r2, #0
 80141fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	2212      	movs	r2, #18
 8014206:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8014208:	6978      	ldr	r0, [r7, #20]
 801420a:	f7f8 fd9f 	bl	800cd4c <HAL_I2C_MasterRxCpltCallback>
}
 801420e:	bf00      	nop
 8014210:	3718      	adds	r7, #24
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b084      	sub	sp, #16
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014222:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014228:	2b00      	cmp	r3, #0
 801422a:	d003      	beq.n	8014234 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014230:	2200      	movs	r2, #0
 8014232:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014238:	2b00      	cmp	r3, #0
 801423a:	d003      	beq.n	8014244 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014240:	2200      	movs	r2, #0
 8014242:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7fd fd1b 	bl	8011c80 <HAL_DMA_GetError>
 801424a:	4603      	mov	r3, r0
 801424c:	2b02      	cmp	r3, #2
 801424e:	d01b      	beq.n	8014288 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801425e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2200      	movs	r2, #0
 8014264:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2220      	movs	r2, #32
 801426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801427a:	f043 0210 	orr.w	r2, r3, #16
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f7fe fd9a 	bl	8012dbc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014288:	bf00      	nop
 801428a:	3710      	adds	r7, #16
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014298:	2300      	movs	r3, #0
 801429a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80142aa:	4b4b      	ldr	r3, [pc, #300]	; (80143d8 <I2C_DMAAbort+0x148>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	08db      	lsrs	r3, r3, #3
 80142b0:	4a4a      	ldr	r2, [pc, #296]	; (80143dc <I2C_DMAAbort+0x14c>)
 80142b2:	fba2 2303 	umull	r2, r3, r2, r3
 80142b6:	0a1a      	lsrs	r2, r3, #8
 80142b8:	4613      	mov	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	4413      	add	r3, r2
 80142be:	00da      	lsls	r2, r3, #3
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d106      	bne.n	80142d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142ce:	f043 0220 	orr.w	r2, r3, #32
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80142d6:	e00a      	b.n	80142ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3b01      	subs	r3, #1
 80142dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80142e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142ec:	d0ea      	beq.n	80142c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d003      	beq.n	80142fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142fa:	2200      	movs	r2, #0
 80142fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014302:	2b00      	cmp	r3, #0
 8014304:	d003      	beq.n	801430e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801430a:	2200      	movs	r2, #0
 801430c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801431c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	2200      	movs	r2, #0
 8014322:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014328:	2b00      	cmp	r3, #0
 801432a:	d003      	beq.n	8014334 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014330:	2200      	movs	r2, #0
 8014332:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014338:	2b00      	cmp	r3, #0
 801433a:	d003      	beq.n	8014344 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014340:	2200      	movs	r2, #0
 8014342:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f022 0201 	bic.w	r2, r2, #1
 8014352:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801435a:	b2db      	uxtb	r3, r3
 801435c:	2b60      	cmp	r3, #96	; 0x60
 801435e:	d10e      	bne.n	801437e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	2220      	movs	r2, #32
 8014364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	2200      	movs	r2, #0
 801436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	2200      	movs	r2, #0
 8014374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014376:	6978      	ldr	r0, [r7, #20]
 8014378:	f7fe fd2a 	bl	8012dd0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801437c:	e027      	b.n	80143ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801437e:	7cfb      	ldrb	r3, [r7, #19]
 8014380:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014384:	2b28      	cmp	r3, #40	; 0x28
 8014386:	d117      	bne.n	80143b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f042 0201 	orr.w	r2, r2, #1
 8014396:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80143a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	2200      	movs	r2, #0
 80143ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	2228      	movs	r2, #40	; 0x28
 80143b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80143b6:	e007      	b.n	80143c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	2220      	movs	r2, #32
 80143bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	2200      	movs	r2, #0
 80143c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80143c8:	6978      	ldr	r0, [r7, #20]
 80143ca:	f7fe fcf7 	bl	8012dbc <HAL_I2C_ErrorCallback>
}
 80143ce:	bf00      	nop
 80143d0:	3718      	adds	r7, #24
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	20000054 	.word	0x20000054
 80143dc:	14f8b589 	.word	0x14f8b589

080143e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b085      	sub	sp, #20
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80143e8:	2300      	movs	r3, #0
 80143ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80143ec:	4b13      	ldr	r3, [pc, #76]	; (801443c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	08db      	lsrs	r3, r3, #3
 80143f2:	4a13      	ldr	r2, [pc, #76]	; (8014440 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80143f4:	fba2 2303 	umull	r2, r3, r2, r3
 80143f8:	0a1a      	lsrs	r2, r3, #8
 80143fa:	4613      	mov	r3, r2
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	4413      	add	r3, r2
 8014400:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	3b01      	subs	r3, #1
 8014406:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d107      	bne.n	801441e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014412:	f043 0220 	orr.w	r2, r3, #32
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801441a:	2301      	movs	r3, #1
 801441c:	e008      	b.n	8014430 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801442c:	d0e9      	beq.n	8014402 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3714      	adds	r7, #20
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr
 801443c:	20000054 	.word	0x20000054
 8014440:	14f8b589 	.word	0x14f8b589

08014444 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014450:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014454:	d103      	bne.n	801445e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2201      	movs	r2, #1
 801445a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801445c:	e007      	b.n	801446e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014462:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014466:	d102      	bne.n	801446e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2208      	movs	r2, #8
 801446c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801446e:	bf00      	nop
 8014470:	370c      	adds	r7, #12
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr
	...

0801447c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b086      	sub	sp, #24
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801448a:	2301      	movs	r3, #1
 801448c:	e25b      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f003 0301 	and.w	r3, r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	d075      	beq.n	8014586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801449a:	4ba3      	ldr	r3, [pc, #652]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 801449c:	689b      	ldr	r3, [r3, #8]
 801449e:	f003 030c 	and.w	r3, r3, #12
 80144a2:	2b04      	cmp	r3, #4
 80144a4:	d00c      	beq.n	80144c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80144a6:	4ba0      	ldr	r3, [pc, #640]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144a8:	689b      	ldr	r3, [r3, #8]
 80144aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80144ae:	2b08      	cmp	r3, #8
 80144b0:	d112      	bne.n	80144d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80144b2:	4b9d      	ldr	r3, [pc, #628]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80144ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80144be:	d10b      	bne.n	80144d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80144c0:	4b99      	ldr	r3, [pc, #612]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d05b      	beq.n	8014584 <HAL_RCC_OscConfig+0x108>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d157      	bne.n	8014584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80144d4:	2301      	movs	r3, #1
 80144d6:	e236      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144e0:	d106      	bne.n	80144f0 <HAL_RCC_OscConfig+0x74>
 80144e2:	4b91      	ldr	r3, [pc, #580]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	4a90      	ldr	r2, [pc, #576]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80144ec:	6013      	str	r3, [r2, #0]
 80144ee:	e01d      	b.n	801452c <HAL_RCC_OscConfig+0xb0>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80144f8:	d10c      	bne.n	8014514 <HAL_RCC_OscConfig+0x98>
 80144fa:	4b8b      	ldr	r3, [pc, #556]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4a8a      	ldr	r2, [pc, #552]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014504:	6013      	str	r3, [r2, #0]
 8014506:	4b88      	ldr	r3, [pc, #544]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a87      	ldr	r2, [pc, #540]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 801450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014510:	6013      	str	r3, [r2, #0]
 8014512:	e00b      	b.n	801452c <HAL_RCC_OscConfig+0xb0>
 8014514:	4b84      	ldr	r3, [pc, #528]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4a83      	ldr	r2, [pc, #524]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 801451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801451e:	6013      	str	r3, [r2, #0]
 8014520:	4b81      	ldr	r3, [pc, #516]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4a80      	ldr	r2, [pc, #512]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801452a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d013      	beq.n	801455c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014534:	f7fc f8ac 	bl	8010690 <HAL_GetTick>
 8014538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801453a:	e008      	b.n	801454e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801453c:	f7fc f8a8 	bl	8010690 <HAL_GetTick>
 8014540:	4602      	mov	r2, r0
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	2b64      	cmp	r3, #100	; 0x64
 8014548:	d901      	bls.n	801454e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801454a:	2303      	movs	r3, #3
 801454c:	e1fb      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801454e:	4b76      	ldr	r3, [pc, #472]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014556:	2b00      	cmp	r3, #0
 8014558:	d0f0      	beq.n	801453c <HAL_RCC_OscConfig+0xc0>
 801455a:	e014      	b.n	8014586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801455c:	f7fc f898 	bl	8010690 <HAL_GetTick>
 8014560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014562:	e008      	b.n	8014576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014564:	f7fc f894 	bl	8010690 <HAL_GetTick>
 8014568:	4602      	mov	r2, r0
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	1ad3      	subs	r3, r2, r3
 801456e:	2b64      	cmp	r3, #100	; 0x64
 8014570:	d901      	bls.n	8014576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014572:	2303      	movs	r3, #3
 8014574:	e1e7      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014576:	4b6c      	ldr	r3, [pc, #432]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801457e:	2b00      	cmp	r3, #0
 8014580:	d1f0      	bne.n	8014564 <HAL_RCC_OscConfig+0xe8>
 8014582:	e000      	b.n	8014586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f003 0302 	and.w	r3, r3, #2
 801458e:	2b00      	cmp	r3, #0
 8014590:	d063      	beq.n	801465a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8014592:	4b65      	ldr	r3, [pc, #404]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014594:	689b      	ldr	r3, [r3, #8]
 8014596:	f003 030c 	and.w	r3, r3, #12
 801459a:	2b00      	cmp	r3, #0
 801459c:	d00b      	beq.n	80145b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801459e:	4b62      	ldr	r3, [pc, #392]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80145a6:	2b08      	cmp	r3, #8
 80145a8:	d11c      	bne.n	80145e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80145aa:	4b5f      	ldr	r3, [pc, #380]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d116      	bne.n	80145e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80145b6:	4b5c      	ldr	r3, [pc, #368]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f003 0302 	and.w	r3, r3, #2
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d005      	beq.n	80145ce <HAL_RCC_OscConfig+0x152>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	2b01      	cmp	r3, #1
 80145c8:	d001      	beq.n	80145ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80145ca:	2301      	movs	r3, #1
 80145cc:	e1bb      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80145ce:	4b56      	ldr	r3, [pc, #344]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	691b      	ldr	r3, [r3, #16]
 80145da:	00db      	lsls	r3, r3, #3
 80145dc:	4952      	ldr	r1, [pc, #328]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80145de:	4313      	orrs	r3, r2
 80145e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80145e2:	e03a      	b.n	801465a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	68db      	ldr	r3, [r3, #12]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d020      	beq.n	801462e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80145ec:	4b4f      	ldr	r3, [pc, #316]	; (801472c <HAL_RCC_OscConfig+0x2b0>)
 80145ee:	2201      	movs	r2, #1
 80145f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145f2:	f7fc f84d 	bl	8010690 <HAL_GetTick>
 80145f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80145f8:	e008      	b.n	801460c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80145fa:	f7fc f849 	bl	8010690 <HAL_GetTick>
 80145fe:	4602      	mov	r2, r0
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	2b02      	cmp	r3, #2
 8014606:	d901      	bls.n	801460c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014608:	2303      	movs	r3, #3
 801460a:	e19c      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801460c:	4b46      	ldr	r3, [pc, #280]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	f003 0302 	and.w	r3, r3, #2
 8014614:	2b00      	cmp	r3, #0
 8014616:	d0f0      	beq.n	80145fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014618:	4b43      	ldr	r3, [pc, #268]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	691b      	ldr	r3, [r3, #16]
 8014624:	00db      	lsls	r3, r3, #3
 8014626:	4940      	ldr	r1, [pc, #256]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014628:	4313      	orrs	r3, r2
 801462a:	600b      	str	r3, [r1, #0]
 801462c:	e015      	b.n	801465a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801462e:	4b3f      	ldr	r3, [pc, #252]	; (801472c <HAL_RCC_OscConfig+0x2b0>)
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014634:	f7fc f82c 	bl	8010690 <HAL_GetTick>
 8014638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801463a:	e008      	b.n	801464e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801463c:	f7fc f828 	bl	8010690 <HAL_GetTick>
 8014640:	4602      	mov	r2, r0
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	2b02      	cmp	r3, #2
 8014648:	d901      	bls.n	801464e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801464a:	2303      	movs	r3, #3
 801464c:	e17b      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801464e:	4b36      	ldr	r3, [pc, #216]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f003 0302 	and.w	r3, r3, #2
 8014656:	2b00      	cmp	r3, #0
 8014658:	d1f0      	bne.n	801463c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f003 0308 	and.w	r3, r3, #8
 8014662:	2b00      	cmp	r3, #0
 8014664:	d030      	beq.n	80146c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	695b      	ldr	r3, [r3, #20]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d016      	beq.n	801469c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801466e:	4b30      	ldr	r3, [pc, #192]	; (8014730 <HAL_RCC_OscConfig+0x2b4>)
 8014670:	2201      	movs	r2, #1
 8014672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014674:	f7fc f80c 	bl	8010690 <HAL_GetTick>
 8014678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801467a:	e008      	b.n	801468e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801467c:	f7fc f808 	bl	8010690 <HAL_GetTick>
 8014680:	4602      	mov	r2, r0
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	2b02      	cmp	r3, #2
 8014688:	d901      	bls.n	801468e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801468a:	2303      	movs	r3, #3
 801468c:	e15b      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801468e:	4b26      	ldr	r3, [pc, #152]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 8014690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014692:	f003 0302 	and.w	r3, r3, #2
 8014696:	2b00      	cmp	r3, #0
 8014698:	d0f0      	beq.n	801467c <HAL_RCC_OscConfig+0x200>
 801469a:	e015      	b.n	80146c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801469c:	4b24      	ldr	r3, [pc, #144]	; (8014730 <HAL_RCC_OscConfig+0x2b4>)
 801469e:	2200      	movs	r2, #0
 80146a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80146a2:	f7fb fff5 	bl	8010690 <HAL_GetTick>
 80146a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80146a8:	e008      	b.n	80146bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80146aa:	f7fb fff1 	bl	8010690 <HAL_GetTick>
 80146ae:	4602      	mov	r2, r0
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	2b02      	cmp	r3, #2
 80146b6:	d901      	bls.n	80146bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80146b8:	2303      	movs	r3, #3
 80146ba:	e144      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80146bc:	4b1a      	ldr	r3, [pc, #104]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80146be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146c0:	f003 0302 	and.w	r3, r3, #2
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1f0      	bne.n	80146aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	f003 0304 	and.w	r3, r3, #4
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	f000 80a0 	beq.w	8014816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80146d6:	2300      	movs	r3, #0
 80146d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80146da:	4b13      	ldr	r3, [pc, #76]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80146dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d10f      	bne.n	8014706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80146e6:	2300      	movs	r3, #0
 80146e8:	60bb      	str	r3, [r7, #8]
 80146ea:	4b0f      	ldr	r3, [pc, #60]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80146ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ee:	4a0e      	ldr	r2, [pc, #56]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80146f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146f4:	6413      	str	r3, [r2, #64]	; 0x40
 80146f6:	4b0c      	ldr	r3, [pc, #48]	; (8014728 <HAL_RCC_OscConfig+0x2ac>)
 80146f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146fe:	60bb      	str	r3, [r7, #8]
 8014700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014702:	2301      	movs	r3, #1
 8014704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014706:	4b0b      	ldr	r3, [pc, #44]	; (8014734 <HAL_RCC_OscConfig+0x2b8>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801470e:	2b00      	cmp	r3, #0
 8014710:	d121      	bne.n	8014756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014712:	4b08      	ldr	r3, [pc, #32]	; (8014734 <HAL_RCC_OscConfig+0x2b8>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	4a07      	ldr	r2, [pc, #28]	; (8014734 <HAL_RCC_OscConfig+0x2b8>)
 8014718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801471e:	f7fb ffb7 	bl	8010690 <HAL_GetTick>
 8014722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014724:	e011      	b.n	801474a <HAL_RCC_OscConfig+0x2ce>
 8014726:	bf00      	nop
 8014728:	40023800 	.word	0x40023800
 801472c:	42470000 	.word	0x42470000
 8014730:	42470e80 	.word	0x42470e80
 8014734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014738:	f7fb ffaa 	bl	8010690 <HAL_GetTick>
 801473c:	4602      	mov	r2, r0
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	1ad3      	subs	r3, r2, r3
 8014742:	2b02      	cmp	r3, #2
 8014744:	d901      	bls.n	801474a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8014746:	2303      	movs	r3, #3
 8014748:	e0fd      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801474a:	4b81      	ldr	r3, [pc, #516]	; (8014950 <HAL_RCC_OscConfig+0x4d4>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014752:	2b00      	cmp	r3, #0
 8014754:	d0f0      	beq.n	8014738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	689b      	ldr	r3, [r3, #8]
 801475a:	2b01      	cmp	r3, #1
 801475c:	d106      	bne.n	801476c <HAL_RCC_OscConfig+0x2f0>
 801475e:	4b7d      	ldr	r3, [pc, #500]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014762:	4a7c      	ldr	r2, [pc, #496]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014764:	f043 0301 	orr.w	r3, r3, #1
 8014768:	6713      	str	r3, [r2, #112]	; 0x70
 801476a:	e01c      	b.n	80147a6 <HAL_RCC_OscConfig+0x32a>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	2b05      	cmp	r3, #5
 8014772:	d10c      	bne.n	801478e <HAL_RCC_OscConfig+0x312>
 8014774:	4b77      	ldr	r3, [pc, #476]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014778:	4a76      	ldr	r2, [pc, #472]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 801477a:	f043 0304 	orr.w	r3, r3, #4
 801477e:	6713      	str	r3, [r2, #112]	; 0x70
 8014780:	4b74      	ldr	r3, [pc, #464]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014784:	4a73      	ldr	r2, [pc, #460]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014786:	f043 0301 	orr.w	r3, r3, #1
 801478a:	6713      	str	r3, [r2, #112]	; 0x70
 801478c:	e00b      	b.n	80147a6 <HAL_RCC_OscConfig+0x32a>
 801478e:	4b71      	ldr	r3, [pc, #452]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014792:	4a70      	ldr	r2, [pc, #448]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014794:	f023 0301 	bic.w	r3, r3, #1
 8014798:	6713      	str	r3, [r2, #112]	; 0x70
 801479a:	4b6e      	ldr	r3, [pc, #440]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 801479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801479e:	4a6d      	ldr	r2, [pc, #436]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80147a0:	f023 0304 	bic.w	r3, r3, #4
 80147a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	689b      	ldr	r3, [r3, #8]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d015      	beq.n	80147da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147ae:	f7fb ff6f 	bl	8010690 <HAL_GetTick>
 80147b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80147b4:	e00a      	b.n	80147cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80147b6:	f7fb ff6b 	bl	8010690 <HAL_GetTick>
 80147ba:	4602      	mov	r2, r0
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	1ad3      	subs	r3, r2, r3
 80147c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d901      	bls.n	80147cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80147c8:	2303      	movs	r3, #3
 80147ca:	e0bc      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80147cc:	4b61      	ldr	r3, [pc, #388]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80147ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d0:	f003 0302 	and.w	r3, r3, #2
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d0ee      	beq.n	80147b6 <HAL_RCC_OscConfig+0x33a>
 80147d8:	e014      	b.n	8014804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80147da:	f7fb ff59 	bl	8010690 <HAL_GetTick>
 80147de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80147e0:	e00a      	b.n	80147f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80147e2:	f7fb ff55 	bl	8010690 <HAL_GetTick>
 80147e6:	4602      	mov	r2, r0
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	1ad3      	subs	r3, r2, r3
 80147ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d901      	bls.n	80147f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80147f4:	2303      	movs	r3, #3
 80147f6:	e0a6      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80147f8:	4b56      	ldr	r3, [pc, #344]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80147fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fc:	f003 0302 	and.w	r3, r3, #2
 8014800:	2b00      	cmp	r3, #0
 8014802:	d1ee      	bne.n	80147e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014804:	7dfb      	ldrb	r3, [r7, #23]
 8014806:	2b01      	cmp	r3, #1
 8014808:	d105      	bne.n	8014816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801480a:	4b52      	ldr	r3, [pc, #328]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 801480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801480e:	4a51      	ldr	r2, [pc, #324]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	699b      	ldr	r3, [r3, #24]
 801481a:	2b00      	cmp	r3, #0
 801481c:	f000 8092 	beq.w	8014944 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014820:	4b4c      	ldr	r3, [pc, #304]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	f003 030c 	and.w	r3, r3, #12
 8014828:	2b08      	cmp	r3, #8
 801482a:	d05c      	beq.n	80148e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	699b      	ldr	r3, [r3, #24]
 8014830:	2b02      	cmp	r3, #2
 8014832:	d141      	bne.n	80148b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014834:	4b48      	ldr	r3, [pc, #288]	; (8014958 <HAL_RCC_OscConfig+0x4dc>)
 8014836:	2200      	movs	r2, #0
 8014838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801483a:	f7fb ff29 	bl	8010690 <HAL_GetTick>
 801483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014840:	e008      	b.n	8014854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014842:	f7fb ff25 	bl	8010690 <HAL_GetTick>
 8014846:	4602      	mov	r2, r0
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	2b02      	cmp	r3, #2
 801484e:	d901      	bls.n	8014854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014850:	2303      	movs	r3, #3
 8014852:	e078      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014854:	4b3f      	ldr	r3, [pc, #252]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801485c:	2b00      	cmp	r3, #0
 801485e:	d1f0      	bne.n	8014842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	69da      	ldr	r2, [r3, #28]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6a1b      	ldr	r3, [r3, #32]
 8014868:	431a      	orrs	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801486e:	019b      	lsls	r3, r3, #6
 8014870:	431a      	orrs	r2, r3
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014876:	085b      	lsrs	r3, r3, #1
 8014878:	3b01      	subs	r3, #1
 801487a:	041b      	lsls	r3, r3, #16
 801487c:	431a      	orrs	r2, r3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014882:	061b      	lsls	r3, r3, #24
 8014884:	4933      	ldr	r1, [pc, #204]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 8014886:	4313      	orrs	r3, r2
 8014888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801488a:	4b33      	ldr	r3, [pc, #204]	; (8014958 <HAL_RCC_OscConfig+0x4dc>)
 801488c:	2201      	movs	r2, #1
 801488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014890:	f7fb fefe 	bl	8010690 <HAL_GetTick>
 8014894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014896:	e008      	b.n	80148aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014898:	f7fb fefa 	bl	8010690 <HAL_GetTick>
 801489c:	4602      	mov	r2, r0
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d901      	bls.n	80148aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80148a6:	2303      	movs	r3, #3
 80148a8:	e04d      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80148aa:	4b2a      	ldr	r3, [pc, #168]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d0f0      	beq.n	8014898 <HAL_RCC_OscConfig+0x41c>
 80148b6:	e045      	b.n	8014944 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80148b8:	4b27      	ldr	r3, [pc, #156]	; (8014958 <HAL_RCC_OscConfig+0x4dc>)
 80148ba:	2200      	movs	r2, #0
 80148bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148be:	f7fb fee7 	bl	8010690 <HAL_GetTick>
 80148c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80148c4:	e008      	b.n	80148d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80148c6:	f7fb fee3 	bl	8010690 <HAL_GetTick>
 80148ca:	4602      	mov	r2, r0
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	d901      	bls.n	80148d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80148d4:	2303      	movs	r3, #3
 80148d6:	e036      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80148d8:	4b1e      	ldr	r3, [pc, #120]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d1f0      	bne.n	80148c6 <HAL_RCC_OscConfig+0x44a>
 80148e4:	e02e      	b.n	8014944 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	699b      	ldr	r3, [r3, #24]
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	d101      	bne.n	80148f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80148ee:	2301      	movs	r3, #1
 80148f0:	e029      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80148f2:	4b18      	ldr	r3, [pc, #96]	; (8014954 <HAL_RCC_OscConfig+0x4d8>)
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	69db      	ldr	r3, [r3, #28]
 8014902:	429a      	cmp	r2, r3
 8014904:	d11c      	bne.n	8014940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014910:	429a      	cmp	r2, r3
 8014912:	d115      	bne.n	8014940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801491a:	4013      	ands	r3, r2
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014920:	4293      	cmp	r3, r2
 8014922:	d10d      	bne.n	8014940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801492e:	429a      	cmp	r2, r3
 8014930:	d106      	bne.n	8014940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801493c:	429a      	cmp	r2, r3
 801493e:	d001      	beq.n	8014944 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8014940:	2301      	movs	r3, #1
 8014942:	e000      	b.n	8014946 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8014944:	2300      	movs	r3, #0
}
 8014946:	4618      	mov	r0, r3
 8014948:	3718      	adds	r7, #24
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	40007000 	.word	0x40007000
 8014954:	40023800 	.word	0x40023800
 8014958:	42470060 	.word	0x42470060

0801495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d101      	bne.n	8014970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801496c:	2301      	movs	r3, #1
 801496e:	e0cc      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014970:	4b68      	ldr	r3, [pc, #416]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f003 030f 	and.w	r3, r3, #15
 8014978:	683a      	ldr	r2, [r7, #0]
 801497a:	429a      	cmp	r2, r3
 801497c:	d90c      	bls.n	8014998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801497e:	4b65      	ldr	r3, [pc, #404]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014980:	683a      	ldr	r2, [r7, #0]
 8014982:	b2d2      	uxtb	r2, r2
 8014984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014986:	4b63      	ldr	r3, [pc, #396]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f003 030f 	and.w	r3, r3, #15
 801498e:	683a      	ldr	r2, [r7, #0]
 8014990:	429a      	cmp	r2, r3
 8014992:	d001      	beq.n	8014998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8014994:	2301      	movs	r3, #1
 8014996:	e0b8      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f003 0302 	and.w	r3, r3, #2
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d020      	beq.n	80149e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	f003 0304 	and.w	r3, r3, #4
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d005      	beq.n	80149bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80149b0:	4b59      	ldr	r3, [pc, #356]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149b2:	689b      	ldr	r3, [r3, #8]
 80149b4:	4a58      	ldr	r2, [pc, #352]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80149ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	f003 0308 	and.w	r3, r3, #8
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d005      	beq.n	80149d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80149c8:	4b53      	ldr	r3, [pc, #332]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	4a52      	ldr	r2, [pc, #328]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80149d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80149d4:	4b50      	ldr	r3, [pc, #320]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149d6:	689b      	ldr	r3, [r3, #8]
 80149d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	689b      	ldr	r3, [r3, #8]
 80149e0:	494d      	ldr	r1, [pc, #308]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149e2:	4313      	orrs	r3, r2
 80149e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f003 0301 	and.w	r3, r3, #1
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d044      	beq.n	8014a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	d107      	bne.n	8014a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80149fa:	4b47      	ldr	r3, [pc, #284]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d119      	bne.n	8014a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014a06:	2301      	movs	r3, #1
 8014a08:	e07f      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d003      	beq.n	8014a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014a16:	2b03      	cmp	r3, #3
 8014a18:	d107      	bne.n	8014a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014a1a:	4b3f      	ldr	r3, [pc, #252]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d109      	bne.n	8014a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014a26:	2301      	movs	r3, #1
 8014a28:	e06f      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014a2a:	4b3b      	ldr	r3, [pc, #236]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f003 0302 	and.w	r3, r3, #2
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d101      	bne.n	8014a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014a36:	2301      	movs	r3, #1
 8014a38:	e067      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014a3a:	4b37      	ldr	r3, [pc, #220]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	f023 0203 	bic.w	r2, r3, #3
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	4934      	ldr	r1, [pc, #208]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014a4c:	f7fb fe20 	bl	8010690 <HAL_GetTick>
 8014a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014a52:	e00a      	b.n	8014a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a54:	f7fb fe1c 	bl	8010690 <HAL_GetTick>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d901      	bls.n	8014a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014a66:	2303      	movs	r3, #3
 8014a68:	e04f      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014a6a:	4b2b      	ldr	r3, [pc, #172]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014a6c:	689b      	ldr	r3, [r3, #8]
 8014a6e:	f003 020c 	and.w	r2, r3, #12
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d1eb      	bne.n	8014a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014a7c:	4b25      	ldr	r3, [pc, #148]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	f003 030f 	and.w	r3, r3, #15
 8014a84:	683a      	ldr	r2, [r7, #0]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d20c      	bcs.n	8014aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014a8a:	4b22      	ldr	r3, [pc, #136]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014a8c:	683a      	ldr	r2, [r7, #0]
 8014a8e:	b2d2      	uxtb	r2, r2
 8014a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a92:	4b20      	ldr	r3, [pc, #128]	; (8014b14 <HAL_RCC_ClockConfig+0x1b8>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	f003 030f 	and.w	r3, r3, #15
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d001      	beq.n	8014aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	e032      	b.n	8014b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	f003 0304 	and.w	r3, r3, #4
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d008      	beq.n	8014ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ab0:	4b19      	ldr	r3, [pc, #100]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	4916      	ldr	r1, [pc, #88]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014abe:	4313      	orrs	r3, r2
 8014ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f003 0308 	and.w	r3, r3, #8
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d009      	beq.n	8014ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014ace:	4b12      	ldr	r3, [pc, #72]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014ad0:	689b      	ldr	r3, [r3, #8]
 8014ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	691b      	ldr	r3, [r3, #16]
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	490e      	ldr	r1, [pc, #56]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014ade:	4313      	orrs	r3, r2
 8014ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014ae2:	f000 f82d 	bl	8014b40 <HAL_RCC_GetSysClockFreq>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	4b0b      	ldr	r3, [pc, #44]	; (8014b18 <HAL_RCC_ClockConfig+0x1bc>)
 8014aea:	689b      	ldr	r3, [r3, #8]
 8014aec:	091b      	lsrs	r3, r3, #4
 8014aee:	f003 030f 	and.w	r3, r3, #15
 8014af2:	490a      	ldr	r1, [pc, #40]	; (8014b1c <HAL_RCC_ClockConfig+0x1c0>)
 8014af4:	5ccb      	ldrb	r3, [r1, r3]
 8014af6:	fa22 f303 	lsr.w	r3, r2, r3
 8014afa:	4a09      	ldr	r2, [pc, #36]	; (8014b20 <HAL_RCC_ClockConfig+0x1c4>)
 8014afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014afe:	4b09      	ldr	r3, [pc, #36]	; (8014b24 <HAL_RCC_ClockConfig+0x1c8>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7f8 f95e 	bl	800cdc4 <HAL_InitTick>

  return HAL_OK;
 8014b08:	2300      	movs	r3, #0
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	40023c00 	.word	0x40023c00
 8014b18:	40023800 	.word	0x40023800
 8014b1c:	080200d0 	.word	0x080200d0
 8014b20:	20000054 	.word	0x20000054
 8014b24:	200000b8 	.word	0x200000b8

08014b28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8014b2c:	4b03      	ldr	r3, [pc, #12]	; (8014b3c <HAL_RCC_EnableCSS+0x14>)
 8014b2e:	2201      	movs	r2, #1
 8014b30:	601a      	str	r2, [r3, #0]
}
 8014b32:	bf00      	nop
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr
 8014b3c:	4247004c 	.word	0x4247004c

08014b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	607b      	str	r3, [r7, #4]
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	2300      	movs	r3, #0
 8014b52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8014b54:	2300      	movs	r3, #0
 8014b56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014b58:	4b67      	ldr	r3, [pc, #412]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	f003 030c 	and.w	r3, r3, #12
 8014b60:	2b08      	cmp	r3, #8
 8014b62:	d00d      	beq.n	8014b80 <HAL_RCC_GetSysClockFreq+0x40>
 8014b64:	2b08      	cmp	r3, #8
 8014b66:	f200 80bd 	bhi.w	8014ce4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d002      	beq.n	8014b74 <HAL_RCC_GetSysClockFreq+0x34>
 8014b6e:	2b04      	cmp	r3, #4
 8014b70:	d003      	beq.n	8014b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8014b72:	e0b7      	b.n	8014ce4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014b74:	4b61      	ldr	r3, [pc, #388]	; (8014cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014b76:	60bb      	str	r3, [r7, #8]
       break;
 8014b78:	e0b7      	b.n	8014cea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014b7a:	4b61      	ldr	r3, [pc, #388]	; (8014d00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8014b7c:	60bb      	str	r3, [r7, #8]
      break;
 8014b7e:	e0b4      	b.n	8014cea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014b80:	4b5d      	ldr	r3, [pc, #372]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014b8a:	4b5b      	ldr	r3, [pc, #364]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d04d      	beq.n	8014c32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014b96:	4b58      	ldr	r3, [pc, #352]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	099b      	lsrs	r3, r3, #6
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	f04f 0300 	mov.w	r3, #0
 8014ba2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014ba6:	f04f 0100 	mov.w	r1, #0
 8014baa:	ea02 0800 	and.w	r8, r2, r0
 8014bae:	ea03 0901 	and.w	r9, r3, r1
 8014bb2:	4640      	mov	r0, r8
 8014bb4:	4649      	mov	r1, r9
 8014bb6:	f04f 0200 	mov.w	r2, #0
 8014bba:	f04f 0300 	mov.w	r3, #0
 8014bbe:	014b      	lsls	r3, r1, #5
 8014bc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014bc4:	0142      	lsls	r2, r0, #5
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	4619      	mov	r1, r3
 8014bca:	ebb0 0008 	subs.w	r0, r0, r8
 8014bce:	eb61 0109 	sbc.w	r1, r1, r9
 8014bd2:	f04f 0200 	mov.w	r2, #0
 8014bd6:	f04f 0300 	mov.w	r3, #0
 8014bda:	018b      	lsls	r3, r1, #6
 8014bdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014be0:	0182      	lsls	r2, r0, #6
 8014be2:	1a12      	subs	r2, r2, r0
 8014be4:	eb63 0301 	sbc.w	r3, r3, r1
 8014be8:	f04f 0000 	mov.w	r0, #0
 8014bec:	f04f 0100 	mov.w	r1, #0
 8014bf0:	00d9      	lsls	r1, r3, #3
 8014bf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014bf6:	00d0      	lsls	r0, r2, #3
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	eb12 0208 	adds.w	r2, r2, r8
 8014c00:	eb43 0309 	adc.w	r3, r3, r9
 8014c04:	f04f 0000 	mov.w	r0, #0
 8014c08:	f04f 0100 	mov.w	r1, #0
 8014c0c:	0259      	lsls	r1, r3, #9
 8014c0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8014c12:	0250      	lsls	r0, r2, #9
 8014c14:	4602      	mov	r2, r0
 8014c16:	460b      	mov	r3, r1
 8014c18:	4610      	mov	r0, r2
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	f04f 0300 	mov.w	r3, #0
 8014c24:	f7ec f830 	bl	8000c88 <__aeabi_uldivmod>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	60fb      	str	r3, [r7, #12]
 8014c30:	e04a      	b.n	8014cc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014c32:	4b31      	ldr	r3, [pc, #196]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	099b      	lsrs	r3, r3, #6
 8014c38:	461a      	mov	r2, r3
 8014c3a:	f04f 0300 	mov.w	r3, #0
 8014c3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014c42:	f04f 0100 	mov.w	r1, #0
 8014c46:	ea02 0400 	and.w	r4, r2, r0
 8014c4a:	ea03 0501 	and.w	r5, r3, r1
 8014c4e:	4620      	mov	r0, r4
 8014c50:	4629      	mov	r1, r5
 8014c52:	f04f 0200 	mov.w	r2, #0
 8014c56:	f04f 0300 	mov.w	r3, #0
 8014c5a:	014b      	lsls	r3, r1, #5
 8014c5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014c60:	0142      	lsls	r2, r0, #5
 8014c62:	4610      	mov	r0, r2
 8014c64:	4619      	mov	r1, r3
 8014c66:	1b00      	subs	r0, r0, r4
 8014c68:	eb61 0105 	sbc.w	r1, r1, r5
 8014c6c:	f04f 0200 	mov.w	r2, #0
 8014c70:	f04f 0300 	mov.w	r3, #0
 8014c74:	018b      	lsls	r3, r1, #6
 8014c76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014c7a:	0182      	lsls	r2, r0, #6
 8014c7c:	1a12      	subs	r2, r2, r0
 8014c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8014c82:	f04f 0000 	mov.w	r0, #0
 8014c86:	f04f 0100 	mov.w	r1, #0
 8014c8a:	00d9      	lsls	r1, r3, #3
 8014c8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014c90:	00d0      	lsls	r0, r2, #3
 8014c92:	4602      	mov	r2, r0
 8014c94:	460b      	mov	r3, r1
 8014c96:	1912      	adds	r2, r2, r4
 8014c98:	eb45 0303 	adc.w	r3, r5, r3
 8014c9c:	f04f 0000 	mov.w	r0, #0
 8014ca0:	f04f 0100 	mov.w	r1, #0
 8014ca4:	0299      	lsls	r1, r3, #10
 8014ca6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8014caa:	0290      	lsls	r0, r2, #10
 8014cac:	4602      	mov	r2, r0
 8014cae:	460b      	mov	r3, r1
 8014cb0:	4610      	mov	r0, r2
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f04f 0300 	mov.w	r3, #0
 8014cbc:	f7eb ffe4 	bl	8000c88 <__aeabi_uldivmod>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014cc8:	4b0b      	ldr	r3, [pc, #44]	; (8014cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	0c1b      	lsrs	r3, r3, #16
 8014cce:	f003 0303 	and.w	r3, r3, #3
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ce0:	60bb      	str	r3, [r7, #8]
      break;
 8014ce2:	e002      	b.n	8014cea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014ce4:	4b05      	ldr	r3, [pc, #20]	; (8014cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014ce6:	60bb      	str	r3, [r7, #8]
      break;
 8014ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014cea:	68bb      	ldr	r3, [r7, #8]
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014cf6:	bf00      	nop
 8014cf8:	40023800 	.word	0x40023800
 8014cfc:	00f42400 	.word	0x00f42400
 8014d00:	007a1200 	.word	0x007a1200

08014d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014d04:	b480      	push	{r7}
 8014d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014d08:	4b03      	ldr	r3, [pc, #12]	; (8014d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr
 8014d16:	bf00      	nop
 8014d18:	20000054 	.word	0x20000054

08014d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014d20:	f7ff fff0 	bl	8014d04 <HAL_RCC_GetHCLKFreq>
 8014d24:	4602      	mov	r2, r0
 8014d26:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	0a9b      	lsrs	r3, r3, #10
 8014d2c:	f003 0307 	and.w	r3, r3, #7
 8014d30:	4903      	ldr	r1, [pc, #12]	; (8014d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014d32:	5ccb      	ldrb	r3, [r1, r3]
 8014d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	40023800 	.word	0x40023800
 8014d40:	080200e0 	.word	0x080200e0

08014d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014d48:	f7ff ffdc 	bl	8014d04 <HAL_RCC_GetHCLKFreq>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	4b05      	ldr	r3, [pc, #20]	; (8014d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014d50:	689b      	ldr	r3, [r3, #8]
 8014d52:	0b5b      	lsrs	r3, r3, #13
 8014d54:	f003 0307 	and.w	r3, r3, #7
 8014d58:	4903      	ldr	r1, [pc, #12]	; (8014d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014d5a:	5ccb      	ldrb	r3, [r1, r3]
 8014d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	bd80      	pop	{r7, pc}
 8014d64:	40023800 	.word	0x40023800
 8014d68:	080200e0 	.word	0x080200e0

08014d6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	220f      	movs	r2, #15
 8014d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014d7c:	4b12      	ldr	r3, [pc, #72]	; (8014dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8014d7e:	689b      	ldr	r3, [r3, #8]
 8014d80:	f003 0203 	and.w	r2, r3, #3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014d88:	4b0f      	ldr	r3, [pc, #60]	; (8014dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8014d8a:	689b      	ldr	r3, [r3, #8]
 8014d8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014d94:	4b0c      	ldr	r3, [pc, #48]	; (8014dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8014d96:	689b      	ldr	r3, [r3, #8]
 8014d98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8014da0:	4b09      	ldr	r3, [pc, #36]	; (8014dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8014da2:	689b      	ldr	r3, [r3, #8]
 8014da4:	08db      	lsrs	r3, r3, #3
 8014da6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014dae:	4b07      	ldr	r3, [pc, #28]	; (8014dcc <HAL_RCC_GetClockConfig+0x60>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f003 020f 	and.w	r2, r3, #15
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	601a      	str	r2, [r3, #0]
}
 8014dba:	bf00      	nop
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	40023800 	.word	0x40023800
 8014dcc:	40023c00 	.word	0x40023c00

08014dd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b088      	sub	sp, #32
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	689b      	ldr	r3, [r3, #8]
 8014de6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	099b      	lsrs	r3, r3, #6
 8014dec:	f003 0301 	and.w	r3, r3, #1
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10f      	bne.n	8014e14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00a      	beq.n	8014e14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014dfe:	69fb      	ldr	r3, [r7, #28]
 8014e00:	099b      	lsrs	r3, r3, #6
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d004      	beq.n	8014e14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	4798      	blx	r3
    return;
 8014e12:	e0d7      	b.n	8014fc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	085b      	lsrs	r3, r3, #1
 8014e18:	f003 0301 	and.w	r3, r3, #1
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d00a      	beq.n	8014e36 <HAL_SPI_IRQHandler+0x66>
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	09db      	lsrs	r3, r3, #7
 8014e24:	f003 0301 	and.w	r3, r3, #1
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d004      	beq.n	8014e36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	4798      	blx	r3
    return;
 8014e34:	e0c6      	b.n	8014fc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	095b      	lsrs	r3, r3, #5
 8014e3a:	f003 0301 	and.w	r3, r3, #1
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d10c      	bne.n	8014e5c <HAL_SPI_IRQHandler+0x8c>
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	099b      	lsrs	r3, r3, #6
 8014e46:	f003 0301 	and.w	r3, r3, #1
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d106      	bne.n	8014e5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014e4e:	69bb      	ldr	r3, [r7, #24]
 8014e50:	0a1b      	lsrs	r3, r3, #8
 8014e52:	f003 0301 	and.w	r3, r3, #1
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f000 80b4 	beq.w	8014fc4 <HAL_SPI_IRQHandler+0x1f4>
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	095b      	lsrs	r3, r3, #5
 8014e60:	f003 0301 	and.w	r3, r3, #1
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	f000 80ad 	beq.w	8014fc4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	099b      	lsrs	r3, r3, #6
 8014e6e:	f003 0301 	and.w	r3, r3, #1
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d023      	beq.n	8014ebe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	2b03      	cmp	r3, #3
 8014e80:	d011      	beq.n	8014ea6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e86:	f043 0204 	orr.w	r2, r3, #4
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e8e:	2300      	movs	r3, #0
 8014e90:	617b      	str	r3, [r7, #20]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	617b      	str	r3, [r7, #20]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	689b      	ldr	r3, [r3, #8]
 8014ea0:	617b      	str	r3, [r7, #20]
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	e00b      	b.n	8014ebe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	613b      	str	r3, [r7, #16]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	613b      	str	r3, [r7, #16]
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	689b      	ldr	r3, [r3, #8]
 8014eb8:	613b      	str	r3, [r7, #16]
 8014eba:	693b      	ldr	r3, [r7, #16]
        return;
 8014ebc:	e082      	b.n	8014fc4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014ebe:	69bb      	ldr	r3, [r7, #24]
 8014ec0:	095b      	lsrs	r3, r3, #5
 8014ec2:	f003 0301 	and.w	r3, r3, #1
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d014      	beq.n	8014ef4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ece:	f043 0201 	orr.w	r2, r3, #1
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	60fb      	str	r3, [r7, #12]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	689b      	ldr	r3, [r3, #8]
 8014ee0:	60fb      	str	r3, [r7, #12]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014ef4:	69bb      	ldr	r3, [r7, #24]
 8014ef6:	0a1b      	lsrs	r3, r3, #8
 8014ef8:	f003 0301 	and.w	r3, r3, #1
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d00c      	beq.n	8014f1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f04:	f043 0208 	orr.w	r2, r3, #8
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	60bb      	str	r3, [r7, #8]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	689b      	ldr	r3, [r3, #8]
 8014f16:	60bb      	str	r3, [r7, #8]
 8014f18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d04f      	beq.n	8014fc2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	685a      	ldr	r2, [r3, #4]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014f30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2201      	movs	r2, #1
 8014f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	f003 0302 	and.w	r3, r3, #2
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d104      	bne.n	8014f4e <HAL_SPI_IRQHandler+0x17e>
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	f003 0301 	and.w	r3, r3, #1
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d034      	beq.n	8014fb8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	685a      	ldr	r2, [r3, #4]
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	f022 0203 	bic.w	r2, r2, #3
 8014f5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d011      	beq.n	8014f8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f6a:	4a18      	ldr	r2, [pc, #96]	; (8014fcc <HAL_SPI_IRQHandler+0x1fc>)
 8014f6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fc fcca 	bl	801190c <HAL_DMA_Abort_IT>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d005      	beq.n	8014f8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d016      	beq.n	8014fc0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f96:	4a0d      	ldr	r2, [pc, #52]	; (8014fcc <HAL_SPI_IRQHandler+0x1fc>)
 8014f98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fc fcb4 	bl	801190c <HAL_DMA_Abort_IT>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d00a      	beq.n	8014fc0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014fb6:	e003      	b.n	8014fc0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f000 f809 	bl	8014fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014fbe:	e000      	b.n	8014fc2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014fc0:	bf00      	nop
    return;
 8014fc2:	bf00      	nop
  }
}
 8014fc4:	3720      	adds	r7, #32
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	08014fe5 	.word	0x08014fe5

08014fd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	b083      	sub	sp, #12
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014fd8:	bf00      	nop
 8014fda:	370c      	adds	r7, #12
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe2:	4770      	bx	lr

08014fe4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014ffe:	68f8      	ldr	r0, [r7, #12]
 8015000:	f7ff ffe6 	bl	8014fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015004:	bf00      	nop
 8015006:	3710      	adds	r7, #16
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d101      	bne.n	801501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801501a:	2301      	movs	r3, #1
 801501c:	e01d      	b.n	801505a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015024:	b2db      	uxtb	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d106      	bne.n	8015038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2200      	movs	r2, #0
 801502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7ed faaa 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2202      	movs	r2, #2
 801503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681a      	ldr	r2, [r3, #0]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	3304      	adds	r3, #4
 8015048:	4619      	mov	r1, r3
 801504a:	4610      	mov	r0, r2
 801504c:	f000 fc3e 	bl	80158cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2201      	movs	r2, #1
 8015054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3708      	adds	r7, #8
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015062:	b480      	push	{r7}
 8015064:	b085      	sub	sp, #20
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2202      	movs	r2, #2
 801506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	689b      	ldr	r3, [r3, #8]
 8015078:	f003 0307 	and.w	r3, r3, #7
 801507c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2b06      	cmp	r3, #6
 8015082:	d007      	beq.n	8015094 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f042 0201 	orr.w	r2, r2, #1
 8015092:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2201      	movs	r2, #1
 8015098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801509c:	2300      	movs	r3, #0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3714      	adds	r7, #20
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr

080150aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80150aa:	b480      	push	{r7}
 80150ac:	b085      	sub	sp, #20
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	68da      	ldr	r2, [r3, #12]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f042 0201 	orr.w	r2, r2, #1
 80150c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	f003 0307 	and.w	r3, r3, #7
 80150cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	2b06      	cmp	r3, #6
 80150d2:	d007      	beq.n	80150e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	681a      	ldr	r2, [r3, #0]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f042 0201 	orr.w	r2, r2, #1
 80150e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80150e4:	2300      	movs	r3, #0
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3714      	adds	r7, #20
 80150ea:	46bd      	mov	sp, r7
 80150ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f0:	4770      	bx	lr

080150f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b082      	sub	sp, #8
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d101      	bne.n	8015104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015100:	2301      	movs	r3, #1
 8015102:	e01d      	b.n	8015140 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801510a:	b2db      	uxtb	r3, r3
 801510c:	2b00      	cmp	r3, #0
 801510e:	d106      	bne.n	801511e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2200      	movs	r2, #0
 8015114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7ed f8f9 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2202      	movs	r2, #2
 8015122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	3304      	adds	r3, #4
 801512e:	4619      	mov	r1, r3
 8015130:	4610      	mov	r0, r2
 8015132:	f000 fbcb 	bl	80158cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2201      	movs	r2, #1
 801513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801513e:	2300      	movs	r3, #0
}
 8015140:	4618      	mov	r0, r3
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2201      	movs	r2, #1
 8015158:	6839      	ldr	r1, [r7, #0]
 801515a:	4618      	mov	r0, r3
 801515c:	f000 fea0 	bl	8015ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	4a15      	ldr	r2, [pc, #84]	; (80151bc <HAL_TIM_PWM_Start+0x74>)
 8015166:	4293      	cmp	r3, r2
 8015168:	d004      	beq.n	8015174 <HAL_TIM_PWM_Start+0x2c>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4a14      	ldr	r2, [pc, #80]	; (80151c0 <HAL_TIM_PWM_Start+0x78>)
 8015170:	4293      	cmp	r3, r2
 8015172:	d101      	bne.n	8015178 <HAL_TIM_PWM_Start+0x30>
 8015174:	2301      	movs	r3, #1
 8015176:	e000      	b.n	801517a <HAL_TIM_PWM_Start+0x32>
 8015178:	2300      	movs	r3, #0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d007      	beq.n	801518e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801518c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	f003 0307 	and.w	r3, r3, #7
 8015198:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2b06      	cmp	r3, #6
 801519e:	d007      	beq.n	80151b0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	f042 0201 	orr.w	r2, r2, #1
 80151ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3710      	adds	r7, #16
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	40010000 	.word	0x40010000
 80151c0:	40010400 	.word	0x40010400

080151c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b086      	sub	sp, #24
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d101      	bne.n	80151d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80151d4:	2301      	movs	r3, #1
 80151d6:	e083      	b.n	80152e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d106      	bne.n	80151f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2200      	movs	r2, #0
 80151e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f7ed fc81 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2202      	movs	r2, #2
 80151f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	689b      	ldr	r3, [r3, #8]
 8015200:	687a      	ldr	r2, [r7, #4]
 8015202:	6812      	ldr	r2, [r2, #0]
 8015204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015208:	f023 0307 	bic.w	r3, r3, #7
 801520c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3304      	adds	r3, #4
 8015216:	4619      	mov	r1, r3
 8015218:	4610      	mov	r0, r2
 801521a:	f000 fb57 	bl	80158cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	689b      	ldr	r3, [r3, #8]
 8015224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	699b      	ldr	r3, [r3, #24]
 801522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	6a1b      	ldr	r3, [r3, #32]
 8015234:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	697a      	ldr	r2, [r7, #20]
 801523c:	4313      	orrs	r3, r2
 801523e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015246:	f023 0303 	bic.w	r3, r3, #3
 801524a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	689a      	ldr	r2, [r3, #8]
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	699b      	ldr	r3, [r3, #24]
 8015254:	021b      	lsls	r3, r3, #8
 8015256:	4313      	orrs	r3, r2
 8015258:	693a      	ldr	r2, [r7, #16]
 801525a:	4313      	orrs	r3, r2
 801525c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8015264:	f023 030c 	bic.w	r3, r3, #12
 8015268:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	68da      	ldr	r2, [r3, #12]
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	69db      	ldr	r3, [r3, #28]
 801527e:	021b      	lsls	r3, r3, #8
 8015280:	4313      	orrs	r3, r2
 8015282:	693a      	ldr	r2, [r7, #16]
 8015284:	4313      	orrs	r3, r2
 8015286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	691b      	ldr	r3, [r3, #16]
 801528c:	011a      	lsls	r2, r3, #4
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	6a1b      	ldr	r3, [r3, #32]
 8015292:	031b      	lsls	r3, r3, #12
 8015294:	4313      	orrs	r3, r2
 8015296:	693a      	ldr	r2, [r7, #16]
 8015298:	4313      	orrs	r3, r2
 801529a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80152a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80152aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	685a      	ldr	r2, [r3, #4]
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	695b      	ldr	r3, [r3, #20]
 80152b4:	011b      	lsls	r3, r3, #4
 80152b6:	4313      	orrs	r3, r2
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	4313      	orrs	r3, r2
 80152bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	697a      	ldr	r2, [r7, #20]
 80152c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	693a      	ldr	r2, [r7, #16]
 80152cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2201      	movs	r2, #1
 80152da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80152de:	2300      	movs	r3, #0
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	3718      	adds	r7, #24
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d003      	beq.n	8015300 <HAL_TIM_Encoder_Start+0x18>
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b04      	cmp	r3, #4
 80152fc:	d008      	beq.n	8015310 <HAL_TIM_Encoder_Start+0x28>
 80152fe:	e00f      	b.n	8015320 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2201      	movs	r2, #1
 8015306:	2100      	movs	r1, #0
 8015308:	4618      	mov	r0, r3
 801530a:	f000 fdc9 	bl	8015ea0 <TIM_CCxChannelCmd>
      break;
 801530e:	e016      	b.n	801533e <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	2201      	movs	r2, #1
 8015316:	2104      	movs	r1, #4
 8015318:	4618      	mov	r0, r3
 801531a:	f000 fdc1 	bl	8015ea0 <TIM_CCxChannelCmd>
      break;
 801531e:	e00e      	b.n	801533e <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2201      	movs	r2, #1
 8015326:	2100      	movs	r1, #0
 8015328:	4618      	mov	r0, r3
 801532a:	f000 fdb9 	bl	8015ea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2201      	movs	r2, #1
 8015334:	2104      	movs	r1, #4
 8015336:	4618      	mov	r0, r3
 8015338:	f000 fdb2 	bl	8015ea0 <TIM_CCxChannelCmd>
      break;
 801533c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f042 0201 	orr.w	r2, r2, #1
 801534c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801534e:	2300      	movs	r3, #0
}
 8015350:	4618      	mov	r0, r3
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	691b      	ldr	r3, [r3, #16]
 8015366:	f003 0302 	and.w	r3, r3, #2
 801536a:	2b02      	cmp	r3, #2
 801536c:	d122      	bne.n	80153b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	f003 0302 	and.w	r3, r3, #2
 8015378:	2b02      	cmp	r3, #2
 801537a:	d11b      	bne.n	80153b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f06f 0202 	mvn.w	r2, #2
 8015384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2201      	movs	r2, #1
 801538a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	699b      	ldr	r3, [r3, #24]
 8015392:	f003 0303 	and.w	r3, r3, #3
 8015396:	2b00      	cmp	r3, #0
 8015398:	d003      	beq.n	80153a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 fa78 	bl	8015890 <HAL_TIM_IC_CaptureCallback>
 80153a0:	e005      	b.n	80153ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f000 fa6a 	bl	801587c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f000 fa7b 	bl	80158a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2200      	movs	r2, #0
 80153b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	691b      	ldr	r3, [r3, #16]
 80153ba:	f003 0304 	and.w	r3, r3, #4
 80153be:	2b04      	cmp	r3, #4
 80153c0:	d122      	bne.n	8015408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	f003 0304 	and.w	r3, r3, #4
 80153cc:	2b04      	cmp	r3, #4
 80153ce:	d11b      	bne.n	8015408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f06f 0204 	mvn.w	r2, #4
 80153d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2202      	movs	r2, #2
 80153de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	699b      	ldr	r3, [r3, #24]
 80153e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d003      	beq.n	80153f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 fa4e 	bl	8015890 <HAL_TIM_IC_CaptureCallback>
 80153f4:	e005      	b.n	8015402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f000 fa40 	bl	801587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 fa51 	bl	80158a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	691b      	ldr	r3, [r3, #16]
 801540e:	f003 0308 	and.w	r3, r3, #8
 8015412:	2b08      	cmp	r3, #8
 8015414:	d122      	bne.n	801545c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	f003 0308 	and.w	r3, r3, #8
 8015420:	2b08      	cmp	r3, #8
 8015422:	d11b      	bne.n	801545c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	f06f 0208 	mvn.w	r2, #8
 801542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2204      	movs	r2, #4
 8015432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	69db      	ldr	r3, [r3, #28]
 801543a:	f003 0303 	and.w	r3, r3, #3
 801543e:	2b00      	cmp	r3, #0
 8015440:	d003      	beq.n	801544a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 fa24 	bl	8015890 <HAL_TIM_IC_CaptureCallback>
 8015448:	e005      	b.n	8015456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f000 fa16 	bl	801587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f000 fa27 	bl	80158a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2200      	movs	r2, #0
 801545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	691b      	ldr	r3, [r3, #16]
 8015462:	f003 0310 	and.w	r3, r3, #16
 8015466:	2b10      	cmp	r3, #16
 8015468:	d122      	bne.n	80154b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	f003 0310 	and.w	r3, r3, #16
 8015474:	2b10      	cmp	r3, #16
 8015476:	d11b      	bne.n	80154b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	f06f 0210 	mvn.w	r2, #16
 8015480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2208      	movs	r2, #8
 8015486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	69db      	ldr	r3, [r3, #28]
 801548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015492:	2b00      	cmp	r3, #0
 8015494:	d003      	beq.n	801549e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 f9fa 	bl	8015890 <HAL_TIM_IC_CaptureCallback>
 801549c:	e005      	b.n	80154aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f000 f9ec 	bl	801587c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f000 f9fd 	bl	80158a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2200      	movs	r2, #0
 80154ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	f003 0301 	and.w	r3, r3, #1
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	d10e      	bne.n	80154dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	f003 0301 	and.w	r3, r3, #1
 80154c8:	2b01      	cmp	r3, #1
 80154ca:	d107      	bne.n	80154dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	f06f 0201 	mvn.w	r2, #1
 80154d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f7f7 fc1c 	bl	800cd14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	691b      	ldr	r3, [r3, #16]
 80154e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154e6:	2b80      	cmp	r3, #128	; 0x80
 80154e8:	d10e      	bne.n	8015508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80154f4:	2b80      	cmp	r3, #128	; 0x80
 80154f6:	d107      	bne.n	8015508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f000 fd78 	bl	8015ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	691b      	ldr	r3, [r3, #16]
 801550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015512:	2b40      	cmp	r3, #64	; 0x40
 8015514:	d10e      	bne.n	8015534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015520:	2b40      	cmp	r3, #64	; 0x40
 8015522:	d107      	bne.n	8015534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f000 f9c2 	bl	80158b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	691b      	ldr	r3, [r3, #16]
 801553a:	f003 0320 	and.w	r3, r3, #32
 801553e:	2b20      	cmp	r3, #32
 8015540:	d10e      	bne.n	8015560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	68db      	ldr	r3, [r3, #12]
 8015548:	f003 0320 	and.w	r3, r3, #32
 801554c:	2b20      	cmp	r3, #32
 801554e:	d107      	bne.n	8015560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	f06f 0220 	mvn.w	r2, #32
 8015558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f000 fd42 	bl	8015fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015560:	bf00      	nop
 8015562:	3708      	adds	r7, #8
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801557a:	2b01      	cmp	r3, #1
 801557c:	d101      	bne.n	8015582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801557e:	2302      	movs	r3, #2
 8015580:	e0b4      	b.n	80156ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2201      	movs	r2, #1
 8015586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2202      	movs	r2, #2
 801558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2b0c      	cmp	r3, #12
 8015596:	f200 809f 	bhi.w	80156d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 801559a:	a201      	add	r2, pc, #4	; (adr r2, 80155a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155a0:	080155d5 	.word	0x080155d5
 80155a4:	080156d9 	.word	0x080156d9
 80155a8:	080156d9 	.word	0x080156d9
 80155ac:	080156d9 	.word	0x080156d9
 80155b0:	08015615 	.word	0x08015615
 80155b4:	080156d9 	.word	0x080156d9
 80155b8:	080156d9 	.word	0x080156d9
 80155bc:	080156d9 	.word	0x080156d9
 80155c0:	08015657 	.word	0x08015657
 80155c4:	080156d9 	.word	0x080156d9
 80155c8:	080156d9 	.word	0x080156d9
 80155cc:	080156d9 	.word	0x080156d9
 80155d0:	08015697 	.word	0x08015697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	68b9      	ldr	r1, [r7, #8]
 80155da:	4618      	mov	r0, r3
 80155dc:	f000 fa16 	bl	8015a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	699a      	ldr	r2, [r3, #24]
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	f042 0208 	orr.w	r2, r2, #8
 80155ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	699a      	ldr	r2, [r3, #24]
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	f022 0204 	bic.w	r2, r2, #4
 80155fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	6999      	ldr	r1, [r3, #24]
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	691a      	ldr	r2, [r3, #16]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	430a      	orrs	r2, r1
 8015610:	619a      	str	r2, [r3, #24]
      break;
 8015612:	e062      	b.n	80156da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	68b9      	ldr	r1, [r7, #8]
 801561a:	4618      	mov	r0, r3
 801561c:	f000 fa66 	bl	8015aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	699a      	ldr	r2, [r3, #24]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801562e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	699a      	ldr	r2, [r3, #24]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801563e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	6999      	ldr	r1, [r3, #24]
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	691b      	ldr	r3, [r3, #16]
 801564a:	021a      	lsls	r2, r3, #8
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	430a      	orrs	r2, r1
 8015652:	619a      	str	r2, [r3, #24]
      break;
 8015654:	e041      	b.n	80156da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	68b9      	ldr	r1, [r7, #8]
 801565c:	4618      	mov	r0, r3
 801565e:	f000 fabb 	bl	8015bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	69da      	ldr	r2, [r3, #28]
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f042 0208 	orr.w	r2, r2, #8
 8015670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	69da      	ldr	r2, [r3, #28]
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f022 0204 	bic.w	r2, r2, #4
 8015680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	69d9      	ldr	r1, [r3, #28]
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	691a      	ldr	r2, [r3, #16]
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	430a      	orrs	r2, r1
 8015692:	61da      	str	r2, [r3, #28]
      break;
 8015694:	e021      	b.n	80156da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	68b9      	ldr	r1, [r7, #8]
 801569c:	4618      	mov	r0, r3
 801569e:	f000 fb0f 	bl	8015cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	69da      	ldr	r2, [r3, #28]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80156b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	69da      	ldr	r2, [r3, #28]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80156c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	69d9      	ldr	r1, [r3, #28]
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	691b      	ldr	r3, [r3, #16]
 80156cc:	021a      	lsls	r2, r3, #8
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	430a      	orrs	r2, r1
 80156d4:	61da      	str	r2, [r3, #28]
      break;
 80156d6:	e000      	b.n	80156da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80156d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2201      	movs	r2, #1
 80156de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2200      	movs	r2, #0
 80156e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3710      	adds	r7, #16
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015704:	2b01      	cmp	r3, #1
 8015706:	d101      	bne.n	801570c <HAL_TIM_ConfigClockSource+0x18>
 8015708:	2302      	movs	r3, #2
 801570a:	e0b3      	b.n	8015874 <HAL_TIM_ConfigClockSource+0x180>
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2201      	movs	r2, #1
 8015710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2202      	movs	r2, #2
 8015718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	689b      	ldr	r3, [r3, #8]
 8015722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801572a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	68fa      	ldr	r2, [r7, #12]
 801573a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015744:	d03e      	beq.n	80157c4 <HAL_TIM_ConfigClockSource+0xd0>
 8015746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801574a:	f200 8087 	bhi.w	801585c <HAL_TIM_ConfigClockSource+0x168>
 801574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015752:	f000 8085 	beq.w	8015860 <HAL_TIM_ConfigClockSource+0x16c>
 8015756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801575a:	d87f      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 801575c:	2b70      	cmp	r3, #112	; 0x70
 801575e:	d01a      	beq.n	8015796 <HAL_TIM_ConfigClockSource+0xa2>
 8015760:	2b70      	cmp	r3, #112	; 0x70
 8015762:	d87b      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 8015764:	2b60      	cmp	r3, #96	; 0x60
 8015766:	d050      	beq.n	801580a <HAL_TIM_ConfigClockSource+0x116>
 8015768:	2b60      	cmp	r3, #96	; 0x60
 801576a:	d877      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 801576c:	2b50      	cmp	r3, #80	; 0x50
 801576e:	d03c      	beq.n	80157ea <HAL_TIM_ConfigClockSource+0xf6>
 8015770:	2b50      	cmp	r3, #80	; 0x50
 8015772:	d873      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 8015774:	2b40      	cmp	r3, #64	; 0x40
 8015776:	d058      	beq.n	801582a <HAL_TIM_ConfigClockSource+0x136>
 8015778:	2b40      	cmp	r3, #64	; 0x40
 801577a:	d86f      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 801577c:	2b30      	cmp	r3, #48	; 0x30
 801577e:	d064      	beq.n	801584a <HAL_TIM_ConfigClockSource+0x156>
 8015780:	2b30      	cmp	r3, #48	; 0x30
 8015782:	d86b      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 8015784:	2b20      	cmp	r3, #32
 8015786:	d060      	beq.n	801584a <HAL_TIM_ConfigClockSource+0x156>
 8015788:	2b20      	cmp	r3, #32
 801578a:	d867      	bhi.n	801585c <HAL_TIM_ConfigClockSource+0x168>
 801578c:	2b00      	cmp	r3, #0
 801578e:	d05c      	beq.n	801584a <HAL_TIM_ConfigClockSource+0x156>
 8015790:	2b10      	cmp	r3, #16
 8015792:	d05a      	beq.n	801584a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8015794:	e062      	b.n	801585c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	6818      	ldr	r0, [r3, #0]
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	6899      	ldr	r1, [r3, #8]
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	685a      	ldr	r2, [r3, #4]
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	f000 fb5b 	bl	8015e60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	689b      	ldr	r3, [r3, #8]
 80157b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80157b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	609a      	str	r2, [r3, #8]
      break;
 80157c2:	e04e      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6818      	ldr	r0, [r3, #0]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	6899      	ldr	r1, [r3, #8]
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	685a      	ldr	r2, [r3, #4]
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	f000 fb44 	bl	8015e60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	689a      	ldr	r2, [r3, #8]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80157e6:	609a      	str	r2, [r3, #8]
      break;
 80157e8:	e03b      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	6859      	ldr	r1, [r3, #4]
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	461a      	mov	r2, r3
 80157f8:	f000 fab8 	bl	8015d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2150      	movs	r1, #80	; 0x50
 8015802:	4618      	mov	r0, r3
 8015804:	f000 fb11 	bl	8015e2a <TIM_ITRx_SetConfig>
      break;
 8015808:	e02b      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6818      	ldr	r0, [r3, #0]
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	6859      	ldr	r1, [r3, #4]
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	461a      	mov	r2, r3
 8015818:	f000 fad7 	bl	8015dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2160      	movs	r1, #96	; 0x60
 8015822:	4618      	mov	r0, r3
 8015824:	f000 fb01 	bl	8015e2a <TIM_ITRx_SetConfig>
      break;
 8015828:	e01b      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6818      	ldr	r0, [r3, #0]
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	6859      	ldr	r1, [r3, #4]
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	461a      	mov	r2, r3
 8015838:	f000 fa98 	bl	8015d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	2140      	movs	r1, #64	; 0x40
 8015842:	4618      	mov	r0, r3
 8015844:	f000 faf1 	bl	8015e2a <TIM_ITRx_SetConfig>
      break;
 8015848:	e00b      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	4619      	mov	r1, r3
 8015854:	4610      	mov	r0, r2
 8015856:	f000 fae8 	bl	8015e2a <TIM_ITRx_SetConfig>
      break;
 801585a:	e002      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801585c:	bf00      	nop
 801585e:	e000      	b.n	8015862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	2201      	movs	r2, #1
 8015866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2200      	movs	r2, #0
 801586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015872:	2300      	movs	r3, #0
}
 8015874:	4618      	mov	r0, r3
 8015876:	3710      	adds	r7, #16
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801587c:	b480      	push	{r7}
 801587e:	b083      	sub	sp, #12
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015884:	bf00      	nop
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b083      	sub	sp, #12
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80158ac:	bf00      	nop
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr

080158b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80158c0:	bf00      	nop
 80158c2:	370c      	adds	r7, #12
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr

080158cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b085      	sub	sp, #20
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	4a40      	ldr	r2, [pc, #256]	; (80159e0 <TIM_Base_SetConfig+0x114>)
 80158e0:	4293      	cmp	r3, r2
 80158e2:	d013      	beq.n	801590c <TIM_Base_SetConfig+0x40>
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158ea:	d00f      	beq.n	801590c <TIM_Base_SetConfig+0x40>
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	4a3d      	ldr	r2, [pc, #244]	; (80159e4 <TIM_Base_SetConfig+0x118>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d00b      	beq.n	801590c <TIM_Base_SetConfig+0x40>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	4a3c      	ldr	r2, [pc, #240]	; (80159e8 <TIM_Base_SetConfig+0x11c>)
 80158f8:	4293      	cmp	r3, r2
 80158fa:	d007      	beq.n	801590c <TIM_Base_SetConfig+0x40>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	4a3b      	ldr	r2, [pc, #236]	; (80159ec <TIM_Base_SetConfig+0x120>)
 8015900:	4293      	cmp	r3, r2
 8015902:	d003      	beq.n	801590c <TIM_Base_SetConfig+0x40>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4a3a      	ldr	r2, [pc, #232]	; (80159f0 <TIM_Base_SetConfig+0x124>)
 8015908:	4293      	cmp	r3, r2
 801590a:	d108      	bne.n	801591e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	685b      	ldr	r3, [r3, #4]
 8015918:	68fa      	ldr	r2, [r7, #12]
 801591a:	4313      	orrs	r3, r2
 801591c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	4a2f      	ldr	r2, [pc, #188]	; (80159e0 <TIM_Base_SetConfig+0x114>)
 8015922:	4293      	cmp	r3, r2
 8015924:	d02b      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801592c:	d027      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	4a2c      	ldr	r2, [pc, #176]	; (80159e4 <TIM_Base_SetConfig+0x118>)
 8015932:	4293      	cmp	r3, r2
 8015934:	d023      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	4a2b      	ldr	r2, [pc, #172]	; (80159e8 <TIM_Base_SetConfig+0x11c>)
 801593a:	4293      	cmp	r3, r2
 801593c:	d01f      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	4a2a      	ldr	r2, [pc, #168]	; (80159ec <TIM_Base_SetConfig+0x120>)
 8015942:	4293      	cmp	r3, r2
 8015944:	d01b      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	4a29      	ldr	r2, [pc, #164]	; (80159f0 <TIM_Base_SetConfig+0x124>)
 801594a:	4293      	cmp	r3, r2
 801594c:	d017      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	4a28      	ldr	r2, [pc, #160]	; (80159f4 <TIM_Base_SetConfig+0x128>)
 8015952:	4293      	cmp	r3, r2
 8015954:	d013      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	4a27      	ldr	r2, [pc, #156]	; (80159f8 <TIM_Base_SetConfig+0x12c>)
 801595a:	4293      	cmp	r3, r2
 801595c:	d00f      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	4a26      	ldr	r2, [pc, #152]	; (80159fc <TIM_Base_SetConfig+0x130>)
 8015962:	4293      	cmp	r3, r2
 8015964:	d00b      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	4a25      	ldr	r2, [pc, #148]	; (8015a00 <TIM_Base_SetConfig+0x134>)
 801596a:	4293      	cmp	r3, r2
 801596c:	d007      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	4a24      	ldr	r2, [pc, #144]	; (8015a04 <TIM_Base_SetConfig+0x138>)
 8015972:	4293      	cmp	r3, r2
 8015974:	d003      	beq.n	801597e <TIM_Base_SetConfig+0xb2>
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	4a23      	ldr	r2, [pc, #140]	; (8015a08 <TIM_Base_SetConfig+0x13c>)
 801597a:	4293      	cmp	r3, r2
 801597c:	d108      	bne.n	8015990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	4313      	orrs	r3, r2
 801598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	695b      	ldr	r3, [r3, #20]
 801599a:	4313      	orrs	r3, r2
 801599c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	68fa      	ldr	r2, [r7, #12]
 80159a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	689a      	ldr	r2, [r3, #8]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	4a0a      	ldr	r2, [pc, #40]	; (80159e0 <TIM_Base_SetConfig+0x114>)
 80159b8:	4293      	cmp	r3, r2
 80159ba:	d003      	beq.n	80159c4 <TIM_Base_SetConfig+0xf8>
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	4a0c      	ldr	r2, [pc, #48]	; (80159f0 <TIM_Base_SetConfig+0x124>)
 80159c0:	4293      	cmp	r3, r2
 80159c2:	d103      	bne.n	80159cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	691a      	ldr	r2, [r3, #16]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	2201      	movs	r2, #1
 80159d0:	615a      	str	r2, [r3, #20]
}
 80159d2:	bf00      	nop
 80159d4:	3714      	adds	r7, #20
 80159d6:	46bd      	mov	sp, r7
 80159d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159dc:	4770      	bx	lr
 80159de:	bf00      	nop
 80159e0:	40010000 	.word	0x40010000
 80159e4:	40000400 	.word	0x40000400
 80159e8:	40000800 	.word	0x40000800
 80159ec:	40000c00 	.word	0x40000c00
 80159f0:	40010400 	.word	0x40010400
 80159f4:	40014000 	.word	0x40014000
 80159f8:	40014400 	.word	0x40014400
 80159fc:	40014800 	.word	0x40014800
 8015a00:	40001800 	.word	0x40001800
 8015a04:	40001c00 	.word	0x40001c00
 8015a08:	40002000 	.word	0x40002000

08015a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b087      	sub	sp, #28
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6a1b      	ldr	r3, [r3, #32]
 8015a1a:	f023 0201 	bic.w	r2, r3, #1
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a1b      	ldr	r3, [r3, #32]
 8015a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	699b      	ldr	r3, [r3, #24]
 8015a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	f023 0303 	bic.w	r3, r3, #3
 8015a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	68fa      	ldr	r2, [r7, #12]
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	f023 0302 	bic.w	r3, r3, #2
 8015a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	689b      	ldr	r3, [r3, #8]
 8015a5a:	697a      	ldr	r2, [r7, #20]
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	4a20      	ldr	r2, [pc, #128]	; (8015ae4 <TIM_OC1_SetConfig+0xd8>)
 8015a64:	4293      	cmp	r3, r2
 8015a66:	d003      	beq.n	8015a70 <TIM_OC1_SetConfig+0x64>
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	4a1f      	ldr	r2, [pc, #124]	; (8015ae8 <TIM_OC1_SetConfig+0xdc>)
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d10c      	bne.n	8015a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	f023 0308 	bic.w	r3, r3, #8
 8015a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	697a      	ldr	r2, [r7, #20]
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	f023 0304 	bic.w	r3, r3, #4
 8015a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	4a15      	ldr	r2, [pc, #84]	; (8015ae4 <TIM_OC1_SetConfig+0xd8>)
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	d003      	beq.n	8015a9a <TIM_OC1_SetConfig+0x8e>
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4a14      	ldr	r2, [pc, #80]	; (8015ae8 <TIM_OC1_SetConfig+0xdc>)
 8015a96:	4293      	cmp	r3, r2
 8015a98:	d111      	bne.n	8015abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	695b      	ldr	r3, [r3, #20]
 8015aae:	693a      	ldr	r2, [r7, #16]
 8015ab0:	4313      	orrs	r3, r2
 8015ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	699b      	ldr	r3, [r3, #24]
 8015ab8:	693a      	ldr	r2, [r7, #16]
 8015aba:	4313      	orrs	r3, r2
 8015abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	693a      	ldr	r2, [r7, #16]
 8015ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	68fa      	ldr	r2, [r7, #12]
 8015ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	685a      	ldr	r2, [r3, #4]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	697a      	ldr	r2, [r7, #20]
 8015ad6:	621a      	str	r2, [r3, #32]
}
 8015ad8:	bf00      	nop
 8015ada:	371c      	adds	r7, #28
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr
 8015ae4:	40010000 	.word	0x40010000
 8015ae8:	40010400 	.word	0x40010400

08015aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b087      	sub	sp, #28
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	6a1b      	ldr	r3, [r3, #32]
 8015afa:	f023 0210 	bic.w	r2, r3, #16
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6a1b      	ldr	r3, [r3, #32]
 8015b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	699b      	ldr	r3, [r3, #24]
 8015b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	021b      	lsls	r3, r3, #8
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	4313      	orrs	r3, r2
 8015b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	f023 0320 	bic.w	r3, r3, #32
 8015b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	011b      	lsls	r3, r3, #4
 8015b3e:	697a      	ldr	r2, [r7, #20]
 8015b40:	4313      	orrs	r3, r2
 8015b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	4a22      	ldr	r2, [pc, #136]	; (8015bd0 <TIM_OC2_SetConfig+0xe4>)
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	d003      	beq.n	8015b54 <TIM_OC2_SetConfig+0x68>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	4a21      	ldr	r2, [pc, #132]	; (8015bd4 <TIM_OC2_SetConfig+0xe8>)
 8015b50:	4293      	cmp	r3, r2
 8015b52:	d10d      	bne.n	8015b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	011b      	lsls	r3, r3, #4
 8015b62:	697a      	ldr	r2, [r7, #20]
 8015b64:	4313      	orrs	r3, r2
 8015b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	4a17      	ldr	r2, [pc, #92]	; (8015bd0 <TIM_OC2_SetConfig+0xe4>)
 8015b74:	4293      	cmp	r3, r2
 8015b76:	d003      	beq.n	8015b80 <TIM_OC2_SetConfig+0x94>
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	4a16      	ldr	r2, [pc, #88]	; (8015bd4 <TIM_OC2_SetConfig+0xe8>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d113      	bne.n	8015ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	695b      	ldr	r3, [r3, #20]
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	693a      	ldr	r2, [r7, #16]
 8015b98:	4313      	orrs	r3, r2
 8015b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	699b      	ldr	r3, [r3, #24]
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	693a      	ldr	r2, [r7, #16]
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	693a      	ldr	r2, [r7, #16]
 8015bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	685a      	ldr	r2, [r3, #4]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	697a      	ldr	r2, [r7, #20]
 8015bc0:	621a      	str	r2, [r3, #32]
}
 8015bc2:	bf00      	nop
 8015bc4:	371c      	adds	r7, #28
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop
 8015bd0:	40010000 	.word	0x40010000
 8015bd4:	40010400 	.word	0x40010400

08015bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b087      	sub	sp, #28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	6a1b      	ldr	r3, [r3, #32]
 8015be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6a1b      	ldr	r3, [r3, #32]
 8015bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	69db      	ldr	r3, [r3, #28]
 8015bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f023 0303 	bic.w	r3, r3, #3
 8015c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	68fa      	ldr	r2, [r7, #12]
 8015c16:	4313      	orrs	r3, r2
 8015c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	021b      	lsls	r3, r3, #8
 8015c28:	697a      	ldr	r2, [r7, #20]
 8015c2a:	4313      	orrs	r3, r2
 8015c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4a21      	ldr	r2, [pc, #132]	; (8015cb8 <TIM_OC3_SetConfig+0xe0>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d003      	beq.n	8015c3e <TIM_OC3_SetConfig+0x66>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4a20      	ldr	r2, [pc, #128]	; (8015cbc <TIM_OC3_SetConfig+0xe4>)
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d10d      	bne.n	8015c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	68db      	ldr	r3, [r3, #12]
 8015c4a:	021b      	lsls	r3, r3, #8
 8015c4c:	697a      	ldr	r2, [r7, #20]
 8015c4e:	4313      	orrs	r3, r2
 8015c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	4a16      	ldr	r2, [pc, #88]	; (8015cb8 <TIM_OC3_SetConfig+0xe0>)
 8015c5e:	4293      	cmp	r3, r2
 8015c60:	d003      	beq.n	8015c6a <TIM_OC3_SetConfig+0x92>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4a15      	ldr	r2, [pc, #84]	; (8015cbc <TIM_OC3_SetConfig+0xe4>)
 8015c66:	4293      	cmp	r3, r2
 8015c68:	d113      	bne.n	8015c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015c72:	693b      	ldr	r3, [r7, #16]
 8015c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	695b      	ldr	r3, [r3, #20]
 8015c7e:	011b      	lsls	r3, r3, #4
 8015c80:	693a      	ldr	r2, [r7, #16]
 8015c82:	4313      	orrs	r3, r2
 8015c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	699b      	ldr	r3, [r3, #24]
 8015c8a:	011b      	lsls	r3, r3, #4
 8015c8c:	693a      	ldr	r2, [r7, #16]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	693a      	ldr	r2, [r7, #16]
 8015c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	685a      	ldr	r2, [r3, #4]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	697a      	ldr	r2, [r7, #20]
 8015caa:	621a      	str	r2, [r3, #32]
}
 8015cac:	bf00      	nop
 8015cae:	371c      	adds	r7, #28
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	40010000 	.word	0x40010000
 8015cbc:	40010400 	.word	0x40010400

08015cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b087      	sub	sp, #28
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6a1b      	ldr	r3, [r3, #32]
 8015cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6a1b      	ldr	r3, [r3, #32]
 8015cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	69db      	ldr	r3, [r3, #28]
 8015ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	021b      	lsls	r3, r3, #8
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	4313      	orrs	r3, r2
 8015d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	031b      	lsls	r3, r3, #12
 8015d12:	693a      	ldr	r2, [r7, #16]
 8015d14:	4313      	orrs	r3, r2
 8015d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	4a12      	ldr	r2, [pc, #72]	; (8015d64 <TIM_OC4_SetConfig+0xa4>)
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d003      	beq.n	8015d28 <TIM_OC4_SetConfig+0x68>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4a11      	ldr	r2, [pc, #68]	; (8015d68 <TIM_OC4_SetConfig+0xa8>)
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d109      	bne.n	8015d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	695b      	ldr	r3, [r3, #20]
 8015d34:	019b      	lsls	r3, r3, #6
 8015d36:	697a      	ldr	r2, [r7, #20]
 8015d38:	4313      	orrs	r3, r2
 8015d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	697a      	ldr	r2, [r7, #20]
 8015d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	68fa      	ldr	r2, [r7, #12]
 8015d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	685a      	ldr	r2, [r3, #4]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	693a      	ldr	r2, [r7, #16]
 8015d54:	621a      	str	r2, [r3, #32]
}
 8015d56:	bf00      	nop
 8015d58:	371c      	adds	r7, #28
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	40010000 	.word	0x40010000
 8015d68:	40010400 	.word	0x40010400

08015d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	b087      	sub	sp, #28
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	6a1b      	ldr	r3, [r3, #32]
 8015d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	6a1b      	ldr	r3, [r3, #32]
 8015d82:	f023 0201 	bic.w	r2, r3, #1
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	699b      	ldr	r3, [r3, #24]
 8015d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	011b      	lsls	r3, r3, #4
 8015d9c:	693a      	ldr	r2, [r7, #16]
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	f023 030a 	bic.w	r3, r3, #10
 8015da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015daa:	697a      	ldr	r2, [r7, #20]
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	4313      	orrs	r3, r2
 8015db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	693a      	ldr	r2, [r7, #16]
 8015db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	697a      	ldr	r2, [r7, #20]
 8015dbc:	621a      	str	r2, [r3, #32]
}
 8015dbe:	bf00      	nop
 8015dc0:	371c      	adds	r7, #28
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr

08015dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015dca:	b480      	push	{r7}
 8015dcc:	b087      	sub	sp, #28
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	60b9      	str	r1, [r7, #8]
 8015dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	6a1b      	ldr	r3, [r3, #32]
 8015dda:	f023 0210 	bic.w	r2, r3, #16
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	699b      	ldr	r3, [r3, #24]
 8015de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	6a1b      	ldr	r3, [r3, #32]
 8015dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	031b      	lsls	r3, r3, #12
 8015dfa:	697a      	ldr	r2, [r7, #20]
 8015dfc:	4313      	orrs	r3, r2
 8015dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	011b      	lsls	r3, r3, #4
 8015e0c:	693a      	ldr	r2, [r7, #16]
 8015e0e:	4313      	orrs	r3, r2
 8015e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	697a      	ldr	r2, [r7, #20]
 8015e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	693a      	ldr	r2, [r7, #16]
 8015e1c:	621a      	str	r2, [r3, #32]
}
 8015e1e:	bf00      	nop
 8015e20:	371c      	adds	r7, #28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e28:	4770      	bx	lr

08015e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015e2a:	b480      	push	{r7}
 8015e2c:	b085      	sub	sp, #20
 8015e2e:	af00      	add	r7, sp, #0
 8015e30:	6078      	str	r0, [r7, #4]
 8015e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015e42:	683a      	ldr	r2, [r7, #0]
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	4313      	orrs	r3, r2
 8015e48:	f043 0307 	orr.w	r3, r3, #7
 8015e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	609a      	str	r2, [r3, #8]
}
 8015e54:	bf00      	nop
 8015e56:	3714      	adds	r7, #20
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5e:	4770      	bx	lr

08015e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b087      	sub	sp, #28
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
 8015e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	689b      	ldr	r3, [r3, #8]
 8015e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	021a      	lsls	r2, r3, #8
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	431a      	orrs	r2, r3
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	4313      	orrs	r3, r2
 8015e88:	697a      	ldr	r2, [r7, #20]
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	697a      	ldr	r2, [r7, #20]
 8015e92:	609a      	str	r2, [r3, #8]
}
 8015e94:	bf00      	nop
 8015e96:	371c      	adds	r7, #28
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr

08015ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b087      	sub	sp, #28
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	f003 031f 	and.w	r3, r3, #31
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8015eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6a1a      	ldr	r2, [r3, #32]
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	43db      	mvns	r3, r3
 8015ec2:	401a      	ands	r2, r3
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	6a1a      	ldr	r2, [r3, #32]
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	f003 031f 	and.w	r3, r3, #31
 8015ed2:	6879      	ldr	r1, [r7, #4]
 8015ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8015ed8:	431a      	orrs	r2, r3
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	621a      	str	r2, [r3, #32]
}
 8015ede:	bf00      	nop
 8015ee0:	371c      	adds	r7, #28
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee8:	4770      	bx	lr
	...

08015eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d101      	bne.n	8015f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015f00:	2302      	movs	r3, #2
 8015f02:	e05a      	b.n	8015fba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2201      	movs	r2, #1
 8015f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2202      	movs	r2, #2
 8015f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	685b      	ldr	r3, [r3, #4]
 8015f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	689b      	ldr	r3, [r3, #8]
 8015f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	4313      	orrs	r3, r2
 8015f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	68fa      	ldr	r2, [r7, #12]
 8015f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4a21      	ldr	r2, [pc, #132]	; (8015fc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d022      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f50:	d01d      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	4a1d      	ldr	r2, [pc, #116]	; (8015fcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	d018      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	4a1b      	ldr	r2, [pc, #108]	; (8015fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015f62:	4293      	cmp	r3, r2
 8015f64:	d013      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4a1a      	ldr	r2, [pc, #104]	; (8015fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015f6c:	4293      	cmp	r3, r2
 8015f6e:	d00e      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	4a18      	ldr	r2, [pc, #96]	; (8015fd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015f76:	4293      	cmp	r3, r2
 8015f78:	d009      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	4a17      	ldr	r2, [pc, #92]	; (8015fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015f80:	4293      	cmp	r3, r2
 8015f82:	d004      	beq.n	8015f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4a15      	ldr	r2, [pc, #84]	; (8015fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d10c      	bne.n	8015fa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	4313      	orrs	r3, r2
 8015f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	68ba      	ldr	r2, [r7, #8]
 8015fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2201      	movs	r2, #1
 8015fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015fb8:	2300      	movs	r3, #0
}
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3714      	adds	r7, #20
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc4:	4770      	bx	lr
 8015fc6:	bf00      	nop
 8015fc8:	40010000 	.word	0x40010000
 8015fcc:	40000400 	.word	0x40000400
 8015fd0:	40000800 	.word	0x40000800
 8015fd4:	40000c00 	.word	0x40000c00
 8015fd8:	40010400 	.word	0x40010400
 8015fdc:	40014000 	.word	0x40014000
 8015fe0:	40001800 	.word	0x40001800

08015fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b083      	sub	sp, #12
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015fec:	bf00      	nop
 8015fee:	370c      	adds	r7, #12
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff6:	4770      	bx	lr

08015ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b083      	sub	sp, #12
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016000:	bf00      	nop
 8016002:	370c      	adds	r7, #12
 8016004:	46bd      	mov	sp, r7
 8016006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600a:	4770      	bx	lr

0801600c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d101      	bne.n	801601e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801601a:	2301      	movs	r3, #1
 801601c:	e03f      	b.n	801609e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d106      	bne.n	8016038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2200      	movs	r2, #0
 801602e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f7ec fbe8 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2224      	movs	r2, #36	; 0x24
 801603c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	68da      	ldr	r2, [r3, #12]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801604e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 fb97 	bl	8016784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	691a      	ldr	r2, [r3, #16]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	695a      	ldr	r2, [r3, #20]
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	68da      	ldr	r2, [r3, #12]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2200      	movs	r2, #0
 801608a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2220      	movs	r2, #32
 8016090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2220      	movs	r2, #32
 8016098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801609c:	2300      	movs	r3, #0
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b088      	sub	sp, #32
 80160aa:	af02      	add	r7, sp, #8
 80160ac:	60f8      	str	r0, [r7, #12]
 80160ae:	60b9      	str	r1, [r7, #8]
 80160b0:	603b      	str	r3, [r7, #0]
 80160b2:	4613      	mov	r3, r2
 80160b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80160b6:	2300      	movs	r3, #0
 80160b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80160c0:	b2db      	uxtb	r3, r3
 80160c2:	2b20      	cmp	r3, #32
 80160c4:	f040 8083 	bne.w	80161ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d002      	beq.n	80160d4 <HAL_UART_Transmit+0x2e>
 80160ce:	88fb      	ldrh	r3, [r7, #6]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80160d4:	2301      	movs	r3, #1
 80160d6:	e07b      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80160de:	2b01      	cmp	r3, #1
 80160e0:	d101      	bne.n	80160e6 <HAL_UART_Transmit+0x40>
 80160e2:	2302      	movs	r3, #2
 80160e4:	e074      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2201      	movs	r2, #1
 80160ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2200      	movs	r2, #0
 80160f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2221      	movs	r2, #33	; 0x21
 80160f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80160fc:	f7fa fac8 	bl	8010690 <HAL_GetTick>
 8016100:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	88fa      	ldrh	r2, [r7, #6]
 8016106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	88fa      	ldrh	r2, [r7, #6]
 801610c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8016116:	e042      	b.n	801619e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801611c:	b29b      	uxth	r3, r3
 801611e:	3b01      	subs	r3, #1
 8016120:	b29a      	uxth	r2, r3
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	689b      	ldr	r3, [r3, #8]
 801612a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801612e:	d122      	bne.n	8016176 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	9300      	str	r3, [sp, #0]
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	2200      	movs	r2, #0
 8016138:	2180      	movs	r1, #128	; 0x80
 801613a:	68f8      	ldr	r0, [r7, #12]
 801613c:	f000 f9b6 	bl	80164ac <UART_WaitOnFlagUntilTimeout>
 8016140:	4603      	mov	r3, r0
 8016142:	2b00      	cmp	r3, #0
 8016144:	d001      	beq.n	801614a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8016146:	2303      	movs	r3, #3
 8016148:	e042      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	881b      	ldrh	r3, [r3, #0]
 8016152:	461a      	mov	r2, r3
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801615c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	691b      	ldr	r3, [r3, #16]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d103      	bne.n	801616e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	3302      	adds	r3, #2
 801616a:	60bb      	str	r3, [r7, #8]
 801616c:	e017      	b.n	801619e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	3301      	adds	r3, #1
 8016172:	60bb      	str	r3, [r7, #8]
 8016174:	e013      	b.n	801619e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	2200      	movs	r2, #0
 801617e:	2180      	movs	r1, #128	; 0x80
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f000 f993 	bl	80164ac <UART_WaitOnFlagUntilTimeout>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d001      	beq.n	8016190 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801618c:	2303      	movs	r3, #3
 801618e:	e01f      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	1c5a      	adds	r2, r3, #1
 8016194:	60ba      	str	r2, [r7, #8]
 8016196:	781a      	ldrb	r2, [r3, #0]
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d1b7      	bne.n	8016118 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	2200      	movs	r2, #0
 80161b0:	2140      	movs	r1, #64	; 0x40
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	f000 f97a 	bl	80164ac <UART_WaitOnFlagUntilTimeout>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d001      	beq.n	80161c2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80161be:	2303      	movs	r3, #3
 80161c0:	e006      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2220      	movs	r2, #32
 80161c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80161ca:	2300      	movs	r3, #0
 80161cc:	e000      	b.n	80161d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80161ce:	2302      	movs	r3, #2
  }
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3718      	adds	r7, #24
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}

080161d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80161d8:	b480      	push	{r7}
 80161da:	b085      	sub	sp, #20
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	4613      	mov	r3, r2
 80161e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	2b20      	cmp	r3, #32
 80161f0:	d140      	bne.n	8016274 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d002      	beq.n	80161fe <HAL_UART_Receive_IT+0x26>
 80161f8:	88fb      	ldrh	r3, [r7, #6]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d101      	bne.n	8016202 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80161fe:	2301      	movs	r3, #1
 8016200:	e039      	b.n	8016276 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016208:	2b01      	cmp	r3, #1
 801620a:	d101      	bne.n	8016210 <HAL_UART_Receive_IT+0x38>
 801620c:	2302      	movs	r3, #2
 801620e:	e032      	b.n	8016276 <HAL_UART_Receive_IT+0x9e>
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2201      	movs	r2, #1
 8016214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	68ba      	ldr	r2, [r7, #8]
 801621c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	88fa      	ldrh	r2, [r7, #6]
 8016222:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	88fa      	ldrh	r2, [r7, #6]
 8016228:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2200      	movs	r2, #0
 801622e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2222      	movs	r2, #34	; 0x22
 8016234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2200      	movs	r2, #0
 801623c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	68da      	ldr	r2, [r3, #12]
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801624e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	695a      	ldr	r2, [r3, #20]
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	f042 0201 	orr.w	r2, r2, #1
 801625e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	68da      	ldr	r2, [r3, #12]
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f042 0220 	orr.w	r2, r2, #32
 801626e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8016270:	2300      	movs	r3, #0
 8016272:	e000      	b.n	8016276 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8016274:	2302      	movs	r3, #2
  }
}
 8016276:	4618      	mov	r0, r3
 8016278:	3714      	adds	r7, #20
 801627a:	46bd      	mov	sp, r7
 801627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016280:	4770      	bx	lr
	...

08016284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b088      	sub	sp, #32
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	68db      	ldr	r3, [r3, #12]
 801629a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	695b      	ldr	r3, [r3, #20]
 80162a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80162a4:	2300      	movs	r3, #0
 80162a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80162a8:	2300      	movs	r3, #0
 80162aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	f003 030f 	and.w	r3, r3, #15
 80162b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d10d      	bne.n	80162d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	f003 0320 	and.w	r3, r3, #32
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d008      	beq.n	80162d6 <HAL_UART_IRQHandler+0x52>
 80162c4:	69bb      	ldr	r3, [r7, #24]
 80162c6:	f003 0320 	and.w	r3, r3, #32
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d003      	beq.n	80162d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 f9d6 	bl	8016680 <UART_Receive_IT>
      return;
 80162d4:	e0d0      	b.n	8016478 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80162d6:	693b      	ldr	r3, [r7, #16]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f000 80b0 	beq.w	801643e <HAL_UART_IRQHandler+0x1ba>
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	f003 0301 	and.w	r3, r3, #1
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d105      	bne.n	80162f4 <HAL_UART_IRQHandler+0x70>
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	f000 80a5 	beq.w	801643e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	f003 0301 	and.w	r3, r3, #1
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00a      	beq.n	8016314 <HAL_UART_IRQHandler+0x90>
 80162fe:	69bb      	ldr	r3, [r7, #24]
 8016300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016304:	2b00      	cmp	r3, #0
 8016306:	d005      	beq.n	8016314 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801630c:	f043 0201 	orr.w	r2, r3, #1
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	f003 0304 	and.w	r3, r3, #4
 801631a:	2b00      	cmp	r3, #0
 801631c:	d00a      	beq.n	8016334 <HAL_UART_IRQHandler+0xb0>
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	f003 0301 	and.w	r3, r3, #1
 8016324:	2b00      	cmp	r3, #0
 8016326:	d005      	beq.n	8016334 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801632c:	f043 0202 	orr.w	r2, r3, #2
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	f003 0302 	and.w	r3, r3, #2
 801633a:	2b00      	cmp	r3, #0
 801633c:	d00a      	beq.n	8016354 <HAL_UART_IRQHandler+0xd0>
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	f003 0301 	and.w	r3, r3, #1
 8016344:	2b00      	cmp	r3, #0
 8016346:	d005      	beq.n	8016354 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801634c:	f043 0204 	orr.w	r2, r3, #4
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8016354:	69fb      	ldr	r3, [r7, #28]
 8016356:	f003 0308 	and.w	r3, r3, #8
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00f      	beq.n	801637e <HAL_UART_IRQHandler+0xfa>
 801635e:	69bb      	ldr	r3, [r7, #24]
 8016360:	f003 0320 	and.w	r3, r3, #32
 8016364:	2b00      	cmp	r3, #0
 8016366:	d104      	bne.n	8016372 <HAL_UART_IRQHandler+0xee>
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	f003 0301 	and.w	r3, r3, #1
 801636e:	2b00      	cmp	r3, #0
 8016370:	d005      	beq.n	801637e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016376:	f043 0208 	orr.w	r2, r3, #8
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016382:	2b00      	cmp	r3, #0
 8016384:	d077      	beq.n	8016476 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	f003 0320 	and.w	r3, r3, #32
 801638c:	2b00      	cmp	r3, #0
 801638e:	d007      	beq.n	80163a0 <HAL_UART_IRQHandler+0x11c>
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	f003 0320 	and.w	r3, r3, #32
 8016396:	2b00      	cmp	r3, #0
 8016398:	d002      	beq.n	80163a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 f970 	bl	8016680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	695b      	ldr	r3, [r3, #20]
 80163a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163aa:	2b40      	cmp	r3, #64	; 0x40
 80163ac:	bf0c      	ite	eq
 80163ae:	2301      	moveq	r3, #1
 80163b0:	2300      	movne	r3, #0
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163ba:	f003 0308 	and.w	r3, r3, #8
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d102      	bne.n	80163c8 <HAL_UART_IRQHandler+0x144>
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d031      	beq.n	801642c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 f8b9 	bl	8016540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	695b      	ldr	r3, [r3, #20]
 80163d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163d8:	2b40      	cmp	r3, #64	; 0x40
 80163da:	d123      	bne.n	8016424 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	695a      	ldr	r2, [r3, #20]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80163ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d013      	beq.n	801641c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163f8:	4a21      	ldr	r2, [pc, #132]	; (8016480 <HAL_UART_IRQHandler+0x1fc>)
 80163fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016400:	4618      	mov	r0, r3
 8016402:	f7fb fa83 	bl	801190c <HAL_DMA_Abort_IT>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d016      	beq.n	801643a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016416:	4610      	mov	r0, r2
 8016418:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801641a:	e00e      	b.n	801643a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f000 f83b 	bl	8016498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016422:	e00a      	b.n	801643a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f000 f837 	bl	8016498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801642a:	e006      	b.n	801643a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 f833 	bl	8016498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2200      	movs	r2, #0
 8016436:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8016438:	e01d      	b.n	8016476 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801643a:	bf00      	nop
    return;
 801643c:	e01b      	b.n	8016476 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801643e:	69fb      	ldr	r3, [r7, #28]
 8016440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016444:	2b00      	cmp	r3, #0
 8016446:	d008      	beq.n	801645a <HAL_UART_IRQHandler+0x1d6>
 8016448:	69bb      	ldr	r3, [r7, #24]
 801644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801644e:	2b00      	cmp	r3, #0
 8016450:	d003      	beq.n	801645a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 f8a6 	bl	80165a4 <UART_Transmit_IT>
    return;
 8016458:	e00e      	b.n	8016478 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016460:	2b00      	cmp	r3, #0
 8016462:	d009      	beq.n	8016478 <HAL_UART_IRQHandler+0x1f4>
 8016464:	69bb      	ldr	r3, [r7, #24]
 8016466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801646a:	2b00      	cmp	r3, #0
 801646c:	d004      	beq.n	8016478 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f8ee 	bl	8016650 <UART_EndTransmit_IT>
    return;
 8016474:	e000      	b.n	8016478 <HAL_UART_IRQHandler+0x1f4>
    return;
 8016476:	bf00      	nop
  }
}
 8016478:	3720      	adds	r7, #32
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	0801657d 	.word	0x0801657d

08016484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016484:	b480      	push	{r7}
 8016486:	b083      	sub	sp, #12
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801648c:	bf00      	nop
 801648e:	370c      	adds	r7, #12
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr

08016498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80164a0:	bf00      	nop
 80164a2:	370c      	adds	r7, #12
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr

080164ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	603b      	str	r3, [r7, #0]
 80164b8:	4613      	mov	r3, r2
 80164ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80164bc:	e02c      	b.n	8016518 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80164be:	69bb      	ldr	r3, [r7, #24]
 80164c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164c4:	d028      	beq.n	8016518 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80164c6:	69bb      	ldr	r3, [r7, #24]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d007      	beq.n	80164dc <UART_WaitOnFlagUntilTimeout+0x30>
 80164cc:	f7fa f8e0 	bl	8010690 <HAL_GetTick>
 80164d0:	4602      	mov	r2, r0
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	1ad3      	subs	r3, r2, r3
 80164d6:	69ba      	ldr	r2, [r7, #24]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d21d      	bcs.n	8016518 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	68da      	ldr	r2, [r3, #12]
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80164ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	695a      	ldr	r2, [r3, #20]
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	f022 0201 	bic.w	r2, r2, #1
 80164fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	2220      	movs	r2, #32
 8016500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2220      	movs	r2, #32
 8016508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2200      	movs	r2, #0
 8016510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8016514:	2303      	movs	r3, #3
 8016516:	e00f      	b.n	8016538 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	4013      	ands	r3, r2
 8016522:	68ba      	ldr	r2, [r7, #8]
 8016524:	429a      	cmp	r2, r3
 8016526:	bf0c      	ite	eq
 8016528:	2301      	moveq	r3, #1
 801652a:	2300      	movne	r3, #0
 801652c:	b2db      	uxtb	r3, r3
 801652e:	461a      	mov	r2, r3
 8016530:	79fb      	ldrb	r3, [r7, #7]
 8016532:	429a      	cmp	r2, r3
 8016534:	d0c3      	beq.n	80164be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016536:	2300      	movs	r3, #0
}
 8016538:	4618      	mov	r0, r3
 801653a:	3710      	adds	r7, #16
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	68da      	ldr	r2, [r3, #12]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8016556:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	695a      	ldr	r2, [r3, #20]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f022 0201 	bic.w	r2, r2, #1
 8016566:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2220      	movs	r2, #32
 801656c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8016570:	bf00      	nop
 8016572:	370c      	adds	r7, #12
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr

0801657c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b084      	sub	sp, #16
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2200      	movs	r2, #0
 801658e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2200      	movs	r2, #0
 8016594:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016596:	68f8      	ldr	r0, [r7, #12]
 8016598:	f7ff ff7e 	bl	8016498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801659c:	bf00      	nop
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80165a4:	b480      	push	{r7}
 80165a6:	b085      	sub	sp, #20
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	2b21      	cmp	r3, #33	; 0x21
 80165b6:	d144      	bne.n	8016642 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	689b      	ldr	r3, [r3, #8]
 80165bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80165c0:	d11a      	bne.n	80165f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	6a1b      	ldr	r3, [r3, #32]
 80165c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	881b      	ldrh	r3, [r3, #0]
 80165cc:	461a      	mov	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80165d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	691b      	ldr	r3, [r3, #16]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d105      	bne.n	80165ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6a1b      	ldr	r3, [r3, #32]
 80165e4:	1c9a      	adds	r2, r3, #2
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	621a      	str	r2, [r3, #32]
 80165ea:	e00e      	b.n	801660a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6a1b      	ldr	r3, [r3, #32]
 80165f0:	1c5a      	adds	r2, r3, #1
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	621a      	str	r2, [r3, #32]
 80165f6:	e008      	b.n	801660a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	6a1b      	ldr	r3, [r3, #32]
 80165fc:	1c59      	adds	r1, r3, #1
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	6211      	str	r1, [r2, #32]
 8016602:	781a      	ldrb	r2, [r3, #0]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801660e:	b29b      	uxth	r3, r3
 8016610:	3b01      	subs	r3, #1
 8016612:	b29b      	uxth	r3, r3
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	4619      	mov	r1, r3
 8016618:	84d1      	strh	r1, [r2, #38]	; 0x26
 801661a:	2b00      	cmp	r3, #0
 801661c:	d10f      	bne.n	801663e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	68da      	ldr	r2, [r3, #12]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801662c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	68da      	ldr	r2, [r3, #12]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801663c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801663e:	2300      	movs	r3, #0
 8016640:	e000      	b.n	8016644 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8016642:	2302      	movs	r3, #2
  }
}
 8016644:	4618      	mov	r0, r3
 8016646:	3714      	adds	r7, #20
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	68da      	ldr	r2, [r3, #12]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2220      	movs	r2, #32
 801666c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7ff ff07 	bl	8016484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8016676:	2300      	movs	r3, #0
}
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801668e:	b2db      	uxtb	r3, r3
 8016690:	2b22      	cmp	r3, #34	; 0x22
 8016692:	d171      	bne.n	8016778 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	689b      	ldr	r3, [r3, #8]
 8016698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801669c:	d123      	bne.n	80166e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	691b      	ldr	r3, [r3, #16]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d10e      	bne.n	80166ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80166b8:	b29a      	uxth	r2, r3
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166c2:	1c9a      	adds	r2, r3, #2
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	629a      	str	r2, [r3, #40]	; 0x28
 80166c8:	e029      	b.n	801671e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	b29a      	uxth	r2, r3
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166de:	1c5a      	adds	r2, r3, #1
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	629a      	str	r2, [r3, #40]	; 0x28
 80166e4:	e01b      	b.n	801671e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	691b      	ldr	r3, [r3, #16]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10a      	bne.n	8016704 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	6858      	ldr	r0, [r3, #4]
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166f8:	1c59      	adds	r1, r3, #1
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	6291      	str	r1, [r2, #40]	; 0x28
 80166fe:	b2c2      	uxtb	r2, r0
 8016700:	701a      	strb	r2, [r3, #0]
 8016702:	e00c      	b.n	801671e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	b2da      	uxtb	r2, r3
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016710:	1c58      	adds	r0, r3, #1
 8016712:	6879      	ldr	r1, [r7, #4]
 8016714:	6288      	str	r0, [r1, #40]	; 0x28
 8016716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801671a:	b2d2      	uxtb	r2, r2
 801671c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016722:	b29b      	uxth	r3, r3
 8016724:	3b01      	subs	r3, #1
 8016726:	b29b      	uxth	r3, r3
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	4619      	mov	r1, r3
 801672c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801672e:	2b00      	cmp	r3, #0
 8016730:	d120      	bne.n	8016774 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	68da      	ldr	r2, [r3, #12]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f022 0220 	bic.w	r2, r2, #32
 8016740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	68da      	ldr	r2, [r3, #12]
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	695a      	ldr	r2, [r3, #20]
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	f022 0201 	bic.w	r2, r2, #1
 8016760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2220      	movs	r2, #32
 8016766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7ed fece 	bl	800450c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8016770:	2300      	movs	r3, #0
 8016772:	e002      	b.n	801677a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8016774:	2300      	movs	r3, #0
 8016776:	e000      	b.n	801677a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8016778:	2302      	movs	r3, #2
  }
}
 801677a:	4618      	mov	r0, r3
 801677c:	3710      	adds	r7, #16
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
	...

08016784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	b0bd      	sub	sp, #244	; 0xf4
 801678a:	af00      	add	r7, sp, #0
 801678c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	691b      	ldr	r3, [r3, #16]
 8016798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801679c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167a0:	68d9      	ldr	r1, [r3, #12]
 80167a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	ea40 0301 	orr.w	r3, r0, r1
 80167ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80167ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167b2:	689a      	ldr	r2, [r3, #8]
 80167b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167b8:	691b      	ldr	r3, [r3, #16]
 80167ba:	431a      	orrs	r2, r3
 80167bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167c0:	695b      	ldr	r3, [r3, #20]
 80167c2:	431a      	orrs	r2, r3
 80167c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167c8:	69db      	ldr	r3, [r3, #28]
 80167ca:	4313      	orrs	r3, r2
 80167cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80167d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	68db      	ldr	r3, [r3, #12]
 80167d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80167dc:	f021 010c 	bic.w	r1, r1, #12
 80167e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80167ea:	430b      	orrs	r3, r1
 80167ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80167ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80167fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167fe:	6999      	ldr	r1, [r3, #24]
 8016800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	ea40 0301 	orr.w	r3, r0, r1
 801680a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016810:	69db      	ldr	r3, [r3, #28]
 8016812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016816:	f040 81a5 	bne.w	8016b64 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	4bcd      	ldr	r3, [pc, #820]	; (8016b58 <UART_SetConfig+0x3d4>)
 8016822:	429a      	cmp	r2, r3
 8016824:	d006      	beq.n	8016834 <UART_SetConfig+0xb0>
 8016826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	4bcb      	ldr	r3, [pc, #812]	; (8016b5c <UART_SetConfig+0x3d8>)
 801682e:	429a      	cmp	r2, r3
 8016830:	f040 80cb 	bne.w	80169ca <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8016834:	f7fe fa86 	bl	8014d44 <HAL_RCC_GetPCLK2Freq>
 8016838:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801683c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016840:	461c      	mov	r4, r3
 8016842:	f04f 0500 	mov.w	r5, #0
 8016846:	4622      	mov	r2, r4
 8016848:	462b      	mov	r3, r5
 801684a:	1891      	adds	r1, r2, r2
 801684c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8016850:	415b      	adcs	r3, r3
 8016852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016856:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801685a:	1912      	adds	r2, r2, r4
 801685c:	eb45 0303 	adc.w	r3, r5, r3
 8016860:	f04f 0000 	mov.w	r0, #0
 8016864:	f04f 0100 	mov.w	r1, #0
 8016868:	00d9      	lsls	r1, r3, #3
 801686a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801686e:	00d0      	lsls	r0, r2, #3
 8016870:	4602      	mov	r2, r0
 8016872:	460b      	mov	r3, r1
 8016874:	1911      	adds	r1, r2, r4
 8016876:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801687a:	416b      	adcs	r3, r5
 801687c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	461a      	mov	r2, r3
 8016888:	f04f 0300 	mov.w	r3, #0
 801688c:	1891      	adds	r1, r2, r2
 801688e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8016892:	415b      	adcs	r3, r3
 8016894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016898:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801689c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80168a0:	f7ea f9f2 	bl	8000c88 <__aeabi_uldivmod>
 80168a4:	4602      	mov	r2, r0
 80168a6:	460b      	mov	r3, r1
 80168a8:	4bad      	ldr	r3, [pc, #692]	; (8016b60 <UART_SetConfig+0x3dc>)
 80168aa:	fba3 2302 	umull	r2, r3, r3, r2
 80168ae:	095b      	lsrs	r3, r3, #5
 80168b0:	011e      	lsls	r6, r3, #4
 80168b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80168b6:	461c      	mov	r4, r3
 80168b8:	f04f 0500 	mov.w	r5, #0
 80168bc:	4622      	mov	r2, r4
 80168be:	462b      	mov	r3, r5
 80168c0:	1891      	adds	r1, r2, r2
 80168c2:	67b9      	str	r1, [r7, #120]	; 0x78
 80168c4:	415b      	adcs	r3, r3
 80168c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80168c8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80168cc:	1912      	adds	r2, r2, r4
 80168ce:	eb45 0303 	adc.w	r3, r5, r3
 80168d2:	f04f 0000 	mov.w	r0, #0
 80168d6:	f04f 0100 	mov.w	r1, #0
 80168da:	00d9      	lsls	r1, r3, #3
 80168dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80168e0:	00d0      	lsls	r0, r2, #3
 80168e2:	4602      	mov	r2, r0
 80168e4:	460b      	mov	r3, r1
 80168e6:	1911      	adds	r1, r2, r4
 80168e8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80168ec:	416b      	adcs	r3, r5
 80168ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80168f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	461a      	mov	r2, r3
 80168fa:	f04f 0300 	mov.w	r3, #0
 80168fe:	1891      	adds	r1, r2, r2
 8016900:	6739      	str	r1, [r7, #112]	; 0x70
 8016902:	415b      	adcs	r3, r3
 8016904:	677b      	str	r3, [r7, #116]	; 0x74
 8016906:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801690a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801690e:	f7ea f9bb 	bl	8000c88 <__aeabi_uldivmod>
 8016912:	4602      	mov	r2, r0
 8016914:	460b      	mov	r3, r1
 8016916:	4b92      	ldr	r3, [pc, #584]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016918:	fba3 1302 	umull	r1, r3, r3, r2
 801691c:	095b      	lsrs	r3, r3, #5
 801691e:	2164      	movs	r1, #100	; 0x64
 8016920:	fb01 f303 	mul.w	r3, r1, r3
 8016924:	1ad3      	subs	r3, r2, r3
 8016926:	00db      	lsls	r3, r3, #3
 8016928:	3332      	adds	r3, #50	; 0x32
 801692a:	4a8d      	ldr	r2, [pc, #564]	; (8016b60 <UART_SetConfig+0x3dc>)
 801692c:	fba2 2303 	umull	r2, r3, r2, r3
 8016930:	095b      	lsrs	r3, r3, #5
 8016932:	005b      	lsls	r3, r3, #1
 8016934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016938:	441e      	add	r6, r3
 801693a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801693e:	4618      	mov	r0, r3
 8016940:	f04f 0100 	mov.w	r1, #0
 8016944:	4602      	mov	r2, r0
 8016946:	460b      	mov	r3, r1
 8016948:	1894      	adds	r4, r2, r2
 801694a:	66bc      	str	r4, [r7, #104]	; 0x68
 801694c:	415b      	adcs	r3, r3
 801694e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016950:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8016954:	1812      	adds	r2, r2, r0
 8016956:	eb41 0303 	adc.w	r3, r1, r3
 801695a:	f04f 0400 	mov.w	r4, #0
 801695e:	f04f 0500 	mov.w	r5, #0
 8016962:	00dd      	lsls	r5, r3, #3
 8016964:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016968:	00d4      	lsls	r4, r2, #3
 801696a:	4622      	mov	r2, r4
 801696c:	462b      	mov	r3, r5
 801696e:	1814      	adds	r4, r2, r0
 8016970:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8016974:	414b      	adcs	r3, r1
 8016976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	461a      	mov	r2, r3
 8016982:	f04f 0300 	mov.w	r3, #0
 8016986:	1891      	adds	r1, r2, r2
 8016988:	6639      	str	r1, [r7, #96]	; 0x60
 801698a:	415b      	adcs	r3, r3
 801698c:	667b      	str	r3, [r7, #100]	; 0x64
 801698e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8016996:	f7ea f977 	bl	8000c88 <__aeabi_uldivmod>
 801699a:	4602      	mov	r2, r0
 801699c:	460b      	mov	r3, r1
 801699e:	4b70      	ldr	r3, [pc, #448]	; (8016b60 <UART_SetConfig+0x3dc>)
 80169a0:	fba3 1302 	umull	r1, r3, r3, r2
 80169a4:	095b      	lsrs	r3, r3, #5
 80169a6:	2164      	movs	r1, #100	; 0x64
 80169a8:	fb01 f303 	mul.w	r3, r1, r3
 80169ac:	1ad3      	subs	r3, r2, r3
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	3332      	adds	r3, #50	; 0x32
 80169b2:	4a6b      	ldr	r2, [pc, #428]	; (8016b60 <UART_SetConfig+0x3dc>)
 80169b4:	fba2 2303 	umull	r2, r3, r2, r3
 80169b8:	095b      	lsrs	r3, r3, #5
 80169ba:	f003 0207 	and.w	r2, r3, #7
 80169be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	4432      	add	r2, r6
 80169c6:	609a      	str	r2, [r3, #8]
 80169c8:	e26d      	b.n	8016ea6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80169ca:	f7fe f9a7 	bl	8014d1c <HAL_RCC_GetPCLK1Freq>
 80169ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80169d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80169d6:	461c      	mov	r4, r3
 80169d8:	f04f 0500 	mov.w	r5, #0
 80169dc:	4622      	mov	r2, r4
 80169de:	462b      	mov	r3, r5
 80169e0:	1891      	adds	r1, r2, r2
 80169e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80169e4:	415b      	adcs	r3, r3
 80169e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80169e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80169ec:	1912      	adds	r2, r2, r4
 80169ee:	eb45 0303 	adc.w	r3, r5, r3
 80169f2:	f04f 0000 	mov.w	r0, #0
 80169f6:	f04f 0100 	mov.w	r1, #0
 80169fa:	00d9      	lsls	r1, r3, #3
 80169fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016a00:	00d0      	lsls	r0, r2, #3
 8016a02:	4602      	mov	r2, r0
 8016a04:	460b      	mov	r3, r1
 8016a06:	1911      	adds	r1, r2, r4
 8016a08:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8016a0c:	416b      	adcs	r3, r5
 8016a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a16:	685b      	ldr	r3, [r3, #4]
 8016a18:	461a      	mov	r2, r3
 8016a1a:	f04f 0300 	mov.w	r3, #0
 8016a1e:	1891      	adds	r1, r2, r2
 8016a20:	6539      	str	r1, [r7, #80]	; 0x50
 8016a22:	415b      	adcs	r3, r3
 8016a24:	657b      	str	r3, [r7, #84]	; 0x54
 8016a26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016a2a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8016a2e:	f7ea f92b 	bl	8000c88 <__aeabi_uldivmod>
 8016a32:	4602      	mov	r2, r0
 8016a34:	460b      	mov	r3, r1
 8016a36:	4b4a      	ldr	r3, [pc, #296]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016a38:	fba3 2302 	umull	r2, r3, r3, r2
 8016a3c:	095b      	lsrs	r3, r3, #5
 8016a3e:	011e      	lsls	r6, r3, #4
 8016a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a44:	461c      	mov	r4, r3
 8016a46:	f04f 0500 	mov.w	r5, #0
 8016a4a:	4622      	mov	r2, r4
 8016a4c:	462b      	mov	r3, r5
 8016a4e:	1891      	adds	r1, r2, r2
 8016a50:	64b9      	str	r1, [r7, #72]	; 0x48
 8016a52:	415b      	adcs	r3, r3
 8016a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016a5a:	1912      	adds	r2, r2, r4
 8016a5c:	eb45 0303 	adc.w	r3, r5, r3
 8016a60:	f04f 0000 	mov.w	r0, #0
 8016a64:	f04f 0100 	mov.w	r1, #0
 8016a68:	00d9      	lsls	r1, r3, #3
 8016a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016a6e:	00d0      	lsls	r0, r2, #3
 8016a70:	4602      	mov	r2, r0
 8016a72:	460b      	mov	r3, r1
 8016a74:	1911      	adds	r1, r2, r4
 8016a76:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8016a7a:	416b      	adcs	r3, r5
 8016a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8016a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	461a      	mov	r2, r3
 8016a88:	f04f 0300 	mov.w	r3, #0
 8016a8c:	1891      	adds	r1, r2, r2
 8016a8e:	6439      	str	r1, [r7, #64]	; 0x40
 8016a90:	415b      	adcs	r3, r3
 8016a92:	647b      	str	r3, [r7, #68]	; 0x44
 8016a94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016a98:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8016a9c:	f7ea f8f4 	bl	8000c88 <__aeabi_uldivmod>
 8016aa0:	4602      	mov	r2, r0
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	4b2e      	ldr	r3, [pc, #184]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8016aaa:	095b      	lsrs	r3, r3, #5
 8016aac:	2164      	movs	r1, #100	; 0x64
 8016aae:	fb01 f303 	mul.w	r3, r1, r3
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	00db      	lsls	r3, r3, #3
 8016ab6:	3332      	adds	r3, #50	; 0x32
 8016ab8:	4a29      	ldr	r2, [pc, #164]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016aba:	fba2 2303 	umull	r2, r3, r2, r3
 8016abe:	095b      	lsrs	r3, r3, #5
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016ac6:	441e      	add	r6, r3
 8016ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016acc:	4618      	mov	r0, r3
 8016ace:	f04f 0100 	mov.w	r1, #0
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	1894      	adds	r4, r2, r2
 8016ad8:	63bc      	str	r4, [r7, #56]	; 0x38
 8016ada:	415b      	adcs	r3, r3
 8016adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ade:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8016ae2:	1812      	adds	r2, r2, r0
 8016ae4:	eb41 0303 	adc.w	r3, r1, r3
 8016ae8:	f04f 0400 	mov.w	r4, #0
 8016aec:	f04f 0500 	mov.w	r5, #0
 8016af0:	00dd      	lsls	r5, r3, #3
 8016af2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016af6:	00d4      	lsls	r4, r2, #3
 8016af8:	4622      	mov	r2, r4
 8016afa:	462b      	mov	r3, r5
 8016afc:	1814      	adds	r4, r2, r0
 8016afe:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8016b02:	414b      	adcs	r3, r1
 8016b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	461a      	mov	r2, r3
 8016b10:	f04f 0300 	mov.w	r3, #0
 8016b14:	1891      	adds	r1, r2, r2
 8016b16:	6339      	str	r1, [r7, #48]	; 0x30
 8016b18:	415b      	adcs	r3, r3
 8016b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8016b1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016b20:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016b24:	f7ea f8b0 	bl	8000c88 <__aeabi_uldivmod>
 8016b28:	4602      	mov	r2, r0
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	4b0c      	ldr	r3, [pc, #48]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8016b32:	095b      	lsrs	r3, r3, #5
 8016b34:	2164      	movs	r1, #100	; 0x64
 8016b36:	fb01 f303 	mul.w	r3, r1, r3
 8016b3a:	1ad3      	subs	r3, r2, r3
 8016b3c:	00db      	lsls	r3, r3, #3
 8016b3e:	3332      	adds	r3, #50	; 0x32
 8016b40:	4a07      	ldr	r2, [pc, #28]	; (8016b60 <UART_SetConfig+0x3dc>)
 8016b42:	fba2 2303 	umull	r2, r3, r2, r3
 8016b46:	095b      	lsrs	r3, r3, #5
 8016b48:	f003 0207 	and.w	r2, r3, #7
 8016b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4432      	add	r2, r6
 8016b54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8016b56:	e1a6      	b.n	8016ea6 <UART_SetConfig+0x722>
 8016b58:	40011000 	.word	0x40011000
 8016b5c:	40011400 	.word	0x40011400
 8016b60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b68:	681a      	ldr	r2, [r3, #0]
 8016b6a:	4bd1      	ldr	r3, [pc, #836]	; (8016eb0 <UART_SetConfig+0x72c>)
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d006      	beq.n	8016b7e <UART_SetConfig+0x3fa>
 8016b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	4bcf      	ldr	r3, [pc, #828]	; (8016eb4 <UART_SetConfig+0x730>)
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	f040 80ca 	bne.w	8016d12 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8016b7e:	f7fe f8e1 	bl	8014d44 <HAL_RCC_GetPCLK2Freq>
 8016b82:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016b8a:	461c      	mov	r4, r3
 8016b8c:	f04f 0500 	mov.w	r5, #0
 8016b90:	4622      	mov	r2, r4
 8016b92:	462b      	mov	r3, r5
 8016b94:	1891      	adds	r1, r2, r2
 8016b96:	62b9      	str	r1, [r7, #40]	; 0x28
 8016b98:	415b      	adcs	r3, r3
 8016b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016ba0:	1912      	adds	r2, r2, r4
 8016ba2:	eb45 0303 	adc.w	r3, r5, r3
 8016ba6:	f04f 0000 	mov.w	r0, #0
 8016baa:	f04f 0100 	mov.w	r1, #0
 8016bae:	00d9      	lsls	r1, r3, #3
 8016bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016bb4:	00d0      	lsls	r0, r2, #3
 8016bb6:	4602      	mov	r2, r0
 8016bb8:	460b      	mov	r3, r1
 8016bba:	eb12 0a04 	adds.w	sl, r2, r4
 8016bbe:	eb43 0b05 	adc.w	fp, r3, r5
 8016bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f04f 0100 	mov.w	r1, #0
 8016bce:	f04f 0200 	mov.w	r2, #0
 8016bd2:	f04f 0300 	mov.w	r3, #0
 8016bd6:	008b      	lsls	r3, r1, #2
 8016bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016bdc:	0082      	lsls	r2, r0, #2
 8016bde:	4650      	mov	r0, sl
 8016be0:	4659      	mov	r1, fp
 8016be2:	f7ea f851 	bl	8000c88 <__aeabi_uldivmod>
 8016be6:	4602      	mov	r2, r0
 8016be8:	460b      	mov	r3, r1
 8016bea:	4bb3      	ldr	r3, [pc, #716]	; (8016eb8 <UART_SetConfig+0x734>)
 8016bec:	fba3 2302 	umull	r2, r3, r3, r2
 8016bf0:	095b      	lsrs	r3, r3, #5
 8016bf2:	011e      	lsls	r6, r3, #4
 8016bf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f04f 0100 	mov.w	r1, #0
 8016bfe:	4602      	mov	r2, r0
 8016c00:	460b      	mov	r3, r1
 8016c02:	1894      	adds	r4, r2, r2
 8016c04:	623c      	str	r4, [r7, #32]
 8016c06:	415b      	adcs	r3, r3
 8016c08:	627b      	str	r3, [r7, #36]	; 0x24
 8016c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016c0e:	1812      	adds	r2, r2, r0
 8016c10:	eb41 0303 	adc.w	r3, r1, r3
 8016c14:	f04f 0400 	mov.w	r4, #0
 8016c18:	f04f 0500 	mov.w	r5, #0
 8016c1c:	00dd      	lsls	r5, r3, #3
 8016c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016c22:	00d4      	lsls	r4, r2, #3
 8016c24:	4622      	mov	r2, r4
 8016c26:	462b      	mov	r3, r5
 8016c28:	1814      	adds	r4, r2, r0
 8016c2a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8016c2e:	414b      	adcs	r3, r1
 8016c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c38:	685b      	ldr	r3, [r3, #4]
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f04f 0100 	mov.w	r1, #0
 8016c40:	f04f 0200 	mov.w	r2, #0
 8016c44:	f04f 0300 	mov.w	r3, #0
 8016c48:	008b      	lsls	r3, r1, #2
 8016c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016c4e:	0082      	lsls	r2, r0, #2
 8016c50:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8016c54:	f7ea f818 	bl	8000c88 <__aeabi_uldivmod>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	460b      	mov	r3, r1
 8016c5c:	4b96      	ldr	r3, [pc, #600]	; (8016eb8 <UART_SetConfig+0x734>)
 8016c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8016c62:	095b      	lsrs	r3, r3, #5
 8016c64:	2164      	movs	r1, #100	; 0x64
 8016c66:	fb01 f303 	mul.w	r3, r1, r3
 8016c6a:	1ad3      	subs	r3, r2, r3
 8016c6c:	011b      	lsls	r3, r3, #4
 8016c6e:	3332      	adds	r3, #50	; 0x32
 8016c70:	4a91      	ldr	r2, [pc, #580]	; (8016eb8 <UART_SetConfig+0x734>)
 8016c72:	fba2 2303 	umull	r2, r3, r2, r3
 8016c76:	095b      	lsrs	r3, r3, #5
 8016c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c7c:	441e      	add	r6, r3
 8016c7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016c82:	4618      	mov	r0, r3
 8016c84:	f04f 0100 	mov.w	r1, #0
 8016c88:	4602      	mov	r2, r0
 8016c8a:	460b      	mov	r3, r1
 8016c8c:	1894      	adds	r4, r2, r2
 8016c8e:	61bc      	str	r4, [r7, #24]
 8016c90:	415b      	adcs	r3, r3
 8016c92:	61fb      	str	r3, [r7, #28]
 8016c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016c98:	1812      	adds	r2, r2, r0
 8016c9a:	eb41 0303 	adc.w	r3, r1, r3
 8016c9e:	f04f 0400 	mov.w	r4, #0
 8016ca2:	f04f 0500 	mov.w	r5, #0
 8016ca6:	00dd      	lsls	r5, r3, #3
 8016ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016cac:	00d4      	lsls	r4, r2, #3
 8016cae:	4622      	mov	r2, r4
 8016cb0:	462b      	mov	r3, r5
 8016cb2:	1814      	adds	r4, r2, r0
 8016cb4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8016cb8:	414b      	adcs	r3, r1
 8016cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f04f 0100 	mov.w	r1, #0
 8016cca:	f04f 0200 	mov.w	r2, #0
 8016cce:	f04f 0300 	mov.w	r3, #0
 8016cd2:	008b      	lsls	r3, r1, #2
 8016cd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016cd8:	0082      	lsls	r2, r0, #2
 8016cda:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8016cde:	f7e9 ffd3 	bl	8000c88 <__aeabi_uldivmod>
 8016ce2:	4602      	mov	r2, r0
 8016ce4:	460b      	mov	r3, r1
 8016ce6:	4b74      	ldr	r3, [pc, #464]	; (8016eb8 <UART_SetConfig+0x734>)
 8016ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8016cec:	095b      	lsrs	r3, r3, #5
 8016cee:	2164      	movs	r1, #100	; 0x64
 8016cf0:	fb01 f303 	mul.w	r3, r1, r3
 8016cf4:	1ad3      	subs	r3, r2, r3
 8016cf6:	011b      	lsls	r3, r3, #4
 8016cf8:	3332      	adds	r3, #50	; 0x32
 8016cfa:	4a6f      	ldr	r2, [pc, #444]	; (8016eb8 <UART_SetConfig+0x734>)
 8016cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8016d00:	095b      	lsrs	r3, r3, #5
 8016d02:	f003 020f 	and.w	r2, r3, #15
 8016d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	4432      	add	r2, r6
 8016d0e:	609a      	str	r2, [r3, #8]
 8016d10:	e0c9      	b.n	8016ea6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8016d12:	f7fe f803 	bl	8014d1c <HAL_RCC_GetPCLK1Freq>
 8016d16:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016d1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016d1e:	461c      	mov	r4, r3
 8016d20:	f04f 0500 	mov.w	r5, #0
 8016d24:	4622      	mov	r2, r4
 8016d26:	462b      	mov	r3, r5
 8016d28:	1891      	adds	r1, r2, r2
 8016d2a:	6139      	str	r1, [r7, #16]
 8016d2c:	415b      	adcs	r3, r3
 8016d2e:	617b      	str	r3, [r7, #20]
 8016d30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016d34:	1912      	adds	r2, r2, r4
 8016d36:	eb45 0303 	adc.w	r3, r5, r3
 8016d3a:	f04f 0000 	mov.w	r0, #0
 8016d3e:	f04f 0100 	mov.w	r1, #0
 8016d42:	00d9      	lsls	r1, r3, #3
 8016d44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016d48:	00d0      	lsls	r0, r2, #3
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	460b      	mov	r3, r1
 8016d4e:	eb12 0804 	adds.w	r8, r2, r4
 8016d52:	eb43 0905 	adc.w	r9, r3, r5
 8016d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d5a:	685b      	ldr	r3, [r3, #4]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f04f 0100 	mov.w	r1, #0
 8016d62:	f04f 0200 	mov.w	r2, #0
 8016d66:	f04f 0300 	mov.w	r3, #0
 8016d6a:	008b      	lsls	r3, r1, #2
 8016d6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016d70:	0082      	lsls	r2, r0, #2
 8016d72:	4640      	mov	r0, r8
 8016d74:	4649      	mov	r1, r9
 8016d76:	f7e9 ff87 	bl	8000c88 <__aeabi_uldivmod>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	4b4e      	ldr	r3, [pc, #312]	; (8016eb8 <UART_SetConfig+0x734>)
 8016d80:	fba3 2302 	umull	r2, r3, r3, r2
 8016d84:	095b      	lsrs	r3, r3, #5
 8016d86:	011e      	lsls	r6, r3, #4
 8016d88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f04f 0100 	mov.w	r1, #0
 8016d92:	4602      	mov	r2, r0
 8016d94:	460b      	mov	r3, r1
 8016d96:	1894      	adds	r4, r2, r2
 8016d98:	60bc      	str	r4, [r7, #8]
 8016d9a:	415b      	adcs	r3, r3
 8016d9c:	60fb      	str	r3, [r7, #12]
 8016d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016da2:	1812      	adds	r2, r2, r0
 8016da4:	eb41 0303 	adc.w	r3, r1, r3
 8016da8:	f04f 0400 	mov.w	r4, #0
 8016dac:	f04f 0500 	mov.w	r5, #0
 8016db0:	00dd      	lsls	r5, r3, #3
 8016db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016db6:	00d4      	lsls	r4, r2, #3
 8016db8:	4622      	mov	r2, r4
 8016dba:	462b      	mov	r3, r5
 8016dbc:	1814      	adds	r4, r2, r0
 8016dbe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8016dc2:	414b      	adcs	r3, r1
 8016dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f04f 0100 	mov.w	r1, #0
 8016dd4:	f04f 0200 	mov.w	r2, #0
 8016dd8:	f04f 0300 	mov.w	r3, #0
 8016ddc:	008b      	lsls	r3, r1, #2
 8016dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016de2:	0082      	lsls	r2, r0, #2
 8016de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016de8:	f7e9 ff4e 	bl	8000c88 <__aeabi_uldivmod>
 8016dec:	4602      	mov	r2, r0
 8016dee:	460b      	mov	r3, r1
 8016df0:	4b31      	ldr	r3, [pc, #196]	; (8016eb8 <UART_SetConfig+0x734>)
 8016df2:	fba3 1302 	umull	r1, r3, r3, r2
 8016df6:	095b      	lsrs	r3, r3, #5
 8016df8:	2164      	movs	r1, #100	; 0x64
 8016dfa:	fb01 f303 	mul.w	r3, r1, r3
 8016dfe:	1ad3      	subs	r3, r2, r3
 8016e00:	011b      	lsls	r3, r3, #4
 8016e02:	3332      	adds	r3, #50	; 0x32
 8016e04:	4a2c      	ldr	r2, [pc, #176]	; (8016eb8 <UART_SetConfig+0x734>)
 8016e06:	fba2 2303 	umull	r2, r3, r2, r3
 8016e0a:	095b      	lsrs	r3, r3, #5
 8016e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e10:	441e      	add	r6, r3
 8016e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016e16:	4618      	mov	r0, r3
 8016e18:	f04f 0100 	mov.w	r1, #0
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	460b      	mov	r3, r1
 8016e20:	1894      	adds	r4, r2, r2
 8016e22:	603c      	str	r4, [r7, #0]
 8016e24:	415b      	adcs	r3, r3
 8016e26:	607b      	str	r3, [r7, #4]
 8016e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e2c:	1812      	adds	r2, r2, r0
 8016e2e:	eb41 0303 	adc.w	r3, r1, r3
 8016e32:	f04f 0400 	mov.w	r4, #0
 8016e36:	f04f 0500 	mov.w	r5, #0
 8016e3a:	00dd      	lsls	r5, r3, #3
 8016e3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016e40:	00d4      	lsls	r4, r2, #3
 8016e42:	4622      	mov	r2, r4
 8016e44:	462b      	mov	r3, r5
 8016e46:	1814      	adds	r4, r2, r0
 8016e48:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8016e4c:	414b      	adcs	r3, r1
 8016e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f04f 0100 	mov.w	r1, #0
 8016e5e:	f04f 0200 	mov.w	r2, #0
 8016e62:	f04f 0300 	mov.w	r3, #0
 8016e66:	008b      	lsls	r3, r1, #2
 8016e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016e6c:	0082      	lsls	r2, r0, #2
 8016e6e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8016e72:	f7e9 ff09 	bl	8000c88 <__aeabi_uldivmod>
 8016e76:	4602      	mov	r2, r0
 8016e78:	460b      	mov	r3, r1
 8016e7a:	4b0f      	ldr	r3, [pc, #60]	; (8016eb8 <UART_SetConfig+0x734>)
 8016e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8016e80:	095b      	lsrs	r3, r3, #5
 8016e82:	2164      	movs	r1, #100	; 0x64
 8016e84:	fb01 f303 	mul.w	r3, r1, r3
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	011b      	lsls	r3, r3, #4
 8016e8c:	3332      	adds	r3, #50	; 0x32
 8016e8e:	4a0a      	ldr	r2, [pc, #40]	; (8016eb8 <UART_SetConfig+0x734>)
 8016e90:	fba2 2303 	umull	r2, r3, r2, r3
 8016e94:	095b      	lsrs	r3, r3, #5
 8016e96:	f003 020f 	and.w	r2, r3, #15
 8016e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	4432      	add	r2, r6
 8016ea2:	609a      	str	r2, [r3, #8]
}
 8016ea4:	e7ff      	b.n	8016ea6 <UART_SetConfig+0x722>
 8016ea6:	bf00      	nop
 8016ea8:	37f4      	adds	r7, #244	; 0xf4
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb0:	40011000 	.word	0x40011000
 8016eb4:	40011400 	.word	0x40011400
 8016eb8:	51eb851f 	.word	0x51eb851f

08016ebc <__NVIC_SetPriority>:
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b083      	sub	sp, #12
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	6039      	str	r1, [r7, #0]
 8016ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	db0a      	blt.n	8016ee6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	b2da      	uxtb	r2, r3
 8016ed4:	490c      	ldr	r1, [pc, #48]	; (8016f08 <__NVIC_SetPriority+0x4c>)
 8016ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016eda:	0112      	lsls	r2, r2, #4
 8016edc:	b2d2      	uxtb	r2, r2
 8016ede:	440b      	add	r3, r1
 8016ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ee4:	e00a      	b.n	8016efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	4908      	ldr	r1, [pc, #32]	; (8016f0c <__NVIC_SetPriority+0x50>)
 8016eec:	79fb      	ldrb	r3, [r7, #7]
 8016eee:	f003 030f 	and.w	r3, r3, #15
 8016ef2:	3b04      	subs	r3, #4
 8016ef4:	0112      	lsls	r2, r2, #4
 8016ef6:	b2d2      	uxtb	r2, r2
 8016ef8:	440b      	add	r3, r1
 8016efa:	761a      	strb	r2, [r3, #24]
}
 8016efc:	bf00      	nop
 8016efe:	370c      	adds	r7, #12
 8016f00:	46bd      	mov	sp, r7
 8016f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f06:	4770      	bx	lr
 8016f08:	e000e100 	.word	0xe000e100
 8016f0c:	e000ed00 	.word	0xe000ed00

08016f10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016f10:	b580      	push	{r7, lr}
 8016f12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016f14:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <SysTick_Handler+0x1c>)
 8016f16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016f18:	f001 fe02 	bl	8018b20 <xTaskGetSchedulerState>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2b01      	cmp	r3, #1
 8016f20:	d001      	beq.n	8016f26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016f22:	f002 fbe9 	bl	80196f8 <xPortSysTickHandler>
  }
}
 8016f26:	bf00      	nop
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	e000e010 	.word	0xe000e010

08016f30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016f30:	b580      	push	{r7, lr}
 8016f32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016f34:	2100      	movs	r1, #0
 8016f36:	f06f 0004 	mvn.w	r0, #4
 8016f3a:	f7ff ffbf 	bl	8016ebc <__NVIC_SetPriority>
#endif
}
 8016f3e:	bf00      	nop
 8016f40:	bd80      	pop	{r7, pc}
	...

08016f44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016f44:	b480      	push	{r7}
 8016f46:	b083      	sub	sp, #12
 8016f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f4a:	f3ef 8305 	mrs	r3, IPSR
 8016f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8016f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d003      	beq.n	8016f5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016f56:	f06f 0305 	mvn.w	r3, #5
 8016f5a:	607b      	str	r3, [r7, #4]
 8016f5c:	e00c      	b.n	8016f78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016f5e:	4b0a      	ldr	r3, [pc, #40]	; (8016f88 <osKernelInitialize+0x44>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d105      	bne.n	8016f72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016f66:	4b08      	ldr	r3, [pc, #32]	; (8016f88 <osKernelInitialize+0x44>)
 8016f68:	2201      	movs	r2, #1
 8016f6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	607b      	str	r3, [r7, #4]
 8016f70:	e002      	b.n	8016f78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f78:	687b      	ldr	r3, [r7, #4]
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	370c      	adds	r7, #12
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f84:	4770      	bx	lr
 8016f86:	bf00      	nop
 8016f88:	20001108 	.word	0x20001108

08016f8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f92:	f3ef 8305 	mrs	r3, IPSR
 8016f96:	603b      	str	r3, [r7, #0]
  return(result);
 8016f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d003      	beq.n	8016fa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016f9e:	f06f 0305 	mvn.w	r3, #5
 8016fa2:	607b      	str	r3, [r7, #4]
 8016fa4:	e010      	b.n	8016fc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016fa6:	4b0b      	ldr	r3, [pc, #44]	; (8016fd4 <osKernelStart+0x48>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	2b01      	cmp	r3, #1
 8016fac:	d109      	bne.n	8016fc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016fae:	f7ff ffbf 	bl	8016f30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016fb2:	4b08      	ldr	r3, [pc, #32]	; (8016fd4 <osKernelStart+0x48>)
 8016fb4:	2202      	movs	r2, #2
 8016fb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016fb8:	f001 f96a 	bl	8018290 <vTaskStartScheduler>
      stat = osOK;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	607b      	str	r3, [r7, #4]
 8016fc0:	e002      	b.n	8016fc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016fc8:	687b      	ldr	r3, [r7, #4]
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3708      	adds	r7, #8
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
 8016fd2:	bf00      	nop
 8016fd4:	20001108 	.word	0x20001108

08016fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b08e      	sub	sp, #56	; 0x38
 8016fdc:	af04      	add	r7, sp, #16
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fe8:	f3ef 8305 	mrs	r3, IPSR
 8016fec:	617b      	str	r3, [r7, #20]
  return(result);
 8016fee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d17e      	bne.n	80170f2 <osThreadNew+0x11a>
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d07b      	beq.n	80170f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016ffa:	2380      	movs	r3, #128	; 0x80
 8016ffc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016ffe:	2318      	movs	r3, #24
 8017000:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017002:	2300      	movs	r3, #0
 8017004:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801700a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d045      	beq.n	801709e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d002      	beq.n	8017020 <osThreadNew+0x48>
        name = attr->name;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	699b      	ldr	r3, [r3, #24]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d002      	beq.n	801702e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	699b      	ldr	r3, [r3, #24]
 801702c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801702e:	69fb      	ldr	r3, [r7, #28]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d008      	beq.n	8017046 <osThreadNew+0x6e>
 8017034:	69fb      	ldr	r3, [r7, #28]
 8017036:	2b38      	cmp	r3, #56	; 0x38
 8017038:	d805      	bhi.n	8017046 <osThreadNew+0x6e>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	f003 0301 	and.w	r3, r3, #1
 8017042:	2b00      	cmp	r3, #0
 8017044:	d001      	beq.n	801704a <osThreadNew+0x72>
        return (NULL);
 8017046:	2300      	movs	r3, #0
 8017048:	e054      	b.n	80170f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	695b      	ldr	r3, [r3, #20]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	695b      	ldr	r3, [r3, #20]
 8017056:	089b      	lsrs	r3, r3, #2
 8017058:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	689b      	ldr	r3, [r3, #8]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d00e      	beq.n	8017080 <osThreadNew+0xa8>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	68db      	ldr	r3, [r3, #12]
 8017066:	2b5b      	cmp	r3, #91	; 0x5b
 8017068:	d90a      	bls.n	8017080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801706e:	2b00      	cmp	r3, #0
 8017070:	d006      	beq.n	8017080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	695b      	ldr	r3, [r3, #20]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d002      	beq.n	8017080 <osThreadNew+0xa8>
        mem = 1;
 801707a:	2301      	movs	r3, #1
 801707c:	61bb      	str	r3, [r7, #24]
 801707e:	e010      	b.n	80170a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	689b      	ldr	r3, [r3, #8]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d10c      	bne.n	80170a2 <osThreadNew+0xca>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	68db      	ldr	r3, [r3, #12]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d108      	bne.n	80170a2 <osThreadNew+0xca>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	691b      	ldr	r3, [r3, #16]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d104      	bne.n	80170a2 <osThreadNew+0xca>
          mem = 0;
 8017098:	2300      	movs	r3, #0
 801709a:	61bb      	str	r3, [r7, #24]
 801709c:	e001      	b.n	80170a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801709e:	2300      	movs	r3, #0
 80170a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	2b01      	cmp	r3, #1
 80170a6:	d110      	bne.n	80170ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80170b0:	9202      	str	r2, [sp, #8]
 80170b2:	9301      	str	r3, [sp, #4]
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	9300      	str	r3, [sp, #0]
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	6a3a      	ldr	r2, [r7, #32]
 80170bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f000 fe38 	bl	8017d34 <xTaskCreateStatic>
 80170c4:	4603      	mov	r3, r0
 80170c6:	613b      	str	r3, [r7, #16]
 80170c8:	e013      	b.n	80170f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d110      	bne.n	80170f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80170d0:	6a3b      	ldr	r3, [r7, #32]
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	f107 0310 	add.w	r3, r7, #16
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	69fb      	ldr	r3, [r7, #28]
 80170dc:	9300      	str	r3, [sp, #0]
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170e2:	68f8      	ldr	r0, [r7, #12]
 80170e4:	f000 fe83 	bl	8017dee <xTaskCreate>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d001      	beq.n	80170f2 <osThreadNew+0x11a>
            hTask = NULL;
 80170ee:	2300      	movs	r3, #0
 80170f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80170f2:	693b      	ldr	r3, [r7, #16]
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	3728      	adds	r7, #40	; 0x28
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b086      	sub	sp, #24
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017108:	f3ef 8305 	mrs	r3, IPSR
 801710c:	60bb      	str	r3, [r7, #8]
  return(result);
 801710e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8017110:	2b00      	cmp	r3, #0
 8017112:	d003      	beq.n	801711c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8017114:	f06f 0305 	mvn.w	r3, #5
 8017118:	617b      	str	r3, [r7, #20]
 801711a:	e017      	b.n	801714c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 801711c:	693b      	ldr	r3, [r7, #16]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d103      	bne.n	801712a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8017122:	f06f 0303 	mvn.w	r3, #3
 8017126:	617b      	str	r3, [r7, #20]
 8017128:	e010      	b.n	801714c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801712a:	6938      	ldr	r0, [r7, #16]
 801712c:	f001 f84a 	bl	80181c4 <eTaskGetState>
 8017130:	4603      	mov	r3, r0
 8017132:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8017134:	7bfb      	ldrb	r3, [r7, #15]
 8017136:	2b04      	cmp	r3, #4
 8017138:	d005      	beq.n	8017146 <osThreadTerminate+0x4a>
      stat = osOK;
 801713a:	2300      	movs	r3, #0
 801713c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 801713e:	6938      	ldr	r0, [r7, #16]
 8017140:	f000 ff9a 	bl	8018078 <vTaskDelete>
 8017144:	e002      	b.n	801714c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8017146:	f06f 0302 	mvn.w	r3, #2
 801714a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801714c:	697b      	ldr	r3, [r7, #20]
}
 801714e:	4618      	mov	r0, r3
 8017150:	3718      	adds	r7, #24
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}

08017156 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017156:	b580      	push	{r7, lr}
 8017158:	b084      	sub	sp, #16
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801715e:	f3ef 8305 	mrs	r3, IPSR
 8017162:	60bb      	str	r3, [r7, #8]
  return(result);
 8017164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017166:	2b00      	cmp	r3, #0
 8017168:	d003      	beq.n	8017172 <osDelay+0x1c>
    stat = osErrorISR;
 801716a:	f06f 0305 	mvn.w	r3, #5
 801716e:	60fb      	str	r3, [r7, #12]
 8017170:	e007      	b.n	8017182 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017172:	2300      	movs	r3, #0
 8017174:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d002      	beq.n	8017182 <osDelay+0x2c>
      vTaskDelay(ticks);
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f000 ffed 	bl	801815c <vTaskDelay>
    }
  }

  return (stat);
 8017182:	68fb      	ldr	r3, [r7, #12]
}
 8017184:	4618      	mov	r0, r3
 8017186:	3710      	adds	r7, #16
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}

0801718c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801718c:	b480      	push	{r7}
 801718e:	b085      	sub	sp, #20
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	4a07      	ldr	r2, [pc, #28]	; (80171b8 <vApplicationGetIdleTaskMemory+0x2c>)
 801719c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	4a06      	ldr	r2, [pc, #24]	; (80171bc <vApplicationGetIdleTaskMemory+0x30>)
 80171a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2280      	movs	r2, #128	; 0x80
 80171a8:	601a      	str	r2, [r3, #0]
}
 80171aa:	bf00      	nop
 80171ac:	3714      	adds	r7, #20
 80171ae:	46bd      	mov	sp, r7
 80171b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop
 80171b8:	2000110c 	.word	0x2000110c
 80171bc:	20001168 	.word	0x20001168

080171c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	60f8      	str	r0, [r7, #12]
 80171c8:	60b9      	str	r1, [r7, #8]
 80171ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	4a07      	ldr	r2, [pc, #28]	; (80171ec <vApplicationGetTimerTaskMemory+0x2c>)
 80171d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	4a06      	ldr	r2, [pc, #24]	; (80171f0 <vApplicationGetTimerTaskMemory+0x30>)
 80171d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80171de:	601a      	str	r2, [r3, #0]
}
 80171e0:	bf00      	nop
 80171e2:	3714      	adds	r7, #20
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr
 80171ec:	20001368 	.word	0x20001368
 80171f0:	200013c4 	.word	0x200013c4

080171f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f103 0208 	add.w	r2, r3, #8
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801720c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f103 0208 	add.w	r2, r3, #8
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f103 0208 	add.w	r2, r3, #8
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2200      	movs	r2, #0
 8017226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017228:	bf00      	nop
 801722a:	370c      	adds	r7, #12
 801722c:	46bd      	mov	sp, r7
 801722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017232:	4770      	bx	lr

08017234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017234:	b480      	push	{r7}
 8017236:	b083      	sub	sp, #12
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	2200      	movs	r2, #0
 8017240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017242:	bf00      	nop
 8017244:	370c      	adds	r7, #12
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr

0801724e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801724e:	b480      	push	{r7}
 8017250:	b085      	sub	sp, #20
 8017252:	af00      	add	r7, sp, #0
 8017254:	6078      	str	r0, [r7, #4]
 8017256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	685b      	ldr	r3, [r3, #4]
 801725c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	689a      	ldr	r2, [r3, #8]
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	689b      	ldr	r3, [r3, #8]
 8017270:	683a      	ldr	r2, [r7, #0]
 8017272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	683a      	ldr	r2, [r7, #0]
 8017278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	687a      	ldr	r2, [r7, #4]
 801727e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	1c5a      	adds	r2, r3, #1
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	601a      	str	r2, [r3, #0]
}
 801728a:	bf00      	nop
 801728c:	3714      	adds	r7, #20
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr

08017296 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017296:	b480      	push	{r7}
 8017298:	b085      	sub	sp, #20
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
 801729e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172ac:	d103      	bne.n	80172b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	691b      	ldr	r3, [r3, #16]
 80172b2:	60fb      	str	r3, [r7, #12]
 80172b4:	e00c      	b.n	80172d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	3308      	adds	r3, #8
 80172ba:	60fb      	str	r3, [r7, #12]
 80172bc:	e002      	b.n	80172c4 <vListInsert+0x2e>
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	685b      	ldr	r3, [r3, #4]
 80172c2:	60fb      	str	r3, [r7, #12]
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	68ba      	ldr	r2, [r7, #8]
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d2f6      	bcs.n	80172be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	685a      	ldr	r2, [r3, #4]
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	683a      	ldr	r2, [r7, #0]
 80172de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	68fa      	ldr	r2, [r7, #12]
 80172e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	683a      	ldr	r2, [r7, #0]
 80172ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	1c5a      	adds	r2, r3, #1
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	601a      	str	r2, [r3, #0]
}
 80172fc:	bf00      	nop
 80172fe:	3714      	adds	r7, #20
 8017300:	46bd      	mov	sp, r7
 8017302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017306:	4770      	bx	lr

08017308 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017308:	b480      	push	{r7}
 801730a:	b085      	sub	sp, #20
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	691b      	ldr	r3, [r3, #16]
 8017314:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	687a      	ldr	r2, [r7, #4]
 801731c:	6892      	ldr	r2, [r2, #8]
 801731e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	689b      	ldr	r3, [r3, #8]
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	6852      	ldr	r2, [r2, #4]
 8017328:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	685b      	ldr	r3, [r3, #4]
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	429a      	cmp	r2, r3
 8017332:	d103      	bne.n	801733c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	689a      	ldr	r2, [r3, #8]
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2200      	movs	r2, #0
 8017340:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	1e5a      	subs	r2, r3, #1
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	681b      	ldr	r3, [r3, #0]
}
 8017350:	4618      	mov	r0, r3
 8017352:	3714      	adds	r7, #20
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr

0801735c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b084      	sub	sp, #16
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d10a      	bne.n	8017386 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017374:	f383 8811 	msr	BASEPRI, r3
 8017378:	f3bf 8f6f 	isb	sy
 801737c:	f3bf 8f4f 	dsb	sy
 8017380:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017382:	bf00      	nop
 8017384:	e7fe      	b.n	8017384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017386:	f002 f925 	bl	80195d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017392:	68f9      	ldr	r1, [r7, #12]
 8017394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017396:	fb01 f303 	mul.w	r3, r1, r3
 801739a:	441a      	add	r2, r3
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2200      	movs	r2, #0
 80173a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173b6:	3b01      	subs	r3, #1
 80173b8:	68f9      	ldr	r1, [r7, #12]
 80173ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80173bc:	fb01 f303 	mul.w	r3, r1, r3
 80173c0:	441a      	add	r2, r3
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	22ff      	movs	r2, #255	; 0xff
 80173ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	22ff      	movs	r2, #255	; 0xff
 80173d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d114      	bne.n	8017406 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	691b      	ldr	r3, [r3, #16]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d01a      	beq.n	801741a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	3310      	adds	r3, #16
 80173e8:	4618      	mov	r0, r3
 80173ea:	f001 f9db 	bl	80187a4 <xTaskRemoveFromEventList>
 80173ee:	4603      	mov	r3, r0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d012      	beq.n	801741a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80173f4:	4b0c      	ldr	r3, [pc, #48]	; (8017428 <xQueueGenericReset+0xcc>)
 80173f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173fa:	601a      	str	r2, [r3, #0]
 80173fc:	f3bf 8f4f 	dsb	sy
 8017400:	f3bf 8f6f 	isb	sy
 8017404:	e009      	b.n	801741a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	3310      	adds	r3, #16
 801740a:	4618      	mov	r0, r3
 801740c:	f7ff fef2 	bl	80171f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	3324      	adds	r3, #36	; 0x24
 8017414:	4618      	mov	r0, r3
 8017416:	f7ff feed 	bl	80171f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801741a:	f002 f90b 	bl	8019634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801741e:	2301      	movs	r3, #1
}
 8017420:	4618      	mov	r0, r3
 8017422:	3710      	adds	r7, #16
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	e000ed04 	.word	0xe000ed04

0801742c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801742c:	b580      	push	{r7, lr}
 801742e:	b08e      	sub	sp, #56	; 0x38
 8017430:	af02      	add	r7, sp, #8
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	607a      	str	r2, [r7, #4]
 8017438:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d10a      	bne.n	8017456 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017444:	f383 8811 	msr	BASEPRI, r3
 8017448:	f3bf 8f6f 	isb	sy
 801744c:	f3bf 8f4f 	dsb	sy
 8017450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017452:	bf00      	nop
 8017454:	e7fe      	b.n	8017454 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d10a      	bne.n	8017472 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017460:	f383 8811 	msr	BASEPRI, r3
 8017464:	f3bf 8f6f 	isb	sy
 8017468:	f3bf 8f4f 	dsb	sy
 801746c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801746e:	bf00      	nop
 8017470:	e7fe      	b.n	8017470 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d002      	beq.n	801747e <xQueueGenericCreateStatic+0x52>
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d001      	beq.n	8017482 <xQueueGenericCreateStatic+0x56>
 801747e:	2301      	movs	r3, #1
 8017480:	e000      	b.n	8017484 <xQueueGenericCreateStatic+0x58>
 8017482:	2300      	movs	r3, #0
 8017484:	2b00      	cmp	r3, #0
 8017486:	d10a      	bne.n	801749e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	623b      	str	r3, [r7, #32]
}
 801749a:	bf00      	nop
 801749c:	e7fe      	b.n	801749c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d102      	bne.n	80174aa <xQueueGenericCreateStatic+0x7e>
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d101      	bne.n	80174ae <xQueueGenericCreateStatic+0x82>
 80174aa:	2301      	movs	r3, #1
 80174ac:	e000      	b.n	80174b0 <xQueueGenericCreateStatic+0x84>
 80174ae:	2300      	movs	r3, #0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d10a      	bne.n	80174ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80174b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b8:	f383 8811 	msr	BASEPRI, r3
 80174bc:	f3bf 8f6f 	isb	sy
 80174c0:	f3bf 8f4f 	dsb	sy
 80174c4:	61fb      	str	r3, [r7, #28]
}
 80174c6:	bf00      	nop
 80174c8:	e7fe      	b.n	80174c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80174ca:	2350      	movs	r3, #80	; 0x50
 80174cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	2b50      	cmp	r3, #80	; 0x50
 80174d2:	d00a      	beq.n	80174ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80174d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d8:	f383 8811 	msr	BASEPRI, r3
 80174dc:	f3bf 8f6f 	isb	sy
 80174e0:	f3bf 8f4f 	dsb	sy
 80174e4:	61bb      	str	r3, [r7, #24]
}
 80174e6:	bf00      	nop
 80174e8:	e7fe      	b.n	80174e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80174ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80174f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d00d      	beq.n	8017512 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80174f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f8:	2201      	movs	r2, #1
 80174fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80174fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017504:	9300      	str	r3, [sp, #0]
 8017506:	4613      	mov	r3, r2
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	68b9      	ldr	r1, [r7, #8]
 801750c:	68f8      	ldr	r0, [r7, #12]
 801750e:	f000 f805 	bl	801751c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017514:	4618      	mov	r0, r3
 8017516:	3730      	adds	r7, #48	; 0x30
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b084      	sub	sp, #16
 8017520:	af00      	add	r7, sp, #0
 8017522:	60f8      	str	r0, [r7, #12]
 8017524:	60b9      	str	r1, [r7, #8]
 8017526:	607a      	str	r2, [r7, #4]
 8017528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d103      	bne.n	8017538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	69ba      	ldr	r2, [r7, #24]
 8017534:	601a      	str	r2, [r3, #0]
 8017536:	e002      	b.n	801753e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	68fa      	ldr	r2, [r7, #12]
 8017542:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017544:	69bb      	ldr	r3, [r7, #24]
 8017546:	68ba      	ldr	r2, [r7, #8]
 8017548:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801754a:	2101      	movs	r1, #1
 801754c:	69b8      	ldr	r0, [r7, #24]
 801754e:	f7ff ff05 	bl	801735c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	78fa      	ldrb	r2, [r7, #3]
 8017556:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801755a:	bf00      	nop
 801755c:	3710      	adds	r7, #16
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
	...

08017564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b08e      	sub	sp, #56	; 0x38
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	607a      	str	r2, [r7, #4]
 8017570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017572:	2300      	movs	r3, #0
 8017574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10a      	bne.n	8017596 <xQueueGenericSend+0x32>
	__asm volatile
 8017580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017584:	f383 8811 	msr	BASEPRI, r3
 8017588:	f3bf 8f6f 	isb	sy
 801758c:	f3bf 8f4f 	dsb	sy
 8017590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017592:	bf00      	nop
 8017594:	e7fe      	b.n	8017594 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d103      	bne.n	80175a4 <xQueueGenericSend+0x40>
 801759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d101      	bne.n	80175a8 <xQueueGenericSend+0x44>
 80175a4:	2301      	movs	r3, #1
 80175a6:	e000      	b.n	80175aa <xQueueGenericSend+0x46>
 80175a8:	2300      	movs	r3, #0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d10a      	bne.n	80175c4 <xQueueGenericSend+0x60>
	__asm volatile
 80175ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b2:	f383 8811 	msr	BASEPRI, r3
 80175b6:	f3bf 8f6f 	isb	sy
 80175ba:	f3bf 8f4f 	dsb	sy
 80175be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175c0:	bf00      	nop
 80175c2:	e7fe      	b.n	80175c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	2b02      	cmp	r3, #2
 80175c8:	d103      	bne.n	80175d2 <xQueueGenericSend+0x6e>
 80175ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175ce:	2b01      	cmp	r3, #1
 80175d0:	d101      	bne.n	80175d6 <xQueueGenericSend+0x72>
 80175d2:	2301      	movs	r3, #1
 80175d4:	e000      	b.n	80175d8 <xQueueGenericSend+0x74>
 80175d6:	2300      	movs	r3, #0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d10a      	bne.n	80175f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80175dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175e0:	f383 8811 	msr	BASEPRI, r3
 80175e4:	f3bf 8f6f 	isb	sy
 80175e8:	f3bf 8f4f 	dsb	sy
 80175ec:	623b      	str	r3, [r7, #32]
}
 80175ee:	bf00      	nop
 80175f0:	e7fe      	b.n	80175f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175f2:	f001 fa95 	bl	8018b20 <xTaskGetSchedulerState>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d102      	bne.n	8017602 <xQueueGenericSend+0x9e>
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d101      	bne.n	8017606 <xQueueGenericSend+0xa2>
 8017602:	2301      	movs	r3, #1
 8017604:	e000      	b.n	8017608 <xQueueGenericSend+0xa4>
 8017606:	2300      	movs	r3, #0
 8017608:	2b00      	cmp	r3, #0
 801760a:	d10a      	bne.n	8017622 <xQueueGenericSend+0xbe>
	__asm volatile
 801760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017610:	f383 8811 	msr	BASEPRI, r3
 8017614:	f3bf 8f6f 	isb	sy
 8017618:	f3bf 8f4f 	dsb	sy
 801761c:	61fb      	str	r3, [r7, #28]
}
 801761e:	bf00      	nop
 8017620:	e7fe      	b.n	8017620 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017622:	f001 ffd7 	bl	80195d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801762e:	429a      	cmp	r2, r3
 8017630:	d302      	bcc.n	8017638 <xQueueGenericSend+0xd4>
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	2b02      	cmp	r3, #2
 8017636:	d129      	bne.n	801768c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017638:	683a      	ldr	r2, [r7, #0]
 801763a:	68b9      	ldr	r1, [r7, #8]
 801763c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801763e:	f000 fa0b 	bl	8017a58 <prvCopyDataToQueue>
 8017642:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017648:	2b00      	cmp	r3, #0
 801764a:	d010      	beq.n	801766e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764e:	3324      	adds	r3, #36	; 0x24
 8017650:	4618      	mov	r0, r3
 8017652:	f001 f8a7 	bl	80187a4 <xTaskRemoveFromEventList>
 8017656:	4603      	mov	r3, r0
 8017658:	2b00      	cmp	r3, #0
 801765a:	d013      	beq.n	8017684 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801765c:	4b3f      	ldr	r3, [pc, #252]	; (801775c <xQueueGenericSend+0x1f8>)
 801765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017662:	601a      	str	r2, [r3, #0]
 8017664:	f3bf 8f4f 	dsb	sy
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	e00a      	b.n	8017684 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017670:	2b00      	cmp	r3, #0
 8017672:	d007      	beq.n	8017684 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017674:	4b39      	ldr	r3, [pc, #228]	; (801775c <xQueueGenericSend+0x1f8>)
 8017676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801767a:	601a      	str	r2, [r3, #0]
 801767c:	f3bf 8f4f 	dsb	sy
 8017680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017684:	f001 ffd6 	bl	8019634 <vPortExitCritical>
				return pdPASS;
 8017688:	2301      	movs	r3, #1
 801768a:	e063      	b.n	8017754 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d103      	bne.n	801769a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017692:	f001 ffcf 	bl	8019634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017696:	2300      	movs	r3, #0
 8017698:	e05c      	b.n	8017754 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801769c:	2b00      	cmp	r3, #0
 801769e:	d106      	bne.n	80176ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176a0:	f107 0314 	add.w	r3, r7, #20
 80176a4:	4618      	mov	r0, r3
 80176a6:	f001 f8e1 	bl	801886c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176aa:	2301      	movs	r3, #1
 80176ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176ae:	f001 ffc1 	bl	8019634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176b2:	f000 fe53 	bl	801835c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176b6:	f001 ff8d 	bl	80195d4 <vPortEnterCritical>
 80176ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176c0:	b25b      	sxtb	r3, r3
 80176c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176c6:	d103      	bne.n	80176d0 <xQueueGenericSend+0x16c>
 80176c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ca:	2200      	movs	r2, #0
 80176cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80176d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176d6:	b25b      	sxtb	r3, r3
 80176d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176dc:	d103      	bne.n	80176e6 <xQueueGenericSend+0x182>
 80176de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e0:	2200      	movs	r2, #0
 80176e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80176e6:	f001 ffa5 	bl	8019634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80176ea:	1d3a      	adds	r2, r7, #4
 80176ec:	f107 0314 	add.w	r3, r7, #20
 80176f0:	4611      	mov	r1, r2
 80176f2:	4618      	mov	r0, r3
 80176f4:	f001 f8d0 	bl	8018898 <xTaskCheckForTimeOut>
 80176f8:	4603      	mov	r3, r0
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d124      	bne.n	8017748 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80176fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017700:	f000 faa2 	bl	8017c48 <prvIsQueueFull>
 8017704:	4603      	mov	r3, r0
 8017706:	2b00      	cmp	r3, #0
 8017708:	d018      	beq.n	801773c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	3310      	adds	r3, #16
 801770e:	687a      	ldr	r2, [r7, #4]
 8017710:	4611      	mov	r1, r2
 8017712:	4618      	mov	r0, r3
 8017714:	f000 fff6 	bl	8018704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801771a:	f000 fa2d 	bl	8017b78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801771e:	f000 fe2b 	bl	8018378 <xTaskResumeAll>
 8017722:	4603      	mov	r3, r0
 8017724:	2b00      	cmp	r3, #0
 8017726:	f47f af7c 	bne.w	8017622 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801772a:	4b0c      	ldr	r3, [pc, #48]	; (801775c <xQueueGenericSend+0x1f8>)
 801772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017730:	601a      	str	r2, [r3, #0]
 8017732:	f3bf 8f4f 	dsb	sy
 8017736:	f3bf 8f6f 	isb	sy
 801773a:	e772      	b.n	8017622 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801773c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801773e:	f000 fa1b 	bl	8017b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017742:	f000 fe19 	bl	8018378 <xTaskResumeAll>
 8017746:	e76c      	b.n	8017622 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801774a:	f000 fa15 	bl	8017b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801774e:	f000 fe13 	bl	8018378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017754:	4618      	mov	r0, r3
 8017756:	3738      	adds	r7, #56	; 0x38
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	e000ed04 	.word	0xe000ed04

08017760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b090      	sub	sp, #64	; 0x40
 8017764:	af00      	add	r7, sp, #0
 8017766:	60f8      	str	r0, [r7, #12]
 8017768:	60b9      	str	r1, [r7, #8]
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017774:	2b00      	cmp	r3, #0
 8017776:	d10a      	bne.n	801778e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801777c:	f383 8811 	msr	BASEPRI, r3
 8017780:	f3bf 8f6f 	isb	sy
 8017784:	f3bf 8f4f 	dsb	sy
 8017788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801778a:	bf00      	nop
 801778c:	e7fe      	b.n	801778c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d103      	bne.n	801779c <xQueueGenericSendFromISR+0x3c>
 8017794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017798:	2b00      	cmp	r3, #0
 801779a:	d101      	bne.n	80177a0 <xQueueGenericSendFromISR+0x40>
 801779c:	2301      	movs	r3, #1
 801779e:	e000      	b.n	80177a2 <xQueueGenericSendFromISR+0x42>
 80177a0:	2300      	movs	r3, #0
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d10a      	bne.n	80177bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80177a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177aa:	f383 8811 	msr	BASEPRI, r3
 80177ae:	f3bf 8f6f 	isb	sy
 80177b2:	f3bf 8f4f 	dsb	sy
 80177b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80177b8:	bf00      	nop
 80177ba:	e7fe      	b.n	80177ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d103      	bne.n	80177ca <xQueueGenericSendFromISR+0x6a>
 80177c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	d101      	bne.n	80177ce <xQueueGenericSendFromISR+0x6e>
 80177ca:	2301      	movs	r3, #1
 80177cc:	e000      	b.n	80177d0 <xQueueGenericSendFromISR+0x70>
 80177ce:	2300      	movs	r3, #0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d10a      	bne.n	80177ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80177d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d8:	f383 8811 	msr	BASEPRI, r3
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	f3bf 8f4f 	dsb	sy
 80177e4:	623b      	str	r3, [r7, #32]
}
 80177e6:	bf00      	nop
 80177e8:	e7fe      	b.n	80177e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80177ea:	f001 ffd5 	bl	8019798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80177ee:	f3ef 8211 	mrs	r2, BASEPRI
 80177f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f6:	f383 8811 	msr	BASEPRI, r3
 80177fa:	f3bf 8f6f 	isb	sy
 80177fe:	f3bf 8f4f 	dsb	sy
 8017802:	61fa      	str	r2, [r7, #28]
 8017804:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017806:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017808:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017812:	429a      	cmp	r2, r3
 8017814:	d302      	bcc.n	801781c <xQueueGenericSendFromISR+0xbc>
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	2b02      	cmp	r3, #2
 801781a:	d12f      	bne.n	801787c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801782a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801782c:	683a      	ldr	r2, [r7, #0]
 801782e:	68b9      	ldr	r1, [r7, #8]
 8017830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017832:	f000 f911 	bl	8017a58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017836:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801783e:	d112      	bne.n	8017866 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017844:	2b00      	cmp	r3, #0
 8017846:	d016      	beq.n	8017876 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801784a:	3324      	adds	r3, #36	; 0x24
 801784c:	4618      	mov	r0, r3
 801784e:	f000 ffa9 	bl	80187a4 <xTaskRemoveFromEventList>
 8017852:	4603      	mov	r3, r0
 8017854:	2b00      	cmp	r3, #0
 8017856:	d00e      	beq.n	8017876 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d00b      	beq.n	8017876 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2201      	movs	r2, #1
 8017862:	601a      	str	r2, [r3, #0]
 8017864:	e007      	b.n	8017876 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801786a:	3301      	adds	r3, #1
 801786c:	b2db      	uxtb	r3, r3
 801786e:	b25a      	sxtb	r2, r3
 8017870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017876:	2301      	movs	r3, #1
 8017878:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801787a:	e001      	b.n	8017880 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801787c:	2300      	movs	r3, #0
 801787e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017882:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801788a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801788e:	4618      	mov	r0, r3
 8017890:	3740      	adds	r7, #64	; 0x40
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}
	...

08017898 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b08c      	sub	sp, #48	; 0x30
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80178a4:	2300      	movs	r3, #0
 80178a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80178ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d10a      	bne.n	80178c8 <xQueueReceive+0x30>
	__asm volatile
 80178b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b6:	f383 8811 	msr	BASEPRI, r3
 80178ba:	f3bf 8f6f 	isb	sy
 80178be:	f3bf 8f4f 	dsb	sy
 80178c2:	623b      	str	r3, [r7, #32]
}
 80178c4:	bf00      	nop
 80178c6:	e7fe      	b.n	80178c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d103      	bne.n	80178d6 <xQueueReceive+0x3e>
 80178ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d101      	bne.n	80178da <xQueueReceive+0x42>
 80178d6:	2301      	movs	r3, #1
 80178d8:	e000      	b.n	80178dc <xQueueReceive+0x44>
 80178da:	2300      	movs	r3, #0
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d10a      	bne.n	80178f6 <xQueueReceive+0x5e>
	__asm volatile
 80178e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e4:	f383 8811 	msr	BASEPRI, r3
 80178e8:	f3bf 8f6f 	isb	sy
 80178ec:	f3bf 8f4f 	dsb	sy
 80178f0:	61fb      	str	r3, [r7, #28]
}
 80178f2:	bf00      	nop
 80178f4:	e7fe      	b.n	80178f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80178f6:	f001 f913 	bl	8018b20 <xTaskGetSchedulerState>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d102      	bne.n	8017906 <xQueueReceive+0x6e>
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d101      	bne.n	801790a <xQueueReceive+0x72>
 8017906:	2301      	movs	r3, #1
 8017908:	e000      	b.n	801790c <xQueueReceive+0x74>
 801790a:	2300      	movs	r3, #0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d10a      	bne.n	8017926 <xQueueReceive+0x8e>
	__asm volatile
 8017910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017914:	f383 8811 	msr	BASEPRI, r3
 8017918:	f3bf 8f6f 	isb	sy
 801791c:	f3bf 8f4f 	dsb	sy
 8017920:	61bb      	str	r3, [r7, #24]
}
 8017922:	bf00      	nop
 8017924:	e7fe      	b.n	8017924 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017926:	f001 fe55 	bl	80195d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801792e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017932:	2b00      	cmp	r3, #0
 8017934:	d01f      	beq.n	8017976 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017936:	68b9      	ldr	r1, [r7, #8]
 8017938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801793a:	f000 f8f7 	bl	8017b2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	1e5a      	subs	r2, r3, #1
 8017942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017944:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017948:	691b      	ldr	r3, [r3, #16]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d00f      	beq.n	801796e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017950:	3310      	adds	r3, #16
 8017952:	4618      	mov	r0, r3
 8017954:	f000 ff26 	bl	80187a4 <xTaskRemoveFromEventList>
 8017958:	4603      	mov	r3, r0
 801795a:	2b00      	cmp	r3, #0
 801795c:	d007      	beq.n	801796e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801795e:	4b3d      	ldr	r3, [pc, #244]	; (8017a54 <xQueueReceive+0x1bc>)
 8017960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017964:	601a      	str	r2, [r3, #0]
 8017966:	f3bf 8f4f 	dsb	sy
 801796a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801796e:	f001 fe61 	bl	8019634 <vPortExitCritical>
				return pdPASS;
 8017972:	2301      	movs	r3, #1
 8017974:	e069      	b.n	8017a4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d103      	bne.n	8017984 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801797c:	f001 fe5a 	bl	8019634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017980:	2300      	movs	r3, #0
 8017982:	e062      	b.n	8017a4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017986:	2b00      	cmp	r3, #0
 8017988:	d106      	bne.n	8017998 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801798a:	f107 0310 	add.w	r3, r7, #16
 801798e:	4618      	mov	r0, r3
 8017990:	f000 ff6c 	bl	801886c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017994:	2301      	movs	r3, #1
 8017996:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017998:	f001 fe4c 	bl	8019634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801799c:	f000 fcde 	bl	801835c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80179a0:	f001 fe18 	bl	80195d4 <vPortEnterCritical>
 80179a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179aa:	b25b      	sxtb	r3, r3
 80179ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179b0:	d103      	bne.n	80179ba <xQueueReceive+0x122>
 80179b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b4:	2200      	movs	r2, #0
 80179b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179c0:	b25b      	sxtb	r3, r3
 80179c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179c6:	d103      	bne.n	80179d0 <xQueueReceive+0x138>
 80179c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ca:	2200      	movs	r2, #0
 80179cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179d0:	f001 fe30 	bl	8019634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80179d4:	1d3a      	adds	r2, r7, #4
 80179d6:	f107 0310 	add.w	r3, r7, #16
 80179da:	4611      	mov	r1, r2
 80179dc:	4618      	mov	r0, r3
 80179de:	f000 ff5b 	bl	8018898 <xTaskCheckForTimeOut>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d123      	bne.n	8017a30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80179e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179ea:	f000 f917 	bl	8017c1c <prvIsQueueEmpty>
 80179ee:	4603      	mov	r3, r0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d017      	beq.n	8017a24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80179f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f6:	3324      	adds	r3, #36	; 0x24
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	4611      	mov	r1, r2
 80179fc:	4618      	mov	r0, r3
 80179fe:	f000 fe81 	bl	8018704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a04:	f000 f8b8 	bl	8017b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017a08:	f000 fcb6 	bl	8018378 <xTaskResumeAll>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d189      	bne.n	8017926 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017a12:	4b10      	ldr	r3, [pc, #64]	; (8017a54 <xQueueReceive+0x1bc>)
 8017a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	f3bf 8f4f 	dsb	sy
 8017a1e:	f3bf 8f6f 	isb	sy
 8017a22:	e780      	b.n	8017926 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a26:	f000 f8a7 	bl	8017b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a2a:	f000 fca5 	bl	8018378 <xTaskResumeAll>
 8017a2e:	e77a      	b.n	8017926 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a32:	f000 f8a1 	bl	8017b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a36:	f000 fc9f 	bl	8018378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a3c:	f000 f8ee 	bl	8017c1c <prvIsQueueEmpty>
 8017a40:	4603      	mov	r3, r0
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	f43f af6f 	beq.w	8017926 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3730      	adds	r7, #48	; 0x30
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}
 8017a52:	bf00      	nop
 8017a54:	e000ed04 	.word	0xe000ed04

08017a58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b086      	sub	sp, #24
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017a64:	2300      	movs	r3, #0
 8017a66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d10d      	bne.n	8017a92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d14d      	bne.n	8017b1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	4618      	mov	r0, r3
 8017a84:	f001 f86a 	bl	8018b5c <xTaskPriorityDisinherit>
 8017a88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	609a      	str	r2, [r3, #8]
 8017a90:	e043      	b.n	8017b1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d119      	bne.n	8017acc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	6858      	ldr	r0, [r3, #4]
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	68b9      	ldr	r1, [r7, #8]
 8017aa4:	f002 f8d4 	bl	8019c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	685a      	ldr	r2, [r3, #4]
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ab0:	441a      	add	r2, r3
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	685a      	ldr	r2, [r3, #4]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	689b      	ldr	r3, [r3, #8]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d32b      	bcc.n	8017b1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	605a      	str	r2, [r3, #4]
 8017aca:	e026      	b.n	8017b1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	68d8      	ldr	r0, [r3, #12]
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ad4:	461a      	mov	r2, r3
 8017ad6:	68b9      	ldr	r1, [r7, #8]
 8017ad8:	f002 f8ba 	bl	8019c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	68da      	ldr	r2, [r3, #12]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ae4:	425b      	negs	r3, r3
 8017ae6:	441a      	add	r2, r3
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	68da      	ldr	r2, [r3, #12]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d207      	bcs.n	8017b08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	689a      	ldr	r2, [r3, #8]
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b00:	425b      	negs	r3, r3
 8017b02:	441a      	add	r2, r3
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	d105      	bne.n	8017b1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	3b01      	subs	r3, #1
 8017b18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b1a:	693b      	ldr	r3, [r7, #16]
 8017b1c:	1c5a      	adds	r2, r3, #1
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017b22:	697b      	ldr	r3, [r7, #20]
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3718      	adds	r7, #24
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b082      	sub	sp, #8
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d018      	beq.n	8017b70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	68da      	ldr	r2, [r3, #12]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b46:	441a      	add	r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	68da      	ldr	r2, [r3, #12]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	689b      	ldr	r3, [r3, #8]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d303      	bcc.n	8017b60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681a      	ldr	r2, [r3, #0]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	68d9      	ldr	r1, [r3, #12]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b68:	461a      	mov	r2, r3
 8017b6a:	6838      	ldr	r0, [r7, #0]
 8017b6c:	f002 f870 	bl	8019c50 <memcpy>
	}
}
 8017b70:	bf00      	nop
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017b80:	f001 fd28 	bl	80195d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017b8c:	e011      	b.n	8017bb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d012      	beq.n	8017bbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	3324      	adds	r3, #36	; 0x24
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f000 fe02 	bl	80187a4 <xTaskRemoveFromEventList>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d001      	beq.n	8017baa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017ba6:	f000 fed9 	bl	801895c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017baa:	7bfb      	ldrb	r3, [r7, #15]
 8017bac:	3b01      	subs	r3, #1
 8017bae:	b2db      	uxtb	r3, r3
 8017bb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	dce9      	bgt.n	8017b8e <prvUnlockQueue+0x16>
 8017bba:	e000      	b.n	8017bbe <prvUnlockQueue+0x46>
					break;
 8017bbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	22ff      	movs	r2, #255	; 0xff
 8017bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017bc6:	f001 fd35 	bl	8019634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017bca:	f001 fd03 	bl	80195d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017bd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bd6:	e011      	b.n	8017bfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	691b      	ldr	r3, [r3, #16]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d012      	beq.n	8017c06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	3310      	adds	r3, #16
 8017be4:	4618      	mov	r0, r3
 8017be6:	f000 fddd 	bl	80187a4 <xTaskRemoveFromEventList>
 8017bea:	4603      	mov	r3, r0
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d001      	beq.n	8017bf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017bf0:	f000 feb4 	bl	801895c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017bf4:	7bbb      	ldrb	r3, [r7, #14]
 8017bf6:	3b01      	subs	r3, #1
 8017bf8:	b2db      	uxtb	r3, r3
 8017bfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	dce9      	bgt.n	8017bd8 <prvUnlockQueue+0x60>
 8017c04:	e000      	b.n	8017c08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	22ff      	movs	r2, #255	; 0xff
 8017c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017c10:	f001 fd10 	bl	8019634 <vPortExitCritical>
}
 8017c14:	bf00      	nop
 8017c16:	3710      	adds	r7, #16
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c24:	f001 fcd6 	bl	80195d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d102      	bne.n	8017c36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c30:	2301      	movs	r3, #1
 8017c32:	60fb      	str	r3, [r7, #12]
 8017c34:	e001      	b.n	8017c3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c36:	2300      	movs	r3, #0
 8017c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c3a:	f001 fcfb 	bl	8019634 <vPortExitCritical>

	return xReturn;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b084      	sub	sp, #16
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c50:	f001 fcc0 	bl	80195d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	d102      	bne.n	8017c66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017c60:	2301      	movs	r3, #1
 8017c62:	60fb      	str	r3, [r7, #12]
 8017c64:	e001      	b.n	8017c6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017c66:	2300      	movs	r3, #0
 8017c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c6a:	f001 fce3 	bl	8019634 <vPortExitCritical>

	return xReturn;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	3710      	adds	r7, #16
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017c78:	b480      	push	{r7}
 8017c7a:	b085      	sub	sp, #20
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017c82:	2300      	movs	r3, #0
 8017c84:	60fb      	str	r3, [r7, #12]
 8017c86:	e014      	b.n	8017cb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017c88:	4a0f      	ldr	r2, [pc, #60]	; (8017cc8 <vQueueAddToRegistry+0x50>)
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10b      	bne.n	8017cac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017c94:	490c      	ldr	r1, [pc, #48]	; (8017cc8 <vQueueAddToRegistry+0x50>)
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	683a      	ldr	r2, [r7, #0]
 8017c9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017c9e:	4a0a      	ldr	r2, [pc, #40]	; (8017cc8 <vQueueAddToRegistry+0x50>)
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	00db      	lsls	r3, r3, #3
 8017ca4:	4413      	add	r3, r2
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017caa:	e006      	b.n	8017cba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	3301      	adds	r3, #1
 8017cb0:	60fb      	str	r3, [r7, #12]
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	2b07      	cmp	r3, #7
 8017cb6:	d9e7      	bls.n	8017c88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017cb8:	bf00      	nop
 8017cba:	bf00      	nop
 8017cbc:	3714      	adds	r7, #20
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop
 8017cc8:	2000a694 	.word	0x2000a694

08017ccc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b086      	sub	sp, #24
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017cdc:	f001 fc7a 	bl	80195d4 <vPortEnterCritical>
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ce6:	b25b      	sxtb	r3, r3
 8017ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017cec:	d103      	bne.n	8017cf6 <vQueueWaitForMessageRestricted+0x2a>
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017cf6:	697b      	ldr	r3, [r7, #20]
 8017cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017cfc:	b25b      	sxtb	r3, r3
 8017cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d02:	d103      	bne.n	8017d0c <vQueueWaitForMessageRestricted+0x40>
 8017d04:	697b      	ldr	r3, [r7, #20]
 8017d06:	2200      	movs	r2, #0
 8017d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d0c:	f001 fc92 	bl	8019634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d106      	bne.n	8017d26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	3324      	adds	r3, #36	; 0x24
 8017d1c:	687a      	ldr	r2, [r7, #4]
 8017d1e:	68b9      	ldr	r1, [r7, #8]
 8017d20:	4618      	mov	r0, r3
 8017d22:	f000 fd13 	bl	801874c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017d26:	6978      	ldr	r0, [r7, #20]
 8017d28:	f7ff ff26 	bl	8017b78 <prvUnlockQueue>
	}
 8017d2c:	bf00      	nop
 8017d2e:	3718      	adds	r7, #24
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b08e      	sub	sp, #56	; 0x38
 8017d38:	af04      	add	r7, sp, #16
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
 8017d40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d10a      	bne.n	8017d5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d4c:	f383 8811 	msr	BASEPRI, r3
 8017d50:	f3bf 8f6f 	isb	sy
 8017d54:	f3bf 8f4f 	dsb	sy
 8017d58:	623b      	str	r3, [r7, #32]
}
 8017d5a:	bf00      	nop
 8017d5c:	e7fe      	b.n	8017d5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d10a      	bne.n	8017d7a <xTaskCreateStatic+0x46>
	__asm volatile
 8017d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d68:	f383 8811 	msr	BASEPRI, r3
 8017d6c:	f3bf 8f6f 	isb	sy
 8017d70:	f3bf 8f4f 	dsb	sy
 8017d74:	61fb      	str	r3, [r7, #28]
}
 8017d76:	bf00      	nop
 8017d78:	e7fe      	b.n	8017d78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d7a:	235c      	movs	r3, #92	; 0x5c
 8017d7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	2b5c      	cmp	r3, #92	; 0x5c
 8017d82:	d00a      	beq.n	8017d9a <xTaskCreateStatic+0x66>
	__asm volatile
 8017d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	61bb      	str	r3, [r7, #24]
}
 8017d96:	bf00      	nop
 8017d98:	e7fe      	b.n	8017d98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017d9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d01e      	beq.n	8017de0 <xTaskCreateStatic+0xac>
 8017da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d01b      	beq.n	8017de0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017daa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017db0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db4:	2202      	movs	r2, #2
 8017db6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017dba:	2300      	movs	r3, #0
 8017dbc:	9303      	str	r3, [sp, #12]
 8017dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc0:	9302      	str	r3, [sp, #8]
 8017dc2:	f107 0314 	add.w	r3, r7, #20
 8017dc6:	9301      	str	r3, [sp, #4]
 8017dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dca:	9300      	str	r3, [sp, #0]
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	687a      	ldr	r2, [r7, #4]
 8017dd0:	68b9      	ldr	r1, [r7, #8]
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	f000 f850 	bl	8017e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017dda:	f000 f8dd 	bl	8017f98 <prvAddNewTaskToReadyList>
 8017dde:	e001      	b.n	8017de4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017de0:	2300      	movs	r3, #0
 8017de2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017de4:	697b      	ldr	r3, [r7, #20]
	}
 8017de6:	4618      	mov	r0, r3
 8017de8:	3728      	adds	r7, #40	; 0x28
 8017dea:	46bd      	mov	sp, r7
 8017dec:	bd80      	pop	{r7, pc}

08017dee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017dee:	b580      	push	{r7, lr}
 8017df0:	b08c      	sub	sp, #48	; 0x30
 8017df2:	af04      	add	r7, sp, #16
 8017df4:	60f8      	str	r0, [r7, #12]
 8017df6:	60b9      	str	r1, [r7, #8]
 8017df8:	603b      	str	r3, [r7, #0]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017dfe:	88fb      	ldrh	r3, [r7, #6]
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	4618      	mov	r0, r3
 8017e04:	f001 fd08 	bl	8019818 <pvPortMalloc>
 8017e08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d00e      	beq.n	8017e2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017e10:	205c      	movs	r0, #92	; 0x5c
 8017e12:	f001 fd01 	bl	8019818 <pvPortMalloc>
 8017e16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017e18:	69fb      	ldr	r3, [r7, #28]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d003      	beq.n	8017e26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017e1e:	69fb      	ldr	r3, [r7, #28]
 8017e20:	697a      	ldr	r2, [r7, #20]
 8017e22:	631a      	str	r2, [r3, #48]	; 0x30
 8017e24:	e005      	b.n	8017e32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017e26:	6978      	ldr	r0, [r7, #20]
 8017e28:	f001 fdc2 	bl	80199b0 <vPortFree>
 8017e2c:	e001      	b.n	8017e32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017e32:	69fb      	ldr	r3, [r7, #28]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d017      	beq.n	8017e68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e38:	69fb      	ldr	r3, [r7, #28]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e40:	88fa      	ldrh	r2, [r7, #6]
 8017e42:	2300      	movs	r3, #0
 8017e44:	9303      	str	r3, [sp, #12]
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	9302      	str	r3, [sp, #8]
 8017e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e4c:	9301      	str	r3, [sp, #4]
 8017e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e50:	9300      	str	r3, [sp, #0]
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	68b9      	ldr	r1, [r7, #8]
 8017e56:	68f8      	ldr	r0, [r7, #12]
 8017e58:	f000 f80e 	bl	8017e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e5c:	69f8      	ldr	r0, [r7, #28]
 8017e5e:	f000 f89b 	bl	8017f98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e62:	2301      	movs	r3, #1
 8017e64:	61bb      	str	r3, [r7, #24]
 8017e66:	e002      	b.n	8017e6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e6e:	69bb      	ldr	r3, [r7, #24]
	}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3720      	adds	r7, #32
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}

08017e78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b088      	sub	sp, #32
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	461a      	mov	r2, r3
 8017e90:	21a5      	movs	r1, #165	; 0xa5
 8017e92:	f001 feeb 	bl	8019c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017ea0:	3b01      	subs	r3, #1
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4413      	add	r3, r2
 8017ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017ea8:	69bb      	ldr	r3, [r7, #24]
 8017eaa:	f023 0307 	bic.w	r3, r3, #7
 8017eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	f003 0307 	and.w	r3, r3, #7
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d00a      	beq.n	8017ed0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ebe:	f383 8811 	msr	BASEPRI, r3
 8017ec2:	f3bf 8f6f 	isb	sy
 8017ec6:	f3bf 8f4f 	dsb	sy
 8017eca:	617b      	str	r3, [r7, #20]
}
 8017ecc:	bf00      	nop
 8017ece:	e7fe      	b.n	8017ece <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d01f      	beq.n	8017f16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	61fb      	str	r3, [r7, #28]
 8017eda:	e012      	b.n	8017f02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017edc:	68ba      	ldr	r2, [r7, #8]
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	7819      	ldrb	r1, [r3, #0]
 8017ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ee6:	69fb      	ldr	r3, [r7, #28]
 8017ee8:	4413      	add	r3, r2
 8017eea:	3334      	adds	r3, #52	; 0x34
 8017eec:	460a      	mov	r2, r1
 8017eee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017ef0:	68ba      	ldr	r2, [r7, #8]
 8017ef2:	69fb      	ldr	r3, [r7, #28]
 8017ef4:	4413      	add	r3, r2
 8017ef6:	781b      	ldrb	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d006      	beq.n	8017f0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017efc:	69fb      	ldr	r3, [r7, #28]
 8017efe:	3301      	adds	r3, #1
 8017f00:	61fb      	str	r3, [r7, #28]
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	2b0f      	cmp	r3, #15
 8017f06:	d9e9      	bls.n	8017edc <prvInitialiseNewTask+0x64>
 8017f08:	e000      	b.n	8017f0c <prvInitialiseNewTask+0x94>
			{
				break;
 8017f0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0e:	2200      	movs	r2, #0
 8017f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017f14:	e003      	b.n	8017f1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	2200      	movs	r2, #0
 8017f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f20:	2b37      	cmp	r3, #55	; 0x37
 8017f22:	d901      	bls.n	8017f28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017f24:	2337      	movs	r3, #55	; 0x37
 8017f26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	2200      	movs	r2, #0
 8017f38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3c:	3304      	adds	r3, #4
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7ff f978 	bl	8017234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f46:	3318      	adds	r3, #24
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7ff f973 	bl	8017234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f66:	2200      	movs	r2, #0
 8017f68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f72:	683a      	ldr	r2, [r7, #0]
 8017f74:	68f9      	ldr	r1, [r7, #12]
 8017f76:	69b8      	ldr	r0, [r7, #24]
 8017f78:	f001 fa00 	bl	801937c <pxPortInitialiseStack>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d002      	beq.n	8017f8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f8e:	bf00      	nop
 8017f90:	3720      	adds	r7, #32
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}
	...

08017f98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017fa0:	f001 fb18 	bl	80195d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017fa4:	4b2d      	ldr	r3, [pc, #180]	; (801805c <prvAddNewTaskToReadyList+0xc4>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	3301      	adds	r3, #1
 8017faa:	4a2c      	ldr	r2, [pc, #176]	; (801805c <prvAddNewTaskToReadyList+0xc4>)
 8017fac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017fae:	4b2c      	ldr	r3, [pc, #176]	; (8018060 <prvAddNewTaskToReadyList+0xc8>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d109      	bne.n	8017fca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017fb6:	4a2a      	ldr	r2, [pc, #168]	; (8018060 <prvAddNewTaskToReadyList+0xc8>)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017fbc:	4b27      	ldr	r3, [pc, #156]	; (801805c <prvAddNewTaskToReadyList+0xc4>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	2b01      	cmp	r3, #1
 8017fc2:	d110      	bne.n	8017fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017fc4:	f000 fcee 	bl	80189a4 <prvInitialiseTaskLists>
 8017fc8:	e00d      	b.n	8017fe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017fca:	4b26      	ldr	r3, [pc, #152]	; (8018064 <prvAddNewTaskToReadyList+0xcc>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d109      	bne.n	8017fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017fd2:	4b23      	ldr	r3, [pc, #140]	; (8018060 <prvAddNewTaskToReadyList+0xc8>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d802      	bhi.n	8017fe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017fe0:	4a1f      	ldr	r2, [pc, #124]	; (8018060 <prvAddNewTaskToReadyList+0xc8>)
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017fe6:	4b20      	ldr	r3, [pc, #128]	; (8018068 <prvAddNewTaskToReadyList+0xd0>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	3301      	adds	r3, #1
 8017fec:	4a1e      	ldr	r2, [pc, #120]	; (8018068 <prvAddNewTaskToReadyList+0xd0>)
 8017fee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017ff0:	4b1d      	ldr	r3, [pc, #116]	; (8018068 <prvAddNewTaskToReadyList+0xd0>)
 8017ff2:	681a      	ldr	r2, [r3, #0]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ffc:	4b1b      	ldr	r3, [pc, #108]	; (801806c <prvAddNewTaskToReadyList+0xd4>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	429a      	cmp	r2, r3
 8018002:	d903      	bls.n	801800c <prvAddNewTaskToReadyList+0x74>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018008:	4a18      	ldr	r2, [pc, #96]	; (801806c <prvAddNewTaskToReadyList+0xd4>)
 801800a:	6013      	str	r3, [r2, #0]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018010:	4613      	mov	r3, r2
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	4413      	add	r3, r2
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	4a15      	ldr	r2, [pc, #84]	; (8018070 <prvAddNewTaskToReadyList+0xd8>)
 801801a:	441a      	add	r2, r3
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	3304      	adds	r3, #4
 8018020:	4619      	mov	r1, r3
 8018022:	4610      	mov	r0, r2
 8018024:	f7ff f913 	bl	801724e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018028:	f001 fb04 	bl	8019634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801802c:	4b0d      	ldr	r3, [pc, #52]	; (8018064 <prvAddNewTaskToReadyList+0xcc>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d00e      	beq.n	8018052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018034:	4b0a      	ldr	r3, [pc, #40]	; (8018060 <prvAddNewTaskToReadyList+0xc8>)
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801803e:	429a      	cmp	r2, r3
 8018040:	d207      	bcs.n	8018052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018042:	4b0c      	ldr	r3, [pc, #48]	; (8018074 <prvAddNewTaskToReadyList+0xdc>)
 8018044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018048:	601a      	str	r2, [r3, #0]
 801804a:	f3bf 8f4f 	dsb	sy
 801804e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018052:	bf00      	nop
 8018054:	3708      	adds	r7, #8
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	20001c98 	.word	0x20001c98
 8018060:	200017c4 	.word	0x200017c4
 8018064:	20001ca4 	.word	0x20001ca4
 8018068:	20001cb4 	.word	0x20001cb4
 801806c:	20001ca0 	.word	0x20001ca0
 8018070:	200017c8 	.word	0x200017c8
 8018074:	e000ed04 	.word	0xe000ed04

08018078 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8018078:	b580      	push	{r7, lr}
 801807a:	b084      	sub	sp, #16
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018080:	f001 faa8 	bl	80195d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d102      	bne.n	8018090 <vTaskDelete+0x18>
 801808a:	4b2c      	ldr	r3, [pc, #176]	; (801813c <vTaskDelete+0xc4>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	e000      	b.n	8018092 <vTaskDelete+0x1a>
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	3304      	adds	r3, #4
 8018098:	4618      	mov	r0, r3
 801809a:	f7ff f935 	bl	8017308 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d004      	beq.n	80180b0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	3318      	adds	r3, #24
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7ff f92c 	bl	8017308 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80180b0:	4b23      	ldr	r3, [pc, #140]	; (8018140 <vTaskDelete+0xc8>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	3301      	adds	r3, #1
 80180b6:	4a22      	ldr	r2, [pc, #136]	; (8018140 <vTaskDelete+0xc8>)
 80180b8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80180ba:	4b20      	ldr	r3, [pc, #128]	; (801813c <vTaskDelete+0xc4>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	68fa      	ldr	r2, [r7, #12]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d10b      	bne.n	80180dc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	3304      	adds	r3, #4
 80180c8:	4619      	mov	r1, r3
 80180ca:	481e      	ldr	r0, [pc, #120]	; (8018144 <vTaskDelete+0xcc>)
 80180cc:	f7ff f8bf 	bl	801724e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80180d0:	4b1d      	ldr	r3, [pc, #116]	; (8018148 <vTaskDelete+0xd0>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	3301      	adds	r3, #1
 80180d6:	4a1c      	ldr	r2, [pc, #112]	; (8018148 <vTaskDelete+0xd0>)
 80180d8:	6013      	str	r3, [r2, #0]
 80180da:	e009      	b.n	80180f0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80180dc:	4b1b      	ldr	r3, [pc, #108]	; (801814c <vTaskDelete+0xd4>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	3b01      	subs	r3, #1
 80180e2:	4a1a      	ldr	r2, [pc, #104]	; (801814c <vTaskDelete+0xd4>)
 80180e4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80180e6:	68f8      	ldr	r0, [r7, #12]
 80180e8:	f000 fcca 	bl	8018a80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80180ec:	f000 fcf8 	bl	8018ae0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80180f0:	f001 faa0 	bl	8019634 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80180f4:	4b16      	ldr	r3, [pc, #88]	; (8018150 <vTaskDelete+0xd8>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d01b      	beq.n	8018134 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80180fc:	4b0f      	ldr	r3, [pc, #60]	; (801813c <vTaskDelete+0xc4>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	68fa      	ldr	r2, [r7, #12]
 8018102:	429a      	cmp	r2, r3
 8018104:	d116      	bne.n	8018134 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8018106:	4b13      	ldr	r3, [pc, #76]	; (8018154 <vTaskDelete+0xdc>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00a      	beq.n	8018124 <vTaskDelete+0xac>
	__asm volatile
 801810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018112:	f383 8811 	msr	BASEPRI, r3
 8018116:	f3bf 8f6f 	isb	sy
 801811a:	f3bf 8f4f 	dsb	sy
 801811e:	60bb      	str	r3, [r7, #8]
}
 8018120:	bf00      	nop
 8018122:	e7fe      	b.n	8018122 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8018124:	4b0c      	ldr	r3, [pc, #48]	; (8018158 <vTaskDelete+0xe0>)
 8018126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801812a:	601a      	str	r2, [r3, #0]
 801812c:	f3bf 8f4f 	dsb	sy
 8018130:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018134:	bf00      	nop
 8018136:	3710      	adds	r7, #16
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	200017c4 	.word	0x200017c4
 8018140:	20001cb4 	.word	0x20001cb4
 8018144:	20001c6c 	.word	0x20001c6c
 8018148:	20001c80 	.word	0x20001c80
 801814c:	20001c98 	.word	0x20001c98
 8018150:	20001ca4 	.word	0x20001ca4
 8018154:	20001cc0 	.word	0x20001cc0
 8018158:	e000ed04 	.word	0xe000ed04

0801815c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801815c:	b580      	push	{r7, lr}
 801815e:	b084      	sub	sp, #16
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018164:	2300      	movs	r3, #0
 8018166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d017      	beq.n	801819e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801816e:	4b13      	ldr	r3, [pc, #76]	; (80181bc <vTaskDelay+0x60>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d00a      	beq.n	801818c <vTaskDelay+0x30>
	__asm volatile
 8018176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801817a:	f383 8811 	msr	BASEPRI, r3
 801817e:	f3bf 8f6f 	isb	sy
 8018182:	f3bf 8f4f 	dsb	sy
 8018186:	60bb      	str	r3, [r7, #8]
}
 8018188:	bf00      	nop
 801818a:	e7fe      	b.n	801818a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801818c:	f000 f8e6 	bl	801835c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018190:	2100      	movs	r1, #0
 8018192:	6878      	ldr	r0, [r7, #4]
 8018194:	f000 fd50 	bl	8018c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018198:	f000 f8ee 	bl	8018378 <xTaskResumeAll>
 801819c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d107      	bne.n	80181b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80181a4:	4b06      	ldr	r3, [pc, #24]	; (80181c0 <vTaskDelay+0x64>)
 80181a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181aa:	601a      	str	r2, [r3, #0]
 80181ac:	f3bf 8f4f 	dsb	sy
 80181b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181b4:	bf00      	nop
 80181b6:	3710      	adds	r7, #16
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	20001cc0 	.word	0x20001cc0
 80181c0:	e000ed04 	.word	0xe000ed04

080181c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b088      	sub	sp, #32
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80181d0:	69bb      	ldr	r3, [r7, #24]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d10a      	bne.n	80181ec <eTaskGetState+0x28>
	__asm volatile
 80181d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181da:	f383 8811 	msr	BASEPRI, r3
 80181de:	f3bf 8f6f 	isb	sy
 80181e2:	f3bf 8f4f 	dsb	sy
 80181e6:	60bb      	str	r3, [r7, #8]
}
 80181e8:	bf00      	nop
 80181ea:	e7fe      	b.n	80181ea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80181ec:	4b23      	ldr	r3, [pc, #140]	; (801827c <eTaskGetState+0xb8>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	69ba      	ldr	r2, [r7, #24]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d102      	bne.n	80181fc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80181f6:	2300      	movs	r3, #0
 80181f8:	77fb      	strb	r3, [r7, #31]
 80181fa:	e03a      	b.n	8018272 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80181fc:	f001 f9ea 	bl	80195d4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	695b      	ldr	r3, [r3, #20]
 8018204:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8018206:	4b1e      	ldr	r3, [pc, #120]	; (8018280 <eTaskGetState+0xbc>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801820c:	4b1d      	ldr	r3, [pc, #116]	; (8018284 <eTaskGetState+0xc0>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8018212:	f001 fa0f 	bl	8019634 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8018216:	697a      	ldr	r2, [r7, #20]
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	429a      	cmp	r2, r3
 801821c:	d003      	beq.n	8018226 <eTaskGetState+0x62>
 801821e:	697a      	ldr	r2, [r7, #20]
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	429a      	cmp	r2, r3
 8018224:	d102      	bne.n	801822c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8018226:	2302      	movs	r3, #2
 8018228:	77fb      	strb	r3, [r7, #31]
 801822a:	e022      	b.n	8018272 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	4a16      	ldr	r2, [pc, #88]	; (8018288 <eTaskGetState+0xc4>)
 8018230:	4293      	cmp	r3, r2
 8018232:	d112      	bne.n	801825a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8018234:	69bb      	ldr	r3, [r7, #24]
 8018236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018238:	2b00      	cmp	r3, #0
 801823a:	d10b      	bne.n	8018254 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801823c:	69bb      	ldr	r3, [r7, #24]
 801823e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b01      	cmp	r3, #1
 8018246:	d102      	bne.n	801824e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8018248:	2302      	movs	r3, #2
 801824a:	77fb      	strb	r3, [r7, #31]
 801824c:	e011      	b.n	8018272 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801824e:	2303      	movs	r3, #3
 8018250:	77fb      	strb	r3, [r7, #31]
 8018252:	e00e      	b.n	8018272 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8018254:	2302      	movs	r3, #2
 8018256:	77fb      	strb	r3, [r7, #31]
 8018258:	e00b      	b.n	8018272 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	4a0b      	ldr	r2, [pc, #44]	; (801828c <eTaskGetState+0xc8>)
 801825e:	4293      	cmp	r3, r2
 8018260:	d002      	beq.n	8018268 <eTaskGetState+0xa4>
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d102      	bne.n	801826e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8018268:	2304      	movs	r3, #4
 801826a:	77fb      	strb	r3, [r7, #31]
 801826c:	e001      	b.n	8018272 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801826e:	2301      	movs	r3, #1
 8018270:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8018272:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018274:	4618      	mov	r0, r3
 8018276:	3720      	adds	r7, #32
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}
 801827c:	200017c4 	.word	0x200017c4
 8018280:	20001c50 	.word	0x20001c50
 8018284:	20001c54 	.word	0x20001c54
 8018288:	20001c84 	.word	0x20001c84
 801828c:	20001c6c 	.word	0x20001c6c

08018290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b08a      	sub	sp, #40	; 0x28
 8018294:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018296:	2300      	movs	r3, #0
 8018298:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801829a:	2300      	movs	r3, #0
 801829c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801829e:	463a      	mov	r2, r7
 80182a0:	1d39      	adds	r1, r7, #4
 80182a2:	f107 0308 	add.w	r3, r7, #8
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7fe ff70 	bl	801718c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80182ac:	6839      	ldr	r1, [r7, #0]
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	68ba      	ldr	r2, [r7, #8]
 80182b2:	9202      	str	r2, [sp, #8]
 80182b4:	9301      	str	r3, [sp, #4]
 80182b6:	2300      	movs	r3, #0
 80182b8:	9300      	str	r3, [sp, #0]
 80182ba:	2300      	movs	r3, #0
 80182bc:	460a      	mov	r2, r1
 80182be:	4921      	ldr	r1, [pc, #132]	; (8018344 <vTaskStartScheduler+0xb4>)
 80182c0:	4821      	ldr	r0, [pc, #132]	; (8018348 <vTaskStartScheduler+0xb8>)
 80182c2:	f7ff fd37 	bl	8017d34 <xTaskCreateStatic>
 80182c6:	4603      	mov	r3, r0
 80182c8:	4a20      	ldr	r2, [pc, #128]	; (801834c <vTaskStartScheduler+0xbc>)
 80182ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80182cc:	4b1f      	ldr	r3, [pc, #124]	; (801834c <vTaskStartScheduler+0xbc>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d002      	beq.n	80182da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80182d4:	2301      	movs	r3, #1
 80182d6:	617b      	str	r3, [r7, #20]
 80182d8:	e001      	b.n	80182de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80182da:	2300      	movs	r3, #0
 80182dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	d102      	bne.n	80182ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80182e4:	f000 fcfc 	bl	8018ce0 <xTimerCreateTimerTask>
 80182e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	2b01      	cmp	r3, #1
 80182ee:	d116      	bne.n	801831e <vTaskStartScheduler+0x8e>
	__asm volatile
 80182f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f4:	f383 8811 	msr	BASEPRI, r3
 80182f8:	f3bf 8f6f 	isb	sy
 80182fc:	f3bf 8f4f 	dsb	sy
 8018300:	613b      	str	r3, [r7, #16]
}
 8018302:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018304:	4b12      	ldr	r3, [pc, #72]	; (8018350 <vTaskStartScheduler+0xc0>)
 8018306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801830a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801830c:	4b11      	ldr	r3, [pc, #68]	; (8018354 <vTaskStartScheduler+0xc4>)
 801830e:	2201      	movs	r2, #1
 8018310:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018312:	4b11      	ldr	r3, [pc, #68]	; (8018358 <vTaskStartScheduler+0xc8>)
 8018314:	2200      	movs	r2, #0
 8018316:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018318:	f001 f8ba 	bl	8019490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801831c:	e00e      	b.n	801833c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018324:	d10a      	bne.n	801833c <vTaskStartScheduler+0xac>
	__asm volatile
 8018326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801832a:	f383 8811 	msr	BASEPRI, r3
 801832e:	f3bf 8f6f 	isb	sy
 8018332:	f3bf 8f4f 	dsb	sy
 8018336:	60fb      	str	r3, [r7, #12]
}
 8018338:	bf00      	nop
 801833a:	e7fe      	b.n	801833a <vTaskStartScheduler+0xaa>
}
 801833c:	bf00      	nop
 801833e:	3718      	adds	r7, #24
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	080200b8 	.word	0x080200b8
 8018348:	08018975 	.word	0x08018975
 801834c:	20001cbc 	.word	0x20001cbc
 8018350:	20001cb8 	.word	0x20001cb8
 8018354:	20001ca4 	.word	0x20001ca4
 8018358:	20001c9c 	.word	0x20001c9c

0801835c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801835c:	b480      	push	{r7}
 801835e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018360:	4b04      	ldr	r3, [pc, #16]	; (8018374 <vTaskSuspendAll+0x18>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	4a03      	ldr	r2, [pc, #12]	; (8018374 <vTaskSuspendAll+0x18>)
 8018368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801836a:	bf00      	nop
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr
 8018374:	20001cc0 	.word	0x20001cc0

08018378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801837e:	2300      	movs	r3, #0
 8018380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018382:	2300      	movs	r3, #0
 8018384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018386:	4b42      	ldr	r3, [pc, #264]	; (8018490 <xTaskResumeAll+0x118>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d10a      	bne.n	80183a4 <xTaskResumeAll+0x2c>
	__asm volatile
 801838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018392:	f383 8811 	msr	BASEPRI, r3
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	f3bf 8f4f 	dsb	sy
 801839e:	603b      	str	r3, [r7, #0]
}
 80183a0:	bf00      	nop
 80183a2:	e7fe      	b.n	80183a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80183a4:	f001 f916 	bl	80195d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80183a8:	4b39      	ldr	r3, [pc, #228]	; (8018490 <xTaskResumeAll+0x118>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	3b01      	subs	r3, #1
 80183ae:	4a38      	ldr	r2, [pc, #224]	; (8018490 <xTaskResumeAll+0x118>)
 80183b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80183b2:	4b37      	ldr	r3, [pc, #220]	; (8018490 <xTaskResumeAll+0x118>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d162      	bne.n	8018480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80183ba:	4b36      	ldr	r3, [pc, #216]	; (8018494 <xTaskResumeAll+0x11c>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d05e      	beq.n	8018480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183c2:	e02f      	b.n	8018424 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183c4:	4b34      	ldr	r3, [pc, #208]	; (8018498 <xTaskResumeAll+0x120>)
 80183c6:	68db      	ldr	r3, [r3, #12]
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	3318      	adds	r3, #24
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7fe ff99 	bl	8017308 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	3304      	adds	r3, #4
 80183da:	4618      	mov	r0, r3
 80183dc:	f7fe ff94 	bl	8017308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e4:	4b2d      	ldr	r3, [pc, #180]	; (801849c <xTaskResumeAll+0x124>)
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d903      	bls.n	80183f4 <xTaskResumeAll+0x7c>
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f0:	4a2a      	ldr	r2, [pc, #168]	; (801849c <xTaskResumeAll+0x124>)
 80183f2:	6013      	str	r3, [r2, #0]
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183f8:	4613      	mov	r3, r2
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	4413      	add	r3, r2
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	4a27      	ldr	r2, [pc, #156]	; (80184a0 <xTaskResumeAll+0x128>)
 8018402:	441a      	add	r2, r3
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	3304      	adds	r3, #4
 8018408:	4619      	mov	r1, r3
 801840a:	4610      	mov	r0, r2
 801840c:	f7fe ff1f 	bl	801724e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018414:	4b23      	ldr	r3, [pc, #140]	; (80184a4 <xTaskResumeAll+0x12c>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801841a:	429a      	cmp	r2, r3
 801841c:	d302      	bcc.n	8018424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801841e:	4b22      	ldr	r3, [pc, #136]	; (80184a8 <xTaskResumeAll+0x130>)
 8018420:	2201      	movs	r2, #1
 8018422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018424:	4b1c      	ldr	r3, [pc, #112]	; (8018498 <xTaskResumeAll+0x120>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d1cb      	bne.n	80183c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d001      	beq.n	8018436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018432:	f000 fb55 	bl	8018ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018436:	4b1d      	ldr	r3, [pc, #116]	; (80184ac <xTaskResumeAll+0x134>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d010      	beq.n	8018464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018442:	f000 f847 	bl	80184d4 <xTaskIncrementTick>
 8018446:	4603      	mov	r3, r0
 8018448:	2b00      	cmp	r3, #0
 801844a:	d002      	beq.n	8018452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801844c:	4b16      	ldr	r3, [pc, #88]	; (80184a8 <xTaskResumeAll+0x130>)
 801844e:	2201      	movs	r2, #1
 8018450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	3b01      	subs	r3, #1
 8018456:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d1f1      	bne.n	8018442 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801845e:	4b13      	ldr	r3, [pc, #76]	; (80184ac <xTaskResumeAll+0x134>)
 8018460:	2200      	movs	r2, #0
 8018462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018464:	4b10      	ldr	r3, [pc, #64]	; (80184a8 <xTaskResumeAll+0x130>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d009      	beq.n	8018480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801846c:	2301      	movs	r3, #1
 801846e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018470:	4b0f      	ldr	r3, [pc, #60]	; (80184b0 <xTaskResumeAll+0x138>)
 8018472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018476:	601a      	str	r2, [r3, #0]
 8018478:	f3bf 8f4f 	dsb	sy
 801847c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018480:	f001 f8d8 	bl	8019634 <vPortExitCritical>

	return xAlreadyYielded;
 8018484:	68bb      	ldr	r3, [r7, #8]
}
 8018486:	4618      	mov	r0, r3
 8018488:	3710      	adds	r7, #16
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	20001cc0 	.word	0x20001cc0
 8018494:	20001c98 	.word	0x20001c98
 8018498:	20001c58 	.word	0x20001c58
 801849c:	20001ca0 	.word	0x20001ca0
 80184a0:	200017c8 	.word	0x200017c8
 80184a4:	200017c4 	.word	0x200017c4
 80184a8:	20001cac 	.word	0x20001cac
 80184ac:	20001ca8 	.word	0x20001ca8
 80184b0:	e000ed04 	.word	0xe000ed04

080184b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80184ba:	4b05      	ldr	r3, [pc, #20]	; (80184d0 <xTaskGetTickCount+0x1c>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80184c0:	687b      	ldr	r3, [r7, #4]
}
 80184c2:	4618      	mov	r0, r3
 80184c4:	370c      	adds	r7, #12
 80184c6:	46bd      	mov	sp, r7
 80184c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	20001c9c 	.word	0x20001c9c

080184d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b086      	sub	sp, #24
 80184d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80184da:	2300      	movs	r3, #0
 80184dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184de:	4b4f      	ldr	r3, [pc, #316]	; (801861c <xTaskIncrementTick+0x148>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	f040 808f 	bne.w	8018606 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80184e8:	4b4d      	ldr	r3, [pc, #308]	; (8018620 <xTaskIncrementTick+0x14c>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	3301      	adds	r3, #1
 80184ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80184f0:	4a4b      	ldr	r2, [pc, #300]	; (8018620 <xTaskIncrementTick+0x14c>)
 80184f2:	693b      	ldr	r3, [r7, #16]
 80184f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d120      	bne.n	801853e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80184fc:	4b49      	ldr	r3, [pc, #292]	; (8018624 <xTaskIncrementTick+0x150>)
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d00a      	beq.n	801851c <xTaskIncrementTick+0x48>
	__asm volatile
 8018506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801850a:	f383 8811 	msr	BASEPRI, r3
 801850e:	f3bf 8f6f 	isb	sy
 8018512:	f3bf 8f4f 	dsb	sy
 8018516:	603b      	str	r3, [r7, #0]
}
 8018518:	bf00      	nop
 801851a:	e7fe      	b.n	801851a <xTaskIncrementTick+0x46>
 801851c:	4b41      	ldr	r3, [pc, #260]	; (8018624 <xTaskIncrementTick+0x150>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	60fb      	str	r3, [r7, #12]
 8018522:	4b41      	ldr	r3, [pc, #260]	; (8018628 <xTaskIncrementTick+0x154>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	4a3f      	ldr	r2, [pc, #252]	; (8018624 <xTaskIncrementTick+0x150>)
 8018528:	6013      	str	r3, [r2, #0]
 801852a:	4a3f      	ldr	r2, [pc, #252]	; (8018628 <xTaskIncrementTick+0x154>)
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	6013      	str	r3, [r2, #0]
 8018530:	4b3e      	ldr	r3, [pc, #248]	; (801862c <xTaskIncrementTick+0x158>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	3301      	adds	r3, #1
 8018536:	4a3d      	ldr	r2, [pc, #244]	; (801862c <xTaskIncrementTick+0x158>)
 8018538:	6013      	str	r3, [r2, #0]
 801853a:	f000 fad1 	bl	8018ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801853e:	4b3c      	ldr	r3, [pc, #240]	; (8018630 <xTaskIncrementTick+0x15c>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	693a      	ldr	r2, [r7, #16]
 8018544:	429a      	cmp	r2, r3
 8018546:	d349      	bcc.n	80185dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018548:	4b36      	ldr	r3, [pc, #216]	; (8018624 <xTaskIncrementTick+0x150>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d104      	bne.n	801855c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018552:	4b37      	ldr	r3, [pc, #220]	; (8018630 <xTaskIncrementTick+0x15c>)
 8018554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018558:	601a      	str	r2, [r3, #0]
					break;
 801855a:	e03f      	b.n	80185dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801855c:	4b31      	ldr	r3, [pc, #196]	; (8018624 <xTaskIncrementTick+0x150>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	68db      	ldr	r3, [r3, #12]
 8018562:	68db      	ldr	r3, [r3, #12]
 8018564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	685b      	ldr	r3, [r3, #4]
 801856a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801856c:	693a      	ldr	r2, [r7, #16]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	429a      	cmp	r2, r3
 8018572:	d203      	bcs.n	801857c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018574:	4a2e      	ldr	r2, [pc, #184]	; (8018630 <xTaskIncrementTick+0x15c>)
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801857a:	e02f      	b.n	80185dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	3304      	adds	r3, #4
 8018580:	4618      	mov	r0, r3
 8018582:	f7fe fec1 	bl	8017308 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801858a:	2b00      	cmp	r3, #0
 801858c:	d004      	beq.n	8018598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	3318      	adds	r3, #24
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe feb8 	bl	8017308 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801859c:	4b25      	ldr	r3, [pc, #148]	; (8018634 <xTaskIncrementTick+0x160>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d903      	bls.n	80185ac <xTaskIncrementTick+0xd8>
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185a8:	4a22      	ldr	r2, [pc, #136]	; (8018634 <xTaskIncrementTick+0x160>)
 80185aa:	6013      	str	r3, [r2, #0]
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185b0:	4613      	mov	r3, r2
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	4413      	add	r3, r2
 80185b6:	009b      	lsls	r3, r3, #2
 80185b8:	4a1f      	ldr	r2, [pc, #124]	; (8018638 <xTaskIncrementTick+0x164>)
 80185ba:	441a      	add	r2, r3
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	3304      	adds	r3, #4
 80185c0:	4619      	mov	r1, r3
 80185c2:	4610      	mov	r0, r2
 80185c4:	f7fe fe43 	bl	801724e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185cc:	4b1b      	ldr	r3, [pc, #108]	; (801863c <xTaskIncrementTick+0x168>)
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d3b8      	bcc.n	8018548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80185d6:	2301      	movs	r3, #1
 80185d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80185da:	e7b5      	b.n	8018548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80185dc:	4b17      	ldr	r3, [pc, #92]	; (801863c <xTaskIncrementTick+0x168>)
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185e2:	4915      	ldr	r1, [pc, #84]	; (8018638 <xTaskIncrementTick+0x164>)
 80185e4:	4613      	mov	r3, r2
 80185e6:	009b      	lsls	r3, r3, #2
 80185e8:	4413      	add	r3, r2
 80185ea:	009b      	lsls	r3, r3, #2
 80185ec:	440b      	add	r3, r1
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	d901      	bls.n	80185f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80185f4:	2301      	movs	r3, #1
 80185f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80185f8:	4b11      	ldr	r3, [pc, #68]	; (8018640 <xTaskIncrementTick+0x16c>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d007      	beq.n	8018610 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018600:	2301      	movs	r3, #1
 8018602:	617b      	str	r3, [r7, #20]
 8018604:	e004      	b.n	8018610 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018606:	4b0f      	ldr	r3, [pc, #60]	; (8018644 <xTaskIncrementTick+0x170>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	3301      	adds	r3, #1
 801860c:	4a0d      	ldr	r2, [pc, #52]	; (8018644 <xTaskIncrementTick+0x170>)
 801860e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018610:	697b      	ldr	r3, [r7, #20]
}
 8018612:	4618      	mov	r0, r3
 8018614:	3718      	adds	r7, #24
 8018616:	46bd      	mov	sp, r7
 8018618:	bd80      	pop	{r7, pc}
 801861a:	bf00      	nop
 801861c:	20001cc0 	.word	0x20001cc0
 8018620:	20001c9c 	.word	0x20001c9c
 8018624:	20001c50 	.word	0x20001c50
 8018628:	20001c54 	.word	0x20001c54
 801862c:	20001cb0 	.word	0x20001cb0
 8018630:	20001cb8 	.word	0x20001cb8
 8018634:	20001ca0 	.word	0x20001ca0
 8018638:	200017c8 	.word	0x200017c8
 801863c:	200017c4 	.word	0x200017c4
 8018640:	20001cac 	.word	0x20001cac
 8018644:	20001ca8 	.word	0x20001ca8

08018648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018648:	b480      	push	{r7}
 801864a:	b085      	sub	sp, #20
 801864c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801864e:	4b28      	ldr	r3, [pc, #160]	; (80186f0 <vTaskSwitchContext+0xa8>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d003      	beq.n	801865e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018656:	4b27      	ldr	r3, [pc, #156]	; (80186f4 <vTaskSwitchContext+0xac>)
 8018658:	2201      	movs	r2, #1
 801865a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801865c:	e041      	b.n	80186e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801865e:	4b25      	ldr	r3, [pc, #148]	; (80186f4 <vTaskSwitchContext+0xac>)
 8018660:	2200      	movs	r2, #0
 8018662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018664:	4b24      	ldr	r3, [pc, #144]	; (80186f8 <vTaskSwitchContext+0xb0>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	60fb      	str	r3, [r7, #12]
 801866a:	e010      	b.n	801868e <vTaskSwitchContext+0x46>
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d10a      	bne.n	8018688 <vTaskSwitchContext+0x40>
	__asm volatile
 8018672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018676:	f383 8811 	msr	BASEPRI, r3
 801867a:	f3bf 8f6f 	isb	sy
 801867e:	f3bf 8f4f 	dsb	sy
 8018682:	607b      	str	r3, [r7, #4]
}
 8018684:	bf00      	nop
 8018686:	e7fe      	b.n	8018686 <vTaskSwitchContext+0x3e>
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	3b01      	subs	r3, #1
 801868c:	60fb      	str	r3, [r7, #12]
 801868e:	491b      	ldr	r1, [pc, #108]	; (80186fc <vTaskSwitchContext+0xb4>)
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	4613      	mov	r3, r2
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	4413      	add	r3, r2
 8018698:	009b      	lsls	r3, r3, #2
 801869a:	440b      	add	r3, r1
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d0e4      	beq.n	801866c <vTaskSwitchContext+0x24>
 80186a2:	68fa      	ldr	r2, [r7, #12]
 80186a4:	4613      	mov	r3, r2
 80186a6:	009b      	lsls	r3, r3, #2
 80186a8:	4413      	add	r3, r2
 80186aa:	009b      	lsls	r3, r3, #2
 80186ac:	4a13      	ldr	r2, [pc, #76]	; (80186fc <vTaskSwitchContext+0xb4>)
 80186ae:	4413      	add	r3, r2
 80186b0:	60bb      	str	r3, [r7, #8]
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	685a      	ldr	r2, [r3, #4]
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	605a      	str	r2, [r3, #4]
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	685a      	ldr	r2, [r3, #4]
 80186c0:	68bb      	ldr	r3, [r7, #8]
 80186c2:	3308      	adds	r3, #8
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d104      	bne.n	80186d2 <vTaskSwitchContext+0x8a>
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	685a      	ldr	r2, [r3, #4]
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	605a      	str	r2, [r3, #4]
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	685b      	ldr	r3, [r3, #4]
 80186d6:	68db      	ldr	r3, [r3, #12]
 80186d8:	4a09      	ldr	r2, [pc, #36]	; (8018700 <vTaskSwitchContext+0xb8>)
 80186da:	6013      	str	r3, [r2, #0]
 80186dc:	4a06      	ldr	r2, [pc, #24]	; (80186f8 <vTaskSwitchContext+0xb0>)
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	6013      	str	r3, [r2, #0]
}
 80186e2:	bf00      	nop
 80186e4:	3714      	adds	r7, #20
 80186e6:	46bd      	mov	sp, r7
 80186e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ec:	4770      	bx	lr
 80186ee:	bf00      	nop
 80186f0:	20001cc0 	.word	0x20001cc0
 80186f4:	20001cac 	.word	0x20001cac
 80186f8:	20001ca0 	.word	0x20001ca0
 80186fc:	200017c8 	.word	0x200017c8
 8018700:	200017c4 	.word	0x200017c4

08018704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
 801870c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d10a      	bne.n	801872a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018718:	f383 8811 	msr	BASEPRI, r3
 801871c:	f3bf 8f6f 	isb	sy
 8018720:	f3bf 8f4f 	dsb	sy
 8018724:	60fb      	str	r3, [r7, #12]
}
 8018726:	bf00      	nop
 8018728:	e7fe      	b.n	8018728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801872a:	4b07      	ldr	r3, [pc, #28]	; (8018748 <vTaskPlaceOnEventList+0x44>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	3318      	adds	r3, #24
 8018730:	4619      	mov	r1, r3
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	f7fe fdaf 	bl	8017296 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018738:	2101      	movs	r1, #1
 801873a:	6838      	ldr	r0, [r7, #0]
 801873c:	f000 fa7c 	bl	8018c38 <prvAddCurrentTaskToDelayedList>
}
 8018740:	bf00      	nop
 8018742:	3710      	adds	r7, #16
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}
 8018748:	200017c4 	.word	0x200017c4

0801874c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801874c:	b580      	push	{r7, lr}
 801874e:	b086      	sub	sp, #24
 8018750:	af00      	add	r7, sp, #0
 8018752:	60f8      	str	r0, [r7, #12]
 8018754:	60b9      	str	r1, [r7, #8]
 8018756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d10a      	bne.n	8018774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018762:	f383 8811 	msr	BASEPRI, r3
 8018766:	f3bf 8f6f 	isb	sy
 801876a:	f3bf 8f4f 	dsb	sy
 801876e:	617b      	str	r3, [r7, #20]
}
 8018770:	bf00      	nop
 8018772:	e7fe      	b.n	8018772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018774:	4b0a      	ldr	r3, [pc, #40]	; (80187a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	3318      	adds	r3, #24
 801877a:	4619      	mov	r1, r3
 801877c:	68f8      	ldr	r0, [r7, #12]
 801877e:	f7fe fd66 	bl	801724e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d002      	beq.n	801878e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801878c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801878e:	6879      	ldr	r1, [r7, #4]
 8018790:	68b8      	ldr	r0, [r7, #8]
 8018792:	f000 fa51 	bl	8018c38 <prvAddCurrentTaskToDelayedList>
	}
 8018796:	bf00      	nop
 8018798:	3718      	adds	r7, #24
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop
 80187a0:	200017c4 	.word	0x200017c4

080187a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b086      	sub	sp, #24
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	68db      	ldr	r3, [r3, #12]
 80187b0:	68db      	ldr	r3, [r3, #12]
 80187b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d10a      	bne.n	80187d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80187ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187be:	f383 8811 	msr	BASEPRI, r3
 80187c2:	f3bf 8f6f 	isb	sy
 80187c6:	f3bf 8f4f 	dsb	sy
 80187ca:	60fb      	str	r3, [r7, #12]
}
 80187cc:	bf00      	nop
 80187ce:	e7fe      	b.n	80187ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187d0:	693b      	ldr	r3, [r7, #16]
 80187d2:	3318      	adds	r3, #24
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fe fd97 	bl	8017308 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187da:	4b1e      	ldr	r3, [pc, #120]	; (8018854 <xTaskRemoveFromEventList+0xb0>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d11d      	bne.n	801881e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187e2:	693b      	ldr	r3, [r7, #16]
 80187e4:	3304      	adds	r3, #4
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7fe fd8e 	bl	8017308 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f0:	4b19      	ldr	r3, [pc, #100]	; (8018858 <xTaskRemoveFromEventList+0xb4>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d903      	bls.n	8018800 <xTaskRemoveFromEventList+0x5c>
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187fc:	4a16      	ldr	r2, [pc, #88]	; (8018858 <xTaskRemoveFromEventList+0xb4>)
 80187fe:	6013      	str	r3, [r2, #0]
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018804:	4613      	mov	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	4a13      	ldr	r2, [pc, #76]	; (801885c <xTaskRemoveFromEventList+0xb8>)
 801880e:	441a      	add	r2, r3
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	3304      	adds	r3, #4
 8018814:	4619      	mov	r1, r3
 8018816:	4610      	mov	r0, r2
 8018818:	f7fe fd19 	bl	801724e <vListInsertEnd>
 801881c:	e005      	b.n	801882a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	3318      	adds	r3, #24
 8018822:	4619      	mov	r1, r3
 8018824:	480e      	ldr	r0, [pc, #56]	; (8018860 <xTaskRemoveFromEventList+0xbc>)
 8018826:	f7fe fd12 	bl	801724e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801882e:	4b0d      	ldr	r3, [pc, #52]	; (8018864 <xTaskRemoveFromEventList+0xc0>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018834:	429a      	cmp	r2, r3
 8018836:	d905      	bls.n	8018844 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018838:	2301      	movs	r3, #1
 801883a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801883c:	4b0a      	ldr	r3, [pc, #40]	; (8018868 <xTaskRemoveFromEventList+0xc4>)
 801883e:	2201      	movs	r2, #1
 8018840:	601a      	str	r2, [r3, #0]
 8018842:	e001      	b.n	8018848 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018844:	2300      	movs	r3, #0
 8018846:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018848:	697b      	ldr	r3, [r7, #20]
}
 801884a:	4618      	mov	r0, r3
 801884c:	3718      	adds	r7, #24
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	20001cc0 	.word	0x20001cc0
 8018858:	20001ca0 	.word	0x20001ca0
 801885c:	200017c8 	.word	0x200017c8
 8018860:	20001c58 	.word	0x20001c58
 8018864:	200017c4 	.word	0x200017c4
 8018868:	20001cac 	.word	0x20001cac

0801886c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801886c:	b480      	push	{r7}
 801886e:	b083      	sub	sp, #12
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018874:	4b06      	ldr	r3, [pc, #24]	; (8018890 <vTaskInternalSetTimeOutState+0x24>)
 8018876:	681a      	ldr	r2, [r3, #0]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801887c:	4b05      	ldr	r3, [pc, #20]	; (8018894 <vTaskInternalSetTimeOutState+0x28>)
 801887e:	681a      	ldr	r2, [r3, #0]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	605a      	str	r2, [r3, #4]
}
 8018884:	bf00      	nop
 8018886:	370c      	adds	r7, #12
 8018888:	46bd      	mov	sp, r7
 801888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888e:	4770      	bx	lr
 8018890:	20001cb0 	.word	0x20001cb0
 8018894:	20001c9c 	.word	0x20001c9c

08018898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b088      	sub	sp, #32
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d10a      	bne.n	80188be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80188a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ac:	f383 8811 	msr	BASEPRI, r3
 80188b0:	f3bf 8f6f 	isb	sy
 80188b4:	f3bf 8f4f 	dsb	sy
 80188b8:	613b      	str	r3, [r7, #16]
}
 80188ba:	bf00      	nop
 80188bc:	e7fe      	b.n	80188bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d10a      	bne.n	80188da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80188c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188c8:	f383 8811 	msr	BASEPRI, r3
 80188cc:	f3bf 8f6f 	isb	sy
 80188d0:	f3bf 8f4f 	dsb	sy
 80188d4:	60fb      	str	r3, [r7, #12]
}
 80188d6:	bf00      	nop
 80188d8:	e7fe      	b.n	80188d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80188da:	f000 fe7b 	bl	80195d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80188de:	4b1d      	ldr	r3, [pc, #116]	; (8018954 <xTaskCheckForTimeOut+0xbc>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	685b      	ldr	r3, [r3, #4]
 80188e8:	69ba      	ldr	r2, [r7, #24]
 80188ea:	1ad3      	subs	r3, r2, r3
 80188ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188f6:	d102      	bne.n	80188fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80188f8:	2300      	movs	r3, #0
 80188fa:	61fb      	str	r3, [r7, #28]
 80188fc:	e023      	b.n	8018946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681a      	ldr	r2, [r3, #0]
 8018902:	4b15      	ldr	r3, [pc, #84]	; (8018958 <xTaskCheckForTimeOut+0xc0>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	429a      	cmp	r2, r3
 8018908:	d007      	beq.n	801891a <xTaskCheckForTimeOut+0x82>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	685b      	ldr	r3, [r3, #4]
 801890e:	69ba      	ldr	r2, [r7, #24]
 8018910:	429a      	cmp	r2, r3
 8018912:	d302      	bcc.n	801891a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018914:	2301      	movs	r3, #1
 8018916:	61fb      	str	r3, [r7, #28]
 8018918:	e015      	b.n	8018946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	697a      	ldr	r2, [r7, #20]
 8018920:	429a      	cmp	r2, r3
 8018922:	d20b      	bcs.n	801893c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	681a      	ldr	r2, [r3, #0]
 8018928:	697b      	ldr	r3, [r7, #20]
 801892a:	1ad2      	subs	r2, r2, r3
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018930:	6878      	ldr	r0, [r7, #4]
 8018932:	f7ff ff9b 	bl	801886c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018936:	2300      	movs	r3, #0
 8018938:	61fb      	str	r3, [r7, #28]
 801893a:	e004      	b.n	8018946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	2200      	movs	r2, #0
 8018940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018942:	2301      	movs	r3, #1
 8018944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018946:	f000 fe75 	bl	8019634 <vPortExitCritical>

	return xReturn;
 801894a:	69fb      	ldr	r3, [r7, #28]
}
 801894c:	4618      	mov	r0, r3
 801894e:	3720      	adds	r7, #32
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	20001c9c 	.word	0x20001c9c
 8018958:	20001cb0 	.word	0x20001cb0

0801895c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801895c:	b480      	push	{r7}
 801895e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018960:	4b03      	ldr	r3, [pc, #12]	; (8018970 <vTaskMissedYield+0x14>)
 8018962:	2201      	movs	r2, #1
 8018964:	601a      	str	r2, [r3, #0]
}
 8018966:	bf00      	nop
 8018968:	46bd      	mov	sp, r7
 801896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896e:	4770      	bx	lr
 8018970:	20001cac 	.word	0x20001cac

08018974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b082      	sub	sp, #8
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801897c:	f000 f852 	bl	8018a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018980:	4b06      	ldr	r3, [pc, #24]	; (801899c <prvIdleTask+0x28>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	2b01      	cmp	r3, #1
 8018986:	d9f9      	bls.n	801897c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018988:	4b05      	ldr	r3, [pc, #20]	; (80189a0 <prvIdleTask+0x2c>)
 801898a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801898e:	601a      	str	r2, [r3, #0]
 8018990:	f3bf 8f4f 	dsb	sy
 8018994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018998:	e7f0      	b.n	801897c <prvIdleTask+0x8>
 801899a:	bf00      	nop
 801899c:	200017c8 	.word	0x200017c8
 80189a0:	e000ed04 	.word	0xe000ed04

080189a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189aa:	2300      	movs	r3, #0
 80189ac:	607b      	str	r3, [r7, #4]
 80189ae:	e00c      	b.n	80189ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	4613      	mov	r3, r2
 80189b4:	009b      	lsls	r3, r3, #2
 80189b6:	4413      	add	r3, r2
 80189b8:	009b      	lsls	r3, r3, #2
 80189ba:	4a12      	ldr	r2, [pc, #72]	; (8018a04 <prvInitialiseTaskLists+0x60>)
 80189bc:	4413      	add	r3, r2
 80189be:	4618      	mov	r0, r3
 80189c0:	f7fe fc18 	bl	80171f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	3301      	adds	r3, #1
 80189c8:	607b      	str	r3, [r7, #4]
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2b37      	cmp	r3, #55	; 0x37
 80189ce:	d9ef      	bls.n	80189b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189d0:	480d      	ldr	r0, [pc, #52]	; (8018a08 <prvInitialiseTaskLists+0x64>)
 80189d2:	f7fe fc0f 	bl	80171f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189d6:	480d      	ldr	r0, [pc, #52]	; (8018a0c <prvInitialiseTaskLists+0x68>)
 80189d8:	f7fe fc0c 	bl	80171f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80189dc:	480c      	ldr	r0, [pc, #48]	; (8018a10 <prvInitialiseTaskLists+0x6c>)
 80189de:	f7fe fc09 	bl	80171f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80189e2:	480c      	ldr	r0, [pc, #48]	; (8018a14 <prvInitialiseTaskLists+0x70>)
 80189e4:	f7fe fc06 	bl	80171f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80189e8:	480b      	ldr	r0, [pc, #44]	; (8018a18 <prvInitialiseTaskLists+0x74>)
 80189ea:	f7fe fc03 	bl	80171f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80189ee:	4b0b      	ldr	r3, [pc, #44]	; (8018a1c <prvInitialiseTaskLists+0x78>)
 80189f0:	4a05      	ldr	r2, [pc, #20]	; (8018a08 <prvInitialiseTaskLists+0x64>)
 80189f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80189f4:	4b0a      	ldr	r3, [pc, #40]	; (8018a20 <prvInitialiseTaskLists+0x7c>)
 80189f6:	4a05      	ldr	r2, [pc, #20]	; (8018a0c <prvInitialiseTaskLists+0x68>)
 80189f8:	601a      	str	r2, [r3, #0]
}
 80189fa:	bf00      	nop
 80189fc:	3708      	adds	r7, #8
 80189fe:	46bd      	mov	sp, r7
 8018a00:	bd80      	pop	{r7, pc}
 8018a02:	bf00      	nop
 8018a04:	200017c8 	.word	0x200017c8
 8018a08:	20001c28 	.word	0x20001c28
 8018a0c:	20001c3c 	.word	0x20001c3c
 8018a10:	20001c58 	.word	0x20001c58
 8018a14:	20001c6c 	.word	0x20001c6c
 8018a18:	20001c84 	.word	0x20001c84
 8018a1c:	20001c50 	.word	0x20001c50
 8018a20:	20001c54 	.word	0x20001c54

08018a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b082      	sub	sp, #8
 8018a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a2a:	e019      	b.n	8018a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a2c:	f000 fdd2 	bl	80195d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a30:	4b10      	ldr	r3, [pc, #64]	; (8018a74 <prvCheckTasksWaitingTermination+0x50>)
 8018a32:	68db      	ldr	r3, [r3, #12]
 8018a34:	68db      	ldr	r3, [r3, #12]
 8018a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	3304      	adds	r3, #4
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f7fe fc63 	bl	8017308 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a42:	4b0d      	ldr	r3, [pc, #52]	; (8018a78 <prvCheckTasksWaitingTermination+0x54>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	3b01      	subs	r3, #1
 8018a48:	4a0b      	ldr	r2, [pc, #44]	; (8018a78 <prvCheckTasksWaitingTermination+0x54>)
 8018a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a4c:	4b0b      	ldr	r3, [pc, #44]	; (8018a7c <prvCheckTasksWaitingTermination+0x58>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	3b01      	subs	r3, #1
 8018a52:	4a0a      	ldr	r2, [pc, #40]	; (8018a7c <prvCheckTasksWaitingTermination+0x58>)
 8018a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a56:	f000 fded 	bl	8019634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f000 f810 	bl	8018a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a60:	4b06      	ldr	r3, [pc, #24]	; (8018a7c <prvCheckTasksWaitingTermination+0x58>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d1e1      	bne.n	8018a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a68:	bf00      	nop
 8018a6a:	bf00      	nop
 8018a6c:	3708      	adds	r7, #8
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop
 8018a74:	20001c6c 	.word	0x20001c6c
 8018a78:	20001c98 	.word	0x20001c98
 8018a7c:	20001c80 	.word	0x20001c80

08018a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d108      	bne.n	8018aa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a96:	4618      	mov	r0, r3
 8018a98:	f000 ff8a 	bl	80199b0 <vPortFree>
				vPortFree( pxTCB );
 8018a9c:	6878      	ldr	r0, [r7, #4]
 8018a9e:	f000 ff87 	bl	80199b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018aa2:	e018      	b.n	8018ad6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	d103      	bne.n	8018ab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	f000 ff7e 	bl	80199b0 <vPortFree>
	}
 8018ab4:	e00f      	b.n	8018ad6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018abc:	2b02      	cmp	r3, #2
 8018abe:	d00a      	beq.n	8018ad6 <prvDeleteTCB+0x56>
	__asm volatile
 8018ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac4:	f383 8811 	msr	BASEPRI, r3
 8018ac8:	f3bf 8f6f 	isb	sy
 8018acc:	f3bf 8f4f 	dsb	sy
 8018ad0:	60fb      	str	r3, [r7, #12]
}
 8018ad2:	bf00      	nop
 8018ad4:	e7fe      	b.n	8018ad4 <prvDeleteTCB+0x54>
	}
 8018ad6:	bf00      	nop
 8018ad8:	3710      	adds	r7, #16
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
	...

08018ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018ae0:	b480      	push	{r7}
 8018ae2:	b083      	sub	sp, #12
 8018ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ae6:	4b0c      	ldr	r3, [pc, #48]	; (8018b18 <prvResetNextTaskUnblockTime+0x38>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d104      	bne.n	8018afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018af0:	4b0a      	ldr	r3, [pc, #40]	; (8018b1c <prvResetNextTaskUnblockTime+0x3c>)
 8018af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018af8:	e008      	b.n	8018b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018afa:	4b07      	ldr	r3, [pc, #28]	; (8018b18 <prvResetNextTaskUnblockTime+0x38>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	685b      	ldr	r3, [r3, #4]
 8018b08:	4a04      	ldr	r2, [pc, #16]	; (8018b1c <prvResetNextTaskUnblockTime+0x3c>)
 8018b0a:	6013      	str	r3, [r2, #0]
}
 8018b0c:	bf00      	nop
 8018b0e:	370c      	adds	r7, #12
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr
 8018b18:	20001c50 	.word	0x20001c50
 8018b1c:	20001cb8 	.word	0x20001cb8

08018b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b26:	4b0b      	ldr	r3, [pc, #44]	; (8018b54 <xTaskGetSchedulerState+0x34>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d102      	bne.n	8018b34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b2e:	2301      	movs	r3, #1
 8018b30:	607b      	str	r3, [r7, #4]
 8018b32:	e008      	b.n	8018b46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b34:	4b08      	ldr	r3, [pc, #32]	; (8018b58 <xTaskGetSchedulerState+0x38>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d102      	bne.n	8018b42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b3c:	2302      	movs	r3, #2
 8018b3e:	607b      	str	r3, [r7, #4]
 8018b40:	e001      	b.n	8018b46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b42:	2300      	movs	r3, #0
 8018b44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b46:	687b      	ldr	r3, [r7, #4]
	}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	370c      	adds	r7, #12
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b52:	4770      	bx	lr
 8018b54:	20001ca4 	.word	0x20001ca4
 8018b58:	20001cc0 	.word	0x20001cc0

08018b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b086      	sub	sp, #24
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018b68:	2300      	movs	r3, #0
 8018b6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d056      	beq.n	8018c20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018b72:	4b2e      	ldr	r3, [pc, #184]	; (8018c2c <xTaskPriorityDisinherit+0xd0>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	693a      	ldr	r2, [r7, #16]
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d00a      	beq.n	8018b92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b80:	f383 8811 	msr	BASEPRI, r3
 8018b84:	f3bf 8f6f 	isb	sy
 8018b88:	f3bf 8f4f 	dsb	sy
 8018b8c:	60fb      	str	r3, [r7, #12]
}
 8018b8e:	bf00      	nop
 8018b90:	e7fe      	b.n	8018b90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d10a      	bne.n	8018bb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b9e:	f383 8811 	msr	BASEPRI, r3
 8018ba2:	f3bf 8f6f 	isb	sy
 8018ba6:	f3bf 8f4f 	dsb	sy
 8018baa:	60bb      	str	r3, [r7, #8]
}
 8018bac:	bf00      	nop
 8018bae:	e7fe      	b.n	8018bae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018bb0:	693b      	ldr	r3, [r7, #16]
 8018bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bb4:	1e5a      	subs	r2, r3, #1
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bbe:	693b      	ldr	r3, [r7, #16]
 8018bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d02c      	beq.n	8018c20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018bc6:	693b      	ldr	r3, [r7, #16]
 8018bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d128      	bne.n	8018c20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bce:	693b      	ldr	r3, [r7, #16]
 8018bd0:	3304      	adds	r3, #4
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7fe fb98 	bl	8017308 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018bdc:	693b      	ldr	r3, [r7, #16]
 8018bde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018be4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018be8:	693b      	ldr	r3, [r7, #16]
 8018bea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bf0:	4b0f      	ldr	r3, [pc, #60]	; (8018c30 <xTaskPriorityDisinherit+0xd4>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d903      	bls.n	8018c00 <xTaskPriorityDisinherit+0xa4>
 8018bf8:	693b      	ldr	r3, [r7, #16]
 8018bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bfc:	4a0c      	ldr	r2, [pc, #48]	; (8018c30 <xTaskPriorityDisinherit+0xd4>)
 8018bfe:	6013      	str	r3, [r2, #0]
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c04:	4613      	mov	r3, r2
 8018c06:	009b      	lsls	r3, r3, #2
 8018c08:	4413      	add	r3, r2
 8018c0a:	009b      	lsls	r3, r3, #2
 8018c0c:	4a09      	ldr	r2, [pc, #36]	; (8018c34 <xTaskPriorityDisinherit+0xd8>)
 8018c0e:	441a      	add	r2, r3
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	3304      	adds	r3, #4
 8018c14:	4619      	mov	r1, r3
 8018c16:	4610      	mov	r0, r2
 8018c18:	f7fe fb19 	bl	801724e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018c1c:	2301      	movs	r3, #1
 8018c1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c20:	697b      	ldr	r3, [r7, #20]
	}
 8018c22:	4618      	mov	r0, r3
 8018c24:	3718      	adds	r7, #24
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}
 8018c2a:	bf00      	nop
 8018c2c:	200017c4 	.word	0x200017c4
 8018c30:	20001ca0 	.word	0x20001ca0
 8018c34:	200017c8 	.word	0x200017c8

08018c38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b084      	sub	sp, #16
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c42:	4b21      	ldr	r3, [pc, #132]	; (8018cc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c48:	4b20      	ldr	r3, [pc, #128]	; (8018ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7fe fb5a 	bl	8017308 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c5a:	d10a      	bne.n	8018c72 <prvAddCurrentTaskToDelayedList+0x3a>
 8018c5c:	683b      	ldr	r3, [r7, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d007      	beq.n	8018c72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c62:	4b1a      	ldr	r3, [pc, #104]	; (8018ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	3304      	adds	r3, #4
 8018c68:	4619      	mov	r1, r3
 8018c6a:	4819      	ldr	r0, [pc, #100]	; (8018cd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8018c6c:	f7fe faef 	bl	801724e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c70:	e026      	b.n	8018cc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c72:	68fa      	ldr	r2, [r7, #12]
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	4413      	add	r3, r2
 8018c78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c7a:	4b14      	ldr	r3, [pc, #80]	; (8018ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	68ba      	ldr	r2, [r7, #8]
 8018c80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c82:	68ba      	ldr	r2, [r7, #8]
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d209      	bcs.n	8018c9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c8a:	4b12      	ldr	r3, [pc, #72]	; (8018cd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018c8c:	681a      	ldr	r2, [r3, #0]
 8018c8e:	4b0f      	ldr	r3, [pc, #60]	; (8018ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	3304      	adds	r3, #4
 8018c94:	4619      	mov	r1, r3
 8018c96:	4610      	mov	r0, r2
 8018c98:	f7fe fafd 	bl	8017296 <vListInsert>
}
 8018c9c:	e010      	b.n	8018cc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c9e:	4b0e      	ldr	r3, [pc, #56]	; (8018cd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018ca0:	681a      	ldr	r2, [r3, #0]
 8018ca2:	4b0a      	ldr	r3, [pc, #40]	; (8018ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	3304      	adds	r3, #4
 8018ca8:	4619      	mov	r1, r3
 8018caa:	4610      	mov	r0, r2
 8018cac:	f7fe faf3 	bl	8017296 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018cb0:	4b0a      	ldr	r3, [pc, #40]	; (8018cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	68ba      	ldr	r2, [r7, #8]
 8018cb6:	429a      	cmp	r2, r3
 8018cb8:	d202      	bcs.n	8018cc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018cba:	4a08      	ldr	r2, [pc, #32]	; (8018cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8018cbc:	68bb      	ldr	r3, [r7, #8]
 8018cbe:	6013      	str	r3, [r2, #0]
}
 8018cc0:	bf00      	nop
 8018cc2:	3710      	adds	r7, #16
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}
 8018cc8:	20001c9c 	.word	0x20001c9c
 8018ccc:	200017c4 	.word	0x200017c4
 8018cd0:	20001c84 	.word	0x20001c84
 8018cd4:	20001c54 	.word	0x20001c54
 8018cd8:	20001c50 	.word	0x20001c50
 8018cdc:	20001cb8 	.word	0x20001cb8

08018ce0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b08a      	sub	sp, #40	; 0x28
 8018ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018cea:	f000 fb07 	bl	80192fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018cee:	4b1c      	ldr	r3, [pc, #112]	; (8018d60 <xTimerCreateTimerTask+0x80>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d021      	beq.n	8018d3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018cfe:	1d3a      	adds	r2, r7, #4
 8018d00:	f107 0108 	add.w	r1, r7, #8
 8018d04:	f107 030c 	add.w	r3, r7, #12
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7fe fa59 	bl	80171c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018d0e:	6879      	ldr	r1, [r7, #4]
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	68fa      	ldr	r2, [r7, #12]
 8018d14:	9202      	str	r2, [sp, #8]
 8018d16:	9301      	str	r3, [sp, #4]
 8018d18:	2302      	movs	r3, #2
 8018d1a:	9300      	str	r3, [sp, #0]
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	460a      	mov	r2, r1
 8018d20:	4910      	ldr	r1, [pc, #64]	; (8018d64 <xTimerCreateTimerTask+0x84>)
 8018d22:	4811      	ldr	r0, [pc, #68]	; (8018d68 <xTimerCreateTimerTask+0x88>)
 8018d24:	f7ff f806 	bl	8017d34 <xTaskCreateStatic>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	4a10      	ldr	r2, [pc, #64]	; (8018d6c <xTimerCreateTimerTask+0x8c>)
 8018d2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018d2e:	4b0f      	ldr	r3, [pc, #60]	; (8018d6c <xTimerCreateTimerTask+0x8c>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d001      	beq.n	8018d3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018d36:	2301      	movs	r3, #1
 8018d38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d10a      	bne.n	8018d56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d44:	f383 8811 	msr	BASEPRI, r3
 8018d48:	f3bf 8f6f 	isb	sy
 8018d4c:	f3bf 8f4f 	dsb	sy
 8018d50:	613b      	str	r3, [r7, #16]
}
 8018d52:	bf00      	nop
 8018d54:	e7fe      	b.n	8018d54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018d56:	697b      	ldr	r3, [r7, #20]
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3718      	adds	r7, #24
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	20001cf4 	.word	0x20001cf4
 8018d64:	080200c0 	.word	0x080200c0
 8018d68:	08018ea5 	.word	0x08018ea5
 8018d6c:	20001cf8 	.word	0x20001cf8

08018d70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b08a      	sub	sp, #40	; 0x28
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
 8018d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d7e:	2300      	movs	r3, #0
 8018d80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d10a      	bne.n	8018d9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d8c:	f383 8811 	msr	BASEPRI, r3
 8018d90:	f3bf 8f6f 	isb	sy
 8018d94:	f3bf 8f4f 	dsb	sy
 8018d98:	623b      	str	r3, [r7, #32]
}
 8018d9a:	bf00      	nop
 8018d9c:	e7fe      	b.n	8018d9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018d9e:	4b1a      	ldr	r3, [pc, #104]	; (8018e08 <xTimerGenericCommand+0x98>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d02a      	beq.n	8018dfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018db2:	68bb      	ldr	r3, [r7, #8]
 8018db4:	2b05      	cmp	r3, #5
 8018db6:	dc18      	bgt.n	8018dea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018db8:	f7ff feb2 	bl	8018b20 <xTaskGetSchedulerState>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b02      	cmp	r3, #2
 8018dc0:	d109      	bne.n	8018dd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018dc2:	4b11      	ldr	r3, [pc, #68]	; (8018e08 <xTimerGenericCommand+0x98>)
 8018dc4:	6818      	ldr	r0, [r3, #0]
 8018dc6:	f107 0110 	add.w	r1, r7, #16
 8018dca:	2300      	movs	r3, #0
 8018dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018dce:	f7fe fbc9 	bl	8017564 <xQueueGenericSend>
 8018dd2:	6278      	str	r0, [r7, #36]	; 0x24
 8018dd4:	e012      	b.n	8018dfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018dd6:	4b0c      	ldr	r3, [pc, #48]	; (8018e08 <xTimerGenericCommand+0x98>)
 8018dd8:	6818      	ldr	r0, [r3, #0]
 8018dda:	f107 0110 	add.w	r1, r7, #16
 8018dde:	2300      	movs	r3, #0
 8018de0:	2200      	movs	r2, #0
 8018de2:	f7fe fbbf 	bl	8017564 <xQueueGenericSend>
 8018de6:	6278      	str	r0, [r7, #36]	; 0x24
 8018de8:	e008      	b.n	8018dfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018dea:	4b07      	ldr	r3, [pc, #28]	; (8018e08 <xTimerGenericCommand+0x98>)
 8018dec:	6818      	ldr	r0, [r3, #0]
 8018dee:	f107 0110 	add.w	r1, r7, #16
 8018df2:	2300      	movs	r3, #0
 8018df4:	683a      	ldr	r2, [r7, #0]
 8018df6:	f7fe fcb3 	bl	8017760 <xQueueGenericSendFromISR>
 8018dfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3728      	adds	r7, #40	; 0x28
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	20001cf4 	.word	0x20001cf4

08018e0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b088      	sub	sp, #32
 8018e10:	af02      	add	r7, sp, #8
 8018e12:	6078      	str	r0, [r7, #4]
 8018e14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e16:	4b22      	ldr	r3, [pc, #136]	; (8018ea0 <prvProcessExpiredTimer+0x94>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	68db      	ldr	r3, [r3, #12]
 8018e1c:	68db      	ldr	r3, [r3, #12]
 8018e1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	3304      	adds	r3, #4
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7fe fa6f 	bl	8017308 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e30:	f003 0304 	and.w	r3, r3, #4
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d022      	beq.n	8018e7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	699a      	ldr	r2, [r3, #24]
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	18d1      	adds	r1, r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	683a      	ldr	r2, [r7, #0]
 8018e44:	6978      	ldr	r0, [r7, #20]
 8018e46:	f000 f8d1 	bl	8018fec <prvInsertTimerInActiveList>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d01f      	beq.n	8018e90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018e50:	2300      	movs	r3, #0
 8018e52:	9300      	str	r3, [sp, #0]
 8018e54:	2300      	movs	r3, #0
 8018e56:	687a      	ldr	r2, [r7, #4]
 8018e58:	2100      	movs	r1, #0
 8018e5a:	6978      	ldr	r0, [r7, #20]
 8018e5c:	f7ff ff88 	bl	8018d70 <xTimerGenericCommand>
 8018e60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e62:	693b      	ldr	r3, [r7, #16]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d113      	bne.n	8018e90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e6c:	f383 8811 	msr	BASEPRI, r3
 8018e70:	f3bf 8f6f 	isb	sy
 8018e74:	f3bf 8f4f 	dsb	sy
 8018e78:	60fb      	str	r3, [r7, #12]
}
 8018e7a:	bf00      	nop
 8018e7c:	e7fe      	b.n	8018e7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e84:	f023 0301 	bic.w	r3, r3, #1
 8018e88:	b2da      	uxtb	r2, r3
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	6a1b      	ldr	r3, [r3, #32]
 8018e94:	6978      	ldr	r0, [r7, #20]
 8018e96:	4798      	blx	r3
}
 8018e98:	bf00      	nop
 8018e9a:	3718      	adds	r7, #24
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	20001cec 	.word	0x20001cec

08018ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018eac:	f107 0308 	add.w	r3, r7, #8
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f000 f857 	bl	8018f64 <prvGetNextExpireTime>
 8018eb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	4619      	mov	r1, r3
 8018ebc:	68f8      	ldr	r0, [r7, #12]
 8018ebe:	f000 f803 	bl	8018ec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018ec2:	f000 f8d5 	bl	8019070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ec6:	e7f1      	b.n	8018eac <prvTimerTask+0x8>

08018ec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b084      	sub	sp, #16
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018ed2:	f7ff fa43 	bl	801835c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018ed6:	f107 0308 	add.w	r3, r7, #8
 8018eda:	4618      	mov	r0, r3
 8018edc:	f000 f866 	bl	8018fac <prvSampleTimeNow>
 8018ee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d130      	bne.n	8018f4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d10a      	bne.n	8018f04 <prvProcessTimerOrBlockTask+0x3c>
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d806      	bhi.n	8018f04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018ef6:	f7ff fa3f 	bl	8018378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018efa:	68f9      	ldr	r1, [r7, #12]
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f7ff ff85 	bl	8018e0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018f02:	e024      	b.n	8018f4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d008      	beq.n	8018f1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018f0a:	4b13      	ldr	r3, [pc, #76]	; (8018f58 <prvProcessTimerOrBlockTask+0x90>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d101      	bne.n	8018f18 <prvProcessTimerOrBlockTask+0x50>
 8018f14:	2301      	movs	r3, #1
 8018f16:	e000      	b.n	8018f1a <prvProcessTimerOrBlockTask+0x52>
 8018f18:	2300      	movs	r3, #0
 8018f1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018f1c:	4b0f      	ldr	r3, [pc, #60]	; (8018f5c <prvProcessTimerOrBlockTask+0x94>)
 8018f1e:	6818      	ldr	r0, [r3, #0]
 8018f20:	687a      	ldr	r2, [r7, #4]
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	1ad3      	subs	r3, r2, r3
 8018f26:	683a      	ldr	r2, [r7, #0]
 8018f28:	4619      	mov	r1, r3
 8018f2a:	f7fe fecf 	bl	8017ccc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018f2e:	f7ff fa23 	bl	8018378 <xTaskResumeAll>
 8018f32:	4603      	mov	r3, r0
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d10a      	bne.n	8018f4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018f38:	4b09      	ldr	r3, [pc, #36]	; (8018f60 <prvProcessTimerOrBlockTask+0x98>)
 8018f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f3e:	601a      	str	r2, [r3, #0]
 8018f40:	f3bf 8f4f 	dsb	sy
 8018f44:	f3bf 8f6f 	isb	sy
}
 8018f48:	e001      	b.n	8018f4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018f4a:	f7ff fa15 	bl	8018378 <xTaskResumeAll>
}
 8018f4e:	bf00      	nop
 8018f50:	3710      	adds	r7, #16
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	20001cf0 	.word	0x20001cf0
 8018f5c:	20001cf4 	.word	0x20001cf4
 8018f60:	e000ed04 	.word	0xe000ed04

08018f64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f64:	b480      	push	{r7}
 8018f66:	b085      	sub	sp, #20
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f6c:	4b0e      	ldr	r3, [pc, #56]	; (8018fa8 <prvGetNextExpireTime+0x44>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d101      	bne.n	8018f7a <prvGetNextExpireTime+0x16>
 8018f76:	2201      	movs	r2, #1
 8018f78:	e000      	b.n	8018f7c <prvGetNextExpireTime+0x18>
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d105      	bne.n	8018f94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f88:	4b07      	ldr	r3, [pc, #28]	; (8018fa8 <prvGetNextExpireTime+0x44>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	68db      	ldr	r3, [r3, #12]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	60fb      	str	r3, [r7, #12]
 8018f92:	e001      	b.n	8018f98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018f94:	2300      	movs	r3, #0
 8018f96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018f98:	68fb      	ldr	r3, [r7, #12]
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3714      	adds	r7, #20
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa4:	4770      	bx	lr
 8018fa6:	bf00      	nop
 8018fa8:	20001cec 	.word	0x20001cec

08018fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b084      	sub	sp, #16
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018fb4:	f7ff fa7e 	bl	80184b4 <xTaskGetTickCount>
 8018fb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018fba:	4b0b      	ldr	r3, [pc, #44]	; (8018fe8 <prvSampleTimeNow+0x3c>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	68fa      	ldr	r2, [r7, #12]
 8018fc0:	429a      	cmp	r2, r3
 8018fc2:	d205      	bcs.n	8018fd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018fc4:	f000 f936 	bl	8019234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2201      	movs	r2, #1
 8018fcc:	601a      	str	r2, [r3, #0]
 8018fce:	e002      	b.n	8018fd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018fd6:	4a04      	ldr	r2, [pc, #16]	; (8018fe8 <prvSampleTimeNow+0x3c>)
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
}
 8018fde:	4618      	mov	r0, r3
 8018fe0:	3710      	adds	r7, #16
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop
 8018fe8:	20001cfc 	.word	0x20001cfc

08018fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b086      	sub	sp, #24
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	60f8      	str	r0, [r7, #12]
 8018ff4:	60b9      	str	r1, [r7, #8]
 8018ff6:	607a      	str	r2, [r7, #4]
 8018ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	68fa      	ldr	r2, [r7, #12]
 8019008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801900a:	68ba      	ldr	r2, [r7, #8]
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	429a      	cmp	r2, r3
 8019010:	d812      	bhi.n	8019038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	1ad2      	subs	r2, r2, r3
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	699b      	ldr	r3, [r3, #24]
 801901c:	429a      	cmp	r2, r3
 801901e:	d302      	bcc.n	8019026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019020:	2301      	movs	r3, #1
 8019022:	617b      	str	r3, [r7, #20]
 8019024:	e01b      	b.n	801905e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019026:	4b10      	ldr	r3, [pc, #64]	; (8019068 <prvInsertTimerInActiveList+0x7c>)
 8019028:	681a      	ldr	r2, [r3, #0]
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	3304      	adds	r3, #4
 801902e:	4619      	mov	r1, r3
 8019030:	4610      	mov	r0, r2
 8019032:	f7fe f930 	bl	8017296 <vListInsert>
 8019036:	e012      	b.n	801905e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019038:	687a      	ldr	r2, [r7, #4]
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	429a      	cmp	r2, r3
 801903e:	d206      	bcs.n	801904e <prvInsertTimerInActiveList+0x62>
 8019040:	68ba      	ldr	r2, [r7, #8]
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	429a      	cmp	r2, r3
 8019046:	d302      	bcc.n	801904e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019048:	2301      	movs	r3, #1
 801904a:	617b      	str	r3, [r7, #20]
 801904c:	e007      	b.n	801905e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801904e:	4b07      	ldr	r3, [pc, #28]	; (801906c <prvInsertTimerInActiveList+0x80>)
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	3304      	adds	r3, #4
 8019056:	4619      	mov	r1, r3
 8019058:	4610      	mov	r0, r2
 801905a:	f7fe f91c 	bl	8017296 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801905e:	697b      	ldr	r3, [r7, #20]
}
 8019060:	4618      	mov	r0, r3
 8019062:	3718      	adds	r7, #24
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	20001cf0 	.word	0x20001cf0
 801906c:	20001cec 	.word	0x20001cec

08019070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b08e      	sub	sp, #56	; 0x38
 8019074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019076:	e0ca      	b.n	801920e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	2b00      	cmp	r3, #0
 801907c:	da18      	bge.n	80190b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801907e:	1d3b      	adds	r3, r7, #4
 8019080:	3304      	adds	r3, #4
 8019082:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019086:	2b00      	cmp	r3, #0
 8019088:	d10a      	bne.n	80190a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801908e:	f383 8811 	msr	BASEPRI, r3
 8019092:	f3bf 8f6f 	isb	sy
 8019096:	f3bf 8f4f 	dsb	sy
 801909a:	61fb      	str	r3, [r7, #28]
}
 801909c:	bf00      	nop
 801909e:	e7fe      	b.n	801909e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80190a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190a6:	6850      	ldr	r0, [r2, #4]
 80190a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190aa:	6892      	ldr	r2, [r2, #8]
 80190ac:	4611      	mov	r1, r2
 80190ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f2c0 80aa 	blt.w	801920c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80190bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190be:	695b      	ldr	r3, [r3, #20]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d004      	beq.n	80190ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c6:	3304      	adds	r3, #4
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7fe f91d 	bl	8017308 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80190ce:	463b      	mov	r3, r7
 80190d0:	4618      	mov	r0, r3
 80190d2:	f7ff ff6b 	bl	8018fac <prvSampleTimeNow>
 80190d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	2b09      	cmp	r3, #9
 80190dc:	f200 8097 	bhi.w	801920e <prvProcessReceivedCommands+0x19e>
 80190e0:	a201      	add	r2, pc, #4	; (adr r2, 80190e8 <prvProcessReceivedCommands+0x78>)
 80190e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190e6:	bf00      	nop
 80190e8:	08019111 	.word	0x08019111
 80190ec:	08019111 	.word	0x08019111
 80190f0:	08019111 	.word	0x08019111
 80190f4:	08019185 	.word	0x08019185
 80190f8:	08019199 	.word	0x08019199
 80190fc:	080191e3 	.word	0x080191e3
 8019100:	08019111 	.word	0x08019111
 8019104:	08019111 	.word	0x08019111
 8019108:	08019185 	.word	0x08019185
 801910c:	08019199 	.word	0x08019199
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019116:	f043 0301 	orr.w	r3, r3, #1
 801911a:	b2da      	uxtb	r2, r3
 801911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019122:	68ba      	ldr	r2, [r7, #8]
 8019124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019126:	699b      	ldr	r3, [r3, #24]
 8019128:	18d1      	adds	r1, r2, r3
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801912e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019130:	f7ff ff5c 	bl	8018fec <prvInsertTimerInActiveList>
 8019134:	4603      	mov	r3, r0
 8019136:	2b00      	cmp	r3, #0
 8019138:	d069      	beq.n	801920e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913c:	6a1b      	ldr	r3, [r3, #32]
 801913e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019148:	f003 0304 	and.w	r3, r3, #4
 801914c:	2b00      	cmp	r3, #0
 801914e:	d05e      	beq.n	801920e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019150:	68ba      	ldr	r2, [r7, #8]
 8019152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019154:	699b      	ldr	r3, [r3, #24]
 8019156:	441a      	add	r2, r3
 8019158:	2300      	movs	r3, #0
 801915a:	9300      	str	r3, [sp, #0]
 801915c:	2300      	movs	r3, #0
 801915e:	2100      	movs	r1, #0
 8019160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019162:	f7ff fe05 	bl	8018d70 <xTimerGenericCommand>
 8019166:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019168:	6a3b      	ldr	r3, [r7, #32]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d14f      	bne.n	801920e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019172:	f383 8811 	msr	BASEPRI, r3
 8019176:	f3bf 8f6f 	isb	sy
 801917a:	f3bf 8f4f 	dsb	sy
 801917e:	61bb      	str	r3, [r7, #24]
}
 8019180:	bf00      	nop
 8019182:	e7fe      	b.n	8019182 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801918a:	f023 0301 	bic.w	r3, r3, #1
 801918e:	b2da      	uxtb	r2, r3
 8019190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019196:	e03a      	b.n	801920e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801919a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801919e:	f043 0301 	orr.w	r3, r3, #1
 80191a2:	b2da      	uxtb	r2, r3
 80191a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80191aa:	68ba      	ldr	r2, [r7, #8]
 80191ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80191b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b2:	699b      	ldr	r3, [r3, #24]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d10a      	bne.n	80191ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80191b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191bc:	f383 8811 	msr	BASEPRI, r3
 80191c0:	f3bf 8f6f 	isb	sy
 80191c4:	f3bf 8f4f 	dsb	sy
 80191c8:	617b      	str	r3, [r7, #20]
}
 80191ca:	bf00      	nop
 80191cc:	e7fe      	b.n	80191cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80191ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191d0:	699a      	ldr	r2, [r3, #24]
 80191d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d4:	18d1      	adds	r1, r2, r3
 80191d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191dc:	f7ff ff06 	bl	8018fec <prvInsertTimerInActiveList>
					break;
 80191e0:	e015      	b.n	801920e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80191e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191e8:	f003 0302 	and.w	r3, r3, #2
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d103      	bne.n	80191f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80191f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191f2:	f000 fbdd 	bl	80199b0 <vPortFree>
 80191f6:	e00a      	b.n	801920e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191fe:	f023 0301 	bic.w	r3, r3, #1
 8019202:	b2da      	uxtb	r2, r3
 8019204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801920a:	e000      	b.n	801920e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801920c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801920e:	4b08      	ldr	r3, [pc, #32]	; (8019230 <prvProcessReceivedCommands+0x1c0>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	1d39      	adds	r1, r7, #4
 8019214:	2200      	movs	r2, #0
 8019216:	4618      	mov	r0, r3
 8019218:	f7fe fb3e 	bl	8017898 <xQueueReceive>
 801921c:	4603      	mov	r3, r0
 801921e:	2b00      	cmp	r3, #0
 8019220:	f47f af2a 	bne.w	8019078 <prvProcessReceivedCommands+0x8>
	}
}
 8019224:	bf00      	nop
 8019226:	bf00      	nop
 8019228:	3730      	adds	r7, #48	; 0x30
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	20001cf4 	.word	0x20001cf4

08019234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b088      	sub	sp, #32
 8019238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801923a:	e048      	b.n	80192ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801923c:	4b2d      	ldr	r3, [pc, #180]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019246:	4b2b      	ldr	r3, [pc, #172]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	68db      	ldr	r3, [r3, #12]
 801924c:	68db      	ldr	r3, [r3, #12]
 801924e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	3304      	adds	r3, #4
 8019254:	4618      	mov	r0, r3
 8019256:	f7fe f857 	bl	8017308 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	6a1b      	ldr	r3, [r3, #32]
 801925e:	68f8      	ldr	r0, [r7, #12]
 8019260:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019268:	f003 0304 	and.w	r3, r3, #4
 801926c:	2b00      	cmp	r3, #0
 801926e:	d02e      	beq.n	80192ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	699b      	ldr	r3, [r3, #24]
 8019274:	693a      	ldr	r2, [r7, #16]
 8019276:	4413      	add	r3, r2
 8019278:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801927a:	68ba      	ldr	r2, [r7, #8]
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	429a      	cmp	r2, r3
 8019280:	d90e      	bls.n	80192a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	68ba      	ldr	r2, [r7, #8]
 8019286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	68fa      	ldr	r2, [r7, #12]
 801928c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801928e:	4b19      	ldr	r3, [pc, #100]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 8019290:	681a      	ldr	r2, [r3, #0]
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	3304      	adds	r3, #4
 8019296:	4619      	mov	r1, r3
 8019298:	4610      	mov	r0, r2
 801929a:	f7fd fffc 	bl	8017296 <vListInsert>
 801929e:	e016      	b.n	80192ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80192a0:	2300      	movs	r3, #0
 80192a2:	9300      	str	r3, [sp, #0]
 80192a4:	2300      	movs	r3, #0
 80192a6:	693a      	ldr	r2, [r7, #16]
 80192a8:	2100      	movs	r1, #0
 80192aa:	68f8      	ldr	r0, [r7, #12]
 80192ac:	f7ff fd60 	bl	8018d70 <xTimerGenericCommand>
 80192b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d10a      	bne.n	80192ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80192b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192bc:	f383 8811 	msr	BASEPRI, r3
 80192c0:	f3bf 8f6f 	isb	sy
 80192c4:	f3bf 8f4f 	dsb	sy
 80192c8:	603b      	str	r3, [r7, #0]
}
 80192ca:	bf00      	nop
 80192cc:	e7fe      	b.n	80192cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80192ce:	4b09      	ldr	r3, [pc, #36]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d1b1      	bne.n	801923c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80192d8:	4b06      	ldr	r3, [pc, #24]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80192de:	4b06      	ldr	r3, [pc, #24]	; (80192f8 <prvSwitchTimerLists+0xc4>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	4a04      	ldr	r2, [pc, #16]	; (80192f4 <prvSwitchTimerLists+0xc0>)
 80192e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80192e6:	4a04      	ldr	r2, [pc, #16]	; (80192f8 <prvSwitchTimerLists+0xc4>)
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	6013      	str	r3, [r2, #0]
}
 80192ec:	bf00      	nop
 80192ee:	3718      	adds	r7, #24
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}
 80192f4:	20001cec 	.word	0x20001cec
 80192f8:	20001cf0 	.word	0x20001cf0

080192fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019302:	f000 f967 	bl	80195d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019306:	4b15      	ldr	r3, [pc, #84]	; (801935c <prvCheckForValidListAndQueue+0x60>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d120      	bne.n	8019350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801930e:	4814      	ldr	r0, [pc, #80]	; (8019360 <prvCheckForValidListAndQueue+0x64>)
 8019310:	f7fd ff70 	bl	80171f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019314:	4813      	ldr	r0, [pc, #76]	; (8019364 <prvCheckForValidListAndQueue+0x68>)
 8019316:	f7fd ff6d 	bl	80171f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801931a:	4b13      	ldr	r3, [pc, #76]	; (8019368 <prvCheckForValidListAndQueue+0x6c>)
 801931c:	4a10      	ldr	r2, [pc, #64]	; (8019360 <prvCheckForValidListAndQueue+0x64>)
 801931e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019320:	4b12      	ldr	r3, [pc, #72]	; (801936c <prvCheckForValidListAndQueue+0x70>)
 8019322:	4a10      	ldr	r2, [pc, #64]	; (8019364 <prvCheckForValidListAndQueue+0x68>)
 8019324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019326:	2300      	movs	r3, #0
 8019328:	9300      	str	r3, [sp, #0]
 801932a:	4b11      	ldr	r3, [pc, #68]	; (8019370 <prvCheckForValidListAndQueue+0x74>)
 801932c:	4a11      	ldr	r2, [pc, #68]	; (8019374 <prvCheckForValidListAndQueue+0x78>)
 801932e:	2110      	movs	r1, #16
 8019330:	200a      	movs	r0, #10
 8019332:	f7fe f87b 	bl	801742c <xQueueGenericCreateStatic>
 8019336:	4603      	mov	r3, r0
 8019338:	4a08      	ldr	r2, [pc, #32]	; (801935c <prvCheckForValidListAndQueue+0x60>)
 801933a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801933c:	4b07      	ldr	r3, [pc, #28]	; (801935c <prvCheckForValidListAndQueue+0x60>)
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d005      	beq.n	8019350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019344:	4b05      	ldr	r3, [pc, #20]	; (801935c <prvCheckForValidListAndQueue+0x60>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	490b      	ldr	r1, [pc, #44]	; (8019378 <prvCheckForValidListAndQueue+0x7c>)
 801934a:	4618      	mov	r0, r3
 801934c:	f7fe fc94 	bl	8017c78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019350:	f000 f970 	bl	8019634 <vPortExitCritical>
}
 8019354:	bf00      	nop
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	20001cf4 	.word	0x20001cf4
 8019360:	20001cc4 	.word	0x20001cc4
 8019364:	20001cd8 	.word	0x20001cd8
 8019368:	20001cec 	.word	0x20001cec
 801936c:	20001cf0 	.word	0x20001cf0
 8019370:	20001da0 	.word	0x20001da0
 8019374:	20001d00 	.word	0x20001d00
 8019378:	080200c8 	.word	0x080200c8

0801937c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801937c:	b480      	push	{r7}
 801937e:	b085      	sub	sp, #20
 8019380:	af00      	add	r7, sp, #0
 8019382:	60f8      	str	r0, [r7, #12]
 8019384:	60b9      	str	r1, [r7, #8]
 8019386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	3b04      	subs	r3, #4
 801938c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	3b04      	subs	r3, #4
 801939a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	f023 0201 	bic.w	r2, r3, #1
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	3b04      	subs	r3, #4
 80193aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80193ac:	4a0c      	ldr	r2, [pc, #48]	; (80193e0 <pxPortInitialiseStack+0x64>)
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	3b14      	subs	r3, #20
 80193b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80193b8:	687a      	ldr	r2, [r7, #4]
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	3b04      	subs	r3, #4
 80193c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	f06f 0202 	mvn.w	r2, #2
 80193ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	3b20      	subs	r3, #32
 80193d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80193d2:	68fb      	ldr	r3, [r7, #12]
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr
 80193e0:	080193e5 	.word	0x080193e5

080193e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80193e4:	b480      	push	{r7}
 80193e6:	b085      	sub	sp, #20
 80193e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80193ea:	2300      	movs	r3, #0
 80193ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80193ee:	4b12      	ldr	r3, [pc, #72]	; (8019438 <prvTaskExitError+0x54>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80193f6:	d00a      	beq.n	801940e <prvTaskExitError+0x2a>
	__asm volatile
 80193f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193fc:	f383 8811 	msr	BASEPRI, r3
 8019400:	f3bf 8f6f 	isb	sy
 8019404:	f3bf 8f4f 	dsb	sy
 8019408:	60fb      	str	r3, [r7, #12]
}
 801940a:	bf00      	nop
 801940c:	e7fe      	b.n	801940c <prvTaskExitError+0x28>
	__asm volatile
 801940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019412:	f383 8811 	msr	BASEPRI, r3
 8019416:	f3bf 8f6f 	isb	sy
 801941a:	f3bf 8f4f 	dsb	sy
 801941e:	60bb      	str	r3, [r7, #8]
}
 8019420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019422:	bf00      	nop
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d0fc      	beq.n	8019424 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801942a:	bf00      	nop
 801942c:	bf00      	nop
 801942e:	3714      	adds	r7, #20
 8019430:	46bd      	mov	sp, r7
 8019432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019436:	4770      	bx	lr
 8019438:	200000c0 	.word	0x200000c0
 801943c:	00000000 	.word	0x00000000

08019440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019440:	4b07      	ldr	r3, [pc, #28]	; (8019460 <pxCurrentTCBConst2>)
 8019442:	6819      	ldr	r1, [r3, #0]
 8019444:	6808      	ldr	r0, [r1, #0]
 8019446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801944a:	f380 8809 	msr	PSP, r0
 801944e:	f3bf 8f6f 	isb	sy
 8019452:	f04f 0000 	mov.w	r0, #0
 8019456:	f380 8811 	msr	BASEPRI, r0
 801945a:	4770      	bx	lr
 801945c:	f3af 8000 	nop.w

08019460 <pxCurrentTCBConst2>:
 8019460:	200017c4 	.word	0x200017c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019464:	bf00      	nop
 8019466:	bf00      	nop

08019468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019468:	4808      	ldr	r0, [pc, #32]	; (801948c <prvPortStartFirstTask+0x24>)
 801946a:	6800      	ldr	r0, [r0, #0]
 801946c:	6800      	ldr	r0, [r0, #0]
 801946e:	f380 8808 	msr	MSP, r0
 8019472:	f04f 0000 	mov.w	r0, #0
 8019476:	f380 8814 	msr	CONTROL, r0
 801947a:	b662      	cpsie	i
 801947c:	b661      	cpsie	f
 801947e:	f3bf 8f4f 	dsb	sy
 8019482:	f3bf 8f6f 	isb	sy
 8019486:	df00      	svc	0
 8019488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801948a:	bf00      	nop
 801948c:	e000ed08 	.word	0xe000ed08

08019490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b086      	sub	sp, #24
 8019494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019496:	4b46      	ldr	r3, [pc, #280]	; (80195b0 <xPortStartScheduler+0x120>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	4a46      	ldr	r2, [pc, #280]	; (80195b4 <xPortStartScheduler+0x124>)
 801949c:	4293      	cmp	r3, r2
 801949e:	d10a      	bne.n	80194b6 <xPortStartScheduler+0x26>
	__asm volatile
 80194a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194a4:	f383 8811 	msr	BASEPRI, r3
 80194a8:	f3bf 8f6f 	isb	sy
 80194ac:	f3bf 8f4f 	dsb	sy
 80194b0:	613b      	str	r3, [r7, #16]
}
 80194b2:	bf00      	nop
 80194b4:	e7fe      	b.n	80194b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80194b6:	4b3e      	ldr	r3, [pc, #248]	; (80195b0 <xPortStartScheduler+0x120>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	4a3f      	ldr	r2, [pc, #252]	; (80195b8 <xPortStartScheduler+0x128>)
 80194bc:	4293      	cmp	r3, r2
 80194be:	d10a      	bne.n	80194d6 <xPortStartScheduler+0x46>
	__asm volatile
 80194c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194c4:	f383 8811 	msr	BASEPRI, r3
 80194c8:	f3bf 8f6f 	isb	sy
 80194cc:	f3bf 8f4f 	dsb	sy
 80194d0:	60fb      	str	r3, [r7, #12]
}
 80194d2:	bf00      	nop
 80194d4:	e7fe      	b.n	80194d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80194d6:	4b39      	ldr	r3, [pc, #228]	; (80195bc <xPortStartScheduler+0x12c>)
 80194d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	781b      	ldrb	r3, [r3, #0]
 80194de:	b2db      	uxtb	r3, r3
 80194e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	22ff      	movs	r2, #255	; 0xff
 80194e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80194e8:	697b      	ldr	r3, [r7, #20]
 80194ea:	781b      	ldrb	r3, [r3, #0]
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80194f0:	78fb      	ldrb	r3, [r7, #3]
 80194f2:	b2db      	uxtb	r3, r3
 80194f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80194f8:	b2da      	uxtb	r2, r3
 80194fa:	4b31      	ldr	r3, [pc, #196]	; (80195c0 <xPortStartScheduler+0x130>)
 80194fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80194fe:	4b31      	ldr	r3, [pc, #196]	; (80195c4 <xPortStartScheduler+0x134>)
 8019500:	2207      	movs	r2, #7
 8019502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019504:	e009      	b.n	801951a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019506:	4b2f      	ldr	r3, [pc, #188]	; (80195c4 <xPortStartScheduler+0x134>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	3b01      	subs	r3, #1
 801950c:	4a2d      	ldr	r2, [pc, #180]	; (80195c4 <xPortStartScheduler+0x134>)
 801950e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019510:	78fb      	ldrb	r3, [r7, #3]
 8019512:	b2db      	uxtb	r3, r3
 8019514:	005b      	lsls	r3, r3, #1
 8019516:	b2db      	uxtb	r3, r3
 8019518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801951a:	78fb      	ldrb	r3, [r7, #3]
 801951c:	b2db      	uxtb	r3, r3
 801951e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019522:	2b80      	cmp	r3, #128	; 0x80
 8019524:	d0ef      	beq.n	8019506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019526:	4b27      	ldr	r3, [pc, #156]	; (80195c4 <xPortStartScheduler+0x134>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	f1c3 0307 	rsb	r3, r3, #7
 801952e:	2b04      	cmp	r3, #4
 8019530:	d00a      	beq.n	8019548 <xPortStartScheduler+0xb8>
	__asm volatile
 8019532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019536:	f383 8811 	msr	BASEPRI, r3
 801953a:	f3bf 8f6f 	isb	sy
 801953e:	f3bf 8f4f 	dsb	sy
 8019542:	60bb      	str	r3, [r7, #8]
}
 8019544:	bf00      	nop
 8019546:	e7fe      	b.n	8019546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019548:	4b1e      	ldr	r3, [pc, #120]	; (80195c4 <xPortStartScheduler+0x134>)
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	021b      	lsls	r3, r3, #8
 801954e:	4a1d      	ldr	r2, [pc, #116]	; (80195c4 <xPortStartScheduler+0x134>)
 8019550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019552:	4b1c      	ldr	r3, [pc, #112]	; (80195c4 <xPortStartScheduler+0x134>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801955a:	4a1a      	ldr	r2, [pc, #104]	; (80195c4 <xPortStartScheduler+0x134>)
 801955c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	b2da      	uxtb	r2, r3
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019566:	4b18      	ldr	r3, [pc, #96]	; (80195c8 <xPortStartScheduler+0x138>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4a17      	ldr	r2, [pc, #92]	; (80195c8 <xPortStartScheduler+0x138>)
 801956c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019572:	4b15      	ldr	r3, [pc, #84]	; (80195c8 <xPortStartScheduler+0x138>)
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4a14      	ldr	r2, [pc, #80]	; (80195c8 <xPortStartScheduler+0x138>)
 8019578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801957c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801957e:	f000 f8dd 	bl	801973c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019582:	4b12      	ldr	r3, [pc, #72]	; (80195cc <xPortStartScheduler+0x13c>)
 8019584:	2200      	movs	r2, #0
 8019586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019588:	f000 f8fc 	bl	8019784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801958c:	4b10      	ldr	r3, [pc, #64]	; (80195d0 <xPortStartScheduler+0x140>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	4a0f      	ldr	r2, [pc, #60]	; (80195d0 <xPortStartScheduler+0x140>)
 8019592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019598:	f7ff ff66 	bl	8019468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801959c:	f7ff f854 	bl	8018648 <vTaskSwitchContext>
	prvTaskExitError();
 80195a0:	f7ff ff20 	bl	80193e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80195a4:	2300      	movs	r3, #0
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	3718      	adds	r7, #24
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bd80      	pop	{r7, pc}
 80195ae:	bf00      	nop
 80195b0:	e000ed00 	.word	0xe000ed00
 80195b4:	410fc271 	.word	0x410fc271
 80195b8:	410fc270 	.word	0x410fc270
 80195bc:	e000e400 	.word	0xe000e400
 80195c0:	20001df0 	.word	0x20001df0
 80195c4:	20001df4 	.word	0x20001df4
 80195c8:	e000ed20 	.word	0xe000ed20
 80195cc:	200000c0 	.word	0x200000c0
 80195d0:	e000ef34 	.word	0xe000ef34

080195d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80195d4:	b480      	push	{r7}
 80195d6:	b083      	sub	sp, #12
 80195d8:	af00      	add	r7, sp, #0
	__asm volatile
 80195da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195de:	f383 8811 	msr	BASEPRI, r3
 80195e2:	f3bf 8f6f 	isb	sy
 80195e6:	f3bf 8f4f 	dsb	sy
 80195ea:	607b      	str	r3, [r7, #4]
}
 80195ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80195ee:	4b0f      	ldr	r3, [pc, #60]	; (801962c <vPortEnterCritical+0x58>)
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	3301      	adds	r3, #1
 80195f4:	4a0d      	ldr	r2, [pc, #52]	; (801962c <vPortEnterCritical+0x58>)
 80195f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80195f8:	4b0c      	ldr	r3, [pc, #48]	; (801962c <vPortEnterCritical+0x58>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	2b01      	cmp	r3, #1
 80195fe:	d10f      	bne.n	8019620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019600:	4b0b      	ldr	r3, [pc, #44]	; (8019630 <vPortEnterCritical+0x5c>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	b2db      	uxtb	r3, r3
 8019606:	2b00      	cmp	r3, #0
 8019608:	d00a      	beq.n	8019620 <vPortEnterCritical+0x4c>
	__asm volatile
 801960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801960e:	f383 8811 	msr	BASEPRI, r3
 8019612:	f3bf 8f6f 	isb	sy
 8019616:	f3bf 8f4f 	dsb	sy
 801961a:	603b      	str	r3, [r7, #0]
}
 801961c:	bf00      	nop
 801961e:	e7fe      	b.n	801961e <vPortEnterCritical+0x4a>
	}
}
 8019620:	bf00      	nop
 8019622:	370c      	adds	r7, #12
 8019624:	46bd      	mov	sp, r7
 8019626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962a:	4770      	bx	lr
 801962c:	200000c0 	.word	0x200000c0
 8019630:	e000ed04 	.word	0xe000ed04

08019634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019634:	b480      	push	{r7}
 8019636:	b083      	sub	sp, #12
 8019638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801963a:	4b12      	ldr	r3, [pc, #72]	; (8019684 <vPortExitCritical+0x50>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d10a      	bne.n	8019658 <vPortExitCritical+0x24>
	__asm volatile
 8019642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019646:	f383 8811 	msr	BASEPRI, r3
 801964a:	f3bf 8f6f 	isb	sy
 801964e:	f3bf 8f4f 	dsb	sy
 8019652:	607b      	str	r3, [r7, #4]
}
 8019654:	bf00      	nop
 8019656:	e7fe      	b.n	8019656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019658:	4b0a      	ldr	r3, [pc, #40]	; (8019684 <vPortExitCritical+0x50>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	3b01      	subs	r3, #1
 801965e:	4a09      	ldr	r2, [pc, #36]	; (8019684 <vPortExitCritical+0x50>)
 8019660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019662:	4b08      	ldr	r3, [pc, #32]	; (8019684 <vPortExitCritical+0x50>)
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d105      	bne.n	8019676 <vPortExitCritical+0x42>
 801966a:	2300      	movs	r3, #0
 801966c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	f383 8811 	msr	BASEPRI, r3
}
 8019674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019676:	bf00      	nop
 8019678:	370c      	adds	r7, #12
 801967a:	46bd      	mov	sp, r7
 801967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019680:	4770      	bx	lr
 8019682:	bf00      	nop
 8019684:	200000c0 	.word	0x200000c0
	...

08019690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019690:	f3ef 8009 	mrs	r0, PSP
 8019694:	f3bf 8f6f 	isb	sy
 8019698:	4b15      	ldr	r3, [pc, #84]	; (80196f0 <pxCurrentTCBConst>)
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	f01e 0f10 	tst.w	lr, #16
 80196a0:	bf08      	it	eq
 80196a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80196a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196aa:	6010      	str	r0, [r2, #0]
 80196ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80196b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80196b4:	f380 8811 	msr	BASEPRI, r0
 80196b8:	f3bf 8f4f 	dsb	sy
 80196bc:	f3bf 8f6f 	isb	sy
 80196c0:	f7fe ffc2 	bl	8018648 <vTaskSwitchContext>
 80196c4:	f04f 0000 	mov.w	r0, #0
 80196c8:	f380 8811 	msr	BASEPRI, r0
 80196cc:	bc09      	pop	{r0, r3}
 80196ce:	6819      	ldr	r1, [r3, #0]
 80196d0:	6808      	ldr	r0, [r1, #0]
 80196d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d6:	f01e 0f10 	tst.w	lr, #16
 80196da:	bf08      	it	eq
 80196dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80196e0:	f380 8809 	msr	PSP, r0
 80196e4:	f3bf 8f6f 	isb	sy
 80196e8:	4770      	bx	lr
 80196ea:	bf00      	nop
 80196ec:	f3af 8000 	nop.w

080196f0 <pxCurrentTCBConst>:
 80196f0:	200017c4 	.word	0x200017c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80196f4:	bf00      	nop
 80196f6:	bf00      	nop

080196f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
	__asm volatile
 80196fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019702:	f383 8811 	msr	BASEPRI, r3
 8019706:	f3bf 8f6f 	isb	sy
 801970a:	f3bf 8f4f 	dsb	sy
 801970e:	607b      	str	r3, [r7, #4]
}
 8019710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019712:	f7fe fedf 	bl	80184d4 <xTaskIncrementTick>
 8019716:	4603      	mov	r3, r0
 8019718:	2b00      	cmp	r3, #0
 801971a:	d003      	beq.n	8019724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801971c:	4b06      	ldr	r3, [pc, #24]	; (8019738 <xPortSysTickHandler+0x40>)
 801971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019722:	601a      	str	r2, [r3, #0]
 8019724:	2300      	movs	r3, #0
 8019726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	f383 8811 	msr	BASEPRI, r3
}
 801972e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019730:	bf00      	nop
 8019732:	3708      	adds	r7, #8
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}
 8019738:	e000ed04 	.word	0xe000ed04

0801973c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801973c:	b480      	push	{r7}
 801973e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019740:	4b0b      	ldr	r3, [pc, #44]	; (8019770 <vPortSetupTimerInterrupt+0x34>)
 8019742:	2200      	movs	r2, #0
 8019744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019746:	4b0b      	ldr	r3, [pc, #44]	; (8019774 <vPortSetupTimerInterrupt+0x38>)
 8019748:	2200      	movs	r2, #0
 801974a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801974c:	4b0a      	ldr	r3, [pc, #40]	; (8019778 <vPortSetupTimerInterrupt+0x3c>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	4a0a      	ldr	r2, [pc, #40]	; (801977c <vPortSetupTimerInterrupt+0x40>)
 8019752:	fba2 2303 	umull	r2, r3, r2, r3
 8019756:	099b      	lsrs	r3, r3, #6
 8019758:	4a09      	ldr	r2, [pc, #36]	; (8019780 <vPortSetupTimerInterrupt+0x44>)
 801975a:	3b01      	subs	r3, #1
 801975c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801975e:	4b04      	ldr	r3, [pc, #16]	; (8019770 <vPortSetupTimerInterrupt+0x34>)
 8019760:	2207      	movs	r2, #7
 8019762:	601a      	str	r2, [r3, #0]
}
 8019764:	bf00      	nop
 8019766:	46bd      	mov	sp, r7
 8019768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976c:	4770      	bx	lr
 801976e:	bf00      	nop
 8019770:	e000e010 	.word	0xe000e010
 8019774:	e000e018 	.word	0xe000e018
 8019778:	20000054 	.word	0x20000054
 801977c:	10624dd3 	.word	0x10624dd3
 8019780:	e000e014 	.word	0xe000e014

08019784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019794 <vPortEnableVFP+0x10>
 8019788:	6801      	ldr	r1, [r0, #0]
 801978a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801978e:	6001      	str	r1, [r0, #0]
 8019790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019792:	bf00      	nop
 8019794:	e000ed88 	.word	0xe000ed88

08019798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019798:	b480      	push	{r7}
 801979a:	b085      	sub	sp, #20
 801979c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801979e:	f3ef 8305 	mrs	r3, IPSR
 80197a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	2b0f      	cmp	r3, #15
 80197a8:	d914      	bls.n	80197d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80197aa:	4a17      	ldr	r2, [pc, #92]	; (8019808 <vPortValidateInterruptPriority+0x70>)
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	4413      	add	r3, r2
 80197b0:	781b      	ldrb	r3, [r3, #0]
 80197b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80197b4:	4b15      	ldr	r3, [pc, #84]	; (801980c <vPortValidateInterruptPriority+0x74>)
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	7afa      	ldrb	r2, [r7, #11]
 80197ba:	429a      	cmp	r2, r3
 80197bc:	d20a      	bcs.n	80197d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80197be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197c2:	f383 8811 	msr	BASEPRI, r3
 80197c6:	f3bf 8f6f 	isb	sy
 80197ca:	f3bf 8f4f 	dsb	sy
 80197ce:	607b      	str	r3, [r7, #4]
}
 80197d0:	bf00      	nop
 80197d2:	e7fe      	b.n	80197d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80197d4:	4b0e      	ldr	r3, [pc, #56]	; (8019810 <vPortValidateInterruptPriority+0x78>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80197dc:	4b0d      	ldr	r3, [pc, #52]	; (8019814 <vPortValidateInterruptPriority+0x7c>)
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	429a      	cmp	r2, r3
 80197e2:	d90a      	bls.n	80197fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80197e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197e8:	f383 8811 	msr	BASEPRI, r3
 80197ec:	f3bf 8f6f 	isb	sy
 80197f0:	f3bf 8f4f 	dsb	sy
 80197f4:	603b      	str	r3, [r7, #0]
}
 80197f6:	bf00      	nop
 80197f8:	e7fe      	b.n	80197f8 <vPortValidateInterruptPriority+0x60>
	}
 80197fa:	bf00      	nop
 80197fc:	3714      	adds	r7, #20
 80197fe:	46bd      	mov	sp, r7
 8019800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop
 8019808:	e000e3f0 	.word	0xe000e3f0
 801980c:	20001df0 	.word	0x20001df0
 8019810:	e000ed0c 	.word	0xe000ed0c
 8019814:	20001df4 	.word	0x20001df4

08019818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b08a      	sub	sp, #40	; 0x28
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019820:	2300      	movs	r3, #0
 8019822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019824:	f7fe fd9a 	bl	801835c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019828:	4b5b      	ldr	r3, [pc, #364]	; (8019998 <pvPortMalloc+0x180>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d101      	bne.n	8019834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019830:	f000 f920 	bl	8019a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019834:	4b59      	ldr	r3, [pc, #356]	; (801999c <pvPortMalloc+0x184>)
 8019836:	681a      	ldr	r2, [r3, #0]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	4013      	ands	r3, r2
 801983c:	2b00      	cmp	r3, #0
 801983e:	f040 8093 	bne.w	8019968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d01d      	beq.n	8019884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019848:	2208      	movs	r2, #8
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	4413      	add	r3, r2
 801984e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f003 0307 	and.w	r3, r3, #7
 8019856:	2b00      	cmp	r3, #0
 8019858:	d014      	beq.n	8019884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	f023 0307 	bic.w	r3, r3, #7
 8019860:	3308      	adds	r3, #8
 8019862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f003 0307 	and.w	r3, r3, #7
 801986a:	2b00      	cmp	r3, #0
 801986c:	d00a      	beq.n	8019884 <pvPortMalloc+0x6c>
	__asm volatile
 801986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019872:	f383 8811 	msr	BASEPRI, r3
 8019876:	f3bf 8f6f 	isb	sy
 801987a:	f3bf 8f4f 	dsb	sy
 801987e:	617b      	str	r3, [r7, #20]
}
 8019880:	bf00      	nop
 8019882:	e7fe      	b.n	8019882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d06e      	beq.n	8019968 <pvPortMalloc+0x150>
 801988a:	4b45      	ldr	r3, [pc, #276]	; (80199a0 <pvPortMalloc+0x188>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	429a      	cmp	r2, r3
 8019892:	d869      	bhi.n	8019968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019894:	4b43      	ldr	r3, [pc, #268]	; (80199a4 <pvPortMalloc+0x18c>)
 8019896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019898:	4b42      	ldr	r3, [pc, #264]	; (80199a4 <pvPortMalloc+0x18c>)
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801989e:	e004      	b.n	80198aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80198a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80198a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80198aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	687a      	ldr	r2, [r7, #4]
 80198b0:	429a      	cmp	r2, r3
 80198b2:	d903      	bls.n	80198bc <pvPortMalloc+0xa4>
 80198b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d1f1      	bne.n	80198a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80198bc:	4b36      	ldr	r3, [pc, #216]	; (8019998 <pvPortMalloc+0x180>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198c2:	429a      	cmp	r2, r3
 80198c4:	d050      	beq.n	8019968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80198c6:	6a3b      	ldr	r3, [r7, #32]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2208      	movs	r2, #8
 80198cc:	4413      	add	r3, r2
 80198ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80198d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d2:	681a      	ldr	r2, [r3, #0]
 80198d4:	6a3b      	ldr	r3, [r7, #32]
 80198d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80198d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198da:	685a      	ldr	r2, [r3, #4]
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	1ad2      	subs	r2, r2, r3
 80198e0:	2308      	movs	r3, #8
 80198e2:	005b      	lsls	r3, r3, #1
 80198e4:	429a      	cmp	r2, r3
 80198e6:	d91f      	bls.n	8019928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80198e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	4413      	add	r3, r2
 80198ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80198f0:	69bb      	ldr	r3, [r7, #24]
 80198f2:	f003 0307 	and.w	r3, r3, #7
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d00a      	beq.n	8019910 <pvPortMalloc+0xf8>
	__asm volatile
 80198fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198fe:	f383 8811 	msr	BASEPRI, r3
 8019902:	f3bf 8f6f 	isb	sy
 8019906:	f3bf 8f4f 	dsb	sy
 801990a:	613b      	str	r3, [r7, #16]
}
 801990c:	bf00      	nop
 801990e:	e7fe      	b.n	801990e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019912:	685a      	ldr	r2, [r3, #4]
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	1ad2      	subs	r2, r2, r3
 8019918:	69bb      	ldr	r3, [r7, #24]
 801991a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991e:	687a      	ldr	r2, [r7, #4]
 8019920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019922:	69b8      	ldr	r0, [r7, #24]
 8019924:	f000 f908 	bl	8019b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019928:	4b1d      	ldr	r3, [pc, #116]	; (80199a0 <pvPortMalloc+0x188>)
 801992a:	681a      	ldr	r2, [r3, #0]
 801992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	4a1b      	ldr	r2, [pc, #108]	; (80199a0 <pvPortMalloc+0x188>)
 8019934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019936:	4b1a      	ldr	r3, [pc, #104]	; (80199a0 <pvPortMalloc+0x188>)
 8019938:	681a      	ldr	r2, [r3, #0]
 801993a:	4b1b      	ldr	r3, [pc, #108]	; (80199a8 <pvPortMalloc+0x190>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	429a      	cmp	r2, r3
 8019940:	d203      	bcs.n	801994a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019942:	4b17      	ldr	r3, [pc, #92]	; (80199a0 <pvPortMalloc+0x188>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4a18      	ldr	r2, [pc, #96]	; (80199a8 <pvPortMalloc+0x190>)
 8019948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801994c:	685a      	ldr	r2, [r3, #4]
 801994e:	4b13      	ldr	r3, [pc, #76]	; (801999c <pvPortMalloc+0x184>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	431a      	orrs	r2, r3
 8019954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	2200      	movs	r2, #0
 801995c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801995e:	4b13      	ldr	r3, [pc, #76]	; (80199ac <pvPortMalloc+0x194>)
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	3301      	adds	r3, #1
 8019964:	4a11      	ldr	r2, [pc, #68]	; (80199ac <pvPortMalloc+0x194>)
 8019966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019968:	f7fe fd06 	bl	8018378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801996c:	69fb      	ldr	r3, [r7, #28]
 801996e:	f003 0307 	and.w	r3, r3, #7
 8019972:	2b00      	cmp	r3, #0
 8019974:	d00a      	beq.n	801998c <pvPortMalloc+0x174>
	__asm volatile
 8019976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801997a:	f383 8811 	msr	BASEPRI, r3
 801997e:	f3bf 8f6f 	isb	sy
 8019982:	f3bf 8f4f 	dsb	sy
 8019986:	60fb      	str	r3, [r7, #12]
}
 8019988:	bf00      	nop
 801998a:	e7fe      	b.n	801998a <pvPortMalloc+0x172>
	return pvReturn;
 801998c:	69fb      	ldr	r3, [r7, #28]
}
 801998e:	4618      	mov	r0, r3
 8019990:	3728      	adds	r7, #40	; 0x28
 8019992:	46bd      	mov	sp, r7
 8019994:	bd80      	pop	{r7, pc}
 8019996:	bf00      	nop
 8019998:	20005a00 	.word	0x20005a00
 801999c:	20005a14 	.word	0x20005a14
 80199a0:	20005a04 	.word	0x20005a04
 80199a4:	200059f8 	.word	0x200059f8
 80199a8:	20005a08 	.word	0x20005a08
 80199ac:	20005a0c 	.word	0x20005a0c

080199b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b086      	sub	sp, #24
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d04d      	beq.n	8019a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80199c2:	2308      	movs	r3, #8
 80199c4:	425b      	negs	r3, r3
 80199c6:	697a      	ldr	r2, [r7, #20]
 80199c8:	4413      	add	r3, r2
 80199ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80199cc:	697b      	ldr	r3, [r7, #20]
 80199ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	685a      	ldr	r2, [r3, #4]
 80199d4:	4b24      	ldr	r3, [pc, #144]	; (8019a68 <vPortFree+0xb8>)
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	4013      	ands	r3, r2
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d10a      	bne.n	80199f4 <vPortFree+0x44>
	__asm volatile
 80199de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e2:	f383 8811 	msr	BASEPRI, r3
 80199e6:	f3bf 8f6f 	isb	sy
 80199ea:	f3bf 8f4f 	dsb	sy
 80199ee:	60fb      	str	r3, [r7, #12]
}
 80199f0:	bf00      	nop
 80199f2:	e7fe      	b.n	80199f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d00a      	beq.n	8019a12 <vPortFree+0x62>
	__asm volatile
 80199fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a00:	f383 8811 	msr	BASEPRI, r3
 8019a04:	f3bf 8f6f 	isb	sy
 8019a08:	f3bf 8f4f 	dsb	sy
 8019a0c:	60bb      	str	r3, [r7, #8]
}
 8019a0e:	bf00      	nop
 8019a10:	e7fe      	b.n	8019a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	685a      	ldr	r2, [r3, #4]
 8019a16:	4b14      	ldr	r3, [pc, #80]	; (8019a68 <vPortFree+0xb8>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4013      	ands	r3, r2
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d01e      	beq.n	8019a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019a20:	693b      	ldr	r3, [r7, #16]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d11a      	bne.n	8019a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019a28:	693b      	ldr	r3, [r7, #16]
 8019a2a:	685a      	ldr	r2, [r3, #4]
 8019a2c:	4b0e      	ldr	r3, [pc, #56]	; (8019a68 <vPortFree+0xb8>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	43db      	mvns	r3, r3
 8019a32:	401a      	ands	r2, r3
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019a38:	f7fe fc90 	bl	801835c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	685a      	ldr	r2, [r3, #4]
 8019a40:	4b0a      	ldr	r3, [pc, #40]	; (8019a6c <vPortFree+0xbc>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	4413      	add	r3, r2
 8019a46:	4a09      	ldr	r2, [pc, #36]	; (8019a6c <vPortFree+0xbc>)
 8019a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019a4a:	6938      	ldr	r0, [r7, #16]
 8019a4c:	f000 f874 	bl	8019b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019a50:	4b07      	ldr	r3, [pc, #28]	; (8019a70 <vPortFree+0xc0>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	3301      	adds	r3, #1
 8019a56:	4a06      	ldr	r2, [pc, #24]	; (8019a70 <vPortFree+0xc0>)
 8019a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019a5a:	f7fe fc8d 	bl	8018378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019a5e:	bf00      	nop
 8019a60:	3718      	adds	r7, #24
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bd80      	pop	{r7, pc}
 8019a66:	bf00      	nop
 8019a68:	20005a14 	.word	0x20005a14
 8019a6c:	20005a04 	.word	0x20005a04
 8019a70:	20005a10 	.word	0x20005a10

08019a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019a74:	b480      	push	{r7}
 8019a76:	b085      	sub	sp, #20
 8019a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019a80:	4b27      	ldr	r3, [pc, #156]	; (8019b20 <prvHeapInit+0xac>)
 8019a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	f003 0307 	and.w	r3, r3, #7
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00c      	beq.n	8019aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	3307      	adds	r3, #7
 8019a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	f023 0307 	bic.w	r3, r3, #7
 8019a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019a9c:	68ba      	ldr	r2, [r7, #8]
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	1ad3      	subs	r3, r2, r3
 8019aa2:	4a1f      	ldr	r2, [pc, #124]	; (8019b20 <prvHeapInit+0xac>)
 8019aa4:	4413      	add	r3, r2
 8019aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019aac:	4a1d      	ldr	r2, [pc, #116]	; (8019b24 <prvHeapInit+0xb0>)
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019ab2:	4b1c      	ldr	r3, [pc, #112]	; (8019b24 <prvHeapInit+0xb0>)
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	68ba      	ldr	r2, [r7, #8]
 8019abc:	4413      	add	r3, r2
 8019abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019ac0:	2208      	movs	r2, #8
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	1a9b      	subs	r3, r3, r2
 8019ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	f023 0307 	bic.w	r3, r3, #7
 8019ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	4a15      	ldr	r2, [pc, #84]	; (8019b28 <prvHeapInit+0xb4>)
 8019ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019ad6:	4b14      	ldr	r3, [pc, #80]	; (8019b28 <prvHeapInit+0xb4>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2200      	movs	r2, #0
 8019adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019ade:	4b12      	ldr	r3, [pc, #72]	; (8019b28 <prvHeapInit+0xb4>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	68fa      	ldr	r2, [r7, #12]
 8019aee:	1ad2      	subs	r2, r2, r3
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019af4:	4b0c      	ldr	r3, [pc, #48]	; (8019b28 <prvHeapInit+0xb4>)
 8019af6:	681a      	ldr	r2, [r3, #0]
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	685b      	ldr	r3, [r3, #4]
 8019b00:	4a0a      	ldr	r2, [pc, #40]	; (8019b2c <prvHeapInit+0xb8>)
 8019b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	4a09      	ldr	r2, [pc, #36]	; (8019b30 <prvHeapInit+0xbc>)
 8019b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019b0c:	4b09      	ldr	r3, [pc, #36]	; (8019b34 <prvHeapInit+0xc0>)
 8019b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019b12:	601a      	str	r2, [r3, #0]
}
 8019b14:	bf00      	nop
 8019b16:	3714      	adds	r7, #20
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1e:	4770      	bx	lr
 8019b20:	20001df8 	.word	0x20001df8
 8019b24:	200059f8 	.word	0x200059f8
 8019b28:	20005a00 	.word	0x20005a00
 8019b2c:	20005a08 	.word	0x20005a08
 8019b30:	20005a04 	.word	0x20005a04
 8019b34:	20005a14 	.word	0x20005a14

08019b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019b38:	b480      	push	{r7}
 8019b3a:	b085      	sub	sp, #20
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019b40:	4b28      	ldr	r3, [pc, #160]	; (8019be4 <prvInsertBlockIntoFreeList+0xac>)
 8019b42:	60fb      	str	r3, [r7, #12]
 8019b44:	e002      	b.n	8019b4c <prvInsertBlockIntoFreeList+0x14>
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	60fb      	str	r3, [r7, #12]
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d8f7      	bhi.n	8019b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	68ba      	ldr	r2, [r7, #8]
 8019b60:	4413      	add	r3, r2
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d108      	bne.n	8019b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	685a      	ldr	r2, [r3, #4]
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	441a      	add	r2, r3
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	68ba      	ldr	r2, [r7, #8]
 8019b84:	441a      	add	r2, r3
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	429a      	cmp	r2, r3
 8019b8c:	d118      	bne.n	8019bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	681a      	ldr	r2, [r3, #0]
 8019b92:	4b15      	ldr	r3, [pc, #84]	; (8019be8 <prvInsertBlockIntoFreeList+0xb0>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d00d      	beq.n	8019bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	685a      	ldr	r2, [r3, #4]
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	441a      	add	r2, r3
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	681a      	ldr	r2, [r3, #0]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	601a      	str	r2, [r3, #0]
 8019bb4:	e008      	b.n	8019bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019bb6:	4b0c      	ldr	r3, [pc, #48]	; (8019be8 <prvInsertBlockIntoFreeList+0xb0>)
 8019bb8:	681a      	ldr	r2, [r3, #0]
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	601a      	str	r2, [r3, #0]
 8019bbe:	e003      	b.n	8019bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	681a      	ldr	r2, [r3, #0]
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019bc8:	68fa      	ldr	r2, [r7, #12]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	429a      	cmp	r2, r3
 8019bce:	d002      	beq.n	8019bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	687a      	ldr	r2, [r7, #4]
 8019bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019bd6:	bf00      	nop
 8019bd8:	3714      	adds	r7, #20
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be0:	4770      	bx	lr
 8019be2:	bf00      	nop
 8019be4:	200059f8 	.word	0x200059f8
 8019be8:	20005a00 	.word	0x20005a00

08019bec <__errno>:
 8019bec:	4b01      	ldr	r3, [pc, #4]	; (8019bf4 <__errno+0x8>)
 8019bee:	6818      	ldr	r0, [r3, #0]
 8019bf0:	4770      	bx	lr
 8019bf2:	bf00      	nop
 8019bf4:	200000c4 	.word	0x200000c4

08019bf8 <__libc_init_array>:
 8019bf8:	b570      	push	{r4, r5, r6, lr}
 8019bfa:	4d0d      	ldr	r5, [pc, #52]	; (8019c30 <__libc_init_array+0x38>)
 8019bfc:	4c0d      	ldr	r4, [pc, #52]	; (8019c34 <__libc_init_array+0x3c>)
 8019bfe:	1b64      	subs	r4, r4, r5
 8019c00:	10a4      	asrs	r4, r4, #2
 8019c02:	2600      	movs	r6, #0
 8019c04:	42a6      	cmp	r6, r4
 8019c06:	d109      	bne.n	8019c1c <__libc_init_array+0x24>
 8019c08:	4d0b      	ldr	r5, [pc, #44]	; (8019c38 <__libc_init_array+0x40>)
 8019c0a:	4c0c      	ldr	r4, [pc, #48]	; (8019c3c <__libc_init_array+0x44>)
 8019c0c:	f005 ff40 	bl	801fa90 <_init>
 8019c10:	1b64      	subs	r4, r4, r5
 8019c12:	10a4      	asrs	r4, r4, #2
 8019c14:	2600      	movs	r6, #0
 8019c16:	42a6      	cmp	r6, r4
 8019c18:	d105      	bne.n	8019c26 <__libc_init_array+0x2e>
 8019c1a:	bd70      	pop	{r4, r5, r6, pc}
 8019c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c20:	4798      	blx	r3
 8019c22:	3601      	adds	r6, #1
 8019c24:	e7ee      	b.n	8019c04 <__libc_init_array+0xc>
 8019c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c2a:	4798      	blx	r3
 8019c2c:	3601      	adds	r6, #1
 8019c2e:	e7f2      	b.n	8019c16 <__libc_init_array+0x1e>
 8019c30:	08020bd4 	.word	0x08020bd4
 8019c34:	08020bd4 	.word	0x08020bd4
 8019c38:	08020bd4 	.word	0x08020bd4
 8019c3c:	08020bd8 	.word	0x08020bd8

08019c40 <malloc>:
 8019c40:	4b02      	ldr	r3, [pc, #8]	; (8019c4c <malloc+0xc>)
 8019c42:	4601      	mov	r1, r0
 8019c44:	6818      	ldr	r0, [r3, #0]
 8019c46:	f000 b869 	b.w	8019d1c <_malloc_r>
 8019c4a:	bf00      	nop
 8019c4c:	200000c4 	.word	0x200000c4

08019c50 <memcpy>:
 8019c50:	440a      	add	r2, r1
 8019c52:	4291      	cmp	r1, r2
 8019c54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019c58:	d100      	bne.n	8019c5c <memcpy+0xc>
 8019c5a:	4770      	bx	lr
 8019c5c:	b510      	push	{r4, lr}
 8019c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c66:	4291      	cmp	r1, r2
 8019c68:	d1f9      	bne.n	8019c5e <memcpy+0xe>
 8019c6a:	bd10      	pop	{r4, pc}

08019c6c <memset>:
 8019c6c:	4402      	add	r2, r0
 8019c6e:	4603      	mov	r3, r0
 8019c70:	4293      	cmp	r3, r2
 8019c72:	d100      	bne.n	8019c76 <memset+0xa>
 8019c74:	4770      	bx	lr
 8019c76:	f803 1b01 	strb.w	r1, [r3], #1
 8019c7a:	e7f9      	b.n	8019c70 <memset+0x4>

08019c7c <_free_r>:
 8019c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c7e:	2900      	cmp	r1, #0
 8019c80:	d048      	beq.n	8019d14 <_free_r+0x98>
 8019c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c86:	9001      	str	r0, [sp, #4]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8019c8e:	bfb8      	it	lt
 8019c90:	18e4      	addlt	r4, r4, r3
 8019c92:	f003 f8fd 	bl	801ce90 <__malloc_lock>
 8019c96:	4a20      	ldr	r2, [pc, #128]	; (8019d18 <_free_r+0x9c>)
 8019c98:	9801      	ldr	r0, [sp, #4]
 8019c9a:	6813      	ldr	r3, [r2, #0]
 8019c9c:	4615      	mov	r5, r2
 8019c9e:	b933      	cbnz	r3, 8019cae <_free_r+0x32>
 8019ca0:	6063      	str	r3, [r4, #4]
 8019ca2:	6014      	str	r4, [r2, #0]
 8019ca4:	b003      	add	sp, #12
 8019ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019caa:	f003 b8f7 	b.w	801ce9c <__malloc_unlock>
 8019cae:	42a3      	cmp	r3, r4
 8019cb0:	d90b      	bls.n	8019cca <_free_r+0x4e>
 8019cb2:	6821      	ldr	r1, [r4, #0]
 8019cb4:	1862      	adds	r2, r4, r1
 8019cb6:	4293      	cmp	r3, r2
 8019cb8:	bf04      	itt	eq
 8019cba:	681a      	ldreq	r2, [r3, #0]
 8019cbc:	685b      	ldreq	r3, [r3, #4]
 8019cbe:	6063      	str	r3, [r4, #4]
 8019cc0:	bf04      	itt	eq
 8019cc2:	1852      	addeq	r2, r2, r1
 8019cc4:	6022      	streq	r2, [r4, #0]
 8019cc6:	602c      	str	r4, [r5, #0]
 8019cc8:	e7ec      	b.n	8019ca4 <_free_r+0x28>
 8019cca:	461a      	mov	r2, r3
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	b10b      	cbz	r3, 8019cd4 <_free_r+0x58>
 8019cd0:	42a3      	cmp	r3, r4
 8019cd2:	d9fa      	bls.n	8019cca <_free_r+0x4e>
 8019cd4:	6811      	ldr	r1, [r2, #0]
 8019cd6:	1855      	adds	r5, r2, r1
 8019cd8:	42a5      	cmp	r5, r4
 8019cda:	d10b      	bne.n	8019cf4 <_free_r+0x78>
 8019cdc:	6824      	ldr	r4, [r4, #0]
 8019cde:	4421      	add	r1, r4
 8019ce0:	1854      	adds	r4, r2, r1
 8019ce2:	42a3      	cmp	r3, r4
 8019ce4:	6011      	str	r1, [r2, #0]
 8019ce6:	d1dd      	bne.n	8019ca4 <_free_r+0x28>
 8019ce8:	681c      	ldr	r4, [r3, #0]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	6053      	str	r3, [r2, #4]
 8019cee:	4421      	add	r1, r4
 8019cf0:	6011      	str	r1, [r2, #0]
 8019cf2:	e7d7      	b.n	8019ca4 <_free_r+0x28>
 8019cf4:	d902      	bls.n	8019cfc <_free_r+0x80>
 8019cf6:	230c      	movs	r3, #12
 8019cf8:	6003      	str	r3, [r0, #0]
 8019cfa:	e7d3      	b.n	8019ca4 <_free_r+0x28>
 8019cfc:	6825      	ldr	r5, [r4, #0]
 8019cfe:	1961      	adds	r1, r4, r5
 8019d00:	428b      	cmp	r3, r1
 8019d02:	bf04      	itt	eq
 8019d04:	6819      	ldreq	r1, [r3, #0]
 8019d06:	685b      	ldreq	r3, [r3, #4]
 8019d08:	6063      	str	r3, [r4, #4]
 8019d0a:	bf04      	itt	eq
 8019d0c:	1949      	addeq	r1, r1, r5
 8019d0e:	6021      	streq	r1, [r4, #0]
 8019d10:	6054      	str	r4, [r2, #4]
 8019d12:	e7c7      	b.n	8019ca4 <_free_r+0x28>
 8019d14:	b003      	add	sp, #12
 8019d16:	bd30      	pop	{r4, r5, pc}
 8019d18:	20005a18 	.word	0x20005a18

08019d1c <_malloc_r>:
 8019d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d1e:	1ccd      	adds	r5, r1, #3
 8019d20:	f025 0503 	bic.w	r5, r5, #3
 8019d24:	3508      	adds	r5, #8
 8019d26:	2d0c      	cmp	r5, #12
 8019d28:	bf38      	it	cc
 8019d2a:	250c      	movcc	r5, #12
 8019d2c:	2d00      	cmp	r5, #0
 8019d2e:	4606      	mov	r6, r0
 8019d30:	db01      	blt.n	8019d36 <_malloc_r+0x1a>
 8019d32:	42a9      	cmp	r1, r5
 8019d34:	d903      	bls.n	8019d3e <_malloc_r+0x22>
 8019d36:	230c      	movs	r3, #12
 8019d38:	6033      	str	r3, [r6, #0]
 8019d3a:	2000      	movs	r0, #0
 8019d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d3e:	f003 f8a7 	bl	801ce90 <__malloc_lock>
 8019d42:	4921      	ldr	r1, [pc, #132]	; (8019dc8 <_malloc_r+0xac>)
 8019d44:	680a      	ldr	r2, [r1, #0]
 8019d46:	4614      	mov	r4, r2
 8019d48:	b99c      	cbnz	r4, 8019d72 <_malloc_r+0x56>
 8019d4a:	4f20      	ldr	r7, [pc, #128]	; (8019dcc <_malloc_r+0xb0>)
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	b923      	cbnz	r3, 8019d5a <_malloc_r+0x3e>
 8019d50:	4621      	mov	r1, r4
 8019d52:	4630      	mov	r0, r6
 8019d54:	f000 febe 	bl	801aad4 <_sbrk_r>
 8019d58:	6038      	str	r0, [r7, #0]
 8019d5a:	4629      	mov	r1, r5
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	f000 feb9 	bl	801aad4 <_sbrk_r>
 8019d62:	1c43      	adds	r3, r0, #1
 8019d64:	d123      	bne.n	8019dae <_malloc_r+0x92>
 8019d66:	230c      	movs	r3, #12
 8019d68:	6033      	str	r3, [r6, #0]
 8019d6a:	4630      	mov	r0, r6
 8019d6c:	f003 f896 	bl	801ce9c <__malloc_unlock>
 8019d70:	e7e3      	b.n	8019d3a <_malloc_r+0x1e>
 8019d72:	6823      	ldr	r3, [r4, #0]
 8019d74:	1b5b      	subs	r3, r3, r5
 8019d76:	d417      	bmi.n	8019da8 <_malloc_r+0x8c>
 8019d78:	2b0b      	cmp	r3, #11
 8019d7a:	d903      	bls.n	8019d84 <_malloc_r+0x68>
 8019d7c:	6023      	str	r3, [r4, #0]
 8019d7e:	441c      	add	r4, r3
 8019d80:	6025      	str	r5, [r4, #0]
 8019d82:	e004      	b.n	8019d8e <_malloc_r+0x72>
 8019d84:	6863      	ldr	r3, [r4, #4]
 8019d86:	42a2      	cmp	r2, r4
 8019d88:	bf0c      	ite	eq
 8019d8a:	600b      	streq	r3, [r1, #0]
 8019d8c:	6053      	strne	r3, [r2, #4]
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f003 f884 	bl	801ce9c <__malloc_unlock>
 8019d94:	f104 000b 	add.w	r0, r4, #11
 8019d98:	1d23      	adds	r3, r4, #4
 8019d9a:	f020 0007 	bic.w	r0, r0, #7
 8019d9e:	1ac2      	subs	r2, r0, r3
 8019da0:	d0cc      	beq.n	8019d3c <_malloc_r+0x20>
 8019da2:	1a1b      	subs	r3, r3, r0
 8019da4:	50a3      	str	r3, [r4, r2]
 8019da6:	e7c9      	b.n	8019d3c <_malloc_r+0x20>
 8019da8:	4622      	mov	r2, r4
 8019daa:	6864      	ldr	r4, [r4, #4]
 8019dac:	e7cc      	b.n	8019d48 <_malloc_r+0x2c>
 8019dae:	1cc4      	adds	r4, r0, #3
 8019db0:	f024 0403 	bic.w	r4, r4, #3
 8019db4:	42a0      	cmp	r0, r4
 8019db6:	d0e3      	beq.n	8019d80 <_malloc_r+0x64>
 8019db8:	1a21      	subs	r1, r4, r0
 8019dba:	4630      	mov	r0, r6
 8019dbc:	f000 fe8a 	bl	801aad4 <_sbrk_r>
 8019dc0:	3001      	adds	r0, #1
 8019dc2:	d1dd      	bne.n	8019d80 <_malloc_r+0x64>
 8019dc4:	e7cf      	b.n	8019d66 <_malloc_r+0x4a>
 8019dc6:	bf00      	nop
 8019dc8:	20005a18 	.word	0x20005a18
 8019dcc:	20005a1c 	.word	0x20005a1c

08019dd0 <__cvt>:
 8019dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd4:	ec55 4b10 	vmov	r4, r5, d0
 8019dd8:	2d00      	cmp	r5, #0
 8019dda:	460e      	mov	r6, r1
 8019ddc:	4619      	mov	r1, r3
 8019dde:	462b      	mov	r3, r5
 8019de0:	bfbb      	ittet	lt
 8019de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019de6:	461d      	movlt	r5, r3
 8019de8:	2300      	movge	r3, #0
 8019dea:	232d      	movlt	r3, #45	; 0x2d
 8019dec:	700b      	strb	r3, [r1, #0]
 8019dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019df4:	4691      	mov	r9, r2
 8019df6:	f023 0820 	bic.w	r8, r3, #32
 8019dfa:	bfbc      	itt	lt
 8019dfc:	4622      	movlt	r2, r4
 8019dfe:	4614      	movlt	r4, r2
 8019e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e04:	d005      	beq.n	8019e12 <__cvt+0x42>
 8019e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019e0a:	d100      	bne.n	8019e0e <__cvt+0x3e>
 8019e0c:	3601      	adds	r6, #1
 8019e0e:	2102      	movs	r1, #2
 8019e10:	e000      	b.n	8019e14 <__cvt+0x44>
 8019e12:	2103      	movs	r1, #3
 8019e14:	ab03      	add	r3, sp, #12
 8019e16:	9301      	str	r3, [sp, #4]
 8019e18:	ab02      	add	r3, sp, #8
 8019e1a:	9300      	str	r3, [sp, #0]
 8019e1c:	ec45 4b10 	vmov	d0, r4, r5
 8019e20:	4653      	mov	r3, sl
 8019e22:	4632      	mov	r2, r6
 8019e24:	f001 feb0 	bl	801bb88 <_dtoa_r>
 8019e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019e2c:	4607      	mov	r7, r0
 8019e2e:	d102      	bne.n	8019e36 <__cvt+0x66>
 8019e30:	f019 0f01 	tst.w	r9, #1
 8019e34:	d022      	beq.n	8019e7c <__cvt+0xac>
 8019e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e3a:	eb07 0906 	add.w	r9, r7, r6
 8019e3e:	d110      	bne.n	8019e62 <__cvt+0x92>
 8019e40:	783b      	ldrb	r3, [r7, #0]
 8019e42:	2b30      	cmp	r3, #48	; 0x30
 8019e44:	d10a      	bne.n	8019e5c <__cvt+0x8c>
 8019e46:	2200      	movs	r2, #0
 8019e48:	2300      	movs	r3, #0
 8019e4a:	4620      	mov	r0, r4
 8019e4c:	4629      	mov	r1, r5
 8019e4e:	f7e6 fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e52:	b918      	cbnz	r0, 8019e5c <__cvt+0x8c>
 8019e54:	f1c6 0601 	rsb	r6, r6, #1
 8019e58:	f8ca 6000 	str.w	r6, [sl]
 8019e5c:	f8da 3000 	ldr.w	r3, [sl]
 8019e60:	4499      	add	r9, r3
 8019e62:	2200      	movs	r2, #0
 8019e64:	2300      	movs	r3, #0
 8019e66:	4620      	mov	r0, r4
 8019e68:	4629      	mov	r1, r5
 8019e6a:	f7e6 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e6e:	b108      	cbz	r0, 8019e74 <__cvt+0xa4>
 8019e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8019e74:	2230      	movs	r2, #48	; 0x30
 8019e76:	9b03      	ldr	r3, [sp, #12]
 8019e78:	454b      	cmp	r3, r9
 8019e7a:	d307      	bcc.n	8019e8c <__cvt+0xbc>
 8019e7c:	9b03      	ldr	r3, [sp, #12]
 8019e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e80:	1bdb      	subs	r3, r3, r7
 8019e82:	4638      	mov	r0, r7
 8019e84:	6013      	str	r3, [r2, #0]
 8019e86:	b004      	add	sp, #16
 8019e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e8c:	1c59      	adds	r1, r3, #1
 8019e8e:	9103      	str	r1, [sp, #12]
 8019e90:	701a      	strb	r2, [r3, #0]
 8019e92:	e7f0      	b.n	8019e76 <__cvt+0xa6>

08019e94 <__exponent>:
 8019e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e96:	4603      	mov	r3, r0
 8019e98:	2900      	cmp	r1, #0
 8019e9a:	bfb8      	it	lt
 8019e9c:	4249      	neglt	r1, r1
 8019e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8019ea2:	bfb4      	ite	lt
 8019ea4:	222d      	movlt	r2, #45	; 0x2d
 8019ea6:	222b      	movge	r2, #43	; 0x2b
 8019ea8:	2909      	cmp	r1, #9
 8019eaa:	7042      	strb	r2, [r0, #1]
 8019eac:	dd2a      	ble.n	8019f04 <__exponent+0x70>
 8019eae:	f10d 0407 	add.w	r4, sp, #7
 8019eb2:	46a4      	mov	ip, r4
 8019eb4:	270a      	movs	r7, #10
 8019eb6:	46a6      	mov	lr, r4
 8019eb8:	460a      	mov	r2, r1
 8019eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8019ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8019ec2:	3530      	adds	r5, #48	; 0x30
 8019ec4:	2a63      	cmp	r2, #99	; 0x63
 8019ec6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019eca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019ece:	4631      	mov	r1, r6
 8019ed0:	dcf1      	bgt.n	8019eb6 <__exponent+0x22>
 8019ed2:	3130      	adds	r1, #48	; 0x30
 8019ed4:	f1ae 0502 	sub.w	r5, lr, #2
 8019ed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019edc:	1c44      	adds	r4, r0, #1
 8019ede:	4629      	mov	r1, r5
 8019ee0:	4561      	cmp	r1, ip
 8019ee2:	d30a      	bcc.n	8019efa <__exponent+0x66>
 8019ee4:	f10d 0209 	add.w	r2, sp, #9
 8019ee8:	eba2 020e 	sub.w	r2, r2, lr
 8019eec:	4565      	cmp	r5, ip
 8019eee:	bf88      	it	hi
 8019ef0:	2200      	movhi	r2, #0
 8019ef2:	4413      	add	r3, r2
 8019ef4:	1a18      	subs	r0, r3, r0
 8019ef6:	b003      	add	sp, #12
 8019ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019efe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019f02:	e7ed      	b.n	8019ee0 <__exponent+0x4c>
 8019f04:	2330      	movs	r3, #48	; 0x30
 8019f06:	3130      	adds	r1, #48	; 0x30
 8019f08:	7083      	strb	r3, [r0, #2]
 8019f0a:	70c1      	strb	r1, [r0, #3]
 8019f0c:	1d03      	adds	r3, r0, #4
 8019f0e:	e7f1      	b.n	8019ef4 <__exponent+0x60>

08019f10 <_printf_float>:
 8019f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f14:	ed2d 8b02 	vpush	{d8}
 8019f18:	b08d      	sub	sp, #52	; 0x34
 8019f1a:	460c      	mov	r4, r1
 8019f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019f20:	4616      	mov	r6, r2
 8019f22:	461f      	mov	r7, r3
 8019f24:	4605      	mov	r5, r0
 8019f26:	f002 ff8b 	bl	801ce40 <_localeconv_r>
 8019f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8019f2e:	4650      	mov	r0, sl
 8019f30:	f7e6 f94e 	bl	80001d0 <strlen>
 8019f34:	2300      	movs	r3, #0
 8019f36:	930a      	str	r3, [sp, #40]	; 0x28
 8019f38:	6823      	ldr	r3, [r4, #0]
 8019f3a:	9305      	str	r3, [sp, #20]
 8019f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8019f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019f44:	3307      	adds	r3, #7
 8019f46:	f023 0307 	bic.w	r3, r3, #7
 8019f4a:	f103 0208 	add.w	r2, r3, #8
 8019f4e:	f8c8 2000 	str.w	r2, [r8]
 8019f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019f5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019f62:	9307      	str	r3, [sp, #28]
 8019f64:	f8cd 8018 	str.w	r8, [sp, #24]
 8019f68:	ee08 0a10 	vmov	s16, r0
 8019f6c:	4b9f      	ldr	r3, [pc, #636]	; (801a1ec <_printf_float+0x2dc>)
 8019f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f76:	f7e6 fdd9 	bl	8000b2c <__aeabi_dcmpun>
 8019f7a:	bb88      	cbnz	r0, 8019fe0 <_printf_float+0xd0>
 8019f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f80:	4b9a      	ldr	r3, [pc, #616]	; (801a1ec <_printf_float+0x2dc>)
 8019f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f86:	f7e6 fdb3 	bl	8000af0 <__aeabi_dcmple>
 8019f8a:	bb48      	cbnz	r0, 8019fe0 <_printf_float+0xd0>
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	2300      	movs	r3, #0
 8019f90:	4640      	mov	r0, r8
 8019f92:	4649      	mov	r1, r9
 8019f94:	f7e6 fda2 	bl	8000adc <__aeabi_dcmplt>
 8019f98:	b110      	cbz	r0, 8019fa0 <_printf_float+0x90>
 8019f9a:	232d      	movs	r3, #45	; 0x2d
 8019f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fa0:	4b93      	ldr	r3, [pc, #588]	; (801a1f0 <_printf_float+0x2e0>)
 8019fa2:	4894      	ldr	r0, [pc, #592]	; (801a1f4 <_printf_float+0x2e4>)
 8019fa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019fa8:	bf94      	ite	ls
 8019faa:	4698      	movls	r8, r3
 8019fac:	4680      	movhi	r8, r0
 8019fae:	2303      	movs	r3, #3
 8019fb0:	6123      	str	r3, [r4, #16]
 8019fb2:	9b05      	ldr	r3, [sp, #20]
 8019fb4:	f023 0204 	bic.w	r2, r3, #4
 8019fb8:	6022      	str	r2, [r4, #0]
 8019fba:	f04f 0900 	mov.w	r9, #0
 8019fbe:	9700      	str	r7, [sp, #0]
 8019fc0:	4633      	mov	r3, r6
 8019fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8019fc4:	4621      	mov	r1, r4
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	f000 f9d8 	bl	801a37c <_printf_common>
 8019fcc:	3001      	adds	r0, #1
 8019fce:	f040 8090 	bne.w	801a0f2 <_printf_float+0x1e2>
 8019fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fd6:	b00d      	add	sp, #52	; 0x34
 8019fd8:	ecbd 8b02 	vpop	{d8}
 8019fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fe0:	4642      	mov	r2, r8
 8019fe2:	464b      	mov	r3, r9
 8019fe4:	4640      	mov	r0, r8
 8019fe6:	4649      	mov	r1, r9
 8019fe8:	f7e6 fda0 	bl	8000b2c <__aeabi_dcmpun>
 8019fec:	b140      	cbz	r0, 801a000 <_printf_float+0xf0>
 8019fee:	464b      	mov	r3, r9
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	bfbc      	itt	lt
 8019ff4:	232d      	movlt	r3, #45	; 0x2d
 8019ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ffa:	487f      	ldr	r0, [pc, #508]	; (801a1f8 <_printf_float+0x2e8>)
 8019ffc:	4b7f      	ldr	r3, [pc, #508]	; (801a1fc <_printf_float+0x2ec>)
 8019ffe:	e7d1      	b.n	8019fa4 <_printf_float+0x94>
 801a000:	6863      	ldr	r3, [r4, #4]
 801a002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a006:	9206      	str	r2, [sp, #24]
 801a008:	1c5a      	adds	r2, r3, #1
 801a00a:	d13f      	bne.n	801a08c <_printf_float+0x17c>
 801a00c:	2306      	movs	r3, #6
 801a00e:	6063      	str	r3, [r4, #4]
 801a010:	9b05      	ldr	r3, [sp, #20]
 801a012:	6861      	ldr	r1, [r4, #4]
 801a014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a018:	2300      	movs	r3, #0
 801a01a:	9303      	str	r3, [sp, #12]
 801a01c:	ab0a      	add	r3, sp, #40	; 0x28
 801a01e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a022:	ab09      	add	r3, sp, #36	; 0x24
 801a024:	ec49 8b10 	vmov	d0, r8, r9
 801a028:	9300      	str	r3, [sp, #0]
 801a02a:	6022      	str	r2, [r4, #0]
 801a02c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a030:	4628      	mov	r0, r5
 801a032:	f7ff fecd 	bl	8019dd0 <__cvt>
 801a036:	9b06      	ldr	r3, [sp, #24]
 801a038:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a03a:	2b47      	cmp	r3, #71	; 0x47
 801a03c:	4680      	mov	r8, r0
 801a03e:	d108      	bne.n	801a052 <_printf_float+0x142>
 801a040:	1cc8      	adds	r0, r1, #3
 801a042:	db02      	blt.n	801a04a <_printf_float+0x13a>
 801a044:	6863      	ldr	r3, [r4, #4]
 801a046:	4299      	cmp	r1, r3
 801a048:	dd41      	ble.n	801a0ce <_printf_float+0x1be>
 801a04a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a04e:	fa5f fb8b 	uxtb.w	fp, fp
 801a052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a056:	d820      	bhi.n	801a09a <_printf_float+0x18a>
 801a058:	3901      	subs	r1, #1
 801a05a:	465a      	mov	r2, fp
 801a05c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a060:	9109      	str	r1, [sp, #36]	; 0x24
 801a062:	f7ff ff17 	bl	8019e94 <__exponent>
 801a066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a068:	1813      	adds	r3, r2, r0
 801a06a:	2a01      	cmp	r2, #1
 801a06c:	4681      	mov	r9, r0
 801a06e:	6123      	str	r3, [r4, #16]
 801a070:	dc02      	bgt.n	801a078 <_printf_float+0x168>
 801a072:	6822      	ldr	r2, [r4, #0]
 801a074:	07d2      	lsls	r2, r2, #31
 801a076:	d501      	bpl.n	801a07c <_printf_float+0x16c>
 801a078:	3301      	adds	r3, #1
 801a07a:	6123      	str	r3, [r4, #16]
 801a07c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a080:	2b00      	cmp	r3, #0
 801a082:	d09c      	beq.n	8019fbe <_printf_float+0xae>
 801a084:	232d      	movs	r3, #45	; 0x2d
 801a086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a08a:	e798      	b.n	8019fbe <_printf_float+0xae>
 801a08c:	9a06      	ldr	r2, [sp, #24]
 801a08e:	2a47      	cmp	r2, #71	; 0x47
 801a090:	d1be      	bne.n	801a010 <_printf_float+0x100>
 801a092:	2b00      	cmp	r3, #0
 801a094:	d1bc      	bne.n	801a010 <_printf_float+0x100>
 801a096:	2301      	movs	r3, #1
 801a098:	e7b9      	b.n	801a00e <_printf_float+0xfe>
 801a09a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a09e:	d118      	bne.n	801a0d2 <_printf_float+0x1c2>
 801a0a0:	2900      	cmp	r1, #0
 801a0a2:	6863      	ldr	r3, [r4, #4]
 801a0a4:	dd0b      	ble.n	801a0be <_printf_float+0x1ae>
 801a0a6:	6121      	str	r1, [r4, #16]
 801a0a8:	b913      	cbnz	r3, 801a0b0 <_printf_float+0x1a0>
 801a0aa:	6822      	ldr	r2, [r4, #0]
 801a0ac:	07d0      	lsls	r0, r2, #31
 801a0ae:	d502      	bpl.n	801a0b6 <_printf_float+0x1a6>
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	440b      	add	r3, r1
 801a0b4:	6123      	str	r3, [r4, #16]
 801a0b6:	65a1      	str	r1, [r4, #88]	; 0x58
 801a0b8:	f04f 0900 	mov.w	r9, #0
 801a0bc:	e7de      	b.n	801a07c <_printf_float+0x16c>
 801a0be:	b913      	cbnz	r3, 801a0c6 <_printf_float+0x1b6>
 801a0c0:	6822      	ldr	r2, [r4, #0]
 801a0c2:	07d2      	lsls	r2, r2, #31
 801a0c4:	d501      	bpl.n	801a0ca <_printf_float+0x1ba>
 801a0c6:	3302      	adds	r3, #2
 801a0c8:	e7f4      	b.n	801a0b4 <_printf_float+0x1a4>
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	e7f2      	b.n	801a0b4 <_printf_float+0x1a4>
 801a0ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0d4:	4299      	cmp	r1, r3
 801a0d6:	db05      	blt.n	801a0e4 <_printf_float+0x1d4>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	6121      	str	r1, [r4, #16]
 801a0dc:	07d8      	lsls	r0, r3, #31
 801a0de:	d5ea      	bpl.n	801a0b6 <_printf_float+0x1a6>
 801a0e0:	1c4b      	adds	r3, r1, #1
 801a0e2:	e7e7      	b.n	801a0b4 <_printf_float+0x1a4>
 801a0e4:	2900      	cmp	r1, #0
 801a0e6:	bfd4      	ite	le
 801a0e8:	f1c1 0202 	rsble	r2, r1, #2
 801a0ec:	2201      	movgt	r2, #1
 801a0ee:	4413      	add	r3, r2
 801a0f0:	e7e0      	b.n	801a0b4 <_printf_float+0x1a4>
 801a0f2:	6823      	ldr	r3, [r4, #0]
 801a0f4:	055a      	lsls	r2, r3, #21
 801a0f6:	d407      	bmi.n	801a108 <_printf_float+0x1f8>
 801a0f8:	6923      	ldr	r3, [r4, #16]
 801a0fa:	4642      	mov	r2, r8
 801a0fc:	4631      	mov	r1, r6
 801a0fe:	4628      	mov	r0, r5
 801a100:	47b8      	blx	r7
 801a102:	3001      	adds	r0, #1
 801a104:	d12c      	bne.n	801a160 <_printf_float+0x250>
 801a106:	e764      	b.n	8019fd2 <_printf_float+0xc2>
 801a108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a10c:	f240 80e0 	bls.w	801a2d0 <_printf_float+0x3c0>
 801a110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a114:	2200      	movs	r2, #0
 801a116:	2300      	movs	r3, #0
 801a118:	f7e6 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801a11c:	2800      	cmp	r0, #0
 801a11e:	d034      	beq.n	801a18a <_printf_float+0x27a>
 801a120:	4a37      	ldr	r2, [pc, #220]	; (801a200 <_printf_float+0x2f0>)
 801a122:	2301      	movs	r3, #1
 801a124:	4631      	mov	r1, r6
 801a126:	4628      	mov	r0, r5
 801a128:	47b8      	blx	r7
 801a12a:	3001      	adds	r0, #1
 801a12c:	f43f af51 	beq.w	8019fd2 <_printf_float+0xc2>
 801a130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a134:	429a      	cmp	r2, r3
 801a136:	db02      	blt.n	801a13e <_printf_float+0x22e>
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	07d8      	lsls	r0, r3, #31
 801a13c:	d510      	bpl.n	801a160 <_printf_float+0x250>
 801a13e:	ee18 3a10 	vmov	r3, s16
 801a142:	4652      	mov	r2, sl
 801a144:	4631      	mov	r1, r6
 801a146:	4628      	mov	r0, r5
 801a148:	47b8      	blx	r7
 801a14a:	3001      	adds	r0, #1
 801a14c:	f43f af41 	beq.w	8019fd2 <_printf_float+0xc2>
 801a150:	f04f 0800 	mov.w	r8, #0
 801a154:	f104 091a 	add.w	r9, r4, #26
 801a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a15a:	3b01      	subs	r3, #1
 801a15c:	4543      	cmp	r3, r8
 801a15e:	dc09      	bgt.n	801a174 <_printf_float+0x264>
 801a160:	6823      	ldr	r3, [r4, #0]
 801a162:	079b      	lsls	r3, r3, #30
 801a164:	f100 8105 	bmi.w	801a372 <_printf_float+0x462>
 801a168:	68e0      	ldr	r0, [r4, #12]
 801a16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a16c:	4298      	cmp	r0, r3
 801a16e:	bfb8      	it	lt
 801a170:	4618      	movlt	r0, r3
 801a172:	e730      	b.n	8019fd6 <_printf_float+0xc6>
 801a174:	2301      	movs	r3, #1
 801a176:	464a      	mov	r2, r9
 801a178:	4631      	mov	r1, r6
 801a17a:	4628      	mov	r0, r5
 801a17c:	47b8      	blx	r7
 801a17e:	3001      	adds	r0, #1
 801a180:	f43f af27 	beq.w	8019fd2 <_printf_float+0xc2>
 801a184:	f108 0801 	add.w	r8, r8, #1
 801a188:	e7e6      	b.n	801a158 <_printf_float+0x248>
 801a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	dc39      	bgt.n	801a204 <_printf_float+0x2f4>
 801a190:	4a1b      	ldr	r2, [pc, #108]	; (801a200 <_printf_float+0x2f0>)
 801a192:	2301      	movs	r3, #1
 801a194:	4631      	mov	r1, r6
 801a196:	4628      	mov	r0, r5
 801a198:	47b8      	blx	r7
 801a19a:	3001      	adds	r0, #1
 801a19c:	f43f af19 	beq.w	8019fd2 <_printf_float+0xc2>
 801a1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a1a4:	4313      	orrs	r3, r2
 801a1a6:	d102      	bne.n	801a1ae <_printf_float+0x29e>
 801a1a8:	6823      	ldr	r3, [r4, #0]
 801a1aa:	07d9      	lsls	r1, r3, #31
 801a1ac:	d5d8      	bpl.n	801a160 <_printf_float+0x250>
 801a1ae:	ee18 3a10 	vmov	r3, s16
 801a1b2:	4652      	mov	r2, sl
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	47b8      	blx	r7
 801a1ba:	3001      	adds	r0, #1
 801a1bc:	f43f af09 	beq.w	8019fd2 <_printf_float+0xc2>
 801a1c0:	f04f 0900 	mov.w	r9, #0
 801a1c4:	f104 0a1a 	add.w	sl, r4, #26
 801a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ca:	425b      	negs	r3, r3
 801a1cc:	454b      	cmp	r3, r9
 801a1ce:	dc01      	bgt.n	801a1d4 <_printf_float+0x2c4>
 801a1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1d2:	e792      	b.n	801a0fa <_printf_float+0x1ea>
 801a1d4:	2301      	movs	r3, #1
 801a1d6:	4652      	mov	r2, sl
 801a1d8:	4631      	mov	r1, r6
 801a1da:	4628      	mov	r0, r5
 801a1dc:	47b8      	blx	r7
 801a1de:	3001      	adds	r0, #1
 801a1e0:	f43f aef7 	beq.w	8019fd2 <_printf_float+0xc2>
 801a1e4:	f109 0901 	add.w	r9, r9, #1
 801a1e8:	e7ee      	b.n	801a1c8 <_printf_float+0x2b8>
 801a1ea:	bf00      	nop
 801a1ec:	7fefffff 	.word	0x7fefffff
 801a1f0:	080202f4 	.word	0x080202f4
 801a1f4:	080202f8 	.word	0x080202f8
 801a1f8:	08020300 	.word	0x08020300
 801a1fc:	080202fc 	.word	0x080202fc
 801a200:	08020304 	.word	0x08020304
 801a204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a208:	429a      	cmp	r2, r3
 801a20a:	bfa8      	it	ge
 801a20c:	461a      	movge	r2, r3
 801a20e:	2a00      	cmp	r2, #0
 801a210:	4691      	mov	r9, r2
 801a212:	dc37      	bgt.n	801a284 <_printf_float+0x374>
 801a214:	f04f 0b00 	mov.w	fp, #0
 801a218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a21c:	f104 021a 	add.w	r2, r4, #26
 801a220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a222:	9305      	str	r3, [sp, #20]
 801a224:	eba3 0309 	sub.w	r3, r3, r9
 801a228:	455b      	cmp	r3, fp
 801a22a:	dc33      	bgt.n	801a294 <_printf_float+0x384>
 801a22c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a230:	429a      	cmp	r2, r3
 801a232:	db3b      	blt.n	801a2ac <_printf_float+0x39c>
 801a234:	6823      	ldr	r3, [r4, #0]
 801a236:	07da      	lsls	r2, r3, #31
 801a238:	d438      	bmi.n	801a2ac <_printf_float+0x39c>
 801a23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a23c:	9b05      	ldr	r3, [sp, #20]
 801a23e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a240:	1ad3      	subs	r3, r2, r3
 801a242:	eba2 0901 	sub.w	r9, r2, r1
 801a246:	4599      	cmp	r9, r3
 801a248:	bfa8      	it	ge
 801a24a:	4699      	movge	r9, r3
 801a24c:	f1b9 0f00 	cmp.w	r9, #0
 801a250:	dc35      	bgt.n	801a2be <_printf_float+0x3ae>
 801a252:	f04f 0800 	mov.w	r8, #0
 801a256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a25a:	f104 0a1a 	add.w	sl, r4, #26
 801a25e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a262:	1a9b      	subs	r3, r3, r2
 801a264:	eba3 0309 	sub.w	r3, r3, r9
 801a268:	4543      	cmp	r3, r8
 801a26a:	f77f af79 	ble.w	801a160 <_printf_float+0x250>
 801a26e:	2301      	movs	r3, #1
 801a270:	4652      	mov	r2, sl
 801a272:	4631      	mov	r1, r6
 801a274:	4628      	mov	r0, r5
 801a276:	47b8      	blx	r7
 801a278:	3001      	adds	r0, #1
 801a27a:	f43f aeaa 	beq.w	8019fd2 <_printf_float+0xc2>
 801a27e:	f108 0801 	add.w	r8, r8, #1
 801a282:	e7ec      	b.n	801a25e <_printf_float+0x34e>
 801a284:	4613      	mov	r3, r2
 801a286:	4631      	mov	r1, r6
 801a288:	4642      	mov	r2, r8
 801a28a:	4628      	mov	r0, r5
 801a28c:	47b8      	blx	r7
 801a28e:	3001      	adds	r0, #1
 801a290:	d1c0      	bne.n	801a214 <_printf_float+0x304>
 801a292:	e69e      	b.n	8019fd2 <_printf_float+0xc2>
 801a294:	2301      	movs	r3, #1
 801a296:	4631      	mov	r1, r6
 801a298:	4628      	mov	r0, r5
 801a29a:	9205      	str	r2, [sp, #20]
 801a29c:	47b8      	blx	r7
 801a29e:	3001      	adds	r0, #1
 801a2a0:	f43f ae97 	beq.w	8019fd2 <_printf_float+0xc2>
 801a2a4:	9a05      	ldr	r2, [sp, #20]
 801a2a6:	f10b 0b01 	add.w	fp, fp, #1
 801a2aa:	e7b9      	b.n	801a220 <_printf_float+0x310>
 801a2ac:	ee18 3a10 	vmov	r3, s16
 801a2b0:	4652      	mov	r2, sl
 801a2b2:	4631      	mov	r1, r6
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	47b8      	blx	r7
 801a2b8:	3001      	adds	r0, #1
 801a2ba:	d1be      	bne.n	801a23a <_printf_float+0x32a>
 801a2bc:	e689      	b.n	8019fd2 <_printf_float+0xc2>
 801a2be:	9a05      	ldr	r2, [sp, #20]
 801a2c0:	464b      	mov	r3, r9
 801a2c2:	4442      	add	r2, r8
 801a2c4:	4631      	mov	r1, r6
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	47b8      	blx	r7
 801a2ca:	3001      	adds	r0, #1
 801a2cc:	d1c1      	bne.n	801a252 <_printf_float+0x342>
 801a2ce:	e680      	b.n	8019fd2 <_printf_float+0xc2>
 801a2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2d2:	2a01      	cmp	r2, #1
 801a2d4:	dc01      	bgt.n	801a2da <_printf_float+0x3ca>
 801a2d6:	07db      	lsls	r3, r3, #31
 801a2d8:	d538      	bpl.n	801a34c <_printf_float+0x43c>
 801a2da:	2301      	movs	r3, #1
 801a2dc:	4642      	mov	r2, r8
 801a2de:	4631      	mov	r1, r6
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	47b8      	blx	r7
 801a2e4:	3001      	adds	r0, #1
 801a2e6:	f43f ae74 	beq.w	8019fd2 <_printf_float+0xc2>
 801a2ea:	ee18 3a10 	vmov	r3, s16
 801a2ee:	4652      	mov	r2, sl
 801a2f0:	4631      	mov	r1, r6
 801a2f2:	4628      	mov	r0, r5
 801a2f4:	47b8      	blx	r7
 801a2f6:	3001      	adds	r0, #1
 801a2f8:	f43f ae6b 	beq.w	8019fd2 <_printf_float+0xc2>
 801a2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a300:	2200      	movs	r2, #0
 801a302:	2300      	movs	r3, #0
 801a304:	f7e6 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 801a308:	b9d8      	cbnz	r0, 801a342 <_printf_float+0x432>
 801a30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a30c:	f108 0201 	add.w	r2, r8, #1
 801a310:	3b01      	subs	r3, #1
 801a312:	4631      	mov	r1, r6
 801a314:	4628      	mov	r0, r5
 801a316:	47b8      	blx	r7
 801a318:	3001      	adds	r0, #1
 801a31a:	d10e      	bne.n	801a33a <_printf_float+0x42a>
 801a31c:	e659      	b.n	8019fd2 <_printf_float+0xc2>
 801a31e:	2301      	movs	r3, #1
 801a320:	4652      	mov	r2, sl
 801a322:	4631      	mov	r1, r6
 801a324:	4628      	mov	r0, r5
 801a326:	47b8      	blx	r7
 801a328:	3001      	adds	r0, #1
 801a32a:	f43f ae52 	beq.w	8019fd2 <_printf_float+0xc2>
 801a32e:	f108 0801 	add.w	r8, r8, #1
 801a332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a334:	3b01      	subs	r3, #1
 801a336:	4543      	cmp	r3, r8
 801a338:	dcf1      	bgt.n	801a31e <_printf_float+0x40e>
 801a33a:	464b      	mov	r3, r9
 801a33c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a340:	e6dc      	b.n	801a0fc <_printf_float+0x1ec>
 801a342:	f04f 0800 	mov.w	r8, #0
 801a346:	f104 0a1a 	add.w	sl, r4, #26
 801a34a:	e7f2      	b.n	801a332 <_printf_float+0x422>
 801a34c:	2301      	movs	r3, #1
 801a34e:	4642      	mov	r2, r8
 801a350:	e7df      	b.n	801a312 <_printf_float+0x402>
 801a352:	2301      	movs	r3, #1
 801a354:	464a      	mov	r2, r9
 801a356:	4631      	mov	r1, r6
 801a358:	4628      	mov	r0, r5
 801a35a:	47b8      	blx	r7
 801a35c:	3001      	adds	r0, #1
 801a35e:	f43f ae38 	beq.w	8019fd2 <_printf_float+0xc2>
 801a362:	f108 0801 	add.w	r8, r8, #1
 801a366:	68e3      	ldr	r3, [r4, #12]
 801a368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a36a:	1a5b      	subs	r3, r3, r1
 801a36c:	4543      	cmp	r3, r8
 801a36e:	dcf0      	bgt.n	801a352 <_printf_float+0x442>
 801a370:	e6fa      	b.n	801a168 <_printf_float+0x258>
 801a372:	f04f 0800 	mov.w	r8, #0
 801a376:	f104 0919 	add.w	r9, r4, #25
 801a37a:	e7f4      	b.n	801a366 <_printf_float+0x456>

0801a37c <_printf_common>:
 801a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a380:	4616      	mov	r6, r2
 801a382:	4699      	mov	r9, r3
 801a384:	688a      	ldr	r2, [r1, #8]
 801a386:	690b      	ldr	r3, [r1, #16]
 801a388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a38c:	4293      	cmp	r3, r2
 801a38e:	bfb8      	it	lt
 801a390:	4613      	movlt	r3, r2
 801a392:	6033      	str	r3, [r6, #0]
 801a394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a398:	4607      	mov	r7, r0
 801a39a:	460c      	mov	r4, r1
 801a39c:	b10a      	cbz	r2, 801a3a2 <_printf_common+0x26>
 801a39e:	3301      	adds	r3, #1
 801a3a0:	6033      	str	r3, [r6, #0]
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	0699      	lsls	r1, r3, #26
 801a3a6:	bf42      	ittt	mi
 801a3a8:	6833      	ldrmi	r3, [r6, #0]
 801a3aa:	3302      	addmi	r3, #2
 801a3ac:	6033      	strmi	r3, [r6, #0]
 801a3ae:	6825      	ldr	r5, [r4, #0]
 801a3b0:	f015 0506 	ands.w	r5, r5, #6
 801a3b4:	d106      	bne.n	801a3c4 <_printf_common+0x48>
 801a3b6:	f104 0a19 	add.w	sl, r4, #25
 801a3ba:	68e3      	ldr	r3, [r4, #12]
 801a3bc:	6832      	ldr	r2, [r6, #0]
 801a3be:	1a9b      	subs	r3, r3, r2
 801a3c0:	42ab      	cmp	r3, r5
 801a3c2:	dc26      	bgt.n	801a412 <_printf_common+0x96>
 801a3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a3c8:	1e13      	subs	r3, r2, #0
 801a3ca:	6822      	ldr	r2, [r4, #0]
 801a3cc:	bf18      	it	ne
 801a3ce:	2301      	movne	r3, #1
 801a3d0:	0692      	lsls	r2, r2, #26
 801a3d2:	d42b      	bmi.n	801a42c <_printf_common+0xb0>
 801a3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3d8:	4649      	mov	r1, r9
 801a3da:	4638      	mov	r0, r7
 801a3dc:	47c0      	blx	r8
 801a3de:	3001      	adds	r0, #1
 801a3e0:	d01e      	beq.n	801a420 <_printf_common+0xa4>
 801a3e2:	6823      	ldr	r3, [r4, #0]
 801a3e4:	68e5      	ldr	r5, [r4, #12]
 801a3e6:	6832      	ldr	r2, [r6, #0]
 801a3e8:	f003 0306 	and.w	r3, r3, #6
 801a3ec:	2b04      	cmp	r3, #4
 801a3ee:	bf08      	it	eq
 801a3f0:	1aad      	subeq	r5, r5, r2
 801a3f2:	68a3      	ldr	r3, [r4, #8]
 801a3f4:	6922      	ldr	r2, [r4, #16]
 801a3f6:	bf0c      	ite	eq
 801a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3fc:	2500      	movne	r5, #0
 801a3fe:	4293      	cmp	r3, r2
 801a400:	bfc4      	itt	gt
 801a402:	1a9b      	subgt	r3, r3, r2
 801a404:	18ed      	addgt	r5, r5, r3
 801a406:	2600      	movs	r6, #0
 801a408:	341a      	adds	r4, #26
 801a40a:	42b5      	cmp	r5, r6
 801a40c:	d11a      	bne.n	801a444 <_printf_common+0xc8>
 801a40e:	2000      	movs	r0, #0
 801a410:	e008      	b.n	801a424 <_printf_common+0xa8>
 801a412:	2301      	movs	r3, #1
 801a414:	4652      	mov	r2, sl
 801a416:	4649      	mov	r1, r9
 801a418:	4638      	mov	r0, r7
 801a41a:	47c0      	blx	r8
 801a41c:	3001      	adds	r0, #1
 801a41e:	d103      	bne.n	801a428 <_printf_common+0xac>
 801a420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a428:	3501      	adds	r5, #1
 801a42a:	e7c6      	b.n	801a3ba <_printf_common+0x3e>
 801a42c:	18e1      	adds	r1, r4, r3
 801a42e:	1c5a      	adds	r2, r3, #1
 801a430:	2030      	movs	r0, #48	; 0x30
 801a432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a436:	4422      	add	r2, r4
 801a438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a440:	3302      	adds	r3, #2
 801a442:	e7c7      	b.n	801a3d4 <_printf_common+0x58>
 801a444:	2301      	movs	r3, #1
 801a446:	4622      	mov	r2, r4
 801a448:	4649      	mov	r1, r9
 801a44a:	4638      	mov	r0, r7
 801a44c:	47c0      	blx	r8
 801a44e:	3001      	adds	r0, #1
 801a450:	d0e6      	beq.n	801a420 <_printf_common+0xa4>
 801a452:	3601      	adds	r6, #1
 801a454:	e7d9      	b.n	801a40a <_printf_common+0x8e>
	...

0801a458 <_printf_i>:
 801a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a45c:	460c      	mov	r4, r1
 801a45e:	4691      	mov	r9, r2
 801a460:	7e27      	ldrb	r7, [r4, #24]
 801a462:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a464:	2f78      	cmp	r7, #120	; 0x78
 801a466:	4680      	mov	r8, r0
 801a468:	469a      	mov	sl, r3
 801a46a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a46e:	d807      	bhi.n	801a480 <_printf_i+0x28>
 801a470:	2f62      	cmp	r7, #98	; 0x62
 801a472:	d80a      	bhi.n	801a48a <_printf_i+0x32>
 801a474:	2f00      	cmp	r7, #0
 801a476:	f000 80d8 	beq.w	801a62a <_printf_i+0x1d2>
 801a47a:	2f58      	cmp	r7, #88	; 0x58
 801a47c:	f000 80a3 	beq.w	801a5c6 <_printf_i+0x16e>
 801a480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a488:	e03a      	b.n	801a500 <_printf_i+0xa8>
 801a48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a48e:	2b15      	cmp	r3, #21
 801a490:	d8f6      	bhi.n	801a480 <_printf_i+0x28>
 801a492:	a001      	add	r0, pc, #4	; (adr r0, 801a498 <_printf_i+0x40>)
 801a494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a498:	0801a4f1 	.word	0x0801a4f1
 801a49c:	0801a505 	.word	0x0801a505
 801a4a0:	0801a481 	.word	0x0801a481
 801a4a4:	0801a481 	.word	0x0801a481
 801a4a8:	0801a481 	.word	0x0801a481
 801a4ac:	0801a481 	.word	0x0801a481
 801a4b0:	0801a505 	.word	0x0801a505
 801a4b4:	0801a481 	.word	0x0801a481
 801a4b8:	0801a481 	.word	0x0801a481
 801a4bc:	0801a481 	.word	0x0801a481
 801a4c0:	0801a481 	.word	0x0801a481
 801a4c4:	0801a611 	.word	0x0801a611
 801a4c8:	0801a535 	.word	0x0801a535
 801a4cc:	0801a5f3 	.word	0x0801a5f3
 801a4d0:	0801a481 	.word	0x0801a481
 801a4d4:	0801a481 	.word	0x0801a481
 801a4d8:	0801a633 	.word	0x0801a633
 801a4dc:	0801a481 	.word	0x0801a481
 801a4e0:	0801a535 	.word	0x0801a535
 801a4e4:	0801a481 	.word	0x0801a481
 801a4e8:	0801a481 	.word	0x0801a481
 801a4ec:	0801a5fb 	.word	0x0801a5fb
 801a4f0:	680b      	ldr	r3, [r1, #0]
 801a4f2:	1d1a      	adds	r2, r3, #4
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	600a      	str	r2, [r1, #0]
 801a4f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a500:	2301      	movs	r3, #1
 801a502:	e0a3      	b.n	801a64c <_printf_i+0x1f4>
 801a504:	6825      	ldr	r5, [r4, #0]
 801a506:	6808      	ldr	r0, [r1, #0]
 801a508:	062e      	lsls	r6, r5, #24
 801a50a:	f100 0304 	add.w	r3, r0, #4
 801a50e:	d50a      	bpl.n	801a526 <_printf_i+0xce>
 801a510:	6805      	ldr	r5, [r0, #0]
 801a512:	600b      	str	r3, [r1, #0]
 801a514:	2d00      	cmp	r5, #0
 801a516:	da03      	bge.n	801a520 <_printf_i+0xc8>
 801a518:	232d      	movs	r3, #45	; 0x2d
 801a51a:	426d      	negs	r5, r5
 801a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a520:	485e      	ldr	r0, [pc, #376]	; (801a69c <_printf_i+0x244>)
 801a522:	230a      	movs	r3, #10
 801a524:	e019      	b.n	801a55a <_printf_i+0x102>
 801a526:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a52a:	6805      	ldr	r5, [r0, #0]
 801a52c:	600b      	str	r3, [r1, #0]
 801a52e:	bf18      	it	ne
 801a530:	b22d      	sxthne	r5, r5
 801a532:	e7ef      	b.n	801a514 <_printf_i+0xbc>
 801a534:	680b      	ldr	r3, [r1, #0]
 801a536:	6825      	ldr	r5, [r4, #0]
 801a538:	1d18      	adds	r0, r3, #4
 801a53a:	6008      	str	r0, [r1, #0]
 801a53c:	0628      	lsls	r0, r5, #24
 801a53e:	d501      	bpl.n	801a544 <_printf_i+0xec>
 801a540:	681d      	ldr	r5, [r3, #0]
 801a542:	e002      	b.n	801a54a <_printf_i+0xf2>
 801a544:	0669      	lsls	r1, r5, #25
 801a546:	d5fb      	bpl.n	801a540 <_printf_i+0xe8>
 801a548:	881d      	ldrh	r5, [r3, #0]
 801a54a:	4854      	ldr	r0, [pc, #336]	; (801a69c <_printf_i+0x244>)
 801a54c:	2f6f      	cmp	r7, #111	; 0x6f
 801a54e:	bf0c      	ite	eq
 801a550:	2308      	moveq	r3, #8
 801a552:	230a      	movne	r3, #10
 801a554:	2100      	movs	r1, #0
 801a556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a55a:	6866      	ldr	r6, [r4, #4]
 801a55c:	60a6      	str	r6, [r4, #8]
 801a55e:	2e00      	cmp	r6, #0
 801a560:	bfa2      	ittt	ge
 801a562:	6821      	ldrge	r1, [r4, #0]
 801a564:	f021 0104 	bicge.w	r1, r1, #4
 801a568:	6021      	strge	r1, [r4, #0]
 801a56a:	b90d      	cbnz	r5, 801a570 <_printf_i+0x118>
 801a56c:	2e00      	cmp	r6, #0
 801a56e:	d04d      	beq.n	801a60c <_printf_i+0x1b4>
 801a570:	4616      	mov	r6, r2
 801a572:	fbb5 f1f3 	udiv	r1, r5, r3
 801a576:	fb03 5711 	mls	r7, r3, r1, r5
 801a57a:	5dc7      	ldrb	r7, [r0, r7]
 801a57c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a580:	462f      	mov	r7, r5
 801a582:	42bb      	cmp	r3, r7
 801a584:	460d      	mov	r5, r1
 801a586:	d9f4      	bls.n	801a572 <_printf_i+0x11a>
 801a588:	2b08      	cmp	r3, #8
 801a58a:	d10b      	bne.n	801a5a4 <_printf_i+0x14c>
 801a58c:	6823      	ldr	r3, [r4, #0]
 801a58e:	07df      	lsls	r7, r3, #31
 801a590:	d508      	bpl.n	801a5a4 <_printf_i+0x14c>
 801a592:	6923      	ldr	r3, [r4, #16]
 801a594:	6861      	ldr	r1, [r4, #4]
 801a596:	4299      	cmp	r1, r3
 801a598:	bfde      	ittt	le
 801a59a:	2330      	movle	r3, #48	; 0x30
 801a59c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a5a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a5a4:	1b92      	subs	r2, r2, r6
 801a5a6:	6122      	str	r2, [r4, #16]
 801a5a8:	f8cd a000 	str.w	sl, [sp]
 801a5ac:	464b      	mov	r3, r9
 801a5ae:	aa03      	add	r2, sp, #12
 801a5b0:	4621      	mov	r1, r4
 801a5b2:	4640      	mov	r0, r8
 801a5b4:	f7ff fee2 	bl	801a37c <_printf_common>
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	d14c      	bne.n	801a656 <_printf_i+0x1fe>
 801a5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a5c0:	b004      	add	sp, #16
 801a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5c6:	4835      	ldr	r0, [pc, #212]	; (801a69c <_printf_i+0x244>)
 801a5c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a5cc:	6823      	ldr	r3, [r4, #0]
 801a5ce:	680e      	ldr	r6, [r1, #0]
 801a5d0:	061f      	lsls	r7, r3, #24
 801a5d2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a5d6:	600e      	str	r6, [r1, #0]
 801a5d8:	d514      	bpl.n	801a604 <_printf_i+0x1ac>
 801a5da:	07d9      	lsls	r1, r3, #31
 801a5dc:	bf44      	itt	mi
 801a5de:	f043 0320 	orrmi.w	r3, r3, #32
 801a5e2:	6023      	strmi	r3, [r4, #0]
 801a5e4:	b91d      	cbnz	r5, 801a5ee <_printf_i+0x196>
 801a5e6:	6823      	ldr	r3, [r4, #0]
 801a5e8:	f023 0320 	bic.w	r3, r3, #32
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	2310      	movs	r3, #16
 801a5f0:	e7b0      	b.n	801a554 <_printf_i+0xfc>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	f043 0320 	orr.w	r3, r3, #32
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	2378      	movs	r3, #120	; 0x78
 801a5fc:	4828      	ldr	r0, [pc, #160]	; (801a6a0 <_printf_i+0x248>)
 801a5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a602:	e7e3      	b.n	801a5cc <_printf_i+0x174>
 801a604:	065e      	lsls	r6, r3, #25
 801a606:	bf48      	it	mi
 801a608:	b2ad      	uxthmi	r5, r5
 801a60a:	e7e6      	b.n	801a5da <_printf_i+0x182>
 801a60c:	4616      	mov	r6, r2
 801a60e:	e7bb      	b.n	801a588 <_printf_i+0x130>
 801a610:	680b      	ldr	r3, [r1, #0]
 801a612:	6826      	ldr	r6, [r4, #0]
 801a614:	6960      	ldr	r0, [r4, #20]
 801a616:	1d1d      	adds	r5, r3, #4
 801a618:	600d      	str	r5, [r1, #0]
 801a61a:	0635      	lsls	r5, r6, #24
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	d501      	bpl.n	801a624 <_printf_i+0x1cc>
 801a620:	6018      	str	r0, [r3, #0]
 801a622:	e002      	b.n	801a62a <_printf_i+0x1d2>
 801a624:	0671      	lsls	r1, r6, #25
 801a626:	d5fb      	bpl.n	801a620 <_printf_i+0x1c8>
 801a628:	8018      	strh	r0, [r3, #0]
 801a62a:	2300      	movs	r3, #0
 801a62c:	6123      	str	r3, [r4, #16]
 801a62e:	4616      	mov	r6, r2
 801a630:	e7ba      	b.n	801a5a8 <_printf_i+0x150>
 801a632:	680b      	ldr	r3, [r1, #0]
 801a634:	1d1a      	adds	r2, r3, #4
 801a636:	600a      	str	r2, [r1, #0]
 801a638:	681e      	ldr	r6, [r3, #0]
 801a63a:	6862      	ldr	r2, [r4, #4]
 801a63c:	2100      	movs	r1, #0
 801a63e:	4630      	mov	r0, r6
 801a640:	f7e5 fdce 	bl	80001e0 <memchr>
 801a644:	b108      	cbz	r0, 801a64a <_printf_i+0x1f2>
 801a646:	1b80      	subs	r0, r0, r6
 801a648:	6060      	str	r0, [r4, #4]
 801a64a:	6863      	ldr	r3, [r4, #4]
 801a64c:	6123      	str	r3, [r4, #16]
 801a64e:	2300      	movs	r3, #0
 801a650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a654:	e7a8      	b.n	801a5a8 <_printf_i+0x150>
 801a656:	6923      	ldr	r3, [r4, #16]
 801a658:	4632      	mov	r2, r6
 801a65a:	4649      	mov	r1, r9
 801a65c:	4640      	mov	r0, r8
 801a65e:	47d0      	blx	sl
 801a660:	3001      	adds	r0, #1
 801a662:	d0ab      	beq.n	801a5bc <_printf_i+0x164>
 801a664:	6823      	ldr	r3, [r4, #0]
 801a666:	079b      	lsls	r3, r3, #30
 801a668:	d413      	bmi.n	801a692 <_printf_i+0x23a>
 801a66a:	68e0      	ldr	r0, [r4, #12]
 801a66c:	9b03      	ldr	r3, [sp, #12]
 801a66e:	4298      	cmp	r0, r3
 801a670:	bfb8      	it	lt
 801a672:	4618      	movlt	r0, r3
 801a674:	e7a4      	b.n	801a5c0 <_printf_i+0x168>
 801a676:	2301      	movs	r3, #1
 801a678:	4632      	mov	r2, r6
 801a67a:	4649      	mov	r1, r9
 801a67c:	4640      	mov	r0, r8
 801a67e:	47d0      	blx	sl
 801a680:	3001      	adds	r0, #1
 801a682:	d09b      	beq.n	801a5bc <_printf_i+0x164>
 801a684:	3501      	adds	r5, #1
 801a686:	68e3      	ldr	r3, [r4, #12]
 801a688:	9903      	ldr	r1, [sp, #12]
 801a68a:	1a5b      	subs	r3, r3, r1
 801a68c:	42ab      	cmp	r3, r5
 801a68e:	dcf2      	bgt.n	801a676 <_printf_i+0x21e>
 801a690:	e7eb      	b.n	801a66a <_printf_i+0x212>
 801a692:	2500      	movs	r5, #0
 801a694:	f104 0619 	add.w	r6, r4, #25
 801a698:	e7f5      	b.n	801a686 <_printf_i+0x22e>
 801a69a:	bf00      	nop
 801a69c:	08020306 	.word	0x08020306
 801a6a0:	08020317 	.word	0x08020317

0801a6a4 <_scanf_float>:
 801a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a8:	b087      	sub	sp, #28
 801a6aa:	4617      	mov	r7, r2
 801a6ac:	9303      	str	r3, [sp, #12]
 801a6ae:	688b      	ldr	r3, [r1, #8]
 801a6b0:	1e5a      	subs	r2, r3, #1
 801a6b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a6b6:	bf83      	ittte	hi
 801a6b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a6bc:	195b      	addhi	r3, r3, r5
 801a6be:	9302      	strhi	r3, [sp, #8]
 801a6c0:	2300      	movls	r3, #0
 801a6c2:	bf86      	itte	hi
 801a6c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a6c8:	608b      	strhi	r3, [r1, #8]
 801a6ca:	9302      	strls	r3, [sp, #8]
 801a6cc:	680b      	ldr	r3, [r1, #0]
 801a6ce:	468b      	mov	fp, r1
 801a6d0:	2500      	movs	r5, #0
 801a6d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a6d6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a6da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a6de:	4680      	mov	r8, r0
 801a6e0:	460c      	mov	r4, r1
 801a6e2:	465e      	mov	r6, fp
 801a6e4:	46aa      	mov	sl, r5
 801a6e6:	46a9      	mov	r9, r5
 801a6e8:	9501      	str	r5, [sp, #4]
 801a6ea:	68a2      	ldr	r2, [r4, #8]
 801a6ec:	b152      	cbz	r2, 801a704 <_scanf_float+0x60>
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	2b4e      	cmp	r3, #78	; 0x4e
 801a6f4:	d864      	bhi.n	801a7c0 <_scanf_float+0x11c>
 801a6f6:	2b40      	cmp	r3, #64	; 0x40
 801a6f8:	d83c      	bhi.n	801a774 <_scanf_float+0xd0>
 801a6fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a6fe:	b2c8      	uxtb	r0, r1
 801a700:	280e      	cmp	r0, #14
 801a702:	d93a      	bls.n	801a77a <_scanf_float+0xd6>
 801a704:	f1b9 0f00 	cmp.w	r9, #0
 801a708:	d003      	beq.n	801a712 <_scanf_float+0x6e>
 801a70a:	6823      	ldr	r3, [r4, #0]
 801a70c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a710:	6023      	str	r3, [r4, #0]
 801a712:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a716:	f1ba 0f01 	cmp.w	sl, #1
 801a71a:	f200 8113 	bhi.w	801a944 <_scanf_float+0x2a0>
 801a71e:	455e      	cmp	r6, fp
 801a720:	f200 8105 	bhi.w	801a92e <_scanf_float+0x28a>
 801a724:	2501      	movs	r5, #1
 801a726:	4628      	mov	r0, r5
 801a728:	b007      	add	sp, #28
 801a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a72e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a732:	2a0d      	cmp	r2, #13
 801a734:	d8e6      	bhi.n	801a704 <_scanf_float+0x60>
 801a736:	a101      	add	r1, pc, #4	; (adr r1, 801a73c <_scanf_float+0x98>)
 801a738:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a73c:	0801a87b 	.word	0x0801a87b
 801a740:	0801a705 	.word	0x0801a705
 801a744:	0801a705 	.word	0x0801a705
 801a748:	0801a705 	.word	0x0801a705
 801a74c:	0801a8db 	.word	0x0801a8db
 801a750:	0801a8b3 	.word	0x0801a8b3
 801a754:	0801a705 	.word	0x0801a705
 801a758:	0801a705 	.word	0x0801a705
 801a75c:	0801a889 	.word	0x0801a889
 801a760:	0801a705 	.word	0x0801a705
 801a764:	0801a705 	.word	0x0801a705
 801a768:	0801a705 	.word	0x0801a705
 801a76c:	0801a705 	.word	0x0801a705
 801a770:	0801a841 	.word	0x0801a841
 801a774:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a778:	e7db      	b.n	801a732 <_scanf_float+0x8e>
 801a77a:	290e      	cmp	r1, #14
 801a77c:	d8c2      	bhi.n	801a704 <_scanf_float+0x60>
 801a77e:	a001      	add	r0, pc, #4	; (adr r0, 801a784 <_scanf_float+0xe0>)
 801a780:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a784:	0801a833 	.word	0x0801a833
 801a788:	0801a705 	.word	0x0801a705
 801a78c:	0801a833 	.word	0x0801a833
 801a790:	0801a8c7 	.word	0x0801a8c7
 801a794:	0801a705 	.word	0x0801a705
 801a798:	0801a7e1 	.word	0x0801a7e1
 801a79c:	0801a81d 	.word	0x0801a81d
 801a7a0:	0801a81d 	.word	0x0801a81d
 801a7a4:	0801a81d 	.word	0x0801a81d
 801a7a8:	0801a81d 	.word	0x0801a81d
 801a7ac:	0801a81d 	.word	0x0801a81d
 801a7b0:	0801a81d 	.word	0x0801a81d
 801a7b4:	0801a81d 	.word	0x0801a81d
 801a7b8:	0801a81d 	.word	0x0801a81d
 801a7bc:	0801a81d 	.word	0x0801a81d
 801a7c0:	2b6e      	cmp	r3, #110	; 0x6e
 801a7c2:	d809      	bhi.n	801a7d8 <_scanf_float+0x134>
 801a7c4:	2b60      	cmp	r3, #96	; 0x60
 801a7c6:	d8b2      	bhi.n	801a72e <_scanf_float+0x8a>
 801a7c8:	2b54      	cmp	r3, #84	; 0x54
 801a7ca:	d077      	beq.n	801a8bc <_scanf_float+0x218>
 801a7cc:	2b59      	cmp	r3, #89	; 0x59
 801a7ce:	d199      	bne.n	801a704 <_scanf_float+0x60>
 801a7d0:	2d07      	cmp	r5, #7
 801a7d2:	d197      	bne.n	801a704 <_scanf_float+0x60>
 801a7d4:	2508      	movs	r5, #8
 801a7d6:	e029      	b.n	801a82c <_scanf_float+0x188>
 801a7d8:	2b74      	cmp	r3, #116	; 0x74
 801a7da:	d06f      	beq.n	801a8bc <_scanf_float+0x218>
 801a7dc:	2b79      	cmp	r3, #121	; 0x79
 801a7de:	e7f6      	b.n	801a7ce <_scanf_float+0x12a>
 801a7e0:	6821      	ldr	r1, [r4, #0]
 801a7e2:	05c8      	lsls	r0, r1, #23
 801a7e4:	d51a      	bpl.n	801a81c <_scanf_float+0x178>
 801a7e6:	9b02      	ldr	r3, [sp, #8]
 801a7e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a7ec:	6021      	str	r1, [r4, #0]
 801a7ee:	f109 0901 	add.w	r9, r9, #1
 801a7f2:	b11b      	cbz	r3, 801a7fc <_scanf_float+0x158>
 801a7f4:	3b01      	subs	r3, #1
 801a7f6:	3201      	adds	r2, #1
 801a7f8:	9302      	str	r3, [sp, #8]
 801a7fa:	60a2      	str	r2, [r4, #8]
 801a7fc:	68a3      	ldr	r3, [r4, #8]
 801a7fe:	3b01      	subs	r3, #1
 801a800:	60a3      	str	r3, [r4, #8]
 801a802:	6923      	ldr	r3, [r4, #16]
 801a804:	3301      	adds	r3, #1
 801a806:	6123      	str	r3, [r4, #16]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	3b01      	subs	r3, #1
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	607b      	str	r3, [r7, #4]
 801a810:	f340 8084 	ble.w	801a91c <_scanf_float+0x278>
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	3301      	adds	r3, #1
 801a818:	603b      	str	r3, [r7, #0]
 801a81a:	e766      	b.n	801a6ea <_scanf_float+0x46>
 801a81c:	eb1a 0f05 	cmn.w	sl, r5
 801a820:	f47f af70 	bne.w	801a704 <_scanf_float+0x60>
 801a824:	6822      	ldr	r2, [r4, #0]
 801a826:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a82a:	6022      	str	r2, [r4, #0]
 801a82c:	f806 3b01 	strb.w	r3, [r6], #1
 801a830:	e7e4      	b.n	801a7fc <_scanf_float+0x158>
 801a832:	6822      	ldr	r2, [r4, #0]
 801a834:	0610      	lsls	r0, r2, #24
 801a836:	f57f af65 	bpl.w	801a704 <_scanf_float+0x60>
 801a83a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a83e:	e7f4      	b.n	801a82a <_scanf_float+0x186>
 801a840:	f1ba 0f00 	cmp.w	sl, #0
 801a844:	d10e      	bne.n	801a864 <_scanf_float+0x1c0>
 801a846:	f1b9 0f00 	cmp.w	r9, #0
 801a84a:	d10e      	bne.n	801a86a <_scanf_float+0x1c6>
 801a84c:	6822      	ldr	r2, [r4, #0]
 801a84e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a852:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a856:	d108      	bne.n	801a86a <_scanf_float+0x1c6>
 801a858:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a85c:	6022      	str	r2, [r4, #0]
 801a85e:	f04f 0a01 	mov.w	sl, #1
 801a862:	e7e3      	b.n	801a82c <_scanf_float+0x188>
 801a864:	f1ba 0f02 	cmp.w	sl, #2
 801a868:	d055      	beq.n	801a916 <_scanf_float+0x272>
 801a86a:	2d01      	cmp	r5, #1
 801a86c:	d002      	beq.n	801a874 <_scanf_float+0x1d0>
 801a86e:	2d04      	cmp	r5, #4
 801a870:	f47f af48 	bne.w	801a704 <_scanf_float+0x60>
 801a874:	3501      	adds	r5, #1
 801a876:	b2ed      	uxtb	r5, r5
 801a878:	e7d8      	b.n	801a82c <_scanf_float+0x188>
 801a87a:	f1ba 0f01 	cmp.w	sl, #1
 801a87e:	f47f af41 	bne.w	801a704 <_scanf_float+0x60>
 801a882:	f04f 0a02 	mov.w	sl, #2
 801a886:	e7d1      	b.n	801a82c <_scanf_float+0x188>
 801a888:	b97d      	cbnz	r5, 801a8aa <_scanf_float+0x206>
 801a88a:	f1b9 0f00 	cmp.w	r9, #0
 801a88e:	f47f af3c 	bne.w	801a70a <_scanf_float+0x66>
 801a892:	6822      	ldr	r2, [r4, #0]
 801a894:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a898:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a89c:	f47f af39 	bne.w	801a712 <_scanf_float+0x6e>
 801a8a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a8a4:	6022      	str	r2, [r4, #0]
 801a8a6:	2501      	movs	r5, #1
 801a8a8:	e7c0      	b.n	801a82c <_scanf_float+0x188>
 801a8aa:	2d03      	cmp	r5, #3
 801a8ac:	d0e2      	beq.n	801a874 <_scanf_float+0x1d0>
 801a8ae:	2d05      	cmp	r5, #5
 801a8b0:	e7de      	b.n	801a870 <_scanf_float+0x1cc>
 801a8b2:	2d02      	cmp	r5, #2
 801a8b4:	f47f af26 	bne.w	801a704 <_scanf_float+0x60>
 801a8b8:	2503      	movs	r5, #3
 801a8ba:	e7b7      	b.n	801a82c <_scanf_float+0x188>
 801a8bc:	2d06      	cmp	r5, #6
 801a8be:	f47f af21 	bne.w	801a704 <_scanf_float+0x60>
 801a8c2:	2507      	movs	r5, #7
 801a8c4:	e7b2      	b.n	801a82c <_scanf_float+0x188>
 801a8c6:	6822      	ldr	r2, [r4, #0]
 801a8c8:	0591      	lsls	r1, r2, #22
 801a8ca:	f57f af1b 	bpl.w	801a704 <_scanf_float+0x60>
 801a8ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a8d2:	6022      	str	r2, [r4, #0]
 801a8d4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a8d8:	e7a8      	b.n	801a82c <_scanf_float+0x188>
 801a8da:	6822      	ldr	r2, [r4, #0]
 801a8dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a8e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a8e4:	d006      	beq.n	801a8f4 <_scanf_float+0x250>
 801a8e6:	0550      	lsls	r0, r2, #21
 801a8e8:	f57f af0c 	bpl.w	801a704 <_scanf_float+0x60>
 801a8ec:	f1b9 0f00 	cmp.w	r9, #0
 801a8f0:	f43f af0f 	beq.w	801a712 <_scanf_float+0x6e>
 801a8f4:	0591      	lsls	r1, r2, #22
 801a8f6:	bf58      	it	pl
 801a8f8:	9901      	ldrpl	r1, [sp, #4]
 801a8fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a8fe:	bf58      	it	pl
 801a900:	eba9 0101 	subpl.w	r1, r9, r1
 801a904:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a908:	bf58      	it	pl
 801a90a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a90e:	6022      	str	r2, [r4, #0]
 801a910:	f04f 0900 	mov.w	r9, #0
 801a914:	e78a      	b.n	801a82c <_scanf_float+0x188>
 801a916:	f04f 0a03 	mov.w	sl, #3
 801a91a:	e787      	b.n	801a82c <_scanf_float+0x188>
 801a91c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a920:	4639      	mov	r1, r7
 801a922:	4640      	mov	r0, r8
 801a924:	4798      	blx	r3
 801a926:	2800      	cmp	r0, #0
 801a928:	f43f aedf 	beq.w	801a6ea <_scanf_float+0x46>
 801a92c:	e6ea      	b.n	801a704 <_scanf_float+0x60>
 801a92e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a936:	463a      	mov	r2, r7
 801a938:	4640      	mov	r0, r8
 801a93a:	4798      	blx	r3
 801a93c:	6923      	ldr	r3, [r4, #16]
 801a93e:	3b01      	subs	r3, #1
 801a940:	6123      	str	r3, [r4, #16]
 801a942:	e6ec      	b.n	801a71e <_scanf_float+0x7a>
 801a944:	1e6b      	subs	r3, r5, #1
 801a946:	2b06      	cmp	r3, #6
 801a948:	d825      	bhi.n	801a996 <_scanf_float+0x2f2>
 801a94a:	2d02      	cmp	r5, #2
 801a94c:	d836      	bhi.n	801a9bc <_scanf_float+0x318>
 801a94e:	455e      	cmp	r6, fp
 801a950:	f67f aee8 	bls.w	801a724 <_scanf_float+0x80>
 801a954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a958:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a95c:	463a      	mov	r2, r7
 801a95e:	4640      	mov	r0, r8
 801a960:	4798      	blx	r3
 801a962:	6923      	ldr	r3, [r4, #16]
 801a964:	3b01      	subs	r3, #1
 801a966:	6123      	str	r3, [r4, #16]
 801a968:	e7f1      	b.n	801a94e <_scanf_float+0x2aa>
 801a96a:	9802      	ldr	r0, [sp, #8]
 801a96c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a970:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a974:	9002      	str	r0, [sp, #8]
 801a976:	463a      	mov	r2, r7
 801a978:	4640      	mov	r0, r8
 801a97a:	4798      	blx	r3
 801a97c:	6923      	ldr	r3, [r4, #16]
 801a97e:	3b01      	subs	r3, #1
 801a980:	6123      	str	r3, [r4, #16]
 801a982:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a986:	fa5f fa8a 	uxtb.w	sl, sl
 801a98a:	f1ba 0f02 	cmp.w	sl, #2
 801a98e:	d1ec      	bne.n	801a96a <_scanf_float+0x2c6>
 801a990:	3d03      	subs	r5, #3
 801a992:	b2ed      	uxtb	r5, r5
 801a994:	1b76      	subs	r6, r6, r5
 801a996:	6823      	ldr	r3, [r4, #0]
 801a998:	05da      	lsls	r2, r3, #23
 801a99a:	d52f      	bpl.n	801a9fc <_scanf_float+0x358>
 801a99c:	055b      	lsls	r3, r3, #21
 801a99e:	d510      	bpl.n	801a9c2 <_scanf_float+0x31e>
 801a9a0:	455e      	cmp	r6, fp
 801a9a2:	f67f aebf 	bls.w	801a724 <_scanf_float+0x80>
 801a9a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a9ae:	463a      	mov	r2, r7
 801a9b0:	4640      	mov	r0, r8
 801a9b2:	4798      	blx	r3
 801a9b4:	6923      	ldr	r3, [r4, #16]
 801a9b6:	3b01      	subs	r3, #1
 801a9b8:	6123      	str	r3, [r4, #16]
 801a9ba:	e7f1      	b.n	801a9a0 <_scanf_float+0x2fc>
 801a9bc:	46aa      	mov	sl, r5
 801a9be:	9602      	str	r6, [sp, #8]
 801a9c0:	e7df      	b.n	801a982 <_scanf_float+0x2de>
 801a9c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a9c6:	6923      	ldr	r3, [r4, #16]
 801a9c8:	2965      	cmp	r1, #101	; 0x65
 801a9ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a9ce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a9d2:	6123      	str	r3, [r4, #16]
 801a9d4:	d00c      	beq.n	801a9f0 <_scanf_float+0x34c>
 801a9d6:	2945      	cmp	r1, #69	; 0x45
 801a9d8:	d00a      	beq.n	801a9f0 <_scanf_float+0x34c>
 801a9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9de:	463a      	mov	r2, r7
 801a9e0:	4640      	mov	r0, r8
 801a9e2:	4798      	blx	r3
 801a9e4:	6923      	ldr	r3, [r4, #16]
 801a9e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a9ea:	3b01      	subs	r3, #1
 801a9ec:	1eb5      	subs	r5, r6, #2
 801a9ee:	6123      	str	r3, [r4, #16]
 801a9f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9f4:	463a      	mov	r2, r7
 801a9f6:	4640      	mov	r0, r8
 801a9f8:	4798      	blx	r3
 801a9fa:	462e      	mov	r6, r5
 801a9fc:	6825      	ldr	r5, [r4, #0]
 801a9fe:	f015 0510 	ands.w	r5, r5, #16
 801aa02:	d158      	bne.n	801aab6 <_scanf_float+0x412>
 801aa04:	7035      	strb	r5, [r6, #0]
 801aa06:	6823      	ldr	r3, [r4, #0]
 801aa08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801aa0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aa10:	d11c      	bne.n	801aa4c <_scanf_float+0x3a8>
 801aa12:	9b01      	ldr	r3, [sp, #4]
 801aa14:	454b      	cmp	r3, r9
 801aa16:	eba3 0209 	sub.w	r2, r3, r9
 801aa1a:	d124      	bne.n	801aa66 <_scanf_float+0x3c2>
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	4659      	mov	r1, fp
 801aa20:	4640      	mov	r0, r8
 801aa22:	f000 ff77 	bl	801b914 <_strtod_r>
 801aa26:	9b03      	ldr	r3, [sp, #12]
 801aa28:	6821      	ldr	r1, [r4, #0]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	f011 0f02 	tst.w	r1, #2
 801aa30:	ec57 6b10 	vmov	r6, r7, d0
 801aa34:	f103 0204 	add.w	r2, r3, #4
 801aa38:	d020      	beq.n	801aa7c <_scanf_float+0x3d8>
 801aa3a:	9903      	ldr	r1, [sp, #12]
 801aa3c:	600a      	str	r2, [r1, #0]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	e9c3 6700 	strd	r6, r7, [r3]
 801aa44:	68e3      	ldr	r3, [r4, #12]
 801aa46:	3301      	adds	r3, #1
 801aa48:	60e3      	str	r3, [r4, #12]
 801aa4a:	e66c      	b.n	801a726 <_scanf_float+0x82>
 801aa4c:	9b04      	ldr	r3, [sp, #16]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d0e4      	beq.n	801aa1c <_scanf_float+0x378>
 801aa52:	9905      	ldr	r1, [sp, #20]
 801aa54:	230a      	movs	r3, #10
 801aa56:	462a      	mov	r2, r5
 801aa58:	3101      	adds	r1, #1
 801aa5a:	4640      	mov	r0, r8
 801aa5c:	f000 ffe4 	bl	801ba28 <_strtol_r>
 801aa60:	9b04      	ldr	r3, [sp, #16]
 801aa62:	9e05      	ldr	r6, [sp, #20]
 801aa64:	1ac2      	subs	r2, r0, r3
 801aa66:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801aa6a:	429e      	cmp	r6, r3
 801aa6c:	bf28      	it	cs
 801aa6e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801aa72:	4912      	ldr	r1, [pc, #72]	; (801aabc <_scanf_float+0x418>)
 801aa74:	4630      	mov	r0, r6
 801aa76:	f000 f8b5 	bl	801abe4 <siprintf>
 801aa7a:	e7cf      	b.n	801aa1c <_scanf_float+0x378>
 801aa7c:	f011 0f04 	tst.w	r1, #4
 801aa80:	9903      	ldr	r1, [sp, #12]
 801aa82:	600a      	str	r2, [r1, #0]
 801aa84:	d1db      	bne.n	801aa3e <_scanf_float+0x39a>
 801aa86:	f8d3 8000 	ldr.w	r8, [r3]
 801aa8a:	ee10 2a10 	vmov	r2, s0
 801aa8e:	ee10 0a10 	vmov	r0, s0
 801aa92:	463b      	mov	r3, r7
 801aa94:	4639      	mov	r1, r7
 801aa96:	f7e6 f849 	bl	8000b2c <__aeabi_dcmpun>
 801aa9a:	b128      	cbz	r0, 801aaa8 <_scanf_float+0x404>
 801aa9c:	4808      	ldr	r0, [pc, #32]	; (801aac0 <_scanf_float+0x41c>)
 801aa9e:	f000 f829 	bl	801aaf4 <nanf>
 801aaa2:	ed88 0a00 	vstr	s0, [r8]
 801aaa6:	e7cd      	b.n	801aa44 <_scanf_float+0x3a0>
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	4639      	mov	r1, r7
 801aaac:	f7e6 f89c 	bl	8000be8 <__aeabi_d2f>
 801aab0:	f8c8 0000 	str.w	r0, [r8]
 801aab4:	e7c6      	b.n	801aa44 <_scanf_float+0x3a0>
 801aab6:	2500      	movs	r5, #0
 801aab8:	e635      	b.n	801a726 <_scanf_float+0x82>
 801aaba:	bf00      	nop
 801aabc:	08020328 	.word	0x08020328
 801aac0:	08020740 	.word	0x08020740

0801aac4 <realloc>:
 801aac4:	4b02      	ldr	r3, [pc, #8]	; (801aad0 <realloc+0xc>)
 801aac6:	460a      	mov	r2, r1
 801aac8:	4601      	mov	r1, r0
 801aaca:	6818      	ldr	r0, [r3, #0]
 801aacc:	f002 beb6 	b.w	801d83c <_realloc_r>
 801aad0:	200000c4 	.word	0x200000c4

0801aad4 <_sbrk_r>:
 801aad4:	b538      	push	{r3, r4, r5, lr}
 801aad6:	4d06      	ldr	r5, [pc, #24]	; (801aaf0 <_sbrk_r+0x1c>)
 801aad8:	2300      	movs	r3, #0
 801aada:	4604      	mov	r4, r0
 801aadc:	4608      	mov	r0, r1
 801aade:	602b      	str	r3, [r5, #0]
 801aae0:	f7f2 fa5a 	bl	800cf98 <_sbrk>
 801aae4:	1c43      	adds	r3, r0, #1
 801aae6:	d102      	bne.n	801aaee <_sbrk_r+0x1a>
 801aae8:	682b      	ldr	r3, [r5, #0]
 801aaea:	b103      	cbz	r3, 801aaee <_sbrk_r+0x1a>
 801aaec:	6023      	str	r3, [r4, #0]
 801aaee:	bd38      	pop	{r3, r4, r5, pc}
 801aaf0:	2000a6d4 	.word	0x2000a6d4

0801aaf4 <nanf>:
 801aaf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aafc <nanf+0x8>
 801aaf8:	4770      	bx	lr
 801aafa:	bf00      	nop
 801aafc:	7fc00000 	.word	0x7fc00000

0801ab00 <scalbnf>:
 801ab00:	ee10 3a10 	vmov	r3, s0
 801ab04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ab08:	d025      	beq.n	801ab56 <scalbnf+0x56>
 801ab0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ab0e:	d302      	bcc.n	801ab16 <scalbnf+0x16>
 801ab10:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab14:	4770      	bx	lr
 801ab16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ab1a:	d122      	bne.n	801ab62 <scalbnf+0x62>
 801ab1c:	4b2a      	ldr	r3, [pc, #168]	; (801abc8 <scalbnf+0xc8>)
 801ab1e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801abcc <scalbnf+0xcc>
 801ab22:	4298      	cmp	r0, r3
 801ab24:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab28:	db16      	blt.n	801ab58 <scalbnf+0x58>
 801ab2a:	ee10 3a10 	vmov	r3, s0
 801ab2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ab32:	3a19      	subs	r2, #25
 801ab34:	4402      	add	r2, r0
 801ab36:	2afe      	cmp	r2, #254	; 0xfe
 801ab38:	dd15      	ble.n	801ab66 <scalbnf+0x66>
 801ab3a:	ee10 3a10 	vmov	r3, s0
 801ab3e:	eddf 7a24 	vldr	s15, [pc, #144]	; 801abd0 <scalbnf+0xd0>
 801ab42:	eddf 6a24 	vldr	s13, [pc, #144]	; 801abd4 <scalbnf+0xd4>
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	eeb0 7a67 	vmov.f32	s14, s15
 801ab4c:	bfb8      	it	lt
 801ab4e:	eef0 7a66 	vmovlt.f32	s15, s13
 801ab52:	ee27 0a27 	vmul.f32	s0, s14, s15
 801ab56:	4770      	bx	lr
 801ab58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801abd8 <scalbnf+0xd8>
 801ab5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab60:	4770      	bx	lr
 801ab62:	0dd2      	lsrs	r2, r2, #23
 801ab64:	e7e6      	b.n	801ab34 <scalbnf+0x34>
 801ab66:	2a00      	cmp	r2, #0
 801ab68:	dd06      	ble.n	801ab78 <scalbnf+0x78>
 801ab6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ab72:	ee00 3a10 	vmov	s0, r3
 801ab76:	4770      	bx	lr
 801ab78:	f112 0f16 	cmn.w	r2, #22
 801ab7c:	da1a      	bge.n	801abb4 <scalbnf+0xb4>
 801ab7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab82:	4298      	cmp	r0, r3
 801ab84:	ee10 3a10 	vmov	r3, s0
 801ab88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ab8c:	dd0a      	ble.n	801aba4 <scalbnf+0xa4>
 801ab8e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801abd0 <scalbnf+0xd0>
 801ab92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801abd4 <scalbnf+0xd4>
 801ab96:	eef0 7a40 	vmov.f32	s15, s0
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	bf18      	it	ne
 801ab9e:	eeb0 0a47 	vmovne.f32	s0, s14
 801aba2:	e7db      	b.n	801ab5c <scalbnf+0x5c>
 801aba4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801abd8 <scalbnf+0xd8>
 801aba8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801abdc <scalbnf+0xdc>
 801abac:	eef0 7a40 	vmov.f32	s15, s0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	e7f3      	b.n	801ab9c <scalbnf+0x9c>
 801abb4:	3219      	adds	r2, #25
 801abb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801abbe:	eddf 7a08 	vldr	s15, [pc, #32]	; 801abe0 <scalbnf+0xe0>
 801abc2:	ee07 3a10 	vmov	s14, r3
 801abc6:	e7c4      	b.n	801ab52 <scalbnf+0x52>
 801abc8:	ffff3cb0 	.word	0xffff3cb0
 801abcc:	4c000000 	.word	0x4c000000
 801abd0:	7149f2ca 	.word	0x7149f2ca
 801abd4:	f149f2ca 	.word	0xf149f2ca
 801abd8:	0da24260 	.word	0x0da24260
 801abdc:	8da24260 	.word	0x8da24260
 801abe0:	33000000 	.word	0x33000000

0801abe4 <siprintf>:
 801abe4:	b40e      	push	{r1, r2, r3}
 801abe6:	b500      	push	{lr}
 801abe8:	b09c      	sub	sp, #112	; 0x70
 801abea:	ab1d      	add	r3, sp, #116	; 0x74
 801abec:	9002      	str	r0, [sp, #8]
 801abee:	9006      	str	r0, [sp, #24]
 801abf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801abf4:	4809      	ldr	r0, [pc, #36]	; (801ac1c <siprintf+0x38>)
 801abf6:	9107      	str	r1, [sp, #28]
 801abf8:	9104      	str	r1, [sp, #16]
 801abfa:	4909      	ldr	r1, [pc, #36]	; (801ac20 <siprintf+0x3c>)
 801abfc:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac00:	9105      	str	r1, [sp, #20]
 801ac02:	6800      	ldr	r0, [r0, #0]
 801ac04:	9301      	str	r3, [sp, #4]
 801ac06:	a902      	add	r1, sp, #8
 801ac08:	f002 fe9a 	bl	801d940 <_svfiprintf_r>
 801ac0c:	9b02      	ldr	r3, [sp, #8]
 801ac0e:	2200      	movs	r2, #0
 801ac10:	701a      	strb	r2, [r3, #0]
 801ac12:	b01c      	add	sp, #112	; 0x70
 801ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac18:	b003      	add	sp, #12
 801ac1a:	4770      	bx	lr
 801ac1c:	200000c4 	.word	0x200000c4
 801ac20:	ffff0208 	.word	0xffff0208

0801ac24 <__sread>:
 801ac24:	b510      	push	{r4, lr}
 801ac26:	460c      	mov	r4, r1
 801ac28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac2c:	f002 ff88 	bl	801db40 <_read_r>
 801ac30:	2800      	cmp	r0, #0
 801ac32:	bfab      	itete	ge
 801ac34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac36:	89a3      	ldrhlt	r3, [r4, #12]
 801ac38:	181b      	addge	r3, r3, r0
 801ac3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac3e:	bfac      	ite	ge
 801ac40:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac42:	81a3      	strhlt	r3, [r4, #12]
 801ac44:	bd10      	pop	{r4, pc}

0801ac46 <__swrite>:
 801ac46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac4a:	461f      	mov	r7, r3
 801ac4c:	898b      	ldrh	r3, [r1, #12]
 801ac4e:	05db      	lsls	r3, r3, #23
 801ac50:	4605      	mov	r5, r0
 801ac52:	460c      	mov	r4, r1
 801ac54:	4616      	mov	r6, r2
 801ac56:	d505      	bpl.n	801ac64 <__swrite+0x1e>
 801ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac5c:	2302      	movs	r3, #2
 801ac5e:	2200      	movs	r2, #0
 801ac60:	f002 f8f2 	bl	801ce48 <_lseek_r>
 801ac64:	89a3      	ldrh	r3, [r4, #12]
 801ac66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac6e:	81a3      	strh	r3, [r4, #12]
 801ac70:	4632      	mov	r2, r6
 801ac72:	463b      	mov	r3, r7
 801ac74:	4628      	mov	r0, r5
 801ac76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac7a:	f000 bed7 	b.w	801ba2c <_write_r>

0801ac7e <__sseek>:
 801ac7e:	b510      	push	{r4, lr}
 801ac80:	460c      	mov	r4, r1
 801ac82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac86:	f002 f8df 	bl	801ce48 <_lseek_r>
 801ac8a:	1c43      	adds	r3, r0, #1
 801ac8c:	89a3      	ldrh	r3, [r4, #12]
 801ac8e:	bf15      	itete	ne
 801ac90:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac9a:	81a3      	strheq	r3, [r4, #12]
 801ac9c:	bf18      	it	ne
 801ac9e:	81a3      	strhne	r3, [r4, #12]
 801aca0:	bd10      	pop	{r4, pc}

0801aca2 <__sclose>:
 801aca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aca6:	f000 bed3 	b.w	801ba50 <_close_r>

0801acaa <strcat>:
 801acaa:	b510      	push	{r4, lr}
 801acac:	4602      	mov	r2, r0
 801acae:	7814      	ldrb	r4, [r2, #0]
 801acb0:	4613      	mov	r3, r2
 801acb2:	3201      	adds	r2, #1
 801acb4:	2c00      	cmp	r4, #0
 801acb6:	d1fa      	bne.n	801acae <strcat+0x4>
 801acb8:	3b01      	subs	r3, #1
 801acba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801acc2:	2a00      	cmp	r2, #0
 801acc4:	d1f9      	bne.n	801acba <strcat+0x10>
 801acc6:	bd10      	pop	{r4, pc}

0801acc8 <sulp>:
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	4604      	mov	r4, r0
 801accc:	460d      	mov	r5, r1
 801acce:	ec45 4b10 	vmov	d0, r4, r5
 801acd2:	4616      	mov	r6, r2
 801acd4:	f002 fc54 	bl	801d580 <__ulp>
 801acd8:	ec51 0b10 	vmov	r0, r1, d0
 801acdc:	b17e      	cbz	r6, 801acfe <sulp+0x36>
 801acde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ace2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	dd09      	ble.n	801acfe <sulp+0x36>
 801acea:	051b      	lsls	r3, r3, #20
 801acec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801acf0:	2400      	movs	r4, #0
 801acf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801acf6:	4622      	mov	r2, r4
 801acf8:	462b      	mov	r3, r5
 801acfa:	f7e5 fc7d 	bl	80005f8 <__aeabi_dmul>
 801acfe:	bd70      	pop	{r4, r5, r6, pc}

0801ad00 <_strtod_l>:
 801ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad04:	b0a3      	sub	sp, #140	; 0x8c
 801ad06:	461f      	mov	r7, r3
 801ad08:	2300      	movs	r3, #0
 801ad0a:	931e      	str	r3, [sp, #120]	; 0x78
 801ad0c:	4ba4      	ldr	r3, [pc, #656]	; (801afa0 <_strtod_l+0x2a0>)
 801ad0e:	9219      	str	r2, [sp, #100]	; 0x64
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	9307      	str	r3, [sp, #28]
 801ad14:	4604      	mov	r4, r0
 801ad16:	4618      	mov	r0, r3
 801ad18:	4688      	mov	r8, r1
 801ad1a:	f7e5 fa59 	bl	80001d0 <strlen>
 801ad1e:	f04f 0a00 	mov.w	sl, #0
 801ad22:	4605      	mov	r5, r0
 801ad24:	f04f 0b00 	mov.w	fp, #0
 801ad28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ad2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad2e:	781a      	ldrb	r2, [r3, #0]
 801ad30:	2a2b      	cmp	r2, #43	; 0x2b
 801ad32:	d04c      	beq.n	801adce <_strtod_l+0xce>
 801ad34:	d839      	bhi.n	801adaa <_strtod_l+0xaa>
 801ad36:	2a0d      	cmp	r2, #13
 801ad38:	d832      	bhi.n	801ada0 <_strtod_l+0xa0>
 801ad3a:	2a08      	cmp	r2, #8
 801ad3c:	d832      	bhi.n	801ada4 <_strtod_l+0xa4>
 801ad3e:	2a00      	cmp	r2, #0
 801ad40:	d03c      	beq.n	801adbc <_strtod_l+0xbc>
 801ad42:	2300      	movs	r3, #0
 801ad44:	930e      	str	r3, [sp, #56]	; 0x38
 801ad46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ad48:	7833      	ldrb	r3, [r6, #0]
 801ad4a:	2b30      	cmp	r3, #48	; 0x30
 801ad4c:	f040 80b4 	bne.w	801aeb8 <_strtod_l+0x1b8>
 801ad50:	7873      	ldrb	r3, [r6, #1]
 801ad52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ad56:	2b58      	cmp	r3, #88	; 0x58
 801ad58:	d16c      	bne.n	801ae34 <_strtod_l+0x134>
 801ad5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad5c:	9301      	str	r3, [sp, #4]
 801ad5e:	ab1e      	add	r3, sp, #120	; 0x78
 801ad60:	9702      	str	r7, [sp, #8]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	4a8f      	ldr	r2, [pc, #572]	; (801afa4 <_strtod_l+0x2a4>)
 801ad66:	ab1f      	add	r3, sp, #124	; 0x7c
 801ad68:	a91d      	add	r1, sp, #116	; 0x74
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	f001 fd60 	bl	801c830 <__gethex>
 801ad70:	f010 0707 	ands.w	r7, r0, #7
 801ad74:	4605      	mov	r5, r0
 801ad76:	d005      	beq.n	801ad84 <_strtod_l+0x84>
 801ad78:	2f06      	cmp	r7, #6
 801ad7a:	d12a      	bne.n	801add2 <_strtod_l+0xd2>
 801ad7c:	3601      	adds	r6, #1
 801ad7e:	2300      	movs	r3, #0
 801ad80:	961d      	str	r6, [sp, #116]	; 0x74
 801ad82:	930e      	str	r3, [sp, #56]	; 0x38
 801ad84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	f040 8596 	bne.w	801b8b8 <_strtod_l+0xbb8>
 801ad8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad8e:	b1db      	cbz	r3, 801adc8 <_strtod_l+0xc8>
 801ad90:	4652      	mov	r2, sl
 801ad92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ad96:	ec43 2b10 	vmov	d0, r2, r3
 801ad9a:	b023      	add	sp, #140	; 0x8c
 801ad9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ada0:	2a20      	cmp	r2, #32
 801ada2:	d1ce      	bne.n	801ad42 <_strtod_l+0x42>
 801ada4:	3301      	adds	r3, #1
 801ada6:	931d      	str	r3, [sp, #116]	; 0x74
 801ada8:	e7c0      	b.n	801ad2c <_strtod_l+0x2c>
 801adaa:	2a2d      	cmp	r2, #45	; 0x2d
 801adac:	d1c9      	bne.n	801ad42 <_strtod_l+0x42>
 801adae:	2201      	movs	r2, #1
 801adb0:	920e      	str	r2, [sp, #56]	; 0x38
 801adb2:	1c5a      	adds	r2, r3, #1
 801adb4:	921d      	str	r2, [sp, #116]	; 0x74
 801adb6:	785b      	ldrb	r3, [r3, #1]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d1c4      	bne.n	801ad46 <_strtod_l+0x46>
 801adbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801adbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	f040 8576 	bne.w	801b8b4 <_strtod_l+0xbb4>
 801adc8:	4652      	mov	r2, sl
 801adca:	465b      	mov	r3, fp
 801adcc:	e7e3      	b.n	801ad96 <_strtod_l+0x96>
 801adce:	2200      	movs	r2, #0
 801add0:	e7ee      	b.n	801adb0 <_strtod_l+0xb0>
 801add2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801add4:	b13a      	cbz	r2, 801ade6 <_strtod_l+0xe6>
 801add6:	2135      	movs	r1, #53	; 0x35
 801add8:	a820      	add	r0, sp, #128	; 0x80
 801adda:	f002 fcdc 	bl	801d796 <__copybits>
 801adde:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ade0:	4620      	mov	r0, r4
 801ade2:	f002 f8a1 	bl	801cf28 <_Bfree>
 801ade6:	3f01      	subs	r7, #1
 801ade8:	2f05      	cmp	r7, #5
 801adea:	d807      	bhi.n	801adfc <_strtod_l+0xfc>
 801adec:	e8df f007 	tbb	[pc, r7]
 801adf0:	1d180b0e 	.word	0x1d180b0e
 801adf4:	030e      	.short	0x030e
 801adf6:	f04f 0b00 	mov.w	fp, #0
 801adfa:	46da      	mov	sl, fp
 801adfc:	0728      	lsls	r0, r5, #28
 801adfe:	d5c1      	bpl.n	801ad84 <_strtod_l+0x84>
 801ae00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ae04:	e7be      	b.n	801ad84 <_strtod_l+0x84>
 801ae06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ae0a:	e7f7      	b.n	801adfc <_strtod_l+0xfc>
 801ae0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ae10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ae12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ae16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ae1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ae1e:	e7ed      	b.n	801adfc <_strtod_l+0xfc>
 801ae20:	f8df b184 	ldr.w	fp, [pc, #388]	; 801afa8 <_strtod_l+0x2a8>
 801ae24:	f04f 0a00 	mov.w	sl, #0
 801ae28:	e7e8      	b.n	801adfc <_strtod_l+0xfc>
 801ae2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ae2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ae32:	e7e3      	b.n	801adfc <_strtod_l+0xfc>
 801ae34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae36:	1c5a      	adds	r2, r3, #1
 801ae38:	921d      	str	r2, [sp, #116]	; 0x74
 801ae3a:	785b      	ldrb	r3, [r3, #1]
 801ae3c:	2b30      	cmp	r3, #48	; 0x30
 801ae3e:	d0f9      	beq.n	801ae34 <_strtod_l+0x134>
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d09f      	beq.n	801ad84 <_strtod_l+0x84>
 801ae44:	2301      	movs	r3, #1
 801ae46:	f04f 0900 	mov.w	r9, #0
 801ae4a:	9304      	str	r3, [sp, #16]
 801ae4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ae50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ae54:	464f      	mov	r7, r9
 801ae56:	220a      	movs	r2, #10
 801ae58:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ae5a:	7806      	ldrb	r6, [r0, #0]
 801ae5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ae60:	b2d9      	uxtb	r1, r3
 801ae62:	2909      	cmp	r1, #9
 801ae64:	d92a      	bls.n	801aebc <_strtod_l+0x1bc>
 801ae66:	9907      	ldr	r1, [sp, #28]
 801ae68:	462a      	mov	r2, r5
 801ae6a:	f002 fe92 	bl	801db92 <strncmp>
 801ae6e:	b398      	cbz	r0, 801aed8 <_strtod_l+0x1d8>
 801ae70:	2000      	movs	r0, #0
 801ae72:	4633      	mov	r3, r6
 801ae74:	463d      	mov	r5, r7
 801ae76:	9007      	str	r0, [sp, #28]
 801ae78:	4602      	mov	r2, r0
 801ae7a:	2b65      	cmp	r3, #101	; 0x65
 801ae7c:	d001      	beq.n	801ae82 <_strtod_l+0x182>
 801ae7e:	2b45      	cmp	r3, #69	; 0x45
 801ae80:	d118      	bne.n	801aeb4 <_strtod_l+0x1b4>
 801ae82:	b91d      	cbnz	r5, 801ae8c <_strtod_l+0x18c>
 801ae84:	9b04      	ldr	r3, [sp, #16]
 801ae86:	4303      	orrs	r3, r0
 801ae88:	d098      	beq.n	801adbc <_strtod_l+0xbc>
 801ae8a:	2500      	movs	r5, #0
 801ae8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ae90:	f108 0301 	add.w	r3, r8, #1
 801ae94:	931d      	str	r3, [sp, #116]	; 0x74
 801ae96:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ae9a:	2b2b      	cmp	r3, #43	; 0x2b
 801ae9c:	d075      	beq.n	801af8a <_strtod_l+0x28a>
 801ae9e:	2b2d      	cmp	r3, #45	; 0x2d
 801aea0:	d07b      	beq.n	801af9a <_strtod_l+0x29a>
 801aea2:	f04f 0c00 	mov.w	ip, #0
 801aea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801aeaa:	2909      	cmp	r1, #9
 801aeac:	f240 8082 	bls.w	801afb4 <_strtod_l+0x2b4>
 801aeb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801aeb4:	2600      	movs	r6, #0
 801aeb6:	e09d      	b.n	801aff4 <_strtod_l+0x2f4>
 801aeb8:	2300      	movs	r3, #0
 801aeba:	e7c4      	b.n	801ae46 <_strtod_l+0x146>
 801aebc:	2f08      	cmp	r7, #8
 801aebe:	bfd8      	it	le
 801aec0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801aec2:	f100 0001 	add.w	r0, r0, #1
 801aec6:	bfda      	itte	le
 801aec8:	fb02 3301 	mlale	r3, r2, r1, r3
 801aecc:	9309      	strle	r3, [sp, #36]	; 0x24
 801aece:	fb02 3909 	mlagt	r9, r2, r9, r3
 801aed2:	3701      	adds	r7, #1
 801aed4:	901d      	str	r0, [sp, #116]	; 0x74
 801aed6:	e7bf      	b.n	801ae58 <_strtod_l+0x158>
 801aed8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aeda:	195a      	adds	r2, r3, r5
 801aedc:	921d      	str	r2, [sp, #116]	; 0x74
 801aede:	5d5b      	ldrb	r3, [r3, r5]
 801aee0:	2f00      	cmp	r7, #0
 801aee2:	d037      	beq.n	801af54 <_strtod_l+0x254>
 801aee4:	9007      	str	r0, [sp, #28]
 801aee6:	463d      	mov	r5, r7
 801aee8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801aeec:	2a09      	cmp	r2, #9
 801aeee:	d912      	bls.n	801af16 <_strtod_l+0x216>
 801aef0:	2201      	movs	r2, #1
 801aef2:	e7c2      	b.n	801ae7a <_strtod_l+0x17a>
 801aef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aef6:	1c5a      	adds	r2, r3, #1
 801aef8:	921d      	str	r2, [sp, #116]	; 0x74
 801aefa:	785b      	ldrb	r3, [r3, #1]
 801aefc:	3001      	adds	r0, #1
 801aefe:	2b30      	cmp	r3, #48	; 0x30
 801af00:	d0f8      	beq.n	801aef4 <_strtod_l+0x1f4>
 801af02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801af06:	2a08      	cmp	r2, #8
 801af08:	f200 84db 	bhi.w	801b8c2 <_strtod_l+0xbc2>
 801af0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801af0e:	9007      	str	r0, [sp, #28]
 801af10:	2000      	movs	r0, #0
 801af12:	920a      	str	r2, [sp, #40]	; 0x28
 801af14:	4605      	mov	r5, r0
 801af16:	3b30      	subs	r3, #48	; 0x30
 801af18:	f100 0201 	add.w	r2, r0, #1
 801af1c:	d014      	beq.n	801af48 <_strtod_l+0x248>
 801af1e:	9907      	ldr	r1, [sp, #28]
 801af20:	4411      	add	r1, r2
 801af22:	9107      	str	r1, [sp, #28]
 801af24:	462a      	mov	r2, r5
 801af26:	eb00 0e05 	add.w	lr, r0, r5
 801af2a:	210a      	movs	r1, #10
 801af2c:	4572      	cmp	r2, lr
 801af2e:	d113      	bne.n	801af58 <_strtod_l+0x258>
 801af30:	182a      	adds	r2, r5, r0
 801af32:	2a08      	cmp	r2, #8
 801af34:	f105 0501 	add.w	r5, r5, #1
 801af38:	4405      	add	r5, r0
 801af3a:	dc1c      	bgt.n	801af76 <_strtod_l+0x276>
 801af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af3e:	220a      	movs	r2, #10
 801af40:	fb02 3301 	mla	r3, r2, r1, r3
 801af44:	9309      	str	r3, [sp, #36]	; 0x24
 801af46:	2200      	movs	r2, #0
 801af48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af4a:	1c59      	adds	r1, r3, #1
 801af4c:	911d      	str	r1, [sp, #116]	; 0x74
 801af4e:	785b      	ldrb	r3, [r3, #1]
 801af50:	4610      	mov	r0, r2
 801af52:	e7c9      	b.n	801aee8 <_strtod_l+0x1e8>
 801af54:	4638      	mov	r0, r7
 801af56:	e7d2      	b.n	801aefe <_strtod_l+0x1fe>
 801af58:	2a08      	cmp	r2, #8
 801af5a:	dc04      	bgt.n	801af66 <_strtod_l+0x266>
 801af5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801af5e:	434e      	muls	r6, r1
 801af60:	9609      	str	r6, [sp, #36]	; 0x24
 801af62:	3201      	adds	r2, #1
 801af64:	e7e2      	b.n	801af2c <_strtod_l+0x22c>
 801af66:	f102 0c01 	add.w	ip, r2, #1
 801af6a:	f1bc 0f10 	cmp.w	ip, #16
 801af6e:	bfd8      	it	le
 801af70:	fb01 f909 	mulle.w	r9, r1, r9
 801af74:	e7f5      	b.n	801af62 <_strtod_l+0x262>
 801af76:	2d10      	cmp	r5, #16
 801af78:	bfdc      	itt	le
 801af7a:	220a      	movle	r2, #10
 801af7c:	fb02 3909 	mlale	r9, r2, r9, r3
 801af80:	e7e1      	b.n	801af46 <_strtod_l+0x246>
 801af82:	2300      	movs	r3, #0
 801af84:	9307      	str	r3, [sp, #28]
 801af86:	2201      	movs	r2, #1
 801af88:	e77c      	b.n	801ae84 <_strtod_l+0x184>
 801af8a:	f04f 0c00 	mov.w	ip, #0
 801af8e:	f108 0302 	add.w	r3, r8, #2
 801af92:	931d      	str	r3, [sp, #116]	; 0x74
 801af94:	f898 3002 	ldrb.w	r3, [r8, #2]
 801af98:	e785      	b.n	801aea6 <_strtod_l+0x1a6>
 801af9a:	f04f 0c01 	mov.w	ip, #1
 801af9e:	e7f6      	b.n	801af8e <_strtod_l+0x28e>
 801afa0:	08020580 	.word	0x08020580
 801afa4:	08020330 	.word	0x08020330
 801afa8:	7ff00000 	.word	0x7ff00000
 801afac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801afae:	1c59      	adds	r1, r3, #1
 801afb0:	911d      	str	r1, [sp, #116]	; 0x74
 801afb2:	785b      	ldrb	r3, [r3, #1]
 801afb4:	2b30      	cmp	r3, #48	; 0x30
 801afb6:	d0f9      	beq.n	801afac <_strtod_l+0x2ac>
 801afb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801afbc:	2908      	cmp	r1, #8
 801afbe:	f63f af79 	bhi.w	801aeb4 <_strtod_l+0x1b4>
 801afc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801afc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801afc8:	9308      	str	r3, [sp, #32]
 801afca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801afcc:	1c59      	adds	r1, r3, #1
 801afce:	911d      	str	r1, [sp, #116]	; 0x74
 801afd0:	785b      	ldrb	r3, [r3, #1]
 801afd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801afd6:	2e09      	cmp	r6, #9
 801afd8:	d937      	bls.n	801b04a <_strtod_l+0x34a>
 801afda:	9e08      	ldr	r6, [sp, #32]
 801afdc:	1b89      	subs	r1, r1, r6
 801afde:	2908      	cmp	r1, #8
 801afe0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801afe4:	dc02      	bgt.n	801afec <_strtod_l+0x2ec>
 801afe6:	4576      	cmp	r6, lr
 801afe8:	bfa8      	it	ge
 801afea:	4676      	movge	r6, lr
 801afec:	f1bc 0f00 	cmp.w	ip, #0
 801aff0:	d000      	beq.n	801aff4 <_strtod_l+0x2f4>
 801aff2:	4276      	negs	r6, r6
 801aff4:	2d00      	cmp	r5, #0
 801aff6:	d14f      	bne.n	801b098 <_strtod_l+0x398>
 801aff8:	9904      	ldr	r1, [sp, #16]
 801affa:	4301      	orrs	r1, r0
 801affc:	f47f aec2 	bne.w	801ad84 <_strtod_l+0x84>
 801b000:	2a00      	cmp	r2, #0
 801b002:	f47f aedb 	bne.w	801adbc <_strtod_l+0xbc>
 801b006:	2b69      	cmp	r3, #105	; 0x69
 801b008:	d027      	beq.n	801b05a <_strtod_l+0x35a>
 801b00a:	dc24      	bgt.n	801b056 <_strtod_l+0x356>
 801b00c:	2b49      	cmp	r3, #73	; 0x49
 801b00e:	d024      	beq.n	801b05a <_strtod_l+0x35a>
 801b010:	2b4e      	cmp	r3, #78	; 0x4e
 801b012:	f47f aed3 	bne.w	801adbc <_strtod_l+0xbc>
 801b016:	499e      	ldr	r1, [pc, #632]	; (801b290 <_strtod_l+0x590>)
 801b018:	a81d      	add	r0, sp, #116	; 0x74
 801b01a:	f001 fe61 	bl	801cce0 <__match>
 801b01e:	2800      	cmp	r0, #0
 801b020:	f43f aecc 	beq.w	801adbc <_strtod_l+0xbc>
 801b024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	2b28      	cmp	r3, #40	; 0x28
 801b02a:	d12d      	bne.n	801b088 <_strtod_l+0x388>
 801b02c:	4999      	ldr	r1, [pc, #612]	; (801b294 <_strtod_l+0x594>)
 801b02e:	aa20      	add	r2, sp, #128	; 0x80
 801b030:	a81d      	add	r0, sp, #116	; 0x74
 801b032:	f001 fe69 	bl	801cd08 <__hexnan>
 801b036:	2805      	cmp	r0, #5
 801b038:	d126      	bne.n	801b088 <_strtod_l+0x388>
 801b03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b03c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b040:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b044:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b048:	e69c      	b.n	801ad84 <_strtod_l+0x84>
 801b04a:	210a      	movs	r1, #10
 801b04c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b050:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b054:	e7b9      	b.n	801afca <_strtod_l+0x2ca>
 801b056:	2b6e      	cmp	r3, #110	; 0x6e
 801b058:	e7db      	b.n	801b012 <_strtod_l+0x312>
 801b05a:	498f      	ldr	r1, [pc, #572]	; (801b298 <_strtod_l+0x598>)
 801b05c:	a81d      	add	r0, sp, #116	; 0x74
 801b05e:	f001 fe3f 	bl	801cce0 <__match>
 801b062:	2800      	cmp	r0, #0
 801b064:	f43f aeaa 	beq.w	801adbc <_strtod_l+0xbc>
 801b068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b06a:	498c      	ldr	r1, [pc, #560]	; (801b29c <_strtod_l+0x59c>)
 801b06c:	3b01      	subs	r3, #1
 801b06e:	a81d      	add	r0, sp, #116	; 0x74
 801b070:	931d      	str	r3, [sp, #116]	; 0x74
 801b072:	f001 fe35 	bl	801cce0 <__match>
 801b076:	b910      	cbnz	r0, 801b07e <_strtod_l+0x37e>
 801b078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b07a:	3301      	adds	r3, #1
 801b07c:	931d      	str	r3, [sp, #116]	; 0x74
 801b07e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b2ac <_strtod_l+0x5ac>
 801b082:	f04f 0a00 	mov.w	sl, #0
 801b086:	e67d      	b.n	801ad84 <_strtod_l+0x84>
 801b088:	4885      	ldr	r0, [pc, #532]	; (801b2a0 <_strtod_l+0x5a0>)
 801b08a:	f002 fd6d 	bl	801db68 <nan>
 801b08e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b092:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b096:	e675      	b.n	801ad84 <_strtod_l+0x84>
 801b098:	9b07      	ldr	r3, [sp, #28]
 801b09a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b09c:	1af3      	subs	r3, r6, r3
 801b09e:	2f00      	cmp	r7, #0
 801b0a0:	bf08      	it	eq
 801b0a2:	462f      	moveq	r7, r5
 801b0a4:	2d10      	cmp	r5, #16
 801b0a6:	9308      	str	r3, [sp, #32]
 801b0a8:	46a8      	mov	r8, r5
 801b0aa:	bfa8      	it	ge
 801b0ac:	f04f 0810 	movge.w	r8, #16
 801b0b0:	f7e5 fa28 	bl	8000504 <__aeabi_ui2d>
 801b0b4:	2d09      	cmp	r5, #9
 801b0b6:	4682      	mov	sl, r0
 801b0b8:	468b      	mov	fp, r1
 801b0ba:	dd13      	ble.n	801b0e4 <_strtod_l+0x3e4>
 801b0bc:	4b79      	ldr	r3, [pc, #484]	; (801b2a4 <_strtod_l+0x5a4>)
 801b0be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b0c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b0c6:	f7e5 fa97 	bl	80005f8 <__aeabi_dmul>
 801b0ca:	4682      	mov	sl, r0
 801b0cc:	4648      	mov	r0, r9
 801b0ce:	468b      	mov	fp, r1
 801b0d0:	f7e5 fa18 	bl	8000504 <__aeabi_ui2d>
 801b0d4:	4602      	mov	r2, r0
 801b0d6:	460b      	mov	r3, r1
 801b0d8:	4650      	mov	r0, sl
 801b0da:	4659      	mov	r1, fp
 801b0dc:	f7e5 f8d6 	bl	800028c <__adddf3>
 801b0e0:	4682      	mov	sl, r0
 801b0e2:	468b      	mov	fp, r1
 801b0e4:	2d0f      	cmp	r5, #15
 801b0e6:	dc38      	bgt.n	801b15a <_strtod_l+0x45a>
 801b0e8:	9b08      	ldr	r3, [sp, #32]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	f43f ae4a 	beq.w	801ad84 <_strtod_l+0x84>
 801b0f0:	dd24      	ble.n	801b13c <_strtod_l+0x43c>
 801b0f2:	2b16      	cmp	r3, #22
 801b0f4:	dc0b      	bgt.n	801b10e <_strtod_l+0x40e>
 801b0f6:	4d6b      	ldr	r5, [pc, #428]	; (801b2a4 <_strtod_l+0x5a4>)
 801b0f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b0fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b100:	4652      	mov	r2, sl
 801b102:	465b      	mov	r3, fp
 801b104:	f7e5 fa78 	bl	80005f8 <__aeabi_dmul>
 801b108:	4682      	mov	sl, r0
 801b10a:	468b      	mov	fp, r1
 801b10c:	e63a      	b.n	801ad84 <_strtod_l+0x84>
 801b10e:	9a08      	ldr	r2, [sp, #32]
 801b110:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b114:	4293      	cmp	r3, r2
 801b116:	db20      	blt.n	801b15a <_strtod_l+0x45a>
 801b118:	4c62      	ldr	r4, [pc, #392]	; (801b2a4 <_strtod_l+0x5a4>)
 801b11a:	f1c5 050f 	rsb	r5, r5, #15
 801b11e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b122:	4652      	mov	r2, sl
 801b124:	465b      	mov	r3, fp
 801b126:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b12a:	f7e5 fa65 	bl	80005f8 <__aeabi_dmul>
 801b12e:	9b08      	ldr	r3, [sp, #32]
 801b130:	1b5d      	subs	r5, r3, r5
 801b132:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b136:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b13a:	e7e3      	b.n	801b104 <_strtod_l+0x404>
 801b13c:	9b08      	ldr	r3, [sp, #32]
 801b13e:	3316      	adds	r3, #22
 801b140:	db0b      	blt.n	801b15a <_strtod_l+0x45a>
 801b142:	9b07      	ldr	r3, [sp, #28]
 801b144:	4a57      	ldr	r2, [pc, #348]	; (801b2a4 <_strtod_l+0x5a4>)
 801b146:	1b9e      	subs	r6, r3, r6
 801b148:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b14c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b150:	4650      	mov	r0, sl
 801b152:	4659      	mov	r1, fp
 801b154:	f7e5 fb7a 	bl	800084c <__aeabi_ddiv>
 801b158:	e7d6      	b.n	801b108 <_strtod_l+0x408>
 801b15a:	9b08      	ldr	r3, [sp, #32]
 801b15c:	eba5 0808 	sub.w	r8, r5, r8
 801b160:	4498      	add	r8, r3
 801b162:	f1b8 0f00 	cmp.w	r8, #0
 801b166:	dd71      	ble.n	801b24c <_strtod_l+0x54c>
 801b168:	f018 030f 	ands.w	r3, r8, #15
 801b16c:	d00a      	beq.n	801b184 <_strtod_l+0x484>
 801b16e:	494d      	ldr	r1, [pc, #308]	; (801b2a4 <_strtod_l+0x5a4>)
 801b170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b174:	4652      	mov	r2, sl
 801b176:	465b      	mov	r3, fp
 801b178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b17c:	f7e5 fa3c 	bl	80005f8 <__aeabi_dmul>
 801b180:	4682      	mov	sl, r0
 801b182:	468b      	mov	fp, r1
 801b184:	f038 080f 	bics.w	r8, r8, #15
 801b188:	d04d      	beq.n	801b226 <_strtod_l+0x526>
 801b18a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b18e:	dd22      	ble.n	801b1d6 <_strtod_l+0x4d6>
 801b190:	2500      	movs	r5, #0
 801b192:	462e      	mov	r6, r5
 801b194:	9509      	str	r5, [sp, #36]	; 0x24
 801b196:	9507      	str	r5, [sp, #28]
 801b198:	2322      	movs	r3, #34	; 0x22
 801b19a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b2ac <_strtod_l+0x5ac>
 801b19e:	6023      	str	r3, [r4, #0]
 801b1a0:	f04f 0a00 	mov.w	sl, #0
 801b1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	f43f adec 	beq.w	801ad84 <_strtod_l+0x84>
 801b1ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	f001 feba 	bl	801cf28 <_Bfree>
 801b1b4:	9907      	ldr	r1, [sp, #28]
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f001 feb6 	bl	801cf28 <_Bfree>
 801b1bc:	4631      	mov	r1, r6
 801b1be:	4620      	mov	r0, r4
 801b1c0:	f001 feb2 	bl	801cf28 <_Bfree>
 801b1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	f001 feae 	bl	801cf28 <_Bfree>
 801b1cc:	4629      	mov	r1, r5
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f001 feaa 	bl	801cf28 <_Bfree>
 801b1d4:	e5d6      	b.n	801ad84 <_strtod_l+0x84>
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b1dc:	4650      	mov	r0, sl
 801b1de:	4659      	mov	r1, fp
 801b1e0:	4699      	mov	r9, r3
 801b1e2:	f1b8 0f01 	cmp.w	r8, #1
 801b1e6:	dc21      	bgt.n	801b22c <_strtod_l+0x52c>
 801b1e8:	b10b      	cbz	r3, 801b1ee <_strtod_l+0x4ee>
 801b1ea:	4682      	mov	sl, r0
 801b1ec:	468b      	mov	fp, r1
 801b1ee:	4b2e      	ldr	r3, [pc, #184]	; (801b2a8 <_strtod_l+0x5a8>)
 801b1f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b1f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b1f8:	4652      	mov	r2, sl
 801b1fa:	465b      	mov	r3, fp
 801b1fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b200:	f7e5 f9fa 	bl	80005f8 <__aeabi_dmul>
 801b204:	4b29      	ldr	r3, [pc, #164]	; (801b2ac <_strtod_l+0x5ac>)
 801b206:	460a      	mov	r2, r1
 801b208:	400b      	ands	r3, r1
 801b20a:	4929      	ldr	r1, [pc, #164]	; (801b2b0 <_strtod_l+0x5b0>)
 801b20c:	428b      	cmp	r3, r1
 801b20e:	4682      	mov	sl, r0
 801b210:	d8be      	bhi.n	801b190 <_strtod_l+0x490>
 801b212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b216:	428b      	cmp	r3, r1
 801b218:	bf86      	itte	hi
 801b21a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b2b4 <_strtod_l+0x5b4>
 801b21e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b222:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b226:	2300      	movs	r3, #0
 801b228:	9304      	str	r3, [sp, #16]
 801b22a:	e081      	b.n	801b330 <_strtod_l+0x630>
 801b22c:	f018 0f01 	tst.w	r8, #1
 801b230:	d007      	beq.n	801b242 <_strtod_l+0x542>
 801b232:	4b1d      	ldr	r3, [pc, #116]	; (801b2a8 <_strtod_l+0x5a8>)
 801b234:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b23c:	f7e5 f9dc 	bl	80005f8 <__aeabi_dmul>
 801b240:	2301      	movs	r3, #1
 801b242:	f109 0901 	add.w	r9, r9, #1
 801b246:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b24a:	e7ca      	b.n	801b1e2 <_strtod_l+0x4e2>
 801b24c:	d0eb      	beq.n	801b226 <_strtod_l+0x526>
 801b24e:	f1c8 0800 	rsb	r8, r8, #0
 801b252:	f018 020f 	ands.w	r2, r8, #15
 801b256:	d00a      	beq.n	801b26e <_strtod_l+0x56e>
 801b258:	4b12      	ldr	r3, [pc, #72]	; (801b2a4 <_strtod_l+0x5a4>)
 801b25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b25e:	4650      	mov	r0, sl
 801b260:	4659      	mov	r1, fp
 801b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b266:	f7e5 faf1 	bl	800084c <__aeabi_ddiv>
 801b26a:	4682      	mov	sl, r0
 801b26c:	468b      	mov	fp, r1
 801b26e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b272:	d0d8      	beq.n	801b226 <_strtod_l+0x526>
 801b274:	f1b8 0f1f 	cmp.w	r8, #31
 801b278:	dd1e      	ble.n	801b2b8 <_strtod_l+0x5b8>
 801b27a:	2500      	movs	r5, #0
 801b27c:	462e      	mov	r6, r5
 801b27e:	9509      	str	r5, [sp, #36]	; 0x24
 801b280:	9507      	str	r5, [sp, #28]
 801b282:	2322      	movs	r3, #34	; 0x22
 801b284:	f04f 0a00 	mov.w	sl, #0
 801b288:	f04f 0b00 	mov.w	fp, #0
 801b28c:	6023      	str	r3, [r4, #0]
 801b28e:	e789      	b.n	801b1a4 <_strtod_l+0x4a4>
 801b290:	08020301 	.word	0x08020301
 801b294:	08020344 	.word	0x08020344
 801b298:	080202f9 	.word	0x080202f9
 801b29c:	08020484 	.word	0x08020484
 801b2a0:	08020740 	.word	0x08020740
 801b2a4:	08020620 	.word	0x08020620
 801b2a8:	080205f8 	.word	0x080205f8
 801b2ac:	7ff00000 	.word	0x7ff00000
 801b2b0:	7ca00000 	.word	0x7ca00000
 801b2b4:	7fefffff 	.word	0x7fefffff
 801b2b8:	f018 0310 	ands.w	r3, r8, #16
 801b2bc:	bf18      	it	ne
 801b2be:	236a      	movne	r3, #106	; 0x6a
 801b2c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b678 <_strtod_l+0x978>
 801b2c4:	9304      	str	r3, [sp, #16]
 801b2c6:	4650      	mov	r0, sl
 801b2c8:	4659      	mov	r1, fp
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	f018 0f01 	tst.w	r8, #1
 801b2d0:	d004      	beq.n	801b2dc <_strtod_l+0x5dc>
 801b2d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b2d6:	f7e5 f98f 	bl	80005f8 <__aeabi_dmul>
 801b2da:	2301      	movs	r3, #1
 801b2dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b2e0:	f109 0908 	add.w	r9, r9, #8
 801b2e4:	d1f2      	bne.n	801b2cc <_strtod_l+0x5cc>
 801b2e6:	b10b      	cbz	r3, 801b2ec <_strtod_l+0x5ec>
 801b2e8:	4682      	mov	sl, r0
 801b2ea:	468b      	mov	fp, r1
 801b2ec:	9b04      	ldr	r3, [sp, #16]
 801b2ee:	b1bb      	cbz	r3, 801b320 <_strtod_l+0x620>
 801b2f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b2f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	4659      	mov	r1, fp
 801b2fc:	dd10      	ble.n	801b320 <_strtod_l+0x620>
 801b2fe:	2b1f      	cmp	r3, #31
 801b300:	f340 8128 	ble.w	801b554 <_strtod_l+0x854>
 801b304:	2b34      	cmp	r3, #52	; 0x34
 801b306:	bfde      	ittt	le
 801b308:	3b20      	suble	r3, #32
 801b30a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b30e:	fa02 f303 	lslle.w	r3, r2, r3
 801b312:	f04f 0a00 	mov.w	sl, #0
 801b316:	bfcc      	ite	gt
 801b318:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b31c:	ea03 0b01 	andle.w	fp, r3, r1
 801b320:	2200      	movs	r2, #0
 801b322:	2300      	movs	r3, #0
 801b324:	4650      	mov	r0, sl
 801b326:	4659      	mov	r1, fp
 801b328:	f7e5 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	d1a4      	bne.n	801b27a <_strtod_l+0x57a>
 801b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b332:	9300      	str	r3, [sp, #0]
 801b334:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b336:	462b      	mov	r3, r5
 801b338:	463a      	mov	r2, r7
 801b33a:	4620      	mov	r0, r4
 801b33c:	f001 fe60 	bl	801d000 <__s2b>
 801b340:	9009      	str	r0, [sp, #36]	; 0x24
 801b342:	2800      	cmp	r0, #0
 801b344:	f43f af24 	beq.w	801b190 <_strtod_l+0x490>
 801b348:	9b07      	ldr	r3, [sp, #28]
 801b34a:	1b9e      	subs	r6, r3, r6
 801b34c:	9b08      	ldr	r3, [sp, #32]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	bfb4      	ite	lt
 801b352:	4633      	movlt	r3, r6
 801b354:	2300      	movge	r3, #0
 801b356:	9310      	str	r3, [sp, #64]	; 0x40
 801b358:	9b08      	ldr	r3, [sp, #32]
 801b35a:	2500      	movs	r5, #0
 801b35c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b360:	9318      	str	r3, [sp, #96]	; 0x60
 801b362:	462e      	mov	r6, r5
 801b364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b366:	4620      	mov	r0, r4
 801b368:	6859      	ldr	r1, [r3, #4]
 801b36a:	f001 fd9d 	bl	801cea8 <_Balloc>
 801b36e:	9007      	str	r0, [sp, #28]
 801b370:	2800      	cmp	r0, #0
 801b372:	f43f af11 	beq.w	801b198 <_strtod_l+0x498>
 801b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b378:	691a      	ldr	r2, [r3, #16]
 801b37a:	3202      	adds	r2, #2
 801b37c:	f103 010c 	add.w	r1, r3, #12
 801b380:	0092      	lsls	r2, r2, #2
 801b382:	300c      	adds	r0, #12
 801b384:	f7fe fc64 	bl	8019c50 <memcpy>
 801b388:	ec4b ab10 	vmov	d0, sl, fp
 801b38c:	aa20      	add	r2, sp, #128	; 0x80
 801b38e:	a91f      	add	r1, sp, #124	; 0x7c
 801b390:	4620      	mov	r0, r4
 801b392:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b396:	f002 f96f 	bl	801d678 <__d2b>
 801b39a:	901e      	str	r0, [sp, #120]	; 0x78
 801b39c:	2800      	cmp	r0, #0
 801b39e:	f43f aefb 	beq.w	801b198 <_strtod_l+0x498>
 801b3a2:	2101      	movs	r1, #1
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	f001 fec5 	bl	801d134 <__i2b>
 801b3aa:	4606      	mov	r6, r0
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	f43f aef3 	beq.w	801b198 <_strtod_l+0x498>
 801b3b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b3b4:	9904      	ldr	r1, [sp, #16]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	bfab      	itete	ge
 801b3ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b3bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b3be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b3c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b3c4:	bfac      	ite	ge
 801b3c6:	eb03 0902 	addge.w	r9, r3, r2
 801b3ca:	1ad7      	sublt	r7, r2, r3
 801b3cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b3ce:	eba3 0801 	sub.w	r8, r3, r1
 801b3d2:	4490      	add	r8, r2
 801b3d4:	4ba3      	ldr	r3, [pc, #652]	; (801b664 <_strtod_l+0x964>)
 801b3d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b3da:	4598      	cmp	r8, r3
 801b3dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b3e0:	f280 80cc 	bge.w	801b57c <_strtod_l+0x87c>
 801b3e4:	eba3 0308 	sub.w	r3, r3, r8
 801b3e8:	2b1f      	cmp	r3, #31
 801b3ea:	eba2 0203 	sub.w	r2, r2, r3
 801b3ee:	f04f 0101 	mov.w	r1, #1
 801b3f2:	f300 80b6 	bgt.w	801b562 <_strtod_l+0x862>
 801b3f6:	fa01 f303 	lsl.w	r3, r1, r3
 801b3fa:	9311      	str	r3, [sp, #68]	; 0x44
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	930c      	str	r3, [sp, #48]	; 0x30
 801b400:	eb09 0802 	add.w	r8, r9, r2
 801b404:	9b04      	ldr	r3, [sp, #16]
 801b406:	45c1      	cmp	r9, r8
 801b408:	4417      	add	r7, r2
 801b40a:	441f      	add	r7, r3
 801b40c:	464b      	mov	r3, r9
 801b40e:	bfa8      	it	ge
 801b410:	4643      	movge	r3, r8
 801b412:	42bb      	cmp	r3, r7
 801b414:	bfa8      	it	ge
 801b416:	463b      	movge	r3, r7
 801b418:	2b00      	cmp	r3, #0
 801b41a:	bfc2      	ittt	gt
 801b41c:	eba8 0803 	subgt.w	r8, r8, r3
 801b420:	1aff      	subgt	r7, r7, r3
 801b422:	eba9 0903 	subgt.w	r9, r9, r3
 801b426:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b428:	2b00      	cmp	r3, #0
 801b42a:	dd17      	ble.n	801b45c <_strtod_l+0x75c>
 801b42c:	4631      	mov	r1, r6
 801b42e:	461a      	mov	r2, r3
 801b430:	4620      	mov	r0, r4
 801b432:	f001 ff3b 	bl	801d2ac <__pow5mult>
 801b436:	4606      	mov	r6, r0
 801b438:	2800      	cmp	r0, #0
 801b43a:	f43f aead 	beq.w	801b198 <_strtod_l+0x498>
 801b43e:	4601      	mov	r1, r0
 801b440:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b442:	4620      	mov	r0, r4
 801b444:	f001 fe8c 	bl	801d160 <__multiply>
 801b448:	900f      	str	r0, [sp, #60]	; 0x3c
 801b44a:	2800      	cmp	r0, #0
 801b44c:	f43f aea4 	beq.w	801b198 <_strtod_l+0x498>
 801b450:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b452:	4620      	mov	r0, r4
 801b454:	f001 fd68 	bl	801cf28 <_Bfree>
 801b458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b45a:	931e      	str	r3, [sp, #120]	; 0x78
 801b45c:	f1b8 0f00 	cmp.w	r8, #0
 801b460:	f300 8091 	bgt.w	801b586 <_strtod_l+0x886>
 801b464:	9b08      	ldr	r3, [sp, #32]
 801b466:	2b00      	cmp	r3, #0
 801b468:	dd08      	ble.n	801b47c <_strtod_l+0x77c>
 801b46a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b46c:	9907      	ldr	r1, [sp, #28]
 801b46e:	4620      	mov	r0, r4
 801b470:	f001 ff1c 	bl	801d2ac <__pow5mult>
 801b474:	9007      	str	r0, [sp, #28]
 801b476:	2800      	cmp	r0, #0
 801b478:	f43f ae8e 	beq.w	801b198 <_strtod_l+0x498>
 801b47c:	2f00      	cmp	r7, #0
 801b47e:	dd08      	ble.n	801b492 <_strtod_l+0x792>
 801b480:	9907      	ldr	r1, [sp, #28]
 801b482:	463a      	mov	r2, r7
 801b484:	4620      	mov	r0, r4
 801b486:	f001 ff6b 	bl	801d360 <__lshift>
 801b48a:	9007      	str	r0, [sp, #28]
 801b48c:	2800      	cmp	r0, #0
 801b48e:	f43f ae83 	beq.w	801b198 <_strtod_l+0x498>
 801b492:	f1b9 0f00 	cmp.w	r9, #0
 801b496:	dd08      	ble.n	801b4aa <_strtod_l+0x7aa>
 801b498:	4631      	mov	r1, r6
 801b49a:	464a      	mov	r2, r9
 801b49c:	4620      	mov	r0, r4
 801b49e:	f001 ff5f 	bl	801d360 <__lshift>
 801b4a2:	4606      	mov	r6, r0
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	f43f ae77 	beq.w	801b198 <_strtod_l+0x498>
 801b4aa:	9a07      	ldr	r2, [sp, #28]
 801b4ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f001 ffde 	bl	801d470 <__mdiff>
 801b4b4:	4605      	mov	r5, r0
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	f43f ae6e 	beq.w	801b198 <_strtod_l+0x498>
 801b4bc:	68c3      	ldr	r3, [r0, #12]
 801b4be:	930f      	str	r3, [sp, #60]	; 0x3c
 801b4c0:	2300      	movs	r3, #0
 801b4c2:	60c3      	str	r3, [r0, #12]
 801b4c4:	4631      	mov	r1, r6
 801b4c6:	f001 ffb7 	bl	801d438 <__mcmp>
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	da65      	bge.n	801b59a <_strtod_l+0x89a>
 801b4ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4d0:	ea53 030a 	orrs.w	r3, r3, sl
 801b4d4:	f040 8087 	bne.w	801b5e6 <_strtod_l+0x8e6>
 801b4d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f040 8082 	bne.w	801b5e6 <_strtod_l+0x8e6>
 801b4e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b4e6:	0d1b      	lsrs	r3, r3, #20
 801b4e8:	051b      	lsls	r3, r3, #20
 801b4ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b4ee:	d97a      	bls.n	801b5e6 <_strtod_l+0x8e6>
 801b4f0:	696b      	ldr	r3, [r5, #20]
 801b4f2:	b913      	cbnz	r3, 801b4fa <_strtod_l+0x7fa>
 801b4f4:	692b      	ldr	r3, [r5, #16]
 801b4f6:	2b01      	cmp	r3, #1
 801b4f8:	dd75      	ble.n	801b5e6 <_strtod_l+0x8e6>
 801b4fa:	4629      	mov	r1, r5
 801b4fc:	2201      	movs	r2, #1
 801b4fe:	4620      	mov	r0, r4
 801b500:	f001 ff2e 	bl	801d360 <__lshift>
 801b504:	4631      	mov	r1, r6
 801b506:	4605      	mov	r5, r0
 801b508:	f001 ff96 	bl	801d438 <__mcmp>
 801b50c:	2800      	cmp	r0, #0
 801b50e:	dd6a      	ble.n	801b5e6 <_strtod_l+0x8e6>
 801b510:	9904      	ldr	r1, [sp, #16]
 801b512:	4a55      	ldr	r2, [pc, #340]	; (801b668 <_strtod_l+0x968>)
 801b514:	465b      	mov	r3, fp
 801b516:	2900      	cmp	r1, #0
 801b518:	f000 8085 	beq.w	801b626 <_strtod_l+0x926>
 801b51c:	ea02 010b 	and.w	r1, r2, fp
 801b520:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b524:	dc7f      	bgt.n	801b626 <_strtod_l+0x926>
 801b526:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b52a:	f77f aeaa 	ble.w	801b282 <_strtod_l+0x582>
 801b52e:	4a4f      	ldr	r2, [pc, #316]	; (801b66c <_strtod_l+0x96c>)
 801b530:	2300      	movs	r3, #0
 801b532:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b536:	4650      	mov	r0, sl
 801b538:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b53c:	4659      	mov	r1, fp
 801b53e:	f7e5 f85b 	bl	80005f8 <__aeabi_dmul>
 801b542:	460b      	mov	r3, r1
 801b544:	4303      	orrs	r3, r0
 801b546:	bf08      	it	eq
 801b548:	2322      	moveq	r3, #34	; 0x22
 801b54a:	4682      	mov	sl, r0
 801b54c:	468b      	mov	fp, r1
 801b54e:	bf08      	it	eq
 801b550:	6023      	streq	r3, [r4, #0]
 801b552:	e62b      	b.n	801b1ac <_strtod_l+0x4ac>
 801b554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b558:	fa02 f303 	lsl.w	r3, r2, r3
 801b55c:	ea03 0a0a 	and.w	sl, r3, sl
 801b560:	e6de      	b.n	801b320 <_strtod_l+0x620>
 801b562:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b566:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b56a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b56e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b572:	fa01 f308 	lsl.w	r3, r1, r8
 801b576:	930c      	str	r3, [sp, #48]	; 0x30
 801b578:	9111      	str	r1, [sp, #68]	; 0x44
 801b57a:	e741      	b.n	801b400 <_strtod_l+0x700>
 801b57c:	2300      	movs	r3, #0
 801b57e:	930c      	str	r3, [sp, #48]	; 0x30
 801b580:	2301      	movs	r3, #1
 801b582:	9311      	str	r3, [sp, #68]	; 0x44
 801b584:	e73c      	b.n	801b400 <_strtod_l+0x700>
 801b586:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b588:	4642      	mov	r2, r8
 801b58a:	4620      	mov	r0, r4
 801b58c:	f001 fee8 	bl	801d360 <__lshift>
 801b590:	901e      	str	r0, [sp, #120]	; 0x78
 801b592:	2800      	cmp	r0, #0
 801b594:	f47f af66 	bne.w	801b464 <_strtod_l+0x764>
 801b598:	e5fe      	b.n	801b198 <_strtod_l+0x498>
 801b59a:	465f      	mov	r7, fp
 801b59c:	d16e      	bne.n	801b67c <_strtod_l+0x97c>
 801b59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b5a4:	b342      	cbz	r2, 801b5f8 <_strtod_l+0x8f8>
 801b5a6:	4a32      	ldr	r2, [pc, #200]	; (801b670 <_strtod_l+0x970>)
 801b5a8:	4293      	cmp	r3, r2
 801b5aa:	d128      	bne.n	801b5fe <_strtod_l+0x8fe>
 801b5ac:	9b04      	ldr	r3, [sp, #16]
 801b5ae:	4650      	mov	r0, sl
 801b5b0:	b1eb      	cbz	r3, 801b5ee <_strtod_l+0x8ee>
 801b5b2:	4a2d      	ldr	r2, [pc, #180]	; (801b668 <_strtod_l+0x968>)
 801b5b4:	403a      	ands	r2, r7
 801b5b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b5ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5be:	d819      	bhi.n	801b5f4 <_strtod_l+0x8f4>
 801b5c0:	0d12      	lsrs	r2, r2, #20
 801b5c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b5c6:	fa01 f303 	lsl.w	r3, r1, r3
 801b5ca:	4298      	cmp	r0, r3
 801b5cc:	d117      	bne.n	801b5fe <_strtod_l+0x8fe>
 801b5ce:	4b29      	ldr	r3, [pc, #164]	; (801b674 <_strtod_l+0x974>)
 801b5d0:	429f      	cmp	r7, r3
 801b5d2:	d102      	bne.n	801b5da <_strtod_l+0x8da>
 801b5d4:	3001      	adds	r0, #1
 801b5d6:	f43f addf 	beq.w	801b198 <_strtod_l+0x498>
 801b5da:	4b23      	ldr	r3, [pc, #140]	; (801b668 <_strtod_l+0x968>)
 801b5dc:	403b      	ands	r3, r7
 801b5de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b5e2:	f04f 0a00 	mov.w	sl, #0
 801b5e6:	9b04      	ldr	r3, [sp, #16]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d1a0      	bne.n	801b52e <_strtod_l+0x82e>
 801b5ec:	e5de      	b.n	801b1ac <_strtod_l+0x4ac>
 801b5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5f2:	e7ea      	b.n	801b5ca <_strtod_l+0x8ca>
 801b5f4:	460b      	mov	r3, r1
 801b5f6:	e7e8      	b.n	801b5ca <_strtod_l+0x8ca>
 801b5f8:	ea53 030a 	orrs.w	r3, r3, sl
 801b5fc:	d088      	beq.n	801b510 <_strtod_l+0x810>
 801b5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b600:	b1db      	cbz	r3, 801b63a <_strtod_l+0x93a>
 801b602:	423b      	tst	r3, r7
 801b604:	d0ef      	beq.n	801b5e6 <_strtod_l+0x8e6>
 801b606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b608:	9a04      	ldr	r2, [sp, #16]
 801b60a:	4650      	mov	r0, sl
 801b60c:	4659      	mov	r1, fp
 801b60e:	b1c3      	cbz	r3, 801b642 <_strtod_l+0x942>
 801b610:	f7ff fb5a 	bl	801acc8 <sulp>
 801b614:	4602      	mov	r2, r0
 801b616:	460b      	mov	r3, r1
 801b618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b61c:	f7e4 fe36 	bl	800028c <__adddf3>
 801b620:	4682      	mov	sl, r0
 801b622:	468b      	mov	fp, r1
 801b624:	e7df      	b.n	801b5e6 <_strtod_l+0x8e6>
 801b626:	4013      	ands	r3, r2
 801b628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b62c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b634:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b638:	e7d5      	b.n	801b5e6 <_strtod_l+0x8e6>
 801b63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b63c:	ea13 0f0a 	tst.w	r3, sl
 801b640:	e7e0      	b.n	801b604 <_strtod_l+0x904>
 801b642:	f7ff fb41 	bl	801acc8 <sulp>
 801b646:	4602      	mov	r2, r0
 801b648:	460b      	mov	r3, r1
 801b64a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b64e:	f7e4 fe1b 	bl	8000288 <__aeabi_dsub>
 801b652:	2200      	movs	r2, #0
 801b654:	2300      	movs	r3, #0
 801b656:	4682      	mov	sl, r0
 801b658:	468b      	mov	fp, r1
 801b65a:	f7e5 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 801b65e:	2800      	cmp	r0, #0
 801b660:	d0c1      	beq.n	801b5e6 <_strtod_l+0x8e6>
 801b662:	e60e      	b.n	801b282 <_strtod_l+0x582>
 801b664:	fffffc02 	.word	0xfffffc02
 801b668:	7ff00000 	.word	0x7ff00000
 801b66c:	39500000 	.word	0x39500000
 801b670:	000fffff 	.word	0x000fffff
 801b674:	7fefffff 	.word	0x7fefffff
 801b678:	08020358 	.word	0x08020358
 801b67c:	4631      	mov	r1, r6
 801b67e:	4628      	mov	r0, r5
 801b680:	f002 f856 	bl	801d730 <__ratio>
 801b684:	ec59 8b10 	vmov	r8, r9, d0
 801b688:	ee10 0a10 	vmov	r0, s0
 801b68c:	2200      	movs	r2, #0
 801b68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b692:	4649      	mov	r1, r9
 801b694:	f7e5 fa2c 	bl	8000af0 <__aeabi_dcmple>
 801b698:	2800      	cmp	r0, #0
 801b69a:	d07c      	beq.n	801b796 <_strtod_l+0xa96>
 801b69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d04c      	beq.n	801b73c <_strtod_l+0xa3c>
 801b6a2:	4b95      	ldr	r3, [pc, #596]	; (801b8f8 <_strtod_l+0xbf8>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b6aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b8f8 <_strtod_l+0xbf8>
 801b6ae:	f04f 0800 	mov.w	r8, #0
 801b6b2:	4b92      	ldr	r3, [pc, #584]	; (801b8fc <_strtod_l+0xbfc>)
 801b6b4:	403b      	ands	r3, r7
 801b6b6:	9311      	str	r3, [sp, #68]	; 0x44
 801b6b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b6ba:	4b91      	ldr	r3, [pc, #580]	; (801b900 <_strtod_l+0xc00>)
 801b6bc:	429a      	cmp	r2, r3
 801b6be:	f040 80b2 	bne.w	801b826 <_strtod_l+0xb26>
 801b6c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b6ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b6ce:	ec4b ab10 	vmov	d0, sl, fp
 801b6d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b6d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b6da:	f001 ff51 	bl	801d580 <__ulp>
 801b6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b6e2:	ec53 2b10 	vmov	r2, r3, d0
 801b6e6:	f7e4 ff87 	bl	80005f8 <__aeabi_dmul>
 801b6ea:	4652      	mov	r2, sl
 801b6ec:	465b      	mov	r3, fp
 801b6ee:	f7e4 fdcd 	bl	800028c <__adddf3>
 801b6f2:	460b      	mov	r3, r1
 801b6f4:	4981      	ldr	r1, [pc, #516]	; (801b8fc <_strtod_l+0xbfc>)
 801b6f6:	4a83      	ldr	r2, [pc, #524]	; (801b904 <_strtod_l+0xc04>)
 801b6f8:	4019      	ands	r1, r3
 801b6fa:	4291      	cmp	r1, r2
 801b6fc:	4682      	mov	sl, r0
 801b6fe:	d95e      	bls.n	801b7be <_strtod_l+0xabe>
 801b700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b702:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b706:	4293      	cmp	r3, r2
 801b708:	d103      	bne.n	801b712 <_strtod_l+0xa12>
 801b70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b70c:	3301      	adds	r3, #1
 801b70e:	f43f ad43 	beq.w	801b198 <_strtod_l+0x498>
 801b712:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b910 <_strtod_l+0xc10>
 801b716:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b71a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b71c:	4620      	mov	r0, r4
 801b71e:	f001 fc03 	bl	801cf28 <_Bfree>
 801b722:	9907      	ldr	r1, [sp, #28]
 801b724:	4620      	mov	r0, r4
 801b726:	f001 fbff 	bl	801cf28 <_Bfree>
 801b72a:	4631      	mov	r1, r6
 801b72c:	4620      	mov	r0, r4
 801b72e:	f001 fbfb 	bl	801cf28 <_Bfree>
 801b732:	4629      	mov	r1, r5
 801b734:	4620      	mov	r0, r4
 801b736:	f001 fbf7 	bl	801cf28 <_Bfree>
 801b73a:	e613      	b.n	801b364 <_strtod_l+0x664>
 801b73c:	f1ba 0f00 	cmp.w	sl, #0
 801b740:	d11b      	bne.n	801b77a <_strtod_l+0xa7a>
 801b742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b746:	b9f3      	cbnz	r3, 801b786 <_strtod_l+0xa86>
 801b748:	4b6b      	ldr	r3, [pc, #428]	; (801b8f8 <_strtod_l+0xbf8>)
 801b74a:	2200      	movs	r2, #0
 801b74c:	4640      	mov	r0, r8
 801b74e:	4649      	mov	r1, r9
 801b750:	f7e5 f9c4 	bl	8000adc <__aeabi_dcmplt>
 801b754:	b9d0      	cbnz	r0, 801b78c <_strtod_l+0xa8c>
 801b756:	4640      	mov	r0, r8
 801b758:	4649      	mov	r1, r9
 801b75a:	4b6b      	ldr	r3, [pc, #428]	; (801b908 <_strtod_l+0xc08>)
 801b75c:	2200      	movs	r2, #0
 801b75e:	f7e4 ff4b 	bl	80005f8 <__aeabi_dmul>
 801b762:	4680      	mov	r8, r0
 801b764:	4689      	mov	r9, r1
 801b766:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b76a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b76e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b770:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b774:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b778:	e79b      	b.n	801b6b2 <_strtod_l+0x9b2>
 801b77a:	f1ba 0f01 	cmp.w	sl, #1
 801b77e:	d102      	bne.n	801b786 <_strtod_l+0xa86>
 801b780:	2f00      	cmp	r7, #0
 801b782:	f43f ad7e 	beq.w	801b282 <_strtod_l+0x582>
 801b786:	4b61      	ldr	r3, [pc, #388]	; (801b90c <_strtod_l+0xc0c>)
 801b788:	2200      	movs	r2, #0
 801b78a:	e78c      	b.n	801b6a6 <_strtod_l+0x9a6>
 801b78c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b908 <_strtod_l+0xc08>
 801b790:	f04f 0800 	mov.w	r8, #0
 801b794:	e7e7      	b.n	801b766 <_strtod_l+0xa66>
 801b796:	4b5c      	ldr	r3, [pc, #368]	; (801b908 <_strtod_l+0xc08>)
 801b798:	4640      	mov	r0, r8
 801b79a:	4649      	mov	r1, r9
 801b79c:	2200      	movs	r2, #0
 801b79e:	f7e4 ff2b 	bl	80005f8 <__aeabi_dmul>
 801b7a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7a4:	4680      	mov	r8, r0
 801b7a6:	4689      	mov	r9, r1
 801b7a8:	b933      	cbnz	r3, 801b7b8 <_strtod_l+0xab8>
 801b7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7ae:	9012      	str	r0, [sp, #72]	; 0x48
 801b7b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b7b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b7b6:	e7dd      	b.n	801b774 <_strtod_l+0xa74>
 801b7b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b7bc:	e7f9      	b.n	801b7b2 <_strtod_l+0xab2>
 801b7be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b7c2:	9b04      	ldr	r3, [sp, #16]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d1a8      	bne.n	801b71a <_strtod_l+0xa1a>
 801b7c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b7cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7ce:	0d1b      	lsrs	r3, r3, #20
 801b7d0:	051b      	lsls	r3, r3, #20
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d1a1      	bne.n	801b71a <_strtod_l+0xa1a>
 801b7d6:	4640      	mov	r0, r8
 801b7d8:	4649      	mov	r1, r9
 801b7da:	f7e5 fa6d 	bl	8000cb8 <__aeabi_d2lz>
 801b7de:	f7e4 fedd 	bl	800059c <__aeabi_l2d>
 801b7e2:	4602      	mov	r2, r0
 801b7e4:	460b      	mov	r3, r1
 801b7e6:	4640      	mov	r0, r8
 801b7e8:	4649      	mov	r1, r9
 801b7ea:	f7e4 fd4d 	bl	8000288 <__aeabi_dsub>
 801b7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b7f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7f4:	ea43 030a 	orr.w	r3, r3, sl
 801b7f8:	4313      	orrs	r3, r2
 801b7fa:	4680      	mov	r8, r0
 801b7fc:	4689      	mov	r9, r1
 801b7fe:	d053      	beq.n	801b8a8 <_strtod_l+0xba8>
 801b800:	a335      	add	r3, pc, #212	; (adr r3, 801b8d8 <_strtod_l+0xbd8>)
 801b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b806:	f7e5 f969 	bl	8000adc <__aeabi_dcmplt>
 801b80a:	2800      	cmp	r0, #0
 801b80c:	f47f acce 	bne.w	801b1ac <_strtod_l+0x4ac>
 801b810:	a333      	add	r3, pc, #204	; (adr r3, 801b8e0 <_strtod_l+0xbe0>)
 801b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b816:	4640      	mov	r0, r8
 801b818:	4649      	mov	r1, r9
 801b81a:	f7e5 f97d 	bl	8000b18 <__aeabi_dcmpgt>
 801b81e:	2800      	cmp	r0, #0
 801b820:	f43f af7b 	beq.w	801b71a <_strtod_l+0xa1a>
 801b824:	e4c2      	b.n	801b1ac <_strtod_l+0x4ac>
 801b826:	9b04      	ldr	r3, [sp, #16]
 801b828:	b333      	cbz	r3, 801b878 <_strtod_l+0xb78>
 801b82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b82c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b830:	d822      	bhi.n	801b878 <_strtod_l+0xb78>
 801b832:	a32d      	add	r3, pc, #180	; (adr r3, 801b8e8 <_strtod_l+0xbe8>)
 801b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b838:	4640      	mov	r0, r8
 801b83a:	4649      	mov	r1, r9
 801b83c:	f7e5 f958 	bl	8000af0 <__aeabi_dcmple>
 801b840:	b1a0      	cbz	r0, 801b86c <_strtod_l+0xb6c>
 801b842:	4649      	mov	r1, r9
 801b844:	4640      	mov	r0, r8
 801b846:	f7e5 f9af 	bl	8000ba8 <__aeabi_d2uiz>
 801b84a:	2801      	cmp	r0, #1
 801b84c:	bf38      	it	cc
 801b84e:	2001      	movcc	r0, #1
 801b850:	f7e4 fe58 	bl	8000504 <__aeabi_ui2d>
 801b854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b856:	4680      	mov	r8, r0
 801b858:	4689      	mov	r9, r1
 801b85a:	bb13      	cbnz	r3, 801b8a2 <_strtod_l+0xba2>
 801b85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b860:	9014      	str	r0, [sp, #80]	; 0x50
 801b862:	9315      	str	r3, [sp, #84]	; 0x54
 801b864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b868:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b86e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b870:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b874:	1a9b      	subs	r3, r3, r2
 801b876:	930d      	str	r3, [sp, #52]	; 0x34
 801b878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b87c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b884:	f001 fe7c 	bl	801d580 <__ulp>
 801b888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b88c:	ec53 2b10 	vmov	r2, r3, d0
 801b890:	f7e4 feb2 	bl	80005f8 <__aeabi_dmul>
 801b894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b898:	f7e4 fcf8 	bl	800028c <__adddf3>
 801b89c:	4682      	mov	sl, r0
 801b89e:	468b      	mov	fp, r1
 801b8a0:	e78f      	b.n	801b7c2 <_strtod_l+0xac2>
 801b8a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b8a6:	e7dd      	b.n	801b864 <_strtod_l+0xb64>
 801b8a8:	a311      	add	r3, pc, #68	; (adr r3, 801b8f0 <_strtod_l+0xbf0>)
 801b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ae:	f7e5 f915 	bl	8000adc <__aeabi_dcmplt>
 801b8b2:	e7b4      	b.n	801b81e <_strtod_l+0xb1e>
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	930e      	str	r3, [sp, #56]	; 0x38
 801b8b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b8ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8bc:	6013      	str	r3, [r2, #0]
 801b8be:	f7ff ba65 	b.w	801ad8c <_strtod_l+0x8c>
 801b8c2:	2b65      	cmp	r3, #101	; 0x65
 801b8c4:	f43f ab5d 	beq.w	801af82 <_strtod_l+0x282>
 801b8c8:	2b45      	cmp	r3, #69	; 0x45
 801b8ca:	f43f ab5a 	beq.w	801af82 <_strtod_l+0x282>
 801b8ce:	2201      	movs	r2, #1
 801b8d0:	f7ff bb92 	b.w	801aff8 <_strtod_l+0x2f8>
 801b8d4:	f3af 8000 	nop.w
 801b8d8:	94a03595 	.word	0x94a03595
 801b8dc:	3fdfffff 	.word	0x3fdfffff
 801b8e0:	35afe535 	.word	0x35afe535
 801b8e4:	3fe00000 	.word	0x3fe00000
 801b8e8:	ffc00000 	.word	0xffc00000
 801b8ec:	41dfffff 	.word	0x41dfffff
 801b8f0:	94a03595 	.word	0x94a03595
 801b8f4:	3fcfffff 	.word	0x3fcfffff
 801b8f8:	3ff00000 	.word	0x3ff00000
 801b8fc:	7ff00000 	.word	0x7ff00000
 801b900:	7fe00000 	.word	0x7fe00000
 801b904:	7c9fffff 	.word	0x7c9fffff
 801b908:	3fe00000 	.word	0x3fe00000
 801b90c:	bff00000 	.word	0xbff00000
 801b910:	7fefffff 	.word	0x7fefffff

0801b914 <_strtod_r>:
 801b914:	4b01      	ldr	r3, [pc, #4]	; (801b91c <_strtod_r+0x8>)
 801b916:	f7ff b9f3 	b.w	801ad00 <_strtod_l>
 801b91a:	bf00      	nop
 801b91c:	2000012c 	.word	0x2000012c

0801b920 <_strtol_l.isra.0>:
 801b920:	2b01      	cmp	r3, #1
 801b922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b926:	d001      	beq.n	801b92c <_strtol_l.isra.0+0xc>
 801b928:	2b24      	cmp	r3, #36	; 0x24
 801b92a:	d906      	bls.n	801b93a <_strtol_l.isra.0+0x1a>
 801b92c:	f7fe f95e 	bl	8019bec <__errno>
 801b930:	2316      	movs	r3, #22
 801b932:	6003      	str	r3, [r0, #0]
 801b934:	2000      	movs	r0, #0
 801b936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b93a:	4f3a      	ldr	r7, [pc, #232]	; (801ba24 <_strtol_l.isra.0+0x104>)
 801b93c:	468e      	mov	lr, r1
 801b93e:	4676      	mov	r6, lr
 801b940:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b944:	5de5      	ldrb	r5, [r4, r7]
 801b946:	f015 0508 	ands.w	r5, r5, #8
 801b94a:	d1f8      	bne.n	801b93e <_strtol_l.isra.0+0x1e>
 801b94c:	2c2d      	cmp	r4, #45	; 0x2d
 801b94e:	d134      	bne.n	801b9ba <_strtol_l.isra.0+0x9a>
 801b950:	f89e 4000 	ldrb.w	r4, [lr]
 801b954:	f04f 0801 	mov.w	r8, #1
 801b958:	f106 0e02 	add.w	lr, r6, #2
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d05c      	beq.n	801ba1a <_strtol_l.isra.0+0xfa>
 801b960:	2b10      	cmp	r3, #16
 801b962:	d10c      	bne.n	801b97e <_strtol_l.isra.0+0x5e>
 801b964:	2c30      	cmp	r4, #48	; 0x30
 801b966:	d10a      	bne.n	801b97e <_strtol_l.isra.0+0x5e>
 801b968:	f89e 4000 	ldrb.w	r4, [lr]
 801b96c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b970:	2c58      	cmp	r4, #88	; 0x58
 801b972:	d14d      	bne.n	801ba10 <_strtol_l.isra.0+0xf0>
 801b974:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b978:	2310      	movs	r3, #16
 801b97a:	f10e 0e02 	add.w	lr, lr, #2
 801b97e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b982:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b986:	2600      	movs	r6, #0
 801b988:	fbbc f9f3 	udiv	r9, ip, r3
 801b98c:	4635      	mov	r5, r6
 801b98e:	fb03 ca19 	mls	sl, r3, r9, ip
 801b992:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b996:	2f09      	cmp	r7, #9
 801b998:	d818      	bhi.n	801b9cc <_strtol_l.isra.0+0xac>
 801b99a:	463c      	mov	r4, r7
 801b99c:	42a3      	cmp	r3, r4
 801b99e:	dd24      	ble.n	801b9ea <_strtol_l.isra.0+0xca>
 801b9a0:	2e00      	cmp	r6, #0
 801b9a2:	db1f      	blt.n	801b9e4 <_strtol_l.isra.0+0xc4>
 801b9a4:	45a9      	cmp	r9, r5
 801b9a6:	d31d      	bcc.n	801b9e4 <_strtol_l.isra.0+0xc4>
 801b9a8:	d101      	bne.n	801b9ae <_strtol_l.isra.0+0x8e>
 801b9aa:	45a2      	cmp	sl, r4
 801b9ac:	db1a      	blt.n	801b9e4 <_strtol_l.isra.0+0xc4>
 801b9ae:	fb05 4503 	mla	r5, r5, r3, r4
 801b9b2:	2601      	movs	r6, #1
 801b9b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b9b8:	e7eb      	b.n	801b992 <_strtol_l.isra.0+0x72>
 801b9ba:	2c2b      	cmp	r4, #43	; 0x2b
 801b9bc:	bf08      	it	eq
 801b9be:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b9c2:	46a8      	mov	r8, r5
 801b9c4:	bf08      	it	eq
 801b9c6:	f106 0e02 	addeq.w	lr, r6, #2
 801b9ca:	e7c7      	b.n	801b95c <_strtol_l.isra.0+0x3c>
 801b9cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b9d0:	2f19      	cmp	r7, #25
 801b9d2:	d801      	bhi.n	801b9d8 <_strtol_l.isra.0+0xb8>
 801b9d4:	3c37      	subs	r4, #55	; 0x37
 801b9d6:	e7e1      	b.n	801b99c <_strtol_l.isra.0+0x7c>
 801b9d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b9dc:	2f19      	cmp	r7, #25
 801b9de:	d804      	bhi.n	801b9ea <_strtol_l.isra.0+0xca>
 801b9e0:	3c57      	subs	r4, #87	; 0x57
 801b9e2:	e7db      	b.n	801b99c <_strtol_l.isra.0+0x7c>
 801b9e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b9e8:	e7e4      	b.n	801b9b4 <_strtol_l.isra.0+0x94>
 801b9ea:	2e00      	cmp	r6, #0
 801b9ec:	da05      	bge.n	801b9fa <_strtol_l.isra.0+0xda>
 801b9ee:	2322      	movs	r3, #34	; 0x22
 801b9f0:	6003      	str	r3, [r0, #0]
 801b9f2:	4665      	mov	r5, ip
 801b9f4:	b942      	cbnz	r2, 801ba08 <_strtol_l.isra.0+0xe8>
 801b9f6:	4628      	mov	r0, r5
 801b9f8:	e79d      	b.n	801b936 <_strtol_l.isra.0+0x16>
 801b9fa:	f1b8 0f00 	cmp.w	r8, #0
 801b9fe:	d000      	beq.n	801ba02 <_strtol_l.isra.0+0xe2>
 801ba00:	426d      	negs	r5, r5
 801ba02:	2a00      	cmp	r2, #0
 801ba04:	d0f7      	beq.n	801b9f6 <_strtol_l.isra.0+0xd6>
 801ba06:	b10e      	cbz	r6, 801ba0c <_strtol_l.isra.0+0xec>
 801ba08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801ba0c:	6011      	str	r1, [r2, #0]
 801ba0e:	e7f2      	b.n	801b9f6 <_strtol_l.isra.0+0xd6>
 801ba10:	2430      	movs	r4, #48	; 0x30
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d1b3      	bne.n	801b97e <_strtol_l.isra.0+0x5e>
 801ba16:	2308      	movs	r3, #8
 801ba18:	e7b1      	b.n	801b97e <_strtol_l.isra.0+0x5e>
 801ba1a:	2c30      	cmp	r4, #48	; 0x30
 801ba1c:	d0a4      	beq.n	801b968 <_strtol_l.isra.0+0x48>
 801ba1e:	230a      	movs	r3, #10
 801ba20:	e7ad      	b.n	801b97e <_strtol_l.isra.0+0x5e>
 801ba22:	bf00      	nop
 801ba24:	08020381 	.word	0x08020381

0801ba28 <_strtol_r>:
 801ba28:	f7ff bf7a 	b.w	801b920 <_strtol_l.isra.0>

0801ba2c <_write_r>:
 801ba2c:	b538      	push	{r3, r4, r5, lr}
 801ba2e:	4d07      	ldr	r5, [pc, #28]	; (801ba4c <_write_r+0x20>)
 801ba30:	4604      	mov	r4, r0
 801ba32:	4608      	mov	r0, r1
 801ba34:	4611      	mov	r1, r2
 801ba36:	2200      	movs	r2, #0
 801ba38:	602a      	str	r2, [r5, #0]
 801ba3a:	461a      	mov	r2, r3
 801ba3c:	f7f1 fa5b 	bl	800cef6 <_write>
 801ba40:	1c43      	adds	r3, r0, #1
 801ba42:	d102      	bne.n	801ba4a <_write_r+0x1e>
 801ba44:	682b      	ldr	r3, [r5, #0]
 801ba46:	b103      	cbz	r3, 801ba4a <_write_r+0x1e>
 801ba48:	6023      	str	r3, [r4, #0]
 801ba4a:	bd38      	pop	{r3, r4, r5, pc}
 801ba4c:	2000a6d4 	.word	0x2000a6d4

0801ba50 <_close_r>:
 801ba50:	b538      	push	{r3, r4, r5, lr}
 801ba52:	4d06      	ldr	r5, [pc, #24]	; (801ba6c <_close_r+0x1c>)
 801ba54:	2300      	movs	r3, #0
 801ba56:	4604      	mov	r4, r0
 801ba58:	4608      	mov	r0, r1
 801ba5a:	602b      	str	r3, [r5, #0]
 801ba5c:	f7f1 fa67 	bl	800cf2e <_close>
 801ba60:	1c43      	adds	r3, r0, #1
 801ba62:	d102      	bne.n	801ba6a <_close_r+0x1a>
 801ba64:	682b      	ldr	r3, [r5, #0]
 801ba66:	b103      	cbz	r3, 801ba6a <_close_r+0x1a>
 801ba68:	6023      	str	r3, [r4, #0]
 801ba6a:	bd38      	pop	{r3, r4, r5, pc}
 801ba6c:	2000a6d4 	.word	0x2000a6d4

0801ba70 <quorem>:
 801ba70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba74:	6903      	ldr	r3, [r0, #16]
 801ba76:	690c      	ldr	r4, [r1, #16]
 801ba78:	42a3      	cmp	r3, r4
 801ba7a:	4607      	mov	r7, r0
 801ba7c:	f2c0 8081 	blt.w	801bb82 <quorem+0x112>
 801ba80:	3c01      	subs	r4, #1
 801ba82:	f101 0814 	add.w	r8, r1, #20
 801ba86:	f100 0514 	add.w	r5, r0, #20
 801ba8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba8e:	9301      	str	r3, [sp, #4]
 801ba90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ba94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba98:	3301      	adds	r3, #1
 801ba9a:	429a      	cmp	r2, r3
 801ba9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801baa0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801baa4:	fbb2 f6f3 	udiv	r6, r2, r3
 801baa8:	d331      	bcc.n	801bb0e <quorem+0x9e>
 801baaa:	f04f 0e00 	mov.w	lr, #0
 801baae:	4640      	mov	r0, r8
 801bab0:	46ac      	mov	ip, r5
 801bab2:	46f2      	mov	sl, lr
 801bab4:	f850 2b04 	ldr.w	r2, [r0], #4
 801bab8:	b293      	uxth	r3, r2
 801baba:	fb06 e303 	mla	r3, r6, r3, lr
 801babe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bac2:	b29b      	uxth	r3, r3
 801bac4:	ebaa 0303 	sub.w	r3, sl, r3
 801bac8:	0c12      	lsrs	r2, r2, #16
 801baca:	f8dc a000 	ldr.w	sl, [ip]
 801bace:	fb06 e202 	mla	r2, r6, r2, lr
 801bad2:	fa13 f38a 	uxtah	r3, r3, sl
 801bad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bada:	fa1f fa82 	uxth.w	sl, r2
 801bade:	f8dc 2000 	ldr.w	r2, [ip]
 801bae2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801bae6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801baea:	b29b      	uxth	r3, r3
 801baec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801baf0:	4581      	cmp	r9, r0
 801baf2:	f84c 3b04 	str.w	r3, [ip], #4
 801baf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bafa:	d2db      	bcs.n	801bab4 <quorem+0x44>
 801bafc:	f855 300b 	ldr.w	r3, [r5, fp]
 801bb00:	b92b      	cbnz	r3, 801bb0e <quorem+0x9e>
 801bb02:	9b01      	ldr	r3, [sp, #4]
 801bb04:	3b04      	subs	r3, #4
 801bb06:	429d      	cmp	r5, r3
 801bb08:	461a      	mov	r2, r3
 801bb0a:	d32e      	bcc.n	801bb6a <quorem+0xfa>
 801bb0c:	613c      	str	r4, [r7, #16]
 801bb0e:	4638      	mov	r0, r7
 801bb10:	f001 fc92 	bl	801d438 <__mcmp>
 801bb14:	2800      	cmp	r0, #0
 801bb16:	db24      	blt.n	801bb62 <quorem+0xf2>
 801bb18:	3601      	adds	r6, #1
 801bb1a:	4628      	mov	r0, r5
 801bb1c:	f04f 0c00 	mov.w	ip, #0
 801bb20:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb24:	f8d0 e000 	ldr.w	lr, [r0]
 801bb28:	b293      	uxth	r3, r2
 801bb2a:	ebac 0303 	sub.w	r3, ip, r3
 801bb2e:	0c12      	lsrs	r2, r2, #16
 801bb30:	fa13 f38e 	uxtah	r3, r3, lr
 801bb34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bb38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb42:	45c1      	cmp	r9, r8
 801bb44:	f840 3b04 	str.w	r3, [r0], #4
 801bb48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bb4c:	d2e8      	bcs.n	801bb20 <quorem+0xb0>
 801bb4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb56:	b922      	cbnz	r2, 801bb62 <quorem+0xf2>
 801bb58:	3b04      	subs	r3, #4
 801bb5a:	429d      	cmp	r5, r3
 801bb5c:	461a      	mov	r2, r3
 801bb5e:	d30a      	bcc.n	801bb76 <quorem+0x106>
 801bb60:	613c      	str	r4, [r7, #16]
 801bb62:	4630      	mov	r0, r6
 801bb64:	b003      	add	sp, #12
 801bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb6a:	6812      	ldr	r2, [r2, #0]
 801bb6c:	3b04      	subs	r3, #4
 801bb6e:	2a00      	cmp	r2, #0
 801bb70:	d1cc      	bne.n	801bb0c <quorem+0x9c>
 801bb72:	3c01      	subs	r4, #1
 801bb74:	e7c7      	b.n	801bb06 <quorem+0x96>
 801bb76:	6812      	ldr	r2, [r2, #0]
 801bb78:	3b04      	subs	r3, #4
 801bb7a:	2a00      	cmp	r2, #0
 801bb7c:	d1f0      	bne.n	801bb60 <quorem+0xf0>
 801bb7e:	3c01      	subs	r4, #1
 801bb80:	e7eb      	b.n	801bb5a <quorem+0xea>
 801bb82:	2000      	movs	r0, #0
 801bb84:	e7ee      	b.n	801bb64 <quorem+0xf4>
	...

0801bb88 <_dtoa_r>:
 801bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb8c:	ed2d 8b02 	vpush	{d8}
 801bb90:	ec57 6b10 	vmov	r6, r7, d0
 801bb94:	b095      	sub	sp, #84	; 0x54
 801bb96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bb98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bb9c:	9105      	str	r1, [sp, #20]
 801bb9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801bba2:	4604      	mov	r4, r0
 801bba4:	9209      	str	r2, [sp, #36]	; 0x24
 801bba6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bba8:	b975      	cbnz	r5, 801bbc8 <_dtoa_r+0x40>
 801bbaa:	2010      	movs	r0, #16
 801bbac:	f7fe f848 	bl	8019c40 <malloc>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	6260      	str	r0, [r4, #36]	; 0x24
 801bbb4:	b920      	cbnz	r0, 801bbc0 <_dtoa_r+0x38>
 801bbb6:	4bb2      	ldr	r3, [pc, #712]	; (801be80 <_dtoa_r+0x2f8>)
 801bbb8:	21ea      	movs	r1, #234	; 0xea
 801bbba:	48b2      	ldr	r0, [pc, #712]	; (801be84 <_dtoa_r+0x2fc>)
 801bbbc:	f002 f808 	bl	801dbd0 <__assert_func>
 801bbc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bbc4:	6005      	str	r5, [r0, #0]
 801bbc6:	60c5      	str	r5, [r0, #12]
 801bbc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbca:	6819      	ldr	r1, [r3, #0]
 801bbcc:	b151      	cbz	r1, 801bbe4 <_dtoa_r+0x5c>
 801bbce:	685a      	ldr	r2, [r3, #4]
 801bbd0:	604a      	str	r2, [r1, #4]
 801bbd2:	2301      	movs	r3, #1
 801bbd4:	4093      	lsls	r3, r2
 801bbd6:	608b      	str	r3, [r1, #8]
 801bbd8:	4620      	mov	r0, r4
 801bbda:	f001 f9a5 	bl	801cf28 <_Bfree>
 801bbde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	601a      	str	r2, [r3, #0]
 801bbe4:	1e3b      	subs	r3, r7, #0
 801bbe6:	bfb9      	ittee	lt
 801bbe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801bbec:	9303      	strlt	r3, [sp, #12]
 801bbee:	2300      	movge	r3, #0
 801bbf0:	f8c8 3000 	strge.w	r3, [r8]
 801bbf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801bbf8:	4ba3      	ldr	r3, [pc, #652]	; (801be88 <_dtoa_r+0x300>)
 801bbfa:	bfbc      	itt	lt
 801bbfc:	2201      	movlt	r2, #1
 801bbfe:	f8c8 2000 	strlt.w	r2, [r8]
 801bc02:	ea33 0309 	bics.w	r3, r3, r9
 801bc06:	d11b      	bne.n	801bc40 <_dtoa_r+0xb8>
 801bc08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc0a:	f242 730f 	movw	r3, #9999	; 0x270f
 801bc0e:	6013      	str	r3, [r2, #0]
 801bc10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bc14:	4333      	orrs	r3, r6
 801bc16:	f000 857a 	beq.w	801c70e <_dtoa_r+0xb86>
 801bc1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc1c:	b963      	cbnz	r3, 801bc38 <_dtoa_r+0xb0>
 801bc1e:	4b9b      	ldr	r3, [pc, #620]	; (801be8c <_dtoa_r+0x304>)
 801bc20:	e024      	b.n	801bc6c <_dtoa_r+0xe4>
 801bc22:	4b9b      	ldr	r3, [pc, #620]	; (801be90 <_dtoa_r+0x308>)
 801bc24:	9300      	str	r3, [sp, #0]
 801bc26:	3308      	adds	r3, #8
 801bc28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bc2a:	6013      	str	r3, [r2, #0]
 801bc2c:	9800      	ldr	r0, [sp, #0]
 801bc2e:	b015      	add	sp, #84	; 0x54
 801bc30:	ecbd 8b02 	vpop	{d8}
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc38:	4b94      	ldr	r3, [pc, #592]	; (801be8c <_dtoa_r+0x304>)
 801bc3a:	9300      	str	r3, [sp, #0]
 801bc3c:	3303      	adds	r3, #3
 801bc3e:	e7f3      	b.n	801bc28 <_dtoa_r+0xa0>
 801bc40:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc44:	2200      	movs	r2, #0
 801bc46:	ec51 0b17 	vmov	r0, r1, d7
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801bc50:	f7e4 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc54:	4680      	mov	r8, r0
 801bc56:	b158      	cbz	r0, 801bc70 <_dtoa_r+0xe8>
 801bc58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	6013      	str	r3, [r2, #0]
 801bc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	f000 8551 	beq.w	801c708 <_dtoa_r+0xb80>
 801bc66:	488b      	ldr	r0, [pc, #556]	; (801be94 <_dtoa_r+0x30c>)
 801bc68:	6018      	str	r0, [r3, #0]
 801bc6a:	1e43      	subs	r3, r0, #1
 801bc6c:	9300      	str	r3, [sp, #0]
 801bc6e:	e7dd      	b.n	801bc2c <_dtoa_r+0xa4>
 801bc70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bc74:	aa12      	add	r2, sp, #72	; 0x48
 801bc76:	a913      	add	r1, sp, #76	; 0x4c
 801bc78:	4620      	mov	r0, r4
 801bc7a:	f001 fcfd 	bl	801d678 <__d2b>
 801bc7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bc82:	4683      	mov	fp, r0
 801bc84:	2d00      	cmp	r5, #0
 801bc86:	d07c      	beq.n	801bd82 <_dtoa_r+0x1fa>
 801bc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801bc8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bc92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801bc96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bc9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bc9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bca2:	4b7d      	ldr	r3, [pc, #500]	; (801be98 <_dtoa_r+0x310>)
 801bca4:	2200      	movs	r2, #0
 801bca6:	4630      	mov	r0, r6
 801bca8:	4639      	mov	r1, r7
 801bcaa:	f7e4 faed 	bl	8000288 <__aeabi_dsub>
 801bcae:	a36e      	add	r3, pc, #440	; (adr r3, 801be68 <_dtoa_r+0x2e0>)
 801bcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb4:	f7e4 fca0 	bl	80005f8 <__aeabi_dmul>
 801bcb8:	a36d      	add	r3, pc, #436	; (adr r3, 801be70 <_dtoa_r+0x2e8>)
 801bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcbe:	f7e4 fae5 	bl	800028c <__adddf3>
 801bcc2:	4606      	mov	r6, r0
 801bcc4:	4628      	mov	r0, r5
 801bcc6:	460f      	mov	r7, r1
 801bcc8:	f7e4 fc2c 	bl	8000524 <__aeabi_i2d>
 801bccc:	a36a      	add	r3, pc, #424	; (adr r3, 801be78 <_dtoa_r+0x2f0>)
 801bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd2:	f7e4 fc91 	bl	80005f8 <__aeabi_dmul>
 801bcd6:	4602      	mov	r2, r0
 801bcd8:	460b      	mov	r3, r1
 801bcda:	4630      	mov	r0, r6
 801bcdc:	4639      	mov	r1, r7
 801bcde:	f7e4 fad5 	bl	800028c <__adddf3>
 801bce2:	4606      	mov	r6, r0
 801bce4:	460f      	mov	r7, r1
 801bce6:	f7e4 ff37 	bl	8000b58 <__aeabi_d2iz>
 801bcea:	2200      	movs	r2, #0
 801bcec:	4682      	mov	sl, r0
 801bcee:	2300      	movs	r3, #0
 801bcf0:	4630      	mov	r0, r6
 801bcf2:	4639      	mov	r1, r7
 801bcf4:	f7e4 fef2 	bl	8000adc <__aeabi_dcmplt>
 801bcf8:	b148      	cbz	r0, 801bd0e <_dtoa_r+0x186>
 801bcfa:	4650      	mov	r0, sl
 801bcfc:	f7e4 fc12 	bl	8000524 <__aeabi_i2d>
 801bd00:	4632      	mov	r2, r6
 801bd02:	463b      	mov	r3, r7
 801bd04:	f7e4 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd08:	b908      	cbnz	r0, 801bd0e <_dtoa_r+0x186>
 801bd0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bd0e:	f1ba 0f16 	cmp.w	sl, #22
 801bd12:	d854      	bhi.n	801bdbe <_dtoa_r+0x236>
 801bd14:	4b61      	ldr	r3, [pc, #388]	; (801be9c <_dtoa_r+0x314>)
 801bd16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd22:	f7e4 fedb 	bl	8000adc <__aeabi_dcmplt>
 801bd26:	2800      	cmp	r0, #0
 801bd28:	d04b      	beq.n	801bdc2 <_dtoa_r+0x23a>
 801bd2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bd2e:	2300      	movs	r3, #0
 801bd30:	930e      	str	r3, [sp, #56]	; 0x38
 801bd32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bd34:	1b5d      	subs	r5, r3, r5
 801bd36:	1e6b      	subs	r3, r5, #1
 801bd38:	9304      	str	r3, [sp, #16]
 801bd3a:	bf43      	ittte	mi
 801bd3c:	2300      	movmi	r3, #0
 801bd3e:	f1c5 0801 	rsbmi	r8, r5, #1
 801bd42:	9304      	strmi	r3, [sp, #16]
 801bd44:	f04f 0800 	movpl.w	r8, #0
 801bd48:	f1ba 0f00 	cmp.w	sl, #0
 801bd4c:	db3b      	blt.n	801bdc6 <_dtoa_r+0x23e>
 801bd4e:	9b04      	ldr	r3, [sp, #16]
 801bd50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801bd54:	4453      	add	r3, sl
 801bd56:	9304      	str	r3, [sp, #16]
 801bd58:	2300      	movs	r3, #0
 801bd5a:	9306      	str	r3, [sp, #24]
 801bd5c:	9b05      	ldr	r3, [sp, #20]
 801bd5e:	2b09      	cmp	r3, #9
 801bd60:	d869      	bhi.n	801be36 <_dtoa_r+0x2ae>
 801bd62:	2b05      	cmp	r3, #5
 801bd64:	bfc4      	itt	gt
 801bd66:	3b04      	subgt	r3, #4
 801bd68:	9305      	strgt	r3, [sp, #20]
 801bd6a:	9b05      	ldr	r3, [sp, #20]
 801bd6c:	f1a3 0302 	sub.w	r3, r3, #2
 801bd70:	bfcc      	ite	gt
 801bd72:	2500      	movgt	r5, #0
 801bd74:	2501      	movle	r5, #1
 801bd76:	2b03      	cmp	r3, #3
 801bd78:	d869      	bhi.n	801be4e <_dtoa_r+0x2c6>
 801bd7a:	e8df f003 	tbb	[pc, r3]
 801bd7e:	4e2c      	.short	0x4e2c
 801bd80:	5a4c      	.short	0x5a4c
 801bd82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801bd86:	441d      	add	r5, r3
 801bd88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bd8c:	2b20      	cmp	r3, #32
 801bd8e:	bfc1      	itttt	gt
 801bd90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bd94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bd98:	fa09 f303 	lslgt.w	r3, r9, r3
 801bd9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bda0:	bfda      	itte	le
 801bda2:	f1c3 0320 	rsble	r3, r3, #32
 801bda6:	fa06 f003 	lslle.w	r0, r6, r3
 801bdaa:	4318      	orrgt	r0, r3
 801bdac:	f7e4 fbaa 	bl	8000504 <__aeabi_ui2d>
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	4606      	mov	r6, r0
 801bdb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bdb8:	3d01      	subs	r5, #1
 801bdba:	9310      	str	r3, [sp, #64]	; 0x40
 801bdbc:	e771      	b.n	801bca2 <_dtoa_r+0x11a>
 801bdbe:	2301      	movs	r3, #1
 801bdc0:	e7b6      	b.n	801bd30 <_dtoa_r+0x1a8>
 801bdc2:	900e      	str	r0, [sp, #56]	; 0x38
 801bdc4:	e7b5      	b.n	801bd32 <_dtoa_r+0x1aa>
 801bdc6:	f1ca 0300 	rsb	r3, sl, #0
 801bdca:	9306      	str	r3, [sp, #24]
 801bdcc:	2300      	movs	r3, #0
 801bdce:	eba8 080a 	sub.w	r8, r8, sl
 801bdd2:	930d      	str	r3, [sp, #52]	; 0x34
 801bdd4:	e7c2      	b.n	801bd5c <_dtoa_r+0x1d4>
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	9308      	str	r3, [sp, #32]
 801bdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	dc39      	bgt.n	801be54 <_dtoa_r+0x2cc>
 801bde0:	f04f 0901 	mov.w	r9, #1
 801bde4:	f8cd 9004 	str.w	r9, [sp, #4]
 801bde8:	464b      	mov	r3, r9
 801bdea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bdee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	6042      	str	r2, [r0, #4]
 801bdf4:	2204      	movs	r2, #4
 801bdf6:	f102 0614 	add.w	r6, r2, #20
 801bdfa:	429e      	cmp	r6, r3
 801bdfc:	6841      	ldr	r1, [r0, #4]
 801bdfe:	d92f      	bls.n	801be60 <_dtoa_r+0x2d8>
 801be00:	4620      	mov	r0, r4
 801be02:	f001 f851 	bl	801cea8 <_Balloc>
 801be06:	9000      	str	r0, [sp, #0]
 801be08:	2800      	cmp	r0, #0
 801be0a:	d14b      	bne.n	801bea4 <_dtoa_r+0x31c>
 801be0c:	4b24      	ldr	r3, [pc, #144]	; (801bea0 <_dtoa_r+0x318>)
 801be0e:	4602      	mov	r2, r0
 801be10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801be14:	e6d1      	b.n	801bbba <_dtoa_r+0x32>
 801be16:	2301      	movs	r3, #1
 801be18:	e7de      	b.n	801bdd8 <_dtoa_r+0x250>
 801be1a:	2300      	movs	r3, #0
 801be1c:	9308      	str	r3, [sp, #32]
 801be1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be20:	eb0a 0903 	add.w	r9, sl, r3
 801be24:	f109 0301 	add.w	r3, r9, #1
 801be28:	2b01      	cmp	r3, #1
 801be2a:	9301      	str	r3, [sp, #4]
 801be2c:	bfb8      	it	lt
 801be2e:	2301      	movlt	r3, #1
 801be30:	e7dd      	b.n	801bdee <_dtoa_r+0x266>
 801be32:	2301      	movs	r3, #1
 801be34:	e7f2      	b.n	801be1c <_dtoa_r+0x294>
 801be36:	2501      	movs	r5, #1
 801be38:	2300      	movs	r3, #0
 801be3a:	9305      	str	r3, [sp, #20]
 801be3c:	9508      	str	r5, [sp, #32]
 801be3e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801be42:	2200      	movs	r2, #0
 801be44:	f8cd 9004 	str.w	r9, [sp, #4]
 801be48:	2312      	movs	r3, #18
 801be4a:	9209      	str	r2, [sp, #36]	; 0x24
 801be4c:	e7cf      	b.n	801bdee <_dtoa_r+0x266>
 801be4e:	2301      	movs	r3, #1
 801be50:	9308      	str	r3, [sp, #32]
 801be52:	e7f4      	b.n	801be3e <_dtoa_r+0x2b6>
 801be54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801be58:	f8cd 9004 	str.w	r9, [sp, #4]
 801be5c:	464b      	mov	r3, r9
 801be5e:	e7c6      	b.n	801bdee <_dtoa_r+0x266>
 801be60:	3101      	adds	r1, #1
 801be62:	6041      	str	r1, [r0, #4]
 801be64:	0052      	lsls	r2, r2, #1
 801be66:	e7c6      	b.n	801bdf6 <_dtoa_r+0x26e>
 801be68:	636f4361 	.word	0x636f4361
 801be6c:	3fd287a7 	.word	0x3fd287a7
 801be70:	8b60c8b3 	.word	0x8b60c8b3
 801be74:	3fc68a28 	.word	0x3fc68a28
 801be78:	509f79fb 	.word	0x509f79fb
 801be7c:	3fd34413 	.word	0x3fd34413
 801be80:	0802048e 	.word	0x0802048e
 801be84:	080204a5 	.word	0x080204a5
 801be88:	7ff00000 	.word	0x7ff00000
 801be8c:	0802048a 	.word	0x0802048a
 801be90:	08020481 	.word	0x08020481
 801be94:	08020305 	.word	0x08020305
 801be98:	3ff80000 	.word	0x3ff80000
 801be9c:	08020620 	.word	0x08020620
 801bea0:	08020504 	.word	0x08020504
 801bea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bea6:	9a00      	ldr	r2, [sp, #0]
 801bea8:	601a      	str	r2, [r3, #0]
 801beaa:	9b01      	ldr	r3, [sp, #4]
 801beac:	2b0e      	cmp	r3, #14
 801beae:	f200 80ad 	bhi.w	801c00c <_dtoa_r+0x484>
 801beb2:	2d00      	cmp	r5, #0
 801beb4:	f000 80aa 	beq.w	801c00c <_dtoa_r+0x484>
 801beb8:	f1ba 0f00 	cmp.w	sl, #0
 801bebc:	dd36      	ble.n	801bf2c <_dtoa_r+0x3a4>
 801bebe:	4ac3      	ldr	r2, [pc, #780]	; (801c1cc <_dtoa_r+0x644>)
 801bec0:	f00a 030f 	and.w	r3, sl, #15
 801bec4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bec8:	ed93 7b00 	vldr	d7, [r3]
 801becc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801bed0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801bed4:	eeb0 8a47 	vmov.f32	s16, s14
 801bed8:	eef0 8a67 	vmov.f32	s17, s15
 801bedc:	d016      	beq.n	801bf0c <_dtoa_r+0x384>
 801bede:	4bbc      	ldr	r3, [pc, #752]	; (801c1d0 <_dtoa_r+0x648>)
 801bee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bee4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bee8:	f7e4 fcb0 	bl	800084c <__aeabi_ddiv>
 801beec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bef0:	f007 070f 	and.w	r7, r7, #15
 801bef4:	2503      	movs	r5, #3
 801bef6:	4eb6      	ldr	r6, [pc, #728]	; (801c1d0 <_dtoa_r+0x648>)
 801bef8:	b957      	cbnz	r7, 801bf10 <_dtoa_r+0x388>
 801befa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801befe:	ec53 2b18 	vmov	r2, r3, d8
 801bf02:	f7e4 fca3 	bl	800084c <__aeabi_ddiv>
 801bf06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf0a:	e029      	b.n	801bf60 <_dtoa_r+0x3d8>
 801bf0c:	2502      	movs	r5, #2
 801bf0e:	e7f2      	b.n	801bef6 <_dtoa_r+0x36e>
 801bf10:	07f9      	lsls	r1, r7, #31
 801bf12:	d508      	bpl.n	801bf26 <_dtoa_r+0x39e>
 801bf14:	ec51 0b18 	vmov	r0, r1, d8
 801bf18:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bf1c:	f7e4 fb6c 	bl	80005f8 <__aeabi_dmul>
 801bf20:	ec41 0b18 	vmov	d8, r0, r1
 801bf24:	3501      	adds	r5, #1
 801bf26:	107f      	asrs	r7, r7, #1
 801bf28:	3608      	adds	r6, #8
 801bf2a:	e7e5      	b.n	801bef8 <_dtoa_r+0x370>
 801bf2c:	f000 80a6 	beq.w	801c07c <_dtoa_r+0x4f4>
 801bf30:	f1ca 0600 	rsb	r6, sl, #0
 801bf34:	4ba5      	ldr	r3, [pc, #660]	; (801c1cc <_dtoa_r+0x644>)
 801bf36:	4fa6      	ldr	r7, [pc, #664]	; (801c1d0 <_dtoa_r+0x648>)
 801bf38:	f006 020f 	and.w	r2, r6, #15
 801bf3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bf48:	f7e4 fb56 	bl	80005f8 <__aeabi_dmul>
 801bf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf50:	1136      	asrs	r6, r6, #4
 801bf52:	2300      	movs	r3, #0
 801bf54:	2502      	movs	r5, #2
 801bf56:	2e00      	cmp	r6, #0
 801bf58:	f040 8085 	bne.w	801c066 <_dtoa_r+0x4de>
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d1d2      	bne.n	801bf06 <_dtoa_r+0x37e>
 801bf60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	f000 808c 	beq.w	801c080 <_dtoa_r+0x4f8>
 801bf68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bf6c:	4b99      	ldr	r3, [pc, #612]	; (801c1d4 <_dtoa_r+0x64c>)
 801bf6e:	2200      	movs	r2, #0
 801bf70:	4630      	mov	r0, r6
 801bf72:	4639      	mov	r1, r7
 801bf74:	f7e4 fdb2 	bl	8000adc <__aeabi_dcmplt>
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	f000 8081 	beq.w	801c080 <_dtoa_r+0x4f8>
 801bf7e:	9b01      	ldr	r3, [sp, #4]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d07d      	beq.n	801c080 <_dtoa_r+0x4f8>
 801bf84:	f1b9 0f00 	cmp.w	r9, #0
 801bf88:	dd3c      	ble.n	801c004 <_dtoa_r+0x47c>
 801bf8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801bf8e:	9307      	str	r3, [sp, #28]
 801bf90:	2200      	movs	r2, #0
 801bf92:	4b91      	ldr	r3, [pc, #580]	; (801c1d8 <_dtoa_r+0x650>)
 801bf94:	4630      	mov	r0, r6
 801bf96:	4639      	mov	r1, r7
 801bf98:	f7e4 fb2e 	bl	80005f8 <__aeabi_dmul>
 801bf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfa0:	3501      	adds	r5, #1
 801bfa2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bfa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bfaa:	4628      	mov	r0, r5
 801bfac:	f7e4 faba 	bl	8000524 <__aeabi_i2d>
 801bfb0:	4632      	mov	r2, r6
 801bfb2:	463b      	mov	r3, r7
 801bfb4:	f7e4 fb20 	bl	80005f8 <__aeabi_dmul>
 801bfb8:	4b88      	ldr	r3, [pc, #544]	; (801c1dc <_dtoa_r+0x654>)
 801bfba:	2200      	movs	r2, #0
 801bfbc:	f7e4 f966 	bl	800028c <__adddf3>
 801bfc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801bfc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bfc8:	9303      	str	r3, [sp, #12]
 801bfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d15c      	bne.n	801c08a <_dtoa_r+0x502>
 801bfd0:	4b83      	ldr	r3, [pc, #524]	; (801c1e0 <_dtoa_r+0x658>)
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	4630      	mov	r0, r6
 801bfd6:	4639      	mov	r1, r7
 801bfd8:	f7e4 f956 	bl	8000288 <__aeabi_dsub>
 801bfdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfe0:	4606      	mov	r6, r0
 801bfe2:	460f      	mov	r7, r1
 801bfe4:	f7e4 fd98 	bl	8000b18 <__aeabi_dcmpgt>
 801bfe8:	2800      	cmp	r0, #0
 801bfea:	f040 8296 	bne.w	801c51a <_dtoa_r+0x992>
 801bfee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bff2:	4630      	mov	r0, r6
 801bff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bff8:	4639      	mov	r1, r7
 801bffa:	f7e4 fd6f 	bl	8000adc <__aeabi_dcmplt>
 801bffe:	2800      	cmp	r0, #0
 801c000:	f040 8288 	bne.w	801c514 <_dtoa_r+0x98c>
 801c004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c00c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c00e:	2b00      	cmp	r3, #0
 801c010:	f2c0 8158 	blt.w	801c2c4 <_dtoa_r+0x73c>
 801c014:	f1ba 0f0e 	cmp.w	sl, #14
 801c018:	f300 8154 	bgt.w	801c2c4 <_dtoa_r+0x73c>
 801c01c:	4b6b      	ldr	r3, [pc, #428]	; (801c1cc <_dtoa_r+0x644>)
 801c01e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c022:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c028:	2b00      	cmp	r3, #0
 801c02a:	f280 80e3 	bge.w	801c1f4 <_dtoa_r+0x66c>
 801c02e:	9b01      	ldr	r3, [sp, #4]
 801c030:	2b00      	cmp	r3, #0
 801c032:	f300 80df 	bgt.w	801c1f4 <_dtoa_r+0x66c>
 801c036:	f040 826d 	bne.w	801c514 <_dtoa_r+0x98c>
 801c03a:	4b69      	ldr	r3, [pc, #420]	; (801c1e0 <_dtoa_r+0x658>)
 801c03c:	2200      	movs	r2, #0
 801c03e:	4640      	mov	r0, r8
 801c040:	4649      	mov	r1, r9
 801c042:	f7e4 fad9 	bl	80005f8 <__aeabi_dmul>
 801c046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c04a:	f7e4 fd5b 	bl	8000b04 <__aeabi_dcmpge>
 801c04e:	9e01      	ldr	r6, [sp, #4]
 801c050:	4637      	mov	r7, r6
 801c052:	2800      	cmp	r0, #0
 801c054:	f040 8243 	bne.w	801c4de <_dtoa_r+0x956>
 801c058:	9d00      	ldr	r5, [sp, #0]
 801c05a:	2331      	movs	r3, #49	; 0x31
 801c05c:	f805 3b01 	strb.w	r3, [r5], #1
 801c060:	f10a 0a01 	add.w	sl, sl, #1
 801c064:	e23f      	b.n	801c4e6 <_dtoa_r+0x95e>
 801c066:	07f2      	lsls	r2, r6, #31
 801c068:	d505      	bpl.n	801c076 <_dtoa_r+0x4ee>
 801c06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c06e:	f7e4 fac3 	bl	80005f8 <__aeabi_dmul>
 801c072:	3501      	adds	r5, #1
 801c074:	2301      	movs	r3, #1
 801c076:	1076      	asrs	r6, r6, #1
 801c078:	3708      	adds	r7, #8
 801c07a:	e76c      	b.n	801bf56 <_dtoa_r+0x3ce>
 801c07c:	2502      	movs	r5, #2
 801c07e:	e76f      	b.n	801bf60 <_dtoa_r+0x3d8>
 801c080:	9b01      	ldr	r3, [sp, #4]
 801c082:	f8cd a01c 	str.w	sl, [sp, #28]
 801c086:	930c      	str	r3, [sp, #48]	; 0x30
 801c088:	e78d      	b.n	801bfa6 <_dtoa_r+0x41e>
 801c08a:	9900      	ldr	r1, [sp, #0]
 801c08c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c090:	4b4e      	ldr	r3, [pc, #312]	; (801c1cc <_dtoa_r+0x644>)
 801c092:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c096:	4401      	add	r1, r0
 801c098:	9102      	str	r1, [sp, #8]
 801c09a:	9908      	ldr	r1, [sp, #32]
 801c09c:	eeb0 8a47 	vmov.f32	s16, s14
 801c0a0:	eef0 8a67 	vmov.f32	s17, s15
 801c0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c0a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c0ac:	2900      	cmp	r1, #0
 801c0ae:	d045      	beq.n	801c13c <_dtoa_r+0x5b4>
 801c0b0:	494c      	ldr	r1, [pc, #304]	; (801c1e4 <_dtoa_r+0x65c>)
 801c0b2:	2000      	movs	r0, #0
 801c0b4:	f7e4 fbca 	bl	800084c <__aeabi_ddiv>
 801c0b8:	ec53 2b18 	vmov	r2, r3, d8
 801c0bc:	f7e4 f8e4 	bl	8000288 <__aeabi_dsub>
 801c0c0:	9d00      	ldr	r5, [sp, #0]
 801c0c2:	ec41 0b18 	vmov	d8, r0, r1
 801c0c6:	4639      	mov	r1, r7
 801c0c8:	4630      	mov	r0, r6
 801c0ca:	f7e4 fd45 	bl	8000b58 <__aeabi_d2iz>
 801c0ce:	900c      	str	r0, [sp, #48]	; 0x30
 801c0d0:	f7e4 fa28 	bl	8000524 <__aeabi_i2d>
 801c0d4:	4602      	mov	r2, r0
 801c0d6:	460b      	mov	r3, r1
 801c0d8:	4630      	mov	r0, r6
 801c0da:	4639      	mov	r1, r7
 801c0dc:	f7e4 f8d4 	bl	8000288 <__aeabi_dsub>
 801c0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0e2:	3330      	adds	r3, #48	; 0x30
 801c0e4:	f805 3b01 	strb.w	r3, [r5], #1
 801c0e8:	ec53 2b18 	vmov	r2, r3, d8
 801c0ec:	4606      	mov	r6, r0
 801c0ee:	460f      	mov	r7, r1
 801c0f0:	f7e4 fcf4 	bl	8000adc <__aeabi_dcmplt>
 801c0f4:	2800      	cmp	r0, #0
 801c0f6:	d165      	bne.n	801c1c4 <_dtoa_r+0x63c>
 801c0f8:	4632      	mov	r2, r6
 801c0fa:	463b      	mov	r3, r7
 801c0fc:	4935      	ldr	r1, [pc, #212]	; (801c1d4 <_dtoa_r+0x64c>)
 801c0fe:	2000      	movs	r0, #0
 801c100:	f7e4 f8c2 	bl	8000288 <__aeabi_dsub>
 801c104:	ec53 2b18 	vmov	r2, r3, d8
 801c108:	f7e4 fce8 	bl	8000adc <__aeabi_dcmplt>
 801c10c:	2800      	cmp	r0, #0
 801c10e:	f040 80b9 	bne.w	801c284 <_dtoa_r+0x6fc>
 801c112:	9b02      	ldr	r3, [sp, #8]
 801c114:	429d      	cmp	r5, r3
 801c116:	f43f af75 	beq.w	801c004 <_dtoa_r+0x47c>
 801c11a:	4b2f      	ldr	r3, [pc, #188]	; (801c1d8 <_dtoa_r+0x650>)
 801c11c:	ec51 0b18 	vmov	r0, r1, d8
 801c120:	2200      	movs	r2, #0
 801c122:	f7e4 fa69 	bl	80005f8 <__aeabi_dmul>
 801c126:	4b2c      	ldr	r3, [pc, #176]	; (801c1d8 <_dtoa_r+0x650>)
 801c128:	ec41 0b18 	vmov	d8, r0, r1
 801c12c:	2200      	movs	r2, #0
 801c12e:	4630      	mov	r0, r6
 801c130:	4639      	mov	r1, r7
 801c132:	f7e4 fa61 	bl	80005f8 <__aeabi_dmul>
 801c136:	4606      	mov	r6, r0
 801c138:	460f      	mov	r7, r1
 801c13a:	e7c4      	b.n	801c0c6 <_dtoa_r+0x53e>
 801c13c:	ec51 0b17 	vmov	r0, r1, d7
 801c140:	f7e4 fa5a 	bl	80005f8 <__aeabi_dmul>
 801c144:	9b02      	ldr	r3, [sp, #8]
 801c146:	9d00      	ldr	r5, [sp, #0]
 801c148:	930c      	str	r3, [sp, #48]	; 0x30
 801c14a:	ec41 0b18 	vmov	d8, r0, r1
 801c14e:	4639      	mov	r1, r7
 801c150:	4630      	mov	r0, r6
 801c152:	f7e4 fd01 	bl	8000b58 <__aeabi_d2iz>
 801c156:	9011      	str	r0, [sp, #68]	; 0x44
 801c158:	f7e4 f9e4 	bl	8000524 <__aeabi_i2d>
 801c15c:	4602      	mov	r2, r0
 801c15e:	460b      	mov	r3, r1
 801c160:	4630      	mov	r0, r6
 801c162:	4639      	mov	r1, r7
 801c164:	f7e4 f890 	bl	8000288 <__aeabi_dsub>
 801c168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c16a:	3330      	adds	r3, #48	; 0x30
 801c16c:	f805 3b01 	strb.w	r3, [r5], #1
 801c170:	9b02      	ldr	r3, [sp, #8]
 801c172:	429d      	cmp	r5, r3
 801c174:	4606      	mov	r6, r0
 801c176:	460f      	mov	r7, r1
 801c178:	f04f 0200 	mov.w	r2, #0
 801c17c:	d134      	bne.n	801c1e8 <_dtoa_r+0x660>
 801c17e:	4b19      	ldr	r3, [pc, #100]	; (801c1e4 <_dtoa_r+0x65c>)
 801c180:	ec51 0b18 	vmov	r0, r1, d8
 801c184:	f7e4 f882 	bl	800028c <__adddf3>
 801c188:	4602      	mov	r2, r0
 801c18a:	460b      	mov	r3, r1
 801c18c:	4630      	mov	r0, r6
 801c18e:	4639      	mov	r1, r7
 801c190:	f7e4 fcc2 	bl	8000b18 <__aeabi_dcmpgt>
 801c194:	2800      	cmp	r0, #0
 801c196:	d175      	bne.n	801c284 <_dtoa_r+0x6fc>
 801c198:	ec53 2b18 	vmov	r2, r3, d8
 801c19c:	4911      	ldr	r1, [pc, #68]	; (801c1e4 <_dtoa_r+0x65c>)
 801c19e:	2000      	movs	r0, #0
 801c1a0:	f7e4 f872 	bl	8000288 <__aeabi_dsub>
 801c1a4:	4602      	mov	r2, r0
 801c1a6:	460b      	mov	r3, r1
 801c1a8:	4630      	mov	r0, r6
 801c1aa:	4639      	mov	r1, r7
 801c1ac:	f7e4 fc96 	bl	8000adc <__aeabi_dcmplt>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	f43f af27 	beq.w	801c004 <_dtoa_r+0x47c>
 801c1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c1b8:	1e6b      	subs	r3, r5, #1
 801c1ba:	930c      	str	r3, [sp, #48]	; 0x30
 801c1bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c1c0:	2b30      	cmp	r3, #48	; 0x30
 801c1c2:	d0f8      	beq.n	801c1b6 <_dtoa_r+0x62e>
 801c1c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c1c8:	e04a      	b.n	801c260 <_dtoa_r+0x6d8>
 801c1ca:	bf00      	nop
 801c1cc:	08020620 	.word	0x08020620
 801c1d0:	080205f8 	.word	0x080205f8
 801c1d4:	3ff00000 	.word	0x3ff00000
 801c1d8:	40240000 	.word	0x40240000
 801c1dc:	401c0000 	.word	0x401c0000
 801c1e0:	40140000 	.word	0x40140000
 801c1e4:	3fe00000 	.word	0x3fe00000
 801c1e8:	4baf      	ldr	r3, [pc, #700]	; (801c4a8 <_dtoa_r+0x920>)
 801c1ea:	f7e4 fa05 	bl	80005f8 <__aeabi_dmul>
 801c1ee:	4606      	mov	r6, r0
 801c1f0:	460f      	mov	r7, r1
 801c1f2:	e7ac      	b.n	801c14e <_dtoa_r+0x5c6>
 801c1f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c1f8:	9d00      	ldr	r5, [sp, #0]
 801c1fa:	4642      	mov	r2, r8
 801c1fc:	464b      	mov	r3, r9
 801c1fe:	4630      	mov	r0, r6
 801c200:	4639      	mov	r1, r7
 801c202:	f7e4 fb23 	bl	800084c <__aeabi_ddiv>
 801c206:	f7e4 fca7 	bl	8000b58 <__aeabi_d2iz>
 801c20a:	9002      	str	r0, [sp, #8]
 801c20c:	f7e4 f98a 	bl	8000524 <__aeabi_i2d>
 801c210:	4642      	mov	r2, r8
 801c212:	464b      	mov	r3, r9
 801c214:	f7e4 f9f0 	bl	80005f8 <__aeabi_dmul>
 801c218:	4602      	mov	r2, r0
 801c21a:	460b      	mov	r3, r1
 801c21c:	4630      	mov	r0, r6
 801c21e:	4639      	mov	r1, r7
 801c220:	f7e4 f832 	bl	8000288 <__aeabi_dsub>
 801c224:	9e02      	ldr	r6, [sp, #8]
 801c226:	9f01      	ldr	r7, [sp, #4]
 801c228:	3630      	adds	r6, #48	; 0x30
 801c22a:	f805 6b01 	strb.w	r6, [r5], #1
 801c22e:	9e00      	ldr	r6, [sp, #0]
 801c230:	1bae      	subs	r6, r5, r6
 801c232:	42b7      	cmp	r7, r6
 801c234:	4602      	mov	r2, r0
 801c236:	460b      	mov	r3, r1
 801c238:	d137      	bne.n	801c2aa <_dtoa_r+0x722>
 801c23a:	f7e4 f827 	bl	800028c <__adddf3>
 801c23e:	4642      	mov	r2, r8
 801c240:	464b      	mov	r3, r9
 801c242:	4606      	mov	r6, r0
 801c244:	460f      	mov	r7, r1
 801c246:	f7e4 fc67 	bl	8000b18 <__aeabi_dcmpgt>
 801c24a:	b9c8      	cbnz	r0, 801c280 <_dtoa_r+0x6f8>
 801c24c:	4642      	mov	r2, r8
 801c24e:	464b      	mov	r3, r9
 801c250:	4630      	mov	r0, r6
 801c252:	4639      	mov	r1, r7
 801c254:	f7e4 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 801c258:	b110      	cbz	r0, 801c260 <_dtoa_r+0x6d8>
 801c25a:	9b02      	ldr	r3, [sp, #8]
 801c25c:	07d9      	lsls	r1, r3, #31
 801c25e:	d40f      	bmi.n	801c280 <_dtoa_r+0x6f8>
 801c260:	4620      	mov	r0, r4
 801c262:	4659      	mov	r1, fp
 801c264:	f000 fe60 	bl	801cf28 <_Bfree>
 801c268:	2300      	movs	r3, #0
 801c26a:	702b      	strb	r3, [r5, #0]
 801c26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c26e:	f10a 0001 	add.w	r0, sl, #1
 801c272:	6018      	str	r0, [r3, #0]
 801c274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c276:	2b00      	cmp	r3, #0
 801c278:	f43f acd8 	beq.w	801bc2c <_dtoa_r+0xa4>
 801c27c:	601d      	str	r5, [r3, #0]
 801c27e:	e4d5      	b.n	801bc2c <_dtoa_r+0xa4>
 801c280:	f8cd a01c 	str.w	sl, [sp, #28]
 801c284:	462b      	mov	r3, r5
 801c286:	461d      	mov	r5, r3
 801c288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c28c:	2a39      	cmp	r2, #57	; 0x39
 801c28e:	d108      	bne.n	801c2a2 <_dtoa_r+0x71a>
 801c290:	9a00      	ldr	r2, [sp, #0]
 801c292:	429a      	cmp	r2, r3
 801c294:	d1f7      	bne.n	801c286 <_dtoa_r+0x6fe>
 801c296:	9a07      	ldr	r2, [sp, #28]
 801c298:	9900      	ldr	r1, [sp, #0]
 801c29a:	3201      	adds	r2, #1
 801c29c:	9207      	str	r2, [sp, #28]
 801c29e:	2230      	movs	r2, #48	; 0x30
 801c2a0:	700a      	strb	r2, [r1, #0]
 801c2a2:	781a      	ldrb	r2, [r3, #0]
 801c2a4:	3201      	adds	r2, #1
 801c2a6:	701a      	strb	r2, [r3, #0]
 801c2a8:	e78c      	b.n	801c1c4 <_dtoa_r+0x63c>
 801c2aa:	4b7f      	ldr	r3, [pc, #508]	; (801c4a8 <_dtoa_r+0x920>)
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	f7e4 f9a3 	bl	80005f8 <__aeabi_dmul>
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	4606      	mov	r6, r0
 801c2b8:	460f      	mov	r7, r1
 801c2ba:	f7e4 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 801c2be:	2800      	cmp	r0, #0
 801c2c0:	d09b      	beq.n	801c1fa <_dtoa_r+0x672>
 801c2c2:	e7cd      	b.n	801c260 <_dtoa_r+0x6d8>
 801c2c4:	9a08      	ldr	r2, [sp, #32]
 801c2c6:	2a00      	cmp	r2, #0
 801c2c8:	f000 80c4 	beq.w	801c454 <_dtoa_r+0x8cc>
 801c2cc:	9a05      	ldr	r2, [sp, #20]
 801c2ce:	2a01      	cmp	r2, #1
 801c2d0:	f300 80a8 	bgt.w	801c424 <_dtoa_r+0x89c>
 801c2d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2d6:	2a00      	cmp	r2, #0
 801c2d8:	f000 80a0 	beq.w	801c41c <_dtoa_r+0x894>
 801c2dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c2e0:	9e06      	ldr	r6, [sp, #24]
 801c2e2:	4645      	mov	r5, r8
 801c2e4:	9a04      	ldr	r2, [sp, #16]
 801c2e6:	2101      	movs	r1, #1
 801c2e8:	441a      	add	r2, r3
 801c2ea:	4620      	mov	r0, r4
 801c2ec:	4498      	add	r8, r3
 801c2ee:	9204      	str	r2, [sp, #16]
 801c2f0:	f000 ff20 	bl	801d134 <__i2b>
 801c2f4:	4607      	mov	r7, r0
 801c2f6:	2d00      	cmp	r5, #0
 801c2f8:	dd0b      	ble.n	801c312 <_dtoa_r+0x78a>
 801c2fa:	9b04      	ldr	r3, [sp, #16]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	dd08      	ble.n	801c312 <_dtoa_r+0x78a>
 801c300:	42ab      	cmp	r3, r5
 801c302:	9a04      	ldr	r2, [sp, #16]
 801c304:	bfa8      	it	ge
 801c306:	462b      	movge	r3, r5
 801c308:	eba8 0803 	sub.w	r8, r8, r3
 801c30c:	1aed      	subs	r5, r5, r3
 801c30e:	1ad3      	subs	r3, r2, r3
 801c310:	9304      	str	r3, [sp, #16]
 801c312:	9b06      	ldr	r3, [sp, #24]
 801c314:	b1fb      	cbz	r3, 801c356 <_dtoa_r+0x7ce>
 801c316:	9b08      	ldr	r3, [sp, #32]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f000 809f 	beq.w	801c45c <_dtoa_r+0x8d4>
 801c31e:	2e00      	cmp	r6, #0
 801c320:	dd11      	ble.n	801c346 <_dtoa_r+0x7be>
 801c322:	4639      	mov	r1, r7
 801c324:	4632      	mov	r2, r6
 801c326:	4620      	mov	r0, r4
 801c328:	f000 ffc0 	bl	801d2ac <__pow5mult>
 801c32c:	465a      	mov	r2, fp
 801c32e:	4601      	mov	r1, r0
 801c330:	4607      	mov	r7, r0
 801c332:	4620      	mov	r0, r4
 801c334:	f000 ff14 	bl	801d160 <__multiply>
 801c338:	4659      	mov	r1, fp
 801c33a:	9007      	str	r0, [sp, #28]
 801c33c:	4620      	mov	r0, r4
 801c33e:	f000 fdf3 	bl	801cf28 <_Bfree>
 801c342:	9b07      	ldr	r3, [sp, #28]
 801c344:	469b      	mov	fp, r3
 801c346:	9b06      	ldr	r3, [sp, #24]
 801c348:	1b9a      	subs	r2, r3, r6
 801c34a:	d004      	beq.n	801c356 <_dtoa_r+0x7ce>
 801c34c:	4659      	mov	r1, fp
 801c34e:	4620      	mov	r0, r4
 801c350:	f000 ffac 	bl	801d2ac <__pow5mult>
 801c354:	4683      	mov	fp, r0
 801c356:	2101      	movs	r1, #1
 801c358:	4620      	mov	r0, r4
 801c35a:	f000 feeb 	bl	801d134 <__i2b>
 801c35e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c360:	2b00      	cmp	r3, #0
 801c362:	4606      	mov	r6, r0
 801c364:	dd7c      	ble.n	801c460 <_dtoa_r+0x8d8>
 801c366:	461a      	mov	r2, r3
 801c368:	4601      	mov	r1, r0
 801c36a:	4620      	mov	r0, r4
 801c36c:	f000 ff9e 	bl	801d2ac <__pow5mult>
 801c370:	9b05      	ldr	r3, [sp, #20]
 801c372:	2b01      	cmp	r3, #1
 801c374:	4606      	mov	r6, r0
 801c376:	dd76      	ble.n	801c466 <_dtoa_r+0x8de>
 801c378:	2300      	movs	r3, #0
 801c37a:	9306      	str	r3, [sp, #24]
 801c37c:	6933      	ldr	r3, [r6, #16]
 801c37e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c382:	6918      	ldr	r0, [r3, #16]
 801c384:	f000 fe86 	bl	801d094 <__hi0bits>
 801c388:	f1c0 0020 	rsb	r0, r0, #32
 801c38c:	9b04      	ldr	r3, [sp, #16]
 801c38e:	4418      	add	r0, r3
 801c390:	f010 001f 	ands.w	r0, r0, #31
 801c394:	f000 8086 	beq.w	801c4a4 <_dtoa_r+0x91c>
 801c398:	f1c0 0320 	rsb	r3, r0, #32
 801c39c:	2b04      	cmp	r3, #4
 801c39e:	dd7f      	ble.n	801c4a0 <_dtoa_r+0x918>
 801c3a0:	f1c0 001c 	rsb	r0, r0, #28
 801c3a4:	9b04      	ldr	r3, [sp, #16]
 801c3a6:	4403      	add	r3, r0
 801c3a8:	4480      	add	r8, r0
 801c3aa:	4405      	add	r5, r0
 801c3ac:	9304      	str	r3, [sp, #16]
 801c3ae:	f1b8 0f00 	cmp.w	r8, #0
 801c3b2:	dd05      	ble.n	801c3c0 <_dtoa_r+0x838>
 801c3b4:	4659      	mov	r1, fp
 801c3b6:	4642      	mov	r2, r8
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f000 ffd1 	bl	801d360 <__lshift>
 801c3be:	4683      	mov	fp, r0
 801c3c0:	9b04      	ldr	r3, [sp, #16]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	dd05      	ble.n	801c3d2 <_dtoa_r+0x84a>
 801c3c6:	4631      	mov	r1, r6
 801c3c8:	461a      	mov	r2, r3
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	f000 ffc8 	bl	801d360 <__lshift>
 801c3d0:	4606      	mov	r6, r0
 801c3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d069      	beq.n	801c4ac <_dtoa_r+0x924>
 801c3d8:	4631      	mov	r1, r6
 801c3da:	4658      	mov	r0, fp
 801c3dc:	f001 f82c 	bl	801d438 <__mcmp>
 801c3e0:	2800      	cmp	r0, #0
 801c3e2:	da63      	bge.n	801c4ac <_dtoa_r+0x924>
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	4659      	mov	r1, fp
 801c3e8:	220a      	movs	r2, #10
 801c3ea:	4620      	mov	r0, r4
 801c3ec:	f000 fdbe 	bl	801cf6c <__multadd>
 801c3f0:	9b08      	ldr	r3, [sp, #32]
 801c3f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c3f6:	4683      	mov	fp, r0
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	f000 818f 	beq.w	801c71c <_dtoa_r+0xb94>
 801c3fe:	4639      	mov	r1, r7
 801c400:	2300      	movs	r3, #0
 801c402:	220a      	movs	r2, #10
 801c404:	4620      	mov	r0, r4
 801c406:	f000 fdb1 	bl	801cf6c <__multadd>
 801c40a:	f1b9 0f00 	cmp.w	r9, #0
 801c40e:	4607      	mov	r7, r0
 801c410:	f300 808e 	bgt.w	801c530 <_dtoa_r+0x9a8>
 801c414:	9b05      	ldr	r3, [sp, #20]
 801c416:	2b02      	cmp	r3, #2
 801c418:	dc50      	bgt.n	801c4bc <_dtoa_r+0x934>
 801c41a:	e089      	b.n	801c530 <_dtoa_r+0x9a8>
 801c41c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c41e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c422:	e75d      	b.n	801c2e0 <_dtoa_r+0x758>
 801c424:	9b01      	ldr	r3, [sp, #4]
 801c426:	1e5e      	subs	r6, r3, #1
 801c428:	9b06      	ldr	r3, [sp, #24]
 801c42a:	42b3      	cmp	r3, r6
 801c42c:	bfbf      	itttt	lt
 801c42e:	9b06      	ldrlt	r3, [sp, #24]
 801c430:	9606      	strlt	r6, [sp, #24]
 801c432:	1af2      	sublt	r2, r6, r3
 801c434:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801c436:	bfb6      	itet	lt
 801c438:	189b      	addlt	r3, r3, r2
 801c43a:	1b9e      	subge	r6, r3, r6
 801c43c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801c43e:	9b01      	ldr	r3, [sp, #4]
 801c440:	bfb8      	it	lt
 801c442:	2600      	movlt	r6, #0
 801c444:	2b00      	cmp	r3, #0
 801c446:	bfb5      	itete	lt
 801c448:	eba8 0503 	sublt.w	r5, r8, r3
 801c44c:	9b01      	ldrge	r3, [sp, #4]
 801c44e:	2300      	movlt	r3, #0
 801c450:	4645      	movge	r5, r8
 801c452:	e747      	b.n	801c2e4 <_dtoa_r+0x75c>
 801c454:	9e06      	ldr	r6, [sp, #24]
 801c456:	9f08      	ldr	r7, [sp, #32]
 801c458:	4645      	mov	r5, r8
 801c45a:	e74c      	b.n	801c2f6 <_dtoa_r+0x76e>
 801c45c:	9a06      	ldr	r2, [sp, #24]
 801c45e:	e775      	b.n	801c34c <_dtoa_r+0x7c4>
 801c460:	9b05      	ldr	r3, [sp, #20]
 801c462:	2b01      	cmp	r3, #1
 801c464:	dc18      	bgt.n	801c498 <_dtoa_r+0x910>
 801c466:	9b02      	ldr	r3, [sp, #8]
 801c468:	b9b3      	cbnz	r3, 801c498 <_dtoa_r+0x910>
 801c46a:	9b03      	ldr	r3, [sp, #12]
 801c46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c470:	b9a3      	cbnz	r3, 801c49c <_dtoa_r+0x914>
 801c472:	9b03      	ldr	r3, [sp, #12]
 801c474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c478:	0d1b      	lsrs	r3, r3, #20
 801c47a:	051b      	lsls	r3, r3, #20
 801c47c:	b12b      	cbz	r3, 801c48a <_dtoa_r+0x902>
 801c47e:	9b04      	ldr	r3, [sp, #16]
 801c480:	3301      	adds	r3, #1
 801c482:	9304      	str	r3, [sp, #16]
 801c484:	f108 0801 	add.w	r8, r8, #1
 801c488:	2301      	movs	r3, #1
 801c48a:	9306      	str	r3, [sp, #24]
 801c48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c48e:	2b00      	cmp	r3, #0
 801c490:	f47f af74 	bne.w	801c37c <_dtoa_r+0x7f4>
 801c494:	2001      	movs	r0, #1
 801c496:	e779      	b.n	801c38c <_dtoa_r+0x804>
 801c498:	2300      	movs	r3, #0
 801c49a:	e7f6      	b.n	801c48a <_dtoa_r+0x902>
 801c49c:	9b02      	ldr	r3, [sp, #8]
 801c49e:	e7f4      	b.n	801c48a <_dtoa_r+0x902>
 801c4a0:	d085      	beq.n	801c3ae <_dtoa_r+0x826>
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	301c      	adds	r0, #28
 801c4a6:	e77d      	b.n	801c3a4 <_dtoa_r+0x81c>
 801c4a8:	40240000 	.word	0x40240000
 801c4ac:	9b01      	ldr	r3, [sp, #4]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	dc38      	bgt.n	801c524 <_dtoa_r+0x99c>
 801c4b2:	9b05      	ldr	r3, [sp, #20]
 801c4b4:	2b02      	cmp	r3, #2
 801c4b6:	dd35      	ble.n	801c524 <_dtoa_r+0x99c>
 801c4b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c4bc:	f1b9 0f00 	cmp.w	r9, #0
 801c4c0:	d10d      	bne.n	801c4de <_dtoa_r+0x956>
 801c4c2:	4631      	mov	r1, r6
 801c4c4:	464b      	mov	r3, r9
 801c4c6:	2205      	movs	r2, #5
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	f000 fd4f 	bl	801cf6c <__multadd>
 801c4ce:	4601      	mov	r1, r0
 801c4d0:	4606      	mov	r6, r0
 801c4d2:	4658      	mov	r0, fp
 801c4d4:	f000 ffb0 	bl	801d438 <__mcmp>
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	f73f adbd 	bgt.w	801c058 <_dtoa_r+0x4d0>
 801c4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4e0:	9d00      	ldr	r5, [sp, #0]
 801c4e2:	ea6f 0a03 	mvn.w	sl, r3
 801c4e6:	f04f 0800 	mov.w	r8, #0
 801c4ea:	4631      	mov	r1, r6
 801c4ec:	4620      	mov	r0, r4
 801c4ee:	f000 fd1b 	bl	801cf28 <_Bfree>
 801c4f2:	2f00      	cmp	r7, #0
 801c4f4:	f43f aeb4 	beq.w	801c260 <_dtoa_r+0x6d8>
 801c4f8:	f1b8 0f00 	cmp.w	r8, #0
 801c4fc:	d005      	beq.n	801c50a <_dtoa_r+0x982>
 801c4fe:	45b8      	cmp	r8, r7
 801c500:	d003      	beq.n	801c50a <_dtoa_r+0x982>
 801c502:	4641      	mov	r1, r8
 801c504:	4620      	mov	r0, r4
 801c506:	f000 fd0f 	bl	801cf28 <_Bfree>
 801c50a:	4639      	mov	r1, r7
 801c50c:	4620      	mov	r0, r4
 801c50e:	f000 fd0b 	bl	801cf28 <_Bfree>
 801c512:	e6a5      	b.n	801c260 <_dtoa_r+0x6d8>
 801c514:	2600      	movs	r6, #0
 801c516:	4637      	mov	r7, r6
 801c518:	e7e1      	b.n	801c4de <_dtoa_r+0x956>
 801c51a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c51c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c520:	4637      	mov	r7, r6
 801c522:	e599      	b.n	801c058 <_dtoa_r+0x4d0>
 801c524:	9b08      	ldr	r3, [sp, #32]
 801c526:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	f000 80fd 	beq.w	801c72a <_dtoa_r+0xba2>
 801c530:	2d00      	cmp	r5, #0
 801c532:	dd05      	ble.n	801c540 <_dtoa_r+0x9b8>
 801c534:	4639      	mov	r1, r7
 801c536:	462a      	mov	r2, r5
 801c538:	4620      	mov	r0, r4
 801c53a:	f000 ff11 	bl	801d360 <__lshift>
 801c53e:	4607      	mov	r7, r0
 801c540:	9b06      	ldr	r3, [sp, #24]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d05c      	beq.n	801c600 <_dtoa_r+0xa78>
 801c546:	6879      	ldr	r1, [r7, #4]
 801c548:	4620      	mov	r0, r4
 801c54a:	f000 fcad 	bl	801cea8 <_Balloc>
 801c54e:	4605      	mov	r5, r0
 801c550:	b928      	cbnz	r0, 801c55e <_dtoa_r+0x9d6>
 801c552:	4b80      	ldr	r3, [pc, #512]	; (801c754 <_dtoa_r+0xbcc>)
 801c554:	4602      	mov	r2, r0
 801c556:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c55a:	f7ff bb2e 	b.w	801bbba <_dtoa_r+0x32>
 801c55e:	693a      	ldr	r2, [r7, #16]
 801c560:	3202      	adds	r2, #2
 801c562:	0092      	lsls	r2, r2, #2
 801c564:	f107 010c 	add.w	r1, r7, #12
 801c568:	300c      	adds	r0, #12
 801c56a:	f7fd fb71 	bl	8019c50 <memcpy>
 801c56e:	2201      	movs	r2, #1
 801c570:	4629      	mov	r1, r5
 801c572:	4620      	mov	r0, r4
 801c574:	f000 fef4 	bl	801d360 <__lshift>
 801c578:	9b00      	ldr	r3, [sp, #0]
 801c57a:	3301      	adds	r3, #1
 801c57c:	9301      	str	r3, [sp, #4]
 801c57e:	9b00      	ldr	r3, [sp, #0]
 801c580:	444b      	add	r3, r9
 801c582:	9307      	str	r3, [sp, #28]
 801c584:	9b02      	ldr	r3, [sp, #8]
 801c586:	f003 0301 	and.w	r3, r3, #1
 801c58a:	46b8      	mov	r8, r7
 801c58c:	9306      	str	r3, [sp, #24]
 801c58e:	4607      	mov	r7, r0
 801c590:	9b01      	ldr	r3, [sp, #4]
 801c592:	4631      	mov	r1, r6
 801c594:	3b01      	subs	r3, #1
 801c596:	4658      	mov	r0, fp
 801c598:	9302      	str	r3, [sp, #8]
 801c59a:	f7ff fa69 	bl	801ba70 <quorem>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	3330      	adds	r3, #48	; 0x30
 801c5a2:	9004      	str	r0, [sp, #16]
 801c5a4:	4641      	mov	r1, r8
 801c5a6:	4658      	mov	r0, fp
 801c5a8:	9308      	str	r3, [sp, #32]
 801c5aa:	f000 ff45 	bl	801d438 <__mcmp>
 801c5ae:	463a      	mov	r2, r7
 801c5b0:	4681      	mov	r9, r0
 801c5b2:	4631      	mov	r1, r6
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	f000 ff5b 	bl	801d470 <__mdiff>
 801c5ba:	68c2      	ldr	r2, [r0, #12]
 801c5bc:	9b08      	ldr	r3, [sp, #32]
 801c5be:	4605      	mov	r5, r0
 801c5c0:	bb02      	cbnz	r2, 801c604 <_dtoa_r+0xa7c>
 801c5c2:	4601      	mov	r1, r0
 801c5c4:	4658      	mov	r0, fp
 801c5c6:	f000 ff37 	bl	801d438 <__mcmp>
 801c5ca:	9b08      	ldr	r3, [sp, #32]
 801c5cc:	4602      	mov	r2, r0
 801c5ce:	4629      	mov	r1, r5
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c5d6:	f000 fca7 	bl	801cf28 <_Bfree>
 801c5da:	9b05      	ldr	r3, [sp, #20]
 801c5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5de:	9d01      	ldr	r5, [sp, #4]
 801c5e0:	ea43 0102 	orr.w	r1, r3, r2
 801c5e4:	9b06      	ldr	r3, [sp, #24]
 801c5e6:	430b      	orrs	r3, r1
 801c5e8:	9b08      	ldr	r3, [sp, #32]
 801c5ea:	d10d      	bne.n	801c608 <_dtoa_r+0xa80>
 801c5ec:	2b39      	cmp	r3, #57	; 0x39
 801c5ee:	d029      	beq.n	801c644 <_dtoa_r+0xabc>
 801c5f0:	f1b9 0f00 	cmp.w	r9, #0
 801c5f4:	dd01      	ble.n	801c5fa <_dtoa_r+0xa72>
 801c5f6:	9b04      	ldr	r3, [sp, #16]
 801c5f8:	3331      	adds	r3, #49	; 0x31
 801c5fa:	9a02      	ldr	r2, [sp, #8]
 801c5fc:	7013      	strb	r3, [r2, #0]
 801c5fe:	e774      	b.n	801c4ea <_dtoa_r+0x962>
 801c600:	4638      	mov	r0, r7
 801c602:	e7b9      	b.n	801c578 <_dtoa_r+0x9f0>
 801c604:	2201      	movs	r2, #1
 801c606:	e7e2      	b.n	801c5ce <_dtoa_r+0xa46>
 801c608:	f1b9 0f00 	cmp.w	r9, #0
 801c60c:	db06      	blt.n	801c61c <_dtoa_r+0xa94>
 801c60e:	9905      	ldr	r1, [sp, #20]
 801c610:	ea41 0909 	orr.w	r9, r1, r9
 801c614:	9906      	ldr	r1, [sp, #24]
 801c616:	ea59 0101 	orrs.w	r1, r9, r1
 801c61a:	d120      	bne.n	801c65e <_dtoa_r+0xad6>
 801c61c:	2a00      	cmp	r2, #0
 801c61e:	ddec      	ble.n	801c5fa <_dtoa_r+0xa72>
 801c620:	4659      	mov	r1, fp
 801c622:	2201      	movs	r2, #1
 801c624:	4620      	mov	r0, r4
 801c626:	9301      	str	r3, [sp, #4]
 801c628:	f000 fe9a 	bl	801d360 <__lshift>
 801c62c:	4631      	mov	r1, r6
 801c62e:	4683      	mov	fp, r0
 801c630:	f000 ff02 	bl	801d438 <__mcmp>
 801c634:	2800      	cmp	r0, #0
 801c636:	9b01      	ldr	r3, [sp, #4]
 801c638:	dc02      	bgt.n	801c640 <_dtoa_r+0xab8>
 801c63a:	d1de      	bne.n	801c5fa <_dtoa_r+0xa72>
 801c63c:	07da      	lsls	r2, r3, #31
 801c63e:	d5dc      	bpl.n	801c5fa <_dtoa_r+0xa72>
 801c640:	2b39      	cmp	r3, #57	; 0x39
 801c642:	d1d8      	bne.n	801c5f6 <_dtoa_r+0xa6e>
 801c644:	9a02      	ldr	r2, [sp, #8]
 801c646:	2339      	movs	r3, #57	; 0x39
 801c648:	7013      	strb	r3, [r2, #0]
 801c64a:	462b      	mov	r3, r5
 801c64c:	461d      	mov	r5, r3
 801c64e:	3b01      	subs	r3, #1
 801c650:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c654:	2a39      	cmp	r2, #57	; 0x39
 801c656:	d050      	beq.n	801c6fa <_dtoa_r+0xb72>
 801c658:	3201      	adds	r2, #1
 801c65a:	701a      	strb	r2, [r3, #0]
 801c65c:	e745      	b.n	801c4ea <_dtoa_r+0x962>
 801c65e:	2a00      	cmp	r2, #0
 801c660:	dd03      	ble.n	801c66a <_dtoa_r+0xae2>
 801c662:	2b39      	cmp	r3, #57	; 0x39
 801c664:	d0ee      	beq.n	801c644 <_dtoa_r+0xabc>
 801c666:	3301      	adds	r3, #1
 801c668:	e7c7      	b.n	801c5fa <_dtoa_r+0xa72>
 801c66a:	9a01      	ldr	r2, [sp, #4]
 801c66c:	9907      	ldr	r1, [sp, #28]
 801c66e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c672:	428a      	cmp	r2, r1
 801c674:	d02a      	beq.n	801c6cc <_dtoa_r+0xb44>
 801c676:	4659      	mov	r1, fp
 801c678:	2300      	movs	r3, #0
 801c67a:	220a      	movs	r2, #10
 801c67c:	4620      	mov	r0, r4
 801c67e:	f000 fc75 	bl	801cf6c <__multadd>
 801c682:	45b8      	cmp	r8, r7
 801c684:	4683      	mov	fp, r0
 801c686:	f04f 0300 	mov.w	r3, #0
 801c68a:	f04f 020a 	mov.w	r2, #10
 801c68e:	4641      	mov	r1, r8
 801c690:	4620      	mov	r0, r4
 801c692:	d107      	bne.n	801c6a4 <_dtoa_r+0xb1c>
 801c694:	f000 fc6a 	bl	801cf6c <__multadd>
 801c698:	4680      	mov	r8, r0
 801c69a:	4607      	mov	r7, r0
 801c69c:	9b01      	ldr	r3, [sp, #4]
 801c69e:	3301      	adds	r3, #1
 801c6a0:	9301      	str	r3, [sp, #4]
 801c6a2:	e775      	b.n	801c590 <_dtoa_r+0xa08>
 801c6a4:	f000 fc62 	bl	801cf6c <__multadd>
 801c6a8:	4639      	mov	r1, r7
 801c6aa:	4680      	mov	r8, r0
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	220a      	movs	r2, #10
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	f000 fc5b 	bl	801cf6c <__multadd>
 801c6b6:	4607      	mov	r7, r0
 801c6b8:	e7f0      	b.n	801c69c <_dtoa_r+0xb14>
 801c6ba:	f1b9 0f00 	cmp.w	r9, #0
 801c6be:	9a00      	ldr	r2, [sp, #0]
 801c6c0:	bfcc      	ite	gt
 801c6c2:	464d      	movgt	r5, r9
 801c6c4:	2501      	movle	r5, #1
 801c6c6:	4415      	add	r5, r2
 801c6c8:	f04f 0800 	mov.w	r8, #0
 801c6cc:	4659      	mov	r1, fp
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	9301      	str	r3, [sp, #4]
 801c6d4:	f000 fe44 	bl	801d360 <__lshift>
 801c6d8:	4631      	mov	r1, r6
 801c6da:	4683      	mov	fp, r0
 801c6dc:	f000 feac 	bl	801d438 <__mcmp>
 801c6e0:	2800      	cmp	r0, #0
 801c6e2:	dcb2      	bgt.n	801c64a <_dtoa_r+0xac2>
 801c6e4:	d102      	bne.n	801c6ec <_dtoa_r+0xb64>
 801c6e6:	9b01      	ldr	r3, [sp, #4]
 801c6e8:	07db      	lsls	r3, r3, #31
 801c6ea:	d4ae      	bmi.n	801c64a <_dtoa_r+0xac2>
 801c6ec:	462b      	mov	r3, r5
 801c6ee:	461d      	mov	r5, r3
 801c6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c6f4:	2a30      	cmp	r2, #48	; 0x30
 801c6f6:	d0fa      	beq.n	801c6ee <_dtoa_r+0xb66>
 801c6f8:	e6f7      	b.n	801c4ea <_dtoa_r+0x962>
 801c6fa:	9a00      	ldr	r2, [sp, #0]
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	d1a5      	bne.n	801c64c <_dtoa_r+0xac4>
 801c700:	f10a 0a01 	add.w	sl, sl, #1
 801c704:	2331      	movs	r3, #49	; 0x31
 801c706:	e779      	b.n	801c5fc <_dtoa_r+0xa74>
 801c708:	4b13      	ldr	r3, [pc, #76]	; (801c758 <_dtoa_r+0xbd0>)
 801c70a:	f7ff baaf 	b.w	801bc6c <_dtoa_r+0xe4>
 801c70e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c710:	2b00      	cmp	r3, #0
 801c712:	f47f aa86 	bne.w	801bc22 <_dtoa_r+0x9a>
 801c716:	4b11      	ldr	r3, [pc, #68]	; (801c75c <_dtoa_r+0xbd4>)
 801c718:	f7ff baa8 	b.w	801bc6c <_dtoa_r+0xe4>
 801c71c:	f1b9 0f00 	cmp.w	r9, #0
 801c720:	dc03      	bgt.n	801c72a <_dtoa_r+0xba2>
 801c722:	9b05      	ldr	r3, [sp, #20]
 801c724:	2b02      	cmp	r3, #2
 801c726:	f73f aec9 	bgt.w	801c4bc <_dtoa_r+0x934>
 801c72a:	9d00      	ldr	r5, [sp, #0]
 801c72c:	4631      	mov	r1, r6
 801c72e:	4658      	mov	r0, fp
 801c730:	f7ff f99e 	bl	801ba70 <quorem>
 801c734:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c738:	f805 3b01 	strb.w	r3, [r5], #1
 801c73c:	9a00      	ldr	r2, [sp, #0]
 801c73e:	1aaa      	subs	r2, r5, r2
 801c740:	4591      	cmp	r9, r2
 801c742:	ddba      	ble.n	801c6ba <_dtoa_r+0xb32>
 801c744:	4659      	mov	r1, fp
 801c746:	2300      	movs	r3, #0
 801c748:	220a      	movs	r2, #10
 801c74a:	4620      	mov	r0, r4
 801c74c:	f000 fc0e 	bl	801cf6c <__multadd>
 801c750:	4683      	mov	fp, r0
 801c752:	e7eb      	b.n	801c72c <_dtoa_r+0xba4>
 801c754:	08020504 	.word	0x08020504
 801c758:	08020304 	.word	0x08020304
 801c75c:	08020481 	.word	0x08020481

0801c760 <rshift>:
 801c760:	6903      	ldr	r3, [r0, #16]
 801c762:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c76a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c76e:	f100 0414 	add.w	r4, r0, #20
 801c772:	dd45      	ble.n	801c800 <rshift+0xa0>
 801c774:	f011 011f 	ands.w	r1, r1, #31
 801c778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c77c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c780:	d10c      	bne.n	801c79c <rshift+0x3c>
 801c782:	f100 0710 	add.w	r7, r0, #16
 801c786:	4629      	mov	r1, r5
 801c788:	42b1      	cmp	r1, r6
 801c78a:	d334      	bcc.n	801c7f6 <rshift+0x96>
 801c78c:	1a9b      	subs	r3, r3, r2
 801c78e:	009b      	lsls	r3, r3, #2
 801c790:	1eea      	subs	r2, r5, #3
 801c792:	4296      	cmp	r6, r2
 801c794:	bf38      	it	cc
 801c796:	2300      	movcc	r3, #0
 801c798:	4423      	add	r3, r4
 801c79a:	e015      	b.n	801c7c8 <rshift+0x68>
 801c79c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c7a0:	f1c1 0820 	rsb	r8, r1, #32
 801c7a4:	40cf      	lsrs	r7, r1
 801c7a6:	f105 0e04 	add.w	lr, r5, #4
 801c7aa:	46a1      	mov	r9, r4
 801c7ac:	4576      	cmp	r6, lr
 801c7ae:	46f4      	mov	ip, lr
 801c7b0:	d815      	bhi.n	801c7de <rshift+0x7e>
 801c7b2:	1a9b      	subs	r3, r3, r2
 801c7b4:	009a      	lsls	r2, r3, #2
 801c7b6:	3a04      	subs	r2, #4
 801c7b8:	3501      	adds	r5, #1
 801c7ba:	42ae      	cmp	r6, r5
 801c7bc:	bf38      	it	cc
 801c7be:	2200      	movcc	r2, #0
 801c7c0:	18a3      	adds	r3, r4, r2
 801c7c2:	50a7      	str	r7, [r4, r2]
 801c7c4:	b107      	cbz	r7, 801c7c8 <rshift+0x68>
 801c7c6:	3304      	adds	r3, #4
 801c7c8:	1b1a      	subs	r2, r3, r4
 801c7ca:	42a3      	cmp	r3, r4
 801c7cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c7d0:	bf08      	it	eq
 801c7d2:	2300      	moveq	r3, #0
 801c7d4:	6102      	str	r2, [r0, #16]
 801c7d6:	bf08      	it	eq
 801c7d8:	6143      	streq	r3, [r0, #20]
 801c7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7de:	f8dc c000 	ldr.w	ip, [ip]
 801c7e2:	fa0c fc08 	lsl.w	ip, ip, r8
 801c7e6:	ea4c 0707 	orr.w	r7, ip, r7
 801c7ea:	f849 7b04 	str.w	r7, [r9], #4
 801c7ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c7f2:	40cf      	lsrs	r7, r1
 801c7f4:	e7da      	b.n	801c7ac <rshift+0x4c>
 801c7f6:	f851 cb04 	ldr.w	ip, [r1], #4
 801c7fa:	f847 cf04 	str.w	ip, [r7, #4]!
 801c7fe:	e7c3      	b.n	801c788 <rshift+0x28>
 801c800:	4623      	mov	r3, r4
 801c802:	e7e1      	b.n	801c7c8 <rshift+0x68>

0801c804 <__hexdig_fun>:
 801c804:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c808:	2b09      	cmp	r3, #9
 801c80a:	d802      	bhi.n	801c812 <__hexdig_fun+0xe>
 801c80c:	3820      	subs	r0, #32
 801c80e:	b2c0      	uxtb	r0, r0
 801c810:	4770      	bx	lr
 801c812:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c816:	2b05      	cmp	r3, #5
 801c818:	d801      	bhi.n	801c81e <__hexdig_fun+0x1a>
 801c81a:	3847      	subs	r0, #71	; 0x47
 801c81c:	e7f7      	b.n	801c80e <__hexdig_fun+0xa>
 801c81e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c822:	2b05      	cmp	r3, #5
 801c824:	d801      	bhi.n	801c82a <__hexdig_fun+0x26>
 801c826:	3827      	subs	r0, #39	; 0x27
 801c828:	e7f1      	b.n	801c80e <__hexdig_fun+0xa>
 801c82a:	2000      	movs	r0, #0
 801c82c:	4770      	bx	lr
	...

0801c830 <__gethex>:
 801c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c834:	ed2d 8b02 	vpush	{d8}
 801c838:	b089      	sub	sp, #36	; 0x24
 801c83a:	ee08 0a10 	vmov	s16, r0
 801c83e:	9304      	str	r3, [sp, #16]
 801c840:	4bbc      	ldr	r3, [pc, #752]	; (801cb34 <__gethex+0x304>)
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	9301      	str	r3, [sp, #4]
 801c846:	4618      	mov	r0, r3
 801c848:	468b      	mov	fp, r1
 801c84a:	4690      	mov	r8, r2
 801c84c:	f7e3 fcc0 	bl	80001d0 <strlen>
 801c850:	9b01      	ldr	r3, [sp, #4]
 801c852:	f8db 2000 	ldr.w	r2, [fp]
 801c856:	4403      	add	r3, r0
 801c858:	4682      	mov	sl, r0
 801c85a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c85e:	9305      	str	r3, [sp, #20]
 801c860:	1c93      	adds	r3, r2, #2
 801c862:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c866:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c86a:	32fe      	adds	r2, #254	; 0xfe
 801c86c:	18d1      	adds	r1, r2, r3
 801c86e:	461f      	mov	r7, r3
 801c870:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c874:	9100      	str	r1, [sp, #0]
 801c876:	2830      	cmp	r0, #48	; 0x30
 801c878:	d0f8      	beq.n	801c86c <__gethex+0x3c>
 801c87a:	f7ff ffc3 	bl	801c804 <__hexdig_fun>
 801c87e:	4604      	mov	r4, r0
 801c880:	2800      	cmp	r0, #0
 801c882:	d13a      	bne.n	801c8fa <__gethex+0xca>
 801c884:	9901      	ldr	r1, [sp, #4]
 801c886:	4652      	mov	r2, sl
 801c888:	4638      	mov	r0, r7
 801c88a:	f001 f982 	bl	801db92 <strncmp>
 801c88e:	4605      	mov	r5, r0
 801c890:	2800      	cmp	r0, #0
 801c892:	d168      	bne.n	801c966 <__gethex+0x136>
 801c894:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c898:	eb07 060a 	add.w	r6, r7, sl
 801c89c:	f7ff ffb2 	bl	801c804 <__hexdig_fun>
 801c8a0:	2800      	cmp	r0, #0
 801c8a2:	d062      	beq.n	801c96a <__gethex+0x13a>
 801c8a4:	4633      	mov	r3, r6
 801c8a6:	7818      	ldrb	r0, [r3, #0]
 801c8a8:	2830      	cmp	r0, #48	; 0x30
 801c8aa:	461f      	mov	r7, r3
 801c8ac:	f103 0301 	add.w	r3, r3, #1
 801c8b0:	d0f9      	beq.n	801c8a6 <__gethex+0x76>
 801c8b2:	f7ff ffa7 	bl	801c804 <__hexdig_fun>
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	fab0 f480 	clz	r4, r0
 801c8bc:	0964      	lsrs	r4, r4, #5
 801c8be:	4635      	mov	r5, r6
 801c8c0:	9300      	str	r3, [sp, #0]
 801c8c2:	463a      	mov	r2, r7
 801c8c4:	4616      	mov	r6, r2
 801c8c6:	3201      	adds	r2, #1
 801c8c8:	7830      	ldrb	r0, [r6, #0]
 801c8ca:	f7ff ff9b 	bl	801c804 <__hexdig_fun>
 801c8ce:	2800      	cmp	r0, #0
 801c8d0:	d1f8      	bne.n	801c8c4 <__gethex+0x94>
 801c8d2:	9901      	ldr	r1, [sp, #4]
 801c8d4:	4652      	mov	r2, sl
 801c8d6:	4630      	mov	r0, r6
 801c8d8:	f001 f95b 	bl	801db92 <strncmp>
 801c8dc:	b980      	cbnz	r0, 801c900 <__gethex+0xd0>
 801c8de:	b94d      	cbnz	r5, 801c8f4 <__gethex+0xc4>
 801c8e0:	eb06 050a 	add.w	r5, r6, sl
 801c8e4:	462a      	mov	r2, r5
 801c8e6:	4616      	mov	r6, r2
 801c8e8:	3201      	adds	r2, #1
 801c8ea:	7830      	ldrb	r0, [r6, #0]
 801c8ec:	f7ff ff8a 	bl	801c804 <__hexdig_fun>
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	d1f8      	bne.n	801c8e6 <__gethex+0xb6>
 801c8f4:	1bad      	subs	r5, r5, r6
 801c8f6:	00ad      	lsls	r5, r5, #2
 801c8f8:	e004      	b.n	801c904 <__gethex+0xd4>
 801c8fa:	2400      	movs	r4, #0
 801c8fc:	4625      	mov	r5, r4
 801c8fe:	e7e0      	b.n	801c8c2 <__gethex+0x92>
 801c900:	2d00      	cmp	r5, #0
 801c902:	d1f7      	bne.n	801c8f4 <__gethex+0xc4>
 801c904:	7833      	ldrb	r3, [r6, #0]
 801c906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c90a:	2b50      	cmp	r3, #80	; 0x50
 801c90c:	d13b      	bne.n	801c986 <__gethex+0x156>
 801c90e:	7873      	ldrb	r3, [r6, #1]
 801c910:	2b2b      	cmp	r3, #43	; 0x2b
 801c912:	d02c      	beq.n	801c96e <__gethex+0x13e>
 801c914:	2b2d      	cmp	r3, #45	; 0x2d
 801c916:	d02e      	beq.n	801c976 <__gethex+0x146>
 801c918:	1c71      	adds	r1, r6, #1
 801c91a:	f04f 0900 	mov.w	r9, #0
 801c91e:	7808      	ldrb	r0, [r1, #0]
 801c920:	f7ff ff70 	bl	801c804 <__hexdig_fun>
 801c924:	1e43      	subs	r3, r0, #1
 801c926:	b2db      	uxtb	r3, r3
 801c928:	2b18      	cmp	r3, #24
 801c92a:	d82c      	bhi.n	801c986 <__gethex+0x156>
 801c92c:	f1a0 0210 	sub.w	r2, r0, #16
 801c930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c934:	f7ff ff66 	bl	801c804 <__hexdig_fun>
 801c938:	1e43      	subs	r3, r0, #1
 801c93a:	b2db      	uxtb	r3, r3
 801c93c:	2b18      	cmp	r3, #24
 801c93e:	d91d      	bls.n	801c97c <__gethex+0x14c>
 801c940:	f1b9 0f00 	cmp.w	r9, #0
 801c944:	d000      	beq.n	801c948 <__gethex+0x118>
 801c946:	4252      	negs	r2, r2
 801c948:	4415      	add	r5, r2
 801c94a:	f8cb 1000 	str.w	r1, [fp]
 801c94e:	b1e4      	cbz	r4, 801c98a <__gethex+0x15a>
 801c950:	9b00      	ldr	r3, [sp, #0]
 801c952:	2b00      	cmp	r3, #0
 801c954:	bf14      	ite	ne
 801c956:	2700      	movne	r7, #0
 801c958:	2706      	moveq	r7, #6
 801c95a:	4638      	mov	r0, r7
 801c95c:	b009      	add	sp, #36	; 0x24
 801c95e:	ecbd 8b02 	vpop	{d8}
 801c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c966:	463e      	mov	r6, r7
 801c968:	4625      	mov	r5, r4
 801c96a:	2401      	movs	r4, #1
 801c96c:	e7ca      	b.n	801c904 <__gethex+0xd4>
 801c96e:	f04f 0900 	mov.w	r9, #0
 801c972:	1cb1      	adds	r1, r6, #2
 801c974:	e7d3      	b.n	801c91e <__gethex+0xee>
 801c976:	f04f 0901 	mov.w	r9, #1
 801c97a:	e7fa      	b.n	801c972 <__gethex+0x142>
 801c97c:	230a      	movs	r3, #10
 801c97e:	fb03 0202 	mla	r2, r3, r2, r0
 801c982:	3a10      	subs	r2, #16
 801c984:	e7d4      	b.n	801c930 <__gethex+0x100>
 801c986:	4631      	mov	r1, r6
 801c988:	e7df      	b.n	801c94a <__gethex+0x11a>
 801c98a:	1bf3      	subs	r3, r6, r7
 801c98c:	3b01      	subs	r3, #1
 801c98e:	4621      	mov	r1, r4
 801c990:	2b07      	cmp	r3, #7
 801c992:	dc0b      	bgt.n	801c9ac <__gethex+0x17c>
 801c994:	ee18 0a10 	vmov	r0, s16
 801c998:	f000 fa86 	bl	801cea8 <_Balloc>
 801c99c:	4604      	mov	r4, r0
 801c99e:	b940      	cbnz	r0, 801c9b2 <__gethex+0x182>
 801c9a0:	4b65      	ldr	r3, [pc, #404]	; (801cb38 <__gethex+0x308>)
 801c9a2:	4602      	mov	r2, r0
 801c9a4:	21de      	movs	r1, #222	; 0xde
 801c9a6:	4865      	ldr	r0, [pc, #404]	; (801cb3c <__gethex+0x30c>)
 801c9a8:	f001 f912 	bl	801dbd0 <__assert_func>
 801c9ac:	3101      	adds	r1, #1
 801c9ae:	105b      	asrs	r3, r3, #1
 801c9b0:	e7ee      	b.n	801c990 <__gethex+0x160>
 801c9b2:	f100 0914 	add.w	r9, r0, #20
 801c9b6:	f04f 0b00 	mov.w	fp, #0
 801c9ba:	f1ca 0301 	rsb	r3, sl, #1
 801c9be:	f8cd 9008 	str.w	r9, [sp, #8]
 801c9c2:	f8cd b000 	str.w	fp, [sp]
 801c9c6:	9306      	str	r3, [sp, #24]
 801c9c8:	42b7      	cmp	r7, r6
 801c9ca:	d340      	bcc.n	801ca4e <__gethex+0x21e>
 801c9cc:	9802      	ldr	r0, [sp, #8]
 801c9ce:	9b00      	ldr	r3, [sp, #0]
 801c9d0:	f840 3b04 	str.w	r3, [r0], #4
 801c9d4:	eba0 0009 	sub.w	r0, r0, r9
 801c9d8:	1080      	asrs	r0, r0, #2
 801c9da:	0146      	lsls	r6, r0, #5
 801c9dc:	6120      	str	r0, [r4, #16]
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f000 fb58 	bl	801d094 <__hi0bits>
 801c9e4:	1a30      	subs	r0, r6, r0
 801c9e6:	f8d8 6000 	ldr.w	r6, [r8]
 801c9ea:	42b0      	cmp	r0, r6
 801c9ec:	dd63      	ble.n	801cab6 <__gethex+0x286>
 801c9ee:	1b87      	subs	r7, r0, r6
 801c9f0:	4639      	mov	r1, r7
 801c9f2:	4620      	mov	r0, r4
 801c9f4:	f000 fef2 	bl	801d7dc <__any_on>
 801c9f8:	4682      	mov	sl, r0
 801c9fa:	b1a8      	cbz	r0, 801ca28 <__gethex+0x1f8>
 801c9fc:	1e7b      	subs	r3, r7, #1
 801c9fe:	1159      	asrs	r1, r3, #5
 801ca00:	f003 021f 	and.w	r2, r3, #31
 801ca04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ca08:	f04f 0a01 	mov.w	sl, #1
 801ca0c:	fa0a f202 	lsl.w	r2, sl, r2
 801ca10:	420a      	tst	r2, r1
 801ca12:	d009      	beq.n	801ca28 <__gethex+0x1f8>
 801ca14:	4553      	cmp	r3, sl
 801ca16:	dd05      	ble.n	801ca24 <__gethex+0x1f4>
 801ca18:	1eb9      	subs	r1, r7, #2
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f000 fede 	bl	801d7dc <__any_on>
 801ca20:	2800      	cmp	r0, #0
 801ca22:	d145      	bne.n	801cab0 <__gethex+0x280>
 801ca24:	f04f 0a02 	mov.w	sl, #2
 801ca28:	4639      	mov	r1, r7
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f7ff fe98 	bl	801c760 <rshift>
 801ca30:	443d      	add	r5, r7
 801ca32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca36:	42ab      	cmp	r3, r5
 801ca38:	da4c      	bge.n	801cad4 <__gethex+0x2a4>
 801ca3a:	ee18 0a10 	vmov	r0, s16
 801ca3e:	4621      	mov	r1, r4
 801ca40:	f000 fa72 	bl	801cf28 <_Bfree>
 801ca44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca46:	2300      	movs	r3, #0
 801ca48:	6013      	str	r3, [r2, #0]
 801ca4a:	27a3      	movs	r7, #163	; 0xa3
 801ca4c:	e785      	b.n	801c95a <__gethex+0x12a>
 801ca4e:	1e73      	subs	r3, r6, #1
 801ca50:	9a05      	ldr	r2, [sp, #20]
 801ca52:	9303      	str	r3, [sp, #12]
 801ca54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ca58:	4293      	cmp	r3, r2
 801ca5a:	d019      	beq.n	801ca90 <__gethex+0x260>
 801ca5c:	f1bb 0f20 	cmp.w	fp, #32
 801ca60:	d107      	bne.n	801ca72 <__gethex+0x242>
 801ca62:	9b02      	ldr	r3, [sp, #8]
 801ca64:	9a00      	ldr	r2, [sp, #0]
 801ca66:	f843 2b04 	str.w	r2, [r3], #4
 801ca6a:	9302      	str	r3, [sp, #8]
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	9300      	str	r3, [sp, #0]
 801ca70:	469b      	mov	fp, r3
 801ca72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ca76:	f7ff fec5 	bl	801c804 <__hexdig_fun>
 801ca7a:	9b00      	ldr	r3, [sp, #0]
 801ca7c:	f000 000f 	and.w	r0, r0, #15
 801ca80:	fa00 f00b 	lsl.w	r0, r0, fp
 801ca84:	4303      	orrs	r3, r0
 801ca86:	9300      	str	r3, [sp, #0]
 801ca88:	f10b 0b04 	add.w	fp, fp, #4
 801ca8c:	9b03      	ldr	r3, [sp, #12]
 801ca8e:	e00d      	b.n	801caac <__gethex+0x27c>
 801ca90:	9b03      	ldr	r3, [sp, #12]
 801ca92:	9a06      	ldr	r2, [sp, #24]
 801ca94:	4413      	add	r3, r2
 801ca96:	42bb      	cmp	r3, r7
 801ca98:	d3e0      	bcc.n	801ca5c <__gethex+0x22c>
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	9901      	ldr	r1, [sp, #4]
 801ca9e:	9307      	str	r3, [sp, #28]
 801caa0:	4652      	mov	r2, sl
 801caa2:	f001 f876 	bl	801db92 <strncmp>
 801caa6:	9b07      	ldr	r3, [sp, #28]
 801caa8:	2800      	cmp	r0, #0
 801caaa:	d1d7      	bne.n	801ca5c <__gethex+0x22c>
 801caac:	461e      	mov	r6, r3
 801caae:	e78b      	b.n	801c9c8 <__gethex+0x198>
 801cab0:	f04f 0a03 	mov.w	sl, #3
 801cab4:	e7b8      	b.n	801ca28 <__gethex+0x1f8>
 801cab6:	da0a      	bge.n	801cace <__gethex+0x29e>
 801cab8:	1a37      	subs	r7, r6, r0
 801caba:	4621      	mov	r1, r4
 801cabc:	ee18 0a10 	vmov	r0, s16
 801cac0:	463a      	mov	r2, r7
 801cac2:	f000 fc4d 	bl	801d360 <__lshift>
 801cac6:	1bed      	subs	r5, r5, r7
 801cac8:	4604      	mov	r4, r0
 801caca:	f100 0914 	add.w	r9, r0, #20
 801cace:	f04f 0a00 	mov.w	sl, #0
 801cad2:	e7ae      	b.n	801ca32 <__gethex+0x202>
 801cad4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cad8:	42a8      	cmp	r0, r5
 801cada:	dd72      	ble.n	801cbc2 <__gethex+0x392>
 801cadc:	1b45      	subs	r5, r0, r5
 801cade:	42ae      	cmp	r6, r5
 801cae0:	dc36      	bgt.n	801cb50 <__gethex+0x320>
 801cae2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cae6:	2b02      	cmp	r3, #2
 801cae8:	d02a      	beq.n	801cb40 <__gethex+0x310>
 801caea:	2b03      	cmp	r3, #3
 801caec:	d02c      	beq.n	801cb48 <__gethex+0x318>
 801caee:	2b01      	cmp	r3, #1
 801caf0:	d115      	bne.n	801cb1e <__gethex+0x2ee>
 801caf2:	42ae      	cmp	r6, r5
 801caf4:	d113      	bne.n	801cb1e <__gethex+0x2ee>
 801caf6:	2e01      	cmp	r6, #1
 801caf8:	d10b      	bne.n	801cb12 <__gethex+0x2e2>
 801cafa:	9a04      	ldr	r2, [sp, #16]
 801cafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cb00:	6013      	str	r3, [r2, #0]
 801cb02:	2301      	movs	r3, #1
 801cb04:	6123      	str	r3, [r4, #16]
 801cb06:	f8c9 3000 	str.w	r3, [r9]
 801cb0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cb0c:	2762      	movs	r7, #98	; 0x62
 801cb0e:	601c      	str	r4, [r3, #0]
 801cb10:	e723      	b.n	801c95a <__gethex+0x12a>
 801cb12:	1e71      	subs	r1, r6, #1
 801cb14:	4620      	mov	r0, r4
 801cb16:	f000 fe61 	bl	801d7dc <__any_on>
 801cb1a:	2800      	cmp	r0, #0
 801cb1c:	d1ed      	bne.n	801cafa <__gethex+0x2ca>
 801cb1e:	ee18 0a10 	vmov	r0, s16
 801cb22:	4621      	mov	r1, r4
 801cb24:	f000 fa00 	bl	801cf28 <_Bfree>
 801cb28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	6013      	str	r3, [r2, #0]
 801cb2e:	2750      	movs	r7, #80	; 0x50
 801cb30:	e713      	b.n	801c95a <__gethex+0x12a>
 801cb32:	bf00      	nop
 801cb34:	08020580 	.word	0x08020580
 801cb38:	08020504 	.word	0x08020504
 801cb3c:	08020515 	.word	0x08020515
 801cb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d1eb      	bne.n	801cb1e <__gethex+0x2ee>
 801cb46:	e7d8      	b.n	801cafa <__gethex+0x2ca>
 801cb48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d1d5      	bne.n	801cafa <__gethex+0x2ca>
 801cb4e:	e7e6      	b.n	801cb1e <__gethex+0x2ee>
 801cb50:	1e6f      	subs	r7, r5, #1
 801cb52:	f1ba 0f00 	cmp.w	sl, #0
 801cb56:	d131      	bne.n	801cbbc <__gethex+0x38c>
 801cb58:	b127      	cbz	r7, 801cb64 <__gethex+0x334>
 801cb5a:	4639      	mov	r1, r7
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	f000 fe3d 	bl	801d7dc <__any_on>
 801cb62:	4682      	mov	sl, r0
 801cb64:	117b      	asrs	r3, r7, #5
 801cb66:	2101      	movs	r1, #1
 801cb68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cb6c:	f007 071f 	and.w	r7, r7, #31
 801cb70:	fa01 f707 	lsl.w	r7, r1, r7
 801cb74:	421f      	tst	r7, r3
 801cb76:	4629      	mov	r1, r5
 801cb78:	4620      	mov	r0, r4
 801cb7a:	bf18      	it	ne
 801cb7c:	f04a 0a02 	orrne.w	sl, sl, #2
 801cb80:	1b76      	subs	r6, r6, r5
 801cb82:	f7ff fded 	bl	801c760 <rshift>
 801cb86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cb8a:	2702      	movs	r7, #2
 801cb8c:	f1ba 0f00 	cmp.w	sl, #0
 801cb90:	d048      	beq.n	801cc24 <__gethex+0x3f4>
 801cb92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb96:	2b02      	cmp	r3, #2
 801cb98:	d015      	beq.n	801cbc6 <__gethex+0x396>
 801cb9a:	2b03      	cmp	r3, #3
 801cb9c:	d017      	beq.n	801cbce <__gethex+0x39e>
 801cb9e:	2b01      	cmp	r3, #1
 801cba0:	d109      	bne.n	801cbb6 <__gethex+0x386>
 801cba2:	f01a 0f02 	tst.w	sl, #2
 801cba6:	d006      	beq.n	801cbb6 <__gethex+0x386>
 801cba8:	f8d9 0000 	ldr.w	r0, [r9]
 801cbac:	ea4a 0a00 	orr.w	sl, sl, r0
 801cbb0:	f01a 0f01 	tst.w	sl, #1
 801cbb4:	d10e      	bne.n	801cbd4 <__gethex+0x3a4>
 801cbb6:	f047 0710 	orr.w	r7, r7, #16
 801cbba:	e033      	b.n	801cc24 <__gethex+0x3f4>
 801cbbc:	f04f 0a01 	mov.w	sl, #1
 801cbc0:	e7d0      	b.n	801cb64 <__gethex+0x334>
 801cbc2:	2701      	movs	r7, #1
 801cbc4:	e7e2      	b.n	801cb8c <__gethex+0x35c>
 801cbc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbc8:	f1c3 0301 	rsb	r3, r3, #1
 801cbcc:	9315      	str	r3, [sp, #84]	; 0x54
 801cbce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d0f0      	beq.n	801cbb6 <__gethex+0x386>
 801cbd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cbd8:	f104 0314 	add.w	r3, r4, #20
 801cbdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cbe0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cbe4:	f04f 0c00 	mov.w	ip, #0
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801cbf2:	d01c      	beq.n	801cc2e <__gethex+0x3fe>
 801cbf4:	3201      	adds	r2, #1
 801cbf6:	6002      	str	r2, [r0, #0]
 801cbf8:	2f02      	cmp	r7, #2
 801cbfa:	f104 0314 	add.w	r3, r4, #20
 801cbfe:	d13f      	bne.n	801cc80 <__gethex+0x450>
 801cc00:	f8d8 2000 	ldr.w	r2, [r8]
 801cc04:	3a01      	subs	r2, #1
 801cc06:	42b2      	cmp	r2, r6
 801cc08:	d10a      	bne.n	801cc20 <__gethex+0x3f0>
 801cc0a:	1171      	asrs	r1, r6, #5
 801cc0c:	2201      	movs	r2, #1
 801cc0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cc12:	f006 061f 	and.w	r6, r6, #31
 801cc16:	fa02 f606 	lsl.w	r6, r2, r6
 801cc1a:	421e      	tst	r6, r3
 801cc1c:	bf18      	it	ne
 801cc1e:	4617      	movne	r7, r2
 801cc20:	f047 0720 	orr.w	r7, r7, #32
 801cc24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cc26:	601c      	str	r4, [r3, #0]
 801cc28:	9b04      	ldr	r3, [sp, #16]
 801cc2a:	601d      	str	r5, [r3, #0]
 801cc2c:	e695      	b.n	801c95a <__gethex+0x12a>
 801cc2e:	4299      	cmp	r1, r3
 801cc30:	f843 cc04 	str.w	ip, [r3, #-4]
 801cc34:	d8d8      	bhi.n	801cbe8 <__gethex+0x3b8>
 801cc36:	68a3      	ldr	r3, [r4, #8]
 801cc38:	459b      	cmp	fp, r3
 801cc3a:	db19      	blt.n	801cc70 <__gethex+0x440>
 801cc3c:	6861      	ldr	r1, [r4, #4]
 801cc3e:	ee18 0a10 	vmov	r0, s16
 801cc42:	3101      	adds	r1, #1
 801cc44:	f000 f930 	bl	801cea8 <_Balloc>
 801cc48:	4681      	mov	r9, r0
 801cc4a:	b918      	cbnz	r0, 801cc54 <__gethex+0x424>
 801cc4c:	4b1a      	ldr	r3, [pc, #104]	; (801ccb8 <__gethex+0x488>)
 801cc4e:	4602      	mov	r2, r0
 801cc50:	2184      	movs	r1, #132	; 0x84
 801cc52:	e6a8      	b.n	801c9a6 <__gethex+0x176>
 801cc54:	6922      	ldr	r2, [r4, #16]
 801cc56:	3202      	adds	r2, #2
 801cc58:	f104 010c 	add.w	r1, r4, #12
 801cc5c:	0092      	lsls	r2, r2, #2
 801cc5e:	300c      	adds	r0, #12
 801cc60:	f7fc fff6 	bl	8019c50 <memcpy>
 801cc64:	4621      	mov	r1, r4
 801cc66:	ee18 0a10 	vmov	r0, s16
 801cc6a:	f000 f95d 	bl	801cf28 <_Bfree>
 801cc6e:	464c      	mov	r4, r9
 801cc70:	6923      	ldr	r3, [r4, #16]
 801cc72:	1c5a      	adds	r2, r3, #1
 801cc74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc78:	6122      	str	r2, [r4, #16]
 801cc7a:	2201      	movs	r2, #1
 801cc7c:	615a      	str	r2, [r3, #20]
 801cc7e:	e7bb      	b.n	801cbf8 <__gethex+0x3c8>
 801cc80:	6922      	ldr	r2, [r4, #16]
 801cc82:	455a      	cmp	r2, fp
 801cc84:	dd0b      	ble.n	801cc9e <__gethex+0x46e>
 801cc86:	2101      	movs	r1, #1
 801cc88:	4620      	mov	r0, r4
 801cc8a:	f7ff fd69 	bl	801c760 <rshift>
 801cc8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cc92:	3501      	adds	r5, #1
 801cc94:	42ab      	cmp	r3, r5
 801cc96:	f6ff aed0 	blt.w	801ca3a <__gethex+0x20a>
 801cc9a:	2701      	movs	r7, #1
 801cc9c:	e7c0      	b.n	801cc20 <__gethex+0x3f0>
 801cc9e:	f016 061f 	ands.w	r6, r6, #31
 801cca2:	d0fa      	beq.n	801cc9a <__gethex+0x46a>
 801cca4:	449a      	add	sl, r3
 801cca6:	f1c6 0620 	rsb	r6, r6, #32
 801ccaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801ccae:	f000 f9f1 	bl	801d094 <__hi0bits>
 801ccb2:	42b0      	cmp	r0, r6
 801ccb4:	dbe7      	blt.n	801cc86 <__gethex+0x456>
 801ccb6:	e7f0      	b.n	801cc9a <__gethex+0x46a>
 801ccb8:	08020504 	.word	0x08020504

0801ccbc <L_shift>:
 801ccbc:	f1c2 0208 	rsb	r2, r2, #8
 801ccc0:	0092      	lsls	r2, r2, #2
 801ccc2:	b570      	push	{r4, r5, r6, lr}
 801ccc4:	f1c2 0620 	rsb	r6, r2, #32
 801ccc8:	6843      	ldr	r3, [r0, #4]
 801ccca:	6804      	ldr	r4, [r0, #0]
 801cccc:	fa03 f506 	lsl.w	r5, r3, r6
 801ccd0:	432c      	orrs	r4, r5
 801ccd2:	40d3      	lsrs	r3, r2
 801ccd4:	6004      	str	r4, [r0, #0]
 801ccd6:	f840 3f04 	str.w	r3, [r0, #4]!
 801ccda:	4288      	cmp	r0, r1
 801ccdc:	d3f4      	bcc.n	801ccc8 <L_shift+0xc>
 801ccde:	bd70      	pop	{r4, r5, r6, pc}

0801cce0 <__match>:
 801cce0:	b530      	push	{r4, r5, lr}
 801cce2:	6803      	ldr	r3, [r0, #0]
 801cce4:	3301      	adds	r3, #1
 801cce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ccea:	b914      	cbnz	r4, 801ccf2 <__match+0x12>
 801ccec:	6003      	str	r3, [r0, #0]
 801ccee:	2001      	movs	r0, #1
 801ccf0:	bd30      	pop	{r4, r5, pc}
 801ccf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ccfa:	2d19      	cmp	r5, #25
 801ccfc:	bf98      	it	ls
 801ccfe:	3220      	addls	r2, #32
 801cd00:	42a2      	cmp	r2, r4
 801cd02:	d0f0      	beq.n	801cce6 <__match+0x6>
 801cd04:	2000      	movs	r0, #0
 801cd06:	e7f3      	b.n	801ccf0 <__match+0x10>

0801cd08 <__hexnan>:
 801cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd0c:	680b      	ldr	r3, [r1, #0]
 801cd0e:	6801      	ldr	r1, [r0, #0]
 801cd10:	115e      	asrs	r6, r3, #5
 801cd12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd16:	f013 031f 	ands.w	r3, r3, #31
 801cd1a:	b087      	sub	sp, #28
 801cd1c:	bf18      	it	ne
 801cd1e:	3604      	addne	r6, #4
 801cd20:	2500      	movs	r5, #0
 801cd22:	1f37      	subs	r7, r6, #4
 801cd24:	4682      	mov	sl, r0
 801cd26:	4690      	mov	r8, r2
 801cd28:	9301      	str	r3, [sp, #4]
 801cd2a:	f846 5c04 	str.w	r5, [r6, #-4]
 801cd2e:	46b9      	mov	r9, r7
 801cd30:	463c      	mov	r4, r7
 801cd32:	9502      	str	r5, [sp, #8]
 801cd34:	46ab      	mov	fp, r5
 801cd36:	784a      	ldrb	r2, [r1, #1]
 801cd38:	1c4b      	adds	r3, r1, #1
 801cd3a:	9303      	str	r3, [sp, #12]
 801cd3c:	b342      	cbz	r2, 801cd90 <__hexnan+0x88>
 801cd3e:	4610      	mov	r0, r2
 801cd40:	9105      	str	r1, [sp, #20]
 801cd42:	9204      	str	r2, [sp, #16]
 801cd44:	f7ff fd5e 	bl	801c804 <__hexdig_fun>
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	d14f      	bne.n	801cdec <__hexnan+0xe4>
 801cd4c:	9a04      	ldr	r2, [sp, #16]
 801cd4e:	9905      	ldr	r1, [sp, #20]
 801cd50:	2a20      	cmp	r2, #32
 801cd52:	d818      	bhi.n	801cd86 <__hexnan+0x7e>
 801cd54:	9b02      	ldr	r3, [sp, #8]
 801cd56:	459b      	cmp	fp, r3
 801cd58:	dd13      	ble.n	801cd82 <__hexnan+0x7a>
 801cd5a:	454c      	cmp	r4, r9
 801cd5c:	d206      	bcs.n	801cd6c <__hexnan+0x64>
 801cd5e:	2d07      	cmp	r5, #7
 801cd60:	dc04      	bgt.n	801cd6c <__hexnan+0x64>
 801cd62:	462a      	mov	r2, r5
 801cd64:	4649      	mov	r1, r9
 801cd66:	4620      	mov	r0, r4
 801cd68:	f7ff ffa8 	bl	801ccbc <L_shift>
 801cd6c:	4544      	cmp	r4, r8
 801cd6e:	d950      	bls.n	801ce12 <__hexnan+0x10a>
 801cd70:	2300      	movs	r3, #0
 801cd72:	f1a4 0904 	sub.w	r9, r4, #4
 801cd76:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd7a:	f8cd b008 	str.w	fp, [sp, #8]
 801cd7e:	464c      	mov	r4, r9
 801cd80:	461d      	mov	r5, r3
 801cd82:	9903      	ldr	r1, [sp, #12]
 801cd84:	e7d7      	b.n	801cd36 <__hexnan+0x2e>
 801cd86:	2a29      	cmp	r2, #41	; 0x29
 801cd88:	d156      	bne.n	801ce38 <__hexnan+0x130>
 801cd8a:	3102      	adds	r1, #2
 801cd8c:	f8ca 1000 	str.w	r1, [sl]
 801cd90:	f1bb 0f00 	cmp.w	fp, #0
 801cd94:	d050      	beq.n	801ce38 <__hexnan+0x130>
 801cd96:	454c      	cmp	r4, r9
 801cd98:	d206      	bcs.n	801cda8 <__hexnan+0xa0>
 801cd9a:	2d07      	cmp	r5, #7
 801cd9c:	dc04      	bgt.n	801cda8 <__hexnan+0xa0>
 801cd9e:	462a      	mov	r2, r5
 801cda0:	4649      	mov	r1, r9
 801cda2:	4620      	mov	r0, r4
 801cda4:	f7ff ff8a 	bl	801ccbc <L_shift>
 801cda8:	4544      	cmp	r4, r8
 801cdaa:	d934      	bls.n	801ce16 <__hexnan+0x10e>
 801cdac:	f1a8 0204 	sub.w	r2, r8, #4
 801cdb0:	4623      	mov	r3, r4
 801cdb2:	f853 1b04 	ldr.w	r1, [r3], #4
 801cdb6:	f842 1f04 	str.w	r1, [r2, #4]!
 801cdba:	429f      	cmp	r7, r3
 801cdbc:	d2f9      	bcs.n	801cdb2 <__hexnan+0xaa>
 801cdbe:	1b3b      	subs	r3, r7, r4
 801cdc0:	f023 0303 	bic.w	r3, r3, #3
 801cdc4:	3304      	adds	r3, #4
 801cdc6:	3401      	adds	r4, #1
 801cdc8:	3e03      	subs	r6, #3
 801cdca:	42b4      	cmp	r4, r6
 801cdcc:	bf88      	it	hi
 801cdce:	2304      	movhi	r3, #4
 801cdd0:	4443      	add	r3, r8
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	f843 2b04 	str.w	r2, [r3], #4
 801cdd8:	429f      	cmp	r7, r3
 801cdda:	d2fb      	bcs.n	801cdd4 <__hexnan+0xcc>
 801cddc:	683b      	ldr	r3, [r7, #0]
 801cdde:	b91b      	cbnz	r3, 801cde8 <__hexnan+0xe0>
 801cde0:	4547      	cmp	r7, r8
 801cde2:	d127      	bne.n	801ce34 <__hexnan+0x12c>
 801cde4:	2301      	movs	r3, #1
 801cde6:	603b      	str	r3, [r7, #0]
 801cde8:	2005      	movs	r0, #5
 801cdea:	e026      	b.n	801ce3a <__hexnan+0x132>
 801cdec:	3501      	adds	r5, #1
 801cdee:	2d08      	cmp	r5, #8
 801cdf0:	f10b 0b01 	add.w	fp, fp, #1
 801cdf4:	dd06      	ble.n	801ce04 <__hexnan+0xfc>
 801cdf6:	4544      	cmp	r4, r8
 801cdf8:	d9c3      	bls.n	801cd82 <__hexnan+0x7a>
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce00:	2501      	movs	r5, #1
 801ce02:	3c04      	subs	r4, #4
 801ce04:	6822      	ldr	r2, [r4, #0]
 801ce06:	f000 000f 	and.w	r0, r0, #15
 801ce0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ce0e:	6022      	str	r2, [r4, #0]
 801ce10:	e7b7      	b.n	801cd82 <__hexnan+0x7a>
 801ce12:	2508      	movs	r5, #8
 801ce14:	e7b5      	b.n	801cd82 <__hexnan+0x7a>
 801ce16:	9b01      	ldr	r3, [sp, #4]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d0df      	beq.n	801cddc <__hexnan+0xd4>
 801ce1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ce20:	f1c3 0320 	rsb	r3, r3, #32
 801ce24:	fa22 f303 	lsr.w	r3, r2, r3
 801ce28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ce2c:	401a      	ands	r2, r3
 801ce2e:	f846 2c04 	str.w	r2, [r6, #-4]
 801ce32:	e7d3      	b.n	801cddc <__hexnan+0xd4>
 801ce34:	3f04      	subs	r7, #4
 801ce36:	e7d1      	b.n	801cddc <__hexnan+0xd4>
 801ce38:	2004      	movs	r0, #4
 801ce3a:	b007      	add	sp, #28
 801ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce40 <_localeconv_r>:
 801ce40:	4800      	ldr	r0, [pc, #0]	; (801ce44 <_localeconv_r+0x4>)
 801ce42:	4770      	bx	lr
 801ce44:	2000021c 	.word	0x2000021c

0801ce48 <_lseek_r>:
 801ce48:	b538      	push	{r3, r4, r5, lr}
 801ce4a:	4d07      	ldr	r5, [pc, #28]	; (801ce68 <_lseek_r+0x20>)
 801ce4c:	4604      	mov	r4, r0
 801ce4e:	4608      	mov	r0, r1
 801ce50:	4611      	mov	r1, r2
 801ce52:	2200      	movs	r2, #0
 801ce54:	602a      	str	r2, [r5, #0]
 801ce56:	461a      	mov	r2, r3
 801ce58:	f7f0 f890 	bl	800cf7c <_lseek>
 801ce5c:	1c43      	adds	r3, r0, #1
 801ce5e:	d102      	bne.n	801ce66 <_lseek_r+0x1e>
 801ce60:	682b      	ldr	r3, [r5, #0]
 801ce62:	b103      	cbz	r3, 801ce66 <_lseek_r+0x1e>
 801ce64:	6023      	str	r3, [r4, #0]
 801ce66:	bd38      	pop	{r3, r4, r5, pc}
 801ce68:	2000a6d4 	.word	0x2000a6d4

0801ce6c <__ascii_mbtowc>:
 801ce6c:	b082      	sub	sp, #8
 801ce6e:	b901      	cbnz	r1, 801ce72 <__ascii_mbtowc+0x6>
 801ce70:	a901      	add	r1, sp, #4
 801ce72:	b142      	cbz	r2, 801ce86 <__ascii_mbtowc+0x1a>
 801ce74:	b14b      	cbz	r3, 801ce8a <__ascii_mbtowc+0x1e>
 801ce76:	7813      	ldrb	r3, [r2, #0]
 801ce78:	600b      	str	r3, [r1, #0]
 801ce7a:	7812      	ldrb	r2, [r2, #0]
 801ce7c:	1e10      	subs	r0, r2, #0
 801ce7e:	bf18      	it	ne
 801ce80:	2001      	movne	r0, #1
 801ce82:	b002      	add	sp, #8
 801ce84:	4770      	bx	lr
 801ce86:	4610      	mov	r0, r2
 801ce88:	e7fb      	b.n	801ce82 <__ascii_mbtowc+0x16>
 801ce8a:	f06f 0001 	mvn.w	r0, #1
 801ce8e:	e7f8      	b.n	801ce82 <__ascii_mbtowc+0x16>

0801ce90 <__malloc_lock>:
 801ce90:	4801      	ldr	r0, [pc, #4]	; (801ce98 <__malloc_lock+0x8>)
 801ce92:	f001 b885 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801ce96:	bf00      	nop
 801ce98:	2000a6dc 	.word	0x2000a6dc

0801ce9c <__malloc_unlock>:
 801ce9c:	4801      	ldr	r0, [pc, #4]	; (801cea4 <__malloc_unlock+0x8>)
 801ce9e:	f001 b880 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801cea2:	bf00      	nop
 801cea4:	2000a6dc 	.word	0x2000a6dc

0801cea8 <_Balloc>:
 801cea8:	b570      	push	{r4, r5, r6, lr}
 801ceaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ceac:	4604      	mov	r4, r0
 801ceae:	460d      	mov	r5, r1
 801ceb0:	b976      	cbnz	r6, 801ced0 <_Balloc+0x28>
 801ceb2:	2010      	movs	r0, #16
 801ceb4:	f7fc fec4 	bl	8019c40 <malloc>
 801ceb8:	4602      	mov	r2, r0
 801ceba:	6260      	str	r0, [r4, #36]	; 0x24
 801cebc:	b920      	cbnz	r0, 801cec8 <_Balloc+0x20>
 801cebe:	4b18      	ldr	r3, [pc, #96]	; (801cf20 <_Balloc+0x78>)
 801cec0:	4818      	ldr	r0, [pc, #96]	; (801cf24 <_Balloc+0x7c>)
 801cec2:	2166      	movs	r1, #102	; 0x66
 801cec4:	f000 fe84 	bl	801dbd0 <__assert_func>
 801cec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cecc:	6006      	str	r6, [r0, #0]
 801cece:	60c6      	str	r6, [r0, #12]
 801ced0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ced2:	68f3      	ldr	r3, [r6, #12]
 801ced4:	b183      	cbz	r3, 801cef8 <_Balloc+0x50>
 801ced6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ced8:	68db      	ldr	r3, [r3, #12]
 801ceda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cede:	b9b8      	cbnz	r0, 801cf10 <_Balloc+0x68>
 801cee0:	2101      	movs	r1, #1
 801cee2:	fa01 f605 	lsl.w	r6, r1, r5
 801cee6:	1d72      	adds	r2, r6, #5
 801cee8:	0092      	lsls	r2, r2, #2
 801ceea:	4620      	mov	r0, r4
 801ceec:	f000 fc97 	bl	801d81e <_calloc_r>
 801cef0:	b160      	cbz	r0, 801cf0c <_Balloc+0x64>
 801cef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cef6:	e00e      	b.n	801cf16 <_Balloc+0x6e>
 801cef8:	2221      	movs	r2, #33	; 0x21
 801cefa:	2104      	movs	r1, #4
 801cefc:	4620      	mov	r0, r4
 801cefe:	f000 fc8e 	bl	801d81e <_calloc_r>
 801cf02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf04:	60f0      	str	r0, [r6, #12]
 801cf06:	68db      	ldr	r3, [r3, #12]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d1e4      	bne.n	801ced6 <_Balloc+0x2e>
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	bd70      	pop	{r4, r5, r6, pc}
 801cf10:	6802      	ldr	r2, [r0, #0]
 801cf12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cf16:	2300      	movs	r3, #0
 801cf18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cf1c:	e7f7      	b.n	801cf0e <_Balloc+0x66>
 801cf1e:	bf00      	nop
 801cf20:	0802048e 	.word	0x0802048e
 801cf24:	08020594 	.word	0x08020594

0801cf28 <_Bfree>:
 801cf28:	b570      	push	{r4, r5, r6, lr}
 801cf2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cf2c:	4605      	mov	r5, r0
 801cf2e:	460c      	mov	r4, r1
 801cf30:	b976      	cbnz	r6, 801cf50 <_Bfree+0x28>
 801cf32:	2010      	movs	r0, #16
 801cf34:	f7fc fe84 	bl	8019c40 <malloc>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	6268      	str	r0, [r5, #36]	; 0x24
 801cf3c:	b920      	cbnz	r0, 801cf48 <_Bfree+0x20>
 801cf3e:	4b09      	ldr	r3, [pc, #36]	; (801cf64 <_Bfree+0x3c>)
 801cf40:	4809      	ldr	r0, [pc, #36]	; (801cf68 <_Bfree+0x40>)
 801cf42:	218a      	movs	r1, #138	; 0x8a
 801cf44:	f000 fe44 	bl	801dbd0 <__assert_func>
 801cf48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cf4c:	6006      	str	r6, [r0, #0]
 801cf4e:	60c6      	str	r6, [r0, #12]
 801cf50:	b13c      	cbz	r4, 801cf62 <_Bfree+0x3a>
 801cf52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cf54:	6862      	ldr	r2, [r4, #4]
 801cf56:	68db      	ldr	r3, [r3, #12]
 801cf58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf5c:	6021      	str	r1, [r4, #0]
 801cf5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cf62:	bd70      	pop	{r4, r5, r6, pc}
 801cf64:	0802048e 	.word	0x0802048e
 801cf68:	08020594 	.word	0x08020594

0801cf6c <__multadd>:
 801cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf70:	690e      	ldr	r6, [r1, #16]
 801cf72:	4607      	mov	r7, r0
 801cf74:	4698      	mov	r8, r3
 801cf76:	460c      	mov	r4, r1
 801cf78:	f101 0014 	add.w	r0, r1, #20
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	6805      	ldr	r5, [r0, #0]
 801cf80:	b2a9      	uxth	r1, r5
 801cf82:	fb02 8101 	mla	r1, r2, r1, r8
 801cf86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cf8a:	0c2d      	lsrs	r5, r5, #16
 801cf8c:	fb02 c505 	mla	r5, r2, r5, ip
 801cf90:	b289      	uxth	r1, r1
 801cf92:	3301      	adds	r3, #1
 801cf94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cf98:	429e      	cmp	r6, r3
 801cf9a:	f840 1b04 	str.w	r1, [r0], #4
 801cf9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cfa2:	dcec      	bgt.n	801cf7e <__multadd+0x12>
 801cfa4:	f1b8 0f00 	cmp.w	r8, #0
 801cfa8:	d022      	beq.n	801cff0 <__multadd+0x84>
 801cfaa:	68a3      	ldr	r3, [r4, #8]
 801cfac:	42b3      	cmp	r3, r6
 801cfae:	dc19      	bgt.n	801cfe4 <__multadd+0x78>
 801cfb0:	6861      	ldr	r1, [r4, #4]
 801cfb2:	4638      	mov	r0, r7
 801cfb4:	3101      	adds	r1, #1
 801cfb6:	f7ff ff77 	bl	801cea8 <_Balloc>
 801cfba:	4605      	mov	r5, r0
 801cfbc:	b928      	cbnz	r0, 801cfca <__multadd+0x5e>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	4b0d      	ldr	r3, [pc, #52]	; (801cff8 <__multadd+0x8c>)
 801cfc2:	480e      	ldr	r0, [pc, #56]	; (801cffc <__multadd+0x90>)
 801cfc4:	21b5      	movs	r1, #181	; 0xb5
 801cfc6:	f000 fe03 	bl	801dbd0 <__assert_func>
 801cfca:	6922      	ldr	r2, [r4, #16]
 801cfcc:	3202      	adds	r2, #2
 801cfce:	f104 010c 	add.w	r1, r4, #12
 801cfd2:	0092      	lsls	r2, r2, #2
 801cfd4:	300c      	adds	r0, #12
 801cfd6:	f7fc fe3b 	bl	8019c50 <memcpy>
 801cfda:	4621      	mov	r1, r4
 801cfdc:	4638      	mov	r0, r7
 801cfde:	f7ff ffa3 	bl	801cf28 <_Bfree>
 801cfe2:	462c      	mov	r4, r5
 801cfe4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801cfe8:	3601      	adds	r6, #1
 801cfea:	f8c3 8014 	str.w	r8, [r3, #20]
 801cfee:	6126      	str	r6, [r4, #16]
 801cff0:	4620      	mov	r0, r4
 801cff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cff6:	bf00      	nop
 801cff8:	08020504 	.word	0x08020504
 801cffc:	08020594 	.word	0x08020594

0801d000 <__s2b>:
 801d000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d004:	460c      	mov	r4, r1
 801d006:	4615      	mov	r5, r2
 801d008:	461f      	mov	r7, r3
 801d00a:	2209      	movs	r2, #9
 801d00c:	3308      	adds	r3, #8
 801d00e:	4606      	mov	r6, r0
 801d010:	fb93 f3f2 	sdiv	r3, r3, r2
 801d014:	2100      	movs	r1, #0
 801d016:	2201      	movs	r2, #1
 801d018:	429a      	cmp	r2, r3
 801d01a:	db09      	blt.n	801d030 <__s2b+0x30>
 801d01c:	4630      	mov	r0, r6
 801d01e:	f7ff ff43 	bl	801cea8 <_Balloc>
 801d022:	b940      	cbnz	r0, 801d036 <__s2b+0x36>
 801d024:	4602      	mov	r2, r0
 801d026:	4b19      	ldr	r3, [pc, #100]	; (801d08c <__s2b+0x8c>)
 801d028:	4819      	ldr	r0, [pc, #100]	; (801d090 <__s2b+0x90>)
 801d02a:	21ce      	movs	r1, #206	; 0xce
 801d02c:	f000 fdd0 	bl	801dbd0 <__assert_func>
 801d030:	0052      	lsls	r2, r2, #1
 801d032:	3101      	adds	r1, #1
 801d034:	e7f0      	b.n	801d018 <__s2b+0x18>
 801d036:	9b08      	ldr	r3, [sp, #32]
 801d038:	6143      	str	r3, [r0, #20]
 801d03a:	2d09      	cmp	r5, #9
 801d03c:	f04f 0301 	mov.w	r3, #1
 801d040:	6103      	str	r3, [r0, #16]
 801d042:	dd16      	ble.n	801d072 <__s2b+0x72>
 801d044:	f104 0909 	add.w	r9, r4, #9
 801d048:	46c8      	mov	r8, r9
 801d04a:	442c      	add	r4, r5
 801d04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d050:	4601      	mov	r1, r0
 801d052:	3b30      	subs	r3, #48	; 0x30
 801d054:	220a      	movs	r2, #10
 801d056:	4630      	mov	r0, r6
 801d058:	f7ff ff88 	bl	801cf6c <__multadd>
 801d05c:	45a0      	cmp	r8, r4
 801d05e:	d1f5      	bne.n	801d04c <__s2b+0x4c>
 801d060:	f1a5 0408 	sub.w	r4, r5, #8
 801d064:	444c      	add	r4, r9
 801d066:	1b2d      	subs	r5, r5, r4
 801d068:	1963      	adds	r3, r4, r5
 801d06a:	42bb      	cmp	r3, r7
 801d06c:	db04      	blt.n	801d078 <__s2b+0x78>
 801d06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d072:	340a      	adds	r4, #10
 801d074:	2509      	movs	r5, #9
 801d076:	e7f6      	b.n	801d066 <__s2b+0x66>
 801d078:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d07c:	4601      	mov	r1, r0
 801d07e:	3b30      	subs	r3, #48	; 0x30
 801d080:	220a      	movs	r2, #10
 801d082:	4630      	mov	r0, r6
 801d084:	f7ff ff72 	bl	801cf6c <__multadd>
 801d088:	e7ee      	b.n	801d068 <__s2b+0x68>
 801d08a:	bf00      	nop
 801d08c:	08020504 	.word	0x08020504
 801d090:	08020594 	.word	0x08020594

0801d094 <__hi0bits>:
 801d094:	0c03      	lsrs	r3, r0, #16
 801d096:	041b      	lsls	r3, r3, #16
 801d098:	b9d3      	cbnz	r3, 801d0d0 <__hi0bits+0x3c>
 801d09a:	0400      	lsls	r0, r0, #16
 801d09c:	2310      	movs	r3, #16
 801d09e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d0a2:	bf04      	itt	eq
 801d0a4:	0200      	lsleq	r0, r0, #8
 801d0a6:	3308      	addeq	r3, #8
 801d0a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d0ac:	bf04      	itt	eq
 801d0ae:	0100      	lsleq	r0, r0, #4
 801d0b0:	3304      	addeq	r3, #4
 801d0b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d0b6:	bf04      	itt	eq
 801d0b8:	0080      	lsleq	r0, r0, #2
 801d0ba:	3302      	addeq	r3, #2
 801d0bc:	2800      	cmp	r0, #0
 801d0be:	db05      	blt.n	801d0cc <__hi0bits+0x38>
 801d0c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d0c4:	f103 0301 	add.w	r3, r3, #1
 801d0c8:	bf08      	it	eq
 801d0ca:	2320      	moveq	r3, #32
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	4770      	bx	lr
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	e7e4      	b.n	801d09e <__hi0bits+0xa>

0801d0d4 <__lo0bits>:
 801d0d4:	6803      	ldr	r3, [r0, #0]
 801d0d6:	f013 0207 	ands.w	r2, r3, #7
 801d0da:	4601      	mov	r1, r0
 801d0dc:	d00b      	beq.n	801d0f6 <__lo0bits+0x22>
 801d0de:	07da      	lsls	r2, r3, #31
 801d0e0:	d424      	bmi.n	801d12c <__lo0bits+0x58>
 801d0e2:	0798      	lsls	r0, r3, #30
 801d0e4:	bf49      	itett	mi
 801d0e6:	085b      	lsrmi	r3, r3, #1
 801d0e8:	089b      	lsrpl	r3, r3, #2
 801d0ea:	2001      	movmi	r0, #1
 801d0ec:	600b      	strmi	r3, [r1, #0]
 801d0ee:	bf5c      	itt	pl
 801d0f0:	600b      	strpl	r3, [r1, #0]
 801d0f2:	2002      	movpl	r0, #2
 801d0f4:	4770      	bx	lr
 801d0f6:	b298      	uxth	r0, r3
 801d0f8:	b9b0      	cbnz	r0, 801d128 <__lo0bits+0x54>
 801d0fa:	0c1b      	lsrs	r3, r3, #16
 801d0fc:	2010      	movs	r0, #16
 801d0fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d102:	bf04      	itt	eq
 801d104:	0a1b      	lsreq	r3, r3, #8
 801d106:	3008      	addeq	r0, #8
 801d108:	071a      	lsls	r2, r3, #28
 801d10a:	bf04      	itt	eq
 801d10c:	091b      	lsreq	r3, r3, #4
 801d10e:	3004      	addeq	r0, #4
 801d110:	079a      	lsls	r2, r3, #30
 801d112:	bf04      	itt	eq
 801d114:	089b      	lsreq	r3, r3, #2
 801d116:	3002      	addeq	r0, #2
 801d118:	07da      	lsls	r2, r3, #31
 801d11a:	d403      	bmi.n	801d124 <__lo0bits+0x50>
 801d11c:	085b      	lsrs	r3, r3, #1
 801d11e:	f100 0001 	add.w	r0, r0, #1
 801d122:	d005      	beq.n	801d130 <__lo0bits+0x5c>
 801d124:	600b      	str	r3, [r1, #0]
 801d126:	4770      	bx	lr
 801d128:	4610      	mov	r0, r2
 801d12a:	e7e8      	b.n	801d0fe <__lo0bits+0x2a>
 801d12c:	2000      	movs	r0, #0
 801d12e:	4770      	bx	lr
 801d130:	2020      	movs	r0, #32
 801d132:	4770      	bx	lr

0801d134 <__i2b>:
 801d134:	b510      	push	{r4, lr}
 801d136:	460c      	mov	r4, r1
 801d138:	2101      	movs	r1, #1
 801d13a:	f7ff feb5 	bl	801cea8 <_Balloc>
 801d13e:	4602      	mov	r2, r0
 801d140:	b928      	cbnz	r0, 801d14e <__i2b+0x1a>
 801d142:	4b05      	ldr	r3, [pc, #20]	; (801d158 <__i2b+0x24>)
 801d144:	4805      	ldr	r0, [pc, #20]	; (801d15c <__i2b+0x28>)
 801d146:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d14a:	f000 fd41 	bl	801dbd0 <__assert_func>
 801d14e:	2301      	movs	r3, #1
 801d150:	6144      	str	r4, [r0, #20]
 801d152:	6103      	str	r3, [r0, #16]
 801d154:	bd10      	pop	{r4, pc}
 801d156:	bf00      	nop
 801d158:	08020504 	.word	0x08020504
 801d15c:	08020594 	.word	0x08020594

0801d160 <__multiply>:
 801d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d164:	4614      	mov	r4, r2
 801d166:	690a      	ldr	r2, [r1, #16]
 801d168:	6923      	ldr	r3, [r4, #16]
 801d16a:	429a      	cmp	r2, r3
 801d16c:	bfb8      	it	lt
 801d16e:	460b      	movlt	r3, r1
 801d170:	460d      	mov	r5, r1
 801d172:	bfbc      	itt	lt
 801d174:	4625      	movlt	r5, r4
 801d176:	461c      	movlt	r4, r3
 801d178:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d17c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d180:	68ab      	ldr	r3, [r5, #8]
 801d182:	6869      	ldr	r1, [r5, #4]
 801d184:	eb0a 0709 	add.w	r7, sl, r9
 801d188:	42bb      	cmp	r3, r7
 801d18a:	b085      	sub	sp, #20
 801d18c:	bfb8      	it	lt
 801d18e:	3101      	addlt	r1, #1
 801d190:	f7ff fe8a 	bl	801cea8 <_Balloc>
 801d194:	b930      	cbnz	r0, 801d1a4 <__multiply+0x44>
 801d196:	4602      	mov	r2, r0
 801d198:	4b42      	ldr	r3, [pc, #264]	; (801d2a4 <__multiply+0x144>)
 801d19a:	4843      	ldr	r0, [pc, #268]	; (801d2a8 <__multiply+0x148>)
 801d19c:	f240 115d 	movw	r1, #349	; 0x15d
 801d1a0:	f000 fd16 	bl	801dbd0 <__assert_func>
 801d1a4:	f100 0614 	add.w	r6, r0, #20
 801d1a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d1ac:	4633      	mov	r3, r6
 801d1ae:	2200      	movs	r2, #0
 801d1b0:	4543      	cmp	r3, r8
 801d1b2:	d31e      	bcc.n	801d1f2 <__multiply+0x92>
 801d1b4:	f105 0c14 	add.w	ip, r5, #20
 801d1b8:	f104 0314 	add.w	r3, r4, #20
 801d1bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d1c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d1c4:	9202      	str	r2, [sp, #8]
 801d1c6:	ebac 0205 	sub.w	r2, ip, r5
 801d1ca:	3a15      	subs	r2, #21
 801d1cc:	f022 0203 	bic.w	r2, r2, #3
 801d1d0:	3204      	adds	r2, #4
 801d1d2:	f105 0115 	add.w	r1, r5, #21
 801d1d6:	458c      	cmp	ip, r1
 801d1d8:	bf38      	it	cc
 801d1da:	2204      	movcc	r2, #4
 801d1dc:	9201      	str	r2, [sp, #4]
 801d1de:	9a02      	ldr	r2, [sp, #8]
 801d1e0:	9303      	str	r3, [sp, #12]
 801d1e2:	429a      	cmp	r2, r3
 801d1e4:	d808      	bhi.n	801d1f8 <__multiply+0x98>
 801d1e6:	2f00      	cmp	r7, #0
 801d1e8:	dc55      	bgt.n	801d296 <__multiply+0x136>
 801d1ea:	6107      	str	r7, [r0, #16]
 801d1ec:	b005      	add	sp, #20
 801d1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1f2:	f843 2b04 	str.w	r2, [r3], #4
 801d1f6:	e7db      	b.n	801d1b0 <__multiply+0x50>
 801d1f8:	f8b3 a000 	ldrh.w	sl, [r3]
 801d1fc:	f1ba 0f00 	cmp.w	sl, #0
 801d200:	d020      	beq.n	801d244 <__multiply+0xe4>
 801d202:	f105 0e14 	add.w	lr, r5, #20
 801d206:	46b1      	mov	r9, r6
 801d208:	2200      	movs	r2, #0
 801d20a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d20e:	f8d9 b000 	ldr.w	fp, [r9]
 801d212:	b2a1      	uxth	r1, r4
 801d214:	fa1f fb8b 	uxth.w	fp, fp
 801d218:	fb0a b101 	mla	r1, sl, r1, fp
 801d21c:	4411      	add	r1, r2
 801d21e:	f8d9 2000 	ldr.w	r2, [r9]
 801d222:	0c24      	lsrs	r4, r4, #16
 801d224:	0c12      	lsrs	r2, r2, #16
 801d226:	fb0a 2404 	mla	r4, sl, r4, r2
 801d22a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d22e:	b289      	uxth	r1, r1
 801d230:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d234:	45f4      	cmp	ip, lr
 801d236:	f849 1b04 	str.w	r1, [r9], #4
 801d23a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d23e:	d8e4      	bhi.n	801d20a <__multiply+0xaa>
 801d240:	9901      	ldr	r1, [sp, #4]
 801d242:	5072      	str	r2, [r6, r1]
 801d244:	9a03      	ldr	r2, [sp, #12]
 801d246:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d24a:	3304      	adds	r3, #4
 801d24c:	f1b9 0f00 	cmp.w	r9, #0
 801d250:	d01f      	beq.n	801d292 <__multiply+0x132>
 801d252:	6834      	ldr	r4, [r6, #0]
 801d254:	f105 0114 	add.w	r1, r5, #20
 801d258:	46b6      	mov	lr, r6
 801d25a:	f04f 0a00 	mov.w	sl, #0
 801d25e:	880a      	ldrh	r2, [r1, #0]
 801d260:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d264:	fb09 b202 	mla	r2, r9, r2, fp
 801d268:	4492      	add	sl, r2
 801d26a:	b2a4      	uxth	r4, r4
 801d26c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d270:	f84e 4b04 	str.w	r4, [lr], #4
 801d274:	f851 4b04 	ldr.w	r4, [r1], #4
 801d278:	f8be 2000 	ldrh.w	r2, [lr]
 801d27c:	0c24      	lsrs	r4, r4, #16
 801d27e:	fb09 2404 	mla	r4, r9, r4, r2
 801d282:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d286:	458c      	cmp	ip, r1
 801d288:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d28c:	d8e7      	bhi.n	801d25e <__multiply+0xfe>
 801d28e:	9a01      	ldr	r2, [sp, #4]
 801d290:	50b4      	str	r4, [r6, r2]
 801d292:	3604      	adds	r6, #4
 801d294:	e7a3      	b.n	801d1de <__multiply+0x7e>
 801d296:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d1a5      	bne.n	801d1ea <__multiply+0x8a>
 801d29e:	3f01      	subs	r7, #1
 801d2a0:	e7a1      	b.n	801d1e6 <__multiply+0x86>
 801d2a2:	bf00      	nop
 801d2a4:	08020504 	.word	0x08020504
 801d2a8:	08020594 	.word	0x08020594

0801d2ac <__pow5mult>:
 801d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2b0:	4615      	mov	r5, r2
 801d2b2:	f012 0203 	ands.w	r2, r2, #3
 801d2b6:	4606      	mov	r6, r0
 801d2b8:	460f      	mov	r7, r1
 801d2ba:	d007      	beq.n	801d2cc <__pow5mult+0x20>
 801d2bc:	4c25      	ldr	r4, [pc, #148]	; (801d354 <__pow5mult+0xa8>)
 801d2be:	3a01      	subs	r2, #1
 801d2c0:	2300      	movs	r3, #0
 801d2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d2c6:	f7ff fe51 	bl	801cf6c <__multadd>
 801d2ca:	4607      	mov	r7, r0
 801d2cc:	10ad      	asrs	r5, r5, #2
 801d2ce:	d03d      	beq.n	801d34c <__pow5mult+0xa0>
 801d2d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d2d2:	b97c      	cbnz	r4, 801d2f4 <__pow5mult+0x48>
 801d2d4:	2010      	movs	r0, #16
 801d2d6:	f7fc fcb3 	bl	8019c40 <malloc>
 801d2da:	4602      	mov	r2, r0
 801d2dc:	6270      	str	r0, [r6, #36]	; 0x24
 801d2de:	b928      	cbnz	r0, 801d2ec <__pow5mult+0x40>
 801d2e0:	4b1d      	ldr	r3, [pc, #116]	; (801d358 <__pow5mult+0xac>)
 801d2e2:	481e      	ldr	r0, [pc, #120]	; (801d35c <__pow5mult+0xb0>)
 801d2e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d2e8:	f000 fc72 	bl	801dbd0 <__assert_func>
 801d2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d2f0:	6004      	str	r4, [r0, #0]
 801d2f2:	60c4      	str	r4, [r0, #12]
 801d2f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d2fc:	b94c      	cbnz	r4, 801d312 <__pow5mult+0x66>
 801d2fe:	f240 2171 	movw	r1, #625	; 0x271
 801d302:	4630      	mov	r0, r6
 801d304:	f7ff ff16 	bl	801d134 <__i2b>
 801d308:	2300      	movs	r3, #0
 801d30a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d30e:	4604      	mov	r4, r0
 801d310:	6003      	str	r3, [r0, #0]
 801d312:	f04f 0900 	mov.w	r9, #0
 801d316:	07eb      	lsls	r3, r5, #31
 801d318:	d50a      	bpl.n	801d330 <__pow5mult+0x84>
 801d31a:	4639      	mov	r1, r7
 801d31c:	4622      	mov	r2, r4
 801d31e:	4630      	mov	r0, r6
 801d320:	f7ff ff1e 	bl	801d160 <__multiply>
 801d324:	4639      	mov	r1, r7
 801d326:	4680      	mov	r8, r0
 801d328:	4630      	mov	r0, r6
 801d32a:	f7ff fdfd 	bl	801cf28 <_Bfree>
 801d32e:	4647      	mov	r7, r8
 801d330:	106d      	asrs	r5, r5, #1
 801d332:	d00b      	beq.n	801d34c <__pow5mult+0xa0>
 801d334:	6820      	ldr	r0, [r4, #0]
 801d336:	b938      	cbnz	r0, 801d348 <__pow5mult+0x9c>
 801d338:	4622      	mov	r2, r4
 801d33a:	4621      	mov	r1, r4
 801d33c:	4630      	mov	r0, r6
 801d33e:	f7ff ff0f 	bl	801d160 <__multiply>
 801d342:	6020      	str	r0, [r4, #0]
 801d344:	f8c0 9000 	str.w	r9, [r0]
 801d348:	4604      	mov	r4, r0
 801d34a:	e7e4      	b.n	801d316 <__pow5mult+0x6a>
 801d34c:	4638      	mov	r0, r7
 801d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d352:	bf00      	nop
 801d354:	080206e8 	.word	0x080206e8
 801d358:	0802048e 	.word	0x0802048e
 801d35c:	08020594 	.word	0x08020594

0801d360 <__lshift>:
 801d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d364:	460c      	mov	r4, r1
 801d366:	6849      	ldr	r1, [r1, #4]
 801d368:	6923      	ldr	r3, [r4, #16]
 801d36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d36e:	68a3      	ldr	r3, [r4, #8]
 801d370:	4607      	mov	r7, r0
 801d372:	4691      	mov	r9, r2
 801d374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d378:	f108 0601 	add.w	r6, r8, #1
 801d37c:	42b3      	cmp	r3, r6
 801d37e:	db0b      	blt.n	801d398 <__lshift+0x38>
 801d380:	4638      	mov	r0, r7
 801d382:	f7ff fd91 	bl	801cea8 <_Balloc>
 801d386:	4605      	mov	r5, r0
 801d388:	b948      	cbnz	r0, 801d39e <__lshift+0x3e>
 801d38a:	4602      	mov	r2, r0
 801d38c:	4b28      	ldr	r3, [pc, #160]	; (801d430 <__lshift+0xd0>)
 801d38e:	4829      	ldr	r0, [pc, #164]	; (801d434 <__lshift+0xd4>)
 801d390:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d394:	f000 fc1c 	bl	801dbd0 <__assert_func>
 801d398:	3101      	adds	r1, #1
 801d39a:	005b      	lsls	r3, r3, #1
 801d39c:	e7ee      	b.n	801d37c <__lshift+0x1c>
 801d39e:	2300      	movs	r3, #0
 801d3a0:	f100 0114 	add.w	r1, r0, #20
 801d3a4:	f100 0210 	add.w	r2, r0, #16
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	4553      	cmp	r3, sl
 801d3ac:	db33      	blt.n	801d416 <__lshift+0xb6>
 801d3ae:	6920      	ldr	r0, [r4, #16]
 801d3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d3b4:	f104 0314 	add.w	r3, r4, #20
 801d3b8:	f019 091f 	ands.w	r9, r9, #31
 801d3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d3c4:	d02b      	beq.n	801d41e <__lshift+0xbe>
 801d3c6:	f1c9 0e20 	rsb	lr, r9, #32
 801d3ca:	468a      	mov	sl, r1
 801d3cc:	2200      	movs	r2, #0
 801d3ce:	6818      	ldr	r0, [r3, #0]
 801d3d0:	fa00 f009 	lsl.w	r0, r0, r9
 801d3d4:	4302      	orrs	r2, r0
 801d3d6:	f84a 2b04 	str.w	r2, [sl], #4
 801d3da:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3de:	459c      	cmp	ip, r3
 801d3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 801d3e4:	d8f3      	bhi.n	801d3ce <__lshift+0x6e>
 801d3e6:	ebac 0304 	sub.w	r3, ip, r4
 801d3ea:	3b15      	subs	r3, #21
 801d3ec:	f023 0303 	bic.w	r3, r3, #3
 801d3f0:	3304      	adds	r3, #4
 801d3f2:	f104 0015 	add.w	r0, r4, #21
 801d3f6:	4584      	cmp	ip, r0
 801d3f8:	bf38      	it	cc
 801d3fa:	2304      	movcc	r3, #4
 801d3fc:	50ca      	str	r2, [r1, r3]
 801d3fe:	b10a      	cbz	r2, 801d404 <__lshift+0xa4>
 801d400:	f108 0602 	add.w	r6, r8, #2
 801d404:	3e01      	subs	r6, #1
 801d406:	4638      	mov	r0, r7
 801d408:	612e      	str	r6, [r5, #16]
 801d40a:	4621      	mov	r1, r4
 801d40c:	f7ff fd8c 	bl	801cf28 <_Bfree>
 801d410:	4628      	mov	r0, r5
 801d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d416:	f842 0f04 	str.w	r0, [r2, #4]!
 801d41a:	3301      	adds	r3, #1
 801d41c:	e7c5      	b.n	801d3aa <__lshift+0x4a>
 801d41e:	3904      	subs	r1, #4
 801d420:	f853 2b04 	ldr.w	r2, [r3], #4
 801d424:	f841 2f04 	str.w	r2, [r1, #4]!
 801d428:	459c      	cmp	ip, r3
 801d42a:	d8f9      	bhi.n	801d420 <__lshift+0xc0>
 801d42c:	e7ea      	b.n	801d404 <__lshift+0xa4>
 801d42e:	bf00      	nop
 801d430:	08020504 	.word	0x08020504
 801d434:	08020594 	.word	0x08020594

0801d438 <__mcmp>:
 801d438:	b530      	push	{r4, r5, lr}
 801d43a:	6902      	ldr	r2, [r0, #16]
 801d43c:	690c      	ldr	r4, [r1, #16]
 801d43e:	1b12      	subs	r2, r2, r4
 801d440:	d10e      	bne.n	801d460 <__mcmp+0x28>
 801d442:	f100 0314 	add.w	r3, r0, #20
 801d446:	3114      	adds	r1, #20
 801d448:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d44c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d450:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d454:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d458:	42a5      	cmp	r5, r4
 801d45a:	d003      	beq.n	801d464 <__mcmp+0x2c>
 801d45c:	d305      	bcc.n	801d46a <__mcmp+0x32>
 801d45e:	2201      	movs	r2, #1
 801d460:	4610      	mov	r0, r2
 801d462:	bd30      	pop	{r4, r5, pc}
 801d464:	4283      	cmp	r3, r0
 801d466:	d3f3      	bcc.n	801d450 <__mcmp+0x18>
 801d468:	e7fa      	b.n	801d460 <__mcmp+0x28>
 801d46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d46e:	e7f7      	b.n	801d460 <__mcmp+0x28>

0801d470 <__mdiff>:
 801d470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d474:	460c      	mov	r4, r1
 801d476:	4606      	mov	r6, r0
 801d478:	4611      	mov	r1, r2
 801d47a:	4620      	mov	r0, r4
 801d47c:	4617      	mov	r7, r2
 801d47e:	f7ff ffdb 	bl	801d438 <__mcmp>
 801d482:	1e05      	subs	r5, r0, #0
 801d484:	d110      	bne.n	801d4a8 <__mdiff+0x38>
 801d486:	4629      	mov	r1, r5
 801d488:	4630      	mov	r0, r6
 801d48a:	f7ff fd0d 	bl	801cea8 <_Balloc>
 801d48e:	b930      	cbnz	r0, 801d49e <__mdiff+0x2e>
 801d490:	4b39      	ldr	r3, [pc, #228]	; (801d578 <__mdiff+0x108>)
 801d492:	4602      	mov	r2, r0
 801d494:	f240 2132 	movw	r1, #562	; 0x232
 801d498:	4838      	ldr	r0, [pc, #224]	; (801d57c <__mdiff+0x10c>)
 801d49a:	f000 fb99 	bl	801dbd0 <__assert_func>
 801d49e:	2301      	movs	r3, #1
 801d4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d4a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a8:	bfa4      	itt	ge
 801d4aa:	463b      	movge	r3, r7
 801d4ac:	4627      	movge	r7, r4
 801d4ae:	4630      	mov	r0, r6
 801d4b0:	6879      	ldr	r1, [r7, #4]
 801d4b2:	bfa6      	itte	ge
 801d4b4:	461c      	movge	r4, r3
 801d4b6:	2500      	movge	r5, #0
 801d4b8:	2501      	movlt	r5, #1
 801d4ba:	f7ff fcf5 	bl	801cea8 <_Balloc>
 801d4be:	b920      	cbnz	r0, 801d4ca <__mdiff+0x5a>
 801d4c0:	4b2d      	ldr	r3, [pc, #180]	; (801d578 <__mdiff+0x108>)
 801d4c2:	4602      	mov	r2, r0
 801d4c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d4c8:	e7e6      	b.n	801d498 <__mdiff+0x28>
 801d4ca:	693e      	ldr	r6, [r7, #16]
 801d4cc:	60c5      	str	r5, [r0, #12]
 801d4ce:	6925      	ldr	r5, [r4, #16]
 801d4d0:	f107 0114 	add.w	r1, r7, #20
 801d4d4:	f104 0914 	add.w	r9, r4, #20
 801d4d8:	f100 0e14 	add.w	lr, r0, #20
 801d4dc:	f107 0210 	add.w	r2, r7, #16
 801d4e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d4e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d4e8:	46f2      	mov	sl, lr
 801d4ea:	2700      	movs	r7, #0
 801d4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 801d4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d4f4:	fa1f f883 	uxth.w	r8, r3
 801d4f8:	fa17 f78b 	uxtah	r7, r7, fp
 801d4fc:	0c1b      	lsrs	r3, r3, #16
 801d4fe:	eba7 0808 	sub.w	r8, r7, r8
 801d502:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d506:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d50a:	fa1f f888 	uxth.w	r8, r8
 801d50e:	141f      	asrs	r7, r3, #16
 801d510:	454d      	cmp	r5, r9
 801d512:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d516:	f84a 3b04 	str.w	r3, [sl], #4
 801d51a:	d8e7      	bhi.n	801d4ec <__mdiff+0x7c>
 801d51c:	1b2b      	subs	r3, r5, r4
 801d51e:	3b15      	subs	r3, #21
 801d520:	f023 0303 	bic.w	r3, r3, #3
 801d524:	3304      	adds	r3, #4
 801d526:	3415      	adds	r4, #21
 801d528:	42a5      	cmp	r5, r4
 801d52a:	bf38      	it	cc
 801d52c:	2304      	movcc	r3, #4
 801d52e:	4419      	add	r1, r3
 801d530:	4473      	add	r3, lr
 801d532:	469e      	mov	lr, r3
 801d534:	460d      	mov	r5, r1
 801d536:	4565      	cmp	r5, ip
 801d538:	d30e      	bcc.n	801d558 <__mdiff+0xe8>
 801d53a:	f10c 0203 	add.w	r2, ip, #3
 801d53e:	1a52      	subs	r2, r2, r1
 801d540:	f022 0203 	bic.w	r2, r2, #3
 801d544:	3903      	subs	r1, #3
 801d546:	458c      	cmp	ip, r1
 801d548:	bf38      	it	cc
 801d54a:	2200      	movcc	r2, #0
 801d54c:	441a      	add	r2, r3
 801d54e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d552:	b17b      	cbz	r3, 801d574 <__mdiff+0x104>
 801d554:	6106      	str	r6, [r0, #16]
 801d556:	e7a5      	b.n	801d4a4 <__mdiff+0x34>
 801d558:	f855 8b04 	ldr.w	r8, [r5], #4
 801d55c:	fa17 f488 	uxtah	r4, r7, r8
 801d560:	1422      	asrs	r2, r4, #16
 801d562:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d566:	b2a4      	uxth	r4, r4
 801d568:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d56c:	f84e 4b04 	str.w	r4, [lr], #4
 801d570:	1417      	asrs	r7, r2, #16
 801d572:	e7e0      	b.n	801d536 <__mdiff+0xc6>
 801d574:	3e01      	subs	r6, #1
 801d576:	e7ea      	b.n	801d54e <__mdiff+0xde>
 801d578:	08020504 	.word	0x08020504
 801d57c:	08020594 	.word	0x08020594

0801d580 <__ulp>:
 801d580:	b082      	sub	sp, #8
 801d582:	ed8d 0b00 	vstr	d0, [sp]
 801d586:	9b01      	ldr	r3, [sp, #4]
 801d588:	4912      	ldr	r1, [pc, #72]	; (801d5d4 <__ulp+0x54>)
 801d58a:	4019      	ands	r1, r3
 801d58c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d590:	2900      	cmp	r1, #0
 801d592:	dd05      	ble.n	801d5a0 <__ulp+0x20>
 801d594:	2200      	movs	r2, #0
 801d596:	460b      	mov	r3, r1
 801d598:	ec43 2b10 	vmov	d0, r2, r3
 801d59c:	b002      	add	sp, #8
 801d59e:	4770      	bx	lr
 801d5a0:	4249      	negs	r1, r1
 801d5a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d5a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d5aa:	f04f 0200 	mov.w	r2, #0
 801d5ae:	f04f 0300 	mov.w	r3, #0
 801d5b2:	da04      	bge.n	801d5be <__ulp+0x3e>
 801d5b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d5b8:	fa41 f300 	asr.w	r3, r1, r0
 801d5bc:	e7ec      	b.n	801d598 <__ulp+0x18>
 801d5be:	f1a0 0114 	sub.w	r1, r0, #20
 801d5c2:	291e      	cmp	r1, #30
 801d5c4:	bfda      	itte	le
 801d5c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d5ca:	fa20 f101 	lsrle.w	r1, r0, r1
 801d5ce:	2101      	movgt	r1, #1
 801d5d0:	460a      	mov	r2, r1
 801d5d2:	e7e1      	b.n	801d598 <__ulp+0x18>
 801d5d4:	7ff00000 	.word	0x7ff00000

0801d5d8 <__b2d>:
 801d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5da:	6905      	ldr	r5, [r0, #16]
 801d5dc:	f100 0714 	add.w	r7, r0, #20
 801d5e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d5e4:	1f2e      	subs	r6, r5, #4
 801d5e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	f7ff fd52 	bl	801d094 <__hi0bits>
 801d5f0:	f1c0 0320 	rsb	r3, r0, #32
 801d5f4:	280a      	cmp	r0, #10
 801d5f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d674 <__b2d+0x9c>
 801d5fa:	600b      	str	r3, [r1, #0]
 801d5fc:	dc14      	bgt.n	801d628 <__b2d+0x50>
 801d5fe:	f1c0 0e0b 	rsb	lr, r0, #11
 801d602:	fa24 f10e 	lsr.w	r1, r4, lr
 801d606:	42b7      	cmp	r7, r6
 801d608:	ea41 030c 	orr.w	r3, r1, ip
 801d60c:	bf34      	ite	cc
 801d60e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d612:	2100      	movcs	r1, #0
 801d614:	3015      	adds	r0, #21
 801d616:	fa04 f000 	lsl.w	r0, r4, r0
 801d61a:	fa21 f10e 	lsr.w	r1, r1, lr
 801d61e:	ea40 0201 	orr.w	r2, r0, r1
 801d622:	ec43 2b10 	vmov	d0, r2, r3
 801d626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d628:	42b7      	cmp	r7, r6
 801d62a:	bf3a      	itte	cc
 801d62c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d630:	f1a5 0608 	subcc.w	r6, r5, #8
 801d634:	2100      	movcs	r1, #0
 801d636:	380b      	subs	r0, #11
 801d638:	d017      	beq.n	801d66a <__b2d+0x92>
 801d63a:	f1c0 0c20 	rsb	ip, r0, #32
 801d63e:	fa04 f500 	lsl.w	r5, r4, r0
 801d642:	42be      	cmp	r6, r7
 801d644:	fa21 f40c 	lsr.w	r4, r1, ip
 801d648:	ea45 0504 	orr.w	r5, r5, r4
 801d64c:	bf8c      	ite	hi
 801d64e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d652:	2400      	movls	r4, #0
 801d654:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d658:	fa01 f000 	lsl.w	r0, r1, r0
 801d65c:	fa24 f40c 	lsr.w	r4, r4, ip
 801d660:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d664:	ea40 0204 	orr.w	r2, r0, r4
 801d668:	e7db      	b.n	801d622 <__b2d+0x4a>
 801d66a:	ea44 030c 	orr.w	r3, r4, ip
 801d66e:	460a      	mov	r2, r1
 801d670:	e7d7      	b.n	801d622 <__b2d+0x4a>
 801d672:	bf00      	nop
 801d674:	3ff00000 	.word	0x3ff00000

0801d678 <__d2b>:
 801d678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d67c:	4689      	mov	r9, r1
 801d67e:	2101      	movs	r1, #1
 801d680:	ec57 6b10 	vmov	r6, r7, d0
 801d684:	4690      	mov	r8, r2
 801d686:	f7ff fc0f 	bl	801cea8 <_Balloc>
 801d68a:	4604      	mov	r4, r0
 801d68c:	b930      	cbnz	r0, 801d69c <__d2b+0x24>
 801d68e:	4602      	mov	r2, r0
 801d690:	4b25      	ldr	r3, [pc, #148]	; (801d728 <__d2b+0xb0>)
 801d692:	4826      	ldr	r0, [pc, #152]	; (801d72c <__d2b+0xb4>)
 801d694:	f240 310a 	movw	r1, #778	; 0x30a
 801d698:	f000 fa9a 	bl	801dbd0 <__assert_func>
 801d69c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d6a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d6a4:	bb35      	cbnz	r5, 801d6f4 <__d2b+0x7c>
 801d6a6:	2e00      	cmp	r6, #0
 801d6a8:	9301      	str	r3, [sp, #4]
 801d6aa:	d028      	beq.n	801d6fe <__d2b+0x86>
 801d6ac:	4668      	mov	r0, sp
 801d6ae:	9600      	str	r6, [sp, #0]
 801d6b0:	f7ff fd10 	bl	801d0d4 <__lo0bits>
 801d6b4:	9900      	ldr	r1, [sp, #0]
 801d6b6:	b300      	cbz	r0, 801d6fa <__d2b+0x82>
 801d6b8:	9a01      	ldr	r2, [sp, #4]
 801d6ba:	f1c0 0320 	rsb	r3, r0, #32
 801d6be:	fa02 f303 	lsl.w	r3, r2, r3
 801d6c2:	430b      	orrs	r3, r1
 801d6c4:	40c2      	lsrs	r2, r0
 801d6c6:	6163      	str	r3, [r4, #20]
 801d6c8:	9201      	str	r2, [sp, #4]
 801d6ca:	9b01      	ldr	r3, [sp, #4]
 801d6cc:	61a3      	str	r3, [r4, #24]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	bf14      	ite	ne
 801d6d2:	2202      	movne	r2, #2
 801d6d4:	2201      	moveq	r2, #1
 801d6d6:	6122      	str	r2, [r4, #16]
 801d6d8:	b1d5      	cbz	r5, 801d710 <__d2b+0x98>
 801d6da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d6de:	4405      	add	r5, r0
 801d6e0:	f8c9 5000 	str.w	r5, [r9]
 801d6e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d6e8:	f8c8 0000 	str.w	r0, [r8]
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	b003      	add	sp, #12
 801d6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d6f8:	e7d5      	b.n	801d6a6 <__d2b+0x2e>
 801d6fa:	6161      	str	r1, [r4, #20]
 801d6fc:	e7e5      	b.n	801d6ca <__d2b+0x52>
 801d6fe:	a801      	add	r0, sp, #4
 801d700:	f7ff fce8 	bl	801d0d4 <__lo0bits>
 801d704:	9b01      	ldr	r3, [sp, #4]
 801d706:	6163      	str	r3, [r4, #20]
 801d708:	2201      	movs	r2, #1
 801d70a:	6122      	str	r2, [r4, #16]
 801d70c:	3020      	adds	r0, #32
 801d70e:	e7e3      	b.n	801d6d8 <__d2b+0x60>
 801d710:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d718:	f8c9 0000 	str.w	r0, [r9]
 801d71c:	6918      	ldr	r0, [r3, #16]
 801d71e:	f7ff fcb9 	bl	801d094 <__hi0bits>
 801d722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d726:	e7df      	b.n	801d6e8 <__d2b+0x70>
 801d728:	08020504 	.word	0x08020504
 801d72c:	08020594 	.word	0x08020594

0801d730 <__ratio>:
 801d730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d734:	4688      	mov	r8, r1
 801d736:	4669      	mov	r1, sp
 801d738:	4681      	mov	r9, r0
 801d73a:	f7ff ff4d 	bl	801d5d8 <__b2d>
 801d73e:	a901      	add	r1, sp, #4
 801d740:	4640      	mov	r0, r8
 801d742:	ec55 4b10 	vmov	r4, r5, d0
 801d746:	f7ff ff47 	bl	801d5d8 <__b2d>
 801d74a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d74e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d752:	eba3 0c02 	sub.w	ip, r3, r2
 801d756:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d75a:	1a9b      	subs	r3, r3, r2
 801d75c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d760:	ec51 0b10 	vmov	r0, r1, d0
 801d764:	2b00      	cmp	r3, #0
 801d766:	bfd6      	itet	le
 801d768:	460a      	movle	r2, r1
 801d76a:	462a      	movgt	r2, r5
 801d76c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d770:	468b      	mov	fp, r1
 801d772:	462f      	mov	r7, r5
 801d774:	bfd4      	ite	le
 801d776:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d77a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d77e:	4620      	mov	r0, r4
 801d780:	ee10 2a10 	vmov	r2, s0
 801d784:	465b      	mov	r3, fp
 801d786:	4639      	mov	r1, r7
 801d788:	f7e3 f860 	bl	800084c <__aeabi_ddiv>
 801d78c:	ec41 0b10 	vmov	d0, r0, r1
 801d790:	b003      	add	sp, #12
 801d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d796 <__copybits>:
 801d796:	3901      	subs	r1, #1
 801d798:	b570      	push	{r4, r5, r6, lr}
 801d79a:	1149      	asrs	r1, r1, #5
 801d79c:	6914      	ldr	r4, [r2, #16]
 801d79e:	3101      	adds	r1, #1
 801d7a0:	f102 0314 	add.w	r3, r2, #20
 801d7a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d7a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d7ac:	1f05      	subs	r5, r0, #4
 801d7ae:	42a3      	cmp	r3, r4
 801d7b0:	d30c      	bcc.n	801d7cc <__copybits+0x36>
 801d7b2:	1aa3      	subs	r3, r4, r2
 801d7b4:	3b11      	subs	r3, #17
 801d7b6:	f023 0303 	bic.w	r3, r3, #3
 801d7ba:	3211      	adds	r2, #17
 801d7bc:	42a2      	cmp	r2, r4
 801d7be:	bf88      	it	hi
 801d7c0:	2300      	movhi	r3, #0
 801d7c2:	4418      	add	r0, r3
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	4288      	cmp	r0, r1
 801d7c8:	d305      	bcc.n	801d7d6 <__copybits+0x40>
 801d7ca:	bd70      	pop	{r4, r5, r6, pc}
 801d7cc:	f853 6b04 	ldr.w	r6, [r3], #4
 801d7d0:	f845 6f04 	str.w	r6, [r5, #4]!
 801d7d4:	e7eb      	b.n	801d7ae <__copybits+0x18>
 801d7d6:	f840 3b04 	str.w	r3, [r0], #4
 801d7da:	e7f4      	b.n	801d7c6 <__copybits+0x30>

0801d7dc <__any_on>:
 801d7dc:	f100 0214 	add.w	r2, r0, #20
 801d7e0:	6900      	ldr	r0, [r0, #16]
 801d7e2:	114b      	asrs	r3, r1, #5
 801d7e4:	4298      	cmp	r0, r3
 801d7e6:	b510      	push	{r4, lr}
 801d7e8:	db11      	blt.n	801d80e <__any_on+0x32>
 801d7ea:	dd0a      	ble.n	801d802 <__any_on+0x26>
 801d7ec:	f011 011f 	ands.w	r1, r1, #31
 801d7f0:	d007      	beq.n	801d802 <__any_on+0x26>
 801d7f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d7f6:	fa24 f001 	lsr.w	r0, r4, r1
 801d7fa:	fa00 f101 	lsl.w	r1, r0, r1
 801d7fe:	428c      	cmp	r4, r1
 801d800:	d10b      	bne.n	801d81a <__any_on+0x3e>
 801d802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d806:	4293      	cmp	r3, r2
 801d808:	d803      	bhi.n	801d812 <__any_on+0x36>
 801d80a:	2000      	movs	r0, #0
 801d80c:	bd10      	pop	{r4, pc}
 801d80e:	4603      	mov	r3, r0
 801d810:	e7f7      	b.n	801d802 <__any_on+0x26>
 801d812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d816:	2900      	cmp	r1, #0
 801d818:	d0f5      	beq.n	801d806 <__any_on+0x2a>
 801d81a:	2001      	movs	r0, #1
 801d81c:	e7f6      	b.n	801d80c <__any_on+0x30>

0801d81e <_calloc_r>:
 801d81e:	b513      	push	{r0, r1, r4, lr}
 801d820:	434a      	muls	r2, r1
 801d822:	4611      	mov	r1, r2
 801d824:	9201      	str	r2, [sp, #4]
 801d826:	f7fc fa79 	bl	8019d1c <_malloc_r>
 801d82a:	4604      	mov	r4, r0
 801d82c:	b118      	cbz	r0, 801d836 <_calloc_r+0x18>
 801d82e:	9a01      	ldr	r2, [sp, #4]
 801d830:	2100      	movs	r1, #0
 801d832:	f7fc fa1b 	bl	8019c6c <memset>
 801d836:	4620      	mov	r0, r4
 801d838:	b002      	add	sp, #8
 801d83a:	bd10      	pop	{r4, pc}

0801d83c <_realloc_r>:
 801d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d83e:	4607      	mov	r7, r0
 801d840:	4614      	mov	r4, r2
 801d842:	460e      	mov	r6, r1
 801d844:	b921      	cbnz	r1, 801d850 <_realloc_r+0x14>
 801d846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d84a:	4611      	mov	r1, r2
 801d84c:	f7fc ba66 	b.w	8019d1c <_malloc_r>
 801d850:	b922      	cbnz	r2, 801d85c <_realloc_r+0x20>
 801d852:	f7fc fa13 	bl	8019c7c <_free_r>
 801d856:	4625      	mov	r5, r4
 801d858:	4628      	mov	r0, r5
 801d85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d85c:	f000 fbbc 	bl	801dfd8 <_malloc_usable_size_r>
 801d860:	42a0      	cmp	r0, r4
 801d862:	d20f      	bcs.n	801d884 <_realloc_r+0x48>
 801d864:	4621      	mov	r1, r4
 801d866:	4638      	mov	r0, r7
 801d868:	f7fc fa58 	bl	8019d1c <_malloc_r>
 801d86c:	4605      	mov	r5, r0
 801d86e:	2800      	cmp	r0, #0
 801d870:	d0f2      	beq.n	801d858 <_realloc_r+0x1c>
 801d872:	4631      	mov	r1, r6
 801d874:	4622      	mov	r2, r4
 801d876:	f7fc f9eb 	bl	8019c50 <memcpy>
 801d87a:	4631      	mov	r1, r6
 801d87c:	4638      	mov	r0, r7
 801d87e:	f7fc f9fd 	bl	8019c7c <_free_r>
 801d882:	e7e9      	b.n	801d858 <_realloc_r+0x1c>
 801d884:	4635      	mov	r5, r6
 801d886:	e7e7      	b.n	801d858 <_realloc_r+0x1c>

0801d888 <__ssputs_r>:
 801d888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d88c:	688e      	ldr	r6, [r1, #8]
 801d88e:	429e      	cmp	r6, r3
 801d890:	4682      	mov	sl, r0
 801d892:	460c      	mov	r4, r1
 801d894:	4690      	mov	r8, r2
 801d896:	461f      	mov	r7, r3
 801d898:	d838      	bhi.n	801d90c <__ssputs_r+0x84>
 801d89a:	898a      	ldrh	r2, [r1, #12]
 801d89c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d8a0:	d032      	beq.n	801d908 <__ssputs_r+0x80>
 801d8a2:	6825      	ldr	r5, [r4, #0]
 801d8a4:	6909      	ldr	r1, [r1, #16]
 801d8a6:	eba5 0901 	sub.w	r9, r5, r1
 801d8aa:	6965      	ldr	r5, [r4, #20]
 801d8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d8b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d8b4:	3301      	adds	r3, #1
 801d8b6:	444b      	add	r3, r9
 801d8b8:	106d      	asrs	r5, r5, #1
 801d8ba:	429d      	cmp	r5, r3
 801d8bc:	bf38      	it	cc
 801d8be:	461d      	movcc	r5, r3
 801d8c0:	0553      	lsls	r3, r2, #21
 801d8c2:	d531      	bpl.n	801d928 <__ssputs_r+0xa0>
 801d8c4:	4629      	mov	r1, r5
 801d8c6:	f7fc fa29 	bl	8019d1c <_malloc_r>
 801d8ca:	4606      	mov	r6, r0
 801d8cc:	b950      	cbnz	r0, 801d8e4 <__ssputs_r+0x5c>
 801d8ce:	230c      	movs	r3, #12
 801d8d0:	f8ca 3000 	str.w	r3, [sl]
 801d8d4:	89a3      	ldrh	r3, [r4, #12]
 801d8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8da:	81a3      	strh	r3, [r4, #12]
 801d8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8e4:	6921      	ldr	r1, [r4, #16]
 801d8e6:	464a      	mov	r2, r9
 801d8e8:	f7fc f9b2 	bl	8019c50 <memcpy>
 801d8ec:	89a3      	ldrh	r3, [r4, #12]
 801d8ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8f6:	81a3      	strh	r3, [r4, #12]
 801d8f8:	6126      	str	r6, [r4, #16]
 801d8fa:	6165      	str	r5, [r4, #20]
 801d8fc:	444e      	add	r6, r9
 801d8fe:	eba5 0509 	sub.w	r5, r5, r9
 801d902:	6026      	str	r6, [r4, #0]
 801d904:	60a5      	str	r5, [r4, #8]
 801d906:	463e      	mov	r6, r7
 801d908:	42be      	cmp	r6, r7
 801d90a:	d900      	bls.n	801d90e <__ssputs_r+0x86>
 801d90c:	463e      	mov	r6, r7
 801d90e:	4632      	mov	r2, r6
 801d910:	6820      	ldr	r0, [r4, #0]
 801d912:	4641      	mov	r1, r8
 801d914:	f000 fb46 	bl	801dfa4 <memmove>
 801d918:	68a3      	ldr	r3, [r4, #8]
 801d91a:	6822      	ldr	r2, [r4, #0]
 801d91c:	1b9b      	subs	r3, r3, r6
 801d91e:	4432      	add	r2, r6
 801d920:	60a3      	str	r3, [r4, #8]
 801d922:	6022      	str	r2, [r4, #0]
 801d924:	2000      	movs	r0, #0
 801d926:	e7db      	b.n	801d8e0 <__ssputs_r+0x58>
 801d928:	462a      	mov	r2, r5
 801d92a:	f7ff ff87 	bl	801d83c <_realloc_r>
 801d92e:	4606      	mov	r6, r0
 801d930:	2800      	cmp	r0, #0
 801d932:	d1e1      	bne.n	801d8f8 <__ssputs_r+0x70>
 801d934:	6921      	ldr	r1, [r4, #16]
 801d936:	4650      	mov	r0, sl
 801d938:	f7fc f9a0 	bl	8019c7c <_free_r>
 801d93c:	e7c7      	b.n	801d8ce <__ssputs_r+0x46>
	...

0801d940 <_svfiprintf_r>:
 801d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d944:	4698      	mov	r8, r3
 801d946:	898b      	ldrh	r3, [r1, #12]
 801d948:	061b      	lsls	r3, r3, #24
 801d94a:	b09d      	sub	sp, #116	; 0x74
 801d94c:	4607      	mov	r7, r0
 801d94e:	460d      	mov	r5, r1
 801d950:	4614      	mov	r4, r2
 801d952:	d50e      	bpl.n	801d972 <_svfiprintf_r+0x32>
 801d954:	690b      	ldr	r3, [r1, #16]
 801d956:	b963      	cbnz	r3, 801d972 <_svfiprintf_r+0x32>
 801d958:	2140      	movs	r1, #64	; 0x40
 801d95a:	f7fc f9df 	bl	8019d1c <_malloc_r>
 801d95e:	6028      	str	r0, [r5, #0]
 801d960:	6128      	str	r0, [r5, #16]
 801d962:	b920      	cbnz	r0, 801d96e <_svfiprintf_r+0x2e>
 801d964:	230c      	movs	r3, #12
 801d966:	603b      	str	r3, [r7, #0]
 801d968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d96c:	e0d1      	b.n	801db12 <_svfiprintf_r+0x1d2>
 801d96e:	2340      	movs	r3, #64	; 0x40
 801d970:	616b      	str	r3, [r5, #20]
 801d972:	2300      	movs	r3, #0
 801d974:	9309      	str	r3, [sp, #36]	; 0x24
 801d976:	2320      	movs	r3, #32
 801d978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d97c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d980:	2330      	movs	r3, #48	; 0x30
 801d982:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801db2c <_svfiprintf_r+0x1ec>
 801d986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d98a:	f04f 0901 	mov.w	r9, #1
 801d98e:	4623      	mov	r3, r4
 801d990:	469a      	mov	sl, r3
 801d992:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d996:	b10a      	cbz	r2, 801d99c <_svfiprintf_r+0x5c>
 801d998:	2a25      	cmp	r2, #37	; 0x25
 801d99a:	d1f9      	bne.n	801d990 <_svfiprintf_r+0x50>
 801d99c:	ebba 0b04 	subs.w	fp, sl, r4
 801d9a0:	d00b      	beq.n	801d9ba <_svfiprintf_r+0x7a>
 801d9a2:	465b      	mov	r3, fp
 801d9a4:	4622      	mov	r2, r4
 801d9a6:	4629      	mov	r1, r5
 801d9a8:	4638      	mov	r0, r7
 801d9aa:	f7ff ff6d 	bl	801d888 <__ssputs_r>
 801d9ae:	3001      	adds	r0, #1
 801d9b0:	f000 80aa 	beq.w	801db08 <_svfiprintf_r+0x1c8>
 801d9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9b6:	445a      	add	r2, fp
 801d9b8:	9209      	str	r2, [sp, #36]	; 0x24
 801d9ba:	f89a 3000 	ldrb.w	r3, [sl]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f000 80a2 	beq.w	801db08 <_svfiprintf_r+0x1c8>
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9ce:	f10a 0a01 	add.w	sl, sl, #1
 801d9d2:	9304      	str	r3, [sp, #16]
 801d9d4:	9307      	str	r3, [sp, #28]
 801d9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d9da:	931a      	str	r3, [sp, #104]	; 0x68
 801d9dc:	4654      	mov	r4, sl
 801d9de:	2205      	movs	r2, #5
 801d9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9e4:	4851      	ldr	r0, [pc, #324]	; (801db2c <_svfiprintf_r+0x1ec>)
 801d9e6:	f7e2 fbfb 	bl	80001e0 <memchr>
 801d9ea:	9a04      	ldr	r2, [sp, #16]
 801d9ec:	b9d8      	cbnz	r0, 801da26 <_svfiprintf_r+0xe6>
 801d9ee:	06d0      	lsls	r0, r2, #27
 801d9f0:	bf44      	itt	mi
 801d9f2:	2320      	movmi	r3, #32
 801d9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9f8:	0711      	lsls	r1, r2, #28
 801d9fa:	bf44      	itt	mi
 801d9fc:	232b      	movmi	r3, #43	; 0x2b
 801d9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da02:	f89a 3000 	ldrb.w	r3, [sl]
 801da06:	2b2a      	cmp	r3, #42	; 0x2a
 801da08:	d015      	beq.n	801da36 <_svfiprintf_r+0xf6>
 801da0a:	9a07      	ldr	r2, [sp, #28]
 801da0c:	4654      	mov	r4, sl
 801da0e:	2000      	movs	r0, #0
 801da10:	f04f 0c0a 	mov.w	ip, #10
 801da14:	4621      	mov	r1, r4
 801da16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da1a:	3b30      	subs	r3, #48	; 0x30
 801da1c:	2b09      	cmp	r3, #9
 801da1e:	d94e      	bls.n	801dabe <_svfiprintf_r+0x17e>
 801da20:	b1b0      	cbz	r0, 801da50 <_svfiprintf_r+0x110>
 801da22:	9207      	str	r2, [sp, #28]
 801da24:	e014      	b.n	801da50 <_svfiprintf_r+0x110>
 801da26:	eba0 0308 	sub.w	r3, r0, r8
 801da2a:	fa09 f303 	lsl.w	r3, r9, r3
 801da2e:	4313      	orrs	r3, r2
 801da30:	9304      	str	r3, [sp, #16]
 801da32:	46a2      	mov	sl, r4
 801da34:	e7d2      	b.n	801d9dc <_svfiprintf_r+0x9c>
 801da36:	9b03      	ldr	r3, [sp, #12]
 801da38:	1d19      	adds	r1, r3, #4
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	9103      	str	r1, [sp, #12]
 801da3e:	2b00      	cmp	r3, #0
 801da40:	bfbb      	ittet	lt
 801da42:	425b      	neglt	r3, r3
 801da44:	f042 0202 	orrlt.w	r2, r2, #2
 801da48:	9307      	strge	r3, [sp, #28]
 801da4a:	9307      	strlt	r3, [sp, #28]
 801da4c:	bfb8      	it	lt
 801da4e:	9204      	strlt	r2, [sp, #16]
 801da50:	7823      	ldrb	r3, [r4, #0]
 801da52:	2b2e      	cmp	r3, #46	; 0x2e
 801da54:	d10c      	bne.n	801da70 <_svfiprintf_r+0x130>
 801da56:	7863      	ldrb	r3, [r4, #1]
 801da58:	2b2a      	cmp	r3, #42	; 0x2a
 801da5a:	d135      	bne.n	801dac8 <_svfiprintf_r+0x188>
 801da5c:	9b03      	ldr	r3, [sp, #12]
 801da5e:	1d1a      	adds	r2, r3, #4
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	9203      	str	r2, [sp, #12]
 801da64:	2b00      	cmp	r3, #0
 801da66:	bfb8      	it	lt
 801da68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801da6c:	3402      	adds	r4, #2
 801da6e:	9305      	str	r3, [sp, #20]
 801da70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801db3c <_svfiprintf_r+0x1fc>
 801da74:	7821      	ldrb	r1, [r4, #0]
 801da76:	2203      	movs	r2, #3
 801da78:	4650      	mov	r0, sl
 801da7a:	f7e2 fbb1 	bl	80001e0 <memchr>
 801da7e:	b140      	cbz	r0, 801da92 <_svfiprintf_r+0x152>
 801da80:	2340      	movs	r3, #64	; 0x40
 801da82:	eba0 000a 	sub.w	r0, r0, sl
 801da86:	fa03 f000 	lsl.w	r0, r3, r0
 801da8a:	9b04      	ldr	r3, [sp, #16]
 801da8c:	4303      	orrs	r3, r0
 801da8e:	3401      	adds	r4, #1
 801da90:	9304      	str	r3, [sp, #16]
 801da92:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da96:	4826      	ldr	r0, [pc, #152]	; (801db30 <_svfiprintf_r+0x1f0>)
 801da98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da9c:	2206      	movs	r2, #6
 801da9e:	f7e2 fb9f 	bl	80001e0 <memchr>
 801daa2:	2800      	cmp	r0, #0
 801daa4:	d038      	beq.n	801db18 <_svfiprintf_r+0x1d8>
 801daa6:	4b23      	ldr	r3, [pc, #140]	; (801db34 <_svfiprintf_r+0x1f4>)
 801daa8:	bb1b      	cbnz	r3, 801daf2 <_svfiprintf_r+0x1b2>
 801daaa:	9b03      	ldr	r3, [sp, #12]
 801daac:	3307      	adds	r3, #7
 801daae:	f023 0307 	bic.w	r3, r3, #7
 801dab2:	3308      	adds	r3, #8
 801dab4:	9303      	str	r3, [sp, #12]
 801dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dab8:	4433      	add	r3, r6
 801daba:	9309      	str	r3, [sp, #36]	; 0x24
 801dabc:	e767      	b.n	801d98e <_svfiprintf_r+0x4e>
 801dabe:	fb0c 3202 	mla	r2, ip, r2, r3
 801dac2:	460c      	mov	r4, r1
 801dac4:	2001      	movs	r0, #1
 801dac6:	e7a5      	b.n	801da14 <_svfiprintf_r+0xd4>
 801dac8:	2300      	movs	r3, #0
 801daca:	3401      	adds	r4, #1
 801dacc:	9305      	str	r3, [sp, #20]
 801dace:	4619      	mov	r1, r3
 801dad0:	f04f 0c0a 	mov.w	ip, #10
 801dad4:	4620      	mov	r0, r4
 801dad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dada:	3a30      	subs	r2, #48	; 0x30
 801dadc:	2a09      	cmp	r2, #9
 801dade:	d903      	bls.n	801dae8 <_svfiprintf_r+0x1a8>
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d0c5      	beq.n	801da70 <_svfiprintf_r+0x130>
 801dae4:	9105      	str	r1, [sp, #20]
 801dae6:	e7c3      	b.n	801da70 <_svfiprintf_r+0x130>
 801dae8:	fb0c 2101 	mla	r1, ip, r1, r2
 801daec:	4604      	mov	r4, r0
 801daee:	2301      	movs	r3, #1
 801daf0:	e7f0      	b.n	801dad4 <_svfiprintf_r+0x194>
 801daf2:	ab03      	add	r3, sp, #12
 801daf4:	9300      	str	r3, [sp, #0]
 801daf6:	462a      	mov	r2, r5
 801daf8:	4b0f      	ldr	r3, [pc, #60]	; (801db38 <_svfiprintf_r+0x1f8>)
 801dafa:	a904      	add	r1, sp, #16
 801dafc:	4638      	mov	r0, r7
 801dafe:	f7fc fa07 	bl	8019f10 <_printf_float>
 801db02:	1c42      	adds	r2, r0, #1
 801db04:	4606      	mov	r6, r0
 801db06:	d1d6      	bne.n	801dab6 <_svfiprintf_r+0x176>
 801db08:	89ab      	ldrh	r3, [r5, #12]
 801db0a:	065b      	lsls	r3, r3, #25
 801db0c:	f53f af2c 	bmi.w	801d968 <_svfiprintf_r+0x28>
 801db10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db12:	b01d      	add	sp, #116	; 0x74
 801db14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db18:	ab03      	add	r3, sp, #12
 801db1a:	9300      	str	r3, [sp, #0]
 801db1c:	462a      	mov	r2, r5
 801db1e:	4b06      	ldr	r3, [pc, #24]	; (801db38 <_svfiprintf_r+0x1f8>)
 801db20:	a904      	add	r1, sp, #16
 801db22:	4638      	mov	r0, r7
 801db24:	f7fc fc98 	bl	801a458 <_printf_i>
 801db28:	e7eb      	b.n	801db02 <_svfiprintf_r+0x1c2>
 801db2a:	bf00      	nop
 801db2c:	080206f4 	.word	0x080206f4
 801db30:	080206fe 	.word	0x080206fe
 801db34:	08019f11 	.word	0x08019f11
 801db38:	0801d889 	.word	0x0801d889
 801db3c:	080206fa 	.word	0x080206fa

0801db40 <_read_r>:
 801db40:	b538      	push	{r3, r4, r5, lr}
 801db42:	4d07      	ldr	r5, [pc, #28]	; (801db60 <_read_r+0x20>)
 801db44:	4604      	mov	r4, r0
 801db46:	4608      	mov	r0, r1
 801db48:	4611      	mov	r1, r2
 801db4a:	2200      	movs	r2, #0
 801db4c:	602a      	str	r2, [r5, #0]
 801db4e:	461a      	mov	r2, r3
 801db50:	f7ef f9b4 	bl	800cebc <_read>
 801db54:	1c43      	adds	r3, r0, #1
 801db56:	d102      	bne.n	801db5e <_read_r+0x1e>
 801db58:	682b      	ldr	r3, [r5, #0]
 801db5a:	b103      	cbz	r3, 801db5e <_read_r+0x1e>
 801db5c:	6023      	str	r3, [r4, #0]
 801db5e:	bd38      	pop	{r3, r4, r5, pc}
 801db60:	2000a6d4 	.word	0x2000a6d4
 801db64:	00000000 	.word	0x00000000

0801db68 <nan>:
 801db68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801db70 <nan+0x8>
 801db6c:	4770      	bx	lr
 801db6e:	bf00      	nop
 801db70:	00000000 	.word	0x00000000
 801db74:	7ff80000 	.word	0x7ff80000

0801db78 <finitef>:
 801db78:	b082      	sub	sp, #8
 801db7a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801db7e:	9801      	ldr	r0, [sp, #4]
 801db80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801db84:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801db88:	bfac      	ite	ge
 801db8a:	2000      	movge	r0, #0
 801db8c:	2001      	movlt	r0, #1
 801db8e:	b002      	add	sp, #8
 801db90:	4770      	bx	lr

0801db92 <strncmp>:
 801db92:	b510      	push	{r4, lr}
 801db94:	b16a      	cbz	r2, 801dbb2 <strncmp+0x20>
 801db96:	3901      	subs	r1, #1
 801db98:	1884      	adds	r4, r0, r2
 801db9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801db9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dba2:	4293      	cmp	r3, r2
 801dba4:	d103      	bne.n	801dbae <strncmp+0x1c>
 801dba6:	42a0      	cmp	r0, r4
 801dba8:	d001      	beq.n	801dbae <strncmp+0x1c>
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d1f5      	bne.n	801db9a <strncmp+0x8>
 801dbae:	1a98      	subs	r0, r3, r2
 801dbb0:	bd10      	pop	{r4, pc}
 801dbb2:	4610      	mov	r0, r2
 801dbb4:	e7fc      	b.n	801dbb0 <strncmp+0x1e>

0801dbb6 <__ascii_wctomb>:
 801dbb6:	b149      	cbz	r1, 801dbcc <__ascii_wctomb+0x16>
 801dbb8:	2aff      	cmp	r2, #255	; 0xff
 801dbba:	bf85      	ittet	hi
 801dbbc:	238a      	movhi	r3, #138	; 0x8a
 801dbbe:	6003      	strhi	r3, [r0, #0]
 801dbc0:	700a      	strbls	r2, [r1, #0]
 801dbc2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801dbc6:	bf98      	it	ls
 801dbc8:	2001      	movls	r0, #1
 801dbca:	4770      	bx	lr
 801dbcc:	4608      	mov	r0, r1
 801dbce:	4770      	bx	lr

0801dbd0 <__assert_func>:
 801dbd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dbd2:	4614      	mov	r4, r2
 801dbd4:	461a      	mov	r2, r3
 801dbd6:	4b09      	ldr	r3, [pc, #36]	; (801dbfc <__assert_func+0x2c>)
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	4605      	mov	r5, r0
 801dbdc:	68d8      	ldr	r0, [r3, #12]
 801dbde:	b14c      	cbz	r4, 801dbf4 <__assert_func+0x24>
 801dbe0:	4b07      	ldr	r3, [pc, #28]	; (801dc00 <__assert_func+0x30>)
 801dbe2:	9100      	str	r1, [sp, #0]
 801dbe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dbe8:	4906      	ldr	r1, [pc, #24]	; (801dc04 <__assert_func+0x34>)
 801dbea:	462b      	mov	r3, r5
 801dbec:	f000 f9a6 	bl	801df3c <fiprintf>
 801dbf0:	f000 fc14 	bl	801e41c <abort>
 801dbf4:	4b04      	ldr	r3, [pc, #16]	; (801dc08 <__assert_func+0x38>)
 801dbf6:	461c      	mov	r4, r3
 801dbf8:	e7f3      	b.n	801dbe2 <__assert_func+0x12>
 801dbfa:	bf00      	nop
 801dbfc:	200000c4 	.word	0x200000c4
 801dc00:	08020705 	.word	0x08020705
 801dc04:	08020712 	.word	0x08020712
 801dc08:	08020740 	.word	0x08020740

0801dc0c <__sflush_r>:
 801dc0c:	898a      	ldrh	r2, [r1, #12]
 801dc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc12:	4605      	mov	r5, r0
 801dc14:	0710      	lsls	r0, r2, #28
 801dc16:	460c      	mov	r4, r1
 801dc18:	d458      	bmi.n	801dccc <__sflush_r+0xc0>
 801dc1a:	684b      	ldr	r3, [r1, #4]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	dc05      	bgt.n	801dc2c <__sflush_r+0x20>
 801dc20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	dc02      	bgt.n	801dc2c <__sflush_r+0x20>
 801dc26:	2000      	movs	r0, #0
 801dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc2e:	2e00      	cmp	r6, #0
 801dc30:	d0f9      	beq.n	801dc26 <__sflush_r+0x1a>
 801dc32:	2300      	movs	r3, #0
 801dc34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc38:	682f      	ldr	r7, [r5, #0]
 801dc3a:	602b      	str	r3, [r5, #0]
 801dc3c:	d032      	beq.n	801dca4 <__sflush_r+0x98>
 801dc3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc40:	89a3      	ldrh	r3, [r4, #12]
 801dc42:	075a      	lsls	r2, r3, #29
 801dc44:	d505      	bpl.n	801dc52 <__sflush_r+0x46>
 801dc46:	6863      	ldr	r3, [r4, #4]
 801dc48:	1ac0      	subs	r0, r0, r3
 801dc4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc4c:	b10b      	cbz	r3, 801dc52 <__sflush_r+0x46>
 801dc4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc50:	1ac0      	subs	r0, r0, r3
 801dc52:	2300      	movs	r3, #0
 801dc54:	4602      	mov	r2, r0
 801dc56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc58:	6a21      	ldr	r1, [r4, #32]
 801dc5a:	4628      	mov	r0, r5
 801dc5c:	47b0      	blx	r6
 801dc5e:	1c43      	adds	r3, r0, #1
 801dc60:	89a3      	ldrh	r3, [r4, #12]
 801dc62:	d106      	bne.n	801dc72 <__sflush_r+0x66>
 801dc64:	6829      	ldr	r1, [r5, #0]
 801dc66:	291d      	cmp	r1, #29
 801dc68:	d82c      	bhi.n	801dcc4 <__sflush_r+0xb8>
 801dc6a:	4a2a      	ldr	r2, [pc, #168]	; (801dd14 <__sflush_r+0x108>)
 801dc6c:	40ca      	lsrs	r2, r1
 801dc6e:	07d6      	lsls	r6, r2, #31
 801dc70:	d528      	bpl.n	801dcc4 <__sflush_r+0xb8>
 801dc72:	2200      	movs	r2, #0
 801dc74:	6062      	str	r2, [r4, #4]
 801dc76:	04d9      	lsls	r1, r3, #19
 801dc78:	6922      	ldr	r2, [r4, #16]
 801dc7a:	6022      	str	r2, [r4, #0]
 801dc7c:	d504      	bpl.n	801dc88 <__sflush_r+0x7c>
 801dc7e:	1c42      	adds	r2, r0, #1
 801dc80:	d101      	bne.n	801dc86 <__sflush_r+0x7a>
 801dc82:	682b      	ldr	r3, [r5, #0]
 801dc84:	b903      	cbnz	r3, 801dc88 <__sflush_r+0x7c>
 801dc86:	6560      	str	r0, [r4, #84]	; 0x54
 801dc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc8a:	602f      	str	r7, [r5, #0]
 801dc8c:	2900      	cmp	r1, #0
 801dc8e:	d0ca      	beq.n	801dc26 <__sflush_r+0x1a>
 801dc90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc94:	4299      	cmp	r1, r3
 801dc96:	d002      	beq.n	801dc9e <__sflush_r+0x92>
 801dc98:	4628      	mov	r0, r5
 801dc9a:	f7fb ffef 	bl	8019c7c <_free_r>
 801dc9e:	2000      	movs	r0, #0
 801dca0:	6360      	str	r0, [r4, #52]	; 0x34
 801dca2:	e7c1      	b.n	801dc28 <__sflush_r+0x1c>
 801dca4:	6a21      	ldr	r1, [r4, #32]
 801dca6:	2301      	movs	r3, #1
 801dca8:	4628      	mov	r0, r5
 801dcaa:	47b0      	blx	r6
 801dcac:	1c41      	adds	r1, r0, #1
 801dcae:	d1c7      	bne.n	801dc40 <__sflush_r+0x34>
 801dcb0:	682b      	ldr	r3, [r5, #0]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d0c4      	beq.n	801dc40 <__sflush_r+0x34>
 801dcb6:	2b1d      	cmp	r3, #29
 801dcb8:	d001      	beq.n	801dcbe <__sflush_r+0xb2>
 801dcba:	2b16      	cmp	r3, #22
 801dcbc:	d101      	bne.n	801dcc2 <__sflush_r+0xb6>
 801dcbe:	602f      	str	r7, [r5, #0]
 801dcc0:	e7b1      	b.n	801dc26 <__sflush_r+0x1a>
 801dcc2:	89a3      	ldrh	r3, [r4, #12]
 801dcc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcc8:	81a3      	strh	r3, [r4, #12]
 801dcca:	e7ad      	b.n	801dc28 <__sflush_r+0x1c>
 801dccc:	690f      	ldr	r7, [r1, #16]
 801dcce:	2f00      	cmp	r7, #0
 801dcd0:	d0a9      	beq.n	801dc26 <__sflush_r+0x1a>
 801dcd2:	0793      	lsls	r3, r2, #30
 801dcd4:	680e      	ldr	r6, [r1, #0]
 801dcd6:	bf08      	it	eq
 801dcd8:	694b      	ldreq	r3, [r1, #20]
 801dcda:	600f      	str	r7, [r1, #0]
 801dcdc:	bf18      	it	ne
 801dcde:	2300      	movne	r3, #0
 801dce0:	eba6 0807 	sub.w	r8, r6, r7
 801dce4:	608b      	str	r3, [r1, #8]
 801dce6:	f1b8 0f00 	cmp.w	r8, #0
 801dcea:	dd9c      	ble.n	801dc26 <__sflush_r+0x1a>
 801dcec:	6a21      	ldr	r1, [r4, #32]
 801dcee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dcf0:	4643      	mov	r3, r8
 801dcf2:	463a      	mov	r2, r7
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	47b0      	blx	r6
 801dcf8:	2800      	cmp	r0, #0
 801dcfa:	dc06      	bgt.n	801dd0a <__sflush_r+0xfe>
 801dcfc:	89a3      	ldrh	r3, [r4, #12]
 801dcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd02:	81a3      	strh	r3, [r4, #12]
 801dd04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd08:	e78e      	b.n	801dc28 <__sflush_r+0x1c>
 801dd0a:	4407      	add	r7, r0
 801dd0c:	eba8 0800 	sub.w	r8, r8, r0
 801dd10:	e7e9      	b.n	801dce6 <__sflush_r+0xda>
 801dd12:	bf00      	nop
 801dd14:	20400001 	.word	0x20400001

0801dd18 <_fflush_r>:
 801dd18:	b538      	push	{r3, r4, r5, lr}
 801dd1a:	690b      	ldr	r3, [r1, #16]
 801dd1c:	4605      	mov	r5, r0
 801dd1e:	460c      	mov	r4, r1
 801dd20:	b913      	cbnz	r3, 801dd28 <_fflush_r+0x10>
 801dd22:	2500      	movs	r5, #0
 801dd24:	4628      	mov	r0, r5
 801dd26:	bd38      	pop	{r3, r4, r5, pc}
 801dd28:	b118      	cbz	r0, 801dd32 <_fflush_r+0x1a>
 801dd2a:	6983      	ldr	r3, [r0, #24]
 801dd2c:	b90b      	cbnz	r3, 801dd32 <_fflush_r+0x1a>
 801dd2e:	f000 f887 	bl	801de40 <__sinit>
 801dd32:	4b14      	ldr	r3, [pc, #80]	; (801dd84 <_fflush_r+0x6c>)
 801dd34:	429c      	cmp	r4, r3
 801dd36:	d11b      	bne.n	801dd70 <_fflush_r+0x58>
 801dd38:	686c      	ldr	r4, [r5, #4]
 801dd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d0ef      	beq.n	801dd22 <_fflush_r+0xa>
 801dd42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd44:	07d0      	lsls	r0, r2, #31
 801dd46:	d404      	bmi.n	801dd52 <_fflush_r+0x3a>
 801dd48:	0599      	lsls	r1, r3, #22
 801dd4a:	d402      	bmi.n	801dd52 <_fflush_r+0x3a>
 801dd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd4e:	f000 f927 	bl	801dfa0 <__retarget_lock_acquire_recursive>
 801dd52:	4628      	mov	r0, r5
 801dd54:	4621      	mov	r1, r4
 801dd56:	f7ff ff59 	bl	801dc0c <__sflush_r>
 801dd5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd5c:	07da      	lsls	r2, r3, #31
 801dd5e:	4605      	mov	r5, r0
 801dd60:	d4e0      	bmi.n	801dd24 <_fflush_r+0xc>
 801dd62:	89a3      	ldrh	r3, [r4, #12]
 801dd64:	059b      	lsls	r3, r3, #22
 801dd66:	d4dd      	bmi.n	801dd24 <_fflush_r+0xc>
 801dd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd6a:	f000 f91a 	bl	801dfa2 <__retarget_lock_release_recursive>
 801dd6e:	e7d9      	b.n	801dd24 <_fflush_r+0xc>
 801dd70:	4b05      	ldr	r3, [pc, #20]	; (801dd88 <_fflush_r+0x70>)
 801dd72:	429c      	cmp	r4, r3
 801dd74:	d101      	bne.n	801dd7a <_fflush_r+0x62>
 801dd76:	68ac      	ldr	r4, [r5, #8]
 801dd78:	e7df      	b.n	801dd3a <_fflush_r+0x22>
 801dd7a:	4b04      	ldr	r3, [pc, #16]	; (801dd8c <_fflush_r+0x74>)
 801dd7c:	429c      	cmp	r4, r3
 801dd7e:	bf08      	it	eq
 801dd80:	68ec      	ldreq	r4, [r5, #12]
 801dd82:	e7da      	b.n	801dd3a <_fflush_r+0x22>
 801dd84:	08020764 	.word	0x08020764
 801dd88:	08020784 	.word	0x08020784
 801dd8c:	08020744 	.word	0x08020744

0801dd90 <std>:
 801dd90:	2300      	movs	r3, #0
 801dd92:	b510      	push	{r4, lr}
 801dd94:	4604      	mov	r4, r0
 801dd96:	e9c0 3300 	strd	r3, r3, [r0]
 801dd9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd9e:	6083      	str	r3, [r0, #8]
 801dda0:	8181      	strh	r1, [r0, #12]
 801dda2:	6643      	str	r3, [r0, #100]	; 0x64
 801dda4:	81c2      	strh	r2, [r0, #14]
 801dda6:	6183      	str	r3, [r0, #24]
 801dda8:	4619      	mov	r1, r3
 801ddaa:	2208      	movs	r2, #8
 801ddac:	305c      	adds	r0, #92	; 0x5c
 801ddae:	f7fb ff5d 	bl	8019c6c <memset>
 801ddb2:	4b05      	ldr	r3, [pc, #20]	; (801ddc8 <std+0x38>)
 801ddb4:	6263      	str	r3, [r4, #36]	; 0x24
 801ddb6:	4b05      	ldr	r3, [pc, #20]	; (801ddcc <std+0x3c>)
 801ddb8:	62a3      	str	r3, [r4, #40]	; 0x28
 801ddba:	4b05      	ldr	r3, [pc, #20]	; (801ddd0 <std+0x40>)
 801ddbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ddbe:	4b05      	ldr	r3, [pc, #20]	; (801ddd4 <std+0x44>)
 801ddc0:	6224      	str	r4, [r4, #32]
 801ddc2:	6323      	str	r3, [r4, #48]	; 0x30
 801ddc4:	bd10      	pop	{r4, pc}
 801ddc6:	bf00      	nop
 801ddc8:	0801ac25 	.word	0x0801ac25
 801ddcc:	0801ac47 	.word	0x0801ac47
 801ddd0:	0801ac7f 	.word	0x0801ac7f
 801ddd4:	0801aca3 	.word	0x0801aca3

0801ddd8 <_cleanup_r>:
 801ddd8:	4901      	ldr	r1, [pc, #4]	; (801dde0 <_cleanup_r+0x8>)
 801ddda:	f000 b8c1 	b.w	801df60 <_fwalk_reent>
 801ddde:	bf00      	nop
 801dde0:	0801dd19 	.word	0x0801dd19

0801dde4 <__sfmoreglue>:
 801dde4:	b570      	push	{r4, r5, r6, lr}
 801dde6:	1e4a      	subs	r2, r1, #1
 801dde8:	2568      	movs	r5, #104	; 0x68
 801ddea:	4355      	muls	r5, r2
 801ddec:	460e      	mov	r6, r1
 801ddee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ddf2:	f7fb ff93 	bl	8019d1c <_malloc_r>
 801ddf6:	4604      	mov	r4, r0
 801ddf8:	b140      	cbz	r0, 801de0c <__sfmoreglue+0x28>
 801ddfa:	2100      	movs	r1, #0
 801ddfc:	e9c0 1600 	strd	r1, r6, [r0]
 801de00:	300c      	adds	r0, #12
 801de02:	60a0      	str	r0, [r4, #8]
 801de04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de08:	f7fb ff30 	bl	8019c6c <memset>
 801de0c:	4620      	mov	r0, r4
 801de0e:	bd70      	pop	{r4, r5, r6, pc}

0801de10 <__sfp_lock_acquire>:
 801de10:	4801      	ldr	r0, [pc, #4]	; (801de18 <__sfp_lock_acquire+0x8>)
 801de12:	f000 b8c5 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801de16:	bf00      	nop
 801de18:	2000a6e0 	.word	0x2000a6e0

0801de1c <__sfp_lock_release>:
 801de1c:	4801      	ldr	r0, [pc, #4]	; (801de24 <__sfp_lock_release+0x8>)
 801de1e:	f000 b8c0 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801de22:	bf00      	nop
 801de24:	2000a6e0 	.word	0x2000a6e0

0801de28 <__sinit_lock_acquire>:
 801de28:	4801      	ldr	r0, [pc, #4]	; (801de30 <__sinit_lock_acquire+0x8>)
 801de2a:	f000 b8b9 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801de2e:	bf00      	nop
 801de30:	2000a6db 	.word	0x2000a6db

0801de34 <__sinit_lock_release>:
 801de34:	4801      	ldr	r0, [pc, #4]	; (801de3c <__sinit_lock_release+0x8>)
 801de36:	f000 b8b4 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801de3a:	bf00      	nop
 801de3c:	2000a6db 	.word	0x2000a6db

0801de40 <__sinit>:
 801de40:	b510      	push	{r4, lr}
 801de42:	4604      	mov	r4, r0
 801de44:	f7ff fff0 	bl	801de28 <__sinit_lock_acquire>
 801de48:	69a3      	ldr	r3, [r4, #24]
 801de4a:	b11b      	cbz	r3, 801de54 <__sinit+0x14>
 801de4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de50:	f7ff bff0 	b.w	801de34 <__sinit_lock_release>
 801de54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de58:	6523      	str	r3, [r4, #80]	; 0x50
 801de5a:	4b13      	ldr	r3, [pc, #76]	; (801dea8 <__sinit+0x68>)
 801de5c:	4a13      	ldr	r2, [pc, #76]	; (801deac <__sinit+0x6c>)
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	62a2      	str	r2, [r4, #40]	; 0x28
 801de62:	42a3      	cmp	r3, r4
 801de64:	bf04      	itt	eq
 801de66:	2301      	moveq	r3, #1
 801de68:	61a3      	streq	r3, [r4, #24]
 801de6a:	4620      	mov	r0, r4
 801de6c:	f000 f820 	bl	801deb0 <__sfp>
 801de70:	6060      	str	r0, [r4, #4]
 801de72:	4620      	mov	r0, r4
 801de74:	f000 f81c 	bl	801deb0 <__sfp>
 801de78:	60a0      	str	r0, [r4, #8]
 801de7a:	4620      	mov	r0, r4
 801de7c:	f000 f818 	bl	801deb0 <__sfp>
 801de80:	2200      	movs	r2, #0
 801de82:	60e0      	str	r0, [r4, #12]
 801de84:	2104      	movs	r1, #4
 801de86:	6860      	ldr	r0, [r4, #4]
 801de88:	f7ff ff82 	bl	801dd90 <std>
 801de8c:	68a0      	ldr	r0, [r4, #8]
 801de8e:	2201      	movs	r2, #1
 801de90:	2109      	movs	r1, #9
 801de92:	f7ff ff7d 	bl	801dd90 <std>
 801de96:	68e0      	ldr	r0, [r4, #12]
 801de98:	2202      	movs	r2, #2
 801de9a:	2112      	movs	r1, #18
 801de9c:	f7ff ff78 	bl	801dd90 <std>
 801dea0:	2301      	movs	r3, #1
 801dea2:	61a3      	str	r3, [r4, #24]
 801dea4:	e7d2      	b.n	801de4c <__sinit+0xc>
 801dea6:	bf00      	nop
 801dea8:	080202f0 	.word	0x080202f0
 801deac:	0801ddd9 	.word	0x0801ddd9

0801deb0 <__sfp>:
 801deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb2:	4607      	mov	r7, r0
 801deb4:	f7ff ffac 	bl	801de10 <__sfp_lock_acquire>
 801deb8:	4b1e      	ldr	r3, [pc, #120]	; (801df34 <__sfp+0x84>)
 801deba:	681e      	ldr	r6, [r3, #0]
 801debc:	69b3      	ldr	r3, [r6, #24]
 801debe:	b913      	cbnz	r3, 801dec6 <__sfp+0x16>
 801dec0:	4630      	mov	r0, r6
 801dec2:	f7ff ffbd 	bl	801de40 <__sinit>
 801dec6:	3648      	adds	r6, #72	; 0x48
 801dec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801decc:	3b01      	subs	r3, #1
 801dece:	d503      	bpl.n	801ded8 <__sfp+0x28>
 801ded0:	6833      	ldr	r3, [r6, #0]
 801ded2:	b30b      	cbz	r3, 801df18 <__sfp+0x68>
 801ded4:	6836      	ldr	r6, [r6, #0]
 801ded6:	e7f7      	b.n	801dec8 <__sfp+0x18>
 801ded8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dedc:	b9d5      	cbnz	r5, 801df14 <__sfp+0x64>
 801dede:	4b16      	ldr	r3, [pc, #88]	; (801df38 <__sfp+0x88>)
 801dee0:	60e3      	str	r3, [r4, #12]
 801dee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dee6:	6665      	str	r5, [r4, #100]	; 0x64
 801dee8:	f000 f859 	bl	801df9e <__retarget_lock_init_recursive>
 801deec:	f7ff ff96 	bl	801de1c <__sfp_lock_release>
 801def0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801def4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801def8:	6025      	str	r5, [r4, #0]
 801defa:	61a5      	str	r5, [r4, #24]
 801defc:	2208      	movs	r2, #8
 801defe:	4629      	mov	r1, r5
 801df00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df04:	f7fb feb2 	bl	8019c6c <memset>
 801df08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df10:	4620      	mov	r0, r4
 801df12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df14:	3468      	adds	r4, #104	; 0x68
 801df16:	e7d9      	b.n	801decc <__sfp+0x1c>
 801df18:	2104      	movs	r1, #4
 801df1a:	4638      	mov	r0, r7
 801df1c:	f7ff ff62 	bl	801dde4 <__sfmoreglue>
 801df20:	4604      	mov	r4, r0
 801df22:	6030      	str	r0, [r6, #0]
 801df24:	2800      	cmp	r0, #0
 801df26:	d1d5      	bne.n	801ded4 <__sfp+0x24>
 801df28:	f7ff ff78 	bl	801de1c <__sfp_lock_release>
 801df2c:	230c      	movs	r3, #12
 801df2e:	603b      	str	r3, [r7, #0]
 801df30:	e7ee      	b.n	801df10 <__sfp+0x60>
 801df32:	bf00      	nop
 801df34:	080202f0 	.word	0x080202f0
 801df38:	ffff0001 	.word	0xffff0001

0801df3c <fiprintf>:
 801df3c:	b40e      	push	{r1, r2, r3}
 801df3e:	b503      	push	{r0, r1, lr}
 801df40:	4601      	mov	r1, r0
 801df42:	ab03      	add	r3, sp, #12
 801df44:	4805      	ldr	r0, [pc, #20]	; (801df5c <fiprintf+0x20>)
 801df46:	f853 2b04 	ldr.w	r2, [r3], #4
 801df4a:	6800      	ldr	r0, [r0, #0]
 801df4c:	9301      	str	r3, [sp, #4]
 801df4e:	f000 f875 	bl	801e03c <_vfiprintf_r>
 801df52:	b002      	add	sp, #8
 801df54:	f85d eb04 	ldr.w	lr, [sp], #4
 801df58:	b003      	add	sp, #12
 801df5a:	4770      	bx	lr
 801df5c:	200000c4 	.word	0x200000c4

0801df60 <_fwalk_reent>:
 801df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df64:	4606      	mov	r6, r0
 801df66:	4688      	mov	r8, r1
 801df68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df6c:	2700      	movs	r7, #0
 801df6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df72:	f1b9 0901 	subs.w	r9, r9, #1
 801df76:	d505      	bpl.n	801df84 <_fwalk_reent+0x24>
 801df78:	6824      	ldr	r4, [r4, #0]
 801df7a:	2c00      	cmp	r4, #0
 801df7c:	d1f7      	bne.n	801df6e <_fwalk_reent+0xe>
 801df7e:	4638      	mov	r0, r7
 801df80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df84:	89ab      	ldrh	r3, [r5, #12]
 801df86:	2b01      	cmp	r3, #1
 801df88:	d907      	bls.n	801df9a <_fwalk_reent+0x3a>
 801df8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df8e:	3301      	adds	r3, #1
 801df90:	d003      	beq.n	801df9a <_fwalk_reent+0x3a>
 801df92:	4629      	mov	r1, r5
 801df94:	4630      	mov	r0, r6
 801df96:	47c0      	blx	r8
 801df98:	4307      	orrs	r7, r0
 801df9a:	3568      	adds	r5, #104	; 0x68
 801df9c:	e7e9      	b.n	801df72 <_fwalk_reent+0x12>

0801df9e <__retarget_lock_init_recursive>:
 801df9e:	4770      	bx	lr

0801dfa0 <__retarget_lock_acquire_recursive>:
 801dfa0:	4770      	bx	lr

0801dfa2 <__retarget_lock_release_recursive>:
 801dfa2:	4770      	bx	lr

0801dfa4 <memmove>:
 801dfa4:	4288      	cmp	r0, r1
 801dfa6:	b510      	push	{r4, lr}
 801dfa8:	eb01 0402 	add.w	r4, r1, r2
 801dfac:	d902      	bls.n	801dfb4 <memmove+0x10>
 801dfae:	4284      	cmp	r4, r0
 801dfb0:	4623      	mov	r3, r4
 801dfb2:	d807      	bhi.n	801dfc4 <memmove+0x20>
 801dfb4:	1e43      	subs	r3, r0, #1
 801dfb6:	42a1      	cmp	r1, r4
 801dfb8:	d008      	beq.n	801dfcc <memmove+0x28>
 801dfba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dfbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dfc2:	e7f8      	b.n	801dfb6 <memmove+0x12>
 801dfc4:	4402      	add	r2, r0
 801dfc6:	4601      	mov	r1, r0
 801dfc8:	428a      	cmp	r2, r1
 801dfca:	d100      	bne.n	801dfce <memmove+0x2a>
 801dfcc:	bd10      	pop	{r4, pc}
 801dfce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dfd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dfd6:	e7f7      	b.n	801dfc8 <memmove+0x24>

0801dfd8 <_malloc_usable_size_r>:
 801dfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfdc:	1f18      	subs	r0, r3, #4
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	bfbc      	itt	lt
 801dfe2:	580b      	ldrlt	r3, [r1, r0]
 801dfe4:	18c0      	addlt	r0, r0, r3
 801dfe6:	4770      	bx	lr

0801dfe8 <__sfputc_r>:
 801dfe8:	6893      	ldr	r3, [r2, #8]
 801dfea:	3b01      	subs	r3, #1
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	b410      	push	{r4}
 801dff0:	6093      	str	r3, [r2, #8]
 801dff2:	da08      	bge.n	801e006 <__sfputc_r+0x1e>
 801dff4:	6994      	ldr	r4, [r2, #24]
 801dff6:	42a3      	cmp	r3, r4
 801dff8:	db01      	blt.n	801dffe <__sfputc_r+0x16>
 801dffa:	290a      	cmp	r1, #10
 801dffc:	d103      	bne.n	801e006 <__sfputc_r+0x1e>
 801dffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e002:	f000 b94b 	b.w	801e29c <__swbuf_r>
 801e006:	6813      	ldr	r3, [r2, #0]
 801e008:	1c58      	adds	r0, r3, #1
 801e00a:	6010      	str	r0, [r2, #0]
 801e00c:	7019      	strb	r1, [r3, #0]
 801e00e:	4608      	mov	r0, r1
 801e010:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e014:	4770      	bx	lr

0801e016 <__sfputs_r>:
 801e016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e018:	4606      	mov	r6, r0
 801e01a:	460f      	mov	r7, r1
 801e01c:	4614      	mov	r4, r2
 801e01e:	18d5      	adds	r5, r2, r3
 801e020:	42ac      	cmp	r4, r5
 801e022:	d101      	bne.n	801e028 <__sfputs_r+0x12>
 801e024:	2000      	movs	r0, #0
 801e026:	e007      	b.n	801e038 <__sfputs_r+0x22>
 801e028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e02c:	463a      	mov	r2, r7
 801e02e:	4630      	mov	r0, r6
 801e030:	f7ff ffda 	bl	801dfe8 <__sfputc_r>
 801e034:	1c43      	adds	r3, r0, #1
 801e036:	d1f3      	bne.n	801e020 <__sfputs_r+0xa>
 801e038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e03c <_vfiprintf_r>:
 801e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e040:	460d      	mov	r5, r1
 801e042:	b09d      	sub	sp, #116	; 0x74
 801e044:	4614      	mov	r4, r2
 801e046:	4698      	mov	r8, r3
 801e048:	4606      	mov	r6, r0
 801e04a:	b118      	cbz	r0, 801e054 <_vfiprintf_r+0x18>
 801e04c:	6983      	ldr	r3, [r0, #24]
 801e04e:	b90b      	cbnz	r3, 801e054 <_vfiprintf_r+0x18>
 801e050:	f7ff fef6 	bl	801de40 <__sinit>
 801e054:	4b89      	ldr	r3, [pc, #548]	; (801e27c <_vfiprintf_r+0x240>)
 801e056:	429d      	cmp	r5, r3
 801e058:	d11b      	bne.n	801e092 <_vfiprintf_r+0x56>
 801e05a:	6875      	ldr	r5, [r6, #4]
 801e05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e05e:	07d9      	lsls	r1, r3, #31
 801e060:	d405      	bmi.n	801e06e <_vfiprintf_r+0x32>
 801e062:	89ab      	ldrh	r3, [r5, #12]
 801e064:	059a      	lsls	r2, r3, #22
 801e066:	d402      	bmi.n	801e06e <_vfiprintf_r+0x32>
 801e068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e06a:	f7ff ff99 	bl	801dfa0 <__retarget_lock_acquire_recursive>
 801e06e:	89ab      	ldrh	r3, [r5, #12]
 801e070:	071b      	lsls	r3, r3, #28
 801e072:	d501      	bpl.n	801e078 <_vfiprintf_r+0x3c>
 801e074:	692b      	ldr	r3, [r5, #16]
 801e076:	b9eb      	cbnz	r3, 801e0b4 <_vfiprintf_r+0x78>
 801e078:	4629      	mov	r1, r5
 801e07a:	4630      	mov	r0, r6
 801e07c:	f000 f960 	bl	801e340 <__swsetup_r>
 801e080:	b1c0      	cbz	r0, 801e0b4 <_vfiprintf_r+0x78>
 801e082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e084:	07dc      	lsls	r4, r3, #31
 801e086:	d50e      	bpl.n	801e0a6 <_vfiprintf_r+0x6a>
 801e088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e08c:	b01d      	add	sp, #116	; 0x74
 801e08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e092:	4b7b      	ldr	r3, [pc, #492]	; (801e280 <_vfiprintf_r+0x244>)
 801e094:	429d      	cmp	r5, r3
 801e096:	d101      	bne.n	801e09c <_vfiprintf_r+0x60>
 801e098:	68b5      	ldr	r5, [r6, #8]
 801e09a:	e7df      	b.n	801e05c <_vfiprintf_r+0x20>
 801e09c:	4b79      	ldr	r3, [pc, #484]	; (801e284 <_vfiprintf_r+0x248>)
 801e09e:	429d      	cmp	r5, r3
 801e0a0:	bf08      	it	eq
 801e0a2:	68f5      	ldreq	r5, [r6, #12]
 801e0a4:	e7da      	b.n	801e05c <_vfiprintf_r+0x20>
 801e0a6:	89ab      	ldrh	r3, [r5, #12]
 801e0a8:	0598      	lsls	r0, r3, #22
 801e0aa:	d4ed      	bmi.n	801e088 <_vfiprintf_r+0x4c>
 801e0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0ae:	f7ff ff78 	bl	801dfa2 <__retarget_lock_release_recursive>
 801e0b2:	e7e9      	b.n	801e088 <_vfiprintf_r+0x4c>
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	9309      	str	r3, [sp, #36]	; 0x24
 801e0b8:	2320      	movs	r3, #32
 801e0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e0be:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0c2:	2330      	movs	r3, #48	; 0x30
 801e0c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e288 <_vfiprintf_r+0x24c>
 801e0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e0cc:	f04f 0901 	mov.w	r9, #1
 801e0d0:	4623      	mov	r3, r4
 801e0d2:	469a      	mov	sl, r3
 801e0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0d8:	b10a      	cbz	r2, 801e0de <_vfiprintf_r+0xa2>
 801e0da:	2a25      	cmp	r2, #37	; 0x25
 801e0dc:	d1f9      	bne.n	801e0d2 <_vfiprintf_r+0x96>
 801e0de:	ebba 0b04 	subs.w	fp, sl, r4
 801e0e2:	d00b      	beq.n	801e0fc <_vfiprintf_r+0xc0>
 801e0e4:	465b      	mov	r3, fp
 801e0e6:	4622      	mov	r2, r4
 801e0e8:	4629      	mov	r1, r5
 801e0ea:	4630      	mov	r0, r6
 801e0ec:	f7ff ff93 	bl	801e016 <__sfputs_r>
 801e0f0:	3001      	adds	r0, #1
 801e0f2:	f000 80aa 	beq.w	801e24a <_vfiprintf_r+0x20e>
 801e0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e0f8:	445a      	add	r2, fp
 801e0fa:	9209      	str	r2, [sp, #36]	; 0x24
 801e0fc:	f89a 3000 	ldrb.w	r3, [sl]
 801e100:	2b00      	cmp	r3, #0
 801e102:	f000 80a2 	beq.w	801e24a <_vfiprintf_r+0x20e>
 801e106:	2300      	movs	r3, #0
 801e108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e110:	f10a 0a01 	add.w	sl, sl, #1
 801e114:	9304      	str	r3, [sp, #16]
 801e116:	9307      	str	r3, [sp, #28]
 801e118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e11c:	931a      	str	r3, [sp, #104]	; 0x68
 801e11e:	4654      	mov	r4, sl
 801e120:	2205      	movs	r2, #5
 801e122:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e126:	4858      	ldr	r0, [pc, #352]	; (801e288 <_vfiprintf_r+0x24c>)
 801e128:	f7e2 f85a 	bl	80001e0 <memchr>
 801e12c:	9a04      	ldr	r2, [sp, #16]
 801e12e:	b9d8      	cbnz	r0, 801e168 <_vfiprintf_r+0x12c>
 801e130:	06d1      	lsls	r1, r2, #27
 801e132:	bf44      	itt	mi
 801e134:	2320      	movmi	r3, #32
 801e136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e13a:	0713      	lsls	r3, r2, #28
 801e13c:	bf44      	itt	mi
 801e13e:	232b      	movmi	r3, #43	; 0x2b
 801e140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e144:	f89a 3000 	ldrb.w	r3, [sl]
 801e148:	2b2a      	cmp	r3, #42	; 0x2a
 801e14a:	d015      	beq.n	801e178 <_vfiprintf_r+0x13c>
 801e14c:	9a07      	ldr	r2, [sp, #28]
 801e14e:	4654      	mov	r4, sl
 801e150:	2000      	movs	r0, #0
 801e152:	f04f 0c0a 	mov.w	ip, #10
 801e156:	4621      	mov	r1, r4
 801e158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e15c:	3b30      	subs	r3, #48	; 0x30
 801e15e:	2b09      	cmp	r3, #9
 801e160:	d94e      	bls.n	801e200 <_vfiprintf_r+0x1c4>
 801e162:	b1b0      	cbz	r0, 801e192 <_vfiprintf_r+0x156>
 801e164:	9207      	str	r2, [sp, #28]
 801e166:	e014      	b.n	801e192 <_vfiprintf_r+0x156>
 801e168:	eba0 0308 	sub.w	r3, r0, r8
 801e16c:	fa09 f303 	lsl.w	r3, r9, r3
 801e170:	4313      	orrs	r3, r2
 801e172:	9304      	str	r3, [sp, #16]
 801e174:	46a2      	mov	sl, r4
 801e176:	e7d2      	b.n	801e11e <_vfiprintf_r+0xe2>
 801e178:	9b03      	ldr	r3, [sp, #12]
 801e17a:	1d19      	adds	r1, r3, #4
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	9103      	str	r1, [sp, #12]
 801e180:	2b00      	cmp	r3, #0
 801e182:	bfbb      	ittet	lt
 801e184:	425b      	neglt	r3, r3
 801e186:	f042 0202 	orrlt.w	r2, r2, #2
 801e18a:	9307      	strge	r3, [sp, #28]
 801e18c:	9307      	strlt	r3, [sp, #28]
 801e18e:	bfb8      	it	lt
 801e190:	9204      	strlt	r2, [sp, #16]
 801e192:	7823      	ldrb	r3, [r4, #0]
 801e194:	2b2e      	cmp	r3, #46	; 0x2e
 801e196:	d10c      	bne.n	801e1b2 <_vfiprintf_r+0x176>
 801e198:	7863      	ldrb	r3, [r4, #1]
 801e19a:	2b2a      	cmp	r3, #42	; 0x2a
 801e19c:	d135      	bne.n	801e20a <_vfiprintf_r+0x1ce>
 801e19e:	9b03      	ldr	r3, [sp, #12]
 801e1a0:	1d1a      	adds	r2, r3, #4
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	9203      	str	r2, [sp, #12]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	bfb8      	it	lt
 801e1aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e1ae:	3402      	adds	r4, #2
 801e1b0:	9305      	str	r3, [sp, #20]
 801e1b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e298 <_vfiprintf_r+0x25c>
 801e1b6:	7821      	ldrb	r1, [r4, #0]
 801e1b8:	2203      	movs	r2, #3
 801e1ba:	4650      	mov	r0, sl
 801e1bc:	f7e2 f810 	bl	80001e0 <memchr>
 801e1c0:	b140      	cbz	r0, 801e1d4 <_vfiprintf_r+0x198>
 801e1c2:	2340      	movs	r3, #64	; 0x40
 801e1c4:	eba0 000a 	sub.w	r0, r0, sl
 801e1c8:	fa03 f000 	lsl.w	r0, r3, r0
 801e1cc:	9b04      	ldr	r3, [sp, #16]
 801e1ce:	4303      	orrs	r3, r0
 801e1d0:	3401      	adds	r4, #1
 801e1d2:	9304      	str	r3, [sp, #16]
 801e1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1d8:	482c      	ldr	r0, [pc, #176]	; (801e28c <_vfiprintf_r+0x250>)
 801e1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e1de:	2206      	movs	r2, #6
 801e1e0:	f7e1 fffe 	bl	80001e0 <memchr>
 801e1e4:	2800      	cmp	r0, #0
 801e1e6:	d03f      	beq.n	801e268 <_vfiprintf_r+0x22c>
 801e1e8:	4b29      	ldr	r3, [pc, #164]	; (801e290 <_vfiprintf_r+0x254>)
 801e1ea:	bb1b      	cbnz	r3, 801e234 <_vfiprintf_r+0x1f8>
 801e1ec:	9b03      	ldr	r3, [sp, #12]
 801e1ee:	3307      	adds	r3, #7
 801e1f0:	f023 0307 	bic.w	r3, r3, #7
 801e1f4:	3308      	adds	r3, #8
 801e1f6:	9303      	str	r3, [sp, #12]
 801e1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1fa:	443b      	add	r3, r7
 801e1fc:	9309      	str	r3, [sp, #36]	; 0x24
 801e1fe:	e767      	b.n	801e0d0 <_vfiprintf_r+0x94>
 801e200:	fb0c 3202 	mla	r2, ip, r2, r3
 801e204:	460c      	mov	r4, r1
 801e206:	2001      	movs	r0, #1
 801e208:	e7a5      	b.n	801e156 <_vfiprintf_r+0x11a>
 801e20a:	2300      	movs	r3, #0
 801e20c:	3401      	adds	r4, #1
 801e20e:	9305      	str	r3, [sp, #20]
 801e210:	4619      	mov	r1, r3
 801e212:	f04f 0c0a 	mov.w	ip, #10
 801e216:	4620      	mov	r0, r4
 801e218:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e21c:	3a30      	subs	r2, #48	; 0x30
 801e21e:	2a09      	cmp	r2, #9
 801e220:	d903      	bls.n	801e22a <_vfiprintf_r+0x1ee>
 801e222:	2b00      	cmp	r3, #0
 801e224:	d0c5      	beq.n	801e1b2 <_vfiprintf_r+0x176>
 801e226:	9105      	str	r1, [sp, #20]
 801e228:	e7c3      	b.n	801e1b2 <_vfiprintf_r+0x176>
 801e22a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e22e:	4604      	mov	r4, r0
 801e230:	2301      	movs	r3, #1
 801e232:	e7f0      	b.n	801e216 <_vfiprintf_r+0x1da>
 801e234:	ab03      	add	r3, sp, #12
 801e236:	9300      	str	r3, [sp, #0]
 801e238:	462a      	mov	r2, r5
 801e23a:	4b16      	ldr	r3, [pc, #88]	; (801e294 <_vfiprintf_r+0x258>)
 801e23c:	a904      	add	r1, sp, #16
 801e23e:	4630      	mov	r0, r6
 801e240:	f7fb fe66 	bl	8019f10 <_printf_float>
 801e244:	4607      	mov	r7, r0
 801e246:	1c78      	adds	r0, r7, #1
 801e248:	d1d6      	bne.n	801e1f8 <_vfiprintf_r+0x1bc>
 801e24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e24c:	07d9      	lsls	r1, r3, #31
 801e24e:	d405      	bmi.n	801e25c <_vfiprintf_r+0x220>
 801e250:	89ab      	ldrh	r3, [r5, #12]
 801e252:	059a      	lsls	r2, r3, #22
 801e254:	d402      	bmi.n	801e25c <_vfiprintf_r+0x220>
 801e256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e258:	f7ff fea3 	bl	801dfa2 <__retarget_lock_release_recursive>
 801e25c:	89ab      	ldrh	r3, [r5, #12]
 801e25e:	065b      	lsls	r3, r3, #25
 801e260:	f53f af12 	bmi.w	801e088 <_vfiprintf_r+0x4c>
 801e264:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e266:	e711      	b.n	801e08c <_vfiprintf_r+0x50>
 801e268:	ab03      	add	r3, sp, #12
 801e26a:	9300      	str	r3, [sp, #0]
 801e26c:	462a      	mov	r2, r5
 801e26e:	4b09      	ldr	r3, [pc, #36]	; (801e294 <_vfiprintf_r+0x258>)
 801e270:	a904      	add	r1, sp, #16
 801e272:	4630      	mov	r0, r6
 801e274:	f7fc f8f0 	bl	801a458 <_printf_i>
 801e278:	e7e4      	b.n	801e244 <_vfiprintf_r+0x208>
 801e27a:	bf00      	nop
 801e27c:	08020764 	.word	0x08020764
 801e280:	08020784 	.word	0x08020784
 801e284:	08020744 	.word	0x08020744
 801e288:	080206f4 	.word	0x080206f4
 801e28c:	080206fe 	.word	0x080206fe
 801e290:	08019f11 	.word	0x08019f11
 801e294:	0801e017 	.word	0x0801e017
 801e298:	080206fa 	.word	0x080206fa

0801e29c <__swbuf_r>:
 801e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e29e:	460e      	mov	r6, r1
 801e2a0:	4614      	mov	r4, r2
 801e2a2:	4605      	mov	r5, r0
 801e2a4:	b118      	cbz	r0, 801e2ae <__swbuf_r+0x12>
 801e2a6:	6983      	ldr	r3, [r0, #24]
 801e2a8:	b90b      	cbnz	r3, 801e2ae <__swbuf_r+0x12>
 801e2aa:	f7ff fdc9 	bl	801de40 <__sinit>
 801e2ae:	4b21      	ldr	r3, [pc, #132]	; (801e334 <__swbuf_r+0x98>)
 801e2b0:	429c      	cmp	r4, r3
 801e2b2:	d12b      	bne.n	801e30c <__swbuf_r+0x70>
 801e2b4:	686c      	ldr	r4, [r5, #4]
 801e2b6:	69a3      	ldr	r3, [r4, #24]
 801e2b8:	60a3      	str	r3, [r4, #8]
 801e2ba:	89a3      	ldrh	r3, [r4, #12]
 801e2bc:	071a      	lsls	r2, r3, #28
 801e2be:	d52f      	bpl.n	801e320 <__swbuf_r+0x84>
 801e2c0:	6923      	ldr	r3, [r4, #16]
 801e2c2:	b36b      	cbz	r3, 801e320 <__swbuf_r+0x84>
 801e2c4:	6923      	ldr	r3, [r4, #16]
 801e2c6:	6820      	ldr	r0, [r4, #0]
 801e2c8:	1ac0      	subs	r0, r0, r3
 801e2ca:	6963      	ldr	r3, [r4, #20]
 801e2cc:	b2f6      	uxtb	r6, r6
 801e2ce:	4283      	cmp	r3, r0
 801e2d0:	4637      	mov	r7, r6
 801e2d2:	dc04      	bgt.n	801e2de <__swbuf_r+0x42>
 801e2d4:	4621      	mov	r1, r4
 801e2d6:	4628      	mov	r0, r5
 801e2d8:	f7ff fd1e 	bl	801dd18 <_fflush_r>
 801e2dc:	bb30      	cbnz	r0, 801e32c <__swbuf_r+0x90>
 801e2de:	68a3      	ldr	r3, [r4, #8]
 801e2e0:	3b01      	subs	r3, #1
 801e2e2:	60a3      	str	r3, [r4, #8]
 801e2e4:	6823      	ldr	r3, [r4, #0]
 801e2e6:	1c5a      	adds	r2, r3, #1
 801e2e8:	6022      	str	r2, [r4, #0]
 801e2ea:	701e      	strb	r6, [r3, #0]
 801e2ec:	6963      	ldr	r3, [r4, #20]
 801e2ee:	3001      	adds	r0, #1
 801e2f0:	4283      	cmp	r3, r0
 801e2f2:	d004      	beq.n	801e2fe <__swbuf_r+0x62>
 801e2f4:	89a3      	ldrh	r3, [r4, #12]
 801e2f6:	07db      	lsls	r3, r3, #31
 801e2f8:	d506      	bpl.n	801e308 <__swbuf_r+0x6c>
 801e2fa:	2e0a      	cmp	r6, #10
 801e2fc:	d104      	bne.n	801e308 <__swbuf_r+0x6c>
 801e2fe:	4621      	mov	r1, r4
 801e300:	4628      	mov	r0, r5
 801e302:	f7ff fd09 	bl	801dd18 <_fflush_r>
 801e306:	b988      	cbnz	r0, 801e32c <__swbuf_r+0x90>
 801e308:	4638      	mov	r0, r7
 801e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e30c:	4b0a      	ldr	r3, [pc, #40]	; (801e338 <__swbuf_r+0x9c>)
 801e30e:	429c      	cmp	r4, r3
 801e310:	d101      	bne.n	801e316 <__swbuf_r+0x7a>
 801e312:	68ac      	ldr	r4, [r5, #8]
 801e314:	e7cf      	b.n	801e2b6 <__swbuf_r+0x1a>
 801e316:	4b09      	ldr	r3, [pc, #36]	; (801e33c <__swbuf_r+0xa0>)
 801e318:	429c      	cmp	r4, r3
 801e31a:	bf08      	it	eq
 801e31c:	68ec      	ldreq	r4, [r5, #12]
 801e31e:	e7ca      	b.n	801e2b6 <__swbuf_r+0x1a>
 801e320:	4621      	mov	r1, r4
 801e322:	4628      	mov	r0, r5
 801e324:	f000 f80c 	bl	801e340 <__swsetup_r>
 801e328:	2800      	cmp	r0, #0
 801e32a:	d0cb      	beq.n	801e2c4 <__swbuf_r+0x28>
 801e32c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e330:	e7ea      	b.n	801e308 <__swbuf_r+0x6c>
 801e332:	bf00      	nop
 801e334:	08020764 	.word	0x08020764
 801e338:	08020784 	.word	0x08020784
 801e33c:	08020744 	.word	0x08020744

0801e340 <__swsetup_r>:
 801e340:	4b32      	ldr	r3, [pc, #200]	; (801e40c <__swsetup_r+0xcc>)
 801e342:	b570      	push	{r4, r5, r6, lr}
 801e344:	681d      	ldr	r5, [r3, #0]
 801e346:	4606      	mov	r6, r0
 801e348:	460c      	mov	r4, r1
 801e34a:	b125      	cbz	r5, 801e356 <__swsetup_r+0x16>
 801e34c:	69ab      	ldr	r3, [r5, #24]
 801e34e:	b913      	cbnz	r3, 801e356 <__swsetup_r+0x16>
 801e350:	4628      	mov	r0, r5
 801e352:	f7ff fd75 	bl	801de40 <__sinit>
 801e356:	4b2e      	ldr	r3, [pc, #184]	; (801e410 <__swsetup_r+0xd0>)
 801e358:	429c      	cmp	r4, r3
 801e35a:	d10f      	bne.n	801e37c <__swsetup_r+0x3c>
 801e35c:	686c      	ldr	r4, [r5, #4]
 801e35e:	89a3      	ldrh	r3, [r4, #12]
 801e360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e364:	0719      	lsls	r1, r3, #28
 801e366:	d42c      	bmi.n	801e3c2 <__swsetup_r+0x82>
 801e368:	06dd      	lsls	r5, r3, #27
 801e36a:	d411      	bmi.n	801e390 <__swsetup_r+0x50>
 801e36c:	2309      	movs	r3, #9
 801e36e:	6033      	str	r3, [r6, #0]
 801e370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e374:	81a3      	strh	r3, [r4, #12]
 801e376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e37a:	e03e      	b.n	801e3fa <__swsetup_r+0xba>
 801e37c:	4b25      	ldr	r3, [pc, #148]	; (801e414 <__swsetup_r+0xd4>)
 801e37e:	429c      	cmp	r4, r3
 801e380:	d101      	bne.n	801e386 <__swsetup_r+0x46>
 801e382:	68ac      	ldr	r4, [r5, #8]
 801e384:	e7eb      	b.n	801e35e <__swsetup_r+0x1e>
 801e386:	4b24      	ldr	r3, [pc, #144]	; (801e418 <__swsetup_r+0xd8>)
 801e388:	429c      	cmp	r4, r3
 801e38a:	bf08      	it	eq
 801e38c:	68ec      	ldreq	r4, [r5, #12]
 801e38e:	e7e6      	b.n	801e35e <__swsetup_r+0x1e>
 801e390:	0758      	lsls	r0, r3, #29
 801e392:	d512      	bpl.n	801e3ba <__swsetup_r+0x7a>
 801e394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e396:	b141      	cbz	r1, 801e3aa <__swsetup_r+0x6a>
 801e398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e39c:	4299      	cmp	r1, r3
 801e39e:	d002      	beq.n	801e3a6 <__swsetup_r+0x66>
 801e3a0:	4630      	mov	r0, r6
 801e3a2:	f7fb fc6b 	bl	8019c7c <_free_r>
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	6363      	str	r3, [r4, #52]	; 0x34
 801e3aa:	89a3      	ldrh	r3, [r4, #12]
 801e3ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e3b0:	81a3      	strh	r3, [r4, #12]
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	6063      	str	r3, [r4, #4]
 801e3b6:	6923      	ldr	r3, [r4, #16]
 801e3b8:	6023      	str	r3, [r4, #0]
 801e3ba:	89a3      	ldrh	r3, [r4, #12]
 801e3bc:	f043 0308 	orr.w	r3, r3, #8
 801e3c0:	81a3      	strh	r3, [r4, #12]
 801e3c2:	6923      	ldr	r3, [r4, #16]
 801e3c4:	b94b      	cbnz	r3, 801e3da <__swsetup_r+0x9a>
 801e3c6:	89a3      	ldrh	r3, [r4, #12]
 801e3c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e3d0:	d003      	beq.n	801e3da <__swsetup_r+0x9a>
 801e3d2:	4621      	mov	r1, r4
 801e3d4:	4630      	mov	r0, r6
 801e3d6:	f000 f84d 	bl	801e474 <__smakebuf_r>
 801e3da:	89a0      	ldrh	r0, [r4, #12]
 801e3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3e0:	f010 0301 	ands.w	r3, r0, #1
 801e3e4:	d00a      	beq.n	801e3fc <__swsetup_r+0xbc>
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	60a3      	str	r3, [r4, #8]
 801e3ea:	6963      	ldr	r3, [r4, #20]
 801e3ec:	425b      	negs	r3, r3
 801e3ee:	61a3      	str	r3, [r4, #24]
 801e3f0:	6923      	ldr	r3, [r4, #16]
 801e3f2:	b943      	cbnz	r3, 801e406 <__swsetup_r+0xc6>
 801e3f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e3f8:	d1ba      	bne.n	801e370 <__swsetup_r+0x30>
 801e3fa:	bd70      	pop	{r4, r5, r6, pc}
 801e3fc:	0781      	lsls	r1, r0, #30
 801e3fe:	bf58      	it	pl
 801e400:	6963      	ldrpl	r3, [r4, #20]
 801e402:	60a3      	str	r3, [r4, #8]
 801e404:	e7f4      	b.n	801e3f0 <__swsetup_r+0xb0>
 801e406:	2000      	movs	r0, #0
 801e408:	e7f7      	b.n	801e3fa <__swsetup_r+0xba>
 801e40a:	bf00      	nop
 801e40c:	200000c4 	.word	0x200000c4
 801e410:	08020764 	.word	0x08020764
 801e414:	08020784 	.word	0x08020784
 801e418:	08020744 	.word	0x08020744

0801e41c <abort>:
 801e41c:	b508      	push	{r3, lr}
 801e41e:	2006      	movs	r0, #6
 801e420:	f000 f890 	bl	801e544 <raise>
 801e424:	2001      	movs	r0, #1
 801e426:	f7ee fd3f 	bl	800cea8 <_exit>

0801e42a <__swhatbuf_r>:
 801e42a:	b570      	push	{r4, r5, r6, lr}
 801e42c:	460e      	mov	r6, r1
 801e42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e432:	2900      	cmp	r1, #0
 801e434:	b096      	sub	sp, #88	; 0x58
 801e436:	4614      	mov	r4, r2
 801e438:	461d      	mov	r5, r3
 801e43a:	da07      	bge.n	801e44c <__swhatbuf_r+0x22>
 801e43c:	2300      	movs	r3, #0
 801e43e:	602b      	str	r3, [r5, #0]
 801e440:	89b3      	ldrh	r3, [r6, #12]
 801e442:	061a      	lsls	r2, r3, #24
 801e444:	d410      	bmi.n	801e468 <__swhatbuf_r+0x3e>
 801e446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e44a:	e00e      	b.n	801e46a <__swhatbuf_r+0x40>
 801e44c:	466a      	mov	r2, sp
 801e44e:	f000 f895 	bl	801e57c <_fstat_r>
 801e452:	2800      	cmp	r0, #0
 801e454:	dbf2      	blt.n	801e43c <__swhatbuf_r+0x12>
 801e456:	9a01      	ldr	r2, [sp, #4]
 801e458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e45c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e460:	425a      	negs	r2, r3
 801e462:	415a      	adcs	r2, r3
 801e464:	602a      	str	r2, [r5, #0]
 801e466:	e7ee      	b.n	801e446 <__swhatbuf_r+0x1c>
 801e468:	2340      	movs	r3, #64	; 0x40
 801e46a:	2000      	movs	r0, #0
 801e46c:	6023      	str	r3, [r4, #0]
 801e46e:	b016      	add	sp, #88	; 0x58
 801e470:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e474 <__smakebuf_r>:
 801e474:	898b      	ldrh	r3, [r1, #12]
 801e476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e478:	079d      	lsls	r5, r3, #30
 801e47a:	4606      	mov	r6, r0
 801e47c:	460c      	mov	r4, r1
 801e47e:	d507      	bpl.n	801e490 <__smakebuf_r+0x1c>
 801e480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e484:	6023      	str	r3, [r4, #0]
 801e486:	6123      	str	r3, [r4, #16]
 801e488:	2301      	movs	r3, #1
 801e48a:	6163      	str	r3, [r4, #20]
 801e48c:	b002      	add	sp, #8
 801e48e:	bd70      	pop	{r4, r5, r6, pc}
 801e490:	ab01      	add	r3, sp, #4
 801e492:	466a      	mov	r2, sp
 801e494:	f7ff ffc9 	bl	801e42a <__swhatbuf_r>
 801e498:	9900      	ldr	r1, [sp, #0]
 801e49a:	4605      	mov	r5, r0
 801e49c:	4630      	mov	r0, r6
 801e49e:	f7fb fc3d 	bl	8019d1c <_malloc_r>
 801e4a2:	b948      	cbnz	r0, 801e4b8 <__smakebuf_r+0x44>
 801e4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4a8:	059a      	lsls	r2, r3, #22
 801e4aa:	d4ef      	bmi.n	801e48c <__smakebuf_r+0x18>
 801e4ac:	f023 0303 	bic.w	r3, r3, #3
 801e4b0:	f043 0302 	orr.w	r3, r3, #2
 801e4b4:	81a3      	strh	r3, [r4, #12]
 801e4b6:	e7e3      	b.n	801e480 <__smakebuf_r+0xc>
 801e4b8:	4b0d      	ldr	r3, [pc, #52]	; (801e4f0 <__smakebuf_r+0x7c>)
 801e4ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801e4bc:	89a3      	ldrh	r3, [r4, #12]
 801e4be:	6020      	str	r0, [r4, #0]
 801e4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e4c4:	81a3      	strh	r3, [r4, #12]
 801e4c6:	9b00      	ldr	r3, [sp, #0]
 801e4c8:	6163      	str	r3, [r4, #20]
 801e4ca:	9b01      	ldr	r3, [sp, #4]
 801e4cc:	6120      	str	r0, [r4, #16]
 801e4ce:	b15b      	cbz	r3, 801e4e8 <__smakebuf_r+0x74>
 801e4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4d4:	4630      	mov	r0, r6
 801e4d6:	f000 f863 	bl	801e5a0 <_isatty_r>
 801e4da:	b128      	cbz	r0, 801e4e8 <__smakebuf_r+0x74>
 801e4dc:	89a3      	ldrh	r3, [r4, #12]
 801e4de:	f023 0303 	bic.w	r3, r3, #3
 801e4e2:	f043 0301 	orr.w	r3, r3, #1
 801e4e6:	81a3      	strh	r3, [r4, #12]
 801e4e8:	89a0      	ldrh	r0, [r4, #12]
 801e4ea:	4305      	orrs	r5, r0
 801e4ec:	81a5      	strh	r5, [r4, #12]
 801e4ee:	e7cd      	b.n	801e48c <__smakebuf_r+0x18>
 801e4f0:	0801ddd9 	.word	0x0801ddd9

0801e4f4 <_raise_r>:
 801e4f4:	291f      	cmp	r1, #31
 801e4f6:	b538      	push	{r3, r4, r5, lr}
 801e4f8:	4604      	mov	r4, r0
 801e4fa:	460d      	mov	r5, r1
 801e4fc:	d904      	bls.n	801e508 <_raise_r+0x14>
 801e4fe:	2316      	movs	r3, #22
 801e500:	6003      	str	r3, [r0, #0]
 801e502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e506:	bd38      	pop	{r3, r4, r5, pc}
 801e508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e50a:	b112      	cbz	r2, 801e512 <_raise_r+0x1e>
 801e50c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e510:	b94b      	cbnz	r3, 801e526 <_raise_r+0x32>
 801e512:	4620      	mov	r0, r4
 801e514:	f000 f830 	bl	801e578 <_getpid_r>
 801e518:	462a      	mov	r2, r5
 801e51a:	4601      	mov	r1, r0
 801e51c:	4620      	mov	r0, r4
 801e51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e522:	f000 b817 	b.w	801e554 <_kill_r>
 801e526:	2b01      	cmp	r3, #1
 801e528:	d00a      	beq.n	801e540 <_raise_r+0x4c>
 801e52a:	1c59      	adds	r1, r3, #1
 801e52c:	d103      	bne.n	801e536 <_raise_r+0x42>
 801e52e:	2316      	movs	r3, #22
 801e530:	6003      	str	r3, [r0, #0]
 801e532:	2001      	movs	r0, #1
 801e534:	e7e7      	b.n	801e506 <_raise_r+0x12>
 801e536:	2400      	movs	r4, #0
 801e538:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e53c:	4628      	mov	r0, r5
 801e53e:	4798      	blx	r3
 801e540:	2000      	movs	r0, #0
 801e542:	e7e0      	b.n	801e506 <_raise_r+0x12>

0801e544 <raise>:
 801e544:	4b02      	ldr	r3, [pc, #8]	; (801e550 <raise+0xc>)
 801e546:	4601      	mov	r1, r0
 801e548:	6818      	ldr	r0, [r3, #0]
 801e54a:	f7ff bfd3 	b.w	801e4f4 <_raise_r>
 801e54e:	bf00      	nop
 801e550:	200000c4 	.word	0x200000c4

0801e554 <_kill_r>:
 801e554:	b538      	push	{r3, r4, r5, lr}
 801e556:	4d07      	ldr	r5, [pc, #28]	; (801e574 <_kill_r+0x20>)
 801e558:	2300      	movs	r3, #0
 801e55a:	4604      	mov	r4, r0
 801e55c:	4608      	mov	r0, r1
 801e55e:	4611      	mov	r1, r2
 801e560:	602b      	str	r3, [r5, #0]
 801e562:	f7ee fc91 	bl	800ce88 <_kill>
 801e566:	1c43      	adds	r3, r0, #1
 801e568:	d102      	bne.n	801e570 <_kill_r+0x1c>
 801e56a:	682b      	ldr	r3, [r5, #0]
 801e56c:	b103      	cbz	r3, 801e570 <_kill_r+0x1c>
 801e56e:	6023      	str	r3, [r4, #0]
 801e570:	bd38      	pop	{r3, r4, r5, pc}
 801e572:	bf00      	nop
 801e574:	2000a6d4 	.word	0x2000a6d4

0801e578 <_getpid_r>:
 801e578:	f7ee bc7e 	b.w	800ce78 <_getpid>

0801e57c <_fstat_r>:
 801e57c:	b538      	push	{r3, r4, r5, lr}
 801e57e:	4d07      	ldr	r5, [pc, #28]	; (801e59c <_fstat_r+0x20>)
 801e580:	2300      	movs	r3, #0
 801e582:	4604      	mov	r4, r0
 801e584:	4608      	mov	r0, r1
 801e586:	4611      	mov	r1, r2
 801e588:	602b      	str	r3, [r5, #0]
 801e58a:	f7ee fcdc 	bl	800cf46 <_fstat>
 801e58e:	1c43      	adds	r3, r0, #1
 801e590:	d102      	bne.n	801e598 <_fstat_r+0x1c>
 801e592:	682b      	ldr	r3, [r5, #0]
 801e594:	b103      	cbz	r3, 801e598 <_fstat_r+0x1c>
 801e596:	6023      	str	r3, [r4, #0]
 801e598:	bd38      	pop	{r3, r4, r5, pc}
 801e59a:	bf00      	nop
 801e59c:	2000a6d4 	.word	0x2000a6d4

0801e5a0 <_isatty_r>:
 801e5a0:	b538      	push	{r3, r4, r5, lr}
 801e5a2:	4d06      	ldr	r5, [pc, #24]	; (801e5bc <_isatty_r+0x1c>)
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	4604      	mov	r4, r0
 801e5a8:	4608      	mov	r0, r1
 801e5aa:	602b      	str	r3, [r5, #0]
 801e5ac:	f7ee fcdb 	bl	800cf66 <_isatty>
 801e5b0:	1c43      	adds	r3, r0, #1
 801e5b2:	d102      	bne.n	801e5ba <_isatty_r+0x1a>
 801e5b4:	682b      	ldr	r3, [r5, #0]
 801e5b6:	b103      	cbz	r3, 801e5ba <_isatty_r+0x1a>
 801e5b8:	6023      	str	r3, [r4, #0]
 801e5ba:	bd38      	pop	{r3, r4, r5, pc}
 801e5bc:	2000a6d4 	.word	0x2000a6d4

0801e5c0 <atanf>:
 801e5c0:	b538      	push	{r3, r4, r5, lr}
 801e5c2:	ee10 5a10 	vmov	r5, s0
 801e5c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e5ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e5ce:	eef0 7a40 	vmov.f32	s15, s0
 801e5d2:	db10      	blt.n	801e5f6 <atanf+0x36>
 801e5d4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e5d8:	dd04      	ble.n	801e5e4 <atanf+0x24>
 801e5da:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e5de:	eeb0 0a67 	vmov.f32	s0, s15
 801e5e2:	bd38      	pop	{r3, r4, r5, pc}
 801e5e4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e71c <atanf+0x15c>
 801e5e8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801e720 <atanf+0x160>
 801e5ec:	2d00      	cmp	r5, #0
 801e5ee:	bfd8      	it	le
 801e5f0:	eef0 7a40 	vmovle.f32	s15, s0
 801e5f4:	e7f3      	b.n	801e5de <atanf+0x1e>
 801e5f6:	4b4b      	ldr	r3, [pc, #300]	; (801e724 <atanf+0x164>)
 801e5f8:	429c      	cmp	r4, r3
 801e5fa:	dc10      	bgt.n	801e61e <atanf+0x5e>
 801e5fc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e600:	da0a      	bge.n	801e618 <atanf+0x58>
 801e602:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e728 <atanf+0x168>
 801e606:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e60e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e616:	dce2      	bgt.n	801e5de <atanf+0x1e>
 801e618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e61c:	e013      	b.n	801e646 <atanf+0x86>
 801e61e:	f000 f8e3 	bl	801e7e8 <fabsf>
 801e622:	4b42      	ldr	r3, [pc, #264]	; (801e72c <atanf+0x16c>)
 801e624:	429c      	cmp	r4, r3
 801e626:	dc4f      	bgt.n	801e6c8 <atanf+0x108>
 801e628:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e62c:	429c      	cmp	r4, r3
 801e62e:	dc41      	bgt.n	801e6b4 <atanf+0xf4>
 801e630:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e634:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e638:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e63c:	2300      	movs	r3, #0
 801e63e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e642:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e646:	1c5a      	adds	r2, r3, #1
 801e648:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e64c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e730 <atanf+0x170>
 801e650:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801e734 <atanf+0x174>
 801e654:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e738 <atanf+0x178>
 801e658:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801e73c <atanf+0x17c>
 801e65c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e660:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e664:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e740 <atanf+0x180>
 801e668:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e66c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801e744 <atanf+0x184>
 801e670:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e674:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e748 <atanf+0x188>
 801e678:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e67c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801e74c <atanf+0x18c>
 801e680:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e684:	eddf 5a32 	vldr	s11, [pc, #200]	; 801e750 <atanf+0x190>
 801e688:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e68c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e754 <atanf+0x194>
 801e690:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e694:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e758 <atanf+0x198>
 801e698:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e69c:	eea5 0a87 	vfma.f32	s0, s11, s14
 801e6a0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e6a4:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e6a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e6ac:	d121      	bne.n	801e6f2 <atanf+0x132>
 801e6ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e6b2:	e794      	b.n	801e5de <atanf+0x1e>
 801e6b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e6b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e6bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e6c0:	2301      	movs	r3, #1
 801e6c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6c6:	e7be      	b.n	801e646 <atanf+0x86>
 801e6c8:	4b24      	ldr	r3, [pc, #144]	; (801e75c <atanf+0x19c>)
 801e6ca:	429c      	cmp	r4, r3
 801e6cc:	dc0b      	bgt.n	801e6e6 <atanf+0x126>
 801e6ce:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6d6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e6da:	2302      	movs	r3, #2
 801e6dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e6e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6e4:	e7af      	b.n	801e646 <atanf+0x86>
 801e6e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e6ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6ee:	2303      	movs	r3, #3
 801e6f0:	e7a9      	b.n	801e646 <atanf+0x86>
 801e6f2:	4a1b      	ldr	r2, [pc, #108]	; (801e760 <atanf+0x1a0>)
 801e6f4:	491b      	ldr	r1, [pc, #108]	; (801e764 <atanf+0x1a4>)
 801e6f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e6fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e6fe:	ed93 7a00 	vldr	s14, [r3]
 801e702:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e706:	2d00      	cmp	r5, #0
 801e708:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e70c:	ed92 0a00 	vldr	s0, [r2]
 801e710:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e714:	bfb8      	it	lt
 801e716:	eef1 7a67 	vneglt.f32	s15, s15
 801e71a:	e760      	b.n	801e5de <atanf+0x1e>
 801e71c:	3fc90fdb 	.word	0x3fc90fdb
 801e720:	bfc90fdb 	.word	0xbfc90fdb
 801e724:	3edfffff 	.word	0x3edfffff
 801e728:	7149f2ca 	.word	0x7149f2ca
 801e72c:	3f97ffff 	.word	0x3f97ffff
 801e730:	3c8569d7 	.word	0x3c8569d7
 801e734:	3d4bda59 	.word	0x3d4bda59
 801e738:	bd15a221 	.word	0xbd15a221
 801e73c:	be4ccccd 	.word	0xbe4ccccd
 801e740:	3d886b35 	.word	0x3d886b35
 801e744:	3dba2e6e 	.word	0x3dba2e6e
 801e748:	3e124925 	.word	0x3e124925
 801e74c:	3eaaaaab 	.word	0x3eaaaaab
 801e750:	bd6ef16b 	.word	0xbd6ef16b
 801e754:	bd9d8795 	.word	0xbd9d8795
 801e758:	bde38e38 	.word	0xbde38e38
 801e75c:	401bffff 	.word	0x401bffff
 801e760:	080207a4 	.word	0x080207a4
 801e764:	080207b4 	.word	0x080207b4

0801e768 <cosf>:
 801e768:	ee10 3a10 	vmov	r3, s0
 801e76c:	b507      	push	{r0, r1, r2, lr}
 801e76e:	4a1c      	ldr	r2, [pc, #112]	; (801e7e0 <cosf+0x78>)
 801e770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e774:	4293      	cmp	r3, r2
 801e776:	dc04      	bgt.n	801e782 <cosf+0x1a>
 801e778:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801e7e4 <cosf+0x7c>
 801e77c:	f000 fdb8 	bl	801f2f0 <__kernel_cosf>
 801e780:	e004      	b.n	801e78c <cosf+0x24>
 801e782:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e786:	db04      	blt.n	801e792 <cosf+0x2a>
 801e788:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e78c:	b003      	add	sp, #12
 801e78e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e792:	4668      	mov	r0, sp
 801e794:	f000 fc6c 	bl	801f070 <__ieee754_rem_pio2f>
 801e798:	f000 0003 	and.w	r0, r0, #3
 801e79c:	2801      	cmp	r0, #1
 801e79e:	d007      	beq.n	801e7b0 <cosf+0x48>
 801e7a0:	2802      	cmp	r0, #2
 801e7a2:	d00e      	beq.n	801e7c2 <cosf+0x5a>
 801e7a4:	b9a0      	cbnz	r0, 801e7d0 <cosf+0x68>
 801e7a6:	eddd 0a01 	vldr	s1, [sp, #4]
 801e7aa:	ed9d 0a00 	vldr	s0, [sp]
 801e7ae:	e7e5      	b.n	801e77c <cosf+0x14>
 801e7b0:	eddd 0a01 	vldr	s1, [sp, #4]
 801e7b4:	ed9d 0a00 	vldr	s0, [sp]
 801e7b8:	f001 f884 	bl	801f8c4 <__kernel_sinf>
 801e7bc:	eeb1 0a40 	vneg.f32	s0, s0
 801e7c0:	e7e4      	b.n	801e78c <cosf+0x24>
 801e7c2:	eddd 0a01 	vldr	s1, [sp, #4]
 801e7c6:	ed9d 0a00 	vldr	s0, [sp]
 801e7ca:	f000 fd91 	bl	801f2f0 <__kernel_cosf>
 801e7ce:	e7f5      	b.n	801e7bc <cosf+0x54>
 801e7d0:	eddd 0a01 	vldr	s1, [sp, #4]
 801e7d4:	ed9d 0a00 	vldr	s0, [sp]
 801e7d8:	2001      	movs	r0, #1
 801e7da:	f001 f873 	bl	801f8c4 <__kernel_sinf>
 801e7de:	e7d5      	b.n	801e78c <cosf+0x24>
 801e7e0:	3f490fd8 	.word	0x3f490fd8
 801e7e4:	00000000 	.word	0x00000000

0801e7e8 <fabsf>:
 801e7e8:	ee10 3a10 	vmov	r3, s0
 801e7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e7f0:	ee00 3a10 	vmov	s0, r3
 801e7f4:	4770      	bx	lr
	...

0801e7f8 <sinf>:
 801e7f8:	ee10 3a10 	vmov	r3, s0
 801e7fc:	b507      	push	{r0, r1, r2, lr}
 801e7fe:	4a1d      	ldr	r2, [pc, #116]	; (801e874 <sinf+0x7c>)
 801e800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e804:	4293      	cmp	r3, r2
 801e806:	dc05      	bgt.n	801e814 <sinf+0x1c>
 801e808:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801e878 <sinf+0x80>
 801e80c:	2000      	movs	r0, #0
 801e80e:	f001 f859 	bl	801f8c4 <__kernel_sinf>
 801e812:	e004      	b.n	801e81e <sinf+0x26>
 801e814:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e818:	db04      	blt.n	801e824 <sinf+0x2c>
 801e81a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e81e:	b003      	add	sp, #12
 801e820:	f85d fb04 	ldr.w	pc, [sp], #4
 801e824:	4668      	mov	r0, sp
 801e826:	f000 fc23 	bl	801f070 <__ieee754_rem_pio2f>
 801e82a:	f000 0003 	and.w	r0, r0, #3
 801e82e:	2801      	cmp	r0, #1
 801e830:	d008      	beq.n	801e844 <sinf+0x4c>
 801e832:	2802      	cmp	r0, #2
 801e834:	d00d      	beq.n	801e852 <sinf+0x5a>
 801e836:	b9b0      	cbnz	r0, 801e866 <sinf+0x6e>
 801e838:	eddd 0a01 	vldr	s1, [sp, #4]
 801e83c:	ed9d 0a00 	vldr	s0, [sp]
 801e840:	2001      	movs	r0, #1
 801e842:	e7e4      	b.n	801e80e <sinf+0x16>
 801e844:	eddd 0a01 	vldr	s1, [sp, #4]
 801e848:	ed9d 0a00 	vldr	s0, [sp]
 801e84c:	f000 fd50 	bl	801f2f0 <__kernel_cosf>
 801e850:	e7e5      	b.n	801e81e <sinf+0x26>
 801e852:	eddd 0a01 	vldr	s1, [sp, #4]
 801e856:	ed9d 0a00 	vldr	s0, [sp]
 801e85a:	2001      	movs	r0, #1
 801e85c:	f001 f832 	bl	801f8c4 <__kernel_sinf>
 801e860:	eeb1 0a40 	vneg.f32	s0, s0
 801e864:	e7db      	b.n	801e81e <sinf+0x26>
 801e866:	eddd 0a01 	vldr	s1, [sp, #4]
 801e86a:	ed9d 0a00 	vldr	s0, [sp]
 801e86e:	f000 fd3f 	bl	801f2f0 <__kernel_cosf>
 801e872:	e7f5      	b.n	801e860 <sinf+0x68>
 801e874:	3f490fd8 	.word	0x3f490fd8
 801e878:	00000000 	.word	0x00000000

0801e87c <atan2f>:
 801e87c:	f000 b898 	b.w	801e9b0 <__ieee754_atan2f>

0801e880 <powf>:
 801e880:	b508      	push	{r3, lr}
 801e882:	ed2d 8b04 	vpush	{d8-d9}
 801e886:	eeb0 9a40 	vmov.f32	s18, s0
 801e88a:	eef0 8a60 	vmov.f32	s17, s1
 801e88e:	f000 f92f 	bl	801eaf0 <__ieee754_powf>
 801e892:	4b43      	ldr	r3, [pc, #268]	; (801e9a0 <powf+0x120>)
 801e894:	f993 3000 	ldrsb.w	r3, [r3]
 801e898:	3301      	adds	r3, #1
 801e89a:	eeb0 8a40 	vmov.f32	s16, s0
 801e89e:	d012      	beq.n	801e8c6 <powf+0x46>
 801e8a0:	eef4 8a68 	vcmp.f32	s17, s17
 801e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8a8:	d60d      	bvs.n	801e8c6 <powf+0x46>
 801e8aa:	eeb4 9a49 	vcmp.f32	s18, s18
 801e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b2:	d70d      	bvc.n	801e8d0 <powf+0x50>
 801e8b4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e8c0:	bf08      	it	eq
 801e8c2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801e8c6:	eeb0 0a48 	vmov.f32	s0, s16
 801e8ca:	ecbd 8b04 	vpop	{d8-d9}
 801e8ce:	bd08      	pop	{r3, pc}
 801e8d0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801e9a4 <powf+0x124>
 801e8d4:	eeb4 9a69 	vcmp.f32	s18, s19
 801e8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8dc:	d116      	bne.n	801e90c <powf+0x8c>
 801e8de:	eef4 8a69 	vcmp.f32	s17, s19
 801e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8e6:	d057      	beq.n	801e998 <powf+0x118>
 801e8e8:	eeb0 0a68 	vmov.f32	s0, s17
 801e8ec:	f7ff f944 	bl	801db78 <finitef>
 801e8f0:	2800      	cmp	r0, #0
 801e8f2:	d0e8      	beq.n	801e8c6 <powf+0x46>
 801e8f4:	eef4 8ae9 	vcmpe.f32	s17, s19
 801e8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8fc:	d5e3      	bpl.n	801e8c6 <powf+0x46>
 801e8fe:	f7fb f975 	bl	8019bec <__errno>
 801e902:	2321      	movs	r3, #33	; 0x21
 801e904:	6003      	str	r3, [r0, #0]
 801e906:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801e9a8 <powf+0x128>
 801e90a:	e7dc      	b.n	801e8c6 <powf+0x46>
 801e90c:	f7ff f934 	bl	801db78 <finitef>
 801e910:	bb50      	cbnz	r0, 801e968 <powf+0xe8>
 801e912:	eeb0 0a49 	vmov.f32	s0, s18
 801e916:	f7ff f92f 	bl	801db78 <finitef>
 801e91a:	b328      	cbz	r0, 801e968 <powf+0xe8>
 801e91c:	eeb0 0a68 	vmov.f32	s0, s17
 801e920:	f7ff f92a 	bl	801db78 <finitef>
 801e924:	b300      	cbz	r0, 801e968 <powf+0xe8>
 801e926:	eeb4 8a48 	vcmp.f32	s16, s16
 801e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e92e:	d706      	bvc.n	801e93e <powf+0xbe>
 801e930:	f7fb f95c 	bl	8019bec <__errno>
 801e934:	2321      	movs	r3, #33	; 0x21
 801e936:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801e93a:	6003      	str	r3, [r0, #0]
 801e93c:	e7c3      	b.n	801e8c6 <powf+0x46>
 801e93e:	f7fb f955 	bl	8019bec <__errno>
 801e942:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801e946:	2322      	movs	r3, #34	; 0x22
 801e948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e94c:	6003      	str	r3, [r0, #0]
 801e94e:	d508      	bpl.n	801e962 <powf+0xe2>
 801e950:	eeb0 0a68 	vmov.f32	s0, s17
 801e954:	f001 f840 	bl	801f9d8 <rintf>
 801e958:	eeb4 0a68 	vcmp.f32	s0, s17
 801e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e960:	d1d1      	bne.n	801e906 <powf+0x86>
 801e962:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801e9ac <powf+0x12c>
 801e966:	e7ae      	b.n	801e8c6 <powf+0x46>
 801e968:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e970:	d1a9      	bne.n	801e8c6 <powf+0x46>
 801e972:	eeb0 0a49 	vmov.f32	s0, s18
 801e976:	f7ff f8ff 	bl	801db78 <finitef>
 801e97a:	2800      	cmp	r0, #0
 801e97c:	d0a3      	beq.n	801e8c6 <powf+0x46>
 801e97e:	eeb0 0a68 	vmov.f32	s0, s17
 801e982:	f7ff f8f9 	bl	801db78 <finitef>
 801e986:	2800      	cmp	r0, #0
 801e988:	d09d      	beq.n	801e8c6 <powf+0x46>
 801e98a:	f7fb f92f 	bl	8019bec <__errno>
 801e98e:	2322      	movs	r3, #34	; 0x22
 801e990:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e9a4 <powf+0x124>
 801e994:	6003      	str	r3, [r0, #0]
 801e996:	e796      	b.n	801e8c6 <powf+0x46>
 801e998:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e99c:	e793      	b.n	801e8c6 <powf+0x46>
 801e99e:	bf00      	nop
 801e9a0:	20000298 	.word	0x20000298
 801e9a4:	00000000 	.word	0x00000000
 801e9a8:	ff800000 	.word	0xff800000
 801e9ac:	7f800000 	.word	0x7f800000

0801e9b0 <__ieee754_atan2f>:
 801e9b0:	ee10 2a90 	vmov	r2, s1
 801e9b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e9b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e9bc:	b510      	push	{r4, lr}
 801e9be:	eef0 7a40 	vmov.f32	s15, s0
 801e9c2:	dc06      	bgt.n	801e9d2 <__ieee754_atan2f+0x22>
 801e9c4:	ee10 0a10 	vmov	r0, s0
 801e9c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801e9cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e9d0:	dd04      	ble.n	801e9dc <__ieee754_atan2f+0x2c>
 801e9d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e9d6:	eeb0 0a67 	vmov.f32	s0, s15
 801e9da:	bd10      	pop	{r4, pc}
 801e9dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e9e0:	d103      	bne.n	801e9ea <__ieee754_atan2f+0x3a>
 801e9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9e6:	f7ff bdeb 	b.w	801e5c0 <atanf>
 801e9ea:	1794      	asrs	r4, r2, #30
 801e9ec:	f004 0402 	and.w	r4, r4, #2
 801e9f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e9f4:	b943      	cbnz	r3, 801ea08 <__ieee754_atan2f+0x58>
 801e9f6:	2c02      	cmp	r4, #2
 801e9f8:	d05e      	beq.n	801eab8 <__ieee754_atan2f+0x108>
 801e9fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801eacc <__ieee754_atan2f+0x11c>
 801e9fe:	2c03      	cmp	r4, #3
 801ea00:	bf08      	it	eq
 801ea02:	eef0 7a47 	vmoveq.f32	s15, s14
 801ea06:	e7e6      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801ea08:	b941      	cbnz	r1, 801ea1c <__ieee754_atan2f+0x6c>
 801ea0a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801ead0 <__ieee754_atan2f+0x120>
 801ea0e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801ead4 <__ieee754_atan2f+0x124>
 801ea12:	2800      	cmp	r0, #0
 801ea14:	bfb8      	it	lt
 801ea16:	eef0 7a40 	vmovlt.f32	s15, s0
 801ea1a:	e7dc      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801ea1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ea20:	d110      	bne.n	801ea44 <__ieee754_atan2f+0x94>
 801ea22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ea26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801ea2a:	d107      	bne.n	801ea3c <__ieee754_atan2f+0x8c>
 801ea2c:	2c02      	cmp	r4, #2
 801ea2e:	d846      	bhi.n	801eabe <__ieee754_atan2f+0x10e>
 801ea30:	4b29      	ldr	r3, [pc, #164]	; (801ead8 <__ieee754_atan2f+0x128>)
 801ea32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ea36:	edd4 7a00 	vldr	s15, [r4]
 801ea3a:	e7cc      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801ea3c:	2c02      	cmp	r4, #2
 801ea3e:	d841      	bhi.n	801eac4 <__ieee754_atan2f+0x114>
 801ea40:	4b26      	ldr	r3, [pc, #152]	; (801eadc <__ieee754_atan2f+0x12c>)
 801ea42:	e7f6      	b.n	801ea32 <__ieee754_atan2f+0x82>
 801ea44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ea48:	d0df      	beq.n	801ea0a <__ieee754_atan2f+0x5a>
 801ea4a:	1a5b      	subs	r3, r3, r1
 801ea4c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801ea50:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801ea54:	da1a      	bge.n	801ea8c <__ieee754_atan2f+0xdc>
 801ea56:	2a00      	cmp	r2, #0
 801ea58:	da01      	bge.n	801ea5e <__ieee754_atan2f+0xae>
 801ea5a:	313c      	adds	r1, #60	; 0x3c
 801ea5c:	db19      	blt.n	801ea92 <__ieee754_atan2f+0xe2>
 801ea5e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801ea62:	f7ff fec1 	bl	801e7e8 <fabsf>
 801ea66:	f7ff fdab 	bl	801e5c0 <atanf>
 801ea6a:	eef0 7a40 	vmov.f32	s15, s0
 801ea6e:	2c01      	cmp	r4, #1
 801ea70:	d012      	beq.n	801ea98 <__ieee754_atan2f+0xe8>
 801ea72:	2c02      	cmp	r4, #2
 801ea74:	d017      	beq.n	801eaa6 <__ieee754_atan2f+0xf6>
 801ea76:	2c00      	cmp	r4, #0
 801ea78:	d0ad      	beq.n	801e9d6 <__ieee754_atan2f+0x26>
 801ea7a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801eae0 <__ieee754_atan2f+0x130>
 801ea7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ea82:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801eae4 <__ieee754_atan2f+0x134>
 801ea86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ea8a:	e7a4      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801ea8c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801ead0 <__ieee754_atan2f+0x120>
 801ea90:	e7ed      	b.n	801ea6e <__ieee754_atan2f+0xbe>
 801ea92:	eddf 7a15 	vldr	s15, [pc, #84]	; 801eae8 <__ieee754_atan2f+0x138>
 801ea96:	e7ea      	b.n	801ea6e <__ieee754_atan2f+0xbe>
 801ea98:	ee17 3a90 	vmov	r3, s15
 801ea9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801eaa0:	ee07 3a90 	vmov	s15, r3
 801eaa4:	e797      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801eaa6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801eae0 <__ieee754_atan2f+0x130>
 801eaaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801eaae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801eae4 <__ieee754_atan2f+0x134>
 801eab2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801eab6:	e78e      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801eab8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801eae4 <__ieee754_atan2f+0x134>
 801eabc:	e78b      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801eabe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801eaec <__ieee754_atan2f+0x13c>
 801eac2:	e788      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801eac4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801eae8 <__ieee754_atan2f+0x138>
 801eac8:	e785      	b.n	801e9d6 <__ieee754_atan2f+0x26>
 801eaca:	bf00      	nop
 801eacc:	c0490fdb 	.word	0xc0490fdb
 801ead0:	3fc90fdb 	.word	0x3fc90fdb
 801ead4:	bfc90fdb 	.word	0xbfc90fdb
 801ead8:	080207c4 	.word	0x080207c4
 801eadc:	080207d0 	.word	0x080207d0
 801eae0:	33bbbd2e 	.word	0x33bbbd2e
 801eae4:	40490fdb 	.word	0x40490fdb
 801eae8:	00000000 	.word	0x00000000
 801eaec:	3f490fdb 	.word	0x3f490fdb

0801eaf0 <__ieee754_powf>:
 801eaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eaf4:	ee10 5a90 	vmov	r5, s1
 801eaf8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801eafc:	ed2d 8b02 	vpush	{d8}
 801eb00:	eeb0 8a40 	vmov.f32	s16, s0
 801eb04:	eef0 8a60 	vmov.f32	s17, s1
 801eb08:	f000 8291 	beq.w	801f02e <__ieee754_powf+0x53e>
 801eb0c:	ee10 8a10 	vmov	r8, s0
 801eb10:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801eb14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801eb18:	dc06      	bgt.n	801eb28 <__ieee754_powf+0x38>
 801eb1a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801eb1e:	dd0a      	ble.n	801eb36 <__ieee754_powf+0x46>
 801eb20:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801eb24:	f000 8283 	beq.w	801f02e <__ieee754_powf+0x53e>
 801eb28:	ecbd 8b02 	vpop	{d8}
 801eb2c:	48d8      	ldr	r0, [pc, #864]	; (801ee90 <__ieee754_powf+0x3a0>)
 801eb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb32:	f7fb bfdf 	b.w	801aaf4 <nanf>
 801eb36:	f1b8 0f00 	cmp.w	r8, #0
 801eb3a:	da1f      	bge.n	801eb7c <__ieee754_powf+0x8c>
 801eb3c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801eb40:	da2e      	bge.n	801eba0 <__ieee754_powf+0xb0>
 801eb42:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801eb46:	f2c0 827b 	blt.w	801f040 <__ieee754_powf+0x550>
 801eb4a:	15fb      	asrs	r3, r7, #23
 801eb4c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801eb50:	fa47 f603 	asr.w	r6, r7, r3
 801eb54:	fa06 f303 	lsl.w	r3, r6, r3
 801eb58:	42bb      	cmp	r3, r7
 801eb5a:	f040 8271 	bne.w	801f040 <__ieee754_powf+0x550>
 801eb5e:	f006 0601 	and.w	r6, r6, #1
 801eb62:	f1c6 0602 	rsb	r6, r6, #2
 801eb66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801eb6a:	d120      	bne.n	801ebae <__ieee754_powf+0xbe>
 801eb6c:	2d00      	cmp	r5, #0
 801eb6e:	f280 8264 	bge.w	801f03a <__ieee754_powf+0x54a>
 801eb72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801eb76:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801eb7a:	e00d      	b.n	801eb98 <__ieee754_powf+0xa8>
 801eb7c:	2600      	movs	r6, #0
 801eb7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801eb82:	d1f0      	bne.n	801eb66 <__ieee754_powf+0x76>
 801eb84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801eb88:	f000 8251 	beq.w	801f02e <__ieee754_powf+0x53e>
 801eb8c:	dd0a      	ble.n	801eba4 <__ieee754_powf+0xb4>
 801eb8e:	2d00      	cmp	r5, #0
 801eb90:	f280 8250 	bge.w	801f034 <__ieee754_powf+0x544>
 801eb94:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801ee94 <__ieee754_powf+0x3a4>
 801eb98:	ecbd 8b02 	vpop	{d8}
 801eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eba0:	2602      	movs	r6, #2
 801eba2:	e7ec      	b.n	801eb7e <__ieee754_powf+0x8e>
 801eba4:	2d00      	cmp	r5, #0
 801eba6:	daf5      	bge.n	801eb94 <__ieee754_powf+0xa4>
 801eba8:	eeb1 0a68 	vneg.f32	s0, s17
 801ebac:	e7f4      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ebae:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801ebb2:	d102      	bne.n	801ebba <__ieee754_powf+0xca>
 801ebb4:	ee28 0a08 	vmul.f32	s0, s16, s16
 801ebb8:	e7ee      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ebba:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801ebbe:	eeb0 0a48 	vmov.f32	s0, s16
 801ebc2:	d108      	bne.n	801ebd6 <__ieee754_powf+0xe6>
 801ebc4:	f1b8 0f00 	cmp.w	r8, #0
 801ebc8:	db05      	blt.n	801ebd6 <__ieee754_powf+0xe6>
 801ebca:	ecbd 8b02 	vpop	{d8}
 801ebce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebd2:	f000 bb89 	b.w	801f2e8 <__ieee754_sqrtf>
 801ebd6:	f7ff fe07 	bl	801e7e8 <fabsf>
 801ebda:	b124      	cbz	r4, 801ebe6 <__ieee754_powf+0xf6>
 801ebdc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801ebe0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801ebe4:	d117      	bne.n	801ec16 <__ieee754_powf+0x126>
 801ebe6:	2d00      	cmp	r5, #0
 801ebe8:	bfbc      	itt	lt
 801ebea:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801ebee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801ebf2:	f1b8 0f00 	cmp.w	r8, #0
 801ebf6:	dacf      	bge.n	801eb98 <__ieee754_powf+0xa8>
 801ebf8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801ebfc:	ea54 0306 	orrs.w	r3, r4, r6
 801ec00:	d104      	bne.n	801ec0c <__ieee754_powf+0x11c>
 801ec02:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ec06:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ec0a:	e7c5      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ec0c:	2e01      	cmp	r6, #1
 801ec0e:	d1c3      	bne.n	801eb98 <__ieee754_powf+0xa8>
 801ec10:	eeb1 0a40 	vneg.f32	s0, s0
 801ec14:	e7c0      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ec16:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801ec1a:	3801      	subs	r0, #1
 801ec1c:	ea56 0300 	orrs.w	r3, r6, r0
 801ec20:	d104      	bne.n	801ec2c <__ieee754_powf+0x13c>
 801ec22:	ee38 8a48 	vsub.f32	s16, s16, s16
 801ec26:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801ec2a:	e7b5      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ec2c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801ec30:	dd6b      	ble.n	801ed0a <__ieee754_powf+0x21a>
 801ec32:	4b99      	ldr	r3, [pc, #612]	; (801ee98 <__ieee754_powf+0x3a8>)
 801ec34:	429c      	cmp	r4, r3
 801ec36:	dc06      	bgt.n	801ec46 <__ieee754_powf+0x156>
 801ec38:	2d00      	cmp	r5, #0
 801ec3a:	daab      	bge.n	801eb94 <__ieee754_powf+0xa4>
 801ec3c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801ee9c <__ieee754_powf+0x3ac>
 801ec40:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ec44:	e7a8      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ec46:	4b96      	ldr	r3, [pc, #600]	; (801eea0 <__ieee754_powf+0x3b0>)
 801ec48:	429c      	cmp	r4, r3
 801ec4a:	dd02      	ble.n	801ec52 <__ieee754_powf+0x162>
 801ec4c:	2d00      	cmp	r5, #0
 801ec4e:	dcf5      	bgt.n	801ec3c <__ieee754_powf+0x14c>
 801ec50:	e7a0      	b.n	801eb94 <__ieee754_powf+0xa4>
 801ec52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ec56:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ec5a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801eea4 <__ieee754_powf+0x3b4>
 801ec5e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801ec62:	eee0 6a67 	vfms.f32	s13, s0, s15
 801ec66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ec6a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801ec6e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ec72:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec76:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801eea8 <__ieee754_powf+0x3b8>
 801ec7a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801ec7e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801eeac <__ieee754_powf+0x3bc>
 801ec82:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ec86:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801eeb0 <__ieee754_powf+0x3c0>
 801ec8a:	eef0 6a67 	vmov.f32	s13, s15
 801ec8e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801ec92:	ee16 3a90 	vmov	r3, s13
 801ec96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ec9a:	f023 030f 	bic.w	r3, r3, #15
 801ec9e:	ee00 3a90 	vmov	s1, r3
 801eca2:	eee0 0a47 	vfms.f32	s1, s0, s14
 801eca6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801ecaa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801ecae:	f025 050f 	bic.w	r5, r5, #15
 801ecb2:	ee07 5a10 	vmov	s14, r5
 801ecb6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801ecba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801ecbe:	ee07 3a90 	vmov	s15, r3
 801ecc2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801ecc6:	3e01      	subs	r6, #1
 801ecc8:	ea56 0200 	orrs.w	r2, r6, r0
 801eccc:	ee07 5a10 	vmov	s14, r5
 801ecd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ecd4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801ecd8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801ecdc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ece0:	ee17 4a10 	vmov	r4, s14
 801ece4:	bf08      	it	eq
 801ece6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801ecea:	2c00      	cmp	r4, #0
 801ecec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ecf0:	f340 8184 	ble.w	801effc <__ieee754_powf+0x50c>
 801ecf4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801ecf8:	f340 80fc 	ble.w	801eef4 <__ieee754_powf+0x404>
 801ecfc:	eddf 7a67 	vldr	s15, [pc, #412]	; 801ee9c <__ieee754_powf+0x3ac>
 801ed00:	ee28 0a27 	vmul.f32	s0, s16, s15
 801ed04:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ed08:	e746      	b.n	801eb98 <__ieee754_powf+0xa8>
 801ed0a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801ed0e:	bf01      	itttt	eq
 801ed10:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801eeb4 <__ieee754_powf+0x3c4>
 801ed14:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801ed18:	f06f 0217 	mvneq.w	r2, #23
 801ed1c:	ee17 4a90 	vmoveq	r4, s15
 801ed20:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801ed24:	bf18      	it	ne
 801ed26:	2200      	movne	r2, #0
 801ed28:	3b7f      	subs	r3, #127	; 0x7f
 801ed2a:	4413      	add	r3, r2
 801ed2c:	4a62      	ldr	r2, [pc, #392]	; (801eeb8 <__ieee754_powf+0x3c8>)
 801ed2e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801ed32:	4294      	cmp	r4, r2
 801ed34:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801ed38:	dd06      	ble.n	801ed48 <__ieee754_powf+0x258>
 801ed3a:	4a60      	ldr	r2, [pc, #384]	; (801eebc <__ieee754_powf+0x3cc>)
 801ed3c:	4294      	cmp	r4, r2
 801ed3e:	f340 80a4 	ble.w	801ee8a <__ieee754_powf+0x39a>
 801ed42:	3301      	adds	r3, #1
 801ed44:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ed48:	2400      	movs	r4, #0
 801ed4a:	4a5d      	ldr	r2, [pc, #372]	; (801eec0 <__ieee754_powf+0x3d0>)
 801ed4c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ed50:	ee07 1a90 	vmov	s15, r1
 801ed54:	ed92 7a00 	vldr	s14, [r2]
 801ed58:	4a5a      	ldr	r2, [pc, #360]	; (801eec4 <__ieee754_powf+0x3d4>)
 801ed5a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801ed5e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ed62:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801ed66:	1049      	asrs	r1, r1, #1
 801ed68:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ed6c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ed70:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801ed74:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801ed78:	ee06 1a10 	vmov	s12, r1
 801ed7c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801ed80:	ee36 7a47 	vsub.f32	s14, s12, s14
 801ed84:	ee14 7a90 	vmov	r7, s9
 801ed88:	4017      	ands	r7, r2
 801ed8a:	ee05 7a90 	vmov	s11, r7
 801ed8e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801ed92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ed96:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801eec8 <__ieee754_powf+0x3d8>
 801ed9a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801ed9e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801eda2:	ee25 6a26 	vmul.f32	s12, s10, s13
 801eda6:	eddf 6a49 	vldr	s13, [pc, #292]	; 801eecc <__ieee754_powf+0x3dc>
 801edaa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801edae:	eddf 6a48 	vldr	s13, [pc, #288]	; 801eed0 <__ieee754_powf+0x3e0>
 801edb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801edb6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801eea4 <__ieee754_powf+0x3b4>
 801edba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801edbe:	eddf 6a45 	vldr	s13, [pc, #276]	; 801eed4 <__ieee754_powf+0x3e4>
 801edc2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801edc6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801eed8 <__ieee754_powf+0x3e8>
 801edca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801edce:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801edd2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801edd6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801edda:	eee5 6a07 	vfma.f32	s13, s10, s14
 801edde:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801ede2:	eef0 7a45 	vmov.f32	s15, s10
 801ede6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801edea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801edee:	ee17 1a90 	vmov	r1, s15
 801edf2:	4011      	ands	r1, r2
 801edf4:	ee07 1a90 	vmov	s15, r1
 801edf8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801edfc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801ee00:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ee04:	ee27 7a24 	vmul.f32	s14, s14, s9
 801ee08:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ee0c:	eeb0 6a47 	vmov.f32	s12, s14
 801ee10:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ee14:	ee16 1a10 	vmov	r1, s12
 801ee18:	4011      	ands	r1, r2
 801ee1a:	ee06 1a90 	vmov	s13, r1
 801ee1e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801ee22:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801eedc <__ieee754_powf+0x3ec>
 801ee26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801eee0 <__ieee754_powf+0x3f0>
 801ee2a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ee2e:	ee06 1a10 	vmov	s12, r1
 801ee32:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ee36:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801eee4 <__ieee754_powf+0x3f4>
 801ee3a:	492b      	ldr	r1, [pc, #172]	; (801eee8 <__ieee754_powf+0x3f8>)
 801ee3c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ee40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ee44:	edd1 7a00 	vldr	s15, [r1]
 801ee48:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee4c:	ee07 3a90 	vmov	s15, r3
 801ee50:	4b26      	ldr	r3, [pc, #152]	; (801eeec <__ieee754_powf+0x3fc>)
 801ee52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ee56:	eef0 7a47 	vmov.f32	s15, s14
 801ee5a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ee5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ee62:	edd4 0a00 	vldr	s1, [r4]
 801ee66:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ee6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee6e:	ee17 3a90 	vmov	r3, s15
 801ee72:	4013      	ands	r3, r2
 801ee74:	ee07 3a90 	vmov	s15, r3
 801ee78:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ee7c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801ee80:	eee6 6a65 	vfms.f32	s13, s12, s11
 801ee84:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ee88:	e70f      	b.n	801ecaa <__ieee754_powf+0x1ba>
 801ee8a:	2401      	movs	r4, #1
 801ee8c:	e75d      	b.n	801ed4a <__ieee754_powf+0x25a>
 801ee8e:	bf00      	nop
 801ee90:	08020740 	.word	0x08020740
 801ee94:	00000000 	.word	0x00000000
 801ee98:	3f7ffff7 	.word	0x3f7ffff7
 801ee9c:	7149f2ca 	.word	0x7149f2ca
 801eea0:	3f800007 	.word	0x3f800007
 801eea4:	3eaaaaab 	.word	0x3eaaaaab
 801eea8:	3fb8aa3b 	.word	0x3fb8aa3b
 801eeac:	36eca570 	.word	0x36eca570
 801eeb0:	3fb8aa00 	.word	0x3fb8aa00
 801eeb4:	4b800000 	.word	0x4b800000
 801eeb8:	001cc471 	.word	0x001cc471
 801eebc:	005db3d6 	.word	0x005db3d6
 801eec0:	080207dc 	.word	0x080207dc
 801eec4:	fffff000 	.word	0xfffff000
 801eec8:	3e6c3255 	.word	0x3e6c3255
 801eecc:	3e53f142 	.word	0x3e53f142
 801eed0:	3e8ba305 	.word	0x3e8ba305
 801eed4:	3edb6db7 	.word	0x3edb6db7
 801eed8:	3f19999a 	.word	0x3f19999a
 801eedc:	3f76384f 	.word	0x3f76384f
 801eee0:	3f763800 	.word	0x3f763800
 801eee4:	369dc3a0 	.word	0x369dc3a0
 801eee8:	080207ec 	.word	0x080207ec
 801eeec:	080207e4 	.word	0x080207e4
 801eef0:	3338aa3c 	.word	0x3338aa3c
 801eef4:	f040 8092 	bne.w	801f01c <__ieee754_powf+0x52c>
 801eef8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801eef0 <__ieee754_powf+0x400>
 801eefc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ef00:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ef04:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ef08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef0c:	f73f aef6 	bgt.w	801ecfc <__ieee754_powf+0x20c>
 801ef10:	15db      	asrs	r3, r3, #23
 801ef12:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801ef16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801ef1a:	4103      	asrs	r3, r0
 801ef1c:	4423      	add	r3, r4
 801ef1e:	4949      	ldr	r1, [pc, #292]	; (801f044 <__ieee754_powf+0x554>)
 801ef20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ef24:	3a7f      	subs	r2, #127	; 0x7f
 801ef26:	4111      	asrs	r1, r2
 801ef28:	ea23 0101 	bic.w	r1, r3, r1
 801ef2c:	ee07 1a10 	vmov	s14, r1
 801ef30:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801ef34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ef38:	f1c2 0217 	rsb	r2, r2, #23
 801ef3c:	4110      	asrs	r0, r2
 801ef3e:	2c00      	cmp	r4, #0
 801ef40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ef44:	bfb8      	it	lt
 801ef46:	4240      	neglt	r0, r0
 801ef48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ef4c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801f048 <__ieee754_powf+0x558>
 801ef50:	ee17 3a10 	vmov	r3, s14
 801ef54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ef58:	f023 030f 	bic.w	r3, r3, #15
 801ef5c:	ee07 3a10 	vmov	s14, r3
 801ef60:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef64:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ef68:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f04c <__ieee754_powf+0x55c>
 801ef6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef70:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ef74:	eddf 6a36 	vldr	s13, [pc, #216]	; 801f050 <__ieee754_powf+0x560>
 801ef78:	eeb0 0a67 	vmov.f32	s0, s15
 801ef7c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801ef80:	eeb0 6a40 	vmov.f32	s12, s0
 801ef84:	eea7 6a66 	vfms.f32	s12, s14, s13
 801ef88:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ef8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ef90:	eddf 6a30 	vldr	s13, [pc, #192]	; 801f054 <__ieee754_powf+0x564>
 801ef94:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801f058 <__ieee754_powf+0x568>
 801ef98:	eea7 6a26 	vfma.f32	s12, s14, s13
 801ef9c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801f05c <__ieee754_powf+0x56c>
 801efa0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801efa4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801f060 <__ieee754_powf+0x570>
 801efa8:	eea6 6a87 	vfma.f32	s12, s13, s14
 801efac:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801f064 <__ieee754_powf+0x574>
 801efb0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801efb4:	eeb0 6a40 	vmov.f32	s12, s0
 801efb8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801efbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801efc0:	eeb0 7a46 	vmov.f32	s14, s12
 801efc4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801efc8:	ee20 6a06 	vmul.f32	s12, s0, s12
 801efcc:	eee0 7a27 	vfma.f32	s15, s0, s15
 801efd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801efd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801efd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801efdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801efe0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801efe4:	ee10 3a10 	vmov	r3, s0
 801efe8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801efec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801eff0:	da1a      	bge.n	801f028 <__ieee754_powf+0x538>
 801eff2:	f7fb fd85 	bl	801ab00 <scalbnf>
 801eff6:	ee20 0a08 	vmul.f32	s0, s0, s16
 801effa:	e5cd      	b.n	801eb98 <__ieee754_powf+0xa8>
 801effc:	4a1a      	ldr	r2, [pc, #104]	; (801f068 <__ieee754_powf+0x578>)
 801effe:	4293      	cmp	r3, r2
 801f000:	dd02      	ble.n	801f008 <__ieee754_powf+0x518>
 801f002:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801f06c <__ieee754_powf+0x57c>
 801f006:	e67b      	b.n	801ed00 <__ieee754_powf+0x210>
 801f008:	d108      	bne.n	801f01c <__ieee754_powf+0x52c>
 801f00a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f00e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f016:	f6ff af7b 	blt.w	801ef10 <__ieee754_powf+0x420>
 801f01a:	e7f2      	b.n	801f002 <__ieee754_powf+0x512>
 801f01c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801f020:	f73f af76 	bgt.w	801ef10 <__ieee754_powf+0x420>
 801f024:	2000      	movs	r0, #0
 801f026:	e78f      	b.n	801ef48 <__ieee754_powf+0x458>
 801f028:	ee00 3a10 	vmov	s0, r3
 801f02c:	e7e3      	b.n	801eff6 <__ieee754_powf+0x506>
 801f02e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f032:	e5b1      	b.n	801eb98 <__ieee754_powf+0xa8>
 801f034:	eeb0 0a68 	vmov.f32	s0, s17
 801f038:	e5ae      	b.n	801eb98 <__ieee754_powf+0xa8>
 801f03a:	eeb0 0a48 	vmov.f32	s0, s16
 801f03e:	e5ab      	b.n	801eb98 <__ieee754_powf+0xa8>
 801f040:	2600      	movs	r6, #0
 801f042:	e590      	b.n	801eb66 <__ieee754_powf+0x76>
 801f044:	007fffff 	.word	0x007fffff
 801f048:	3f317218 	.word	0x3f317218
 801f04c:	35bfbe8c 	.word	0x35bfbe8c
 801f050:	3f317200 	.word	0x3f317200
 801f054:	3331bb4c 	.word	0x3331bb4c
 801f058:	b5ddea0e 	.word	0xb5ddea0e
 801f05c:	388ab355 	.word	0x388ab355
 801f060:	bb360b61 	.word	0xbb360b61
 801f064:	3e2aaaab 	.word	0x3e2aaaab
 801f068:	43160000 	.word	0x43160000
 801f06c:	0da24260 	.word	0x0da24260

0801f070 <__ieee754_rem_pio2f>:
 801f070:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f072:	ee10 6a10 	vmov	r6, s0
 801f076:	4b8e      	ldr	r3, [pc, #568]	; (801f2b0 <__ieee754_rem_pio2f+0x240>)
 801f078:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f07c:	429d      	cmp	r5, r3
 801f07e:	b087      	sub	sp, #28
 801f080:	eef0 7a40 	vmov.f32	s15, s0
 801f084:	4604      	mov	r4, r0
 801f086:	dc05      	bgt.n	801f094 <__ieee754_rem_pio2f+0x24>
 801f088:	2300      	movs	r3, #0
 801f08a:	ed80 0a00 	vstr	s0, [r0]
 801f08e:	6043      	str	r3, [r0, #4]
 801f090:	2000      	movs	r0, #0
 801f092:	e01a      	b.n	801f0ca <__ieee754_rem_pio2f+0x5a>
 801f094:	4b87      	ldr	r3, [pc, #540]	; (801f2b4 <__ieee754_rem_pio2f+0x244>)
 801f096:	429d      	cmp	r5, r3
 801f098:	dc46      	bgt.n	801f128 <__ieee754_rem_pio2f+0xb8>
 801f09a:	2e00      	cmp	r6, #0
 801f09c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801f2b8 <__ieee754_rem_pio2f+0x248>
 801f0a0:	4b86      	ldr	r3, [pc, #536]	; (801f2bc <__ieee754_rem_pio2f+0x24c>)
 801f0a2:	f025 050f 	bic.w	r5, r5, #15
 801f0a6:	dd1f      	ble.n	801f0e8 <__ieee754_rem_pio2f+0x78>
 801f0a8:	429d      	cmp	r5, r3
 801f0aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0ae:	d00e      	beq.n	801f0ce <__ieee754_rem_pio2f+0x5e>
 801f0b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f2c0 <__ieee754_rem_pio2f+0x250>
 801f0b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801f0b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0bc:	ed80 0a00 	vstr	s0, [r0]
 801f0c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f0c4:	2001      	movs	r0, #1
 801f0c6:	edc4 7a01 	vstr	s15, [r4, #4]
 801f0ca:	b007      	add	sp, #28
 801f0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f2c4 <__ieee754_rem_pio2f+0x254>
 801f0d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f2c8 <__ieee754_rem_pio2f+0x258>
 801f0d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f0de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f0e2:	edc0 6a00 	vstr	s13, [r0]
 801f0e6:	e7eb      	b.n	801f0c0 <__ieee754_rem_pio2f+0x50>
 801f0e8:	429d      	cmp	r5, r3
 801f0ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f0ee:	d00e      	beq.n	801f10e <__ieee754_rem_pio2f+0x9e>
 801f0f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f2c0 <__ieee754_rem_pio2f+0x250>
 801f0f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801f0f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801f0fc:	ed80 0a00 	vstr	s0, [r0]
 801f100:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f108:	edc4 7a01 	vstr	s15, [r4, #4]
 801f10c:	e7dd      	b.n	801f0ca <__ieee754_rem_pio2f+0x5a>
 801f10e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f2c4 <__ieee754_rem_pio2f+0x254>
 801f112:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f2c8 <__ieee754_rem_pio2f+0x258>
 801f116:	ee77 7a80 	vadd.f32	s15, s15, s0
 801f11a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f11e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f122:	edc0 6a00 	vstr	s13, [r0]
 801f126:	e7eb      	b.n	801f100 <__ieee754_rem_pio2f+0x90>
 801f128:	4b68      	ldr	r3, [pc, #416]	; (801f2cc <__ieee754_rem_pio2f+0x25c>)
 801f12a:	429d      	cmp	r5, r3
 801f12c:	dc72      	bgt.n	801f214 <__ieee754_rem_pio2f+0x1a4>
 801f12e:	f7ff fb5b 	bl	801e7e8 <fabsf>
 801f132:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f2d0 <__ieee754_rem_pio2f+0x260>
 801f136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f13a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f13e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f146:	ee17 0a90 	vmov	r0, s15
 801f14a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f2b8 <__ieee754_rem_pio2f+0x248>
 801f14e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f152:	281f      	cmp	r0, #31
 801f154:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f2c0 <__ieee754_rem_pio2f+0x250>
 801f158:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f15c:	eeb1 6a47 	vneg.f32	s12, s14
 801f160:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f164:	ee16 2a90 	vmov	r2, s13
 801f168:	dc1c      	bgt.n	801f1a4 <__ieee754_rem_pio2f+0x134>
 801f16a:	495a      	ldr	r1, [pc, #360]	; (801f2d4 <__ieee754_rem_pio2f+0x264>)
 801f16c:	1e47      	subs	r7, r0, #1
 801f16e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f172:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f176:	428b      	cmp	r3, r1
 801f178:	d014      	beq.n	801f1a4 <__ieee754_rem_pio2f+0x134>
 801f17a:	6022      	str	r2, [r4, #0]
 801f17c:	ed94 7a00 	vldr	s14, [r4]
 801f180:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f184:	2e00      	cmp	r6, #0
 801f186:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f18a:	ed84 0a01 	vstr	s0, [r4, #4]
 801f18e:	da9c      	bge.n	801f0ca <__ieee754_rem_pio2f+0x5a>
 801f190:	eeb1 7a47 	vneg.f32	s14, s14
 801f194:	eeb1 0a40 	vneg.f32	s0, s0
 801f198:	ed84 7a00 	vstr	s14, [r4]
 801f19c:	ed84 0a01 	vstr	s0, [r4, #4]
 801f1a0:	4240      	negs	r0, r0
 801f1a2:	e792      	b.n	801f0ca <__ieee754_rem_pio2f+0x5a>
 801f1a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f1a8:	15eb      	asrs	r3, r5, #23
 801f1aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801f1ae:	2d08      	cmp	r5, #8
 801f1b0:	dde3      	ble.n	801f17a <__ieee754_rem_pio2f+0x10a>
 801f1b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801f2c4 <__ieee754_rem_pio2f+0x254>
 801f1b6:	eef0 6a40 	vmov.f32	s13, s0
 801f1ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 801f1be:	ee30 0a66 	vsub.f32	s0, s0, s13
 801f1c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 801f1c6:	eddf 7a40 	vldr	s15, [pc, #256]	; 801f2c8 <__ieee754_rem_pio2f+0x258>
 801f1ca:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801f1ce:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801f1d2:	eef0 7a40 	vmov.f32	s15, s0
 801f1d6:	ee15 2a90 	vmov	r2, s11
 801f1da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f1de:	1a5b      	subs	r3, r3, r1
 801f1e0:	2b19      	cmp	r3, #25
 801f1e2:	dc04      	bgt.n	801f1ee <__ieee754_rem_pio2f+0x17e>
 801f1e4:	edc4 5a00 	vstr	s11, [r4]
 801f1e8:	eeb0 0a66 	vmov.f32	s0, s13
 801f1ec:	e7c6      	b.n	801f17c <__ieee754_rem_pio2f+0x10c>
 801f1ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f2d8 <__ieee754_rem_pio2f+0x268>
 801f1f2:	eeb0 0a66 	vmov.f32	s0, s13
 801f1f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f1fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f1fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f2dc <__ieee754_rem_pio2f+0x26c>
 801f202:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f206:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f20a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f20e:	ed84 7a00 	vstr	s14, [r4]
 801f212:	e7b3      	b.n	801f17c <__ieee754_rem_pio2f+0x10c>
 801f214:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f218:	db06      	blt.n	801f228 <__ieee754_rem_pio2f+0x1b8>
 801f21a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f21e:	edc0 7a01 	vstr	s15, [r0, #4]
 801f222:	edc0 7a00 	vstr	s15, [r0]
 801f226:	e733      	b.n	801f090 <__ieee754_rem_pio2f+0x20>
 801f228:	15ea      	asrs	r2, r5, #23
 801f22a:	3a86      	subs	r2, #134	; 0x86
 801f22c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f230:	ee07 3a90 	vmov	s15, r3
 801f234:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f238:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f2e0 <__ieee754_rem_pio2f+0x270>
 801f23c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f244:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f248:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f24c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f258:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f25c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f260:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f268:	edcd 7a05 	vstr	s15, [sp, #20]
 801f26c:	d11e      	bne.n	801f2ac <__ieee754_rem_pio2f+0x23c>
 801f26e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f276:	bf14      	ite	ne
 801f278:	2302      	movne	r3, #2
 801f27a:	2301      	moveq	r3, #1
 801f27c:	4919      	ldr	r1, [pc, #100]	; (801f2e4 <__ieee754_rem_pio2f+0x274>)
 801f27e:	9101      	str	r1, [sp, #4]
 801f280:	2102      	movs	r1, #2
 801f282:	9100      	str	r1, [sp, #0]
 801f284:	a803      	add	r0, sp, #12
 801f286:	4621      	mov	r1, r4
 801f288:	f000 f892 	bl	801f3b0 <__kernel_rem_pio2f>
 801f28c:	2e00      	cmp	r6, #0
 801f28e:	f6bf af1c 	bge.w	801f0ca <__ieee754_rem_pio2f+0x5a>
 801f292:	edd4 7a00 	vldr	s15, [r4]
 801f296:	eef1 7a67 	vneg.f32	s15, s15
 801f29a:	edc4 7a00 	vstr	s15, [r4]
 801f29e:	edd4 7a01 	vldr	s15, [r4, #4]
 801f2a2:	eef1 7a67 	vneg.f32	s15, s15
 801f2a6:	edc4 7a01 	vstr	s15, [r4, #4]
 801f2aa:	e779      	b.n	801f1a0 <__ieee754_rem_pio2f+0x130>
 801f2ac:	2303      	movs	r3, #3
 801f2ae:	e7e5      	b.n	801f27c <__ieee754_rem_pio2f+0x20c>
 801f2b0:	3f490fd8 	.word	0x3f490fd8
 801f2b4:	4016cbe3 	.word	0x4016cbe3
 801f2b8:	3fc90f80 	.word	0x3fc90f80
 801f2bc:	3fc90fd0 	.word	0x3fc90fd0
 801f2c0:	37354443 	.word	0x37354443
 801f2c4:	37354400 	.word	0x37354400
 801f2c8:	2e85a308 	.word	0x2e85a308
 801f2cc:	43490f80 	.word	0x43490f80
 801f2d0:	3f22f984 	.word	0x3f22f984
 801f2d4:	080207f4 	.word	0x080207f4
 801f2d8:	2e85a300 	.word	0x2e85a300
 801f2dc:	248d3132 	.word	0x248d3132
 801f2e0:	43800000 	.word	0x43800000
 801f2e4:	08020874 	.word	0x08020874

0801f2e8 <__ieee754_sqrtf>:
 801f2e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f2ec:	4770      	bx	lr
	...

0801f2f0 <__kernel_cosf>:
 801f2f0:	ee10 3a10 	vmov	r3, s0
 801f2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f2f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f2fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f300:	da05      	bge.n	801f30e <__kernel_cosf+0x1e>
 801f302:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f306:	ee17 2a90 	vmov	r2, s15
 801f30a:	2a00      	cmp	r2, #0
 801f30c:	d03d      	beq.n	801f38a <__kernel_cosf+0x9a>
 801f30e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801f312:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f390 <__kernel_cosf+0xa0>
 801f316:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801f394 <__kernel_cosf+0xa4>
 801f31a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801f398 <__kernel_cosf+0xa8>
 801f31e:	4a1f      	ldr	r2, [pc, #124]	; (801f39c <__kernel_cosf+0xac>)
 801f320:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f324:	4293      	cmp	r3, r2
 801f326:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f3a0 <__kernel_cosf+0xb0>
 801f32a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f32e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801f3a4 <__kernel_cosf+0xb4>
 801f332:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f336:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f3a8 <__kernel_cosf+0xb8>
 801f33a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f33e:	eeb0 7a66 	vmov.f32	s14, s13
 801f342:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f346:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f34a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801f34e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801f352:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801f356:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f35a:	dc04      	bgt.n	801f366 <__kernel_cosf+0x76>
 801f35c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801f360:	ee36 0a47 	vsub.f32	s0, s12, s14
 801f364:	4770      	bx	lr
 801f366:	4a11      	ldr	r2, [pc, #68]	; (801f3ac <__kernel_cosf+0xbc>)
 801f368:	4293      	cmp	r3, r2
 801f36a:	bfda      	itte	le
 801f36c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f370:	ee06 3a90 	vmovle	s13, r3
 801f374:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801f378:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f37c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801f380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f384:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f388:	4770      	bx	lr
 801f38a:	eeb0 0a46 	vmov.f32	s0, s12
 801f38e:	4770      	bx	lr
 801f390:	ad47d74e 	.word	0xad47d74e
 801f394:	310f74f6 	.word	0x310f74f6
 801f398:	3d2aaaab 	.word	0x3d2aaaab
 801f39c:	3e999999 	.word	0x3e999999
 801f3a0:	b493f27c 	.word	0xb493f27c
 801f3a4:	37d00d01 	.word	0x37d00d01
 801f3a8:	bab60b61 	.word	0xbab60b61
 801f3ac:	3f480000 	.word	0x3f480000

0801f3b0 <__kernel_rem_pio2f>:
 801f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b4:	ed2d 8b04 	vpush	{d8-d9}
 801f3b8:	b0d7      	sub	sp, #348	; 0x15c
 801f3ba:	4616      	mov	r6, r2
 801f3bc:	4698      	mov	r8, r3
 801f3be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f3c0:	4bbb      	ldr	r3, [pc, #748]	; (801f6b0 <__kernel_rem_pio2f+0x300>)
 801f3c2:	9001      	str	r0, [sp, #4]
 801f3c4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801f3c8:	1d33      	adds	r3, r6, #4
 801f3ca:	460d      	mov	r5, r1
 801f3cc:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801f3d0:	db29      	blt.n	801f426 <__kernel_rem_pio2f+0x76>
 801f3d2:	1ef1      	subs	r1, r6, #3
 801f3d4:	bf48      	it	mi
 801f3d6:	1d31      	addmi	r1, r6, #4
 801f3d8:	10c9      	asrs	r1, r1, #3
 801f3da:	1c4c      	adds	r4, r1, #1
 801f3dc:	00e3      	lsls	r3, r4, #3
 801f3de:	9302      	str	r3, [sp, #8]
 801f3e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f3e2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f3e6:	eba1 0009 	sub.w	r0, r1, r9
 801f3ea:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801f3ee:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801f3f2:	eb07 0c09 	add.w	ip, r7, r9
 801f3f6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801f3fa:	2300      	movs	r3, #0
 801f3fc:	4563      	cmp	r3, ip
 801f3fe:	dd14      	ble.n	801f42a <__kernel_rem_pio2f+0x7a>
 801f400:	ab1a      	add	r3, sp, #104	; 0x68
 801f402:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801f406:	46cc      	mov	ip, r9
 801f408:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801f40c:	f1c8 0b01 	rsb	fp, r8, #1
 801f410:	eb0b 020c 	add.w	r2, fp, ip
 801f414:	4297      	cmp	r7, r2
 801f416:	db27      	blt.n	801f468 <__kernel_rem_pio2f+0xb8>
 801f418:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f41c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f420:	4618      	mov	r0, r3
 801f422:	2200      	movs	r2, #0
 801f424:	e016      	b.n	801f454 <__kernel_rem_pio2f+0xa4>
 801f426:	2100      	movs	r1, #0
 801f428:	e7d7      	b.n	801f3da <__kernel_rem_pio2f+0x2a>
 801f42a:	42d8      	cmn	r0, r3
 801f42c:	bf5d      	ittte	pl
 801f42e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801f432:	ee07 2a90 	vmovpl	s15, r2
 801f436:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f43a:	eef0 7a47 	vmovmi.f32	s15, s14
 801f43e:	ecea 7a01 	vstmia	sl!, {s15}
 801f442:	3301      	adds	r3, #1
 801f444:	e7da      	b.n	801f3fc <__kernel_rem_pio2f+0x4c>
 801f446:	ecfe 6a01 	vldmia	lr!, {s13}
 801f44a:	ed90 7a00 	vldr	s14, [r0]
 801f44e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f452:	3201      	adds	r2, #1
 801f454:	454a      	cmp	r2, r9
 801f456:	f1a0 0004 	sub.w	r0, r0, #4
 801f45a:	ddf4      	ble.n	801f446 <__kernel_rem_pio2f+0x96>
 801f45c:	ecea 7a01 	vstmia	sl!, {s15}
 801f460:	3304      	adds	r3, #4
 801f462:	f10c 0c01 	add.w	ip, ip, #1
 801f466:	e7d3      	b.n	801f410 <__kernel_rem_pio2f+0x60>
 801f468:	ab06      	add	r3, sp, #24
 801f46a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801f46e:	9304      	str	r3, [sp, #16]
 801f470:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f472:	eddf 8a92 	vldr	s17, [pc, #584]	; 801f6bc <__kernel_rem_pio2f+0x30c>
 801f476:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801f6b8 <__kernel_rem_pio2f+0x308>
 801f47a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f47e:	9303      	str	r3, [sp, #12]
 801f480:	46ba      	mov	sl, r7
 801f482:	ab56      	add	r3, sp, #344	; 0x158
 801f484:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f488:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801f48c:	ab06      	add	r3, sp, #24
 801f48e:	4618      	mov	r0, r3
 801f490:	4652      	mov	r2, sl
 801f492:	2a00      	cmp	r2, #0
 801f494:	dc51      	bgt.n	801f53a <__kernel_rem_pio2f+0x18a>
 801f496:	4620      	mov	r0, r4
 801f498:	9305      	str	r3, [sp, #20]
 801f49a:	f7fb fb31 	bl	801ab00 <scalbnf>
 801f49e:	eeb0 8a40 	vmov.f32	s16, s0
 801f4a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f4a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f4aa:	f000 fa53 	bl	801f954 <floorf>
 801f4ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f4b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f4b6:	2c00      	cmp	r4, #0
 801f4b8:	9b05      	ldr	r3, [sp, #20]
 801f4ba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f4be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f4c2:	edcd 7a00 	vstr	s15, [sp]
 801f4c6:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f4ca:	dd4b      	ble.n	801f564 <__kernel_rem_pio2f+0x1b4>
 801f4cc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f4d0:	aa06      	add	r2, sp, #24
 801f4d2:	f1c4 0e08 	rsb	lr, r4, #8
 801f4d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f4da:	ee17 1a90 	vmov	r1, s15
 801f4de:	fa42 f00e 	asr.w	r0, r2, lr
 801f4e2:	4401      	add	r1, r0
 801f4e4:	9100      	str	r1, [sp, #0]
 801f4e6:	fa00 f00e 	lsl.w	r0, r0, lr
 801f4ea:	a906      	add	r1, sp, #24
 801f4ec:	1a12      	subs	r2, r2, r0
 801f4ee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f4f2:	f1c4 0007 	rsb	r0, r4, #7
 801f4f6:	fa42 fb00 	asr.w	fp, r2, r0
 801f4fa:	f1bb 0f00 	cmp.w	fp, #0
 801f4fe:	dd43      	ble.n	801f588 <__kernel_rem_pio2f+0x1d8>
 801f500:	9a00      	ldr	r2, [sp, #0]
 801f502:	f04f 0e00 	mov.w	lr, #0
 801f506:	3201      	adds	r2, #1
 801f508:	9200      	str	r2, [sp, #0]
 801f50a:	4670      	mov	r0, lr
 801f50c:	45f2      	cmp	sl, lr
 801f50e:	dc6c      	bgt.n	801f5ea <__kernel_rem_pio2f+0x23a>
 801f510:	2c00      	cmp	r4, #0
 801f512:	dd04      	ble.n	801f51e <__kernel_rem_pio2f+0x16e>
 801f514:	2c01      	cmp	r4, #1
 801f516:	d079      	beq.n	801f60c <__kernel_rem_pio2f+0x25c>
 801f518:	2c02      	cmp	r4, #2
 801f51a:	f000 8082 	beq.w	801f622 <__kernel_rem_pio2f+0x272>
 801f51e:	f1bb 0f02 	cmp.w	fp, #2
 801f522:	d131      	bne.n	801f588 <__kernel_rem_pio2f+0x1d8>
 801f524:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f528:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f52c:	b360      	cbz	r0, 801f588 <__kernel_rem_pio2f+0x1d8>
 801f52e:	4620      	mov	r0, r4
 801f530:	f7fb fae6 	bl	801ab00 <scalbnf>
 801f534:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f538:	e026      	b.n	801f588 <__kernel_rem_pio2f+0x1d8>
 801f53a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f53e:	3a01      	subs	r2, #1
 801f540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f544:	a942      	add	r1, sp, #264	; 0x108
 801f546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f54a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801f54e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f552:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f556:	eca0 0a01 	vstmia	r0!, {s0}
 801f55a:	ed9c 0a00 	vldr	s0, [ip]
 801f55e:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f562:	e796      	b.n	801f492 <__kernel_rem_pio2f+0xe2>
 801f564:	d107      	bne.n	801f576 <__kernel_rem_pio2f+0x1c6>
 801f566:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801f56a:	a906      	add	r1, sp, #24
 801f56c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f570:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801f574:	e7c1      	b.n	801f4fa <__kernel_rem_pio2f+0x14a>
 801f576:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f57a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f582:	da2f      	bge.n	801f5e4 <__kernel_rem_pio2f+0x234>
 801f584:	f04f 0b00 	mov.w	fp, #0
 801f588:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f590:	f040 8098 	bne.w	801f6c4 <__kernel_rem_pio2f+0x314>
 801f594:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f598:	469c      	mov	ip, r3
 801f59a:	2200      	movs	r2, #0
 801f59c:	45bc      	cmp	ip, r7
 801f59e:	da48      	bge.n	801f632 <__kernel_rem_pio2f+0x282>
 801f5a0:	2a00      	cmp	r2, #0
 801f5a2:	d05f      	beq.n	801f664 <__kernel_rem_pio2f+0x2b4>
 801f5a4:	aa06      	add	r2, sp, #24
 801f5a6:	3c08      	subs	r4, #8
 801f5a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f5ac:	2900      	cmp	r1, #0
 801f5ae:	d07d      	beq.n	801f6ac <__kernel_rem_pio2f+0x2fc>
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f5b6:	9301      	str	r3, [sp, #4]
 801f5b8:	f7fb faa2 	bl	801ab00 <scalbnf>
 801f5bc:	9b01      	ldr	r3, [sp, #4]
 801f5be:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801f6bc <__kernel_rem_pio2f+0x30c>
 801f5c2:	4619      	mov	r1, r3
 801f5c4:	2900      	cmp	r1, #0
 801f5c6:	f280 80af 	bge.w	801f728 <__kernel_rem_pio2f+0x378>
 801f5ca:	4618      	mov	r0, r3
 801f5cc:	2400      	movs	r4, #0
 801f5ce:	2800      	cmp	r0, #0
 801f5d0:	f2c0 80d0 	blt.w	801f774 <__kernel_rem_pio2f+0x3c4>
 801f5d4:	a942      	add	r1, sp, #264	; 0x108
 801f5d6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801f5da:	4a36      	ldr	r2, [pc, #216]	; (801f6b4 <__kernel_rem_pio2f+0x304>)
 801f5dc:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f5e0:	2100      	movs	r1, #0
 801f5e2:	e0bb      	b.n	801f75c <__kernel_rem_pio2f+0x3ac>
 801f5e4:	f04f 0b02 	mov.w	fp, #2
 801f5e8:	e78a      	b.n	801f500 <__kernel_rem_pio2f+0x150>
 801f5ea:	681a      	ldr	r2, [r3, #0]
 801f5ec:	b948      	cbnz	r0, 801f602 <__kernel_rem_pio2f+0x252>
 801f5ee:	b11a      	cbz	r2, 801f5f8 <__kernel_rem_pio2f+0x248>
 801f5f0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f5f4:	601a      	str	r2, [r3, #0]
 801f5f6:	2201      	movs	r2, #1
 801f5f8:	f10e 0e01 	add.w	lr, lr, #1
 801f5fc:	3304      	adds	r3, #4
 801f5fe:	4610      	mov	r0, r2
 801f600:	e784      	b.n	801f50c <__kernel_rem_pio2f+0x15c>
 801f602:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f606:	601a      	str	r2, [r3, #0]
 801f608:	4602      	mov	r2, r0
 801f60a:	e7f5      	b.n	801f5f8 <__kernel_rem_pio2f+0x248>
 801f60c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f610:	ab06      	add	r3, sp, #24
 801f612:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f61a:	aa06      	add	r2, sp, #24
 801f61c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801f620:	e77d      	b.n	801f51e <__kernel_rem_pio2f+0x16e>
 801f622:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f626:	ab06      	add	r3, sp, #24
 801f628:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f630:	e7f3      	b.n	801f61a <__kernel_rem_pio2f+0x26a>
 801f632:	a906      	add	r1, sp, #24
 801f634:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801f638:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f63c:	4302      	orrs	r2, r0
 801f63e:	e7ad      	b.n	801f59c <__kernel_rem_pio2f+0x1ec>
 801f640:	3001      	adds	r0, #1
 801f642:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f646:	2a00      	cmp	r2, #0
 801f648:	d0fa      	beq.n	801f640 <__kernel_rem_pio2f+0x290>
 801f64a:	a91a      	add	r1, sp, #104	; 0x68
 801f64c:	eb0a 0208 	add.w	r2, sl, r8
 801f650:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f654:	f10a 0301 	add.w	r3, sl, #1
 801f658:	eb0a 0100 	add.w	r1, sl, r0
 801f65c:	4299      	cmp	r1, r3
 801f65e:	da04      	bge.n	801f66a <__kernel_rem_pio2f+0x2ba>
 801f660:	468a      	mov	sl, r1
 801f662:	e70e      	b.n	801f482 <__kernel_rem_pio2f+0xd2>
 801f664:	9b04      	ldr	r3, [sp, #16]
 801f666:	2001      	movs	r0, #1
 801f668:	e7eb      	b.n	801f642 <__kernel_rem_pio2f+0x292>
 801f66a:	9803      	ldr	r0, [sp, #12]
 801f66c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f670:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f674:	9000      	str	r0, [sp, #0]
 801f676:	ee07 0a90 	vmov	s15, r0
 801f67a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f67e:	2000      	movs	r0, #0
 801f680:	ece2 7a01 	vstmia	r2!, {s15}
 801f684:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f688:	4696      	mov	lr, r2
 801f68a:	4548      	cmp	r0, r9
 801f68c:	dd06      	ble.n	801f69c <__kernel_rem_pio2f+0x2ec>
 801f68e:	a842      	add	r0, sp, #264	; 0x108
 801f690:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f694:	edc0 7a00 	vstr	s15, [r0]
 801f698:	3301      	adds	r3, #1
 801f69a:	e7df      	b.n	801f65c <__kernel_rem_pio2f+0x2ac>
 801f69c:	ecfc 6a01 	vldmia	ip!, {s13}
 801f6a0:	ed3e 7a01 	vldmdb	lr!, {s14}
 801f6a4:	3001      	adds	r0, #1
 801f6a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f6aa:	e7ee      	b.n	801f68a <__kernel_rem_pio2f+0x2da>
 801f6ac:	3b01      	subs	r3, #1
 801f6ae:	e779      	b.n	801f5a4 <__kernel_rem_pio2f+0x1f4>
 801f6b0:	08020bb8 	.word	0x08020bb8
 801f6b4:	08020b8c 	.word	0x08020b8c
 801f6b8:	43800000 	.word	0x43800000
 801f6bc:	3b800000 	.word	0x3b800000
 801f6c0:	00000000 	.word	0x00000000
 801f6c4:	9b02      	ldr	r3, [sp, #8]
 801f6c6:	eeb0 0a48 	vmov.f32	s0, s16
 801f6ca:	1b98      	subs	r0, r3, r6
 801f6cc:	f7fb fa18 	bl	801ab00 <scalbnf>
 801f6d0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f6b8 <__kernel_rem_pio2f+0x308>
 801f6d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6dc:	db1b      	blt.n	801f716 <__kernel_rem_pio2f+0x366>
 801f6de:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f6bc <__kernel_rem_pio2f+0x30c>
 801f6e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f6e6:	aa06      	add	r2, sp, #24
 801f6e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f6ec:	a906      	add	r1, sp, #24
 801f6ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6f2:	3408      	adds	r4, #8
 801f6f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f6f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f6fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f700:	ee10 3a10 	vmov	r3, s0
 801f704:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f708:	ee17 2a90 	vmov	r2, s15
 801f70c:	f10a 0301 	add.w	r3, sl, #1
 801f710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f714:	e74c      	b.n	801f5b0 <__kernel_rem_pio2f+0x200>
 801f716:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f71a:	aa06      	add	r2, sp, #24
 801f71c:	ee10 3a10 	vmov	r3, s0
 801f720:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f724:	4653      	mov	r3, sl
 801f726:	e743      	b.n	801f5b0 <__kernel_rem_pio2f+0x200>
 801f728:	aa42      	add	r2, sp, #264	; 0x108
 801f72a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f72e:	aa06      	add	r2, sp, #24
 801f730:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801f734:	9201      	str	r2, [sp, #4]
 801f736:	ee07 2a90 	vmov	s15, r2
 801f73a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f73e:	3901      	subs	r1, #1
 801f740:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f744:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f748:	edc0 7a00 	vstr	s15, [r0]
 801f74c:	e73a      	b.n	801f5c4 <__kernel_rem_pio2f+0x214>
 801f74e:	ecf2 6a01 	vldmia	r2!, {s13}
 801f752:	ecb6 7a01 	vldmia	r6!, {s14}
 801f756:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f75a:	3101      	adds	r1, #1
 801f75c:	42b9      	cmp	r1, r7
 801f75e:	dc01      	bgt.n	801f764 <__kernel_rem_pio2f+0x3b4>
 801f760:	428c      	cmp	r4, r1
 801f762:	daf4      	bge.n	801f74e <__kernel_rem_pio2f+0x39e>
 801f764:	aa56      	add	r2, sp, #344	; 0x158
 801f766:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801f76a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f76e:	3801      	subs	r0, #1
 801f770:	3401      	adds	r4, #1
 801f772:	e72c      	b.n	801f5ce <__kernel_rem_pio2f+0x21e>
 801f774:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f776:	2a02      	cmp	r2, #2
 801f778:	dc0a      	bgt.n	801f790 <__kernel_rem_pio2f+0x3e0>
 801f77a:	2a00      	cmp	r2, #0
 801f77c:	dc61      	bgt.n	801f842 <__kernel_rem_pio2f+0x492>
 801f77e:	d03c      	beq.n	801f7fa <__kernel_rem_pio2f+0x44a>
 801f780:	9b00      	ldr	r3, [sp, #0]
 801f782:	f003 0007 	and.w	r0, r3, #7
 801f786:	b057      	add	sp, #348	; 0x15c
 801f788:	ecbd 8b04 	vpop	{d8-d9}
 801f78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f790:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f792:	2a03      	cmp	r2, #3
 801f794:	d1f4      	bne.n	801f780 <__kernel_rem_pio2f+0x3d0>
 801f796:	aa2e      	add	r2, sp, #184	; 0xb8
 801f798:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f79c:	4608      	mov	r0, r1
 801f79e:	461c      	mov	r4, r3
 801f7a0:	2c00      	cmp	r4, #0
 801f7a2:	f1a0 0004 	sub.w	r0, r0, #4
 801f7a6:	dc59      	bgt.n	801f85c <__kernel_rem_pio2f+0x4ac>
 801f7a8:	4618      	mov	r0, r3
 801f7aa:	2801      	cmp	r0, #1
 801f7ac:	f1a1 0104 	sub.w	r1, r1, #4
 801f7b0:	dc64      	bgt.n	801f87c <__kernel_rem_pio2f+0x4cc>
 801f7b2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f7b6:	2b01      	cmp	r3, #1
 801f7b8:	dc70      	bgt.n	801f89c <__kernel_rem_pio2f+0x4ec>
 801f7ba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801f7be:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801f7c2:	f1bb 0f00 	cmp.w	fp, #0
 801f7c6:	d172      	bne.n	801f8ae <__kernel_rem_pio2f+0x4fe>
 801f7c8:	edc5 6a00 	vstr	s13, [r5]
 801f7cc:	ed85 7a01 	vstr	s14, [r5, #4]
 801f7d0:	edc5 7a02 	vstr	s15, [r5, #8]
 801f7d4:	e7d4      	b.n	801f780 <__kernel_rem_pio2f+0x3d0>
 801f7d6:	aa2e      	add	r2, sp, #184	; 0xb8
 801f7d8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f7dc:	ed91 7a00 	vldr	s14, [r1]
 801f7e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f7e4:	3b01      	subs	r3, #1
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	daf5      	bge.n	801f7d6 <__kernel_rem_pio2f+0x426>
 801f7ea:	f1bb 0f00 	cmp.w	fp, #0
 801f7ee:	d001      	beq.n	801f7f4 <__kernel_rem_pio2f+0x444>
 801f7f0:	eef1 7a67 	vneg.f32	s15, s15
 801f7f4:	edc5 7a00 	vstr	s15, [r5]
 801f7f8:	e7c2      	b.n	801f780 <__kernel_rem_pio2f+0x3d0>
 801f7fa:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f7fe:	e7f2      	b.n	801f7e6 <__kernel_rem_pio2f+0x436>
 801f800:	aa2e      	add	r2, sp, #184	; 0xb8
 801f802:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f806:	edd0 7a00 	vldr	s15, [r0]
 801f80a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f80e:	3901      	subs	r1, #1
 801f810:	2900      	cmp	r1, #0
 801f812:	daf5      	bge.n	801f800 <__kernel_rem_pio2f+0x450>
 801f814:	f1bb 0f00 	cmp.w	fp, #0
 801f818:	d017      	beq.n	801f84a <__kernel_rem_pio2f+0x49a>
 801f81a:	eef1 7a47 	vneg.f32	s15, s14
 801f81e:	edc5 7a00 	vstr	s15, [r5]
 801f822:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801f826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f82a:	a82f      	add	r0, sp, #188	; 0xbc
 801f82c:	2101      	movs	r1, #1
 801f82e:	428b      	cmp	r3, r1
 801f830:	da0e      	bge.n	801f850 <__kernel_rem_pio2f+0x4a0>
 801f832:	f1bb 0f00 	cmp.w	fp, #0
 801f836:	d001      	beq.n	801f83c <__kernel_rem_pio2f+0x48c>
 801f838:	eef1 7a67 	vneg.f32	s15, s15
 801f83c:	edc5 7a01 	vstr	s15, [r5, #4]
 801f840:	e79e      	b.n	801f780 <__kernel_rem_pio2f+0x3d0>
 801f842:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801f6c0 <__kernel_rem_pio2f+0x310>
 801f846:	4619      	mov	r1, r3
 801f848:	e7e2      	b.n	801f810 <__kernel_rem_pio2f+0x460>
 801f84a:	eef0 7a47 	vmov.f32	s15, s14
 801f84e:	e7e6      	b.n	801f81e <__kernel_rem_pio2f+0x46e>
 801f850:	ecb0 7a01 	vldmia	r0!, {s14}
 801f854:	3101      	adds	r1, #1
 801f856:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f85a:	e7e8      	b.n	801f82e <__kernel_rem_pio2f+0x47e>
 801f85c:	edd0 7a00 	vldr	s15, [r0]
 801f860:	edd0 6a01 	vldr	s13, [r0, #4]
 801f864:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f868:	3c01      	subs	r4, #1
 801f86a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f86e:	ed80 7a00 	vstr	s14, [r0]
 801f872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f876:	edc0 7a01 	vstr	s15, [r0, #4]
 801f87a:	e791      	b.n	801f7a0 <__kernel_rem_pio2f+0x3f0>
 801f87c:	edd1 7a00 	vldr	s15, [r1]
 801f880:	edd1 6a01 	vldr	s13, [r1, #4]
 801f884:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f888:	3801      	subs	r0, #1
 801f88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f88e:	ed81 7a00 	vstr	s14, [r1]
 801f892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f896:	edc1 7a01 	vstr	s15, [r1, #4]
 801f89a:	e786      	b.n	801f7aa <__kernel_rem_pio2f+0x3fa>
 801f89c:	aa2e      	add	r2, sp, #184	; 0xb8
 801f89e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f8a2:	ed91 7a00 	vldr	s14, [r1]
 801f8a6:	3b01      	subs	r3, #1
 801f8a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f8ac:	e783      	b.n	801f7b6 <__kernel_rem_pio2f+0x406>
 801f8ae:	eef1 6a66 	vneg.f32	s13, s13
 801f8b2:	eeb1 7a47 	vneg.f32	s14, s14
 801f8b6:	edc5 6a00 	vstr	s13, [r5]
 801f8ba:	ed85 7a01 	vstr	s14, [r5, #4]
 801f8be:	eef1 7a67 	vneg.f32	s15, s15
 801f8c2:	e785      	b.n	801f7d0 <__kernel_rem_pio2f+0x420>

0801f8c4 <__kernel_sinf>:
 801f8c4:	ee10 3a10 	vmov	r3, s0
 801f8c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f8cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f8d0:	da04      	bge.n	801f8dc <__kernel_sinf+0x18>
 801f8d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f8d6:	ee17 3a90 	vmov	r3, s15
 801f8da:	b35b      	cbz	r3, 801f934 <__kernel_sinf+0x70>
 801f8dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f8e0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f938 <__kernel_sinf+0x74>
 801f8e4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f93c <__kernel_sinf+0x78>
 801f8e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f8ec:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f940 <__kernel_sinf+0x7c>
 801f8f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f8f4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f944 <__kernel_sinf+0x80>
 801f8f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f8fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f948 <__kernel_sinf+0x84>
 801f900:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f904:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f908:	b930      	cbnz	r0, 801f918 <__kernel_sinf+0x54>
 801f90a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f94c <__kernel_sinf+0x88>
 801f90e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f912:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f916:	4770      	bx	lr
 801f918:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f91c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f920:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f924:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f928:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f950 <__kernel_sinf+0x8c>
 801f92c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f930:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f934:	4770      	bx	lr
 801f936:	bf00      	nop
 801f938:	2f2ec9d3 	.word	0x2f2ec9d3
 801f93c:	b2d72f34 	.word	0xb2d72f34
 801f940:	3638ef1b 	.word	0x3638ef1b
 801f944:	b9500d01 	.word	0xb9500d01
 801f948:	3c088889 	.word	0x3c088889
 801f94c:	be2aaaab 	.word	0xbe2aaaab
 801f950:	3e2aaaab 	.word	0x3e2aaaab

0801f954 <floorf>:
 801f954:	ee10 3a10 	vmov	r3, s0
 801f958:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f95c:	3a7f      	subs	r2, #127	; 0x7f
 801f95e:	2a16      	cmp	r2, #22
 801f960:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f964:	dc2a      	bgt.n	801f9bc <floorf+0x68>
 801f966:	2a00      	cmp	r2, #0
 801f968:	da11      	bge.n	801f98e <floorf+0x3a>
 801f96a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f9cc <floorf+0x78>
 801f96e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f972:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f97a:	dd05      	ble.n	801f988 <floorf+0x34>
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	da23      	bge.n	801f9c8 <floorf+0x74>
 801f980:	4a13      	ldr	r2, [pc, #76]	; (801f9d0 <floorf+0x7c>)
 801f982:	2900      	cmp	r1, #0
 801f984:	bf18      	it	ne
 801f986:	4613      	movne	r3, r2
 801f988:	ee00 3a10 	vmov	s0, r3
 801f98c:	4770      	bx	lr
 801f98e:	4911      	ldr	r1, [pc, #68]	; (801f9d4 <floorf+0x80>)
 801f990:	4111      	asrs	r1, r2
 801f992:	420b      	tst	r3, r1
 801f994:	d0fa      	beq.n	801f98c <floorf+0x38>
 801f996:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f9cc <floorf+0x78>
 801f99a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f99e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9a6:	ddef      	ble.n	801f988 <floorf+0x34>
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	bfbe      	ittt	lt
 801f9ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f9b0:	fa40 f202 	asrlt.w	r2, r0, r2
 801f9b4:	189b      	addlt	r3, r3, r2
 801f9b6:	ea23 0301 	bic.w	r3, r3, r1
 801f9ba:	e7e5      	b.n	801f988 <floorf+0x34>
 801f9bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f9c0:	d3e4      	bcc.n	801f98c <floorf+0x38>
 801f9c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f9c6:	4770      	bx	lr
 801f9c8:	2300      	movs	r3, #0
 801f9ca:	e7dd      	b.n	801f988 <floorf+0x34>
 801f9cc:	7149f2ca 	.word	0x7149f2ca
 801f9d0:	bf800000 	.word	0xbf800000
 801f9d4:	007fffff 	.word	0x007fffff

0801f9d8 <rintf>:
 801f9d8:	ee10 2a10 	vmov	r2, s0
 801f9dc:	b513      	push	{r0, r1, r4, lr}
 801f9de:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f9e2:	397f      	subs	r1, #127	; 0x7f
 801f9e4:	2916      	cmp	r1, #22
 801f9e6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f9ea:	dc47      	bgt.n	801fa7c <rintf+0xa4>
 801f9ec:	b32b      	cbz	r3, 801fa3a <rintf+0x62>
 801f9ee:	2900      	cmp	r1, #0
 801f9f0:	ee10 3a10 	vmov	r3, s0
 801f9f4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801f9f8:	da21      	bge.n	801fa3e <rintf+0x66>
 801f9fa:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801f9fe:	425b      	negs	r3, r3
 801fa00:	4921      	ldr	r1, [pc, #132]	; (801fa88 <rintf+0xb0>)
 801fa02:	0a5b      	lsrs	r3, r3, #9
 801fa04:	0d12      	lsrs	r2, r2, #20
 801fa06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fa0a:	0512      	lsls	r2, r2, #20
 801fa0c:	4313      	orrs	r3, r2
 801fa0e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801fa12:	ee07 3a90 	vmov	s15, r3
 801fa16:	edd1 6a00 	vldr	s13, [r1]
 801fa1a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801fa1e:	ed8d 7a01 	vstr	s14, [sp, #4]
 801fa22:	eddd 7a01 	vldr	s15, [sp, #4]
 801fa26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fa2a:	ee17 3a90 	vmov	r3, s15
 801fa2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fa32:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801fa36:	ee00 3a10 	vmov	s0, r3
 801fa3a:	b002      	add	sp, #8
 801fa3c:	bd10      	pop	{r4, pc}
 801fa3e:	4a13      	ldr	r2, [pc, #76]	; (801fa8c <rintf+0xb4>)
 801fa40:	410a      	asrs	r2, r1
 801fa42:	4213      	tst	r3, r2
 801fa44:	d0f9      	beq.n	801fa3a <rintf+0x62>
 801fa46:	0854      	lsrs	r4, r2, #1
 801fa48:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801fa4c:	d006      	beq.n	801fa5c <rintf+0x84>
 801fa4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801fa52:	ea23 0304 	bic.w	r3, r3, r4
 801fa56:	fa42 f101 	asr.w	r1, r2, r1
 801fa5a:	430b      	orrs	r3, r1
 801fa5c:	4a0a      	ldr	r2, [pc, #40]	; (801fa88 <rintf+0xb0>)
 801fa5e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801fa62:	ed90 7a00 	vldr	s14, [r0]
 801fa66:	ee07 3a90 	vmov	s15, r3
 801fa6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fa6e:	edcd 7a01 	vstr	s15, [sp, #4]
 801fa72:	ed9d 0a01 	vldr	s0, [sp, #4]
 801fa76:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fa7a:	e7de      	b.n	801fa3a <rintf+0x62>
 801fa7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801fa80:	d3db      	bcc.n	801fa3a <rintf+0x62>
 801fa82:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fa86:	e7d8      	b.n	801fa3a <rintf+0x62>
 801fa88:	08020bc4 	.word	0x08020bc4
 801fa8c:	007fffff 	.word	0x007fffff

0801fa90 <_init>:
 801fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa92:	bf00      	nop
 801fa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa96:	bc08      	pop	{r3}
 801fa98:	469e      	mov	lr, r3
 801fa9a:	4770      	bx	lr

0801fa9c <_fini>:
 801fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa9e:	bf00      	nop
 801faa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801faa2:	bc08      	pop	{r3}
 801faa4:	469e      	mov	lr, r3
 801faa6:	4770      	bx	lr
