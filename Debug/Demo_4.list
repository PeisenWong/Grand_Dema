
Demo_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012bc  0801f8c8  0801f8c8  0002f8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020b84  08020b84  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08020b84  08020b84  00030b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020b8c  08020b8c  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020b8c  08020b8c  00030b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020b90  08020b90  00030b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08020b94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a468  200002a0  08020e30  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000a708  08020e30  0004a708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a7295  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a3b6  00000000  00000000  000e7561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002858  00000000  00000000  000f1918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025b8  00000000  00000000  000f4170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031721  00000000  00000000  000f6728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ec4  00000000  00000000  00127e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb307  00000000  00000000  0016ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025a014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bfec  00000000  00000000  0025a068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f8b0 	.word	0x0801f8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	0801f8b0 	.word	0x0801f8b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f010 ffee 	bl	80121d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f010 ffe6 	bl	80121d4 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f010 ff91 	bl	80121d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f010 ff89 	bl	80121d4 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f010 fbd8 	bl	8011c74 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f013 fc14 	bl	8014e28 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f003 f809 	bl	800461c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f013 ff7a 	bl	8015510 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f002 fffb 	bl	800461c <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f013 fc71 	bl	8014f0e <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f002 fff3 	bl	800461c <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f014 fb5f 	bl	8015d08 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f002 ffe4 	bl	800461c <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f013 fc12 	bl	8014e7e <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20005f34 	.word	0x20005f34
 8001668:	40010000 	.word	0x40010000
 800166c:	20006038 	.word	0x20006038
 8001670:	20005ce8 	.word	0x20005ce8
 8001674:	40000400 	.word	0x40000400
 8001678:	20005b24 	.word	0x20005b24
 800167c:	40000800 	.word	0x40000800
 8001680:	20005ca8 	.word	0x20005ca8
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005ae4 	.word	0x20005ae4
 800168c:	40010400 	.word	0x40010400
 8001690:	20005f74 	.word	0x20005f74
 8001694:	40014000 	.word	0x40014000
 8001698:	20005c04 	.word	0x20005c04
 800169c:	40014400 	.word	0x40014400
 80016a0:	20005e4c 	.word	0x20005e4c
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20006158 	.word	0x20006158
 80016ac:	40001800 	.word	0x40001800
 80016b0:	20005dcc 	.word	0x20005dcc
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	20006118 	.word	0x20006118
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f013 fe34 	bl	8015384 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f002 ff7b 	bl	800461c <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f010 f982 	bl	8011c74 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f013 faf6 	bl	8014f64 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20005f34 	.word	0x20005f34
 80019ac:	20006038 	.word	0x20006038
 80019b0:	20005ce8 	.word	0x20005ce8
 80019b4:	20005b24 	.word	0x20005b24
 80019b8:	20005ca8 	.word	0x20005ca8
 80019bc:	20005ae4 	.word	0x20005ae4
 80019c0:	20005f74 	.word	0x20005f74
 80019c4:	20005c04 	.word	0x20005c04
 80019c8:	20005e4c 	.word	0x20005e4c
 80019cc:	20006158 	.word	0x20006158
 80019d0:	20005dcc 	.word	0x20005dcc
 80019d4:	20006118 	.word	0x20006118

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 f84f 	bl	8019a8c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f013 fa87 	bl	8014fe0 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fda0 	bl	800461c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f014 f90c 	bl	8015d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fd91 	bl	800461c <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00f fc55 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00f fc88 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00f fc67 	bl	801140c <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00f fc3f 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00f fc72 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f00f fc51 	bl	801140c <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00f fc29 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00f fc5c 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00f fc3b 	bl	801140c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f013 fab3 	bl	8015104 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005f34 	.word	0x20005f34
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	20006038 	.word	0x20006038
 8001bb4:	20005ce8 	.word	0x20005ce8
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20005b24 	.word	0x20005b24
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	20005ca8 	.word	0x20005ca8
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005ae4 	.word	0x20005ae4
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	20006494 	.word	0x20006494
 8001c70:	20006498 	.word	0x20006498
 8001c74:	40000400 	.word	0x40000400
 8001c78:	20006490 	.word	0x20006490
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	200064b8 	.word	0x200064b8
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	200064b4 	.word	0x200064b4
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200064bc 	.word	0x200064bc

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	20006494 	.word	0x20006494
 8001d84:	20006498 	.word	0x20006498
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20006490 	.word	0x20006490
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200064b8 	.word	0x200064b8
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	200064b4 	.word	0x200064b4
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200064bc 	.word	0x200064bc

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f010 f9c6 	bl	80121d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f010 f9be 	bl	80121d4 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f010 f9a9 	bl	80121d4 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f010 f9a0 	bl	80121d4 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f010 f995 	bl	80121d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f010 f98d 	bl	80121d4 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f010 f97a 	bl	80121d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f010 f972 	bl	80121d4 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f00f fa49 	bl	80113d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f00f fe4c 	bl	8011c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f00f fe02 	bl	8011c74 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	200002bc 	.word	0x200002bc
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f00f fdc2 	bl	8011c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f00f fd8f 	bl	8011c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f00f fd4e 	bl	8011c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f00f fd3d 	bl	8011c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f00f fea4 	bl	8011fac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f00f fe9f 	bl	8011fac <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f00f f8da 	bl	8011428 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f00f f8d7 	bl	8011428 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f00f fe88 	bl	8011fac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f00f fe83 	bl	8011fac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f00f f8be 	bl	8011428 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f00f f8bb 	bl	8011428 <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f00f fe6c 	bl	8011fac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f00f fe67 	bl	8011fac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f00f f8a2 	bl	8011428 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f00f f89f 	bl	8011428 <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f00f f9f8 	bl	8011c74 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f00f f9c6 	bl	8011c74 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f00f f993 	bl	8011c74 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f00f f960 	bl	8011c74 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f00f f91f 	bl	8011c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f00f f90f 	bl	8011c74 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f00f f8cb 	bl	8011c74 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f00f f882 	bl	8011c74 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f00f f841 	bl	8011c74 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f00f f831 	bl	8011c74 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f00e ffff 	bl	8011c74 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f00e ffcc 	bl	8011c74 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f00e ff9a 	bl	8011c74 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f00e ff55 	bl	8011c74 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f016 fe4c 	bl	8019a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f011 fa16 	bl	8014298 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fbd3 	bl	800461c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f011 fc6f 	bl	8014778 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fbbc 	bl	800461c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f011 fd4e 	bl	8014944 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f011 ff0e 	bl	8014e28 <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fb03 	bl	800461c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f012 fe6f 	bl	8015d08 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 faf4 	bl	800461c <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f00e f9ac 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f00e f9c3 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f00e f99b 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f00e f9b2 	bl	801140c <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f00e f980 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f00e f997 	bl	801140c <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00e f96f 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e f986 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f00e f95e 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f00e f975 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f00e f94d 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f00e f964 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20005f34 	.word	0x20005f34
 800314c:	40010000 	.word	0x40010000
 8003150:	20006038 	.word	0x20006038
 8003154:	20005ce8 	.word	0x20005ce8
 8003158:	40000400 	.word	0x40000400
 800315c:	20005b24 	.word	0x20005b24
 8003160:	40000800 	.word	0x40000800
 8003164:	20005ca8 	.word	0x20005ca8
 8003168:	40000c00 	.word	0x40000c00
 800316c:	20005ef4 	.word	0x20005ef4
 8003170:	40001000 	.word	0x40001000
 8003174:	20006198 	.word	0x20006198
 8003178:	40001400 	.word	0x40001400
 800317c:	20005ae4 	.word	0x20005ae4
 8003180:	40010400 	.word	0x40010400
 8003184:	20005f74 	.word	0x20005f74
 8003188:	40014000 	.word	0x40014000
 800318c:	20005c04 	.word	0x20005c04
 8003190:	40014400 	.word	0x40014400
 8003194:	20005e4c 	.word	0x20005e4c
 8003198:	40014800 	.word	0x40014800
 800319c:	20006158 	.word	0x20006158
 80031a0:	40001800 	.word	0x40001800
 80031a4:	20005dcc 	.word	0x20005dcc
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	20006118 	.word	0x20006118
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00e f905 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f00e f91c 	bl	801140c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f011 fe52 	bl	8014e7e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f011 fe73 	bl	8014ec6 <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20006118 	.word	0x20006118

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f012 fdbc 	bl	8015e28 <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 f9b1 	bl	800461c <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00e f87f 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e f8b2 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f00e f891 	bl	801140c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f00e f861 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f00e f894 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f00e f873 	bl	801140c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f00e f843 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f00e f876 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f00e f855 	bl	801140c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f00e f825 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f00e f858 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f00e f837 	bl	801140c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005e0c 	.word	0x20005e0c
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005ae0 	.word	0x20005ae0
 80033c4:	20006078 	.word	0x20006078
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20005e8c 	.word	0x20005e8c
 80033d0:	20005bc4 	.word	0x20005bc4
 80033d4:	40004800 	.word	0x40004800
 80033d8:	20005d29 	.word	0x20005d29
 80033dc:	20005ff8 	.word	0x20005ff8
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	20005ff4 	.word	0x20005ff4
 80033e8:	20005d2c 	.word	0x20005d2c
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20005ca4 	.word	0x20005ca4
 80033f4:	40011400 	.word	0x40011400
 80033f8:	20005d28 	.word	0x20005d28

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f00d ffc5 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f00d fff8 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f00d ffd7 	bl	801140c <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f00d ffa7 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f00d ffda 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f00d ffb9 	bl	801140c <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00d ff89 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00d ffbc 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00d ff9b 	bl	801140c <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00d ff6b 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f00d ff9e 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f00d ff7d 	bl	801140c <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f00d ff83 	bl	8011460 <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f001 f85c 	bl	800461c <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005a80 	.word	0x20005a80
 8003580:	40026088 	.word	0x40026088
 8003584:	20005b64 	.word	0x20005b64
 8003588:	40026028 	.word	0x40026028
 800358c:	20005a20 	.word	0x20005a20
 8003590:	40026040 	.word	0x40026040
 8003594:	200060b8 	.word	0x200060b8
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f012 fd7d 	bl	80160a0 <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005e0c 	.word	0x20005e0c

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f012 fd73 	bl	80160a0 <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20006078 	.word	0x20006078

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f012 fd69 	bl	80160a0 <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20005bc4 	.word	0x20005bc4

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f012 fd5f 	bl	80160a0 <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005ff8 	.word	0x20005ff8

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f012 fd55 	bl	80160a0 <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20005d2c 	.word	0x20005d2c

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f012 fd4b 	bl	80160a0 <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20005fb4 	.word	0x20005fb4

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f016 fa2b 	bl	8019a8c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f00c ff05 	bl	80104c4 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f000 ffac 	bl	800461c <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f00c ffde 	bl	80106bc <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f00d fe5e 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f00d fe77 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f00d fb11 	bl	8010d48 <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f00d fe51 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f00d fe6a 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f00d fb04 	bl	8010d48 <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f00d fe41 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f00d fe5a 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00d faf4 	bl	8010d48 <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f00d fe34 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f00d fe4d 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f00d fae7 	bl	8010d48 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f00d f87e 	bl	801087c <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20009f44 	.word	0x20009f44
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f00d f988 	bl	8010aba <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f00d f878 	bl	8010904 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 feff 	bl	800461c <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f00d f93e 	bl	8010aba <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f00d f833 	bl	8010904 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 feba 	bl	800461c <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00d f81b 	bl	8010904 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 fea2 	bl	800461c <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20009f44 	.word	0x20009f44
 8003aa0:	2000a50c 	.word	0x2000a50c
 8003aa4:	20006ac0 	.word	0x20006ac0

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006a2c 	.word	0x20006a2c

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00d fc16 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f00d fc2d 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00d fc0a 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f00d fc21 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00d fbf9 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f00d fc10 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00d fbed 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00d fc04 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00d fbe0 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00d fbf7 	bl	801140c <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f00d fbd4 	bl	80113d4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00d fbeb 	bl	801140c <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f00e fae6 	bl	8012208 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fceb 	bl	800461c <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20006b90 	.word	0x20006b90
 8003c54:	40005400 	.word	0x40005400
 8003c58:	20006bec 	.word	0x20006bec
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f00d fb78 	bl	8011460 <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fc51 	bl	800461c <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00d fb1c 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00d fb4f 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f00d fb2e 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00d fb06 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f00d fb39 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00d fb18 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f00d faf4 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00d fb27 	bl	8011444 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f00d fb06 	bl	801140c <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d fac4 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00d fadb 	bl	801140c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d fab8 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d facf 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00d faa7 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00d fabe 	bl	801140c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f00d fa9b 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00d fab2 	bl	801140c <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00d fa8e 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00d faa5 	bl	801140c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00d fa82 	bl	80113d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00d fa99 	bl	801140c <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f00e f994 	bl	8012208 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fb99 	bl	800461c <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20006b90 	.word	0x20006b90
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	20006bec 	.word	0x20006bec
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f00e fbfd 	bl	801271c <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20006bec 	.word	0x20006bec

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f00e fd60 	bl	80129f6 <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20006bec 	.word	0x20006bec

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f00e fbe9 	bl	801271c <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200067e0 	.word	0x200067e0

08003f54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a4      	sub	sp, #144	; 0x90
 8003f58:	af00      	add	r7, sp, #0
	set();
 8003f5a:	f006 fdd7 	bl	800ab0c <set>
	const osThreadAttr_t MainTask_attributes =
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f015 fd90 	bl	8019a8c <memset>
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <main+0xe0>)
 8003f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2318      	movs	r3, #24
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f015 fd80 	bl	8019a8c <memset>
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <main+0xe4>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	2318      	movs	r3, #24
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 8003f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f015 fd72 	bl	8019a8c <memset>
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xe8>)
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f015 fd65 	bl	8019a8c <memset>
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <main+0xec>)
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	2318      	movs	r3, #24
 8003fce:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8003fd0:	f012 fec6 	bl	8016d60 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8003fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <main+0xf0>)
 8003fde:	f012 ff09 	bl	8016df4 <osThreadNew>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <main+0xf4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4816      	ldr	r0, [pc, #88]	; (800404c <main+0xf8>)
 8003ff2:	f012 feff 	bl	8016df4 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <main+0xfc>)
 8003ffa:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8003ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	4813      	ldr	r0, [pc, #76]	; (8004054 <main+0x100>)
 8004006:	f012 fef5 	bl	8016df4 <osThreadNew>
 800400a:	4603      	mov	r3, r0
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <main+0x104>)
 800400e:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004010:	463b      	mov	r3, r7
 8004012:	461a      	mov	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	4811      	ldr	r0, [pc, #68]	; (800405c <main+0x108>)
 8004018:	f012 feec 	bl	8016df4 <osThreadNew>
 800401c:	4603      	mov	r3, r0
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <main+0x10c>)
 8004020:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <main+0x110>)
 8004024:	7853      	ldrb	r3, [r2, #1]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 800402c:	f012 febc 	bl	8016da8 <osKernelStart>

	while (1) {
 8004030:	e7fe      	b.n	8004030 <main+0xdc>
 8004032:	bf00      	nop
 8004034:	0801f8c8 	.word	0x0801f8c8
 8004038:	0801f8d4 	.word	0x0801f8d4
 800403c:	0801f8e4 	.word	0x0801f8e4
 8004040:	0801f8f0 	.word	0x0801f8f0
 8004044:	08004191 	.word	0x08004191
 8004048:	20007870 	.word	0x20007870
 800404c:	080042e5 	.word	0x080042e5
 8004050:	200072a8 	.word	0x200072a8
 8004054:	080043e9 	.word	0x080043e9
 8004058:	20009ed8 	.word	0x20009ed8
 800405c:	080044c1 	.word	0x080044c1
 8004060:	20009dcc 	.word	0x20009dcc
 8004064:	40020814 	.word	0x40020814

08004068 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	b091      	sub	sp, #68	; 0x44
 800406e:	af0c      	add	r7, sp, #48	; 0x30

	static int counter = 0;
	counter++;
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <TIM6_DAC_IRQHandler+0xf0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a38      	ldr	r2, [pc, #224]	; (8004158 <TIM6_DAC_IRQHandler+0xf0>)
 8004078:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 800407a:	4b37      	ldr	r3, [pc, #220]	; (8004158 <TIM6_DAC_IRQHandler+0xf0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d15a      	bne.n	800413c <TIM6_DAC_IRQHandler+0xd4>
	{
		led1 = !led1;
 8004086:	4b35      	ldr	r3, [pc, #212]	; (800415c <TIM6_DAC_IRQHandler+0xf4>)
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4a32      	ldr	r2, [pc, #200]	; (800415c <TIM6_DAC_IRQHandler+0xf4>)
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	7853      	ldrb	r3, [r2, #1]
 800409e:	f361 1345 	bfi	r3, r1, #5, #1
 80040a2:	7053      	strb	r3, [r2, #1]
		counter = 0;
 80040a4:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <TIM6_DAC_IRQHandler+0xf0>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}

		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld S: %ld RM: %ld, BM: %ld RL: %ld, BL: %ld\n",
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc, servo_ring.currentPulse, RedPickMore, BluePickMore, RedPickLess, BluePickLess);
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <TIM6_DAC_IRQHandler+0xf8>)
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld S: %ld RM: %ld, BM: %ld RL: %ld, BL: %ld\n",
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa4a 	bl	8000548 <__aeabi_f2d>
 80040b4:	4682      	mov	sl, r0
 80040b6:	468b      	mov	fp, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc, servo_ring.currentPulse, RedPickMore, BluePickMore, RedPickLess, BluePickLess);
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <TIM6_DAC_IRQHandler+0xf8>)
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld S: %ld RM: %ld, BM: %ld RL: %ld, BL: %ld\n",
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fa43 	bl	8000548 <__aeabi_f2d>
 80040c2:	4604      	mov	r4, r0
 80040c4:	460d      	mov	r5, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, pick_enc, servo_ring.currentPulse, RedPickMore, BluePickMore, RedPickLess, BluePickLess);
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <TIM6_DAC_IRQHandler+0xf8>)
 80040c8:	691b      	ldr	r3, [r3, #16]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.4f P: %ld S: %ld RM: %ld, BM: %ld RL: %ld, BL: %ld\n",
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa3c 	bl	8000548 <__aeabi_f2d>
 80040d0:	4680      	mov	r8, r0
 80040d2:	4689      	mov	r9, r1
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <TIM6_DAC_IRQHandler+0xfc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fa35 	bl	8000548 <__aeabi_f2d>
 80040de:	4b22      	ldr	r3, [pc, #136]	; (8004168 <TIM6_DAC_IRQHandler+0x100>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <TIM6_DAC_IRQHandler+0x104>)
 80040e4:	6a1e      	ldr	r6, [r3, #32]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <TIM6_DAC_IRQHandler+0x108>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <TIM6_DAC_IRQHandler+0x10c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b21      	ldr	r3, [pc, #132]	; (8004178 <TIM6_DAC_IRQHandler+0x110>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <TIM6_DAC_IRQHandler+0x114>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	930a      	str	r3, [sp, #40]	; 0x28
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	9309      	str	r3, [sp, #36]	; 0x24
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	9308      	str	r3, [sp, #32]
 800410a:	9607      	str	r6, [sp, #28]
 800410c:	9206      	str	r2, [sp, #24]
 800410e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004112:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004116:	e9cd 4500 	strd	r4, r5, [sp]
 800411a:	4652      	mov	r2, sl
 800411c:	465b      	mov	r3, fp
 800411e:	4918      	ldr	r1, [pc, #96]	; (8004180 <TIM6_DAC_IRQHandler+0x118>)
 8004120:	4818      	ldr	r0, [pc, #96]	; (8004184 <TIM6_DAC_IRQHandler+0x11c>)
 8004122:	f016 fc6f 	bl	801aa04 <siprintf>
//		sprintf((char*) debug, "Left: %.2f Right: %.2f VESC: %.2f\n",
//				vesc1.vel, vesc2.vel, vesc_speed);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 8004126:	4817      	ldr	r0, [pc, #92]	; (8004184 <TIM6_DAC_IRQHandler+0x11c>)
 8004128:	f7fc f852 	bl	80001d0 <strlen>
 800412c:	4603      	mov	r3, r0
 800412e:	b29a      	uxth	r2, r3
 8004130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004134:	4913      	ldr	r1, [pc, #76]	; (8004184 <TIM6_DAC_IRQHandler+0x11c>)
 8004136:	4814      	ldr	r0, [pc, #80]	; (8004188 <TIM6_DAC_IRQHandler+0x120>)
 8004138:	f011 fec3 	bl	8015ec2 <HAL_UART_Transmit>
//	}
//
//	flywheelPID(vesc_speed);
//	flywheelAct();

	PathPlan(&pp);
 800413c:	4808      	ldr	r0, [pc, #32]	; (8004160 <TIM6_DAC_IRQHandler+0xf8>)
 800413e:	f001 ff53 	bl	8005fe8 <PathPlan>
	CheckPickEnc();
 8004142:	f007 fd25 	bl	800bb90 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004146:	4811      	ldr	r0, [pc, #68]	; (800418c <TIM6_DAC_IRQHandler+0x124>)
 8004148:	f011 f814 	bl	8015174 <HAL_TIM_IRQHandler>

}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004156:	bf00      	nop
 8004158:	200002c0 	.word	0x200002c0
 800415c:	40020814 	.word	0x40020814
 8004160:	20006ccc 	.word	0x20006ccc
 8004164:	20007388 	.word	0x20007388
 8004168:	20006be8 	.word	0x20006be8
 800416c:	20007874 	.word	0x20007874
 8004170:	2000a574 	.word	0x2000a574
 8004174:	2000a3bc 	.word	0x2000a3bc
 8004178:	2000a2e8 	.word	0x2000a2e8
 800417c:	2000663c 	.word	0x2000663c
 8004180:	0801f900 	.word	0x0801f900
 8004184:	20007490 	.word	0x20007490
 8004188:	20005d2c 	.word	0x20005d2c
 800418c:	20005ef4 	.word	0x20005ef4

08004190 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004198:	f006 ffc8 	bl	800b12c <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <MainTask+0x140>)
 800419e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d110      	bne.n	80041c6 <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 80041a4:	bf00      	nop
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <MainTask+0x140>)
 80041a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d0fb      	beq.n	80041a6 <MainTask+0x16>
			mode++;
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <MainTask+0x144>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a47      	ldr	r2, [pc, #284]	; (80042d4 <MainTask+0x144>)
 80041b6:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 80041b8:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <MainTask+0x144>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	dd02      	ble.n	80041c6 <MainTask+0x36>
				mode = 0;
 80041c0:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <MainTask+0x144>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 80041c6:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <MainTask+0x140>)
 80041c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d12b      	bne.n	8004228 <MainTask+0x98>
		{
			while(ps4.button == L1);
 80041d0:	bf00      	nop
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <MainTask+0x140>)
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d0fa      	beq.n	80041d2 <MainTask+0x42>
			vesc_speed += 0.05;
 80041dc:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <MainTask+0x148>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc f9b1 	bl	8000548 <__aeabi_f2d>
 80041e6:	a336      	add	r3, pc, #216	; (adr r3, 80042c0 <MainTask+0x130>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f84e 	bl	800028c <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7fc fcf6 	bl	8000be8 <__aeabi_d2f>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4a36      	ldr	r2, [pc, #216]	; (80042d8 <MainTask+0x148>)
 8004200:	6013      	str	r3, [r2, #0]
			vesc_duty += 0.0025;
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <MainTask+0x14c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f99e 	bl	8000548 <__aeabi_f2d>
 800420c:	a32e      	add	r3, pc, #184	; (adr r3, 80042c8 <MainTask+0x138>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fc f83b 	bl	800028c <__adddf3>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fce3 	bl	8000be8 <__aeabi_d2f>
 8004222:	4603      	mov	r3, r0
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <MainTask+0x14c>)
 8004226:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, 10);
		}

		if(ps4.button == R1)
 8004228:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <MainTask+0x140>)
 800422a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004230:	d12b      	bne.n	800428a <MainTask+0xfa>
		{
			while(ps4.button == R1);
 8004232:	bf00      	nop
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <MainTask+0x140>)
 8004236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d0fa      	beq.n	8004234 <MainTask+0xa4>
			vesc_speed -= 0.05;
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <MainTask+0x148>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fc f980 	bl	8000548 <__aeabi_f2d>
 8004248:	a31d      	add	r3, pc, #116	; (adr r3, 80042c0 <MainTask+0x130>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fc f81b 	bl	8000288 <__aeabi_dsub>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f7fc fcc5 	bl	8000be8 <__aeabi_d2f>
 800425e:	4603      	mov	r3, r0
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <MainTask+0x148>)
 8004262:	6013      	str	r3, [r2, #0]
			vesc_duty -= 0.0025;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <MainTask+0x14c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc f96d 	bl	8000548 <__aeabi_f2d>
 800426e:	a316      	add	r3, pc, #88	; (adr r3, 80042c8 <MainTask+0x138>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f7fc f808 	bl	8000288 <__aeabi_dsub>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	f7fc fcb2 	bl	8000be8 <__aeabi_d2f>
 8004284:	4603      	mov	r3, r0
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <MainTask+0x14c>)
 8004288:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, -10);
		}

		switch (mode)
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <MainTask+0x144>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d00f      	beq.n	80042b2 <MainTask+0x122>
 8004292:	2b02      	cmp	r3, #2
 8004294:	dc82      	bgt.n	800419c <MainTask+0xc>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <MainTask+0x110>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d003      	beq.n	80042a6 <MainTask+0x116>
 800429e:	e00b      	b.n	80042b8 <MainTask+0x128>
		{
			case NORMAL:
				NormalControl();
 80042a0:	f007 f812 	bl	800b2c8 <NormalControl>
			break;
 80042a4:	e008      	b.n	80042b8 <MainTask+0x128>

			case AUTO:
				Auto();
 80042a6:	f007 fa73 	bl	800b790 <Auto>
				LidarControl(&lidar);
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <MainTask+0x150>)
 80042ac:	f00b fdbe 	bl	800fe2c <LidarControl>
			break;
 80042b0:	e002      	b.n	80042b8 <MainTask+0x128>

			case TUNE:
				tune();
 80042b2:	f008 f941 	bl	800c538 <tune>
			break;
 80042b6:	bf00      	nop
		if (ps4.button == SELECT)
 80042b8:	e770      	b.n	800419c <MainTask+0xc>
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w
 80042c0:	9999999a 	.word	0x9999999a
 80042c4:	3fa99999 	.word	0x3fa99999
 80042c8:	47ae147b 	.word	0x47ae147b
 80042cc:	3f647ae1 	.word	0x3f647ae1
 80042d0:	2000a028 	.word	0x2000a028
 80042d4:	200092e0 	.word	0x200092e0
 80042d8:	200065a0 	.word	0x200065a0
 80042dc:	20007388 	.word	0x20007388
 80042e0:	20009038 	.word	0x20009038

080042e4 <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		if(!load_start && !set_pick_enc && !reload)
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <NaviTask+0xd0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d115      	bne.n	8004320 <NaviTask+0x3c>
 80042f4:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <NaviTask+0xd4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <NaviTask+0x3c>
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <NaviTask+0xd8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <NaviTask+0x3c>
			pick_manual(ps4.joyR_y * 14000);
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <NaviTask+0xdc>)
 8004306:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800430a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80043c4 <NaviTask+0xe0>
 800430e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004316:	ee17 1a90 	vmov	r1, s15
 800431a:	482b      	ldr	r0, [pc, #172]	; (80043c8 <NaviTask+0xe4>)
 800431c:	f7fc ff35 	bl	800118a <WriteBDC>

		VESCPDC(vesc_duty, &vesc1);
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <NaviTask+0xe8>)
 8004322:	edd3 7a00 	vldr	s15, [r3]
 8004326:	482a      	ldr	r0, [pc, #168]	; (80043d0 <NaviTask+0xec>)
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	f009 fa18 	bl	800d760 <VESCPDC>
		VESCPDC(vesc_duty, &vesc2);
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <NaviTask+0xe8>)
 8004332:	edd3 7a00 	vldr	s15, [r3]
 8004336:	4827      	ldr	r0, [pc, #156]	; (80043d4 <NaviTask+0xf0>)
 8004338:	eeb0 0a67 	vmov.f32	s0, s15
 800433c:	f009 fa10 	bl	800d760 <VESCPDC>
//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0 && !In_LS_Shot_1 && !In_LS_Shot_2)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);
//		else if(stick_fence && In_LS_Shot_1 && In_LS_Shot_2)
//			RNSStop(&rns);

		enq();
 8004340:	f008 f8de 	bl	800c500 <enq>
		pick_enc = QEIRead(QEI1);
 8004344:	2001      	movs	r0, #1
 8004346:	f7fd fcc1 	bl	8001ccc <QEIRead>
 800434a:	4603      	mov	r3, r0
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <NaviTask+0xf4>)
 800434e:	6013      	str	r3, [r2, #0]

		if(!pp.pp_start && !vel_adjust)
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <NaviTask+0xf8>)
 8004352:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <NaviTask+0x8e>
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <NaviTask+0xfc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <NaviTask+0x8e>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 8004368:	491e      	ldr	r1, [pc, #120]	; (80043e4 <NaviTask+0x100>)
 800436a:	4815      	ldr	r0, [pc, #84]	; (80043c0 <NaviTask+0xdc>)
 800436c:	f000 f9bc 	bl	80046e8 <realMODN>
 8004370:	e01e      	b.n	80043b0 <NaviTask+0xcc>
		}
		else if(pp.pp_start)
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <NaviTask+0xf8>)
 8004374:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0b4      	beq.n	80042ec <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <NaviTask+0xf8>)
 8004384:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <NaviTask+0xf8>)
 800438a:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <NaviTask+0xf8>)
 8004390:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <NaviTask+0xf8>)
 8004396:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 800439a:	4812      	ldr	r0, [pc, #72]	; (80043e4 <NaviTask+0x100>)
 800439c:	eef0 1a46 	vmov.f32	s3, s12
 80043a0:	eeb0 1a66 	vmov.f32	s2, s13
 80043a4:	eef0 0a47 	vmov.f32	s1, s14
 80043a8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ac:	f005 f978 	bl	80096a0 <RNSVelocity>
		if(!load_start && !set_pick_enc && !reload)
 80043b0:	e79c      	b.n	80042ec <NaviTask+0x8>
 80043b2:	bf00      	nop
 80043b4:	20007350 	.word	0x20007350
 80043b8:	20007738 	.word	0x20007738
 80043bc:	20007754 	.word	0x20007754
 80043c0:	2000a028 	.word	0x2000a028
 80043c4:	465ac000 	.word	0x465ac000
 80043c8:	20007714 	.word	0x20007714
 80043cc:	20007388 	.word	0x20007388
 80043d0:	20006b0c 	.word	0x20006b0c
 80043d4:	20009990 	.word	0x20009990
 80043d8:	20006be8 	.word	0x20006be8
 80043dc:	20006ccc 	.word	0x20006ccc
 80043e0:	20009030 	.word	0x20009030
 80043e4:	20008f10 	.word	0x20008f10

080043e8 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 80043f0:	f008 f806 	bl	800c400 <Checking>
//		else
//		{
//			led4_off;
//		}

		if(blue)
 80043f4:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <CheckingTask+0xbc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <CheckingTask+0x20>
		{
			led4_on;
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <CheckingTask+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
 8004406:	e003      	b.n	8004410 <CheckingTask+0x28>
		}
		else
		{
			led4_off;
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <CheckingTask+0xc0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
//		else
//		{
//			led5_off;
//		}

		if(In_Load)
 8004410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004414:	4825      	ldr	r0, [pc, #148]	; (80044ac <CheckingTask+0xc4>)
 8004416:	f00d fec5 	bl	80121a4 <HAL_GPIO_ReadPin>
 800441a:	4603      	mov	r3, r0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <CheckingTask+0x44>
		{
			led6_on;
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <CheckingTask+0xc8>)
 8004422:	7e13      	ldrb	r3, [r2, #24]
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	7613      	strb	r3, [r2, #24]
 800442a:	e004      	b.n	8004436 <CheckingTask+0x4e>
		}
		else
		{
			led6_off;
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <CheckingTask+0xc8>)
 800442e:	7e13      	ldrb	r3, [r2, #24]
 8004430:	f36f 1386 	bfc	r3, #6, #1
 8004434:	7613      	strb	r3, [r2, #24]
		}

		if(In_Pick)
 8004436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800443a:	481c      	ldr	r0, [pc, #112]	; (80044ac <CheckingTask+0xc4>)
 800443c:	f00d feb2 	bl	80121a4 <HAL_GPIO_ReadPin>
 8004440:	4603      	mov	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <CheckingTask+0x6a>
		{
			led7_on;
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <CheckingTask+0xc0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004450:	e003      	b.n	800445a <CheckingTask+0x72>
		}
		else
		{
			led7_off;
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <CheckingTask+0xc0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(led_enb)
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <CheckingTask+0xcc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0c6      	beq.n	80043f0 <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 8004462:	f00c f823 	bl	80104ac <HAL_GetTick>
 8004466:	4603      	mov	r3, r0
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <CheckingTask+0xd0>)
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <CheckingTask+0xd4>)
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	4293      	cmp	r3, r2
 8004474:	d3bc      	bcc.n	80043f0 <CheckingTask+0x8>
			{
				led8 = !led8;
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <CheckingTask+0xc8>)
 8004478:	7e1b      	ldrb	r3, [r3, #24]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2d9      	uxtb	r1, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <CheckingTask+0xc8>)
 800448c:	7e13      	ldrb	r3, [r2, #24]
 800448e:	f361 1345 	bfi	r3, r1, #5, #1
 8004492:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 8004494:	f00c f80a 	bl	80104ac <HAL_GetTick>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <CheckingTask+0xd0>)
 800449e:	601a      	str	r2, [r3, #0]
		Checking();
 80044a0:	e7a6      	b.n	80043f0 <CheckingTask+0x8>
 80044a2:	bf00      	nop
 80044a4:	20006a24 	.word	0x20006a24
 80044a8:	20005ca8 	.word	0x20005ca8
 80044ac:	40021000 	.word	0x40021000
 80044b0:	200095ac 	.word	0x200095ac
 80044b4:	2000a604 	.word	0x2000a604
 80044b8:	20006adc 	.word	0x20006adc
 80044bc:	2000a3a0 	.word	0x2000a3a0

080044c0 <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

	while (1) {

		if(servo_enb)
 80044c8:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <EmergencyTask+0xf0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02c      	beq.n	800452a <EmergencyTask+0x6a>
		{
			for(int i = 0; i < 4; i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d4:	e01e      	b.n	8004514 <EmergencyTask+0x54>
			{
				if(ps4.button == SQUARE)
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <EmergencyTask+0xf4>)
 80044d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044de:	d106      	bne.n	80044ee <EmergencyTask+0x2e>
				{
					while(ps4.button == SQUARE);
 80044e0:	bf00      	nop
 80044e2:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <EmergencyTask+0xf4>)
 80044e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ea:	d0fa      	beq.n	80044e2 <EmergencyTask+0x22>
					break;
 80044ec:	e015      	b.n	800451a <EmergencyTask+0x5a>
				}

				load_adjust_servo;
 80044ee:	f240 414c 	movw	r1, #1100	; 0x44c
 80044f2:	4831      	ldr	r0, [pc, #196]	; (80045b8 <EmergencyTask+0xf8>)
 80044f4:	f005 fce0 	bl	8009eb8 <ServoSetPulse>
				osDelay(100);
 80044f8:	2064      	movs	r0, #100	; 0x64
 80044fa:	f012 fd3a 	bl	8016f72 <osDelay>
				close_servo;
 80044fe:	f240 3152 	movw	r1, #850	; 0x352
 8004502:	482d      	ldr	r0, [pc, #180]	; (80045b8 <EmergencyTask+0xf8>)
 8004504:	f005 fcd8 	bl	8009eb8 <ServoSetPulse>
				osDelay(100);
 8004508:	2064      	movs	r0, #100	; 0x64
 800450a:	f012 fd32 	bl	8016f72 <osDelay>
			for(int i = 0; i < 4; i++)
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	3301      	adds	r3, #1
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	2b03      	cmp	r3, #3
 8004518:	dddd      	ble.n	80044d6 <EmergencyTask+0x16>
	//			{
	//				adjust_servo;
	//				break;
	//			}
			}
			adjust_servo;
 800451a:	f240 31b6 	movw	r1, #950	; 0x3b6
 800451e:	4826      	ldr	r0, [pc, #152]	; (80045b8 <EmergencyTask+0xf8>)
 8004520:	f005 fcca 	bl	8009eb8 <ServoSetPulse>
			servo_enb = 0;
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <EmergencyTask+0xf0>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
		}

		if (ps4.button == TOUCH) {
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <EmergencyTask+0xf4>)
 800452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004532:	d1c9      	bne.n	80044c8 <EmergencyTask+0x8>
			while(ps4.button == TOUCH);
 8004534:	bf00      	nop
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <EmergencyTask+0xf4>)
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800453e:	d0fa      	beq.n	8004536 <EmergencyTask+0x76>
//			led3 = 1;
			RNSStop(&rns);
 8004540:	481e      	ldr	r0, [pc, #120]	; (80045bc <EmergencyTask+0xfc>)
 8004542:	f005 f829 	bl	8009598 <RNSStop>
			PP_stop(&pp);
 8004546:	481e      	ldr	r0, [pc, #120]	; (80045c0 <EmergencyTask+0x100>)
 8004548:	f001 fcc3 	bl	8005ed2 <PP_stop>
			pitch_stop;
 800454c:	2100      	movs	r1, #0
 800454e:	481d      	ldr	r0, [pc, #116]	; (80045c4 <EmergencyTask+0x104>)
 8004550:	f7fc fe1b 	bl	800118a <WriteBDC>
			pick_stop;
 8004554:	2100      	movs	r1, #0
 8004556:	481c      	ldr	r0, [pc, #112]	; (80045c8 <EmergencyTask+0x108>)
 8004558:	f7fc fe17 	bl	800118a <WriteBDC>
//			flywheelStop();
			push_stop;
 800455c:	2100      	movs	r1, #0
 800455e:	481b      	ldr	r0, [pc, #108]	; (80045cc <EmergencyTask+0x10c>)
 8004560:	f7fc fe13 	bl	800118a <WriteBDC>
			vesc_duty = 0.0;
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <EmergencyTask+0x110>)
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
//			ResetPickEnc();
			osThreadTerminate(MainTaskHandle);
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <EmergencyTask+0x114>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f012 fcd1 	bl	8016f18 <osThreadTerminate>
			osDelay(5);
 8004576:	2005      	movs	r0, #5
 8004578:	f012 fcfb 	bl	8016f72 <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 800457c:	f107 0308 	add.w	r3, r7, #8
 8004580:	2224      	movs	r2, #36	; 0x24
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f015 fa81 	bl	8019a8c <memset>
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <EmergencyTask+0x118>)
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	2318      	movs	r3, #24
 8004596:	623b      	str	r3, [r7, #32]
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	461a      	mov	r2, r3
 800459e:	2100      	movs	r1, #0
 80045a0:	480e      	ldr	r0, [pc, #56]	; (80045dc <EmergencyTask+0x11c>)
 80045a2:	f012 fc27 	bl	8016df4 <osThreadNew>
 80045a6:	4603      	mov	r3, r0
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <EmergencyTask+0x114>)
 80045aa:	6013      	str	r3, [r2, #0]
		if(servo_enb)
 80045ac:	e78c      	b.n	80044c8 <EmergencyTask+0x8>
 80045ae:	bf00      	nop
 80045b0:	2000a594 	.word	0x2000a594
 80045b4:	2000a028 	.word	0x2000a028
 80045b8:	20007874 	.word	0x20007874
 80045bc:	20008f10 	.word	0x20008f10
 80045c0:	20006ccc 	.word	0x20006ccc
 80045c4:	20006c4c 	.word	0x20006c4c
 80045c8:	20007714 	.word	0x20007714
 80045cc:	20009688 	.word	0x20009688
 80045d0:	20007388 	.word	0x20007388
 80045d4:	20007870 	.word	0x20007870
 80045d8:	0801f8c8 	.word	0x0801f8c8
 80045dc:	08004191 	.word	0x08004191

080045e0 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_UART_RxCpltCallback+0x34>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d102      	bne.n	80045f8 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 80045f2:	4808      	ldr	r0, [pc, #32]	; (8004614 <HAL_UART_RxCpltCallback+0x34>)
 80045f4:	f004 fea6 	bl	8009344 <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_UART_RxCpltCallback+0x38>)
 80045fa:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d102      	bne.n	800460a <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 8004604:	4804      	ldr	r0, [pc, #16]	; (8004618 <HAL_UART_RxCpltCallback+0x38>)
 8004606:	f00b fce9 	bl	800ffdc <ObstacleHandler>
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20006c70 	.word	0x20006c70
 8004618:	20009038 	.word	0x20009038

0800461c <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0

}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	0000      	movs	r0, r0
 800462c:	0000      	movs	r0, r0
	...

08004630 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	ed87 0a04 	vstr	s0, [r7, #16]
 800463c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004640:	ed87 1a02 	vstr	s2, [r7, #8]
 8004644:	edc7 1a01 	vstr	s3, [r7, #4]
 8004648:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 800464a:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <MODNInit+0xa8>)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <MODNInit+0xa8>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <MODNInit+0xa8>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f7fb ff72 	bl	8000548 <__aeabi_f2d>
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <MODNInit+0xac>)
 800466a:	f7fc f8ef 	bl	800084c <__aeabi_ddiv>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	a316      	add	r3, pc, #88	; (adr r3, 80046d0 <MODNInit+0xa0>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb ffbc 	bl	80005f8 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	f7fc faae 	bl	8000be8 <__aeabi_d2f>
 800468c:	4603      	mov	r3, r0
 800468e:	4a12      	ldr	r2, [pc, #72]	; (80046d8 <MODNInit+0xa8>)
 8004690:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004692:	ed97 7a04 	vldr	s14, [r7, #16]
 8004696:	edd7 7a01 	vldr	s15, [r7, #4]
 800469a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <MODNInit+0xa8>)
 80046a0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80046a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <MODNInit+0xa8>)
 80046aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <MODNInit+0xa8>)
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = OPERATOR_TURNED_0_DEGREE;
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <MODNInit+0xa8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <MODNInit+0xa8>)
 80046be:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <MODNInit+0xa8>)
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <MODNInit+0xa8>)
 80046c4:	4a06      	ldr	r2, [pc, #24]	; (80046e0 <MODNInit+0xb0>)
 80046c6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80046c8:	bf00      	nop
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	54442eea 	.word	0x54442eea
 80046d4:	400921fb 	.word	0x400921fb
 80046d8:	20006a74 	.word	0x20006a74
 80046dc:	40668000 	.word	0x40668000
 80046e0:	20006a78 	.word	0x20006a78
 80046e4:	00000000 	.word	0x00000000

080046e8 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	ed2d 8b02 	vpush	{d8}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation)
 80046f6:	4b52      	ldr	r3, [pc, #328]	; (8004840 <realMODN+0x158>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d86e      	bhi.n	80047dc <realMODN+0xf4>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <realMODN+0x1c>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004715 	.word	0x08004715
 8004708:	08004747 	.word	0x08004747
 800470c:	08004775 	.word	0x08004775
 8004710:	080047a7 	.word	0x080047a7
	{
		case OPERATOR_TURNED_0_DEGREE:
			MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800471a:	eeb1 7a67 	vneg.f32	s14, s15
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <realMODN+0x158>)
 8004720:	edd3 7a07 	vldr	s15, [r3, #28]
 8004724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004728:	4b45      	ldr	r3, [pc, #276]	; (8004840 <realMODN+0x158>)
 800472a:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004734:	4b42      	ldr	r3, [pc, #264]	; (8004840 <realMODN+0x158>)
 8004736:	edd3 7a07 	vldr	s15, [r3, #28]
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	4b40      	ldr	r3, [pc, #256]	; (8004840 <realMODN+0x158>)
 8004740:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004744:	e04a      	b.n	80047dc <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
			MODN.x_vel =  psx->joyL_y * MODN.speed;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800474c:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <realMODN+0x158>)
 800474e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <realMODN+0x158>)
 8004758:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  psx->joyL_x * MODN.speed;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004762:	4b37      	ldr	r3, [pc, #220]	; (8004840 <realMODN+0x158>)
 8004764:	edd3 7a07 	vldr	s15, [r3, #28]
 8004768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <realMODN+0x158>)
 800476e:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004772:	e033      	b.n	80047dc <realMODN+0xf4>
		case OPERATOR_TURNED_180_DEGREES:
			MODN.x_vel =  psx->joyL_x * MODN.speed;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <realMODN+0x158>)
 800477c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <realMODN+0x158>)
 8004786:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_y * MODN.speed;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004790:	eeb1 7a67 	vneg.f32	s14, s15
 8004794:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <realMODN+0x158>)
 8004796:	edd3 7a07 	vldr	s15, [r3, #28]
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <realMODN+0x158>)
 80047a0:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80047a4:	e01a      	b.n	80047dc <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
			MODN.x_vel = -psx->joyL_y * MODN.speed;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80047ac:	eeb1 7a67 	vneg.f32	s14, s15
 80047b0:	4b23      	ldr	r3, [pc, #140]	; (8004840 <realMODN+0x158>)
 80047b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <realMODN+0x158>)
 80047bc:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_x * MODN.speed;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80047c6:	eeb1 7a67 	vneg.f32	s14, s15
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <realMODN+0x158>)
 80047cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80047d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <realMODN+0x158>)
 80047d6:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80047da:	bf00      	nop
	}

	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80047e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <realMODN+0x158>)
 80047ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <realMODN+0x158>)
 80047f8:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <realMODN+0x158>)
 80047fe:	edd3 7a00 	vldr	s15, [r3]
 8004802:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	d11b      	bne.n	8004844 <realMODN+0x15c>
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <realMODN+0x158>)
 800480e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004812:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d113      	bne.n	8004844 <realMODN+0x15c>
 800481c:	4b08      	ldr	r3, [pc, #32]	; (8004840 <realMODN+0x158>)
 800481e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d10b      	bne.n	8004844 <realMODN+0x15c>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004832:	2b01      	cmp	r3, #1
 8004834:	f000 8226 	beq.w	8004c84 <realMODN+0x59c>
			RNSStop(rns);
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f004 fead 	bl	8009598 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 800483e:	e221      	b.n	8004c84 <realMODN+0x59c>
 8004840:	20006a74 	.word	0x20006a74
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 8004844:	4ba2      	ldr	r3, [pc, #648]	; (8004ad0 <realMODN+0x3e8>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 800484a:	4ba2      	ldr	r3, [pc, #648]	; (8004ad4 <realMODN+0x3ec>)
 800484c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8141 	bne.w	8004ad8 <realMODN+0x3f0>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 8004856:	4b9f      	ldr	r3, [pc, #636]	; (8004ad4 <realMODN+0x3ec>)
 8004858:	ed93 8a00 	vldr	s16, [r3]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7fb fe73 	bl	8000548 <__aeabi_f2d>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	a196      	add	r1, pc, #600	; (adr r1, 8004ac0 <realMODN+0x3d8>)
 8004868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800486c:	f7fb fd0c 	bl	8000288 <__aeabi_dsub>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4610      	mov	r0, r2
 8004876:	4619      	mov	r1, r3
 8004878:	f7fc f9b6 	bl	8000be8 <__aeabi_d2f>
 800487c:	4603      	mov	r3, r0
 800487e:	ee00 3a10 	vmov	s0, r3
 8004882:	f019 fe81 	bl	801e588 <cosf>
 8004886:	eef0 7a40 	vmov.f32	s15, s0
 800488a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800488e:	4b91      	ldr	r3, [pc, #580]	; (8004ad4 <realMODN+0x3ec>)
 8004890:	edd3 8a01 	vldr	s17, [r3, #4]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7fb fe57 	bl	8000548 <__aeabi_f2d>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	a188      	add	r1, pc, #544	; (adr r1, 8004ac0 <realMODN+0x3d8>)
 80048a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048a4:	f7fb fcf0 	bl	8000288 <__aeabi_dsub>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f99a 	bl	8000be8 <__aeabi_d2f>
 80048b4:	4603      	mov	r3, r0
 80048b6:	ee00 3a10 	vmov	s0, r3
 80048ba:	f019 fead 	bl	801e618 <sinf>
 80048be:	eef0 7a40 	vmov.f32	s15, s0
 80048c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80048c6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80048ca:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <realMODN+0x3ec>)
 80048cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80048d0:	4b80      	ldr	r3, [pc, #512]	; (8004ad4 <realMODN+0x3ec>)
 80048d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80048d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048de:	4b7d      	ldr	r3, [pc, #500]	; (8004ad4 <realMODN+0x3ec>)
 80048e0:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 80048e4:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <realMODN+0x3ec>)
 80048e6:	ed93 8a00 	vldr	s16, [r3]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7fb fe2c 	bl	8000548 <__aeabi_f2d>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	a174      	add	r1, pc, #464	; (adr r1, 8004ac8 <realMODN+0x3e0>)
 80048f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048fa:	f7fb fcc5 	bl	8000288 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f7fc f96f 	bl	8000be8 <__aeabi_d2f>
 800490a:	4603      	mov	r3, r0
 800490c:	ee00 3a10 	vmov	s0, r3
 8004910:	f019 fe3a 	bl	801e588 <cosf>
 8004914:	eef0 7a40 	vmov.f32	s15, s0
 8004918:	ee28 8a27 	vmul.f32	s16, s16, s15
 800491c:	4b6d      	ldr	r3, [pc, #436]	; (8004ad4 <realMODN+0x3ec>)
 800491e:	edd3 8a01 	vldr	s17, [r3, #4]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7fb fe10 	bl	8000548 <__aeabi_f2d>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	a166      	add	r1, pc, #408	; (adr r1, 8004ac8 <realMODN+0x3e0>)
 800492e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004932:	f7fb fca9 	bl	8000288 <__aeabi_dsub>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	f7fc f953 	bl	8000be8 <__aeabi_d2f>
 8004942:	4603      	mov	r3, r0
 8004944:	ee00 3a10 	vmov	s0, r3
 8004948:	f019 fe66 	bl	801e618 <sinf>
 800494c:	eef0 7a40 	vmov.f32	s15, s0
 8004950:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004954:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004958:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <realMODN+0x3ec>)
 800495a:	edd3 6a02 	vldr	s13, [r3, #8]
 800495e:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <realMODN+0x3ec>)
 8004960:	edd3 7a08 	vldr	s15, [r3, #32]
 8004964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800496c:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <realMODN+0x3ec>)
 800496e:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8004972:	4b58      	ldr	r3, [pc, #352]	; (8004ad4 <realMODN+0x3ec>)
 8004974:	ed93 8a00 	vldr	s16, [r3]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7fb fde5 	bl	8000548 <__aeabi_f2d>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	a151      	add	r1, pc, #324	; (adr r1, 8004ac8 <realMODN+0x3e0>)
 8004984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004988:	f7fb fc7e 	bl	8000288 <__aeabi_dsub>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f7fc f928 	bl	8000be8 <__aeabi_d2f>
 8004998:	4603      	mov	r3, r0
 800499a:	ee00 3a10 	vmov	s0, r3
 800499e:	f019 fdf3 	bl	801e588 <cosf>
 80049a2:	eef0 7a40 	vmov.f32	s15, s0
 80049a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80049aa:	4b4a      	ldr	r3, [pc, #296]	; (8004ad4 <realMODN+0x3ec>)
 80049ac:	edd3 8a01 	vldr	s17, [r3, #4]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7fb fdc9 	bl	8000548 <__aeabi_f2d>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	a143      	add	r1, pc, #268	; (adr r1, 8004ac8 <realMODN+0x3e0>)
 80049bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049c0:	f7fb fc62 	bl	8000288 <__aeabi_dsub>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7fc f90c 	bl	8000be8 <__aeabi_d2f>
 80049d0:	4603      	mov	r3, r0
 80049d2:	ee00 3a10 	vmov	s0, r3
 80049d6:	f019 fe1f 	bl	801e618 <sinf>
 80049da:	eef0 7a40 	vmov.f32	s15, s0
 80049de:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049e2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80049e6:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <realMODN+0x3ec>)
 80049e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80049ec:	4b39      	ldr	r3, [pc, #228]	; (8004ad4 <realMODN+0x3ec>)
 80049ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80049f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049fa:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <realMODN+0x3ec>)
 80049fc:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8004a00:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <realMODN+0x3ec>)
 8004a02:	ed93 8a00 	vldr	s16, [r3]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7fb fd9e 	bl	8000548 <__aeabi_f2d>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	a12b      	add	r1, pc, #172	; (adr r1, 8004ac0 <realMODN+0x3d8>)
 8004a12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a16:	f7fb fc37 	bl	8000288 <__aeabi_dsub>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	f7fc f8e1 	bl	8000be8 <__aeabi_d2f>
 8004a26:	4603      	mov	r3, r0
 8004a28:	ee00 3a10 	vmov	s0, r3
 8004a2c:	f019 fdac 	bl	801e588 <cosf>
 8004a30:	eef0 7a40 	vmov.f32	s15, s0
 8004a34:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a38:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <realMODN+0x3ec>)
 8004a3a:	edd3 8a01 	vldr	s17, [r3, #4]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7fb fd82 	bl	8000548 <__aeabi_f2d>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	a11d      	add	r1, pc, #116	; (adr r1, 8004ac0 <realMODN+0x3d8>)
 8004a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4e:	f7fb fc1b 	bl	8000288 <__aeabi_dsub>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f8c5 	bl	8000be8 <__aeabi_d2f>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	ee00 3a10 	vmov	s0, r3
 8004a64:	f019 fdd8 	bl	801e618 <sinf>
 8004a68:	eef0 7a40 	vmov.f32	s15, s0
 8004a6c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a70:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <realMODN+0x3ec>)
 8004a76:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a7a:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <realMODN+0x3ec>)
 8004a7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <realMODN+0x3ec>)
 8004a8a:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <realMODN+0x3ec>)
 8004a90:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <realMODN+0x3ec>)
 8004a96:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <realMODN+0x3ec>)
 8004a9c:	edd3 6a05 	vldr	s13, [r3, #20]
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <realMODN+0x3ec>)
 8004aa2:	ed93 6a06 	vldr	s12, [r3, #24]
 8004aa6:	6838      	ldr	r0, [r7, #0]
 8004aa8:	eef0 1a46 	vmov.f32	s3, s12
 8004aac:	eeb0 1a66 	vmov.f32	s2, s13
 8004ab0:	eef0 0a47 	vmov.f32	s1, s14
 8004ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab8:	f004 fdf2 	bl	80096a0 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8004abc:	e0e2      	b.n	8004c84 <realMODN+0x59c>
 8004abe:	bf00      	nop
 8004ac0:	2e48e8a7 	.word	0x2e48e8a7
 8004ac4:	3fe921ff 	.word	0x3fe921ff
 8004ac8:	62b6ae7d 	.word	0x62b6ae7d
 8004acc:	4002d97f 	.word	0x4002d97f
 8004ad0:	20006ccc 	.word	0x20006ccc
 8004ad4:	20006a74 	.word	0x20006a74
		else if (MODN.base == MODN_TRI_OMNI){
 8004ad8:	4b71      	ldr	r3, [pc, #452]	; (8004ca0 <realMODN+0x5b8>)
 8004ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	f040 80d0 	bne.w	8004c84 <realMODN+0x59c>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004ae4:	4b6e      	ldr	r3, [pc, #440]	; (8004ca0 <realMODN+0x5b8>)
 8004ae6:	ed93 8a01 	vldr	s16, [r3, #4]
 8004aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aee:	eef1 7a67 	vneg.f32	s15, s15
 8004af2:	eeb0 0a67 	vmov.f32	s0, s15
 8004af6:	f019 fd8f 	bl	801e618 <sinf>
 8004afa:	eef0 7a40 	vmov.f32	s15, s0
 8004afe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <realMODN+0x5b8>)
 8004b04:	edd3 8a00 	vldr	s17, [r3]
 8004b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b0c:	eef1 7a67 	vneg.f32	s15, s15
 8004b10:	eeb0 0a67 	vmov.f32	s0, s15
 8004b14:	f019 fd38 	bl	801e588 <cosf>
 8004b18:	eef0 7a40 	vmov.f32	s15, s0
 8004b1c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b20:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b24:	4b5e      	ldr	r3, [pc, #376]	; (8004ca0 <realMODN+0x5b8>)
 8004b26:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ca0 <realMODN+0x5b8>)
 8004b2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b38:	4b59      	ldr	r3, [pc, #356]	; (8004ca0 <realMODN+0x5b8>)
 8004b3a:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8004b3e:	4b58      	ldr	r3, [pc, #352]	; (8004ca0 <realMODN+0x5b8>)
 8004b40:	ed93 8a01 	vldr	s16, [r3, #4]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7fb fcff 	bl	8000548 <__aeabi_f2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	a150      	add	r1, pc, #320	; (adr r1, 8004c90 <realMODN+0x5a8>)
 8004b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b54:	f7fb fb98 	bl	8000288 <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7fc f842 	bl	8000be8 <__aeabi_d2f>
 8004b64:	4603      	mov	r3, r0
 8004b66:	ee00 3a10 	vmov	s0, r3
 8004b6a:	f019 fd55 	bl	801e618 <sinf>
 8004b6e:	eef0 7a40 	vmov.f32	s15, s0
 8004b72:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <realMODN+0x5b8>)
 8004b78:	edd3 8a00 	vldr	s17, [r3]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7fb fce3 	bl	8000548 <__aeabi_f2d>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	a142      	add	r1, pc, #264	; (adr r1, 8004c90 <realMODN+0x5a8>)
 8004b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b8c:	f7fb fb7c 	bl	8000288 <__aeabi_dsub>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f7fc f826 	bl	8000be8 <__aeabi_d2f>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	ee00 3a10 	vmov	s0, r3
 8004ba2:	f019 fcf1 	bl	801e588 <cosf>
 8004ba6:	eef0 7a40 	vmov.f32	s15, s0
 8004baa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004bae:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <realMODN+0x5b8>)
 8004bb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <realMODN+0x5b8>)
 8004bba:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc6:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <realMODN+0x5b8>)
 8004bc8:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004bcc:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <realMODN+0x5b8>)
 8004bce:	ed93 8a01 	vldr	s16, [r3, #4]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7fb fcb8 	bl	8000548 <__aeabi_f2d>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	a12e      	add	r1, pc, #184	; (adr r1, 8004c98 <realMODN+0x5b0>)
 8004bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be2:	f7fb fb51 	bl	8000288 <__aeabi_dsub>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fb fffb 	bl	8000be8 <__aeabi_d2f>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	ee00 3a10 	vmov	s0, r3
 8004bf8:	f019 fd0e 	bl	801e618 <sinf>
 8004bfc:	eef0 7a40 	vmov.f32	s15, s0
 8004c00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004c04:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <realMODN+0x5b8>)
 8004c06:	edd3 8a00 	vldr	s17, [r3]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7fb fc9c 	bl	8000548 <__aeabi_f2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	a120      	add	r1, pc, #128	; (adr r1, 8004c98 <realMODN+0x5b0>)
 8004c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c1a:	f7fb fb35 	bl	8000288 <__aeabi_dsub>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fb ffdf 	bl	8000be8 <__aeabi_d2f>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	ee00 3a10 	vmov	s0, r3
 8004c30:	f019 fcaa 	bl	801e588 <cosf>
 8004c34:	eef0 7a40 	vmov.f32	s15, s0
 8004c38:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004c3c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <realMODN+0x5b8>)
 8004c42:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <realMODN+0x5b8>)
 8004c48:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <realMODN+0x5b8>)
 8004c56:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <realMODN+0x5b8>)
 8004c5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <realMODN+0x5b8>)
 8004c62:	ed93 7a04 	vldr	s14, [r3, #16]
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <realMODN+0x5b8>)
 8004c68:	edd3 6a05 	vldr	s13, [r3, #20]
 8004c6c:	6838      	ldr	r0, [r7, #0]
 8004c6e:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004ca4 <realMODN+0x5bc>
 8004c72:	eeb0 1a66 	vmov.f32	s2, s13
 8004c76:	eef0 0a47 	vmov.f32	s1, s14
 8004c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c7e:	f004 fd0f 	bl	80096a0 <RNSVelocity>
}
 8004c82:	e7ff      	b.n	8004c84 <realMODN+0x59c>
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	ecbd 8b02 	vpop	{d8}
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	c985f06f 	.word	0xc985f06f
 8004c94:	4000c154 	.word	0x4000c154
 8004c98:	c985f06f 	.word	0xc985f06f
 8004c9c:	3ff0c154 	.word	0x3ff0c154
 8004ca0:	20006a74 	.word	0x20006a74
 8004ca4:	00000000 	.word	0x00000000

08004ca8 <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <setOrientationMODN+0x1c>)
 8004cb6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	20006a74 	.word	0x20006a74

08004cc8 <setSpeedMODN>:

void setSpeedMODN(float speed){
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <setSpeedMODN+0x3c>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <setSpeedMODN+0x3c>)
 8004cda:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ce2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <setSpeedMODN+0x3c>)
 8004ce8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <setSpeedMODN+0x3c>)
 8004cf2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20006a74 	.word	0x20006a74

08004d08 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	float data=0;
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004d16:	4b72      	ldr	r3, [pc, #456]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004d1c:	231f      	movs	r3, #31
 8004d1e:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004d20:	8afa      	ldrh	r2, [r7, #22]
 8004d22:	8abb      	ldrh	r3, [r7, #20]
 8004d24:	4013      	ands	r3, r2
 8004d26:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004d28:	8a7b      	ldrh	r3, [r7, #18]
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	d136      	bne.n	8004d9c <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	749a      	strb	r2, [r3, #18]
 8004d3e:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004d40:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004d42:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004d4e:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fbf4 	bl	8000548 <__aeabi_f2d>
 8004d60:	a35d      	add	r3, pc, #372	; (adr r3, 8004ed8 <decode_Odrive+0x1d0>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fc47 	bl	80005f8 <__aeabi_dmul>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4614      	mov	r4, r2
 8004d70:	461d      	mov	r5, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fbe6 	bl	8000548 <__aeabi_f2d>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	f7fb fc38 	bl	80005f8 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f7fb ff2a 	bl	8000be8 <__aeabi_d2f>
 8004d94:	4602      	mov	r2, r0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004d9a:	e097      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004d9c:	8a7b      	ldrh	r3, [r7, #18]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d123      	bne.n	8004dea <decode_Odrive+0xe2>
 8004da2:	4b4f      	ldr	r3, [pc, #316]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004da4:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004da6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db0:	ee17 2a90 	vmov	r2, s15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004db8:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004dba:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004dc4:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004dc6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d178      	bne.n	8004ecc <decode_Odrive+0x1c4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7c1b      	ldrb	r3, [r3, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d174      	bne.n	8004ecc <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	741a      	strb	r2, [r3, #16]
}
 8004de8:	e070      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004dea:	8a7b      	ldrh	r3, [r7, #18]
 8004dec:	2b17      	cmp	r3, #23
 8004dee:	d109      	bne.n	8004e04 <decode_Odrive+0xfc>
 8004df0:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004df2:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004df4:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	745a      	strb	r2, [r3, #17]
}
 8004e02:	e063      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004e04:	8a7b      	ldrh	r3, [r7, #18]
 8004e06:	2b15      	cmp	r3, #21
 8004e08:	d10f      	bne.n	8004e2a <decode_Odrive+0x122>
 8004e0a:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004e0e:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e16:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004e1a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	75da      	strb	r2, [r3, #23]
}
 8004e28:	e050      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004e2a:	8a7b      	ldrh	r3, [r7, #18]
 8004e2c:	2b14      	cmp	r3, #20
 8004e2e:	d10f      	bne.n	8004e50 <decode_Odrive+0x148>
 8004e30:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004e32:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004e34:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	665a      	str	r2, [r3, #100]	; 0x64
 8004e3c:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004e40:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	755a      	strb	r2, [r3, #21]
}
 8004e4e:	e03d      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004e50:	8a7b      	ldrh	r3, [r7, #18]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d128      	bne.n	8004ea8 <decode_Odrive+0x1a0>
 8004e56:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004e58:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004e5a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e64:	ee17 2a90 	vmov	r2, s15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f836 	bl	8004ee8 <Odrive_Error_To_String>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4620      	mov	r0, r4
 8004e82:	f015 fe22 	bl	801aaca <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7fb f99f 	bl	80001d0 <strlen>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4423      	add	r3, r4
 8004e96:	4913      	ldr	r1, [pc, #76]	; (8004ee4 <decode_Odrive+0x1dc>)
 8004e98:	461a      	mov	r2, r3
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	759a      	strb	r2, [r3, #22]
}
 8004ea6:	e011      	b.n	8004ecc <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	2b0a      	cmp	r3, #10
 8004eac:	d10e      	bne.n	8004ecc <decode_Odrive+0x1c4>
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004eb2:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <decode_Odrive+0x1d8>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004ebe:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	751a      	strb	r2, [r3, #20]
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed4:	f3af 8000 	nop.w
 8004ed8:	54442d18 	.word	0x54442d18
 8004edc:	400921fb 	.word	0x400921fb
 8004ee0:	20006890 	.word	0x20006890
 8004ee4:	0801fa40 	.word	0x0801fa40

08004ee8 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	f000 80fd 	beq.w	80050f4 <Odrive_Error_To_String+0x20c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	f200 80fa 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0a:	f000 80f1 	beq.w	80050f0 <Odrive_Error_To_String+0x208>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f14:	f200 80f0 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1e:	f000 80e5 	beq.w	80050ec <Odrive_Error_To_String+0x204>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f28:	f200 80e6 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f32:	f000 80d9 	beq.w	80050e8 <Odrive_Error_To_String+0x200>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f3c:	f200 80dc 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f46:	f000 80cd 	beq.w	80050e4 <Odrive_Error_To_String+0x1fc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f50:	f200 80d2 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5a:	f000 80c1 	beq.w	80050e0 <Odrive_Error_To_String+0x1f8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	f200 80c8 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	f000 80b5 	beq.w	80050dc <Odrive_Error_To_String+0x1f4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	f200 80be 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f82:	f000 80a9 	beq.w	80050d8 <Odrive_Error_To_String+0x1f0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8c:	f200 80b4 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	f000 809d 	beq.w	80050d4 <Odrive_Error_To_String+0x1ec>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	f200 80aa 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	f000 8091 	beq.w	80050d0 <Odrive_Error_To_String+0x1e8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb4:	f200 80a0 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	f000 8085 	beq.w	80050cc <Odrive_Error_To_String+0x1e4>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	f200 8096 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd2:	d079      	beq.n	80050c8 <Odrive_Error_To_String+0x1e0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	f200 808d 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe4:	d06e      	beq.n	80050c4 <Odrive_Error_To_String+0x1dc>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	f200 8084 	bhi.w	80050f8 <Odrive_Error_To_String+0x210>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d063      	beq.n	80050c0 <Odrive_Error_To_String+0x1d8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	d87b      	bhi.n	80050f8 <Odrive_Error_To_String+0x210>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b20      	cmp	r3, #32
 8005004:	d848      	bhi.n	8005098 <Odrive_Error_To_String+0x1b0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b20      	cmp	r3, #32
 800500a:	d875      	bhi.n	80050f8 <Odrive_Error_To_String+0x210>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <Odrive_Error_To_String+0x12c>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	080050a1 	.word	0x080050a1
 8005018:	080050a5 	.word	0x080050a5
 800501c:	080050a9 	.word	0x080050a9
 8005020:	080050f9 	.word	0x080050f9
 8005024:	080050ad 	.word	0x080050ad
 8005028:	080050f9 	.word	0x080050f9
 800502c:	080050f9 	.word	0x080050f9
 8005030:	080050f9 	.word	0x080050f9
 8005034:	080050b1 	.word	0x080050b1
 8005038:	080050f9 	.word	0x080050f9
 800503c:	080050f9 	.word	0x080050f9
 8005040:	080050f9 	.word	0x080050f9
 8005044:	080050f9 	.word	0x080050f9
 8005048:	080050f9 	.word	0x080050f9
 800504c:	080050f9 	.word	0x080050f9
 8005050:	080050f9 	.word	0x080050f9
 8005054:	080050b5 	.word	0x080050b5
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050f9 	.word	0x080050f9
 8005068:	080050f9 	.word	0x080050f9
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050f9 	.word	0x080050f9
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050f9 	.word	0x080050f9
 8005088:	080050f9 	.word	0x080050f9
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f9 	.word	0x080050f9
 8005094:	080050b9 	.word	0x080050b9
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d00e      	beq.n	80050bc <Odrive_Error_To_String+0x1d4>
 800509e:	e02b      	b.n	80050f8 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <Odrive_Error_To_String+0x220>)
 80050a2:	e02a      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <Odrive_Error_To_String+0x224>)
 80050a6:	e028      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 80050a8:	4b19      	ldr	r3, [pc, #100]	; (8005110 <Odrive_Error_To_String+0x228>)
 80050aa:	e026      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <Odrive_Error_To_String+0x22c>)
 80050ae:	e024      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 80050b0:	4b19      	ldr	r3, [pc, #100]	; (8005118 <Odrive_Error_To_String+0x230>)
 80050b2:	e022      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <Odrive_Error_To_String+0x234>)
 80050b6:	e020      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <Odrive_Error_To_String+0x238>)
 80050ba:	e01e      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <Odrive_Error_To_String+0x23c>)
 80050be:	e01c      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 80050c0:	4b19      	ldr	r3, [pc, #100]	; (8005128 <Odrive_Error_To_String+0x240>)
 80050c2:	e01a      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <Odrive_Error_To_String+0x244>)
 80050c6:	e018      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <Odrive_Error_To_String+0x248>)
 80050ca:	e016      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <Odrive_Error_To_String+0x24c>)
 80050ce:	e014      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <Odrive_Error_To_String+0x250>)
 80050d2:	e012      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <Odrive_Error_To_String+0x254>)
 80050d6:	e010      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <Odrive_Error_To_String+0x258>)
 80050da:	e00e      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <Odrive_Error_To_String+0x25c>)
 80050de:	e00c      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <Odrive_Error_To_String+0x260>)
 80050e2:	e00a      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 80050e4:	4b19      	ldr	r3, [pc, #100]	; (800514c <Odrive_Error_To_String+0x264>)
 80050e6:	e008      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <Odrive_Error_To_String+0x268>)
 80050ea:	e006      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 80050ec:	4b19      	ldr	r3, [pc, #100]	; (8005154 <Odrive_Error_To_String+0x26c>)
 80050ee:	e004      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <Odrive_Error_To_String+0x270>)
 80050f2:	e002      	b.n	80050fa <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <Odrive_Error_To_String+0x274>)
 80050f6:	e000      	b.n	80050fa <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <Odrive_Error_To_String+0x278>)
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	0801fa44 	.word	0x0801fa44
 800510c:	0801fa50 	.word	0x0801fa50
 8005110:	0801fa60 	.word	0x0801fa60
 8005114:	0801fa70 	.word	0x0801fa70
 8005118:	0801fa80 	.word	0x0801fa80
 800511c:	0801fa94 	.word	0x0801fa94
 8005120:	0801faa0 	.word	0x0801faa0
 8005124:	0801faac 	.word	0x0801faac
 8005128:	0801fabc 	.word	0x0801fabc
 800512c:	0801fad0 	.word	0x0801fad0
 8005130:	0801fae8 	.word	0x0801fae8
 8005134:	0801fafc 	.word	0x0801fafc
 8005138:	0801fb18 	.word	0x0801fb18
 800513c:	0801fb30 	.word	0x0801fb30
 8005140:	0801fb40 	.word	0x0801fb40
 8005144:	0801fb54 	.word	0x0801fb54
 8005148:	0801fb70 	.word	0x0801fb70
 800514c:	0801fb8c 	.word	0x0801fb8c
 8005150:	0801fba4 	.word	0x0801fba4
 8005154:	0801fbb4 	.word	0x0801fbb4
 8005158:	0801fbc8 	.word	0x0801fbc8
 800515c:	0801fbdc 	.word	0x0801fbdc
 8005160:	0801fbf0 	.word	0x0801fbf0

08005164 <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800516a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800516e:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005170:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <OdriveCAN_Handler+0xcc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b29a      	uxth	r2, r3
 8005176:	887b      	ldrh	r3, [r7, #2]
 8005178:	4013      	ands	r3, r2
 800517a:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 800517c:	883b      	ldrh	r3, [r7, #0]
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	803b      	strh	r3, [r7, #0]
	int i=0;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e01f      	b.n	80051cc <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <OdriveCAN_Handler+0xd0>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	8b1b      	ldrh	r3, [r3, #24]
 800519a:	883a      	ldrh	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d112      	bne.n	80051c6 <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <OdriveCAN_Handler+0xd0>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fdab 	bl	8004d08 <decode_Odrive>
			c[i]++;
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <OdriveCAN_Handler+0xd4>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	491e      	ldr	r1, [pc, #120]	; (8005238 <OdriveCAN_Handler+0xd4>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80051c4:	e007      	b.n	80051d6 <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3301      	adds	r3, #1
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <OdriveCAN_Handler+0xd8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	dbda      	blt.n	800518c <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <OdriveCAN_Handler+0xd4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d111      	bne.n	8005202 <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <OdriveCAN_Handler+0xd4>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 80051e4:	4b16      	ldr	r3, [pc, #88]	; (8005240 <OdriveCAN_Handler+0xdc>)
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <OdriveCAN_Handler+0xdc>)
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2d9      	uxtb	r1, r3
 80051fa:	7853      	ldrb	r3, [r2, #1]
 80051fc:	f361 1386 	bfi	r3, r1, #6, #1
 8005200:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <OdriveCAN_Handler+0xd4>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d10e      	bne.n	8005228 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <OdriveCAN_Handler+0xd4>)
 800520c:	2200      	movs	r2, #0
 800520e:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <OdriveCAN_Handler+0xdc>)
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	b25b      	sxtb	r3, r3
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <OdriveCAN_Handler+0xdc>)
 8005218:	43db      	mvns	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	09db      	lsrs	r3, r3, #7
 800521e:	b2d9      	uxtb	r1, r3
 8005220:	7853      	ldrb	r3, [r2, #1]
 8005222:	f361 13c7 	bfi	r3, r1, #7, #1
 8005226:	7053      	strb	r3, [r2, #1]
	}

}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	2000a50c 	.word	0x2000a50c
 8005234:	2000a638 	.word	0x2000a638
 8005238:	200002c8 	.word	0x200002c8
 800523c:	200002c4 	.word	0x200002c4
 8005240:	40020814 	.word	0x40020814

08005244 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8005272:	edc7 0a08 	vstr	s1, [r7, #32]
 8005276:	ed87 1a07 	vstr	s2, [r7, #28]
 800527a:	edc7 1a06 	vstr	s3, [r7, #24]
 800527e:	ed87 2a05 	vstr	s4, [r7, #20]
 8005282:	edc7 2a04 	vstr	s5, [r7, #16]
 8005286:	ed87 3a03 	vstr	s6, [r7, #12]
 800528a:	edc7 3a02 	vstr	s7, [r7, #8]
 800528e:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005294:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a3a      	ldr	r2, [r7, #32]
 800529a:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f81b 	bl	80052fc <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80052c6:	bf00      	nop
 80052c8:	3728      	adds	r7, #40	; 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	4603      	mov	r3, r0
 80052d6:	ed87 0a02 	vstr	s0, [r7, #8]
 80052da:	6079      	str	r1, [r7, #4]
 80052dc:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	3302      	adds	r3, #2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	3304      	adds	r3, #4
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f804 	bl	80052fc <PIDCoeffCalc>
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 80052fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	edd3 7a08 	vldr	s15, [r3, #32]
 800530c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	d013      	beq.n	800533e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ed93 7a03 	vldr	s14, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800532a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
 800533c:	e007      	b.n	800534e <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	edd3 7a07 	vldr	s15, [r3, #28]
 8005354:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535c:	d108      	bne.n	8005370 <PIDCoeffCalc+0x74>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005364:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536c:	f000 80ef 	beq.w	800554e <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	ed93 7a03 	vldr	s14, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800537c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005380:	ee17 0a90 	vmov	r0, s15
 8005384:	f7fb f8e0 	bl	8000548 <__aeabi_f2d>
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005390:	f7fa ff7a 	bl	8000288 <__aeabi_dsub>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4614      	mov	r4, r2
 800539a:	461d      	mov	r5, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	ed93 7a03 	vldr	s14, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80053a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ac:	ee17 0a90 	vmov	r0, s15
 80053b0:	f7fb f8ca 	bl	8000548 <__aeabi_f2d>
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053bc:	f7fa ff66 	bl	800028c <__adddf3>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fb fa40 	bl	800084c <__aeabi_ddiv>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7fb fc08 	bl	8000be8 <__aeabi_d2f>
 80053d8:	4603      	mov	r3, r0
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef1 7a67 	vneg.f32	s15, s15
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb f8ab 	bl	8000548 <__aeabi_f2d>
 80053f2:	4604      	mov	r4, r0
 80053f4:	460d      	mov	r5, r1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb f8a4 	bl	8000548 <__aeabi_f2d>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	f7fa ff42 	bl	800028c <__adddf3>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4690      	mov	r8, r2
 800540e:	4699      	mov	r9, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb f897 	bl	8000548 <__aeabi_f2d>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4640      	mov	r0, r8
 8005420:	4649      	mov	r1, r9
 8005422:	f7fb f8e9 	bl	80005f8 <__aeabi_dmul>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4690      	mov	r8, r2
 800542c:	4699      	mov	r9, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	edd3 7a03 	vldr	s15, [r3, #12]
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	ee17 0a90 	vmov	r0, s15
 8005442:	f7fb f881 	bl	8000548 <__aeabi_f2d>
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800544e:	f7fa ff1d 	bl	800028c <__adddf3>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4640      	mov	r0, r8
 8005458:	4649      	mov	r1, r9
 800545a:	f7fb f9f7 	bl	800084c <__aeabi_ddiv>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fa ff11 	bl	800028c <__adddf3>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	f7fb fbb9 	bl	8000be8 <__aeabi_d2f>
 8005476:	4602      	mov	r2, r0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	edd3 7a03 	vldr	s15, [r3, #12]
 8005488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548c:	ee17 0a90 	vmov	r0, s15
 8005490:	f7fb f85a 	bl	8000548 <__aeabi_f2d>
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800549c:	f7fa fef4 	bl	8000288 <__aeabi_dsub>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	461d      	mov	r5, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb f84b 	bl	8000548 <__aeabi_f2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fb f89d 	bl	80005f8 <__aeabi_dmul>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4614      	mov	r4, r2
 80054c4:	461d      	mov	r5, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fb f83c 	bl	8000548 <__aeabi_f2d>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	f7fa feda 	bl	800028c <__adddf3>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4690      	mov	r8, r2
 80054de:	4699      	mov	r9, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fb f82f 	bl	8000548 <__aeabi_f2d>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb f881 	bl	80005f8 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fa fec3 	bl	8000288 <__aeabi_dsub>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4614      	mov	r4, r2
 8005508:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	edd3 7a03 	vldr	s15, [r3, #12]
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	ee17 0a90 	vmov	r0, s15
 800551e:	f7fb f813 	bl	8000548 <__aeabi_f2d>
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800552a:	f7fa feaf 	bl	800028c <__adddf3>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005532:	4620      	mov	r0, r4
 8005534:	4629      	mov	r1, r5
 8005536:	f7fb f989 	bl	800084c <__aeabi_ddiv>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	f7fb fb51 	bl	8000be8 <__aeabi_d2f>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c
 800554c:	e00c      	b.n	8005568 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	63da      	str	r2, [r3, #60]	; 0x3c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005572 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b087      	sub	sp, #28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80055c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80055c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055cc:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	edd3 7a08 	vldr	s15, [r3, #32]
 80055de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80055e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e6:	d033      	beq.n	8005650 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80055fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800560a:	e003      	b.n	8005614 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800563a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800563e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edd3 7a07 	vldr	s15, [r3, #28]
 8005656:	eef5 7a40 	vcmp.f32	s15, #0.0
 800565a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565e:	d107      	bne.n	8005670 <PID+0xc2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005666:	eef5 7a40 	vcmp.f32	s15, #0.0
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	d02c      	beq.n	80056ca <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800567c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005680:	edd7 7a03 	vldr	s15, [r7, #12]
 8005684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80056a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a4:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80056b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b8:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80056d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80056da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e2:	dd0f      	ble.n	8005704 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80056f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f4:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	7813      	ldrb	r3, [r2, #0]
 80056fc:	f36f 0300 	bfc	r3, #0, #1
 8005700:	7013      	strb	r3, [r2, #0]
 8005702:	e02b      	b.n	800575c <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	edd3 7a04 	vldr	s15, [r3, #16]
 800570a:	eef1 7a67 	vneg.f32	s15, s15
 800570e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571a:	d511      	bpl.n	8005740 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	edd3 7a06 	vldr	s15, [r3, #24]
 8005728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572c:	eef1 7a67 	vneg.f32	s15, s15
 8005730:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	7813      	ldrb	r3, [r2, #0]
 8005738:	f36f 0300 	bfc	r3, #0, #1
 800573c:	7013      	strb	r3, [r2, #0]
 800573e:	e00d      	b.n	800575c <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	edd3 7a06 	vldr	s15, [r3, #24]
 8005746:	ed97 7a02 	vldr	s14, [r7, #8]
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	7813      	ldrb	r3, [r2, #0]
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	7bfa      	ldrb	r2, [r7, #15]
 8005784:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80057a0:	f043 0302 	orr.w	r3, r3, #2
 80057a4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7ff fd42 	bl	8005244 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057c6:	4618      	mov	r0, r3
 80057c8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80057cc:	ed9f 3a48 	vldr	s6, [pc, #288]	; 80058f0 <PPInit+0x180>
 80057d0:	eddf 2a48 	vldr	s5, [pc, #288]	; 80058f4 <PPInit+0x184>
 80057d4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80057d8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80057dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80057e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80057e4:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80058f8 <PPInit+0x188>
 80057e8:	f7ff fd3e 	bl	8005268 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff febd 	bl	8005572 <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800580a:	461a      	mov	r2, r3
 800580c:	f7ff fd1a 	bl	8005244 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005816:	4618      	mov	r0, r3
 8005818:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800581c:	ed9f 3a34 	vldr	s6, [pc, #208]	; 80058f0 <PPInit+0x180>
 8005820:	eddf 2a34 	vldr	s5, [pc, #208]	; 80058f4 <PPInit+0x184>
 8005824:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005828:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800582c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005834:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80058f8 <PPInit+0x188>
 8005838:	f7ff fd16 	bl	8005268 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fe95 	bl	8005572 <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800585a:	461a      	mov	r2, r3
 800585c:	f7ff fcf2 	bl	8005244 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005866:	4618      	mov	r0, r3
 8005868:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800586c:	ed9f 3a23 	vldr	s6, [pc, #140]	; 80058fc <PPInit+0x18c>
 8005870:	eddf 2a22 	vldr	s5, [pc, #136]	; 80058fc <PPInit+0x18c>
 8005874:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8005878:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800587c:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8005900 <PPInit+0x190>
 8005880:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005884:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80058f8 <PPInit+0x188>
 8005888:	f7ff fcee 	bl	8005268 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fe6d 	bl	8005572 <PIDDelayInit>

	pp->tol_xy=0.20;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <PPInit+0x194>)
 800589c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=5.0;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	4a19      	ldr	r2, [pc, #100]	; (8005908 <PPInit+0x198>)
 80058a4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <PPInit+0x19c>)
 80058ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <PPInit+0x1a0>)
 80058b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=5.0;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <PPInit+0x198>)
 80058bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80058e0:	f36f 1304 	bfc	r3, #4, #1
 80058e4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	3ecccccd 	.word	0x3ecccccd
 80058f4:	00000000 	.word	0x00000000
 80058f8:	3ba3d70a 	.word	0x3ba3d70a
 80058fc:	3e4ccccd 	.word	0x3e4ccccd
 8005900:	3d088889 	.word	0x3d088889
 8005904:	3e4ccccd 	.word	0x3e4ccccd
 8005908:	40a00000 	.word	0x40a00000
 800590c:	3f19999a 	.word	0x3f19999a
 8005910:	3d75c28f 	.word	0x3d75c28f

08005914 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	ed87 0a03 	vstr	s0, [r7, #12]
 800591e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005922:	ed87 1a01 	vstr	s2, [r7, #4]
 8005926:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005946:	4619      	mov	r1, r3
 8005948:	ed97 0a03 	vldr	s0, [r7, #12]
 800594c:	2004      	movs	r0, #4
 800594e:	f7ff fcbe 	bl	80052ce <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005958:	4619      	mov	r1, r3
 800595a:	ed97 0a02 	vldr	s0, [r7, #8]
 800595e:	2005      	movs	r0, #5
 8005960:	f7ff fcb5 	bl	80052ce <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800596a:	4619      	mov	r1, r3
 800596c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005970:	2006      	movs	r0, #6
 8005972:	f7ff fcac 	bl	80052ce <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800597c:	4619      	mov	r1, r3
 800597e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005982:	2004      	movs	r0, #4
 8005984:	f7ff fca3 	bl	80052ce <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800598e:	4619      	mov	r1, r3
 8005990:	ed97 0a02 	vldr	s0, [r7, #8]
 8005994:	2005      	movs	r0, #5
 8005996:	f7ff fc9a 	bl	80052ce <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80059a0:	4619      	mov	r1, r3
 80059a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80059a6:	2006      	movs	r0, #6
 80059a8:	f7ff fc91 	bl	80052ce <PIDGainSet>
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80059be:	edc7 0a04 	vstr	s1, [r7, #16]
 80059c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80059c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80059ca:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80059d2:	4619      	mov	r1, r3
 80059d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80059d8:	2004      	movs	r0, #4
 80059da:	f7ff fc78 	bl	80052ce <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80059e4:	4619      	mov	r1, r3
 80059e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80059ea:	2005      	movs	r0, #5
 80059ec:	f7ff fc6f 	bl	80052ce <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80059f6:	4619      	mov	r1, r3
 80059f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80059fc:	2006      	movs	r0, #6
 80059fe:	f7ff fc66 	bl	80052ce <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005a08:	4619      	mov	r1, r3
 8005a0a:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a0e:	2003      	movs	r0, #3
 8005a10:	f7ff fc5d 	bl	80052ce <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	601a      	str	r2, [r3, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a30:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a34:	ed87 1a01 	vstr	s2, [r7, #4]
 8005a38:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	ed2d 8b02 	vpush	{d8}
 8005a64:	b086      	sub	sp, #24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e114      	b.n	8005c9e <PP_start+0x240>
	{
		pp->target_vel[i] = point[i][0];
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	3374      	adds	r3, #116	; 0x74
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	331a      	adds	r3, #26
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	3328      	adds	r3, #40	; 0x28
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3346      	adds	r3, #70	; 0x46
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3304      	adds	r3, #4
 8005b0a:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11f      	bne.n	8005b74 <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b44:	eeb0 7ae7 	vabs.f32	s14, s15
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005b54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b58:	eef0 7ae7 	vabs.f32	s15, s15
 8005b5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b60:	eeb0 0a66 	vmov.f32	s0, s13
 8005b64:	f018 fc3c 	bl	801e3e0 <atanf>
 8005b68:	eef0 7a40 	vmov.f32	s15, s0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 8005b72:	e03f      	b.n	8005bf4 <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	3b1c      	subs	r3, #28
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba0:	eeb0 7ae7 	vabs.f32	s14, s15
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3b1c      	subs	r3, #28
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005bd0:	eef0 7ae7 	vabs.f32	s15, s15
 8005bd4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005bd8:	eeb0 0a66 	vmov.f32	s0, s13
 8005bdc:	f018 fc00 	bl	801e3e0 <atanf>
 8005be0:	eef0 7a40 	vmov.f32	s15, s0
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3364      	adds	r3, #100	; 0x64
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	3304      	adds	r3, #4
 8005bf0:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3338      	adds	r3, #56	; 0x38
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	ed93 8a04 	vldr	s16, [r3, #16]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3364      	adds	r3, #100	; 0x64
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	edd3 7a00 	vldr	s15, [r3]
 8005c36:	eeb0 0a67 	vmov.f32	s0, s15
 8005c3a:	f018 fca5 	bl	801e588 <cosf>
 8005c3e:	eef0 7a40 	vmov.f32	s15, s0
 8005c42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3384      	adds	r3, #132	; 0x84
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	3304      	adds	r3, #4
 8005c52:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	ed93 8a04 	vldr	s16, [r3, #16]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3364      	adds	r3, #100	; 0x64
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	edd3 7a00 	vldr	s15, [r3]
 8005c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c7e:	f018 fccb 	bl	801e618 <sinf>
 8005c82:	eef0 7a40 	vmov.f32	s15, s0
 8005c86:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3394      	adds	r3, #148	; 0x94
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	f6ff aee6 	blt.w	8005a74 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d166      	bne.n	8005d88 <PP_start+0x32a>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cca:	eeb0 7ae7 	vabs.f32	s14, s15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cdc:	db17      	blt.n	8005d0e <PP_start+0x2b0>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cee:	eef0 7ae7 	vabs.f32	s15, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d00:	4619      	mov	r1, r3
 8005d02:	eeb0 0a47 	vmov.f32	s0, s14
 8005d06:	2002      	movs	r0, #2
 8005d08:	f7ff fae1 	bl	80052ce <PIDGainSet>
 8005d0c:	e008      	b.n	8005d20 <PP_start+0x2c2>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005d14:	4619      	mov	r1, r3
 8005d16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d1a:	2002      	movs	r0, #2
 8005d1c:	f7ff fad7 	bl	80052ce <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d30:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8005d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	db17      	blt.n	8005d74 <PP_start+0x316>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d54:	eef0 7ae7 	vabs.f32	s15, s15
 8005d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d66:	4619      	mov	r1, r3
 8005d68:	eeb0 0a47 	vmov.f32	s0, s14
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	f7ff faae 	bl	80052ce <PIDGainSet>
 8005d72:	e06f      	b.n	8005e54 <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d80:	2002      	movs	r0, #2
 8005d82:	f7ff faa4 	bl	80052ce <PIDGainSet>
 8005d86:	e065      	b.n	8005e54 <PP_start+0x3f6>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d98:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005daa:	db17      	blt.n	8005ddc <PP_start+0x37e>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dbc:	eef0 7ae7 	vabs.f32	s15, s15
 8005dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005dce:	4619      	mov	r1, r3
 8005dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7ff fa7a 	bl	80052ce <PIDGainSet>
 8005dda:	e008      	b.n	8005dee <PP_start+0x390>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005de2:	4619      	mov	r1, r3
 8005de4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005de8:	2002      	movs	r0, #2
 8005dea:	f7ff fa70 	bl	80052ce <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dfe:	eeb0 7ae7 	vabs.f32	s14, s15
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e10:	db17      	blt.n	8005e42 <PP_start+0x3e4>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e22:	eef0 7ae7 	vabs.f32	s15, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e34:	4619      	mov	r1, r3
 8005e36:	eeb0 0a47 	vmov.f32	s0, s14
 8005e3a:	2002      	movs	r0, #2
 8005e3c:	f7ff fa47 	bl	80052ce <PIDGainSet>
 8005e40:	e008      	b.n	8005e54 <PP_start+0x3f6>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e48:	4619      	mov	r1, r3
 8005e4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f7ff fa3d 	bl	80052ce <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005e60:	4619      	mov	r1, r3
 8005e62:	eeb0 0a67 	vmov.f32	s0, s15
 8005e66:	2003      	movs	r0, #3
 8005e68:	f7ff fa31 	bl	80052ce <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005e78:	4619      	mov	r1, r3
 8005e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e7e:	2003      	movs	r0, #3
 8005e80:	f7ff fa25 	bl	80052ce <PIDGainSet>

	pp->point_count=0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005eb0:	f36f 0382 	bfc	r3, #2, #1
 8005eb4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005ebe:	f36f 03c3 	bfc	r3, #3, #1
 8005ec2:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8005ec6:	bf00      	nop
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	ecbd 8b02 	vpop	{d8}
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005ee0:	f36f 0300 	bfc	r3, #0, #1
 8005ee4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fb3f 	bl	8005572 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fb39 	bl	8005572 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fb33 	bl	8005572 <PIDDelayInit>

}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fafd 	bl	8005572 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff faf7 	bl	8005572 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff faf1 	bl	8005572 <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005fa2:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	60da      	str	r2, [r3, #12]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8005fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fec:	ed2d 8b02 	vpush	{d8}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8134 	beq.w	8006270 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	edd3 7a00 	vldr	s15, [r3]
 8006024:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006030:	d516      	bpl.n	8006060 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	edd3 7a03 	vldr	s15, [r3, #12]
 8006038:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800605c <PathPlan+0x74>
 800603c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006044:	dd2b      	ble.n	800609e <PathPlan+0xb6>
				pp->yaw_constant++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800604c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800605a:	e020      	b.n	800609e <PathPlan+0xb6>
 800605c:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	edd3 7a00 	vldr	s15, [r3]
 8006068:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 800605c <PathPlan+0x74>
 800606c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	dd13      	ble.n	800609e <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	edd3 7a03 	vldr	s15, [r3, #12]
 800607c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006088:	d509      	bpl.n	800609e <PathPlan+0xb6>
				pp->yaw_constant--;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fa4a 	bl	8000548 <__aeabi_f2d>
 80060b4:	4604      	mov	r4, r0
 80060b6:	460d      	mov	r5, r1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fa fa43 	bl	8000548 <__aeabi_f2d>
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	4b68      	ldr	r3, [pc, #416]	; (8006268 <PathPlan+0x280>)
 80060c8:	f7fa fa96 	bl	80005f8 <__aeabi_dmul>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa f8da 	bl	800028c <__adddf3>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fa fa2f 	bl	8000548 <__aeabi_f2d>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa f8c9 	bl	8000288 <__aeabi_dsub>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4614      	mov	r4, r2
 80060fc:	461d      	mov	r5, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fa fa20 	bl	8000548 <__aeabi_f2d>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa f8bc 	bl	800028c <__adddf3>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	f7fa fd64 	bl	8000be8 <__aeabi_d2f>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa fa0c 	bl	8000548 <__aeabi_f2d>
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	4b4d      	ldr	r3, [pc, #308]	; (800626c <PathPlan+0x284>)
 8006136:	f7fa fb89 	bl	800084c <__aeabi_ddiv>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	a347      	add	r3, pc, #284	; (adr r3, 8006260 <PathPlan+0x278>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa fa56 	bl	80005f8 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f7fa fd48 	bl	8000be8 <__aeabi_d2f>
 8006158:	4602      	mov	r2, r0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800616a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	edd3 7a06 	vldr	s15, [r3, #24]
 8006174:	eeb0 0a67 	vmov.f32	s0, s15
 8006178:	f018 fa06 	bl	801e588 <cosf>
 800617c:	eef0 7a40 	vmov.f32	s15, s0
 8006180:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006190:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	edd3 7a06 	vldr	s15, [r3, #24]
 800619a:	eeb0 0a67 	vmov.f32	s0, s15
 800619e:	f018 fa3b 	bl	801e618 <sinf>
 80061a2:	eef0 7a40 	vmov.f32	s15, s0
 80061a6:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80061aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80061c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c4:	eeb1 8a67 	vneg.f32	s16, s15
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80061ce:	eeb0 0a67 	vmov.f32	s0, s15
 80061d2:	f018 fa21 	bl	801e618 <sinf>
 80061d6:	eef0 7a40 	vmov.f32	s15, s0
 80061da:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80061ea:	ee77 8a67 	vsub.f32	s17, s14, s15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80061f4:	eeb0 0a67 	vmov.f32	s0, s15
 80061f8:	f018 f9c6 	bl	801e588 <cosf>
 80061fc:	eef0 7a40 	vmov.f32	s15, s0
 8006200:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8006204:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800621a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	649a      	str	r2, [r3, #72]	; 0x48
 800625a:	e009      	b.n	8006270 <PathPlan+0x288>
 800625c:	f3af 8000 	nop.w
 8006260:	54442d18 	.word	0x54442d18
 8006264:	400921fb 	.word	0x400921fb
 8006268:	40768000 	.word	0x40768000
 800626c:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	f002 8513 	beq.w	8008ca8 <PathPlan+0x2cc0>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	f002 850a 	beq.w	8008ca8 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	3304      	adds	r3, #4
 80062a6:	edd3 7a00 	vldr	s15, [r3]
 80062aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b2:	f001 8389 	beq.w	80079c8 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8208 	bne.w	80066d2 <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	331a      	adds	r3, #26
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	ed93 7a00 	vldr	s14, [r3]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80062da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062e2:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	edd3 8a00 	vldr	s17, [r3]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	3328      	adds	r3, #40	; 0x28
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	ed93 7a00 	vldr	s14, [r3]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006316:	ee77 6a67 	vsub.f32	s13, s14, s15
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	331a      	adds	r3, #26
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	ed93 7a00 	vldr	s14, [r3]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006336:	eef0 0a67 	vmov.f32	s1, s15
 800633a:	eeb0 0a66 	vmov.f32	s0, s13
 800633e:	f018 f9ad 	bl	801e69c <atan2f>
 8006342:	eef0 7a40 	vmov.f32	s15, s0
 8006346:	eeb0 0a67 	vmov.f32	s0, s15
 800634a:	f018 f965 	bl	801e618 <sinf>
 800634e:	eef0 7a40 	vmov.f32	s15, s0
 8006352:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006356:	ee78 7a27 	vadd.f32	s15, s16, s15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006360:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	3328      	adds	r3, #40	; 0x28
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	ed93 7a00 	vldr	s14, [r3]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800637e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006382:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006386:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	edd3 8a00 	vldr	s17, [r3]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	3328      	adds	r3, #40	; 0x28
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	ed93 7a00 	vldr	s14, [r3]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80063ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	331a      	adds	r3, #26
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	ed93 7a00 	vldr	s14, [r3]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063da:	eef0 0a67 	vmov.f32	s1, s15
 80063de:	eeb0 0a66 	vmov.f32	s0, s13
 80063e2:	f018 f95b 	bl	801e69c <atan2f>
 80063e6:	eef0 7a40 	vmov.f32	s15, s0
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	f018 f8cb 	bl	801e588 <cosf>
 80063f2:	eef0 7a40 	vmov.f32	s15, s0
 80063f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80063fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8006404:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	3338      	adds	r3, #56	; 0x38
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	edd3 6a00 	vldr	s13, [r3]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800642e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006456:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	e12d      	b.n	80066bc <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8006460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006464:	edd7 7a03 	vldr	s15, [r7, #12]
 8006468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800646c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006470:	eeb0 0a67 	vmov.f32	s0, s15
 8006474:	f018 f914 	bl	801e6a0 <powf>
 8006478:	eeb0 7a40 	vmov.f32	s14, s0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	ee17 0a90 	vmov	r0, s15
 800648a:	f7fa f85d 	bl	8000548 <__aeabi_f2d>
 800648e:	4604      	mov	r4, r0
 8006490:	460d      	mov	r5, r1
 8006492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006496:	edd7 7a03 	vldr	s15, [r7, #12]
 800649a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800649e:	ee17 0a90 	vmov	r0, s15
 80064a2:	f7fa f851 	bl	8000548 <__aeabi_f2d>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	f7f9 feef 	bl	800028c <__adddf3>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4690      	mov	r8, r2
 80064b4:	4699      	mov	r9, r3
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7fa f846 	bl	8000548 <__aeabi_f2d>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	f7fa f898 	bl	80005f8 <__aeabi_dmul>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4690      	mov	r8, r2
 80064ce:	4699      	mov	r9, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fa f835 	bl	8000548 <__aeabi_f2d>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7fa f887 	bl	80005f8 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4614      	mov	r4, r2
 80064fc:	461d      	mov	r5, r3
 80064fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006502:	ed97 0a03 	vldr	s0, [r7, #12]
 8006506:	f018 f8cb 	bl	801e6a0 <powf>
 800650a:	eeb0 7a40 	vmov.f32	s14, s0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	331a      	adds	r3, #26
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	edd3 7a00 	vldr	s15, [r3]
 8006520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006524:	ee17 0a90 	vmov	r0, s15
 8006528:	f7fa f80e 	bl	8000548 <__aeabi_f2d>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 feaa 	bl	800028c <__adddf3>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	f7fa fb52 	bl	8000be8 <__aeabi_d2f>
 8006544:	4601      	mov	r1, r0
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 8006554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006558:	edd7 7a03 	vldr	s15, [r7, #12]
 800655c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006560:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006564:	eeb0 0a67 	vmov.f32	s0, s15
 8006568:	f018 f89a 	bl	801e6a0 <powf>
 800656c:	eeb0 7a40 	vmov.f32	s14, s0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	ee17 0a90 	vmov	r0, s15
 800657e:	f7f9 ffe3 	bl	8000548 <__aeabi_f2d>
 8006582:	4604      	mov	r4, r0
 8006584:	460d      	mov	r5, r1
 8006586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800658a:	edd7 7a03 	vldr	s15, [r7, #12]
 800658e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006592:	ee17 0a90 	vmov	r0, s15
 8006596:	f7f9 ffd7 	bl	8000548 <__aeabi_f2d>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	f7f9 fe75 	bl	800028c <__adddf3>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4690      	mov	r8, r2
 80065a8:	4699      	mov	r9, r3
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7f9 ffcc 	bl	8000548 <__aeabi_f2d>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4640      	mov	r0, r8
 80065b6:	4649      	mov	r1, r9
 80065b8:	f7fa f81e 	bl	80005f8 <__aeabi_dmul>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4690      	mov	r8, r2
 80065c2:	4699      	mov	r9, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7f9 ffbb 	bl	8000548 <__aeabi_f2d>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4640      	mov	r0, r8
 80065d8:	4649      	mov	r1, r9
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fe51 	bl	800028c <__adddf3>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4614      	mov	r4, r2
 80065f0:	461d      	mov	r5, r3
 80065f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80065f6:	ed97 0a03 	vldr	s0, [r7, #12]
 80065fa:	f018 f851 	bl	801e6a0 <powf>
 80065fe:	eeb0 7a40 	vmov.f32	s14, s0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	3328      	adds	r3, #40	; 0x28
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	edd3 7a00 	vldr	s15, [r3]
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	ee17 0a90 	vmov	r0, s15
 800661e:	f7f9 ff93 	bl	8000548 <__aeabi_f2d>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7f9 fe2f 	bl	800028c <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4610      	mov	r0, r2
 8006634:	4619      	mov	r1, r3
 8006636:	f7fa fad7 	bl	8000be8 <__aeabi_d2f>
 800663a:	4601      	mov	r1, r0
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	ed93 7a00 	vldr	s14, [r3]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	edd3 6a00 	vldr	s13, [r3]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800667c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80066ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b2:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	3301      	adds	r3, #1
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f6ff aecb 	blt.w	8006460 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	ed93 7a00 	vldr	s14, [r3]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80066ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	ed93 7a00 	vldr	s14, [r3]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	ed93 7a00 	vldr	s14, [r3]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	edd3 7a04 	vldr	s15, [r3, #16]
 8006734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800674a:	3b01      	subs	r3, #1
 800674c:	429a      	cmp	r2, r3
 800674e:	d14a      	bne.n	80067e6 <PathPlan+0x7fe>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006756:	eef0 7ae7 	vabs.f32	s15, s15
 800675a:	ee17 0a90 	vmov	r0, s15
 800675e:	f7f9 fef3 	bl	8000548 <__aeabi_f2d>
 8006762:	4604      	mov	r4, r0
 8006764:	460d      	mov	r5, r1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800676c:	eef0 7ae7 	vabs.f32	s15, s15
 8006770:	ee17 0a90 	vmov	r0, s15
 8006774:	f7f9 fee8 	bl	8000548 <__aeabi_f2d>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 fd84 	bl	800028c <__adddf3>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006794:	f7fa f85a 	bl	800084c <__aeabi_ddiv>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4614      	mov	r4, r2
 800679e:	461d      	mov	r5, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7f9 fece 	bl	8000548 <__aeabi_f2d>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4620      	mov	r0, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	f7fa f992 	bl	8000adc <__aeabi_dcmplt>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d013      	beq.n	80067e6 <PathPlan+0x7fe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80067c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80067ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d506      	bpl.n	80067e6 <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80067de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e005      	b.n	80067f2 <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80067f8:	edd3 7a00 	vldr	s15, [r3]
 80067fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800680a:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006814:	edd3 7a00 	vldr	s15, [r3]
 8006818:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006ab0 <PathPlan+0xac8>
 800681c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006824:	d811      	bhi.n	800684a <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800682c:	ed93 7a00 	vldr	s14, [r3]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006836:	edd3 7a00 	vldr	s15, [r3]
 800683a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006844:	edc3 7a00 	vstr	s15, [r3]
 8006848:	e034      	b.n	80068b4 <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006850:	edd3 6a00 	vldr	s13, [r3]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800685a:	ed93 7a00 	vldr	s14, [r3]
 800685e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006868:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7f9 fe67 	bl	8000548 <__aeabi_f2d>
 800687a:	a38b      	add	r3, pc, #556	; (adr r3, 8006aa8 <PathPlan+0xac0>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7fa f940 	bl	8000b04 <__aeabi_dcmpge>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8006892:	e003      	b.n	800689c <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80068ba:	eef0 7ae7 	vabs.f32	s15, s15
 80068be:	ee17 0a90 	vmov	r0, s15
 80068c2:	f7f9 fe41 	bl	8000548 <__aeabi_f2d>
 80068c6:	4604      	mov	r4, r0
 80068c8:	460d      	mov	r5, r1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80068d0:	eef0 7ae7 	vabs.f32	s15, s15
 80068d4:	ee17 0a90 	vmov	r0, s15
 80068d8:	f7f9 fe36 	bl	8000548 <__aeabi_f2d>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4620      	mov	r0, r4
 80068e2:	4629      	mov	r1, r5
 80068e4:	f7f9 fcd2 	bl	800028c <__adddf3>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4610      	mov	r0, r2
 80068ee:	4619      	mov	r1, r3
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068f8:	f7f9 ffa8 	bl	800084c <__aeabi_ddiv>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800690a:	4618      	mov	r0, r3
 800690c:	f7f9 fe1c 	bl	8000548 <__aeabi_f2d>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4620      	mov	r0, r4
 8006916:	4629      	mov	r1, r5
 8006918:	f7fa f8e0 	bl	8000adc <__aeabi_dcmplt>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8462 	beq.w	80071e8 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006930:	3b01      	subs	r3, #1
 8006932:	429a      	cmp	r2, r3
 8006934:	f280 8135 	bge.w	8006ba2 <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006948:	4619      	mov	r1, r3
 800694a:	eeb0 0a67 	vmov.f32	s0, s15
 800694e:	2004      	movs	r0, #4
 8006950:	f7fe fcbd 	bl	80052ce <PIDGainSet>
					pp->crnt_crv_pt++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	ed93 7a00 	vldr	s14, [r3]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800697c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	ed93 7a00 	vldr	s14, [r3]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80069a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	ed93 7a00 	vldr	s14, [r3]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80069c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	331a      	adds	r3, #26
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	ed93 7a00 	vldr	s14, [r3]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80069e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80069ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f2:	d01d      	beq.n	8006a30 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	331a      	adds	r3, #26
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	ed93 7a00 	vldr	s14, [r3]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a10:	eef0 7ae7 	vabs.f32	s15, s15
 8006a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a22:	4619      	mov	r1, r3
 8006a24:	eeb0 0a47 	vmov.f32	s0, s14
 8006a28:	2002      	movs	r0, #2
 8006a2a:	f7fe fc50 	bl	80052ce <PIDGainSet>
 8006a2e:	e008      	b.n	8006a42 <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a36:	4619      	mov	r1, r3
 8006a38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a3c:	2002      	movs	r0, #2
 8006a3e:	f7fe fc46 	bl	80052ce <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	3328      	adds	r3, #40	; 0x28
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	3304      	adds	r3, #4
 8006a52:	ed93 7a00 	vldr	s14, [r3]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a68:	d024      	beq.n	8006ab4 <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	3328      	adds	r3, #40	; 0x28
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	3304      	adds	r3, #4
 8006a7a:	ed93 7a00 	vldr	s14, [r3]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a88:	eef0 7ae7 	vabs.f32	s15, s15
 8006a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8006aa0:	2002      	movs	r0, #2
 8006aa2:	f7fe fc14 	bl	80052ce <PIDGainSet>
 8006aa6:	e00e      	b.n	8006ac6 <PathPlan+0xade>
 8006aa8:	66666666 	.word	0x66666666
 8006aac:	3fee6666 	.word	0x3fee6666
 8006ab0:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006aba:	4619      	mov	r1, r3
 8006abc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ac0:	2002      	movs	r0, #2
 8006ac2:	f7fe fc04 	bl	80052ce <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad8:	2004      	movs	r0, #4
 8006ada:	f7fe fbf8 	bl	80052ce <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006aea:	4619      	mov	r1, r3
 8006aec:	eeb0 0a67 	vmov.f32	s0, s15
 8006af0:	2004      	movs	r0, #4
 8006af2:	f7fe fbec 	bl	80052ce <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b02:	4619      	mov	r1, r3
 8006b04:	eeb0 0a67 	vmov.f32	s0, s15
 8006b08:	2005      	movs	r0, #5
 8006b0a:	f7fe fbe0 	bl	80052ce <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b20:	2005      	movs	r0, #5
 8006b22:	f7fe fbd4 	bl	80052ce <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b32:	4619      	mov	r1, r3
 8006b34:	eeb0 0a67 	vmov.f32	s0, s15
 8006b38:	2006      	movs	r0, #6
 8006b3a:	f7fe fbc8 	bl	80052ce <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b50:	2006      	movs	r0, #6
 8006b52:	f7fe fbbc 	bl	80052ce <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	3384      	adds	r3, #132	; 0x84
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	3304      	adds	r3, #4
 8006b66:	edd3 7a00 	vldr	s15, [r3]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b70:	4619      	mov	r1, r3
 8006b72:	eeb0 0a67 	vmov.f32	s0, s15
 8006b76:	2003      	movs	r0, #3
 8006b78:	f7fe fba9 	bl	80052ce <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	3394      	adds	r3, #148	; 0x94
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	edd3 7a00 	vldr	s15, [r3]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006b94:	4619      	mov	r1, r3
 8006b96:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9a:	2003      	movs	r0, #3
 8006b9c:	f7fe fb97 	bl	80052ce <PIDGainSet>
 8006ba0:	e322      	b.n	80071e8 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	f040 8252 	bne.w	800705a <PathPlan+0x1072>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	f280 8248 	bge.w	800705a <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006bd0:	eef0 7ae7 	vabs.f32	s15, s15
 8006bd4:	ee17 0a90 	vmov	r0, s15
 8006bd8:	f7f9 fcb6 	bl	8000548 <__aeabi_f2d>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006be6:	eef0 7ae7 	vabs.f32	s15, s15
 8006bea:	ee17 0a90 	vmov	r0, s15
 8006bee:	f7f9 fcab 	bl	8000548 <__aeabi_f2d>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7f9 fb47 	bl	800028c <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c0e:	f7f9 fe1d 	bl	800084c <__aeabi_ddiv>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4614      	mov	r4, r2
 8006c18:	461d      	mov	r5, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7f9 fc91 	bl	8000548 <__aeabi_f2d>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 ff55 	bl	8000adc <__aeabi_dcmplt>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 82d6 	beq.w	80071e6 <PathPlan+0x11fe>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006c40:	eeb0 7ae7 	vabs.f32	s14, s15
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c52:	d400      	bmi.n	8006c56 <PathPlan+0xc6e>
 8006c54:	e2c7      	b.n	80071e6 <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	3346      	adds	r3, #70	; 0x46
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	edd3 7a00 	vldr	s15, [r3]
 8006c6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c6e:	eef4 7a47 	vcmp.f32	s15, s14
 8006c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c76:	f040 80fd 	bne.w	8006e74 <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	f040 82b0 	bne.w	80071e6 <PathPlan+0x11fe>

								pp->point_count++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	331a      	adds	r3, #26
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	ed93 7a00 	vldr	s14, [r3]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	d01d      	beq.n	8006cf6 <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	331a      	adds	r3, #26
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	ed93 7a00 	vldr	s14, [r3]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cd6:	eef0 7ae7 	vabs.f32	s15, s15
 8006cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ce8:	4619      	mov	r1, r3
 8006cea:	eeb0 0a47 	vmov.f32	s0, s14
 8006cee:	2002      	movs	r0, #2
 8006cf0:	f7fe faed 	bl	80052ce <PIDGainSet>
 8006cf4:	e008      	b.n	8006d08 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d02:	2002      	movs	r0, #2
 8006d04:	f7fe fae3 	bl	80052ce <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	3328      	adds	r3, #40	; 0x28
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	3304      	adds	r3, #4
 8006d18:	ed93 7a00 	vldr	s14, [r3]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2e:	d01e      	beq.n	8006d6e <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	3328      	adds	r3, #40	; 0x28
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	ed93 7a00 	vldr	s14, [r3]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d4e:	eef0 7ae7 	vabs.f32	s15, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d60:	4619      	mov	r1, r3
 8006d62:	eeb0 0a47 	vmov.f32	s0, s14
 8006d66:	2002      	movs	r0, #2
 8006d68:	f7fe fab1 	bl	80052ce <PIDGainSet>
 8006d6c:	e008      	b.n	8006d80 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006d74:	4619      	mov	r1, r3
 8006d76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	f7fe faa7 	bl	80052ce <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d92:	2004      	movs	r0, #4
 8006d94:	f7fe fa9b 	bl	80052ce <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006da4:	4619      	mov	r1, r3
 8006da6:	eeb0 0a67 	vmov.f32	s0, s15
 8006daa:	2004      	movs	r0, #4
 8006dac:	f7fe fa8f 	bl	80052ce <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc2:	2005      	movs	r0, #5
 8006dc4:	f7fe fa83 	bl	80052ce <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dda:	2005      	movs	r0, #5
 8006ddc:	f7fe fa77 	bl	80052ce <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006dec:	4619      	mov	r1, r3
 8006dee:	eeb0 0a67 	vmov.f32	s0, s15
 8006df2:	2006      	movs	r0, #6
 8006df4:	f7fe fa6b 	bl	80052ce <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e04:	4619      	mov	r1, r3
 8006e06:	eeb0 0a67 	vmov.f32	s0, s15
 8006e0a:	2006      	movs	r0, #6
 8006e0c:	f7fe fa5f 	bl	80052ce <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	3384      	adds	r3, #132	; 0x84
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	edd3 7a00 	vldr	s15, [r3]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e30:	2003      	movs	r0, #3
 8006e32:	f7fe fa4c 	bl	80052ce <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	3394      	adds	r3, #148	; 0x94
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	edd3 7a00 	vldr	s15, [r3]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006e4e:	4619      	mov	r1, r3
 8006e50:	eeb0 0a67 	vmov.f32	s0, s15
 8006e54:	2003      	movs	r0, #3
 8006e56:	f7fe fa3a 	bl	80052ce <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006e72:	e1b8      	b.n	80071e6 <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	331a      	adds	r3, #26
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	ed93 7a00 	vldr	s14, [r3]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	d01d      	beq.n	8006ee4 <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	331a      	adds	r3, #26
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	ed93 7a00 	vldr	s14, [r3]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec4:	eef0 7ae7 	vabs.f32	s15, s15
 8006ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8006edc:	2002      	movs	r0, #2
 8006ede:	f7fe f9f6 	bl	80052ce <PIDGainSet>
 8006ee2:	e008      	b.n	8006ef6 <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006eea:	4619      	mov	r1, r3
 8006eec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ef0:	2002      	movs	r0, #2
 8006ef2:	f7fe f9ec 	bl	80052ce <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	3328      	adds	r3, #40	; 0x28
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	ed93 7a00 	vldr	s14, [r3]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1c:	d01e      	beq.n	8006f5c <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	3328      	adds	r3, #40	; 0x28
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	ed93 7a00 	vldr	s14, [r3]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f3c:	eef0 7ae7 	vabs.f32	s15, s15
 8006f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f4e:	4619      	mov	r1, r3
 8006f50:	eeb0 0a47 	vmov.f32	s0, s14
 8006f54:	2002      	movs	r0, #2
 8006f56:	f7fe f9ba 	bl	80052ce <PIDGainSet>
 8006f5a:	e008      	b.n	8006f6e <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f62:	4619      	mov	r1, r3
 8006f64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f68:	2002      	movs	r0, #2
 8006f6a:	f7fe f9b0 	bl	80052ce <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f80:	2004      	movs	r0, #4
 8006f82:	f7fe f9a4 	bl	80052ce <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006f92:	4619      	mov	r1, r3
 8006f94:	eeb0 0a67 	vmov.f32	s0, s15
 8006f98:	2004      	movs	r0, #4
 8006f9a:	f7fe f998 	bl	80052ce <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006faa:	4619      	mov	r1, r3
 8006fac:	eeb0 0a67 	vmov.f32	s0, s15
 8006fb0:	2005      	movs	r0, #5
 8006fb2:	f7fe f98c 	bl	80052ce <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fc8:	2005      	movs	r0, #5
 8006fca:	f7fe f980 	bl	80052ce <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006fda:	4619      	mov	r1, r3
 8006fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe0:	2006      	movs	r0, #6
 8006fe2:	f7fe f974 	bl	80052ce <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff8:	2006      	movs	r0, #6
 8006ffa:	f7fe f968 	bl	80052ce <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	3384      	adds	r3, #132	; 0x84
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	edd3 7a00 	vldr	s15, [r3]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007018:	4619      	mov	r1, r3
 800701a:	eeb0 0a67 	vmov.f32	s0, s15
 800701e:	2003      	movs	r0, #3
 8007020:	f7fe f955 	bl	80052ce <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	3394      	adds	r3, #148	; 0x94
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	edd3 7a00 	vldr	s15, [r3]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800703c:	4619      	mov	r1, r3
 800703e:	eeb0 0a67 	vmov.f32	s0, s15
 8007042:	2003      	movs	r0, #3
 8007044:	f7fe f943 	bl	80052ce <PIDGainSet>
							pp->crnt_crv_pt=0;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007058:	e0c5      	b.n	80071e6 <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8007066:	3b01      	subs	r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	f040 80bd 	bne.w	80071e8 <PathPlan+0x1200>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800707a:	3b01      	subs	r3, #1
 800707c:	429a      	cmp	r2, r3
 800707e:	f040 80b3 	bne.w	80071e8 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007088:	eeb0 7ae7 	vabs.f32	s14, s15
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	f140 80a5 	bpl.w	80071e8 <PathPlan+0x1200>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80070a4:	eeb0 7ae7 	vabs.f32	s14, s15
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80070ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	f140 8097 	bpl.w	80071e8 <PathPlan+0x1200>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80070c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80070ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d6:	f200 8087 	bhi.w	80071e8 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	3346      	adds	r3, #70	; 0x46
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	3304      	adds	r3, #4
 80070ea:	edd3 7a00 	vldr	s15, [r3]
 80070ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f2:	eef4 7a47 	vcmp.f32	s15, s14
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	d13e      	bne.n	800717a <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007102:	2b01      	cmp	r3, #1
 8007104:	d170      	bne.n	80071e8 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800710c:	edd3 7a00 	vldr	s15, [r3]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007116:	4619      	mov	r1, r3
 8007118:	eeb0 0a67 	vmov.f32	s0, s15
 800711c:	2004      	movs	r0, #4
 800711e:	f7fe f8d6 	bl	80052ce <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007122:	2201      	movs	r2, #1
 8007124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007128:	487e      	ldr	r0, [pc, #504]	; (8007324 <PathPlan+0x133c>)
 800712a:	f00b f853 	bl	80121d4 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fa1c 	bl	8005572 <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fa16 	bl	8005572 <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe fa10 	bl	8005572 <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007168:	f36f 0300 	bfc	r3, #0, #1
 800716c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007178:	e036      	b.n	80071e8 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007180:	edd3 7a00 	vldr	s15, [r3]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800718a:	4619      	mov	r1, r3
 800718c:	eeb0 0a67 	vmov.f32	s0, s15
 8007190:	2004      	movs	r0, #4
 8007192:	f7fe f89c 	bl	80052ce <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007196:	2201      	movs	r2, #1
 8007198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800719c:	4861      	ldr	r0, [pc, #388]	; (8007324 <PathPlan+0x133c>)
 800719e:	f00b f819 	bl	80121d4 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe f9e2 	bl	8005572 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe f9dc 	bl	8005572 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe f9d6 	bl	8005572 <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80071dc:	f36f 0300 	bfc	r3, #0, #1
 80071e0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 80071e4:	e000      	b.n	80071e8 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80071e6:	bf00      	nop

				}
			}


			if(pp->pp_start){
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f001 8557 	beq.w	8008ca8 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	ed93 7a00 	vldr	s14, [r3]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	ed93 7a00 	vldr	s14, [r3]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007248:	f36f 03c3 	bfc	r3, #3, #1
 800724c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800725a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725e:	d107      	bne.n	8007270 <PathPlan+0x1288>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	d021      	beq.n	80072b4 <PathPlan+0x12cc>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727e:	d107      	bne.n	8007290 <PathPlan+0x12a8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007286:	eef5 7a40 	vcmp.f32	s15, #0.0
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	d011      	beq.n	80072b4 <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800729c:	eef0 0a47 	vmov.f32	s1, s14
 80072a0:	eeb0 0a67 	vmov.f32	s0, s15
 80072a4:	f017 f9fa 	bl	801e69c <atan2f>
 80072a8:	eef0 7a40 	vmov.f32	s15, s0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80072b2:	e048      	b.n	8007346 <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80072ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	d007      	beq.n	80072d4 <PathPlan+0x12ec>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80072ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d2:	d10b      	bne.n	80072ec <PathPlan+0x1304>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80072da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e2:	d503      	bpl.n	80072ec <PathPlan+0x1304>
						pp->heading = 1.5708;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <PathPlan+0x1340>)
 80072e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80072ea:	e02c      	b.n	8007346 <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80072f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fa:	d007      	beq.n	800730c <PathPlan+0x1324>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	d111      	bne.n	8007330 <PathPlan+0x1348>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731a:	dd09      	ble.n	8007330 <PathPlan+0x1348>
						pp->heading = -1.5708;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a03      	ldr	r2, [pc, #12]	; (800732c <PathPlan+0x1344>)
 8007320:	65da      	str	r2, [r3, #92]	; 0x5c
 8007322:	e010      	b.n	8007346 <PathPlan+0x135e>
 8007324:	40020800 	.word	0x40020800
 8007328:	3fc90ff9 	.word	0x3fc90ff9
 800732c:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800733e:	f043 0308 	orr.w	r3, r3, #8
 8007342:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	3374      	adds	r3, #116	; 0x74
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	ed93 8a00 	vldr	s16, [r3]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800735e:	eeb0 0a67 	vmov.f32	s0, s15
 8007362:	f017 f911 	bl	801e588 <cosf>
 8007366:	eef0 7a40 	vmov.f32	s15, s0
 800736a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	3374      	adds	r3, #116	; 0x74
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	ed93 8a00 	vldr	s16, [r3]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800738c:	eeb0 0a67 	vmov.f32	s0, s15
 8007390:	f017 f942 	bl	801e618 <sinf>
 8007394:	eef0 7a40 	vmov.f32	s15, s0
 8007398:	ee68 7a27 	vmul.f32	s15, s16, s15
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	665a      	str	r2, [r3, #100]	; 0x64
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe f8f0 	bl	80055ae <PID>
				PID(&(pp->y));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe f8ea 	bl	80055ae <PID>
				PID(&(pp->z));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe f8e4 	bl	80055ae <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80073f2:	eeb0 0a67 	vmov.f32	s0, s15
 80073f6:	f017 f8c7 	bl	801e588 <cosf>
 80073fa:	eef0 7a40 	vmov.f32	s15, s0
 80073fe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	edd3 7a06 	vldr	s15, [r3, #24]
 800740e:	eeb0 0a67 	vmov.f32	s0, s15
 8007412:	f017 f901 	bl	801e618 <sinf>
 8007416:	eef0 7a40 	vmov.f32	s15, s0
 800741a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800741e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	edd3 7a06 	vldr	s15, [r3, #24]
 8007434:	eeb0 0a67 	vmov.f32	s0, s15
 8007438:	f017 f8ee 	bl	801e618 <sinf>
 800743c:	eef0 7a40 	vmov.f32	s15, s0
 8007440:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007450:	eeb0 0a67 	vmov.f32	s0, s15
 8007454:	f017 f898 	bl	801e588 <cosf>
 8007458:	eef0 7a40 	vmov.f32	s15, s0
 800745c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007460:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	edd3 7a06 	vldr	s15, [r3, #24]
 8007476:	eeb0 0a67 	vmov.f32	s0, s15
 800747a:	f017 f885 	bl	801e588 <cosf>
 800747e:	eef0 7a40 	vmov.f32	s15, s0
 8007482:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007492:	eeb0 0a67 	vmov.f32	s0, s15
 8007496:	f017 f8bf 	bl	801e618 <sinf>
 800749a:	eef0 7a40 	vmov.f32	s15, s0
 800749e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80074a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80074b8:	eeb0 0a67 	vmov.f32	s0, s15
 80074bc:	f017 f8ac 	bl	801e618 <sinf>
 80074c0:	eef0 7a40 	vmov.f32	s15, s0
 80074c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80074d4:	eeb0 0a67 	vmov.f32	s0, s15
 80074d8:	f017 f856 	bl	801e588 <cosf>
 80074dc:	eef0 7a40 	vmov.f32	s15, s0
 80074e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80074e4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8161 	bne.w	80077bc <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750a:	ee17 0a90 	vmov	r0, s15
 800750e:	f7f9 f81b 	bl	8000548 <__aeabi_f2d>
 8007512:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f9 f86d 	bl	80005f8 <__aeabi_dmul>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4614      	mov	r4, r2
 8007524:	461d      	mov	r5, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800752c:	4618      	mov	r0, r3
 800752e:	f7f9 f80b 	bl	8000548 <__aeabi_f2d>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4620      	mov	r0, r4
 8007538:	4629      	mov	r1, r5
 800753a:	f7f8 fea5 	bl	8000288 <__aeabi_dsub>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4610      	mov	r0, r2
 8007544:	4619      	mov	r1, r3
 8007546:	f7f9 fb4f 	bl	8000be8 <__aeabi_d2f>
 800754a:	4602      	mov	r2, r0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800755e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007562:	ee17 0a90 	vmov	r0, s15
 8007566:	f7f8 ffef 	bl	8000548 <__aeabi_f2d>
 800756a:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f9 f841 	bl	80005f8 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4614      	mov	r4, r2
 800757c:	461d      	mov	r5, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007584:	4618      	mov	r0, r3
 8007586:	f7f8 ffdf 	bl	8000548 <__aeabi_f2d>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f8 fe7b 	bl	800028c <__adddf3>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	f7f9 fb23 	bl	8000be8 <__aeabi_d2f>
 80075a2:	4602      	mov	r2, r0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80075b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075ba:	ee17 0a90 	vmov	r0, s15
 80075be:	f7f8 ffc3 	bl	8000548 <__aeabi_f2d>
 80075c2:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f9 f815 	bl	80005f8 <__aeabi_dmul>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4614      	mov	r4, r2
 80075d4:	461d      	mov	r5, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ffb3 	bl	8000548 <__aeabi_f2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f8 fe4f 	bl	800028c <__adddf3>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	f7f9 faf7 	bl	8000be8 <__aeabi_d2f>
 80075fa:	4602      	mov	r2, r0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800760e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007612:	ee17 0a90 	vmov	r0, s15
 8007616:	f7f8 ff97 	bl	8000548 <__aeabi_f2d>
 800761a:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 ffe9 	bl	80005f8 <__aeabi_dmul>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4614      	mov	r4, r2
 800762c:	461d      	mov	r5, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007634:	4618      	mov	r0, r3
 8007636:	f7f8 ff87 	bl	8000548 <__aeabi_f2d>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f8 fe21 	bl	8000288 <__aeabi_dsub>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f7f9 facb 	bl	8000be8 <__aeabi_d2f>
 8007652:	4602      	mov	r2, r0
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800766a:	ee17 0a90 	vmov	r0, s15
 800766e:	f7f8 ff6b 	bl	8000548 <__aeabi_f2d>
 8007672:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 ffbd 	bl	80005f8 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4614      	mov	r4, r2
 8007684:	461d      	mov	r5, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800768c:	4618      	mov	r0, r3
 800768e:	f7f8 ff5b 	bl	8000548 <__aeabi_f2d>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f8 fdf7 	bl	800028c <__adddf3>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	f7f9 fa9f 	bl	8000be8 <__aeabi_d2f>
 80076aa:	4602      	mov	r2, r0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80076be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076c2:	ee17 0a90 	vmov	r0, s15
 80076c6:	f7f8 ff3f 	bl	8000548 <__aeabi_f2d>
 80076ca:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	f7f8 ff91 	bl	80005f8 <__aeabi_dmul>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4614      	mov	r4, r2
 80076dc:	461d      	mov	r5, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7f8 ff2f 	bl	8000548 <__aeabi_f2d>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	f7f8 fdcb 	bl	800028c <__adddf3>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7f9 fa73 	bl	8000be8 <__aeabi_d2f>
 8007702:	4602      	mov	r2, r0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8007716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800771a:	ee17 0a90 	vmov	r0, s15
 800771e:	f7f8 ff13 	bl	8000548 <__aeabi_f2d>
 8007722:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f7f8 ff65 	bl	80005f8 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4614      	mov	r4, r2
 8007734:	461d      	mov	r5, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800773c:	4618      	mov	r0, r3
 800773e:	f7f8 ff03 	bl	8000548 <__aeabi_f2d>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f8 fd9f 	bl	800028c <__adddf3>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	f7f9 fa47 	bl	8000be8 <__aeabi_d2f>
 800775a:	4602      	mov	r2, r0
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800776e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007772:	ee17 0a90 	vmov	r0, s15
 8007776:	f7f8 fee7 	bl	8000548 <__aeabi_f2d>
 800777a:	a3f4      	add	r3, pc, #976	; (adr r3, 8007b4c <PathPlan+0x1b64>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 ff3a 	bl	80005f8 <__aeabi_dmul>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4614      	mov	r4, r2
 800778a:	461d      	mov	r5, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007792:	4618      	mov	r0, r3
 8007794:	f7f8 fed8 	bl	8000548 <__aeabi_f2d>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd74 	bl	800028c <__adddf3>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	f7f9 fa1c 	bl	8000be8 <__aeabi_d2f>
 80077b0:	4602      	mov	r2, r0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 80077b8:	f001 ba76 	b.w	8008ca8 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	f041 8270 	bne.w	8008ca8 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7f8 feba 	bl	8000548 <__aeabi_f2d>
 80077d4:	a3d8      	add	r3, pc, #864	; (adr r3, 8007b38 <PathPlan+0x1b50>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f7f8 ff0d 	bl	80005f8 <__aeabi_dmul>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4614      	mov	r4, r2
 80077e4:	461d      	mov	r5, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 feab 	bl	8000548 <__aeabi_f2d>
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	4bd2      	ldr	r3, [pc, #840]	; (8007b40 <PathPlan+0x1b58>)
 80077f8:	f7f8 fefe 	bl	80005f8 <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fd40 	bl	8000288 <__aeabi_dsub>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4614      	mov	r4, r2
 800780e:	461d      	mov	r5, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 fe96 	bl	8000548 <__aeabi_f2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4620      	mov	r0, r4
 8007822:	4629      	mov	r1, r5
 8007824:	f7f8 fd32 	bl	800028c <__adddf3>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	f7f9 f9da 	bl	8000be8 <__aeabi_d2f>
 8007834:	4602      	mov	r2, r0
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007842:	4618      	mov	r0, r3
 8007844:	f7f8 fe80 	bl	8000548 <__aeabi_f2d>
 8007848:	a3bb      	add	r3, pc, #748	; (adr r3, 8007b38 <PathPlan+0x1b50>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fed3 	bl	80005f8 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4614      	mov	r4, r2
 8007858:	461d      	mov	r5, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007860:	4618      	mov	r0, r3
 8007862:	f7f8 fe71 	bl	8000548 <__aeabi_f2d>
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	4bb5      	ldr	r3, [pc, #724]	; (8007b40 <PathPlan+0x1b58>)
 800786c:	f7f8 fec4 	bl	80005f8 <__aeabi_dmul>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f7f8 fd08 	bl	800028c <__adddf3>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4614      	mov	r4, r2
 8007882:	461d      	mov	r5, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800788a:	4618      	mov	r0, r3
 800788c:	f7f8 fe5c 	bl	8000548 <__aeabi_f2d>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4610      	mov	r0, r2
 80078a2:	4619      	mov	r1, r3
 80078a4:	f7f9 f9a0 	bl	8000be8 <__aeabi_d2f>
 80078a8:	4602      	mov	r2, r0
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80078bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7f8 fe3b 	bl	8000548 <__aeabi_f2d>
 80078d2:	a399      	add	r3, pc, #612	; (adr r3, 8007b38 <PathPlan+0x1b50>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 fe8e 	bl	80005f8 <__aeabi_dmul>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	461d      	mov	r5, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7f8 fe2c 	bl	8000548 <__aeabi_f2d>
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	4b92      	ldr	r3, [pc, #584]	; (8007b40 <PathPlan+0x1b58>)
 80078f6:	f7f8 fe7f 	bl	80005f8 <__aeabi_dmul>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f8 fcc1 	bl	8000288 <__aeabi_dsub>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4614      	mov	r4, r2
 800790c:	461d      	mov	r5, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007914:	4618      	mov	r0, r3
 8007916:	f7f8 fe17 	bl	8000548 <__aeabi_f2d>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f8 fcb3 	bl	800028c <__adddf3>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	f7f9 f95b 	bl	8000be8 <__aeabi_d2f>
 8007932:	4602      	mov	r2, r0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007940:	4618      	mov	r0, r3
 8007942:	f7f8 fe01 	bl	8000548 <__aeabi_f2d>
 8007946:	a37c      	add	r3, pc, #496	; (adr r3, 8007b38 <PathPlan+0x1b50>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4614      	mov	r4, r2
 8007956:	461d      	mov	r5, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fdf2 	bl	8000548 <__aeabi_f2d>
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	4b75      	ldr	r3, [pc, #468]	; (8007b40 <PathPlan+0x1b58>)
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f8 fc89 	bl	800028c <__adddf3>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4614      	mov	r4, r2
 8007980:	461d      	mov	r5, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007988:	4618      	mov	r0, r3
 800798a:	f7f8 fddd 	bl	8000548 <__aeabi_f2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4620      	mov	r0, r4
 8007994:	4629      	mov	r1, r5
 8007996:	f7f8 fc79 	bl	800028c <__adddf3>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	f7f9 f921 	bl	8000be8 <__aeabi_d2f>
 80079a6:	4602      	mov	r2, r0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80079ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 80079c4:	f001 b970 	b.w	8008ca8 <PathPlan+0x2cc0>
			led3 = 1;
 80079c8:	4a5e      	ldr	r2, [pc, #376]	; (8007b44 <PathPlan+0x1b5c>)
 80079ca:	7853      	ldrb	r3, [r2, #1]
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	331a      	adds	r3, #26
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	ed93 7a00 	vldr	s14, [r3]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80079ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	3328      	adds	r3, #40	; 0x28
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	ed93 7a00 	vldr	s14, [r3]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	3338      	adds	r3, #56	; 0x38
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	ed93 7a00 	vldr	s14, [r3]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007a40:	eef0 7ae7 	vabs.f32	s15, s15
 8007a44:	ee17 0a90 	vmov	r0, s15
 8007a48:	f7f8 fd7e 	bl	8000548 <__aeabi_f2d>
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007a56:	eef0 7ae7 	vabs.f32	s15, s15
 8007a5a:	ee17 0a90 	vmov	r0, s15
 8007a5e:	f7f8 fd73 	bl	8000548 <__aeabi_f2d>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f8 fc0f 	bl	800028c <__adddf3>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	4610      	mov	r0, r2
 8007a74:	4619      	mov	r1, r3
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a7e:	f7f8 fee5 	bl	800084c <__aeabi_ddiv>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4614      	mov	r4, r2
 8007a88:	461d      	mov	r5, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7f8 fd59 	bl	8000548 <__aeabi_f2d>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f9 f81d 	bl	8000adc <__aeabi_dcmplt>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <PathPlan+0x1ae8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007aae:	eeb0 7ae7 	vabs.f32	s14, s15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac0:	d506      	bpl.n	8007ad0 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007ac8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e005      	b.n	8007adc <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007ae2:	edd3 7a00 	vldr	s15, [r3]
 8007ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007af4:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007afe:	edd3 7a00 	vldr	s15, [r3]
 8007b02:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007b48 <PathPlan+0x1b60>
 8007b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	d821      	bhi.n	8007b54 <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007b16:	ed93 7a00 	vldr	s14, [r3]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007b20:	edd3 7a00 	vldr	s15, [r3]
 8007b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007b2e:	edc3 7a00 	vstr	s15, [r3]
 8007b32:	e045      	b.n	8007bc0 <PathPlan+0x1bd8>
 8007b34:	f3af 8000 	nop.w
 8007b38:	a1cac083 	.word	0xa1cac083
 8007b3c:	3febb645 	.word	0x3febb645
 8007b40:	3fe00000 	.word	0x3fe00000
 8007b44:	40020814 	.word	0x40020814
 8007b48:	42700000 	.word	0x42700000
 8007b4c:	dbf8b9bb 	.word	0xdbf8b9bb
 8007b50:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007b5a:	edd3 6a00 	vldr	s13, [r3]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007b64:	ed93 7a00 	vldr	s14, [r3]
 8007b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007b72:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f8 fce2 	bl	8000548 <__aeabi_f2d>
 8007b84:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 ffba 	bl	8000b04 <__aeabi_dcmpge>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007b9e:	e003      	b.n	8007ba8 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007bc6:	eef0 7ae7 	vabs.f32	s15, s15
 8007bca:	ee17 0a90 	vmov	r0, s15
 8007bce:	f7f8 fcbb 	bl	8000548 <__aeabi_f2d>
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007bdc:	eef0 7ae7 	vabs.f32	s15, s15
 8007be0:	ee17 0a90 	vmov	r0, s15
 8007be4:	f7f8 fcb0 	bl	8000548 <__aeabi_f2d>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 fb4c 	bl	800028c <__adddf3>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c04:	f7f8 fe22 	bl	800084c <__aeabi_ddiv>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	461d      	mov	r5, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7f8 fc96 	bl	8000548 <__aeabi_f2d>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 ff5a 	bl	8000adc <__aeabi_dcmplt>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 84a6 	beq.w	800857c <PathPlan+0x2594>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007c36:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	f140 8498 	bpl.w	800857c <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007c58:	3b02      	subs	r3, #2
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	f280 8206 	bge.w	800806c <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	3346      	adds	r3, #70	; 0x46
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	edd3 7a00 	vldr	s15, [r3]
 8007c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c78:	eef4 7a47 	vcmp.f32	s15, s14
 8007c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c80:	f040 813a 	bne.w	8007ef8 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	f040 8476 	bne.w	800857c <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	331a      	adds	r3, #26
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	ed93 7a00 	vldr	s14, [r3]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	3328      	adds	r3, #40	; 0x28
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	3304      	adds	r3, #4
 8007cd0:	ed93 7a00 	vldr	s14, [r3]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	3338      	adds	r3, #56	; 0x38
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	ed93 7a00 	vldr	s14, [r3]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	331a      	adds	r3, #26
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	ed93 7a00 	vldr	s14, [r3]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	d03d      	beq.n	8007da8 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	331a      	adds	r3, #26
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	ed93 7a00 	vldr	s14, [r3]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d48:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	3384      	adds	r3, #132	; 0x84
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	3304      	adds	r3, #4
 8007d64:	edd3 7a00 	vldr	s15, [r3]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007d80:	4618      	mov	r0, r3
 8007d82:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007d86:	eeb0 3a65 	vmov.f32	s6, s11
 8007d8a:	eef0 2a46 	vmov.f32	s5, s12
 8007d8e:	eeb0 2a66 	vmov.f32	s4, s13
 8007d92:	eef0 1a67 	vmov.f32	s3, s15
 8007d96:	eeb0 1a47 	vmov.f32	s2, s14
 8007d9a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007d9e:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8008068 <PathPlan+0x2080>
 8007da2:	f7fd fa61 	bl	8005268 <PIDGainInit>
 8007da6:	e028      	b.n	8007dfa <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	3384      	adds	r3, #132	; 0x84
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	3304      	adds	r3, #4
 8007db8:	edd3 7a00 	vldr	s15, [r3]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007dda:	eeb0 3a46 	vmov.f32	s6, s12
 8007dde:	eef0 2a66 	vmov.f32	s5, s13
 8007de2:	eeb0 2a47 	vmov.f32	s4, s14
 8007de6:	eef0 1a67 	vmov.f32	s3, s15
 8007dea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007dee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007df2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008068 <PathPlan+0x2080>
 8007df6:	f7fd fa37 	bl	8005268 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	3328      	adds	r3, #40	; 0x28
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	ed93 7a00 	vldr	s14, [r3]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e20:	d03d      	beq.n	8007e9e <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	3328      	adds	r3, #40	; 0x28
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	ed93 7a00 	vldr	s14, [r3]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e40:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	3394      	adds	r3, #148	; 0x94
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	edd3 7a00 	vldr	s15, [r3]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007e76:	4618      	mov	r0, r3
 8007e78:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007e7c:	eeb0 3a65 	vmov.f32	s6, s11
 8007e80:	eef0 2a46 	vmov.f32	s5, s12
 8007e84:	eeb0 2a66 	vmov.f32	s4, s13
 8007e88:	eef0 1a67 	vmov.f32	s3, s15
 8007e8c:	eeb0 1a47 	vmov.f32	s2, s14
 8007e90:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007e94:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8008068 <PathPlan+0x2080>
 8007e98:	f7fd f9e6 	bl	8005268 <PIDGainInit>
 8007e9c:	e027      	b.n	8007eee <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	3394      	adds	r3, #148	; 0x94
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	edd3 7a00 	vldr	s15, [r3]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007ec8:	4618      	mov	r0, r3
 8007eca:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007ece:	eeb0 3a46 	vmov.f32	s6, s12
 8007ed2:	eef0 2a66 	vmov.f32	s5, s13
 8007ed6:	eeb0 2a47 	vmov.f32	s4, s14
 8007eda:	eef0 1a67 	vmov.f32	s3, s15
 8007ede:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007ee2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007ee6:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8008068 <PathPlan+0x2080>
 8007eea:	f7fd f9bd 	bl	8005268 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007ef6:	e341      	b.n	800857c <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	331a      	adds	r3, #26
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	ed93 7a00 	vldr	s14, [r3]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	3328      	adds	r3, #40	; 0x28
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	3304      	adds	r3, #4
 8007f38:	ed93 7a00 	vldr	s14, [r3]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	3338      	adds	r3, #56	; 0x38
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	ed93 7a00 	vldr	s14, [r3]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	331a      	adds	r3, #26
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	ed93 7a00 	vldr	s14, [r3]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f92:	d01d      	beq.n	8007fd0 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	331a      	adds	r3, #26
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	ed93 7a00 	vldr	s14, [r3]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb0:	eef0 7ae7 	vabs.f32	s15, s15
 8007fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8007fc8:	2002      	movs	r0, #2
 8007fca:	f7fd f980 	bl	80052ce <PIDGainSet>
 8007fce:	e008      	b.n	8007fe2 <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007fdc:	2002      	movs	r0, #2
 8007fde:	f7fd f976 	bl	80052ce <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	3328      	adds	r3, #40	; 0x28
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	ed93 7a00 	vldr	s14, [r3]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008000:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	d01e      	beq.n	8008048 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	3328      	adds	r3, #40	; 0x28
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	3304      	adds	r3, #4
 800801a:	ed93 7a00 	vldr	s14, [r3]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008028:	eef0 7ae7 	vabs.f32	s15, s15
 800802c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800803a:	4619      	mov	r1, r3
 800803c:	eeb0 0a47 	vmov.f32	s0, s14
 8008040:	2002      	movs	r0, #2
 8008042:	f7fd f944 	bl	80052ce <PIDGainSet>
 8008046:	e299      	b.n	800857c <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800804e:	4619      	mov	r1, r3
 8008050:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008054:	2002      	movs	r0, #2
 8008056:	f7fd f93a 	bl	80052ce <PIDGainSet>
 800805a:	e28f      	b.n	800857c <PathPlan+0x2594>
 800805c:	f3af 8000 	nop.w
 8008060:	66666666 	.word	0x66666666
 8008064:	3fee6666 	.word	0x3fee6666
 8008068:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008078:	3b02      	subs	r3, #2
 800807a:	429a      	cmp	r2, r3
 800807c:	f040 81fe 	bne.w	800847c <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	3346      	adds	r3, #70	; 0x46
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	edd3 7a00 	vldr	s15, [r3]
 8008094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008098:	eef4 7a47 	vcmp.f32	s15, s14
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	f040 813a 	bne.w	8008318 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	f040 8266 	bne.w	800857c <PathPlan+0x2594>
							pp->point_count++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	331a      	adds	r3, #26
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	ed93 7a00 	vldr	s14, [r3]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80080d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	3328      	adds	r3, #40	; 0x28
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	3304      	adds	r3, #4
 80080f0:	ed93 7a00 	vldr	s14, [r3]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80080fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	3338      	adds	r3, #56	; 0x38
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	ed93 7a00 	vldr	s14, [r3]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	edd3 7a04 	vldr	s15, [r3, #16]
 800811c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	331a      	adds	r3, #26
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	ed93 7a00 	vldr	s14, [r3]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800813e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814a:	d03d      	beq.n	80081c8 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	331a      	adds	r3, #26
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	ed93 7a00 	vldr	s14, [r3]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008168:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800816c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	3384      	adds	r3, #132	; 0x84
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	3304      	adds	r3, #4
 8008184:	edd3 7a00 	vldr	s15, [r3]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80081a0:	4618      	mov	r0, r3
 80081a2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081a6:	eeb0 3a65 	vmov.f32	s6, s11
 80081aa:	eef0 2a46 	vmov.f32	s5, s12
 80081ae:	eeb0 2a66 	vmov.f32	s4, s13
 80081b2:	eef0 1a67 	vmov.f32	s3, s15
 80081b6:	eeb0 1a47 	vmov.f32	s2, s14
 80081ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081be:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8008068 <PathPlan+0x2080>
 80081c2:	f7fd f851 	bl	8005268 <PIDGainInit>
 80081c6:	e028      	b.n	800821a <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	3384      	adds	r3, #132	; 0x84
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	edd3 7a00 	vldr	s15, [r3]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80081f4:	4618      	mov	r0, r3
 80081f6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081fa:	eeb0 3a46 	vmov.f32	s6, s12
 80081fe:	eef0 2a66 	vmov.f32	s5, s13
 8008202:	eeb0 2a47 	vmov.f32	s4, s14
 8008206:	eef0 1a67 	vmov.f32	s3, s15
 800820a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800820e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008212:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8008068 <PathPlan+0x2080>
 8008216:	f7fd f827 	bl	8005268 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	3328      	adds	r3, #40	; 0x28
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	3304      	adds	r3, #4
 800822a:	ed93 7a00 	vldr	s14, [r3]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008238:	eef5 7a40 	vcmp.f32	s15, #0.0
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	d03d      	beq.n	80082be <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	3328      	adds	r3, #40	; 0x28
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	3304      	adds	r3, #4
 8008252:	ed93 7a00 	vldr	s14, [r3]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800825c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008260:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	3394      	adds	r3, #148	; 0x94
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	edd3 7a00 	vldr	s15, [r3]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008296:	4618      	mov	r0, r3
 8008298:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800829c:	eeb0 3a65 	vmov.f32	s6, s11
 80082a0:	eef0 2a46 	vmov.f32	s5, s12
 80082a4:	eeb0 2a66 	vmov.f32	s4, s13
 80082a8:	eef0 1a67 	vmov.f32	s3, s15
 80082ac:	eeb0 1a47 	vmov.f32	s2, s14
 80082b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80082b4:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8008068 <PathPlan+0x2080>
 80082b8:	f7fc ffd6 	bl	8005268 <PIDGainInit>
 80082bc:	e027      	b.n	800830e <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	3394      	adds	r3, #148	; 0x94
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	edd3 7a00 	vldr	s15, [r3]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80082e8:	4618      	mov	r0, r3
 80082ea:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80082ee:	eeb0 3a46 	vmov.f32	s6, s12
 80082f2:	eef0 2a66 	vmov.f32	s5, s13
 80082f6:	eeb0 2a47 	vmov.f32	s4, s14
 80082fa:	eef0 1a67 	vmov.f32	s3, s15
 80082fe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008302:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008306:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8008068 <PathPlan+0x2080>
 800830a:	f7fc ffad 	bl	8005268 <PIDGainInit>
							pp->pp_lck_enb = 0;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008316:	e131      	b.n	800857c <PathPlan+0x2594>
						pp->point_count++;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	331a      	adds	r3, #26
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	ed93 7a00 	vldr	s14, [r3]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800833e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	3328      	adds	r3, #40	; 0x28
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	3304      	adds	r3, #4
 8008358:	ed93 7a00 	vldr	s14, [r3]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	3338      	adds	r3, #56	; 0x38
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	ed93 7a00 	vldr	s14, [r3]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	edd3 7a04 	vldr	s15, [r3, #16]
 8008384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	331a      	adds	r3, #26
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	ed93 7a00 	vldr	s14, [r3]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80083a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	d01d      	beq.n	80083f0 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	331a      	adds	r3, #26
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	ed93 7a00 	vldr	s14, [r3]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80083cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083d0:	eef0 7ae7 	vabs.f32	s15, s15
 80083d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80083e2:	4619      	mov	r1, r3
 80083e4:	eeb0 0a47 	vmov.f32	s0, s14
 80083e8:	2002      	movs	r0, #2
 80083ea:	f7fc ff70 	bl	80052ce <PIDGainSet>
 80083ee:	e008      	b.n	8008402 <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80083f6:	4619      	mov	r1, r3
 80083f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80083fc:	2002      	movs	r0, #2
 80083fe:	f7fc ff66 	bl	80052ce <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	3328      	adds	r3, #40	; 0x28
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	3304      	adds	r3, #4
 8008412:	ed93 7a00 	vldr	s14, [r3]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800841c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008428:	d01e      	beq.n	8008468 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	3328      	adds	r3, #40	; 0x28
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	ed93 7a00 	vldr	s14, [r3]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008448:	eef0 7ae7 	vabs.f32	s15, s15
 800844c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800845a:	4619      	mov	r1, r3
 800845c:	eeb0 0a47 	vmov.f32	s0, s14
 8008460:	2002      	movs	r0, #2
 8008462:	f7fc ff34 	bl	80052ce <PIDGainSet>
 8008466:	e089      	b.n	800857c <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800846e:	4619      	mov	r1, r3
 8008470:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008474:	2002      	movs	r0, #2
 8008476:	f7fc ff2a 	bl	80052ce <PIDGainSet>
 800847a:	e07f      	b.n	800857c <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8008482:	eeb0 7ae7 	vabs.f32	s14, s15
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 800848c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008494:	d572      	bpl.n	800857c <PathPlan+0x2594>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800849c:	eeb0 7ae7 	vabs.f32	s14, s15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80084a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ae:	d565      	bpl.n	800857c <PathPlan+0x2594>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80084b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80084c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	d856      	bhi.n	800857c <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	3346      	adds	r3, #70	; 0x46
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	3304      	adds	r3, #4
 80084de:	edd3 7a00 	vldr	s15, [r3]
 80084e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e6:	eef4 7a47 	vcmp.f32	s15, s14
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	d127      	bne.n	8008540 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d140      	bne.n	800857c <PathPlan+0x2594>
							led3 = 0;
 80084fa:	4a7d      	ldr	r2, [pc, #500]	; (80086f0 <PathPlan+0x2708>)
 80084fc:	7853      	ldrb	r3, [r2, #1]
 80084fe:	f36f 13c7 	bfc	r3, #7, #1
 8008502:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd f831 	bl	8005572 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd f82b 	bl	8005572 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd f825 	bl	8005572 <PIDDelayInit>
							pp->pp_start=0;
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800852e:	f36f 0300 	bfc	r3, #0, #1
 8008532:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800853e:	e01d      	b.n	800857c <PathPlan+0x2594>
						led3 = 0;
 8008540:	4a6b      	ldr	r2, [pc, #428]	; (80086f0 <PathPlan+0x2708>)
 8008542:	7853      	ldrb	r3, [r2, #1]
 8008544:	f36f 13c7 	bfc	r3, #7, #1
 8008548:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd f80e 	bl	8005572 <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800855c:	4618      	mov	r0, r3
 800855e:	f7fd f808 	bl	8005572 <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8008568:	4618      	mov	r0, r3
 800856a:	f7fd f802 	bl	8005572 <PIDDelayInit>
						pp->pp_start=0;
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8008574:	f36f 0300 	bfc	r3, #0, #1
 8008578:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 838d 	beq.w	8008ca8 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	331a      	adds	r3, #26
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	ed93 7a00 	vldr	s14, [r3]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80085a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	3328      	adds	r3, #40	; 0x28
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	3304      	adds	r3, #4
 80085c0:	ed93 7a00 	vldr	s14, [r3]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80085ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80085da:	f36f 03c3 	bfc	r3, #3, #1
 80085de:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f0:	d107      	bne.n	8008602 <PathPlan+0x261a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008600:	d021      	beq.n	8008646 <PathPlan+0x265e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008610:	d107      	bne.n	8008622 <PathPlan+0x263a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008618:	eef5 7a40 	vcmp.f32	s15, #0.0
 800861c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008620:	d011      	beq.n	8008646 <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800862e:	eef0 0a47 	vmov.f32	s1, s14
 8008632:	eeb0 0a67 	vmov.f32	s0, s15
 8008636:	f016 f831 	bl	801e69c <atan2f>
 800863a:	eef0 7a40 	vmov.f32	s15, s0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8008644:	e075      	b.n	8008732 <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800864c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008654:	d007      	beq.n	8008666 <PathPlan+0x267e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800865c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008664:	d10b      	bne.n	800867e <PathPlan+0x2696>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800866c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	d503      	bpl.n	800867e <PathPlan+0x2696>
						pp->heading = -1.5708;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <PathPlan+0x270c>)
 800867a:	65da      	str	r2, [r3, #92]	; 0x5c
 800867c:	e059      	b.n	8008732 <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008684:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	d007      	beq.n	800869e <PathPlan+0x26b6>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008694:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869c:	d10b      	bne.n	80086b6 <PathPlan+0x26ce>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80086a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ac:	dd03      	ble.n	80086b6 <PathPlan+0x26ce>
						pp->heading = 1.5708;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a11      	ldr	r2, [pc, #68]	; (80086f8 <PathPlan+0x2710>)
 80086b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80086b4:	e03d      	b.n	8008732 <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80086bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c4:	d007      	beq.n	80086d6 <PathPlan+0x26ee>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80086cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d112      	bne.n	80086fc <PathPlan+0x2714>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80086dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80086e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e4:	dd0a      	ble.n	80086fc <PathPlan+0x2714>
						pp->heading = 0.0;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80086ee:	e020      	b.n	8008732 <PathPlan+0x274a>
 80086f0:	40020814 	.word	0x40020814
 80086f4:	bfc90ff9 	.word	0xbfc90ff9
 80086f8:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870a:	d007      	beq.n	800871c <PathPlan+0x2734>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008712:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871a:	d10a      	bne.n	8008732 <PathPlan+0x274a>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	d502      	bpl.n	8008732 <PathPlan+0x274a>
						pp->heading = M_PI;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4ad6      	ldr	r2, [pc, #856]	; (8008a88 <PathPlan+0x2aa0>)
 8008730:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	3374      	adds	r3, #116	; 0x74
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	ed93 8a00 	vldr	s16, [r3]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800874a:	eeb0 0a67 	vmov.f32	s0, s15
 800874e:	f015 ff1b 	bl	801e588 <cosf>
 8008752:	eef0 7a40 	vmov.f32	s15, s0
 8008756:	ee68 7a27 	vmul.f32	s15, s16, s15
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	3374      	adds	r3, #116	; 0x74
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	ed93 8a00 	vldr	s16, [r3]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8008778:	eeb0 0a67 	vmov.f32	s0, s15
 800877c:	f015 ff4c 	bl	801e618 <sinf>
 8008780:	eef0 7a40 	vmov.f32	s15, s0
 8008784:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	665a      	str	r2, [r3, #100]	; 0x64
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fc fefa 	bl	80055ae <PID>
				PID(&(pp->y));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fc fef4 	bl	80055ae <PID>
				PID(&(pp->z));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fc feee 	bl	80055ae <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	edd3 7a06 	vldr	s15, [r3, #24]
 80087de:	eeb0 0a67 	vmov.f32	s0, s15
 80087e2:	f015 fed1 	bl	801e588 <cosf>
 80087e6:	eef0 7a40 	vmov.f32	s15, s0
 80087ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80087fa:	eeb0 0a67 	vmov.f32	s0, s15
 80087fe:	f015 ff0b 	bl	801e618 <sinf>
 8008802:	eef0 7a40 	vmov.f32	s15, s0
 8008806:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800880a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008820:	eeb0 0a67 	vmov.f32	s0, s15
 8008824:	f015 fef8 	bl	801e618 <sinf>
 8008828:	eef0 7a40 	vmov.f32	s15, s0
 800882c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	edd3 7a06 	vldr	s15, [r3, #24]
 800883c:	eeb0 0a67 	vmov.f32	s0, s15
 8008840:	f015 fea2 	bl	801e588 <cosf>
 8008844:	eef0 7a40 	vmov.f32	s15, s0
 8008848:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800884c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008862:	eeb0 0a67 	vmov.f32	s0, s15
 8008866:	f015 fe8f 	bl	801e588 <cosf>
 800886a:	eef0 7a40 	vmov.f32	s15, s0
 800886e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	edd3 7a06 	vldr	s15, [r3, #24]
 800887e:	eeb0 0a67 	vmov.f32	s0, s15
 8008882:	f015 fec9 	bl	801e618 <sinf>
 8008886:	eef0 7a40 	vmov.f32	s15, s0
 800888a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800888e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80088a4:	eeb0 0a67 	vmov.f32	s0, s15
 80088a8:	f015 feb6 	bl	801e618 <sinf>
 80088ac:	eef0 7a40 	vmov.f32	s15, s0
 80088b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80088c0:	eeb0 0a67 	vmov.f32	s0, s15
 80088c4:	f015 fe60 	bl	801e588 <cosf>
 80088c8:	eef0 7a40 	vmov.f32	s15, s0
 80088cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80088d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f040 80dd 	bne.w	8008aa0 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80088f8:	eef1 7a67 	vneg.f32	s15, s15
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008914:	4618      	mov	r0, r3
 8008916:	f7f7 fe17 	bl	8000548 <__aeabi_f2d>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4610      	mov	r0, r2
 8008920:	4619      	mov	r1, r3
 8008922:	f7f8 f961 	bl	8000be8 <__aeabi_d2f>
 8008926:	4603      	mov	r3, r0
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef1 7a67 	vneg.f32	s15, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008946:	ee17 0a90 	vmov	r0, s15
 800894a:	f7f7 fdfd 	bl	8000548 <__aeabi_f2d>
 800894e:	a34c      	add	r3, pc, #304	; (adr r3, 8008a80 <PathPlan+0x2a98>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4614      	mov	r4, r2
 800895e:	461d      	mov	r5, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fdee 	bl	8000548 <__aeabi_f2d>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fc8a 	bl	800028c <__adddf3>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4610      	mov	r0, r2
 800897e:	4619      	mov	r1, r3
 8008980:	f7f8 f932 	bl	8000be8 <__aeabi_d2f>
 8008984:	4602      	mov	r2, r0
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800899c:	ee17 0a90 	vmov	r0, s15
 80089a0:	f7f7 fdd2 	bl	8000548 <__aeabi_f2d>
 80089a4:	a336      	add	r3, pc, #216	; (adr r3, 8008a80 <PathPlan+0x2a98>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fe25 	bl	80005f8 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4614      	mov	r4, r2
 80089b4:	461d      	mov	r5, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f7 fdc3 	bl	8000548 <__aeabi_f2d>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f7 fc5f 	bl	800028c <__adddf3>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7f8 f907 	bl	8000be8 <__aeabi_d2f>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80089ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089f2:	ee17 0a90 	vmov	r0, s15
 80089f6:	f7f7 fda7 	bl	8000548 <__aeabi_f2d>
 80089fa:	a321      	add	r3, pc, #132	; (adr r3, 8008a80 <PathPlan+0x2a98>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f7f7 fdfa 	bl	80005f8 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f7 fd98 	bl	8000548 <__aeabi_f2d>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc34 	bl	800028c <__adddf3>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f7f8 f8dc 	bl	8000be8 <__aeabi_d2f>
 8008a30:	4602      	mov	r2, r0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a48:	ee17 0a90 	vmov	r0, s15
 8008a4c:	f7f7 fd7c 	bl	8000548 <__aeabi_f2d>
 8008a50:	a30b      	add	r3, pc, #44	; (adr r3, 8008a80 <PathPlan+0x2a98>)
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4614      	mov	r4, r2
 8008a60:	461d      	mov	r5, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7f7 fd6d 	bl	8000548 <__aeabi_f2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fc09 	bl	800028c <__adddf3>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	e006      	b.n	8008a8c <PathPlan+0x2aa4>
 8008a7e:	bf00      	nop
 8008a80:	dbf8b9bb 	.word	0xdbf8b9bb
 8008a84:	3fe6a09e 	.word	0x3fe6a09e
 8008a88:	40490fdb 	.word	0x40490fdb
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7f8 f8a9 	bl	8000be8 <__aeabi_d2f>
 8008a96:	4602      	mov	r2, r0
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 8008a9e:	e103      	b.n	8008ca8 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	f040 80fe 	bne.w	8008ca8 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f7 fd48 	bl	8000548 <__aeabi_f2d>
 8008ab8:	a37f      	add	r3, pc, #508	; (adr r3, 8008cb8 <PathPlan+0x2cd0>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fd9b 	bl	80005f8 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	461d      	mov	r5, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7f7 fd39 	bl	8000548 <__aeabi_f2d>
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	4b79      	ldr	r3, [pc, #484]	; (8008cc0 <PathPlan+0x2cd8>)
 8008adc:	f7f7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fbce 	bl	8000288 <__aeabi_dsub>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	461d      	mov	r5, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f7 fd24 	bl	8000548 <__aeabi_f2d>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f7 fbc0 	bl	800028c <__adddf3>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4610      	mov	r0, r2
 8008b12:	4619      	mov	r1, r3
 8008b14:	f7f8 f868 	bl	8000be8 <__aeabi_d2f>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f7 fd0e 	bl	8000548 <__aeabi_f2d>
 8008b2c:	a362      	add	r3, pc, #392	; (adr r3, 8008cb8 <PathPlan+0x2cd0>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fd61 	bl	80005f8 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	461d      	mov	r5, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f7 fcff 	bl	8000548 <__aeabi_f2d>
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	4b5c      	ldr	r3, [pc, #368]	; (8008cc0 <PathPlan+0x2cd8>)
 8008b50:	f7f7 fd52 	bl	80005f8 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	f7f7 fb96 	bl	800028c <__adddf3>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4614      	mov	r4, r2
 8008b66:	461d      	mov	r5, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f7 fcea 	bl	8000548 <__aeabi_f2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 fb84 	bl	8000288 <__aeabi_dsub>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4610      	mov	r0, r2
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7f8 f82e 	bl	8000be8 <__aeabi_d2f>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8008ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f7 fcc9 	bl	8000548 <__aeabi_f2d>
 8008bb6:	a340      	add	r3, pc, #256	; (adr r3, 8008cb8 <PathPlan+0x2cd0>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f7 fcba 	bl	8000548 <__aeabi_f2d>
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <PathPlan+0x2cd8>)
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4620      	mov	r0, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 fb4f 	bl	8000288 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4614      	mov	r4, r2
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f7 fca5 	bl	8000548 <__aeabi_f2d>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4620      	mov	r0, r4
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f7 fb41 	bl	800028c <__adddf3>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7f7 ffe9 	bl	8000be8 <__aeabi_d2f>
 8008c16:	4602      	mov	r2, r0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7f7 fc8f 	bl	8000548 <__aeabi_f2d>
 8008c2a:	a323      	add	r3, pc, #140	; (adr r3, 8008cb8 <PathPlan+0x2cd0>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 fc80 	bl	8000548 <__aeabi_f2d>
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	4b1c      	ldr	r3, [pc, #112]	; (8008cc0 <PathPlan+0x2cd8>)
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fb17 	bl	800028c <__adddf3>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4614      	mov	r4, r2
 8008c64:	461d      	mov	r5, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7f7 fc6b 	bl	8000548 <__aeabi_f2d>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fb07 	bl	800028c <__adddf3>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	f7f7 ffaf 	bl	8000be8 <__aeabi_d2f>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	ecbd 8b02 	vpop	{d8}
 8008cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008cb6:	bf00      	nop
 8008cb8:	a1cac083 	.word	0xa1cac083
 8008cbc:	3febb645 	.word	0x3febb645
 8008cc0:	3fe00000 	.word	0x3fe00000

08008cc4 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	230b      	movs	r3, #11
 8008cd6:	2188      	movs	r1, #136	; 0x88
 8008cd8:	f009 fc0a 	bl	80124f0 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f81e 	bl	8008d1e <PSx_HandlerI2C>
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	230b      	movs	r3, #11
 8008d04:	2188      	movs	r1, #136	; 0x88
 8008d06:	f009 fbf3 	bl	80124f0 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	789a      	ldrb	r2, [r3, #2]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	78da      	ldrb	r2, [r3, #3]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	791b      	ldrb	r3, [r3, #4]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	795b      	ldrb	r3, [r3, #5]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	799b      	ldrb	r3, [r3, #6]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	79db      	ldrb	r3, [r3, #7]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7a1b      	ldrb	r3, [r3, #8]
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7a5b      	ldrb	r3, [r3, #9]
 8008d70:	461a      	mov	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	7a9a      	ldrb	r2, [r3, #10]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	7ada      	ldrb	r2, [r3, #11]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f804 	bl	8008d98 <PSxBTGetXY>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80090b0 <PSxBTGetXY+0x318>
 8008db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db8:	d53e      	bpl.n	8008e38 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	ee17 0a90 	vmov	r0, s15
 8008dca:	f7f7 fbbd 	bl	8000548 <__aeabi_f2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	a1b5      	add	r1, pc, #724	; (adr r1, 80090a8 <PSxBTGetXY+0x310>)
 8008dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd8:	f7f7 fa56 	bl	8000288 <__aeabi_dsub>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4610      	mov	r0, r2
 8008de2:	4619      	mov	r1, r3
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	4bb2      	ldr	r3, [pc, #712]	; (80090b4 <PSxBTGetXY+0x31c>)
 8008dea:	f7f7 fd2f 	bl	800084c <__aeabi_ddiv>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7f7 fef7 	bl	8000be8 <__aeabi_d2f>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	d504      	bpl.n	8008e1a <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	64da      	str	r2, [r3, #76]	; 0x4c
 8008e18:	e05d      	b.n	8008ed6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2c:	dd53      	ble.n	8008ed6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008e34:	64da      	str	r2, [r3, #76]	; 0x4c
 8008e36:	e04e      	b.n	8008ed6 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e44:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80090c0 <PSxBTGetXY+0x328>
 8008e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e50:	dd3d      	ble.n	8008ece <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5e:	ee17 0a90 	vmov	r0, s15
 8008e62:	f7f7 fb71 	bl	8000548 <__aeabi_f2d>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	f04f 0000 	mov.w	r0, #0
 8008e6e:	4992      	ldr	r1, [pc, #584]	; (80090b8 <PSxBTGetXY+0x320>)
 8008e70:	f7f7 fa0a 	bl	8000288 <__aeabi_dsub>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	4b8c      	ldr	r3, [pc, #560]	; (80090b4 <PSxBTGetXY+0x31c>)
 8008e82:	f7f7 fce3 	bl	800084c <__aeabi_ddiv>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f7f7 feab 	bl	8000be8 <__aeabi_d2f>
 8008e92:	4602      	mov	r2, r0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	dd04      	ble.n	8008eb2 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	64da      	str	r2, [r3, #76]	; 0x4c
 8008eb0:	e011      	b.n	8008ed6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8008eb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	d507      	bpl.n	8008ed6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a7c      	ldr	r2, [pc, #496]	; (80090bc <PSxBTGetXY+0x324>)
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ecc:	e003      	b.n	8008ed6 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80090b0 <PSxBTGetXY+0x318>
 8008ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	d53e      	bpl.n	8008f6e <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	ee07 3a90 	vmov	s15, r3
 8008ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efc:	ee17 0a90 	vmov	r0, s15
 8008f00:	f7f7 fb22 	bl	8000548 <__aeabi_f2d>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	a167      	add	r1, pc, #412	; (adr r1, 80090a8 <PSxBTGetXY+0x310>)
 8008f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f0e:	f7f7 f9bb 	bl	8000288 <__aeabi_dsub>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <PSxBTGetXY+0x31c>)
 8008f20:	f7f7 fc94 	bl	800084c <__aeabi_ddiv>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f7f7 fe5c 	bl	8000be8 <__aeabi_d2f>
 8008f30:	4602      	mov	r2, r0
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f44:	d504      	bpl.n	8008f50 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	651a      	str	r2, [r3, #80]	; 0x50
 8008f4e:	e05d      	b.n	800900c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	dd53      	ble.n	800900c <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8008f6c:	e04e      	b.n	800900c <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80090c0 <PSxBTGetXY+0x328>
 8008f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	dd3d      	ble.n	8009004 <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8c:	ee07 3a90 	vmov	s15, r3
 8008f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f94:	ee17 0a90 	vmov	r0, s15
 8008f98:	f7f7 fad6 	bl	8000548 <__aeabi_f2d>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	f04f 0000 	mov.w	r0, #0
 8008fa4:	4944      	ldr	r1, [pc, #272]	; (80090b8 <PSxBTGetXY+0x320>)
 8008fa6:	f7f7 f96f 	bl	8000288 <__aeabi_dsub>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	4b3f      	ldr	r3, [pc, #252]	; (80090b4 <PSxBTGetXY+0x31c>)
 8008fb8:	f7f7 fc48 	bl	800084c <__aeabi_ddiv>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	f7f7 fe10 	bl	8000be8 <__aeabi_d2f>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	dd04      	ble.n	8008fe8 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	651a      	str	r2, [r3, #80]	; 0x50
 8008fe6:	e011      	b.n	800900c <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008fee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffa:	d507      	bpl.n	800900c <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a2f      	ldr	r2, [pc, #188]	; (80090bc <PSxBTGetXY+0x324>)
 8009000:	651a      	str	r2, [r3, #80]	; 0x50
 8009002:	e003      	b.n	800900c <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	ee07 3a90 	vmov	s15, r3
 8009014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009018:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80090b0 <PSxBTGetXY+0x318>
 800901c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009024:	d54e      	bpl.n	80090c4 <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	ee17 0a90 	vmov	r0, s15
 8009036:	f7f7 fa87 	bl	8000548 <__aeabi_f2d>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	a11a      	add	r1, pc, #104	; (adr r1, 80090a8 <PSxBTGetXY+0x310>)
 8009040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009044:	f7f7 f920 	bl	8000288 <__aeabi_dsub>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4610      	mov	r0, r2
 800904e:	4619      	mov	r1, r3
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	4b17      	ldr	r3, [pc, #92]	; (80090b4 <PSxBTGetXY+0x31c>)
 8009056:	f7f7 fbf9 	bl	800084c <__aeabi_ddiv>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4610      	mov	r0, r2
 8009060:	4619      	mov	r1, r3
 8009062:	f7f7 fdc1 	bl	8000be8 <__aeabi_d2f>
 8009066:	4602      	mov	r2, r0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907a:	d504      	bpl.n	8009086 <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	655a      	str	r2, [r3, #84]	; 0x54
 8009084:	e06d      	b.n	8009162 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800908c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	dd63      	ble.n	8009162 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80090a0:	655a      	str	r2, [r3, #84]	; 0x54
 80090a2:	e05e      	b.n	8009162 <PSxBTGetXY+0x3ca>
 80090a4:	f3af 8000 	nop.w
 80090a8:	00000000 	.word	0x00000000
 80090ac:	405cc000 	.word	0x405cc000
 80090b0:	42e60000 	.word	0x42e60000
 80090b4:	40590000 	.word	0x40590000
 80090b8:	40618000 	.word	0x40618000
 80090bc:	bf800000 	.word	0xbf800000
 80090c0:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80090c0 <PSxBTGetXY+0x328>
 80090d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090dc:	dd3d      	ble.n	800915a <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ea:	ee17 0a90 	vmov	r0, s15
 80090ee:	f7f7 fa2b 	bl	8000548 <__aeabi_f2d>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	f04f 0000 	mov.w	r0, #0
 80090fa:	4981      	ldr	r1, [pc, #516]	; (8009300 <PSxBTGetXY+0x568>)
 80090fc:	f7f7 f8c4 	bl	8000288 <__aeabi_dsub>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4610      	mov	r0, r2
 8009106:	4619      	mov	r1, r3
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	4b7d      	ldr	r3, [pc, #500]	; (8009304 <PSxBTGetXY+0x56c>)
 800910e:	f7f7 fb9d 	bl	800084c <__aeabi_ddiv>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	f7f7 fd65 	bl	8000be8 <__aeabi_d2f>
 800911e:	4602      	mov	r2, r0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800912a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009132:	dd04      	ble.n	800913e <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f04f 0200 	mov.w	r2, #0
 800913a:	655a      	str	r2, [r3, #84]	; 0x54
 800913c:	e011      	b.n	8009162 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009144:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800914c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009150:	d507      	bpl.n	8009162 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a6c      	ldr	r2, [pc, #432]	; (8009308 <PSxBTGetXY+0x570>)
 8009156:	655a      	str	r2, [r3, #84]	; 0x54
 8009158:	e003      	b.n	8009162 <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800930c <PSxBTGetXY+0x574>
 8009172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917a:	d53e      	bpl.n	80091fa <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009188:	ee17 0a90 	vmov	r0, s15
 800918c:	f7f7 f9dc 	bl	8000548 <__aeabi_f2d>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	a156      	add	r1, pc, #344	; (adr r1, 80092f0 <PSxBTGetXY+0x558>)
 8009196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800919a:	f7f7 f875 	bl	8000288 <__aeabi_dsub>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4610      	mov	r0, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	4b56      	ldr	r3, [pc, #344]	; (8009304 <PSxBTGetXY+0x56c>)
 80091ac:	f7f7 fb4e 	bl	800084c <__aeabi_ddiv>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	f7f7 fd16 	bl	8000be8 <__aeabi_d2f>
 80091bc:	4602      	mov	r2, r0
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80091c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d0:	d504      	bpl.n	80091dc <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	659a      	str	r2, [r3, #88]	; 0x58
 80091da:	e05d      	b.n	8009298 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80091e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ee:	dd53      	ble.n	8009298 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80091f6:	659a      	str	r2, [r3, #88]	; 0x58
 80091f8:	e04e      	b.n	8009298 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009206:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009310 <PSxBTGetXY+0x578>
 800920a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	dd3d      	ble.n	8009290 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	ee07 3a90 	vmov	s15, r3
 800921c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009220:	ee17 0a90 	vmov	r0, s15
 8009224:	f7f7 f990 	bl	8000548 <__aeabi_f2d>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	f04f 0000 	mov.w	r0, #0
 8009230:	4933      	ldr	r1, [pc, #204]	; (8009300 <PSxBTGetXY+0x568>)
 8009232:	f7f7 f829 	bl	8000288 <__aeabi_dsub>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4610      	mov	r0, r2
 800923c:	4619      	mov	r1, r3
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	4b30      	ldr	r3, [pc, #192]	; (8009304 <PSxBTGetXY+0x56c>)
 8009244:	f7f7 fb02 	bl	800084c <__aeabi_ddiv>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4610      	mov	r0, r2
 800924e:	4619      	mov	r1, r3
 8009250:	f7f7 fcca 	bl	8000be8 <__aeabi_d2f>
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009268:	dd04      	ble.n	8009274 <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	659a      	str	r2, [r3, #88]	; 0x58
 8009272:	e011      	b.n	8009298 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800927a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800927e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	d507      	bpl.n	8009298 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a1f      	ldr	r2, [pc, #124]	; (8009308 <PSxBTGetXY+0x570>)
 800928c:	659a      	str	r2, [r3, #88]	; 0x58
 800928e:	e003      	b.n	8009298 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f04f 0200 	mov.w	r2, #0
 8009296:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929c:	4618      	mov	r0, r3
 800929e:	f7f7 f931 	bl	8000504 <__aeabi_ui2d>
 80092a2:	a315      	add	r3, pc, #84	; (adr r3, 80092f8 <PSxBTGetXY+0x560>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f7 fad0 	bl	800084c <__aeabi_ddiv>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4610      	mov	r0, r2
 80092b2:	4619      	mov	r1, r3
 80092b4:	f7f7 fc98 	bl	8000be8 <__aeabi_d2f>
 80092b8:	4602      	mov	r2, r0
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f7 f91e 	bl	8000504 <__aeabi_ui2d>
 80092c8:	a30b      	add	r3, pc, #44	; (adr r3, 80092f8 <PSxBTGetXY+0x560>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f7f7 fabd 	bl	800084c <__aeabi_ddiv>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	f7f7 fc85 	bl	8000be8 <__aeabi_d2f>
 80092de:	4602      	mov	r2, r0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	f3af 8000 	nop.w
 80092f0:	00000000 	.word	0x00000000
 80092f4:	405cc000 	.word	0x405cc000
 80092f8:	00000000 	.word	0x00000000
 80092fc:	406fe000 	.word	0x406fe000
 8009300:	40618000 	.word	0x40618000
 8009304:	40590000 	.word	0x40590000
 8009308:	bf800000 	.word	0xbf800000
 800930c:	42e60000 	.word	0x42e60000
 8009310:	430c0000 	.word	0x430c0000

08009314 <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6858      	ldr	r0, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3308      	adds	r3, #8
 8009332:	2201      	movs	r2, #1
 8009334:	4619      	mov	r1, r3
 8009336:	f00c fe5d 	bl	8015ff4 <HAL_UART_Receive_IT>

}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	7f5b      	ldrb	r3, [r3, #29]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d035      	beq.n	80093c0 <R6091U_Handler+0x7c>
 8009354:	2b02      	cmp	r3, #2
 8009356:	f300 80b2 	bgt.w	80094be <R6091U_Handler+0x17a>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <R6091U_Handler+0x20>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d011      	beq.n	8009386 <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 8009362:	e0ac      	b.n	80094be <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7a1b      	ldrb	r3, [r3, #8]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2baa      	cmp	r3, #170	; 0xaa
 800936c:	d102      	bne.n	8009374 <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6858      	ldr	r0, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3308      	adds	r3, #8
 800937c:	2201      	movs	r2, #1
 800937e:	4619      	mov	r1, r3
 8009380:	f00c fe38 	bl	8015ff4 <HAL_UART_Receive_IT>
		break;
 8009384:	e09b      	b.n	80094be <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7a1b      	ldrb	r3, [r3, #8]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10b      	bne.n	80093a8 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6858      	ldr	r0, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3308      	adds	r3, #8
 800939e:	220d      	movs	r2, #13
 80093a0:	4619      	mov	r1, r3
 80093a2:	f00c fe27 	bl	8015ff4 <HAL_UART_Receive_IT>
		break;
 80093a6:	e08a      	b.n	80094be <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6858      	ldr	r0, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	2201      	movs	r2, #1
 80093b8:	4619      	mov	r1, r3
 80093ba:	f00c fe1b 	bl	8015ff4 <HAL_UART_Receive_IT>
		break;
 80093be:	e07e      	b.n	80094be <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7a1b      	ldrb	r3, [r3, #8]
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7a5b      	ldrb	r3, [r3, #9]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	4413      	add	r3, r2
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7a9b      	ldrb	r3, [r3, #10]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7adb      	ldrb	r3, [r3, #11]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4413      	add	r3, r2
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7b1b      	ldrb	r3, [r3, #12]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	7b5b      	ldrb	r3, [r3, #13]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4413      	add	r3, r2
 80093fe:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7b9b      	ldrb	r3, [r3, #14]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	4413      	add	r3, r2
 8009408:	b2da      	uxtb	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7bdb      	ldrb	r3, [r3, #15]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	4413      	add	r3, r2
 8009412:	b2da      	uxtb	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7c1b      	ldrb	r3, [r3, #16]
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4413      	add	r3, r2
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7c5b      	ldrb	r3, [r3, #17]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	4413      	add	r3, r2
 8009426:	b2da      	uxtb	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7c9b      	ldrb	r3, [r3, #18]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	4413      	add	r3, r2
 8009430:	b2da      	uxtb	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7cdb      	ldrb	r3, [r3, #19]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	4413      	add	r3, r2
 800943a:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009448:	b2da      	uxtb	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7d1b      	ldrb	r3, [r3, #20]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	429a      	cmp	r2, r3
 8009452:	d121      	bne.n	8009498 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3309      	adds	r3, #9
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 800945c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009468:	eddf 6a17 	vldr	s13, [pc, #92]	; 80094c8 <R6091U_Handler+0x184>
 800946c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009470:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80094cc <R6091U_Handler+0x188>
 8009474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009478:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <R6091U_Handler+0x18c>)
 800947a:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 800947e:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <R6091U_Handler+0x190>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b13      	cmp	r3, #19
 8009484:	dd03      	ble.n	800948e <R6091U_Handler+0x14a>
				testCounter2 = 0;
 8009486:	4b13      	ldr	r3, [pc, #76]	; (80094d4 <R6091U_Handler+0x190>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e004      	b.n	8009498 <R6091U_Handler+0x154>
				testCounter2 ++;
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <R6091U_Handler+0x190>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a0f      	ldr	r2, [pc, #60]	; (80094d4 <R6091U_Handler+0x190>)
 8009496:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3308      	adds	r3, #8
 800949c:	220d      	movs	r2, #13
 800949e:	2100      	movs	r1, #0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f010 faf3 	bl	8019a8c <memset>
		IMU->State = PENDING_SYNC;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6858      	ldr	r0, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3308      	adds	r3, #8
 80094b4:	2201      	movs	r2, #1
 80094b6:	4619      	mov	r1, r3
 80094b8:	f00c fd9c 	bl	8015ff4 <HAL_UART_Receive_IT>
		break;
 80094bc:	bf00      	nop
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	42c80000 	.word	0x42c80000
 80094cc:	43340000 	.word	0x43340000
 80094d0:	20009980 	.word	0x20009980
 80094d4:	200067d0 	.word	0x200067d0

080094d8 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 80094e8:	4b28      	ldr	r3, [pc, #160]	; (800958c <RNSInit+0xb4>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 80094ee:	4b27      	ldr	r3, [pc, #156]	; (800958c <RNSInit+0xb4>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	2302      	movs	r3, #2
 80094fa:	4a24      	ldr	r2, [pc, #144]	; (800958c <RNSInit+0xb4>)
 80094fc:	2117      	movs	r1, #23
 80094fe:	f7fa f949 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 800950a:	4b20      	ldr	r3, [pc, #128]	; (800958c <RNSInit+0xb4>)
 800950c:	2201      	movs	r2, #1
 800950e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8009510:	4b1e      	ldr	r3, [pc, #120]	; (800958c <RNSInit+0xb4>)
 8009512:	2214      	movs	r2, #20
 8009514:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	2302      	movs	r3, #2
 800951c:	4a1b      	ldr	r2, [pc, #108]	; (800958c <RNSInit+0xb4>)
 800951e:	2117      	movs	r1, #23
 8009520:	f7fa f938 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009530:	e022      	b.n	8009578 <RNSInit+0xa0>
		if(wait >= 2000000){
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4a16      	ldr	r2, [pc, #88]	; (8009590 <RNSInit+0xb8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	dd1b      	ble.n	8009572 <RNSInit+0x9a>
			insData_send[0] = 1;
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <RNSInit+0xb4>)
 800953c:	2201      	movs	r2, #1
 800953e:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 8009540:	4b12      	ldr	r3, [pc, #72]	; (800958c <RNSInit+0xb4>)
 8009542:	2214      	movs	r2, #20
 8009544:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	2302      	movs	r3, #2
 800954c:	4a0f      	ldr	r2, [pc, #60]	; (800958c <RNSInit+0xb4>)
 800954e:	2117      	movs	r1, #23
 8009550:	f7fa f920 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <RNSInit+0xbc>)
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	b25b      	sxtb	r3, r3
 800955a:	4a0e      	ldr	r2, [pc, #56]	; (8009594 <RNSInit+0xbc>)
 800955c:	43db      	mvns	r3, r3
 800955e:	b2db      	uxtb	r3, r3
 8009560:	09db      	lsrs	r3, r3, #7
 8009562:	b2d9      	uxtb	r1, r3
 8009564:	7853      	ldrb	r3, [r2, #1]
 8009566:	f361 13c7 	bfi	r3, r1, #7, #1
 800956a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	e002      	b.n	8009578 <RNSInit+0xa0>
		}else{
			wait ++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800957e:	2b02      	cmp	r3, #2
 8009580:	d0d7      	beq.n	8009532 <RNSInit+0x5a>
		}
	}
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	2000a6b0 	.word	0x2000a6b0
 8009590:	001e847f 	.word	0x001e847f
 8009594:	40020814 	.word	0x40020814

08009598 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2203      	movs	r2, #3
 80095a4:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f04f 0200 	mov.w	r2, #0
 80095b4:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80095ce:	4b31      	ldr	r3, [pc, #196]	; (8009694 <RNSStop+0xfc>)
 80095d0:	2211      	movs	r2, #17
 80095d2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	791a      	ldrb	r2, [r3, #4]
 80095d8:	4b2e      	ldr	r3, [pc, #184]	; (8009694 <RNSStop+0xfc>)
 80095da:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	2302      	movs	r3, #2
 80095e2:	4a2c      	ldr	r2, [pc, #176]	; (8009694 <RNSStop+0xfc>)
 80095e4:	2117      	movs	r1, #23
 80095e6:	f7fa f8d5 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f103 0208 	add.w	r2, r3, #8
 80095f4:	2308      	movs	r3, #8
 80095f6:	2118      	movs	r1, #24
 80095f8:	f7fa f8cc 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f103 0210 	add.w	r2, r3, #16
 8009606:	2308      	movs	r3, #8
 8009608:	2119      	movs	r1, #25
 800960a:	f7fa f8c3 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009612:	e035      	b.n	8009680 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4a20      	ldr	r2, [pc, #128]	; (8009698 <RNSStop+0x100>)
 8009618:	4293      	cmp	r3, r2
 800961a:	dd2e      	ble.n	800967a <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800961c:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <RNSStop+0xfc>)
 800961e:	2211      	movs	r2, #17
 8009620:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	791a      	ldrb	r2, [r3, #4]
 8009626:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <RNSStop+0xfc>)
 8009628:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	2302      	movs	r3, #2
 8009630:	4a18      	ldr	r2, [pc, #96]	; (8009694 <RNSStop+0xfc>)
 8009632:	2117      	movs	r1, #23
 8009634:	f7fa f8ae 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f103 0208 	add.w	r2, r3, #8
 8009642:	2308      	movs	r3, #8
 8009644:	2118      	movs	r1, #24
 8009646:	f7fa f8a5 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f103 0210 	add.w	r2, r3, #16
 8009654:	2308      	movs	r3, #8
 8009656:	2119      	movs	r1, #25
 8009658:	f7fa f89c 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <RNSStop+0x104>)
 800965e:	785b      	ldrb	r3, [r3, #1]
 8009660:	b25b      	sxtb	r3, r3
 8009662:	4a0e      	ldr	r2, [pc, #56]	; (800969c <RNSStop+0x104>)
 8009664:	43db      	mvns	r3, r3
 8009666:	b2db      	uxtb	r3, r3
 8009668:	09db      	lsrs	r3, r3, #7
 800966a:	b2d9      	uxtb	r1, r3
 800966c:	7853      	ldrb	r3, [r2, #1]
 800966e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009672:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	e002      	b.n	8009680 <RNSStop+0xe8>
		}
		else
			wait++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009686:	2b02      	cmp	r3, #2
 8009688:	d0c4      	beq.n	8009614 <RNSStop+0x7c>
	}


}
 800968a:	bf00      	nop
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000a6b0 	.word	0x2000a6b0
 8009698:	001e847f 	.word	0x001e847f
 800969c:	40020814 	.word	0x40020814

080096a0 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80096aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80096ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80096b2:	edc7 1a02 	vstr	s3, [r7, #8]
 80096b6:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2205      	movs	r2, #5
 80096bc:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f804 	bl	80096e4 <RNSSendIns>

}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 80096ec:	bf00      	nop
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d0fa      	beq.n	80096ee <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009700:	4b31      	ldr	r3, [pc, #196]	; (80097c8 <RNSSendIns+0xe4>)
 8009702:	2211      	movs	r2, #17
 8009704:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	791a      	ldrb	r2, [r3, #4]
 800970a:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <RNSSendIns+0xe4>)
 800970c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	2302      	movs	r3, #2
 8009714:	4a2c      	ldr	r2, [pc, #176]	; (80097c8 <RNSSendIns+0xe4>)
 8009716:	2117      	movs	r1, #23
 8009718:	f7fa f83c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f103 0208 	add.w	r2, r3, #8
 8009726:	2308      	movs	r3, #8
 8009728:	2118      	movs	r1, #24
 800972a:	f7fa f833 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f103 0210 	add.w	r2, r3, #16
 8009738:	2308      	movs	r3, #8
 800973a:	2119      	movs	r1, #25
 800973c:	f7fa f82a 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009744:	e035      	b.n	80097b2 <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a20      	ldr	r2, [pc, #128]	; (80097cc <RNSSendIns+0xe8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	dd2e      	ble.n	80097ac <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 800974e:	4b1e      	ldr	r3, [pc, #120]	; (80097c8 <RNSSendIns+0xe4>)
 8009750:	2211      	movs	r2, #17
 8009752:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	791a      	ldrb	r2, [r3, #4]
 8009758:	4b1b      	ldr	r3, [pc, #108]	; (80097c8 <RNSSendIns+0xe4>)
 800975a:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	2302      	movs	r3, #2
 8009762:	4a19      	ldr	r2, [pc, #100]	; (80097c8 <RNSSendIns+0xe4>)
 8009764:	2117      	movs	r1, #23
 8009766:	f7fa f815 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f103 0208 	add.w	r2, r3, #8
 8009774:	2308      	movs	r3, #8
 8009776:	2118      	movs	r1, #24
 8009778:	f7fa f80c 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f103 0210 	add.w	r2, r3, #16
 8009786:	2308      	movs	r3, #8
 8009788:	2119      	movs	r1, #25
 800978a:	f7fa f803 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800978e:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <RNSSendIns+0xec>)
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	b25b      	sxtb	r3, r3
 8009794:	4a0e      	ldr	r2, [pc, #56]	; (80097d0 <RNSSendIns+0xec>)
 8009796:	43db      	mvns	r3, r3
 8009798:	b2db      	uxtb	r3, r3
 800979a:	09db      	lsrs	r3, r3, #7
 800979c:	b2d9      	uxtb	r1, r3
 800979e:	7853      	ldrb	r3, [r2, #1]
 80097a0:	f361 13c7 	bfi	r3, r1, #7, #1
 80097a4:	7053      	strb	r3, [r2, #1]
			wait = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	e002      	b.n	80097b2 <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3301      	adds	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d0c4      	beq.n	8009746 <RNSSendIns+0x62>
		}
	}

}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	2000a6b0 	.word	0x2000a6b0
 80097cc:	001e847f 	.word	0x001e847f
 80097d0:	40020814 	.word	0x40020814

080097d4 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 80097d4:	b40e      	push	{r1, r2, r3}
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7f3a      	ldrb	r2, [r7, #28]
 80097e2:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 80097e4:	f107 0320 	add.w	r3, r7, #32
 80097e8:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 80097ea:	bf00      	nop
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d0fa      	beq.n	80097ec <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 80097f6:	7f3b      	ldrb	r3, [r7, #28]
 80097f8:	2b18      	cmp	r3, #24
 80097fa:	d92b      	bls.n	8009854 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3307      	adds	r3, #7
 8009800:	f023 0307 	bic.w	r3, r3, #7
 8009804:	f103 0208 	add.w	r2, r3, #8
 8009808:	60ba      	str	r2, [r7, #8]
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	4610      	mov	r0, r2
 8009810:	4619      	mov	r1, r3
 8009812:	f7f7 f9e9 	bl	8000be8 <__aeabi_d2f>
 8009816:	4602      	mov	r2, r0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f04f 0200 	mov.w	r2, #0
 8009832:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f04f 0200 	mov.w	r2, #0
 800983a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 8009854:	7f3b      	ldrb	r3, [r7, #28]
 8009856:	2b1e      	cmp	r3, #30
 8009858:	d927      	bls.n	80098aa <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3307      	adds	r3, #7
 800985e:	f023 0307 	bic.w	r3, r3, #7
 8009862:	f103 0208 	add.w	r2, r3, #8
 8009866:	60ba      	str	r2, [r7, #8]
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	4610      	mov	r0, r2
 800986e:	4619      	mov	r1, r3
 8009870:	f7f7 f9ba 	bl	8000be8 <__aeabi_d2f>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f04f 0200 	mov.w	r2, #0
 8009880:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 80098aa:	7f3b      	ldrb	r3, [r7, #28]
 80098ac:	2b23      	cmp	r3, #35	; 0x23
 80098ae:	d923      	bls.n	80098f8 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	3307      	adds	r3, #7
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	f103 0208 	add.w	r2, r3, #8
 80098bc:	60ba      	str	r2, [r7, #8]
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	4610      	mov	r0, r2
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f7 f98f 	bl	8000be8 <__aeabi_d2f>
 80098ca:	4602      	mov	r2, r0
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f04f 0200 	mov.w	r2, #0
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f04f 0200 	mov.w	r2, #0
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 80098f8:	7f3b      	ldrb	r3, [r7, #28]
 80098fa:	2b48      	cmp	r3, #72	; 0x48
 80098fc:	d91f      	bls.n	800993e <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	3307      	adds	r3, #7
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	f103 0208 	add.w	r2, r3, #8
 800990a:	60ba      	str	r2, [r7, #8]
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	4610      	mov	r0, r2
 8009912:	4619      	mov	r1, r3
 8009914:	f7f7 f968 	bl	8000be8 <__aeabi_d2f>
 8009918:	4602      	mov	r2, r0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f04f 0200 	mov.w	r2, #0
 8009924:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f04f 0200 	mov.w	r2, #0
 800992c:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800993e:	7f3b      	ldrb	r3, [r7, #28]
 8009940:	2b50      	cmp	r3, #80	; 0x50
 8009942:	d91b      	bls.n	800997c <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	f103 0208 	add.w	r2, r3, #8
 8009950:	60ba      	str	r2, [r7, #8]
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f7 f945 	bl	8000be8 <__aeabi_d2f>
 800995e:	4602      	mov	r2, r0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f04f 0200 	mov.w	r2, #0
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 800997c:	7f3b      	ldrb	r3, [r7, #28]
 800997e:	2b51      	cmp	r3, #81	; 0x51
 8009980:	d917      	bls.n	80099b2 <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	3307      	adds	r3, #7
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	f103 0208 	add.w	r2, r3, #8
 800998e:	60ba      	str	r2, [r7, #8]
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	4610      	mov	r0, r2
 8009996:	4619      	mov	r1, r3
 8009998:	f7f7 f926 	bl	8000be8 <__aeabi_d2f>
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 80099b2:	7f3b      	ldrb	r3, [r7, #28]
 80099b4:	2b52      	cmp	r3, #82	; 0x52
 80099b6:	d913      	bls.n	80099e0 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	3307      	adds	r3, #7
 80099bc:	f023 0307 	bic.w	r3, r3, #7
 80099c0:	f103 0208 	add.w	r2, r3, #8
 80099c4:	60ba      	str	r2, [r7, #8]
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	f7f7 f90b 	bl	8000be8 <__aeabi_d2f>
 80099d2:	4602      	mov	r2, r0
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 80099e0:	7f3b      	ldrb	r3, [r7, #28]
 80099e2:	2b54      	cmp	r3, #84	; 0x54
 80099e4:	d90f      	bls.n	8009a06 <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	3307      	adds	r3, #7
 80099ea:	f023 0307 	bic.w	r3, r3, #7
 80099ee:	f103 0208 	add.w	r2, r3, #8
 80099f2:	60ba      	str	r2, [r7, #8]
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4610      	mov	r0, r2
 80099fa:	4619      	mov	r1, r3
 80099fc:	f7f7 f8f4 	bl	8000be8 <__aeabi_d2f>
 8009a00:	4602      	mov	r2, r0
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 8009a06:	4b4d      	ldr	r3, [pc, #308]	; (8009b3c <RNSSet+0x368>)
 8009a08:	2211      	movs	r2, #17
 8009a0a:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7e1a      	ldrb	r2, [r3, #24]
 8009a10:	4b4a      	ldr	r3, [pc, #296]	; (8009b3c <RNSSet+0x368>)
 8009a12:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	2302      	movs	r3, #2
 8009a1a:	4a48      	ldr	r2, [pc, #288]	; (8009b3c <RNSSet+0x368>)
 8009a1c:	2117      	movs	r1, #23
 8009a1e:	f7f9 feb9 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 021c 	add.w	r2, r3, #28
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	2118      	movs	r1, #24
 8009a30:	f7f9 feb0 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009a3e:	2308      	movs	r3, #8
 8009a40:	2119      	movs	r1, #25
 8009a42:	f7f9 fea7 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 8009a46:	7f3b      	ldrb	r3, [r7, #28]
 8009a48:	2b50      	cmp	r3, #80	; 0x50
 8009a4a:	d908      	bls.n	8009a5e <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009a56:	2308      	movs	r3, #8
 8009a58:	211a      	movs	r1, #26
 8009a5a:	f7f9 fe9b 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8009a5e:	7f3b      	ldrb	r3, [r7, #28]
 8009a60:	2b52      	cmp	r3, #82	; 0x52
 8009a62:	d908      	bls.n	8009a76 <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a6e:	2308      	movs	r3, #8
 8009a70:	211b      	movs	r1, #27
 8009a72:	f7f9 fe8f 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009a82:	e04d      	b.n	8009b20 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4a2e      	ldr	r2, [pc, #184]	; (8009b40 <RNSSet+0x36c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	dd46      	ble.n	8009b1a <RNSSet+0x346>
		{
			insData_send[0] = 17;
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <RNSSet+0x368>)
 8009a8e:	2211      	movs	r2, #17
 8009a90:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7e1a      	ldrb	r2, [r3, #24]
 8009a96:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <RNSSet+0x368>)
 8009a98:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <RNSSet+0x368>)
 8009aa2:	2117      	movs	r1, #23
 8009aa4:	f7f9 fe76 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f103 021c 	add.w	r2, r3, #28
 8009ab2:	2308      	movs	r3, #8
 8009ab4:	2118      	movs	r1, #24
 8009ab6:	f7f9 fe6d 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	2119      	movs	r1, #25
 8009ac8:	f7f9 fe64 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 8009acc:	7f3b      	ldrb	r3, [r7, #28]
 8009ace:	2b50      	cmp	r3, #80	; 0x50
 8009ad0:	d908      	bls.n	8009ae4 <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009adc:	2308      	movs	r3, #8
 8009ade:	211a      	movs	r1, #26
 8009ae0:	f7f9 fe58 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 8009ae4:	7f3b      	ldrb	r3, [r7, #28]
 8009ae6:	2b52      	cmp	r3, #82	; 0x52
 8009ae8:	d908      	bls.n	8009afc <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009af4:	2308      	movs	r3, #8
 8009af6:	211b      	movs	r1, #27
 8009af8:	f7f9 fe4c 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009afc:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <RNSSet+0x370>)
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	4a10      	ldr	r2, [pc, #64]	; (8009b44 <RNSSet+0x370>)
 8009b04:	43db      	mvns	r3, r3
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	09db      	lsrs	r3, r3, #7
 8009b0a:	b2d9      	uxtb	r1, r3
 8009b0c:	7853      	ldrb	r3, [r2, #1]
 8009b0e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009b12:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e002      	b.n	8009b20 <RNSSet+0x34c>
		}
		else
			wait++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d0ac      	beq.n	8009a84 <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b36:	b003      	add	sp, #12
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	2000a6b0 	.word	0x2000a6b0
 8009b40:	001e847f 	.word	0x001e847f
 8009b44:	40020814 	.word	0x40020814

08009b48 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	6039      	str	r1, [r7, #0]
 8009b52:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	79fa      	ldrb	r2, [r7, #7]
 8009b58:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8009b82:	4b3b      	ldr	r3, [pc, #236]	; (8009c70 <RNSEnquire+0x128>)
 8009b84:	2211      	movs	r2, #17
 8009b86:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	791a      	ldrb	r2, [r3, #4]
 8009b8c:	4b38      	ldr	r3, [pc, #224]	; (8009c70 <RNSEnquire+0x128>)
 8009b8e:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	2302      	movs	r3, #2
 8009b96:	4a36      	ldr	r2, [pc, #216]	; (8009c70 <RNSEnquire+0x128>)
 8009b98:	2117      	movs	r1, #23
 8009b9a:	f7f9 fdfb 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f103 0208 	add.w	r2, r3, #8
 8009ba8:	2308      	movs	r3, #8
 8009baa:	2118      	movs	r1, #24
 8009bac:	f7f9 fdf2 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	f103 0210 	add.w	r2, r3, #16
 8009bba:	2308      	movs	r3, #8
 8009bbc:	2119      	movs	r1, #25
 8009bbe:	f7f9 fde9 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009bc6:	e035      	b.n	8009c34 <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4a2a      	ldr	r2, [pc, #168]	; (8009c74 <RNSEnquire+0x12c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	dd2e      	ble.n	8009c2e <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 8009bd0:	4b27      	ldr	r3, [pc, #156]	; (8009c70 <RNSEnquire+0x128>)
 8009bd2:	2211      	movs	r2, #17
 8009bd4:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	791a      	ldrb	r2, [r3, #4]
 8009bda:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <RNSEnquire+0x128>)
 8009bdc:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	2302      	movs	r3, #2
 8009be4:	4a22      	ldr	r2, [pc, #136]	; (8009c70 <RNSEnquire+0x128>)
 8009be6:	2117      	movs	r1, #23
 8009be8:	f7f9 fdd4 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	f103 0208 	add.w	r2, r3, #8
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	2118      	movs	r1, #24
 8009bfa:	f7f9 fdcb 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f103 0210 	add.w	r2, r3, #16
 8009c08:	2308      	movs	r3, #8
 8009c0a:	2119      	movs	r1, #25
 8009c0c:	f7f9 fdc2 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 8009c10:	4b19      	ldr	r3, [pc, #100]	; (8009c78 <RNSEnquire+0x130>)
 8009c12:	785b      	ldrb	r3, [r3, #1]
 8009c14:	b25b      	sxtb	r3, r3
 8009c16:	4a18      	ldr	r2, [pc, #96]	; (8009c78 <RNSEnquire+0x130>)
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	09db      	lsrs	r3, r3, #7
 8009c1e:	b2d9      	uxtb	r1, r3
 8009c20:	7853      	ldrb	r3, [r2, #1]
 8009c22:	f361 13c7 	bfi	r3, r1, #7, #1
 8009c26:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e002      	b.n	8009c34 <RNSEnquire+0xec>
		}
		else wait++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d0c4      	beq.n	8009bc8 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	79fa      	ldrb	r2, [r7, #7]
 8009c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 8009c66:	2301      	movs	r3, #1
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	2000a6b0 	.word	0x2000a6b0
 8009c74:	001e847f 	.word	0x001e847f
 8009c78:	40020814 	.word	0x40020814

08009c7c <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08c      	sub	sp, #48	; 0x30
 8009c80:	af02      	add	r7, sp, #8
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c8a:	f107 0318 	add.w	r3, r7, #24
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	605a      	str	r2, [r3, #4]
 8009c94:	609a      	str	r2, [r3, #8]
 8009c96:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c98:	f107 0310 	add.w	r3, r7, #16
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4a6d      	ldr	r2, [pc, #436]	; (8009e5c <ServoxInit+0x1e0>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d106      	bne.n	8009cb8 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a6c      	ldr	r2, [pc, #432]	; (8009e60 <ServoxInit+0x1e4>)
 8009cae:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	22a7      	movs	r2, #167	; 0xa7
 8009cb4:	605a      	str	r2, [r3, #4]
 8009cb6:	e078      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4a6a      	ldr	r2, [pc, #424]	; (8009e64 <ServoxInit+0x1e8>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d107      	bne.n	8009cd0 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009cc6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2253      	movs	r2, #83	; 0x53
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	e06c      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4a65      	ldr	r2, [pc, #404]	; (8009e68 <ServoxInit+0x1ec>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d106      	bne.n	8009ce6 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	4a64      	ldr	r2, [pc, #400]	; (8009e6c <ServoxInit+0x1f0>)
 8009cdc:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2253      	movs	r2, #83	; 0x53
 8009ce2:	605a      	str	r2, [r3, #4]
 8009ce4:	e061      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	4a61      	ldr	r2, [pc, #388]	; (8009e70 <ServoxInit+0x1f4>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d106      	bne.n	8009cfc <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	4a60      	ldr	r2, [pc, #384]	; (8009e74 <ServoxInit+0x1f8>)
 8009cf2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2253      	movs	r2, #83	; 0x53
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	e056      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4a5e      	ldr	r2, [pc, #376]	; (8009e78 <ServoxInit+0x1fc>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d106      	bne.n	8009d12 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4a5d      	ldr	r2, [pc, #372]	; (8009e7c <ServoxInit+0x200>)
 8009d08:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2253      	movs	r2, #83	; 0x53
 8009d0e:	605a      	str	r2, [r3, #4]
 8009d10:	e04b      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4a5a      	ldr	r2, [pc, #360]	; (8009e80 <ServoxInit+0x204>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d106      	bne.n	8009d28 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4a59      	ldr	r2, [pc, #356]	; (8009e84 <ServoxInit+0x208>)
 8009d1e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	22a7      	movs	r2, #167	; 0xa7
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	e040      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4a57      	ldr	r2, [pc, #348]	; (8009e88 <ServoxInit+0x20c>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d106      	bne.n	8009d3e <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4a56      	ldr	r2, [pc, #344]	; (8009e8c <ServoxInit+0x210>)
 8009d34:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	22a7      	movs	r2, #167	; 0xa7
 8009d3a:	605a      	str	r2, [r3, #4]
 8009d3c:	e035      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4a53      	ldr	r2, [pc, #332]	; (8009e90 <ServoxInit+0x214>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d106      	bne.n	8009d54 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4a52      	ldr	r2, [pc, #328]	; (8009e94 <ServoxInit+0x218>)
 8009d4a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	22a7      	movs	r2, #167	; 0xa7
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	e02a      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4a50      	ldr	r2, [pc, #320]	; (8009e98 <ServoxInit+0x21c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d106      	bne.n	8009d6a <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4a4f      	ldr	r2, [pc, #316]	; (8009e9c <ServoxInit+0x220>)
 8009d60:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	22a7      	movs	r2, #167	; 0xa7
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	e01f      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	4a4c      	ldr	r2, [pc, #304]	; (8009ea0 <ServoxInit+0x224>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d106      	bne.n	8009d80 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4a4b      	ldr	r2, [pc, #300]	; (8009ea4 <ServoxInit+0x228>)
 8009d76:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2253      	movs	r2, #83	; 0x53
 8009d7c:	605a      	str	r2, [r3, #4]
 8009d7e:	e014      	b.n	8009daa <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4a49      	ldr	r2, [pc, #292]	; (8009ea8 <ServoxInit+0x22c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d106      	bne.n	8009d96 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4a48      	ldr	r2, [pc, #288]	; (8009eac <ServoxInit+0x230>)
 8009d8c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2253      	movs	r2, #83	; 0x53
 8009d92:	605a      	str	r2, [r3, #4]
 8009d94:	e009      	b.n	8009daa <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4a45      	ldr	r2, [pc, #276]	; (8009eb0 <ServoxInit+0x234>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d105      	bne.n	8009daa <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4a44      	ldr	r2, [pc, #272]	; (8009eb4 <ServoxInit+0x238>)
 8009da2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2253      	movs	r2, #83	; 0x53
 8009da8:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009db6:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2280      	movs	r2, #128	; 0x80
 8009dc2:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8009dc4:	68b8      	ldr	r0, [r7, #8]
 8009dc6:	f00b f82f 	bl	8014e28 <HAL_TIM_Base_Init>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <ServoxInit+0x158>
		  {
		    Error_Handler();
 8009dd0:	f7fa fc24 	bl	800461c <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd8:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8009dda:	f107 0318 	add.w	r3, r7, #24
 8009dde:	4619      	mov	r1, r3
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	f00b fb95 	bl	8015510 <HAL_TIM_ConfigClockSource>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <ServoxInit+0x174>
		  {
		    Error_Handler();
 8009dec:	f7fa fc16 	bl	800461c <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8009df0:	68b8      	ldr	r0, [r7, #8]
 8009df2:	f00b f88c 	bl	8014f0e <HAL_TIM_PWM_Init>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <ServoxInit+0x184>
			{
				Error_Handler();
 8009dfc:	f7fa fc0e 	bl	800461c <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e00:	2300      	movs	r3, #0
 8009e02:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8009e08:	f107 0310 	add.w	r3, r7, #16
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	68b8      	ldr	r0, [r7, #8]
 8009e10:	f00b ff7a 	bl	8015d08 <HAL_TIMEx_MasterConfigSynchronization>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <ServoxInit+0x1a2>
		{
			Error_Handler();
 8009e1a:	f7fa fbff 	bl	800461c <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f00b f82d 	bl	8014e7e <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009e24:	8879      	ldrh	r1, [r7, #2]
 8009e26:	2301      	movs	r3, #1
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7f7 fa66 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3e:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8009e40:	887b      	ldrh	r3, [r7, #2]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e46:	68b8      	ldr	r0, [r7, #8]
 8009e48:	f7f7 fc3a 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	3728      	adds	r7, #40	; 0x28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20005f34 	.word	0x20005f34
 8009e60:	40010000 	.word	0x40010000
 8009e64:	20006038 	.word	0x20006038
 8009e68:	20005ce8 	.word	0x20005ce8
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	20005b24 	.word	0x20005b24
 8009e74:	40000800 	.word	0x40000800
 8009e78:	20005ca8 	.word	0x20005ca8
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	20005ae4 	.word	0x20005ae4
 8009e84:	40010400 	.word	0x40010400
 8009e88:	20005f74 	.word	0x20005f74
 8009e8c:	40014000 	.word	0x40014000
 8009e90:	20005c04 	.word	0x20005c04
 8009e94:	40014400 	.word	0x40014400
 8009e98:	20005e4c 	.word	0x20005e4c
 8009e9c:	40014800 	.word	0x40014800
 8009ea0:	20006158 	.word	0x20006158
 8009ea4:	40001800 	.word	0x40001800
 8009ea8:	20005dcc 	.word	0x20005dcc
 8009eac:	40001c00 	.word	0x40001c00
 8009eb0:	20006118 	.word	0x20006118
 8009eb4:	40002000 	.word	0x40002000

08009eb8 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d204      	bcs.n	8009ed6 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	695a      	ldr	r2, [r3, #20]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	621a      	str	r2, [r3, #32]
 8009ed4:	e00c      	b.n	8009ef0 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d904      	bls.n	8009eea <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699a      	ldr	r2, [r3, #24]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	621a      	str	r2, [r3, #32]
 8009ee8:	e002      	b.n	8009ef0 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d106      	bne.n	8009f06 <ServoSetPulse+0x4e>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6a12      	ldr	r2, [r2, #32]
 8009f02:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009f04:	e01b      	b.n	8009f3e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d106      	bne.n	8009f1c <ServoSetPulse+0x64>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009f1a:	e010      	b.n	8009f3e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d106      	bne.n	8009f32 <ServoSetPulse+0x7a>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009f30:	e005      	b.n	8009f3e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	619a      	str	r2, [r3, #24]
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8009f74:	4802      	ldr	r0, [pc, #8]	; (8009f80 <SPI1_IRQHandler+0x10>)
 8009f76:	f00a fe39 	bl	8014bec <HAL_SPI_IRQHandler>
}
 8009f7a:	bf00      	nop
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20009c5c 	.word	0x20009c5c

08009f84 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8009f88:	4802      	ldr	r0, [pc, #8]	; (8009f94 <SPI2_IRQHandler+0x10>)
 8009f8a:	f00a fe2f 	bl	8014bec <HAL_SPI_IRQHandler>
}
 8009f8e:	bf00      	nop
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	200068bc 	.word	0x200068bc

08009f98 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8009f9c:	4802      	ldr	r0, [pc, #8]	; (8009fa8 <SPI3_IRQHandler+0x10>)
 8009f9e:	f00a fe25 	bl	8014bec <HAL_SPI_IRQHandler>
}
 8009fa2:	bf00      	nop
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20007784 	.word	0x20007784

08009fac <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009fb2:	f006 fa45 	bl	8010440 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8009fb6:	f7f8 ff13 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009fba:	2301      	movs	r3, #1
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009fc6:	48c6      	ldr	r0, [pc, #792]	; (800a2e0 <Initialize+0x334>)
 8009fc8:	f7f7 f99a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009fcc:	2301      	movs	r3, #1
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fd8:	48c1      	ldr	r0, [pc, #772]	; (800a2e0 <Initialize+0x334>)
 8009fda:	f7f7 f991 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009fde:	2301      	movs	r3, #1
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fea:	48bd      	ldr	r0, [pc, #756]	; (800a2e0 <Initialize+0x334>)
 8009fec:	f7f7 f988 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2180      	movs	r1, #128	; 0x80
 8009ffa:	48ba      	ldr	r0, [pc, #744]	; (800a2e4 <Initialize+0x338>)
 8009ffc:	f7f7 f980 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a000:	2301      	movs	r3, #1
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2302      	movs	r3, #2
 800a006:	2200      	movs	r2, #0
 800a008:	2101      	movs	r1, #1
 800a00a:	48b7      	ldr	r0, [pc, #732]	; (800a2e8 <Initialize+0x33c>)
 800a00c:	f7f7 f978 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a010:	2301      	movs	r3, #1
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2301      	movs	r3, #1
 800a016:	2200      	movs	r2, #0
 800a018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a01c:	48b2      	ldr	r0, [pc, #712]	; (800a2e8 <Initialize+0x33c>)
 800a01e:	f7f7 f96f 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a022:	2301      	movs	r3, #1
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	2301      	movs	r3, #1
 800a028:	2200      	movs	r2, #0
 800a02a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a02e:	48ae      	ldr	r0, [pc, #696]	; (800a2e8 <Initialize+0x33c>)
 800a030:	f7f7 f966 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a034:	2301      	movs	r3, #1
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2301      	movs	r3, #1
 800a03a:	2200      	movs	r2, #0
 800a03c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a040:	48a9      	ldr	r0, [pc, #676]	; (800a2e8 <Initialize+0x33c>)
 800a042:	f7f7 f95d 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a046:	2301      	movs	r3, #1
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	2301      	movs	r3, #1
 800a04c:	2200      	movs	r2, #0
 800a04e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a052:	48a5      	ldr	r0, [pc, #660]	; (800a2e8 <Initialize+0x33c>)
 800a054:	f7f7 f954 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a058:	2301      	movs	r3, #1
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	2301      	movs	r3, #1
 800a05e:	2200      	movs	r2, #0
 800a060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a064:	489f      	ldr	r0, [pc, #636]	; (800a2e4 <Initialize+0x338>)
 800a066:	f7f7 f94b 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a06a:	2301      	movs	r3, #1
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	2301      	movs	r3, #1
 800a070:	2200      	movs	r2, #0
 800a072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a076:	489b      	ldr	r0, [pc, #620]	; (800a2e4 <Initialize+0x338>)
 800a078:	f7f7 f942 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a07c:	2301      	movs	r3, #1
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	2301      	movs	r3, #1
 800a082:	2200      	movs	r2, #0
 800a084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a088:	4898      	ldr	r0, [pc, #608]	; (800a2ec <Initialize+0x340>)
 800a08a:	f7f7 f939 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a08e:	2301      	movs	r3, #1
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	2301      	movs	r3, #1
 800a094:	2200      	movs	r2, #0
 800a096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a09a:	4894      	ldr	r0, [pc, #592]	; (800a2ec <Initialize+0x340>)
 800a09c:	f7f7 f930 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0ac:	488c      	ldr	r0, [pc, #560]	; (800a2e0 <Initialize+0x334>)
 800a0ae:	f7f7 f927 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0be:	488c      	ldr	r0, [pc, #560]	; (800a2f0 <Initialize+0x344>)
 800a0c0:	f7f7 f91e 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2108      	movs	r1, #8
 800a0ce:	4887      	ldr	r0, [pc, #540]	; (800a2ec <Initialize+0x340>)
 800a0d0:	f7f7 f916 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	2301      	movs	r3, #1
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2110      	movs	r1, #16
 800a0de:	4883      	ldr	r0, [pc, #524]	; (800a2ec <Initialize+0x340>)
 800a0e0:	f7f7 f90e 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2180      	movs	r1, #128	; 0x80
 800a0ee:	487f      	ldr	r0, [pc, #508]	; (800a2ec <Initialize+0x340>)
 800a0f0:	f7f7 f906 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2120      	movs	r1, #32
 800a0fe:	4879      	ldr	r0, [pc, #484]	; (800a2e4 <Initialize+0x338>)
 800a100:	f7f7 f8fe 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a104:	2301      	movs	r3, #1
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	2301      	movs	r3, #1
 800a10a:	2200      	movs	r2, #0
 800a10c:	2140      	movs	r1, #64	; 0x40
 800a10e:	4875      	ldr	r0, [pc, #468]	; (800a2e4 <Initialize+0x338>)
 800a110:	f7f7 f8f6 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a114:	2301      	movs	r3, #1
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	2301      	movs	r3, #1
 800a11a:	2200      	movs	r2, #0
 800a11c:	2101      	movs	r1, #1
 800a11e:	4870      	ldr	r0, [pc, #448]	; (800a2e0 <Initialize+0x334>)
 800a120:	f7f7 f8ee 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a124:	2301      	movs	r3, #1
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2301      	movs	r3, #1
 800a12a:	2200      	movs	r2, #0
 800a12c:	2102      	movs	r1, #2
 800a12e:	486c      	ldr	r0, [pc, #432]	; (800a2e0 <Initialize+0x334>)
 800a130:	f7f7 f8e6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a134:	2301      	movs	r3, #1
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2301      	movs	r3, #1
 800a13a:	2200      	movs	r2, #0
 800a13c:	2104      	movs	r1, #4
 800a13e:	4868      	ldr	r0, [pc, #416]	; (800a2e0 <Initialize+0x334>)
 800a140:	f7f7 f8de 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a144:	2301      	movs	r3, #1
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	2301      	movs	r3, #1
 800a14a:	2200      	movs	r2, #0
 800a14c:	2108      	movs	r1, #8
 800a14e:	4864      	ldr	r0, [pc, #400]	; (800a2e0 <Initialize+0x334>)
 800a150:	f7f7 f8d6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a154:	2301      	movs	r3, #1
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	2301      	movs	r3, #1
 800a15a:	2200      	movs	r2, #0
 800a15c:	2110      	movs	r1, #16
 800a15e:	4860      	ldr	r0, [pc, #384]	; (800a2e0 <Initialize+0x334>)
 800a160:	f7f7 f8ce 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800a164:	2301      	movs	r3, #1
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2301      	movs	r3, #1
 800a16a:	2200      	movs	r2, #0
 800a16c:	2120      	movs	r1, #32
 800a16e:	485c      	ldr	r0, [pc, #368]	; (800a2e0 <Initialize+0x334>)
 800a170:	f7f7 f8c6 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800a174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a178:	9303      	str	r3, [sp, #12]
 800a17a:	4b5b      	ldr	r3, [pc, #364]	; (800a2e8 <Initialize+0x33c>)
 800a17c:	9302      	str	r3, [sp, #8]
 800a17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	4b58      	ldr	r3, [pc, #352]	; (800a2e8 <Initialize+0x33c>)
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	4a57      	ldr	r2, [pc, #348]	; (800a2e8 <Initialize+0x33c>)
 800a18c:	2101      	movs	r1, #1
 800a18e:	4859      	ldr	r0, [pc, #356]	; (800a2f4 <Initialize+0x348>)
 800a190:	f7f7 fe0a 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a194:	2003      	movs	r0, #3
 800a196:	f007 f912 	bl	80113be <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800a19a:	4b57      	ldr	r3, [pc, #348]	; (800a2f8 <Initialize+0x34c>)
 800a19c:	2208      	movs	r2, #8
 800a19e:	4957      	ldr	r1, [pc, #348]	; (800a2fc <Initialize+0x350>)
 800a1a0:	4857      	ldr	r0, [pc, #348]	; (800a300 <Initialize+0x354>)
 800a1a2:	f7f9 fd5f 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4a56      	ldr	r2, [pc, #344]	; (800a304 <Initialize+0x358>)
 800a1aa:	2108      	movs	r1, #8
 800a1ac:	4856      	ldr	r0, [pc, #344]	; (800a308 <Initialize+0x35c>)
 800a1ae:	f7f9 fca7 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800a1b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a1b6:	4955      	ldr	r1, [pc, #340]	; (800a30c <Initialize+0x360>)
 800a1b8:	4855      	ldr	r0, [pc, #340]	; (800a310 <Initialize+0x364>)
 800a1ba:	f7f9 f91f 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a1c4:	4853      	ldr	r0, [pc, #332]	; (800a314 <Initialize+0x368>)
 800a1c6:	f7f9 f811 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a1d0:	4851      	ldr	r0, [pc, #324]	; (800a318 <Initialize+0x36c>)
 800a1d2:	f7f9 f80b 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a1dc:	484f      	ldr	r0, [pc, #316]	; (800a31c <Initialize+0x370>)
 800a1de:	f7f9 f805 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800a1e2:	484f      	ldr	r0, [pc, #316]	; (800a320 <Initialize+0x374>)
 800a1e4:	f7f7 fbf8 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800a1e8:	484e      	ldr	r0, [pc, #312]	; (800a324 <Initialize+0x378>)
 800a1ea:	f7f7 fbf5 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800a1ee:	484e      	ldr	r0, [pc, #312]	; (800a328 <Initialize+0x37c>)
 800a1f0:	f7f7 fbf2 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9302      	str	r3, [sp, #8]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	2200      	movs	r2, #0
 800a204:	2104      	movs	r1, #4
 800a206:	4849      	ldr	r0, [pc, #292]	; (800a32c <Initialize+0x380>)
 800a208:	f7f9 fa04 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800a20c:	2300      	movs	r3, #0
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	230e      	movs	r3, #14
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	2201      	movs	r2, #1
 800a21c:	2104      	movs	r1, #4
 800a21e:	4844      	ldr	r0, [pc, #272]	; (800a330 <Initialize+0x384>)
 800a220:	f7f9 f9f8 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800a224:	2253      	movs	r2, #83	; 0x53
 800a226:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a22a:	4842      	ldr	r0, [pc, #264]	; (800a334 <Initialize+0x388>)
 800a22c:	f7f7 f962 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800a230:	2301      	movs	r3, #1
 800a232:	4a2c      	ldr	r2, [pc, #176]	; (800a2e4 <Initialize+0x338>)
 800a234:	2108      	movs	r1, #8
 800a236:	483f      	ldr	r0, [pc, #252]	; (800a334 <Initialize+0x388>)
 800a238:	f7f7 fa42 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800a23c:	2302      	movs	r3, #2
 800a23e:	4a29      	ldr	r2, [pc, #164]	; (800a2e4 <Initialize+0x338>)
 800a240:	210c      	movs	r1, #12
 800a242:	483c      	ldr	r0, [pc, #240]	; (800a334 <Initialize+0x388>)
 800a244:	f7f7 fa3c 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800a248:	2253      	movs	r2, #83	; 0x53
 800a24a:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a24e:	483a      	ldr	r0, [pc, #232]	; (800a338 <Initialize+0x38c>)
 800a250:	f7f7 f950 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800a254:	2301      	movs	r3, #1
 800a256:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <Initialize+0x344>)
 800a258:	2100      	movs	r1, #0
 800a25a:	4837      	ldr	r0, [pc, #220]	; (800a338 <Initialize+0x38c>)
 800a25c:	f7f7 fa30 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800a260:	2302      	movs	r3, #2
 800a262:	4a23      	ldr	r2, [pc, #140]	; (800a2f0 <Initialize+0x344>)
 800a264:	2104      	movs	r1, #4
 800a266:	4834      	ldr	r0, [pc, #208]	; (800a338 <Initialize+0x38c>)
 800a268:	f7f7 fa2a 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800a26c:	2304      	movs	r3, #4
 800a26e:	4a20      	ldr	r2, [pc, #128]	; (800a2f0 <Initialize+0x344>)
 800a270:	2108      	movs	r1, #8
 800a272:	4831      	ldr	r0, [pc, #196]	; (800a338 <Initialize+0x38c>)
 800a274:	f7f7 fa24 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800a278:	2308      	movs	r3, #8
 800a27a:	4a1d      	ldr	r2, [pc, #116]	; (800a2f0 <Initialize+0x344>)
 800a27c:	210c      	movs	r1, #12
 800a27e:	482e      	ldr	r0, [pc, #184]	; (800a338 <Initialize+0x38c>)
 800a280:	f7f7 fa1e 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800a284:	22a7      	movs	r2, #167	; 0xa7
 800a286:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800a28a:	482c      	ldr	r0, [pc, #176]	; (800a33c <Initialize+0x390>)
 800a28c:	f7f7 f932 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800a290:	2320      	movs	r3, #32
 800a292:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <Initialize+0x33c>)
 800a294:	2100      	movs	r1, #0
 800a296:	4829      	ldr	r0, [pc, #164]	; (800a33c <Initialize+0x390>)
 800a298:	f7f7 fa12 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	4a12      	ldr	r2, [pc, #72]	; (800a2e8 <Initialize+0x33c>)
 800a2a0:	2104      	movs	r1, #4
 800a2a2:	4826      	ldr	r0, [pc, #152]	; (800a33c <Initialize+0x390>)
 800a2a4:	f7f7 fa0c 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800a2a8:	2380      	movs	r3, #128	; 0x80
 800a2aa:	9302      	str	r3, [sp, #8]
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	4b23      	ldr	r3, [pc, #140]	; (800a340 <Initialize+0x394>)
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	220c      	movs	r2, #12
 800a2b8:	491e      	ldr	r1, [pc, #120]	; (800a334 <Initialize+0x388>)
 800a2ba:	4822      	ldr	r0, [pc, #136]	; (800a344 <Initialize+0x398>)
 800a2bc:	f7f6 fedc 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800a2c0:	2320      	movs	r3, #32
 800a2c2:	9302      	str	r3, [sp, #8]
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	4b1d      	ldr	r3, [pc, #116]	; (800a340 <Initialize+0x394>)
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	4918      	ldr	r1, [pc, #96]	; (800a334 <Initialize+0x388>)
 800a2d2:	481d      	ldr	r0, [pc, #116]	; (800a348 <Initialize+0x39c>)
 800a2d4:	f7f6 fed0 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800a2d8:	2308      	movs	r3, #8
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	2304      	movs	r3, #4
 800a2de:	e035      	b.n	800a34c <Initialize+0x3a0>
 800a2e0:	40020800 	.word	0x40020800
 800a2e4:	40020400 	.word	0x40020400
 800a2e8:	40021000 	.word	0x40021000
 800a2ec:	40020c00 	.word	0x40020c00
 800a2f0:	40020000 	.word	0x40020000
 800a2f4:	200095ac 	.word	0x200095ac
 800a2f8:	00061a80 	.word	0x00061a80
 800a2fc:	20009fc0 	.word	0x20009fc0
 800a300:	20006b90 	.word	0x20006b90
 800a304:	000186a0 	.word	0x000186a0
 800a308:	20006bec 	.word	0x20006bec
 800a30c:	20005a80 	.word	0x20005a80
 800a310:	20006078 	.word	0x20006078
 800a314:	20005bc4 	.word	0x20005bc4
 800a318:	20005ff8 	.word	0x20005ff8
 800a31c:	20005d2c 	.word	0x20005d2c
 800a320:	20005f34 	.word	0x20005f34
 800a324:	20005b24 	.word	0x20005b24
 800a328:	20005ae4 	.word	0x20005ae4
 800a32c:	20009f44 	.word	0x20009f44
 800a330:	20009008 	.word	0x20009008
 800a334:	20005ce8 	.word	0x20005ce8
 800a338:	20005ca8 	.word	0x20005ca8
 800a33c:	20005f74 	.word	0x20005f74
 800a340:	200095c8 	.word	0x200095c8
 800a344:	2000a550 	.word	0x2000a550
 800a348:	20007714 	.word	0x20007714
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	4b23      	ldr	r3, [pc, #140]	; (800a3dc <Initialize+0x430>)
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	2300      	movs	r3, #0
 800a354:	2200      	movs	r2, #0
 800a356:	4922      	ldr	r1, [pc, #136]	; (800a3e0 <Initialize+0x434>)
 800a358:	4822      	ldr	r0, [pc, #136]	; (800a3e4 <Initialize+0x438>)
 800a35a:	f7f6 fe8d 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800a35e:	2302      	movs	r3, #2
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	2301      	movs	r3, #1
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <Initialize+0x430>)
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	2300      	movs	r3, #0
 800a36c:	2204      	movs	r2, #4
 800a36e:	491c      	ldr	r1, [pc, #112]	; (800a3e0 <Initialize+0x434>)
 800a370:	481d      	ldr	r0, [pc, #116]	; (800a3e8 <Initialize+0x43c>)
 800a372:	f7f6 fe81 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a376:	2380      	movs	r3, #128	; 0x80
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	2340      	movs	r3, #64	; 0x40
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <Initialize+0x440>)
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	220c      	movs	r2, #12
 800a386:	491a      	ldr	r1, [pc, #104]	; (800a3f0 <Initialize+0x444>)
 800a388:	481a      	ldr	r0, [pc, #104]	; (800a3f4 <Initialize+0x448>)
 800a38a:	f7f6 fe75 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800a38e:	2320      	movs	r3, #32
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	2310      	movs	r3, #16
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <Initialize+0x440>)
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	2208      	movs	r2, #8
 800a39e:	4914      	ldr	r1, [pc, #80]	; (800a3f0 <Initialize+0x444>)
 800a3a0:	4815      	ldr	r0, [pc, #84]	; (800a3f8 <Initialize+0x44c>)
 800a3a2:	f7f6 fe69 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <Initialize+0x440>)
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	490e      	ldr	r1, [pc, #56]	; (800a3f0 <Initialize+0x444>)
 800a3b8:	4810      	ldr	r0, [pc, #64]	; (800a3fc <Initialize+0x450>)
 800a3ba:	f7f6 fe5d 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800a3be:	2302      	movs	r3, #2
 800a3c0:	9302      	str	r3, [sp, #8]
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <Initialize+0x440>)
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4908      	ldr	r1, [pc, #32]	; (800a3f0 <Initialize+0x444>)
 800a3d0:	480b      	ldr	r0, [pc, #44]	; (800a400 <Initialize+0x454>)
 800a3d2:	f7f6 fe51 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800a3d6:	bf00      	nop
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	200095c8 	.word	0x200095c8
 800a3e0:	20005f74 	.word	0x20005f74
 800a3e4:	20006c4c 	.word	0x20006c4c
 800a3e8:	20009688 	.word	0x20009688
 800a3ec:	200095c4 	.word	0x200095c4
 800a3f0:	20005ca8 	.word	0x20005ca8
 800a3f4:	2000a3cc 	.word	0x2000a3cc
 800a3f8:	20009708 	.word	0x20009708
 800a3fc:	2000972c 	.word	0x2000972c
 800a400:	2000732c 	.word	0x2000732c

0800a404 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800a408:	4802      	ldr	r0, [pc, #8]	; (800a414 <CAN1_RX0_IRQHandler+0x10>)
 800a40a:	f006 fcc3 	bl	8010d94 <HAL_CAN_IRQHandler>

}
 800a40e:	bf00      	nop
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20009f44 	.word	0x20009f44

0800a418 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a41c:	4802      	ldr	r0, [pc, #8]	; (800a428 <CAN2_RX1_IRQHandler+0x10>)
 800a41e:	f006 fcb9 	bl	8010d94 <HAL_CAN_IRQHandler>

}
 800a422:	bf00      	nop
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20009008 	.word	0x20009008

0800a42c <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d008      	beq.n	800a44e <CAN_PROCESS+0x22>
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	dc36      	bgt.n	800a4ae <CAN_PROCESS+0x82>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d007      	beq.n	800a454 <CAN_PROCESS+0x28>
 800a444:	2b01      	cmp	r3, #1
 800a446:	d132      	bne.n	800a4ae <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800a448:	f003 f8c4 	bl	800d5d4 <decode_VESC>
		break;
 800a44c:	e02f      	b.n	800a4ae <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800a44e:	f7fa fe89 	bl	8005164 <OdriveCAN_Handler>
		break;
 800a452:	e02c      	b.n	800a4ae <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800a454:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d107      	bne.n	800a46c <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800a45c:	4b16      	ldr	r3, [pc, #88]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a45e:	785a      	ldrb	r2, [r3, #1]
 800a460:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <CAN_PROCESS+0x90>)
 800a462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a468:	2202      	movs	r2, #2
 800a46a:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800a46c:	4b12      	ldr	r3, [pc, #72]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b11      	cmp	r3, #17
 800a472:	d11b      	bne.n	800a4ac <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800a474:	4b12      	ldr	r3, [pc, #72]	; (800a4c0 <CAN_PROCESS+0x94>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d117      	bne.n	800a4ac <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a47e:	785a      	ldrb	r2, [r3, #1]
 800a480:	4b0e      	ldr	r3, [pc, #56]	; (800a4bc <CAN_PROCESS+0x90>)
 800a482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800a486:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <CAN_PROCESS+0x98>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a0c      	ldr	r2, [pc, #48]	; (800a4bc <CAN_PROCESS+0x90>)
 800a48c:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <CAN_PROCESS+0x98>)
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	4a0a      	ldr	r2, [pc, #40]	; (800a4bc <CAN_PROCESS+0x90>)
 800a494:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <CAN_PROCESS+0x9c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a08      	ldr	r2, [pc, #32]	; (800a4bc <CAN_PROCESS+0x90>)
 800a49c:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800a49e:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <CAN_PROCESS+0x9c>)
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	4a06      	ldr	r2, [pc, #24]	; (800a4bc <CAN_PROCESS+0x90>)
 800a4a4:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800a4a6:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <CAN_PROCESS+0x8c>)
 800a4a8:	2203      	movs	r2, #3
 800a4aa:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800a4ac:	bf00      	nop
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20006a44 	.word	0x20006a44
 800a4bc:	20008f10 	.word	0x20008f10
 800a4c0:	200002d0 	.word	0x200002d0
 800a4c4:	20009c48 	.word	0x20009c48
 800a4c8:	20009da8 	.word	0x20009da8

0800a4cc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a4cc:	b5b0      	push	{r4, r5, r7, lr}
 800a4ce:	b08c      	sub	sp, #48	; 0x30
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4aaa      	ldr	r2, [pc, #680]	; (800a788 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	f040 80b4 	bne.w	800a64c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a4e4:	f107 030c 	add.w	r3, r7, #12
 800a4e8:	4aa8      	ldr	r2, [pc, #672]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f006 fb19 	bl	8010b24 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a4f2:	4ba6      	ldr	r3, [pc, #664]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d118      	bne.n	800a52c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a4fa:	4aa5      	ldr	r2, [pc, #660]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a4fc:	4ba3      	ldr	r3, [pc, #652]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a4fe:	4614      	mov	r4, r2
 800a500:	461d      	mov	r5, r3
 800a502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a50a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a50e:	4ba0      	ldr	r3, [pc, #640]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a510:	331c      	adds	r3, #28
 800a512:	f107 020c 	add.w	r2, r7, #12
 800a516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a51a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a51e:	489c      	ldr	r0, [pc, #624]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a520:	f003 f8c6 	bl	800d6b0 <set_rx_frames>
			source = VESC_PACKET;
 800a524:	2301      	movs	r3, #1
 800a526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a52a:	e081      	b.n	800a630 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a532:	231f      	movs	r3, #31
 800a534:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a536:	4b95      	ldr	r3, [pc, #596]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	8b7b      	ldrh	r3, [r7, #26]
 800a53e:	4013      	ands	r3, r2
 800a540:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a542:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a546:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a548:	4b90      	ldr	r3, [pc, #576]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	8afb      	ldrh	r3, [r7, #22]
 800a550:	4013      	ands	r3, r2
 800a552:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a554:	8abb      	ldrh	r3, [r7, #20]
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a55e:	e016      	b.n	800a58e <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a560:	4b8c      	ldr	r3, [pc, #560]	; (800a794 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	8b1b      	ldrh	r3, [r3, #24]
 800a56e:	8aba      	ldrh	r2, [r7, #20]
 800a570:	429a      	cmp	r2, r3
 800a572:	d109      	bne.n	800a588 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800a574:	8b3b      	ldrh	r3, [r7, #24]
 800a576:	2b09      	cmp	r3, #9
 800a578:	d002      	beq.n	800a580 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800a57a:	8b3b      	ldrh	r3, [r7, #24]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d103      	bne.n	800a588 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a580:	2302      	movs	r3, #2
 800a582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a586:	e007      	b.n	800a598 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	3301      	adds	r3, #1
 800a58c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a58e:	4b82      	ldr	r3, [pc, #520]	; (800a798 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a594:	429a      	cmp	r2, r3
 800a596:	dbe3      	blt.n	800a560 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d112      	bne.n	800a5c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a5a0:	4a7e      	ldr	r2, [pc, #504]	; (800a79c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a5a2:	4b7a      	ldr	r3, [pc, #488]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a5b4:	4b75      	ldr	r3, [pc, #468]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a5b6:	691a      	ldr	r2, [r3, #16]
 800a5b8:	f107 030c 	add.w	r3, r7, #12
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4878      	ldr	r0, [pc, #480]	; (800a7a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a5c0:	f00f fa56 	bl	8019a70 <memcpy>
 800a5c4:	e034      	b.n	800a630 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a5c6:	4b71      	ldr	r3, [pc, #452]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b16      	cmp	r3, #22
 800a5cc:	d01b      	beq.n	800a606 <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800a5ce:	2b16      	cmp	r3, #22
 800a5d0:	d825      	bhi.n	800a61e <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800a5d2:	2b14      	cmp	r3, #20
 800a5d4:	d002      	beq.n	800a5dc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800a5d6:	2b15      	cmp	r3, #21
 800a5d8:	d00c      	beq.n	800a5f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800a5da:	e020      	b.n	800a61e <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a5dc:	4b6b      	ldr	r3, [pc, #428]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	486f      	ldr	r0, [pc, #444]	; (800a7a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a5e8:	f00f fa42 	bl	8019a70 <memcpy>
					buf2_flag = 0;
 800a5ec:	4b6e      	ldr	r3, [pc, #440]	; (800a7a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	701a      	strb	r2, [r3, #0]

					break;
 800a5f2:	e01d      	b.n	800a630 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a5f4:	4b65      	ldr	r3, [pc, #404]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	f107 030c 	add.w	r3, r7, #12
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	486b      	ldr	r0, [pc, #428]	; (800a7ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a600:	f00f fa36 	bl	8019a70 <memcpy>

					break;
 800a604:	e014      	b.n	800a630 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a606:	4b61      	ldr	r3, [pc, #388]	; (800a78c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	f107 030c 	add.w	r3, r7, #12
 800a60e:	4619      	mov	r1, r3
 800a610:	4867      	ldr	r0, [pc, #412]	; (800a7b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a612:	f00f fa2d 	bl	8019a70 <memcpy>
					buf2_flag = 1;
 800a616:	4b64      	ldr	r3, [pc, #400]	; (800a7a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
					break;
 800a61c:	e008      	b.n	800a630 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f9 fa3d 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a62e:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a630:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fef5 	bl	800a42c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a642:	2102      	movs	r1, #2
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f006 fb7f 	bl	8010d48 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800a64a:	e0cb      	b.n	800a7e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800a64c:	f107 030c 	add.w	r3, r7, #12
 800a650:	4a58      	ldr	r2, [pc, #352]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a652:	2100      	movs	r1, #0
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f006 fa65 	bl	8010b24 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a65a:	4b56      	ldr	r3, [pc, #344]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d118      	bne.n	800a694 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a662:	4a4b      	ldr	r2, [pc, #300]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a664:	4b53      	ldr	r3, [pc, #332]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a666:	4614      	mov	r4, r2
 800a668:	461d      	mov	r5, r3
 800a66a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a66c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a66e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a676:	4b46      	ldr	r3, [pc, #280]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a678:	331c      	adds	r3, #28
 800a67a:	f107 020c 	add.w	r2, r7, #12
 800a67e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a682:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a686:	4842      	ldr	r0, [pc, #264]	; (800a790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800a688:	f003 f812 	bl	800d6b0 <set_rx_frames>
			source = VESC_PACKET;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a692:	e09a      	b.n	800a7ca <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a694:	2300      	movs	r3, #0
 800a696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a69a:	231f      	movs	r3, #31
 800a69c:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a69e:	4b45      	ldr	r3, [pc, #276]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a6aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a6ae:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a6b0:	4b40      	ldr	r3, [pc, #256]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	8bfb      	ldrh	r3, [r7, #30]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a6bc:	8bbb      	ldrh	r3, [r7, #28]
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c6:	e016      	b.n	800a6f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a6c8:	4b32      	ldr	r3, [pc, #200]	; (800a794 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	8b1b      	ldrh	r3, [r3, #24]
 800a6d6:	8bba      	ldrh	r2, [r7, #28]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d109      	bne.n	800a6f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800a6dc:	8c3b      	ldrh	r3, [r7, #32]
 800a6de:	2b09      	cmp	r3, #9
 800a6e0:	d002      	beq.n	800a6e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800a6e2:	8c3b      	ldrh	r3, [r7, #32]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d103      	bne.n	800a6f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a6ee:	e007      	b.n	800a700 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f6:	4b28      	ldr	r3, [pc, #160]	; (800a798 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	dbe3      	blt.n	800a6c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800a700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a704:	2b02      	cmp	r3, #2
 800a706:	d112      	bne.n	800a72e <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800a708:	4a24      	ldr	r2, [pc, #144]	; (800a79c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800a70a:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a70c:	4614      	mov	r4, r2
 800a70e:	461d      	mov	r5, r3
 800a710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	f107 030c 	add.w	r3, r7, #12
 800a724:	4619      	mov	r1, r3
 800a726:	481e      	ldr	r0, [pc, #120]	; (800a7a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800a728:	f00f f9a2 	bl	8019a70 <memcpy>
 800a72c:	e04d      	b.n	800a7ca <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800a72e:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b16      	cmp	r3, #22
 800a734:	d01b      	beq.n	800a76e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800a736:	2b16      	cmp	r3, #22
 800a738:	d83e      	bhi.n	800a7b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800a73a:	2b14      	cmp	r3, #20
 800a73c:	d002      	beq.n	800a744 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800a73e:	2b15      	cmp	r3, #21
 800a740:	d00c      	beq.n	800a75c <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800a742:	e039      	b.n	800a7b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a744:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a746:	691a      	ldr	r2, [r3, #16]
 800a748:	f107 030c 	add.w	r3, r7, #12
 800a74c:	4619      	mov	r1, r3
 800a74e:	4815      	ldr	r0, [pc, #84]	; (800a7a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800a750:	f00f f98e 	bl	8019a70 <memcpy>
					buf2_flag = 0;
 800a754:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a756:	2200      	movs	r2, #0
 800a758:	701a      	strb	r2, [r3, #0]
					break;
 800a75a:	e036      	b.n	800a7ca <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800a75c:	4b15      	ldr	r3, [pc, #84]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	f107 030c 	add.w	r3, r7, #12
 800a764:	4619      	mov	r1, r3
 800a766:	4811      	ldr	r0, [pc, #68]	; (800a7ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800a768:	f00f f982 	bl	8019a70 <memcpy>
					break;
 800a76c:	e02d      	b.n	800a7ca <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800a76e:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	f107 030c 	add.w	r3, r7, #12
 800a776:	4619      	mov	r1, r3
 800a778:	480d      	ldr	r0, [pc, #52]	; (800a7b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800a77a:	f00f f979 	bl	8019a70 <memcpy>
					buf2_flag = 1;
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800a780:	2201      	movs	r2, #1
 800a782:	701a      	strb	r2, [r3, #0]
					break;
 800a784:	e021      	b.n	800a7ca <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800a786:	bf00      	nop
 800a788:	20009f44 	.word	0x20009f44
 800a78c:	2000a50c 	.word	0x2000a50c
 800a790:	200096d8 	.word	0x200096d8
 800a794:	2000a638 	.word	0x2000a638
 800a798:	200002c4 	.word	0x200002c4
 800a79c:	20006890 	.word	0x20006890
 800a7a0:	200068ac 	.word	0x200068ac
 800a7a4:	20006a44 	.word	0x20006a44
 800a7a8:	200002d0 	.word	0x200002d0
 800a7ac:	20009c48 	.word	0x20009c48
 800a7b0:	20009da8 	.word	0x20009da8
 800a7b4:	20006ac0 	.word	0x20006ac0
					rns_can = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a7be:	f107 030c 	add.w	r3, r7, #12
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f9 f970 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a7c8:	bf00      	nop
		if(rns_can)
 800a7ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d004      	beq.n	800a7dc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800a7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fe28 	bl	800a42c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a7dc:	2102      	movs	r1, #2
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f006 fab2 	bl	8010d48 <HAL_CAN_ActivateNotification>
}
 800a7e4:	bf00      	nop
 800a7e6:	3730      	adds	r7, #48	; 0x30
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bdb0      	pop	{r4, r5, r7, pc}

0800a7ec <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a7ec:	b5b0      	push	{r4, r5, r7, lr}
 800a7ee:	b08c      	sub	sp, #48	; 0x30
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4aaa      	ldr	r2, [pc, #680]	; (800aaa8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	f040 80b4 	bne.w	800a96c <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	4aa8      	ldr	r2, [pc, #672]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a80a:	2101      	movs	r1, #1
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f006 f989 	bl	8010b24 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800a812:	4ba6      	ldr	r3, [pc, #664]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	2b04      	cmp	r3, #4
 800a818:	d118      	bne.n	800a84c <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800a81a:	4aa5      	ldr	r2, [pc, #660]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a81c:	4ba3      	ldr	r3, [pc, #652]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a81e:	4614      	mov	r4, r2
 800a820:	461d      	mov	r5, r3
 800a822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a82a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a82e:	4ba0      	ldr	r3, [pc, #640]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a830:	331c      	adds	r3, #28
 800a832:	f107 020c 	add.w	r2, r7, #12
 800a836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a83a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a83e:	489c      	ldr	r0, [pc, #624]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a840:	f002 ff36 	bl	800d6b0 <set_rx_frames>
			source = VESC_PACKET;
 800a844:	2301      	movs	r3, #1
 800a846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a84a:	e081      	b.n	800a950 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a852:	231f      	movs	r3, #31
 800a854:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800a856:	4b95      	ldr	r3, [pc, #596]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	8b7b      	ldrh	r3, [r7, #26]
 800a85e:	4013      	ands	r3, r2
 800a860:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a862:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a866:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800a868:	4b90      	ldr	r3, [pc, #576]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	8afb      	ldrh	r3, [r7, #22]
 800a870:	4013      	ands	r3, r2
 800a872:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800a874:	8abb      	ldrh	r3, [r7, #20]
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800a87a:	2300      	movs	r3, #0
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a87e:	e016      	b.n	800a8ae <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a880:	4b8c      	ldr	r3, [pc, #560]	; (800aab4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	8b1b      	ldrh	r3, [r3, #24]
 800a88e:	8aba      	ldrh	r2, [r7, #20]
 800a890:	429a      	cmp	r2, r3
 800a892:	d109      	bne.n	800a8a8 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800a894:	8b3b      	ldrh	r3, [r7, #24]
 800a896:	2b09      	cmp	r3, #9
 800a898:	d002      	beq.n	800a8a0 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800a89a:	8b3b      	ldrh	r3, [r7, #24]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d103      	bne.n	800a8a8 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800a8a6:	e007      	b.n	800a8b8 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8ae:	4b82      	ldr	r3, [pc, #520]	; (800aab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	dbe3      	blt.n	800a880 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800a8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d112      	bne.n	800a8e6 <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800a8c0:	4a7e      	ldr	r2, [pc, #504]	; (800aabc <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800a8c2:	4b7a      	ldr	r3, [pc, #488]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a8c4:	4614      	mov	r4, r2
 800a8c6:	461d      	mov	r5, r3
 800a8c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a8d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800a8d4:	4b75      	ldr	r3, [pc, #468]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	f107 030c 	add.w	r3, r7, #12
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4878      	ldr	r0, [pc, #480]	; (800aac0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800a8e0:	f00f f8c6 	bl	8019a70 <memcpy>
 800a8e4:	e034      	b.n	800a950 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800a8e6:	4b71      	ldr	r3, [pc, #452]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b16      	cmp	r3, #22
 800a8ec:	d01b      	beq.n	800a926 <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800a8ee:	2b16      	cmp	r3, #22
 800a8f0:	d825      	bhi.n	800a93e <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800a8f2:	2b14      	cmp	r3, #20
 800a8f4:	d002      	beq.n	800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800a8f6:	2b15      	cmp	r3, #21
 800a8f8:	d00c      	beq.n	800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800a8fa:	e020      	b.n	800a93e <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a8fc:	4b6b      	ldr	r3, [pc, #428]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	f107 030c 	add.w	r3, r7, #12
 800a904:	4619      	mov	r1, r3
 800a906:	486f      	ldr	r0, [pc, #444]	; (800aac4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800a908:	f00f f8b2 	bl	8019a70 <memcpy>
					buf2_flag = 0;
 800a90c:	4b6e      	ldr	r3, [pc, #440]	; (800aac8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]

					break;
 800a912:	e01d      	b.n	800a950 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800a914:	4b65      	ldr	r3, [pc, #404]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	f107 030c 	add.w	r3, r7, #12
 800a91c:	4619      	mov	r1, r3
 800a91e:	486b      	ldr	r0, [pc, #428]	; (800aacc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800a920:	f00f f8a6 	bl	8019a70 <memcpy>

					break;
 800a924:	e014      	b.n	800a950 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800a926:	4b61      	ldr	r3, [pc, #388]	; (800aaac <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800a928:	691a      	ldr	r2, [r3, #16]
 800a92a:	f107 030c 	add.w	r3, r7, #12
 800a92e:	4619      	mov	r1, r3
 800a930:	4867      	ldr	r0, [pc, #412]	; (800aad0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800a932:	f00f f89d 	bl	8019a70 <memcpy>
					buf2_flag = 1;
 800a936:	4b64      	ldr	r3, [pc, #400]	; (800aac8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800a938:	2201      	movs	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
					break;
 800a93c:	e008      	b.n	800a950 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800a944:	f107 030c 	add.w	r3, r7, #12
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f9 f8ad 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800a94e:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800a950:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800a958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff fd65 	bl	800a42c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a962:	2110      	movs	r1, #16
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f006 f9ef 	bl	8010d48 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800a96a:	e0cb      	b.n	800ab04 <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a96c:	f107 030c 	add.w	r3, r7, #12
 800a970:	4a58      	ldr	r2, [pc, #352]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a972:	2101      	movs	r1, #1
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f006 f8d5 	bl	8010b24 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800a97a:	4b56      	ldr	r3, [pc, #344]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d118      	bne.n	800a9b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800a982:	4a4b      	ldr	r2, [pc, #300]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a984:	4b53      	ldr	r3, [pc, #332]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a986:	4614      	mov	r4, r2
 800a988:	461d      	mov	r5, r3
 800a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800a996:	4b46      	ldr	r3, [pc, #280]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a998:	331c      	adds	r3, #28
 800a99a:	f107 020c 	add.w	r2, r7, #12
 800a99e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9a2:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800a9a6:	4842      	ldr	r0, [pc, #264]	; (800aab0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800a9a8:	f002 fe82 	bl	800d6b0 <set_rx_frames>
			source = VESC_PACKET;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9b2:	e09a      	b.n	800aaea <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800a9ba:	231f      	movs	r3, #31
 800a9bc:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800a9be:	4b45      	ldr	r3, [pc, #276]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800a9ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800a9ce:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800a9d0:	4b40      	ldr	r3, [pc, #256]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	8bfb      	ldrh	r3, [r7, #30]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800a9dc:	8bbb      	ldrh	r3, [r7, #28]
 800a9de:	095b      	lsrs	r3, r3, #5
 800a9e0:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9e6:	e016      	b.n	800aa16 <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800a9e8:	4b32      	ldr	r3, [pc, #200]	; (800aab4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	8b1b      	ldrh	r3, [r3, #24]
 800a9f6:	8bba      	ldrh	r2, [r7, #28]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d109      	bne.n	800aa10 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800a9fc:	8c3b      	ldrh	r3, [r7, #32]
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	d002      	beq.n	800aa08 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800aa02:	8c3b      	ldrh	r3, [r7, #32]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d103      	bne.n	800aa10 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800aa0e:	e007      	b.n	800aa20 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
 800aa16:	4b28      	ldr	r3, [pc, #160]	; (800aab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	dbe3      	blt.n	800a9e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800aa20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d112      	bne.n	800aa4e <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800aa28:	4a24      	ldr	r2, [pc, #144]	; (800aabc <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800aa2a:	4b2a      	ldr	r3, [pc, #168]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa2c:	4614      	mov	r4, r2
 800aa2e:	461d      	mov	r5, r3
 800aa30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aa38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800aa3c:	4b25      	ldr	r3, [pc, #148]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	f107 030c 	add.w	r3, r7, #12
 800aa44:	4619      	mov	r1, r3
 800aa46:	481e      	ldr	r0, [pc, #120]	; (800aac0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800aa48:	f00f f812 	bl	8019a70 <memcpy>
 800aa4c:	e04d      	b.n	800aaea <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800aa4e:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b16      	cmp	r3, #22
 800aa54:	d01b      	beq.n	800aa8e <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800aa56:	2b16      	cmp	r3, #22
 800aa58:	d83e      	bhi.n	800aad8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800aa5a:	2b14      	cmp	r3, #20
 800aa5c:	d002      	beq.n	800aa64 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800aa5e:	2b15      	cmp	r3, #21
 800aa60:	d00c      	beq.n	800aa7c <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800aa62:	e039      	b.n	800aad8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800aa64:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	f107 030c 	add.w	r3, r7, #12
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4815      	ldr	r0, [pc, #84]	; (800aac4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800aa70:	f00e fffe 	bl	8019a70 <memcpy>
					buf2_flag = 0;
 800aa74:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	701a      	strb	r2, [r3, #0]
					break;
 800aa7a:	e036      	b.n	800aaea <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800aa7c:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	f107 030c 	add.w	r3, r7, #12
 800aa84:	4619      	mov	r1, r3
 800aa86:	4811      	ldr	r0, [pc, #68]	; (800aacc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800aa88:	f00e fff2 	bl	8019a70 <memcpy>
					break;
 800aa8c:	e02d      	b.n	800aaea <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800aa8e:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	f107 030c 	add.w	r3, r7, #12
 800aa96:	4619      	mov	r1, r3
 800aa98:	480d      	ldr	r0, [pc, #52]	; (800aad0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800aa9a:	f00e ffe9 	bl	8019a70 <memcpy>
					buf2_flag = 1;
 800aa9e:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	701a      	strb	r2, [r3, #0]
					break;
 800aaa4:	e021      	b.n	800aaea <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800aaa6:	bf00      	nop
 800aaa8:	20009f44 	.word	0x20009f44
 800aaac:	2000a50c 	.word	0x2000a50c
 800aab0:	200096d8 	.word	0x200096d8
 800aab4:	2000a638 	.word	0x2000a638
 800aab8:	200002c4 	.word	0x200002c4
 800aabc:	20006890 	.word	0x20006890
 800aac0:	200068ac 	.word	0x200068ac
 800aac4:	20006a44 	.word	0x20006a44
 800aac8:	200002d0 	.word	0x200002d0
 800aacc:	20009c48 	.word	0x20009c48
 800aad0:	20009da8 	.word	0x20009da8
 800aad4:	20006ac0 	.word	0x20006ac0
					rns_can = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800aade:	f107 030c 	add.w	r3, r7, #12
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f8 ffe0 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800aae8:	bf00      	nop
		if(rns_can)
 800aaea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800aaf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fc98 	bl	800a42c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800aafc:	2110      	movs	r1, #16
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f006 f922 	bl	8010d48 <HAL_CAN_ActivateNotification>
}
 800ab04:	bf00      	nop
 800ab06:	3730      	adds	r7, #48	; 0x30
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab0c <set>:

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};
float flywheelVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};
float flywheelLVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};

void set(void) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af02      	add	r7, sp, #8
	Initialize();
 800ab12:	f7ff fa4b 	bl	8009fac <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800ab16:	49a4      	ldr	r1, [pc, #656]	; (800ada8 <set+0x29c>)
 800ab18:	48a4      	ldr	r0, [pc, #656]	; (800adac <set+0x2a0>)
 800ab1a:	f7fe f8e6 	bl	8008cea <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800ab1e:	2254      	movs	r2, #84	; 0x54
 800ab20:	f241 3188 	movw	r1, #5000	; 0x1388
 800ab24:	48a2      	ldr	r0, [pc, #648]	; (800adb0 <set+0x2a4>)
 800ab26:	f7f8 f9c7 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 5.5, 0.5, 2.0, 0.1);
 800ab2a:	eddf 1aa2 	vldr	s3, [pc, #648]	; 800adb4 <set+0x2a8>
 800ab2e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800ab32:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800ab36:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f7f9 fd78 	bl	8004630 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800ab40:	4a9d      	ldr	r2, [pc, #628]	; (800adb8 <set+0x2ac>)
 800ab42:	2101      	movs	r1, #1
 800ab44:	489d      	ldr	r0, [pc, #628]	; (800adbc <set+0x2b0>)
 800ab46:	f002 fe89 	bl	800d85c <LidarInit>
	RNS_config(&hcan1);
 800ab4a:	489d      	ldr	r0, [pc, #628]	; (800adc0 <set+0x2b4>)
 800ab4c:	f000 f988 	bl	800ae60 <RNS_config>
	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800ab50:	2304      	movs	r3, #4
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	2340      	movs	r3, #64	; 0x40
 800ab56:	4a9b      	ldr	r2, [pc, #620]	; (800adc4 <set+0x2b8>)
 800ab58:	499b      	ldr	r1, [pc, #620]	; (800adc8 <set+0x2bc>)
 800ab5a:	489c      	ldr	r0, [pc, #624]	; (800adcc <set+0x2c0>)
 800ab5c:	f7ff f88e 	bl	8009c7c <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800ab60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ab64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ab68:	4898      	ldr	r0, [pc, #608]	; (800adcc <set+0x2c0>)
 800ab6a:	f7ff f9ee 	bl	8009f4a <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2300);
 800ab6e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800ab72:	4896      	ldr	r0, [pc, #600]	; (800adcc <set+0x2c0>)
 800ab74:	f7ff f9a0 	bl	8009eb8 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800ab78:	4b95      	ldr	r3, [pc, #596]	; (800add0 <set+0x2c4>)
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	4b95      	ldr	r3, [pc, #596]	; (800add4 <set+0x2c8>)
 800ab7e:	4a96      	ldr	r2, [pc, #600]	; (800add8 <set+0x2cc>)
 800ab80:	4996      	ldr	r1, [pc, #600]	; (800addc <set+0x2d0>)
 800ab82:	2002      	movs	r0, #2
 800ab84:	f7fa fdf4 	bl	8005770 <PPInit>
	PP_SetZ(-180, &pp);
 800ab88:	4891      	ldr	r0, [pc, #580]	; (800add0 <set+0x2c4>)
 800ab8a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ade0 <set+0x2d4>
 800ab8e:	f7fb fa03 	bl	8005f98 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800ab92:	488f      	ldr	r0, [pc, #572]	; (800add0 <set+0x2c4>)
 800ab94:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800ab98:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800ab9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aba0:	f7fa feb8 	bl	8005914 <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800aba4:	488a      	ldr	r0, [pc, #552]	; (800add0 <set+0x2c4>)
 800aba6:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800ade4 <set+0x2d8>
 800abaa:	eddf 0a82 	vldr	s1, [pc, #520]	; 800adb4 <set+0x2a8>
 800abae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800abb2:	f7fa ff38 	bl	8005a26 <PP_PIDEndSet>
	PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 800abb6:	4886      	ldr	r0, [pc, #536]	; (800add0 <set+0x2c4>)
 800abb8:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800abbc:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800ade8 <set+0x2dc>
 800abc0:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800adec <set+0x2e0>
 800abc4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800abc8:	f7fa fef4 	bl	80059b4 <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800abcc:	4980      	ldr	r1, [pc, #512]	; (800add0 <set+0x2c4>)
 800abce:	200a      	movs	r0, #10
 800abd0:	f7fb f9fa 	bl	8005fc8 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800abd4:	4986      	ldr	r1, [pc, #536]	; (800adf0 <set+0x2e4>)
 800abd6:	4887      	ldr	r0, [pc, #540]	; (800adf4 <set+0x2e8>)
 800abd8:	f7fe fb9c 	bl	8009314 <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800abdc:	4a86      	ldr	r2, [pc, #536]	; (800adf8 <set+0x2ec>)
 800abde:	4987      	ldr	r1, [pc, #540]	; (800adfc <set+0x2f0>)
 800abe0:	4887      	ldr	r0, [pc, #540]	; (800ae00 <set+0x2f4>)
 800abe2:	f7fa fb2f 	bl	8005244 <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800abe6:	4884      	ldr	r0, [pc, #528]	; (800adf8 <set+0x2ec>)
 800abe8:	f7fa fcc3 	bl	8005572 <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800abec:	4b85      	ldr	r3, [pc, #532]	; (800ae04 <set+0x2f8>)
 800abee:	edd3 7a00 	vldr	s15, [r3]
 800abf2:	4b84      	ldr	r3, [pc, #528]	; (800ae04 <set+0x2f8>)
 800abf4:	ed93 7a01 	vldr	s14, [r3, #4]
 800abf8:	4b82      	ldr	r3, [pc, #520]	; (800ae04 <set+0x2f8>)
 800abfa:	edd3 6a02 	vldr	s13, [r3, #8]
 800abfe:	4b81      	ldr	r3, [pc, #516]	; (800ae04 <set+0x2f8>)
 800ac00:	ed93 6a03 	vldr	s12, [r3, #12]
 800ac04:	4b7f      	ldr	r3, [pc, #508]	; (800ae04 <set+0x2f8>)
 800ac06:	edd3 5a04 	vldr	s11, [r3, #16]
 800ac0a:	4b7e      	ldr	r3, [pc, #504]	; (800ae04 <set+0x2f8>)
 800ac0c:	ed93 5a05 	vldr	s10, [r3, #20]
 800ac10:	4b7c      	ldr	r3, [pc, #496]	; (800ae04 <set+0x2f8>)
 800ac12:	edd3 4a06 	vldr	s9, [r3, #24]
 800ac16:	4878      	ldr	r0, [pc, #480]	; (800adf8 <set+0x2ec>)
 800ac18:	eef0 3a64 	vmov.f32	s7, s9
 800ac1c:	eeb0 3a45 	vmov.f32	s6, s10
 800ac20:	eef0 2a65 	vmov.f32	s5, s11
 800ac24:	eeb0 2a46 	vmov.f32	s4, s12
 800ac28:	eef0 1a66 	vmov.f32	s3, s13
 800ac2c:	eeb0 1a47 	vmov.f32	s2, s14
 800ac30:	eef0 0a67 	vmov.f32	s1, s15
 800ac34:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800ae08 <set+0x2fc>
 800ac38:	f7fa fb16 	bl	8005268 <PIDGainInit>

	PIDSourceInit(&leftErr, &leftU, &left_PID);
 800ac3c:	4a73      	ldr	r2, [pc, #460]	; (800ae0c <set+0x300>)
 800ac3e:	4974      	ldr	r1, [pc, #464]	; (800ae10 <set+0x304>)
 800ac40:	4874      	ldr	r0, [pc, #464]	; (800ae14 <set+0x308>)
 800ac42:	f7fa faff 	bl	8005244 <PIDSourceInit>
	PIDDelayInit(&left_PID);
 800ac46:	4871      	ldr	r0, [pc, #452]	; (800ae0c <set+0x300>)
 800ac48:	f7fa fc93 	bl	8005572 <PIDDelayInit>
	PIDGainInit(0.005, flywheelLVG[0], flywheelLVG[1], flywheelLVG[2], flywheelLVG[3], flywheelLVG[4], flywheelLVG[5], flywheelLVG[6], &left_PID);
 800ac4c:	4b72      	ldr	r3, [pc, #456]	; (800ae18 <set+0x30c>)
 800ac4e:	edd3 7a00 	vldr	s15, [r3]
 800ac52:	4b71      	ldr	r3, [pc, #452]	; (800ae18 <set+0x30c>)
 800ac54:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac58:	4b6f      	ldr	r3, [pc, #444]	; (800ae18 <set+0x30c>)
 800ac5a:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac5e:	4b6e      	ldr	r3, [pc, #440]	; (800ae18 <set+0x30c>)
 800ac60:	ed93 6a03 	vldr	s12, [r3, #12]
 800ac64:	4b6c      	ldr	r3, [pc, #432]	; (800ae18 <set+0x30c>)
 800ac66:	edd3 5a04 	vldr	s11, [r3, #16]
 800ac6a:	4b6b      	ldr	r3, [pc, #428]	; (800ae18 <set+0x30c>)
 800ac6c:	ed93 5a05 	vldr	s10, [r3, #20]
 800ac70:	4b69      	ldr	r3, [pc, #420]	; (800ae18 <set+0x30c>)
 800ac72:	edd3 4a06 	vldr	s9, [r3, #24]
 800ac76:	4865      	ldr	r0, [pc, #404]	; (800ae0c <set+0x300>)
 800ac78:	eef0 3a64 	vmov.f32	s7, s9
 800ac7c:	eeb0 3a45 	vmov.f32	s6, s10
 800ac80:	eef0 2a65 	vmov.f32	s5, s11
 800ac84:	eeb0 2a46 	vmov.f32	s4, s12
 800ac88:	eef0 1a66 	vmov.f32	s3, s13
 800ac8c:	eeb0 1a47 	vmov.f32	s2, s14
 800ac90:	eef0 0a67 	vmov.f32	s1, s15
 800ac94:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 800ae08 <set+0x2fc>
 800ac98:	f7fa fae6 	bl	8005268 <PIDGainInit>

	PIDSourceInit(&rightErr, &rightU, &right_PID);
 800ac9c:	4a5f      	ldr	r2, [pc, #380]	; (800ae1c <set+0x310>)
 800ac9e:	4960      	ldr	r1, [pc, #384]	; (800ae20 <set+0x314>)
 800aca0:	4860      	ldr	r0, [pc, #384]	; (800ae24 <set+0x318>)
 800aca2:	f7fa facf 	bl	8005244 <PIDSourceInit>
	PIDDelayInit(&right_PID);
 800aca6:	485d      	ldr	r0, [pc, #372]	; (800ae1c <set+0x310>)
 800aca8:	f7fa fc63 	bl	8005572 <PIDDelayInit>
	PIDGainInit(0.005, flywheelVG[0], flywheelVG[1], flywheelVG[2], flywheelVG[3], flywheelVG[4], flywheelVG[5], flywheelVG[6], &right_PID);
 800acac:	4b5e      	ldr	r3, [pc, #376]	; (800ae28 <set+0x31c>)
 800acae:	edd3 7a00 	vldr	s15, [r3]
 800acb2:	4b5d      	ldr	r3, [pc, #372]	; (800ae28 <set+0x31c>)
 800acb4:	ed93 7a01 	vldr	s14, [r3, #4]
 800acb8:	4b5b      	ldr	r3, [pc, #364]	; (800ae28 <set+0x31c>)
 800acba:	edd3 6a02 	vldr	s13, [r3, #8]
 800acbe:	4b5a      	ldr	r3, [pc, #360]	; (800ae28 <set+0x31c>)
 800acc0:	ed93 6a03 	vldr	s12, [r3, #12]
 800acc4:	4b58      	ldr	r3, [pc, #352]	; (800ae28 <set+0x31c>)
 800acc6:	edd3 5a04 	vldr	s11, [r3, #16]
 800acca:	4b57      	ldr	r3, [pc, #348]	; (800ae28 <set+0x31c>)
 800accc:	ed93 5a05 	vldr	s10, [r3, #20]
 800acd0:	4b55      	ldr	r3, [pc, #340]	; (800ae28 <set+0x31c>)
 800acd2:	edd3 4a06 	vldr	s9, [r3, #24]
 800acd6:	4851      	ldr	r0, [pc, #324]	; (800ae1c <set+0x310>)
 800acd8:	eef0 3a64 	vmov.f32	s7, s9
 800acdc:	eeb0 3a45 	vmov.f32	s6, s10
 800ace0:	eef0 2a65 	vmov.f32	s5, s11
 800ace4:	eeb0 2a46 	vmov.f32	s4, s12
 800ace8:	eef0 1a66 	vmov.f32	s3, s13
 800acec:	eeb0 1a47 	vmov.f32	s2, s14
 800acf0:	eef0 0a67 	vmov.f32	s1, s15
 800acf4:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800ae08 <set+0x2fc>
 800acf8:	f7fa fab6 	bl	8005268 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800acfc:	4a4b      	ldr	r2, [pc, #300]	; (800ae2c <set+0x320>)
 800acfe:	f107 030c 	add.w	r3, r7, #12
 800ad02:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800ad08:	4a48      	ldr	r2, [pc, #288]	; (800ae2c <set+0x320>)
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800ad12:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad16:	ed97 7a04 	vldr	s14, [r7, #16]
 800ad1a:	edd7 6a05 	vldr	s13, [r7, #20]
 800ad1e:	4b44      	ldr	r3, [pc, #272]	; (800ae30 <set+0x324>)
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4b44      	ldr	r3, [pc, #272]	; (800ae34 <set+0x328>)
 800ad24:	4a44      	ldr	r2, [pc, #272]	; (800ae38 <set+0x32c>)
 800ad26:	492d      	ldr	r1, [pc, #180]	; (800addc <set+0x2d0>)
 800ad28:	4844      	ldr	r0, [pc, #272]	; (800ae3c <set+0x330>)
 800ad2a:	eef0 1a66 	vmov.f32	s3, s13
 800ad2e:	eeb0 1a47 	vmov.f32	s2, s14
 800ad32:	eef0 0a67 	vmov.f32	s1, s15
 800ad36:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800ae08 <set+0x2fc>
 800ad3a:	f7f6 f957 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800ad3e:	483c      	ldr	r0, [pc, #240]	; (800ae30 <set+0x324>)
 800ad40:	f7f6 f981 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800ad44:	edd7 7a00 	vldr	s15, [r7]
 800ad48:	ed97 7a01 	vldr	s14, [r7, #4]
 800ad4c:	edd7 6a02 	vldr	s13, [r7, #8]
 800ad50:	4b3b      	ldr	r3, [pc, #236]	; (800ae40 <set+0x334>)
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4b3b      	ldr	r3, [pc, #236]	; (800ae44 <set+0x338>)
 800ad56:	4a3c      	ldr	r2, [pc, #240]	; (800ae48 <set+0x33c>)
 800ad58:	491f      	ldr	r1, [pc, #124]	; (800add8 <set+0x2cc>)
 800ad5a:	483c      	ldr	r0, [pc, #240]	; (800ae4c <set+0x340>)
 800ad5c:	eef0 1a66 	vmov.f32	s3, s13
 800ad60:	eeb0 1a47 	vmov.f32	s2, s14
 800ad64:	eef0 0a67 	vmov.f32	s1, s15
 800ad68:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800ae08 <set+0x2fc>
 800ad6c:	f7f6 f93e 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ad70:	4833      	ldr	r0, [pc, #204]	; (800ae40 <set+0x334>)
 800ad72:	f7f6 f968 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800ad76:	4936      	ldr	r1, [pc, #216]	; (800ae50 <set+0x344>)
 800ad78:	206f      	movs	r0, #111	; 0x6f
 800ad7a:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800ae54 <set+0x348>
 800ad7e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ad82:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800ae58 <set+0x34c>
 800ad86:	f002 fcc9 	bl	800d71c <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800ad8a:	4934      	ldr	r1, [pc, #208]	; (800ae5c <set+0x350>)
 800ad8c:	2070      	movs	r0, #112	; 0x70
 800ad8e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ae54 <set+0x348>
 800ad92:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800ad96:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ae58 <set+0x34c>
 800ad9a:	f002 fcbf 	bl	800d71c <VESCInit>
}
 800ad9e:	bf00      	nop
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20006b90 	.word	0x20006b90
 800adac:	2000a028 	.word	0x2000a028
 800adb0:	20005ef4 	.word	0x20005ef4
 800adb4:	3dcccccd 	.word	0x3dcccccd
 800adb8:	20009038 	.word	0x20009038
 800adbc:	20005ff8 	.word	0x20005ff8
 800adc0:	20009f44 	.word	0x20009f44
 800adc4:	40020400 	.word	0x40020400
 800adc8:	20005ca8 	.word	0x20005ca8
 800adcc:	20007874 	.word	0x20007874
 800add0:	20006ccc 	.word	0x20006ccc
 800add4:	20009980 	.word	0x20009980
 800add8:	2000981c 	.word	0x2000981c
 800addc:	200099c8 	.word	0x200099c8
 800ade0:	c3340000 	.word	0xc3340000
 800ade4:	3f333333 	.word	0x3f333333
 800ade8:	3e4ccccd 	.word	0x3e4ccccd
 800adec:	3d4ccccd 	.word	0x3d4ccccd
 800adf0:	20005bc4 	.word	0x20005bc4
 800adf4:	20006c70 	.word	0x20006c70
 800adf8:	20009824 	.word	0x20009824
 800adfc:	20007358 	.word	0x20007358
 800ae00:	200064d8 	.word	0x200064d8
 800ae04:	20000000 	.word	0x20000000
 800ae08:	3ba3d70a 	.word	0x3ba3d70a
 800ae0c:	20008ebc 	.word	0x20008ebc
 800ae10:	20006888 	.word	0x20006888
 800ae14:	2000a024 	.word	0x2000a024
 800ae18:	20000038 	.word	0x20000038
 800ae1c:	20009f6c 	.word	0x20009f6c
 800ae20:	20006b08 	.word	0x20006b08
 800ae24:	20009dc0 	.word	0x20009dc0
 800ae28:	2000001c 	.word	0x2000001c
 800ae2c:	0801fc00 	.word	0x0801fc00
 800ae30:	2000a318 	.word	0x2000a318
 800ae34:	20006640 	.word	0x20006640
 800ae38:	20009880 	.word	0x20009880
 800ae3c:	2000691c 	.word	0x2000691c
 800ae40:	200077dc 	.word	0x200077dc
 800ae44:	20007214 	.word	0x20007214
 800ae48:	20006be4 	.word	0x20006be4
 800ae4c:	2000a33c 	.word	0x2000a33c
 800ae50:	20006b0c 	.word	0x20006b0c
 800ae54:	3e19999a 	.word	0x3e19999a
 800ae58:	4708b800 	.word	0x4708b800
 800ae5c:	20009990 	.word	0x20009990

0800ae60 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af06      	add	r7, sp, #24
 800ae66:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800ae68:	49a9      	ldr	r1, [pc, #676]	; (800b110 <RNS_config+0x2b0>)
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7fe fb34 	bl	80094d8 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00001101, (float) fwd_omni,
 800ae70:	f04f 0200 	mov.w	r2, #0
 800ae74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae7c:	f04f 0200 	mov.w	r2, #0
 800ae80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae84:	e9cd 2300 	strd	r2, r3, [sp]
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	4ba1      	ldr	r3, [pc, #644]	; (800b114 <RNS_config+0x2b4>)
 800ae8e:	2124      	movs	r1, #36	; 0x24
 800ae90:	489f      	ldr	r0, [pc, #636]	; (800b110 <RNS_config+0x2b0>)
 800ae92:	f7fe fc9f 	bl	80097d4 <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aea2:	a37d      	add	r3, pc, #500	; (adr r3, 800b098 <RNS_config+0x238>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aeb4:	e9cd 2300 	strd	r2, r3, [sp]
 800aeb8:	a377      	add	r3, pc, #476	; (adr r3, 800b098 <RNS_config+0x238>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	2149      	movs	r1, #73	; 0x49
 800aec0:	4893      	ldr	r0, [pc, #588]	; (800b110 <RNS_config+0x2b0>)
 800aec2:	f7fe fc87 	bl	80097d4 <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800aec6:	a376      	add	r3, pc, #472	; (adr r3, 800b0a0 <RNS_config+0x240>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	e9cd 2300 	strd	r2, r3, [sp]
 800aed0:	a375      	add	r3, pc, #468	; (adr r3, 800b0a8 <RNS_config+0x248>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	211f      	movs	r1, #31
 800aed8:	488d      	ldr	r0, [pc, #564]	; (800b110 <RNS_config+0x2b0>)
 800aeda:	f7fe fc7b 	bl	80097d4 <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800aede:	a374      	add	r3, pc, #464	; (adr r3, 800b0b0 <RNS_config+0x250>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	e9cd 2300 	strd	r2, r3, [sp]
 800aee8:	a373      	add	r3, pc, #460	; (adr r3, 800b0b8 <RNS_config+0x258>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	2120      	movs	r1, #32
 800aef0:	4887      	ldr	r0, [pc, #540]	; (800b110 <RNS_config+0x2b0>)
 800aef2:	f7fe fc6f 	bl	80097d4 <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800aef6:	a372      	add	r3, pc, #456	; (adr r3, 800b0c0 <RNS_config+0x260>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af00:	a371      	add	r3, pc, #452	; (adr r3, 800b0c8 <RNS_config+0x268>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	e9cd 2300 	strd	r2, r3, [sp]
 800af0a:	f04f 0200 	mov.w	r2, #0
 800af0e:	4b82      	ldr	r3, [pc, #520]	; (800b118 <RNS_config+0x2b8>)
 800af10:	212b      	movs	r1, #43	; 0x2b
 800af12:	487f      	ldr	r0, [pc, #508]	; (800b110 <RNS_config+0x2b0>)
 800af14:	f7fe fc5e 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800af18:	a369      	add	r3, pc, #420	; (adr r3, 800b0c0 <RNS_config+0x260>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af22:	a36b      	add	r3, pc, #428	; (adr r3, 800b0d0 <RNS_config+0x270>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	e9cd 2300 	strd	r2, r3, [sp]
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	4b79      	ldr	r3, [pc, #484]	; (800b118 <RNS_config+0x2b8>)
 800af32:	212c      	movs	r1, #44	; 0x2c
 800af34:	4876      	ldr	r0, [pc, #472]	; (800b110 <RNS_config+0x2b0>)
 800af36:	f7fe fc4d 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800af3a:	a361      	add	r3, pc, #388	; (adr r3, 800b0c0 <RNS_config+0x260>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af44:	a364      	add	r3, pc, #400	; (adr r3, 800b0d8 <RNS_config+0x278>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	e9cd 2300 	strd	r2, r3, [sp]
 800af4e:	f04f 0200 	mov.w	r2, #0
 800af52:	4b71      	ldr	r3, [pc, #452]	; (800b118 <RNS_config+0x2b8>)
 800af54:	212d      	movs	r1, #45	; 0x2d
 800af56:	486e      	ldr	r0, [pc, #440]	; (800b110 <RNS_config+0x2b0>)
 800af58:	f7fe fc3c 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800af5c:	a358      	add	r3, pc, #352	; (adr r3, 800b0c0 <RNS_config+0x260>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af66:	a35e      	add	r3, pc, #376	; (adr r3, 800b0e0 <RNS_config+0x280>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	e9cd 2300 	strd	r2, r3, [sp]
 800af70:	f04f 0200 	mov.w	r2, #0
 800af74:	4b68      	ldr	r3, [pc, #416]	; (800b118 <RNS_config+0x2b8>)
 800af76:	212e      	movs	r1, #46	; 0x2e
 800af78:	4865      	ldr	r0, [pc, #404]	; (800b110 <RNS_config+0x2b0>)
 800af7a:	f7fe fc2b 	bl	80097d4 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800af7e:	a35a      	add	r3, pc, #360	; (adr r3, 800b0e8 <RNS_config+0x288>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af88:	f04f 0200 	mov.w	r2, #0
 800af8c:	4b63      	ldr	r3, [pc, #396]	; (800b11c <RNS_config+0x2bc>)
 800af8e:	e9cd 2300 	strd	r2, r3, [sp]
 800af92:	f04f 0200 	mov.w	r2, #0
 800af96:	4b60      	ldr	r3, [pc, #384]	; (800b118 <RNS_config+0x2b8>)
 800af98:	212f      	movs	r1, #47	; 0x2f
 800af9a:	485d      	ldr	r0, [pc, #372]	; (800b110 <RNS_config+0x2b0>)
 800af9c:	f7fe fc1a 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800afa0:	a351      	add	r3, pc, #324	; (adr r3, 800b0e8 <RNS_config+0x288>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	4b5b      	ldr	r3, [pc, #364]	; (800b11c <RNS_config+0x2bc>)
 800afb0:	e9cd 2300 	strd	r2, r3, [sp]
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	4b57      	ldr	r3, [pc, #348]	; (800b118 <RNS_config+0x2b8>)
 800afba:	2130      	movs	r1, #48	; 0x30
 800afbc:	4854      	ldr	r0, [pc, #336]	; (800b110 <RNS_config+0x2b0>)
 800afbe:	f7fe fc09 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800afc2:	a349      	add	r3, pc, #292	; (adr r3, 800b0e8 <RNS_config+0x288>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afcc:	f04f 0200 	mov.w	r2, #0
 800afd0:	4b52      	ldr	r3, [pc, #328]	; (800b11c <RNS_config+0x2bc>)
 800afd2:	e9cd 2300 	strd	r2, r3, [sp]
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	4b4f      	ldr	r3, [pc, #316]	; (800b118 <RNS_config+0x2b8>)
 800afdc:	2131      	movs	r1, #49	; 0x31
 800afde:	484c      	ldr	r0, [pc, #304]	; (800b110 <RNS_config+0x2b0>)
 800afe0:	f7fe fbf8 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800afe4:	a340      	add	r3, pc, #256	; (adr r3, 800b0e8 <RNS_config+0x288>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afee:	f04f 0200 	mov.w	r2, #0
 800aff2:	4b4a      	ldr	r3, [pc, #296]	; (800b11c <RNS_config+0x2bc>)
 800aff4:	e9cd 2300 	strd	r2, r3, [sp]
 800aff8:	f04f 0200 	mov.w	r2, #0
 800affc:	4b46      	ldr	r3, [pc, #280]	; (800b118 <RNS_config+0x2b8>)
 800affe:	2132      	movs	r1, #50	; 0x32
 800b000:	4843      	ldr	r0, [pc, #268]	; (800b110 <RNS_config+0x2b0>)
 800b002:	f7fe fbe7 	bl	80097d4 <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800b006:	2116      	movs	r1, #22
 800b008:	4841      	ldr	r0, [pc, #260]	; (800b110 <RNS_config+0x2b0>)
 800b00a:	f7fe fbe3 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800b00e:	f04f 0200 	mov.w	r2, #0
 800b012:	4b43      	ldr	r3, [pc, #268]	; (800b120 <RNS_config+0x2c0>)
 800b014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b018:	f04f 0200 	mov.w	r2, #0
 800b01c:	4b40      	ldr	r3, [pc, #256]	; (800b120 <RNS_config+0x2c0>)
 800b01e:	e9cd 2300 	strd	r2, r3, [sp]
 800b022:	f04f 0200 	mov.w	r2, #0
 800b026:	4b3c      	ldr	r3, [pc, #240]	; (800b118 <RNS_config+0x2b8>)
 800b028:	2146      	movs	r1, #70	; 0x46
 800b02a:	4839      	ldr	r0, [pc, #228]	; (800b110 <RNS_config+0x2b0>)
 800b02c:	f7fe fbd2 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800b030:	a32f      	add	r3, pc, #188	; (adr r3, 800b0f0 <RNS_config+0x290>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b03a:	a32f      	add	r3, pc, #188	; (adr r3, 800b0f8 <RNS_config+0x298>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	e9cd 2300 	strd	r2, r3, [sp]
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	4b35      	ldr	r3, [pc, #212]	; (800b120 <RNS_config+0x2c0>)
 800b04a:	2147      	movs	r1, #71	; 0x47
 800b04c:	4830      	ldr	r0, [pc, #192]	; (800b110 <RNS_config+0x2b0>)
 800b04e:	f7fe fbc1 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800b052:	f04f 0200 	mov.w	r2, #0
 800b056:	4b33      	ldr	r3, [pc, #204]	; (800b124 <RNS_config+0x2c4>)
 800b058:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b05c:	a328      	add	r3, pc, #160	; (adr r3, 800b100 <RNS_config+0x2a0>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b066:	a328      	add	r3, pc, #160	; (adr r3, 800b108 <RNS_config+0x2a8>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	e9cd 2300 	strd	r2, r3, [sp]
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	4b2a      	ldr	r3, [pc, #168]	; (800b120 <RNS_config+0x2c0>)
 800b076:	214f      	movs	r1, #79	; 0x4f
 800b078:	4825      	ldr	r0, [pc, #148]	; (800b110 <RNS_config+0x2b0>)
 800b07a:	f7fe fbab 	bl	80097d4 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800b07e:	f04f 0200 	mov.w	r2, #0
 800b082:	4b29      	ldr	r3, [pc, #164]	; (800b128 <RNS_config+0x2c8>)
 800b084:	211d      	movs	r1, #29
 800b086:	4822      	ldr	r0, [pc, #136]	; (800b110 <RNS_config+0x2b0>)
 800b088:	f7fe fba4 	bl	80097d4 <RNSSet>
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	f3af 8000 	nop.w
 800b098:	b9727cf5 	.word	0xb9727cf5
 800b09c:	3f049766 	.word	0x3f049766
 800b0a0:	a0000000 	.word	0xa0000000
 800b0a4:	3f564e14 	.word	0x3f564e14
 800b0a8:	d7a1868c 	.word	0xd7a1868c
 800b0ac:	3ff1f604 	.word	0x3ff1f604
 800b0b0:	00000000 	.word	0x00000000
 800b0b4:	3f58fd94 	.word	0x3f58fd94
 800b0b8:	7c2c0ed1 	.word	0x7c2c0ed1
 800b0bc:	3ff00652 	.word	0x3ff00652
 800b0c0:	00000000 	.word	0x00000000
 800b0c4:	40d387c0 	.word	0x40d387c0
 800b0c8:	6b29aca7 	.word	0x6b29aca7
 800b0cc:	3fc29aca 	.word	0x3fc29aca
 800b0d0:	dd1e2705 	.word	0xdd1e2705
 800b0d4:	3fbd8faa 	.word	0x3fbd8faa
 800b0d8:	b34c0e3d 	.word	0xb34c0e3d
 800b0dc:	3fc02e9a 	.word	0x3fc02e9a
 800b0e0:	21d938da 	.word	0x21d938da
 800b0e4:	3fc06e6b 	.word	0x3fc06e6b
 800b0e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b0ec:	3f50624d 	.word	0x3f50624d
 800b0f0:	66666666 	.word	0x66666666
 800b0f4:	3fe66666 	.word	0x3fe66666
 800b0f8:	9999999a 	.word	0x9999999a
 800b0fc:	3fb99999 	.word	0x3fb99999
 800b100:	9999999a 	.word	0x9999999a
 800b104:	3fc99999 	.word	0x3fc99999
 800b108:	9999999a 	.word	0x9999999a
 800b10c:	3fa99999 	.word	0x3fa99999
 800b110:	20008f10 	.word	0x20008f10
 800b114:	402a0000 	.word	0x402a0000
 800b118:	3ff00000 	.word	0x3ff00000
 800b11c:	3ff80000 	.word	0x3ff80000
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	40160000 	.word	0x40160000
 800b128:	40240000 	.word	0x40240000

0800b12c <RobotStart>:
	}

}

void RobotStart()
{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
	before = 0;
 800b130:	4b3e      	ldr	r3, [pc, #248]	; (800b22c <RobotStart+0x100>)
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
	mode = 1;
 800b136:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <RobotStart+0x104>)
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800b13c:	4b3d      	ldr	r3, [pc, #244]	; (800b234 <RobotStart+0x108>)
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800b142:	4b3d      	ldr	r3, [pc, #244]	; (800b238 <RobotStart+0x10c>)
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800b148:	4b3c      	ldr	r3, [pc, #240]	; (800b23c <RobotStart+0x110>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800b14e:	4b3c      	ldr	r3, [pc, #240]	; (800b240 <RobotStart+0x114>)
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800b154:	4b3b      	ldr	r3, [pc, #236]	; (800b244 <RobotStart+0x118>)
 800b156:	2200      	movs	r2, #0
 800b158:	701a      	strb	r2, [r3, #0]
	blue = 1;
 800b15a:	4b3b      	ldr	r3, [pc, #236]	; (800b248 <RobotStart+0x11c>)
 800b15c:	2201      	movs	r2, #1
 800b15e:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800b160:	4b3a      	ldr	r3, [pc, #232]	; (800b24c <RobotStart+0x120>)
 800b162:	2200      	movs	r2, #0
 800b164:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800b166:	4b3a      	ldr	r3, [pc, #232]	; (800b250 <RobotStart+0x124>)
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800b16c:	4b39      	ldr	r3, [pc, #228]	; (800b254 <RobotStart+0x128>)
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800b172:	4a39      	ldr	r2, [pc, #228]	; (800b258 <RobotStart+0x12c>)
 800b174:	7f13      	ldrb	r3, [r2, #28]
 800b176:	f36f 1386 	bfc	r3, #6, #1
 800b17a:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800b17c:	4b37      	ldr	r3, [pc, #220]	; (800b25c <RobotStart+0x130>)
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
	stop_adjust = 0;
 800b182:	4b37      	ldr	r3, [pc, #220]	; (800b260 <RobotStart+0x134>)
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
	up_done = 0;
 800b188:	4b36      	ldr	r3, [pc, #216]	; (800b264 <RobotStart+0x138>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
	servo_enb = 0;
 800b18e:	4b36      	ldr	r3, [pc, #216]	; (800b268 <RobotStart+0x13c>)
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800b194:	4b35      	ldr	r3, [pc, #212]	; (800b26c <RobotStart+0x140>)
 800b196:	2264      	movs	r2, #100	; 0x64
 800b198:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800b19a:	4b35      	ldr	r3, [pc, #212]	; (800b270 <RobotStart+0x144>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	601a      	str	r2, [r3, #0]
	reload = 0;
 800b1a0:	4b34      	ldr	r3, [pc, #208]	; (800b274 <RobotStart+0x148>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800b1a6:	4b34      	ldr	r3, [pc, #208]	; (800b278 <RobotStart+0x14c>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800b1ac:	4b33      	ldr	r3, [pc, #204]	; (800b27c <RobotStart+0x150>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800b1b2:	4b33      	ldr	r3, [pc, #204]	; (800b280 <RobotStart+0x154>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
	must_load = 0;
 800b1b8:	4b32      	ldr	r3, [pc, #200]	; (800b284 <RobotStart+0x158>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800b1be:	4b32      	ldr	r3, [pc, #200]	; (800b288 <RobotStart+0x15c>)
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800b1c4:	4b31      	ldr	r3, [pc, #196]	; (800b28c <RobotStart+0x160>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800b1ca:	4b31      	ldr	r3, [pc, #196]	; (800b290 <RobotStart+0x164>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
	pick_enc_buf = 0;
 800b1d0:	4b30      	ldr	r3, [pc, #192]	; (800b294 <RobotStart+0x168>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
	vesc_speed = 0;
 800b1d6:	4b30      	ldr	r3, [pc, #192]	; (800b298 <RobotStart+0x16c>)
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800b1de:	4b2f      	ldr	r3, [pc, #188]	; (800b29c <RobotStart+0x170>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	601a      	str	r2, [r3, #0]
	pick_left_manual = 0;
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	; (800b2a0 <RobotStart+0x174>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
	load_adjust = 1;
 800b1ea:	4b2e      	ldr	r3, [pc, #184]	; (800b2a4 <RobotStart+0x178>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
	adjust_count = 0;
 800b1f0:	4b2d      	ldr	r3, [pc, #180]	; (800b2a8 <RobotStart+0x17c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
	type_3_done = 0;
 800b1f6:	4b2d      	ldr	r3, [pc, #180]	; (800b2ac <RobotStart+0x180>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800b1fc:	4b2c      	ldr	r3, [pc, #176]	; (800b2b0 <RobotStart+0x184>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
	cylinder_load_once = 0;
 800b202:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <RobotStart+0x188>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]

	// Parameters
	RedPickLess = 150;
 800b208:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <RobotStart+0x18c>)
 800b20a:	2296      	movs	r2, #150	; 0x96
 800b20c:	601a      	str	r2, [r3, #0]
	BluePickLess = 150;
 800b20e:	4b2b      	ldr	r3, [pc, #172]	; (800b2bc <RobotStart+0x190>)
 800b210:	2296      	movs	r2, #150	; 0x96
 800b212:	601a      	str	r2, [r3, #0]
	RedPickMore = 0;
 800b214:	4b2a      	ldr	r3, [pc, #168]	; (800b2c0 <RobotStart+0x194>)
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
	BluePickMore = 0;
 800b21a:	4b2a      	ldr	r3, [pc, #168]	; (800b2c4 <RobotStart+0x198>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	bf00      	nop
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	200072a4 	.word	0x200072a4
 800b230:	200092e0 	.word	0x200092e0
 800b234:	2000987c 	.word	0x2000987c
 800b238:	20008f84 	.word	0x20008f84
 800b23c:	200092dc 	.word	0x200092dc
 800b240:	20007860 	.word	0x20007860
 800b244:	20009686 	.word	0x20009686
 800b248:	20006a24 	.word	0x20006a24
 800b24c:	2000966c 	.word	0x2000966c
 800b250:	20009810 	.word	0x20009810
 800b254:	2000721c 	.word	0x2000721c
 800b258:	200095ac 	.word	0x200095ac
 800b25c:	20007738 	.word	0x20007738
 800b260:	200064e8 	.word	0x200064e8
 800b264:	20007868 	.word	0x20007868
 800b268:	2000a594 	.word	0x2000a594
 800b26c:	200072bc 	.word	0x200072bc
 800b270:	20009030 	.word	0x20009030
 800b274:	20007754 	.word	0x20007754
 800b278:	2000998c 	.word	0x2000998c
 800b27c:	20007350 	.word	0x20007350
 800b280:	2000748c 	.word	0x2000748c
 800b284:	20009678 	.word	0x20009678
 800b288:	200064dc 	.word	0x200064dc
 800b28c:	20009438 	.word	0x20009438
 800b290:	2000a604 	.word	0x2000a604
 800b294:	20009c54 	.word	0x20009c54
 800b298:	200065a0 	.word	0x200065a0
 800b29c:	200072c4 	.word	0x200072c4
 800b2a0:	200099bc 	.word	0x200099bc
 800b2a4:	2000944c 	.word	0x2000944c
 800b2a8:	20009484 	.word	0x20009484
 800b2ac:	20009444 	.word	0x20009444
 800b2b0:	20009da4 	.word	0x20009da4
 800b2b4:	2000a590 	.word	0x2000a590
 800b2b8:	2000a2e8 	.word	0x2000a2e8
 800b2bc:	2000663c 	.word	0x2000663c
 800b2c0:	2000a574 	.word	0x2000a574
 800b2c4:	2000a3bc 	.word	0x2000a3bc

0800b2c8 <NormalControl>:

void NormalControl()
{
 800b2c8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ca:	b096      	sub	sp, #88	; 0x58
 800b2cc:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800b2ce:	4b8f      	ldr	r3, [pc, #572]	; (800b50c <NormalControl+0x244>)
 800b2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d6:	d10a      	bne.n	800b2ee <NormalControl+0x26>
	{
		while (ps4.button == OPTION);
 800b2d8:	bf00      	nop
 800b2da:	4b8c      	ldr	r3, [pc, #560]	; (800b50c <NormalControl+0x244>)
 800b2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e2:	d0fa      	beq.n	800b2da <NormalControl+0x12>
		ResetPickEnc();
 800b2e4:	f001 f900 	bl	800c4e8 <ResetPickEnc>
		mode = AUTO;
 800b2e8:	4b89      	ldr	r3, [pc, #548]	; (800b510 <NormalControl+0x248>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]
//		pick_0 = 1;
//		pick_down;
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800b2ee:	4b87      	ldr	r3, [pc, #540]	; (800b50c <NormalControl+0x244>)
 800b2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f6:	d11e      	bne.n	800b336 <NormalControl+0x6e>
	{
		while (ps4.button == TRIANGLE);
 800b2f8:	bf00      	nop
 800b2fa:	4b84      	ldr	r3, [pc, #528]	; (800b50c <NormalControl+0x244>)
 800b2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b302:	d0fa      	beq.n	800b2fa <NormalControl+0x32>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		ResetCoordinate();
 800b304:	f001 f8e0 	bl	800c4c8 <ResetCoordinate>
		lidar.pos = POS_PENDING;
 800b308:	4b82      	ldr	r3, [pc, #520]	; (800b514 <NormalControl+0x24c>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = POS_PENDING;
 800b310:	4b80      	ldr	r3, [pc, #512]	; (800b514 <NormalControl+0x24c>)
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		pick_right = 1;
 800b318:	4b7f      	ldr	r3, [pc, #508]	; (800b518 <NormalControl+0x250>)
 800b31a:	2201      	movs	r2, #1
 800b31c:	601a      	str	r2, [r3, #0]
		vesc_speed = 4;
 800b31e:	4b7f      	ldr	r3, [pc, #508]	; (800b51c <NormalControl+0x254>)
 800b320:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b324:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800b326:	4a7e      	ldr	r2, [pc, #504]	; (800b520 <NormalControl+0x258>)
 800b328:	7f13      	ldrb	r3, [r2, #28]
 800b32a:	f36f 1386 	bfc	r3, #6, #1
 800b32e:	7713      	strb	r3, [r2, #28]
		mode = AUTO;
 800b330:	4b77      	ldr	r3, [pc, #476]	; (800b510 <NormalControl+0x248>)
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]
	}

	// Servo
	if(ps4.button == SQUARE)
 800b336:	4b75      	ldr	r3, [pc, #468]	; (800b50c <NormalControl+0x244>)
 800b338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b33e:	d123      	bne.n	800b388 <NormalControl+0xc0>
	{
		while(ps4.button == SQUARE);
 800b340:	bf00      	nop
 800b342:	4b72      	ldr	r3, [pc, #456]	; (800b50c <NormalControl+0x244>)
 800b344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b34a:	d0fa      	beq.n	800b342 <NormalControl+0x7a>
		if(!pp.pp_start)
 800b34c:	4b75      	ldr	r3, [pc, #468]	; (800b524 <NormalControl+0x25c>)
 800b34e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d112      	bne.n	800b382 <NormalControl+0xba>
		{
			static int counter = 0;

			if(counter == 0)
 800b35c:	4b72      	ldr	r3, [pc, #456]	; (800b528 <NormalControl+0x260>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <NormalControl+0xae>
			{
				counter++;
 800b364:	4b70      	ldr	r3, [pc, #448]	; (800b528 <NormalControl+0x260>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	4a6f      	ldr	r2, [pc, #444]	; (800b528 <NormalControl+0x260>)
 800b36c:	6013      	str	r3, [r2, #0]
				blue = 0;
 800b36e:	4b6f      	ldr	r3, [pc, #444]	; (800b52c <NormalControl+0x264>)
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e005      	b.n	800b382 <NormalControl+0xba>
			}
			else
			{
				blue = 1;
 800b376:	4b6d      	ldr	r3, [pc, #436]	; (800b52c <NormalControl+0x264>)
 800b378:	2201      	movs	r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
				counter = 0;
 800b37c:	4b6a      	ldr	r3, [pc, #424]	; (800b528 <NormalControl+0x260>)
 800b37e:	2200      	movs	r2, #0
 800b380:	601a      	str	r2, [r3, #0]
			}
		}
		mode = AUTO;
 800b382:	4b63      	ldr	r3, [pc, #396]	; (800b510 <NormalControl+0x248>)
 800b384:	2201      	movs	r2, #1
 800b386:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800b388:	4b60      	ldr	r3, [pc, #384]	; (800b50c <NormalControl+0x244>)
 800b38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d112      	bne.n	800b3b6 <NormalControl+0xee>
	{
		while(ps4.button == UP);
 800b390:	bf00      	nop
 800b392:	4b5e      	ldr	r3, [pc, #376]	; (800b50c <NormalControl+0x244>)
 800b394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b396:	2b10      	cmp	r3, #16
 800b398:	d0fb      	beq.n	800b392 <NormalControl+0xca>
		if(type_3_done)
 800b39a:	4b65      	ldr	r3, [pc, #404]	; (800b530 <NormalControl+0x268>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <NormalControl+0xe2>
			type_3_done = 0;
 800b3a2:	4b63      	ldr	r3, [pc, #396]	; (800b530 <NormalControl+0x268>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e002      	b.n	800b3b0 <NormalControl+0xe8>
		else
			type_3_done = 1;
 800b3aa:	4b61      	ldr	r3, [pc, #388]	; (800b530 <NormalControl+0x268>)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	601a      	str	r2, [r3, #0]
		mode = AUTO;
 800b3b0:	4b57      	ldr	r3, [pc, #348]	; (800b510 <NormalControl+0x248>)
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
	}

	// Shoot
	if(ps4.button == CROSS)
 800b3b6:	4b55      	ldr	r3, [pc, #340]	; (800b50c <NormalControl+0x244>)
 800b3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3be:	d13d      	bne.n	800b43c <NormalControl+0x174>
	{
		while(ps4.button == CROSS);
 800b3c0:	bf00      	nop
 800b3c2:	4b52      	ldr	r3, [pc, #328]	; (800b50c <NormalControl+0x244>)
 800b3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ca:	d0fa      	beq.n	800b3c2 <NormalControl+0xfa>
		static int counter = 0;

		if(counter == 0)
 800b3cc:	4b59      	ldr	r3, [pc, #356]	; (800b534 <NormalControl+0x26c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d11b      	bne.n	800b40c <NormalControl+0x144>
		{
			lidar.pos = CENTER_4;
 800b3d4:	4b4f      	ldr	r3, [pc, #316]	; (800b514 <NormalControl+0x24c>)
 800b3d6:	2207      	movs	r2, #7
 800b3d8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_4;
 800b3dc:	4b4d      	ldr	r3, [pc, #308]	; (800b514 <NormalControl+0x24c>)
 800b3de:	2207      	movs	r2, #7
 800b3e0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			vesc_duty = type1Duty;
 800b3e4:	4b54      	ldr	r3, [pc, #336]	; (800b538 <NormalControl+0x270>)
 800b3e6:	4a55      	ldr	r2, [pc, #340]	; (800b53c <NormalControl+0x274>)
 800b3e8:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b3ea:	4b4c      	ldr	r3, [pc, #304]	; (800b51c <NormalControl+0x254>)
 800b3ec:	4a54      	ldr	r2, [pc, #336]	; (800b540 <NormalControl+0x278>)
 800b3ee:	601a      	str	r2, [r3, #0]
			led7_on;
 800b3f0:	4b54      	ldr	r3, [pc, #336]	; (800b544 <NormalControl+0x27c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b3f8:	63da      	str	r2, [r3, #60]	; 0x3c
			mode = AUTO;
 800b3fa:	4b45      	ldr	r3, [pc, #276]	; (800b510 <NormalControl+0x248>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	601a      	str	r2, [r3, #0]
			counter++;
 800b400:	4b4c      	ldr	r3, [pc, #304]	; (800b534 <NormalControl+0x26c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a4b      	ldr	r2, [pc, #300]	; (800b534 <NormalControl+0x26c>)
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	e017      	b.n	800b43c <NormalControl+0x174>
		}
		else
		{
			lidar.pos = CENTER_1;
 800b40c:	4b41      	ldr	r3, [pc, #260]	; (800b514 <NormalControl+0x24c>)
 800b40e:	2203      	movs	r2, #3
 800b410:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_1;
 800b414:	4b3f      	ldr	r3, [pc, #252]	; (800b514 <NormalControl+0x24c>)
 800b416:	2203      	movs	r2, #3
 800b418:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			led7_off;
 800b41c:	4b49      	ldr	r3, [pc, #292]	; (800b544 <NormalControl+0x27c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2200      	movs	r2, #0
 800b422:	63da      	str	r2, [r3, #60]	; 0x3c
			vesc_speed = type1;
 800b424:	4b3d      	ldr	r3, [pc, #244]	; (800b51c <NormalControl+0x254>)
 800b426:	4a46      	ldr	r2, [pc, #280]	; (800b540 <NormalControl+0x278>)
 800b428:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b42a:	4b43      	ldr	r3, [pc, #268]	; (800b538 <NormalControl+0x270>)
 800b42c:	4a43      	ldr	r2, [pc, #268]	; (800b53c <NormalControl+0x274>)
 800b42e:	601a      	str	r2, [r3, #0]
			mode = AUTO;
 800b430:	4b37      	ldr	r3, [pc, #220]	; (800b510 <NormalControl+0x248>)
 800b432:	2201      	movs	r2, #1
 800b434:	601a      	str	r2, [r3, #0]
			counter = 0;
 800b436:	4b3f      	ldr	r3, [pc, #252]	; (800b534 <NormalControl+0x26c>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]
		}
	}

	// Fly wheel
	if(ps4.button == CIRCLE)
 800b43c:	4b33      	ldr	r3, [pc, #204]	; (800b50c <NormalControl+0x244>)
 800b43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b444:	d113      	bne.n	800b46e <NormalControl+0x1a6>
	{
		while(ps4.button == CIRCLE);
 800b446:	bf00      	nop
 800b448:	4b30      	ldr	r3, [pc, #192]	; (800b50c <NormalControl+0x244>)
 800b44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b450:	d0fa      	beq.n	800b448 <NormalControl+0x180>
//			vesc_duty = 0;
//			VESCStop(&vesc1);
//			VESCStop(&vesc2);
//			counter = 0;
//		}
		if(MODN.orientation == OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE)
 800b452:	4b3d      	ldr	r3, [pc, #244]	; (800b548 <NormalControl+0x280>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	2b03      	cmp	r3, #3
 800b458:	d103      	bne.n	800b462 <NormalControl+0x19a>
			setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800b45a:	2000      	movs	r0, #0
 800b45c:	f7f9 fc24 	bl	8004ca8 <setOrientationMODN>
 800b460:	e002      	b.n	800b468 <NormalControl+0x1a0>
		else
			setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800b462:	2003      	movs	r0, #3
 800b464:	f7f9 fc20 	bl	8004ca8 <setOrientationMODN>
		mode = AUTO;
 800b468:	4b29      	ldr	r3, [pc, #164]	; (800b510 <NormalControl+0x248>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
//		setPick(800);
//		open_servo;
	}

	if(ps4.button == RIGHT)
 800b46e:	4b27      	ldr	r3, [pc, #156]	; (800b50c <NormalControl+0x244>)
 800b470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b472:	2b20      	cmp	r3, #32
 800b474:	d11b      	bne.n	800b4ae <NormalControl+0x1e6>
	{
		while(ps4.button == RIGHT);
 800b476:	bf00      	nop
 800b478:	4b24      	ldr	r3, [pc, #144]	; (800b50c <NormalControl+0x244>)
 800b47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b47c:	2b20      	cmp	r3, #32
 800b47e:	d0fb      	beq.n	800b478 <NormalControl+0x1b0>
		static int counter = 0;
		counter++;
 800b480:	4b32      	ldr	r3, [pc, #200]	; (800b54c <NormalControl+0x284>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3301      	adds	r3, #1
 800b486:	4a31      	ldr	r2, [pc, #196]	; (800b54c <NormalControl+0x284>)
 800b488:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b48a:	4b30      	ldr	r3, [pc, #192]	; (800b54c <NormalControl+0x284>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d105      	bne.n	800b49e <NormalControl+0x1d6>
		{
			open_servo;
 800b492:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b496:	482e      	ldr	r0, [pc, #184]	; (800b550 <NormalControl+0x288>)
 800b498:	f7fe fd0e 	bl	8009eb8 <ServoSetPulse>
 800b49c:	e007      	b.n	800b4ae <NormalControl+0x1e6>
		}
		else
		{
			close_servo;
 800b49e:	f240 3152 	movw	r1, #850	; 0x352
 800b4a2:	482b      	ldr	r0, [pc, #172]	; (800b550 <NormalControl+0x288>)
 800b4a4:	f7fe fd08 	bl	8009eb8 <ServoSetPulse>
			counter = 0;
 800b4a8:	4b28      	ldr	r3, [pc, #160]	; (800b54c <NormalControl+0x284>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	601a      	str	r2, [r3, #0]
		}
//		LidarSendIns(NEAR, &lidar);
	}

	if(ps4.button == LEFT)
 800b4ae:	4b17      	ldr	r3, [pc, #92]	; (800b50c <NormalControl+0x244>)
 800b4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b2:	2b80      	cmp	r3, #128	; 0x80
 800b4b4:	f040 8116 	bne.w	800b6e4 <NormalControl+0x41c>
	{
		while(ps4.button == LEFT);
 800b4b8:	bf00      	nop
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <NormalControl+0x244>)
 800b4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4be:	2b80      	cmp	r3, #128	; 0x80
 800b4c0:	d0fb      	beq.n	800b4ba <NormalControl+0x1f2>
//		else
//			pick_right = 1;

//		pick_left = 1;
//		pick_left_manual = 1;
		ResetCoordinate();
 800b4c2:	f001 f801 	bl	800c4c8 <ResetCoordinate>
		lidar.pos = PICK_LEFT;
 800b4c6:	4b13      	ldr	r3, [pc, #76]	; (800b514 <NormalControl+0x24c>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800b4ce:	4b11      	ldr	r3, [pc, #68]	; (800b514 <NormalControl+0x24c>)
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		cylinder_retract;
 800b4d6:	4a12      	ldr	r2, [pc, #72]	; (800b520 <NormalControl+0x258>)
 800b4d8:	7f13      	ldrb	r3, [r2, #28]
 800b4da:	f36f 1386 	bfc	r3, #6, #1
 800b4de:	7713      	strb	r3, [r2, #28]
		vesc_speed = 4;
 800b4e0:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <NormalControl+0x254>)
 800b4e2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b4e6:	601a      	str	r2, [r3, #0]
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800b4e8:	4b1a      	ldr	r3, [pc, #104]	; (800b554 <NormalControl+0x28c>)
 800b4ea:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800b4ee:	461d      	mov	r5, r3
 800b4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800b4fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b500:	4a08      	ldr	r2, [pc, #32]	; (800b524 <NormalControl+0x25c>)
 800b502:	2101      	movs	r1, #1
 800b504:	4618      	mov	r0, r3
 800b506:	f7fa faaa 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800b50a:	e046      	b.n	800b59a <NormalControl+0x2d2>
 800b50c:	2000a028 	.word	0x2000a028
 800b510:	200092e0 	.word	0x200092e0
 800b514:	20009038 	.word	0x20009038
 800b518:	2000a648 	.word	0x2000a648
 800b51c:	200065a0 	.word	0x200065a0
 800b520:	200095ac 	.word	0x200095ac
 800b524:	20006ccc 	.word	0x20006ccc
 800b528:	200002d4 	.word	0x200002d4
 800b52c:	20006a24 	.word	0x20006a24
 800b530:	20009444 	.word	0x20009444
 800b534:	200002d8 	.word	0x200002d8
 800b538:	20007388 	.word	0x20007388
 800b53c:	3e2b851f 	.word	0x3e2b851f
 800b540:	40966666 	.word	0x40966666
 800b544:	20005ca8 	.word	0x20005ca8
 800b548:	20006a74 	.word	0x20006a74
 800b54c:	200002dc 	.word	0x200002dc
 800b550:	20007874 	.word	0x20007874
 800b554:	0801fc0c 	.word	0x0801fc0c
		{
			if(ps4.button == SQUARE)
 800b558:	4b7f      	ldr	r3, [pc, #508]	; (800b758 <NormalControl+0x490>)
 800b55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b560:	d108      	bne.n	800b574 <NormalControl+0x2ac>
			{
				while(ps4.button == SQUARE);
 800b562:	bf00      	nop
 800b564:	4b7c      	ldr	r3, [pc, #496]	; (800b758 <NormalControl+0x490>)
 800b566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b56c:	d0fa      	beq.n	800b564 <NormalControl+0x29c>
				PP_stop(&pp);
 800b56e:	487b      	ldr	r0, [pc, #492]	; (800b75c <NormalControl+0x494>)
 800b570:	f7fa fcaf 	bl	8005ed2 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800b574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b578:	4879      	ldr	r0, [pc, #484]	; (800b760 <NormalControl+0x498>)
 800b57a:	f006 fe13 	bl	80121a4 <HAL_GPIO_ReadPin>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d007      	beq.n	800b594 <NormalControl+0x2cc>
 800b584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b588:	4875      	ldr	r0, [pc, #468]	; (800b760 <NormalControl+0x498>)
 800b58a:	f006 fe0b 	bl	80121a4 <HAL_GPIO_ReadPin>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <NormalControl+0x2d2>
				PP_stop(&pp);
 800b594:	4871      	ldr	r0, [pc, #452]	; (800b75c <NormalControl+0x494>)
 800b596:	f7fa fc9c 	bl	8005ed2 <PP_stop>
		while(pp.pp_start)
 800b59a:	4b70      	ldr	r3, [pc, #448]	; (800b75c <NormalControl+0x494>)
 800b59c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1d6      	bne.n	800b558 <NormalControl+0x290>
		}
		pick_left = 0;
 800b5aa:	4b6e      	ldr	r3, [pc, #440]	; (800b764 <NormalControl+0x49c>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800b5b0:	4b6d      	ldr	r3, [pc, #436]	; (800b768 <NormalControl+0x4a0>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]

		setPick(0);
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	f000 fad6 	bl	800bb68 <setPick>
		ResetCoordinate();
 800b5bc:	f000 ff84 	bl	800c4c8 <ResetCoordinate>

		float pick_left_point[1][7] = {{3.3, -10, -1.5, 0, 0, 0, 0}};
 800b5c0:	4b6a      	ldr	r3, [pc, #424]	; (800b76c <NormalControl+0x4a4>)
 800b5c2:	f107 0420 	add.w	r4, r7, #32
 800b5c6:	461d      	mov	r5, r3
 800b5c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b5d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800b5d4:	f107 0320 	add.w	r3, r7, #32
 800b5d8:	4a60      	ldr	r2, [pc, #384]	; (800b75c <NormalControl+0x494>)
 800b5da:	2101      	movs	r1, #1
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fa fa3e 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800b5e2:	e039      	b.n	800b658 <NormalControl+0x390>
		{
			if(pp.real_x <= -0.3)
 800b5e4:	4b5d      	ldr	r3, [pc, #372]	; (800b75c <NormalControl+0x494>)
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f4 ffad 	bl	8000548 <__aeabi_f2d>
 800b5ee:	a356      	add	r3, pc, #344	; (adr r3, 800b748 <NormalControl+0x480>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f7f5 fa7c 	bl	8000af0 <__aeabi_dcmple>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <NormalControl+0x33e>
				pp.target_vel[0] = 0.45;
 800b5fe:	4b57      	ldr	r3, [pc, #348]	; (800b75c <NormalControl+0x494>)
 800b600:	4a5b      	ldr	r2, [pc, #364]	; (800b770 <NormalControl+0x4a8>)
 800b602:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_x <= -0.4)
 800b606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b60a:	485a      	ldr	r0, [pc, #360]	; (800b774 <NormalControl+0x4ac>)
 800b60c:	f006 fdca 	bl	80121a4 <HAL_GPIO_ReadPin>
 800b610:	4603      	mov	r3, r0
 800b612:	2b01      	cmp	r3, #1
 800b614:	d10f      	bne.n	800b636 <NormalControl+0x36e>
 800b616:	4b51      	ldr	r3, [pc, #324]	; (800b75c <NormalControl+0x494>)
 800b618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7f4 ff94 	bl	8000548 <__aeabi_f2d>
 800b620:	a34b      	add	r3, pc, #300	; (adr r3, 800b750 <NormalControl+0x488>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	f7f5 fa63 	bl	8000af0 <__aeabi_dcmple>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <NormalControl+0x36e>
				PP_stop(&pp);
 800b630:	484a      	ldr	r0, [pc, #296]	; (800b75c <NormalControl+0x494>)
 800b632:	f7fa fc4e 	bl	8005ed2 <PP_stop>

			if(ps4.button == SQUARE)
 800b636:	4b48      	ldr	r3, [pc, #288]	; (800b758 <NormalControl+0x490>)
 800b638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b63e:	d10b      	bne.n	800b658 <NormalControl+0x390>
			{
				while(ps4.button == SQUARE);
 800b640:	bf00      	nop
 800b642:	4b45      	ldr	r3, [pc, #276]	; (800b758 <NormalControl+0x490>)
 800b644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b64a:	d0fa      	beq.n	800b642 <NormalControl+0x37a>
				PP_stop(&pp);
 800b64c:	4843      	ldr	r0, [pc, #268]	; (800b75c <NormalControl+0x494>)
 800b64e:	f7fa fc40 	bl	8005ed2 <PP_stop>
				picked_left = 0;
 800b652:	4b45      	ldr	r3, [pc, #276]	; (800b768 <NormalControl+0x4a0>)
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800b658:	4b40      	ldr	r3, [pc, #256]	; (800b75c <NormalControl+0x494>)
 800b65a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1bd      	bne.n	800b5e4 <NormalControl+0x31c>
			}
		}
		if(picked_left)
 800b668:	4b3f      	ldr	r3, [pc, #252]	; (800b768 <NormalControl+0x4a0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d036      	beq.n	800b6de <NormalControl+0x416>
		{
			float pick_left_adjust_servo[1][7] = {{3.5, 0.5, 0, 0, 0, 0, 0}};
 800b670:	4b41      	ldr	r3, [pc, #260]	; (800b778 <NormalControl+0x4b0>)
 800b672:	1d3c      	adds	r4, r7, #4
 800b674:	461d      	mov	r5, r3
 800b676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b67a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b67e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800b682:	1d3b      	adds	r3, r7, #4
 800b684:	4a35      	ldr	r2, [pc, #212]	; (800b75c <NormalControl+0x494>)
 800b686:	2101      	movs	r1, #1
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fa f9e8 	bl	8005a5e <PP_start>
			while(pp.pp_start)
 800b68e:	e00d      	b.n	800b6ac <NormalControl+0x3e4>
			{
				if(ps4.button == SQUARE)
 800b690:	4b31      	ldr	r3, [pc, #196]	; (800b758 <NormalControl+0x490>)
 800b692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b698:	d108      	bne.n	800b6ac <NormalControl+0x3e4>
				{
					while(ps4.button == SQUARE);
 800b69a:	bf00      	nop
 800b69c:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <NormalControl+0x490>)
 800b69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6a4:	d0fa      	beq.n	800b69c <NormalControl+0x3d4>
					PP_stop(&pp);
 800b6a6:	482d      	ldr	r0, [pc, #180]	; (800b75c <NormalControl+0x494>)
 800b6a8:	f7fa fc13 	bl	8005ed2 <PP_stop>
			while(pp.pp_start)
 800b6ac:	4b2b      	ldr	r3, [pc, #172]	; (800b75c <NormalControl+0x494>)
 800b6ae:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e9      	bne.n	800b690 <NormalControl+0x3c8>
				}
			}
			LoadRing();
 800b6bc:	f000 feac 	bl	800c418 <LoadRing>
			close_servo;
 800b6c0:	f240 3152 	movw	r1, #850	; 0x352
 800b6c4:	482d      	ldr	r0, [pc, #180]	; (800b77c <NormalControl+0x4b4>)
 800b6c6:	f7fe fbf7 	bl	8009eb8 <ServoSetPulse>
			lidar.pos_counter = CENTER_1;
 800b6ca:	4b2d      	ldr	r3, [pc, #180]	; (800b780 <NormalControl+0x4b8>)
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			AdjustRings();
 800b6d2:	f000 fee7 	bl	800c4a4 <AdjustRings>
//			osDelay(500);
			setSpeedMODN(5.5);
 800b6d6:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800b6da:	f7f9 faf5 	bl	8004cc8 <setSpeedMODN>
		}
		mode = AUTO;
 800b6de:	4b29      	ldr	r3, [pc, #164]	; (800b784 <NormalControl+0x4bc>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800b6e4:	4b1c      	ldr	r3, [pc, #112]	; (800b758 <NormalControl+0x490>)
 800b6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e8:	2b40      	cmp	r3, #64	; 0x40
 800b6ea:	d10b      	bne.n	800b704 <NormalControl+0x43c>
	{
		while(ps4.button == DOWN);
 800b6ec:	bf00      	nop
 800b6ee:	4b1a      	ldr	r3, [pc, #104]	; (800b758 <NormalControl+0x490>)
 800b6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d0fb      	beq.n	800b6ee <NormalControl+0x426>
//		stick_fence = 0;
		lidar.pos_counter = PICK_RIGHT;
 800b6f6:	4b22      	ldr	r3, [pc, #136]	; (800b780 <NormalControl+0x4b8>)
 800b6f8:	2209      	movs	r2, #9
 800b6fa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		mode = AUTO;
 800b6fe:	4b21      	ldr	r3, [pc, #132]	; (800b784 <NormalControl+0x4bc>)
 800b700:	2201      	movs	r2, #1
 800b702:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - before >= NormalMode) {
 800b704:	f004 fed2 	bl	80104ac <HAL_GetTick>
 800b708:	4603      	mov	r3, r0
 800b70a:	4a1f      	ldr	r2, [pc, #124]	; (800b788 <NormalControl+0x4c0>)
 800b70c:	6812      	ldr	r2, [r2, #0]
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b714:	d314      	bcc.n	800b740 <NormalControl+0x478>
		led9= !led9;
 800b716:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <NormalControl+0x4c4>)
 800b718:	7e1b      	ldrb	r3, [r3, #24]
 800b71a:	f003 0310 	and.w	r3, r3, #16
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	bf0c      	ite	eq
 800b724:	2301      	moveq	r3, #1
 800b726:	2300      	movne	r3, #0
 800b728:	b2d9      	uxtb	r1, r3
 800b72a:	4a18      	ldr	r2, [pc, #96]	; (800b78c <NormalControl+0x4c4>)
 800b72c:	7e13      	ldrb	r3, [r2, #24]
 800b72e:	f361 1304 	bfi	r3, r1, #4, #1
 800b732:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800b734:	f004 feba 	bl	80104ac <HAL_GetTick>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	4b12      	ldr	r3, [pc, #72]	; (800b788 <NormalControl+0x4c0>)
 800b73e:	601a      	str	r2, [r3, #0]
	}
}
 800b740:	bf00      	nop
 800b742:	3758      	adds	r7, #88	; 0x58
 800b744:	46bd      	mov	sp, r7
 800b746:	bdb0      	pop	{r4, r5, r7, pc}
 800b748:	33333333 	.word	0x33333333
 800b74c:	bfd33333 	.word	0xbfd33333
 800b750:	9999999a 	.word	0x9999999a
 800b754:	bfd99999 	.word	0xbfd99999
 800b758:	2000a028 	.word	0x2000a028
 800b75c:	20006ccc 	.word	0x20006ccc
 800b760:	40020c00 	.word	0x40020c00
 800b764:	20007864 	.word	0x20007864
 800b768:	20009810 	.word	0x20009810
 800b76c:	0801fc28 	.word	0x0801fc28
 800b770:	3ee66666 	.word	0x3ee66666
 800b774:	40021000 	.word	0x40021000
 800b778:	0801fc44 	.word	0x0801fc44
 800b77c:	20007874 	.word	0x20007874
 800b780:	20009038 	.word	0x20009038
 800b784:	200092e0 	.word	0x200092e0
 800b788:	200072a4 	.word	0x200072a4
 800b78c:	200095ac 	.word	0x200095ac

0800b790 <Auto>:

void Auto() {
 800b790:	b5b0      	push	{r4, r5, r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800b796:	4b97      	ldr	r3, [pc, #604]	; (800b9f4 <Auto+0x264>)
 800b798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79e:	d179      	bne.n	800b894 <Auto+0x104>
	{
		while(ps4.button == OPTION);
 800b7a0:	bf00      	nop
 800b7a2:	4b94      	ldr	r3, [pc, #592]	; (800b9f4 <Auto+0x264>)
 800b7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7aa:	d0fa      	beq.n	800b7a2 <Auto+0x12>

		static int counter = 0;
		counter++;
 800b7ac:	4b92      	ldr	r3, [pc, #584]	; (800b9f8 <Auto+0x268>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a91      	ldr	r2, [pc, #580]	; (800b9f8 <Auto+0x268>)
 800b7b4:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800b7b6:	4b90      	ldr	r3, [pc, #576]	; (800b9f8 <Auto+0x268>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d119      	bne.n	800b7f2 <Auto+0x62>
		{
			led_enb = 0;
 800b7be:	4b8f      	ldr	r3, [pc, #572]	; (800b9fc <Auto+0x26c>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
			if(blue)
 800b7c4:	4b8e      	ldr	r3, [pc, #568]	; (800ba00 <Auto+0x270>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d006      	beq.n	800b7da <Auto+0x4a>
			{
				vesc_speed = BlueType3;
 800b7cc:	4b8d      	ldr	r3, [pc, #564]	; (800ba04 <Auto+0x274>)
 800b7ce:	4a8e      	ldr	r2, [pc, #568]	; (800ba08 <Auto+0x278>)
 800b7d0:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800b7d2:	4b8e      	ldr	r3, [pc, #568]	; (800ba0c <Auto+0x27c>)
 800b7d4:	4a8e      	ldr	r2, [pc, #568]	; (800ba10 <Auto+0x280>)
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	e005      	b.n	800b7e6 <Auto+0x56>
			}
			else
			{
				vesc_speed = RedType3;
 800b7da:	4b8a      	ldr	r3, [pc, #552]	; (800ba04 <Auto+0x274>)
 800b7dc:	4a8d      	ldr	r2, [pc, #564]	; (800ba14 <Auto+0x284>)
 800b7de:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800b7e0:	4b8a      	ldr	r3, [pc, #552]	; (800ba0c <Auto+0x27c>)
 800b7e2:	4a8d      	ldr	r2, [pc, #564]	; (800ba18 <Auto+0x288>)
 800b7e4:	601a      	str	r2, [r3, #0]
			}
			led8 = 1;
 800b7e6:	4a8d      	ldr	r2, [pc, #564]	; (800ba1c <Auto+0x28c>)
 800b7e8:	7e13      	ldrb	r3, [r2, #24]
 800b7ea:	f043 0320 	orr.w	r3, r3, #32
 800b7ee:	7613      	strb	r3, [r2, #24]
 800b7f0:	e050      	b.n	800b894 <Auto+0x104>
		}
		else if(counter == 2)
 800b7f2:	4b81      	ldr	r3, [pc, #516]	; (800b9f8 <Auto+0x268>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d117      	bne.n	800b82a <Auto+0x9a>
		{
			led_enb = 1;
 800b7fa:	4b80      	ldr	r3, [pc, #512]	; (800b9fc <Auto+0x26c>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800b800:	4b87      	ldr	r3, [pc, #540]	; (800ba20 <Auto+0x290>)
 800b802:	227d      	movs	r2, #125	; 0x7d
 800b804:	601a      	str	r2, [r3, #0]
			if(blue)
 800b806:	4b7e      	ldr	r3, [pc, #504]	; (800ba00 <Auto+0x270>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d006      	beq.n	800b81c <Auto+0x8c>
			{
				vesc_speed = BlueType2;
 800b80e:	4b7d      	ldr	r3, [pc, #500]	; (800ba04 <Auto+0x274>)
 800b810:	4a84      	ldr	r2, [pc, #528]	; (800ba24 <Auto+0x294>)
 800b812:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800b814:	4b7d      	ldr	r3, [pc, #500]	; (800ba0c <Auto+0x27c>)
 800b816:	4a84      	ldr	r2, [pc, #528]	; (800ba28 <Auto+0x298>)
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e03b      	b.n	800b894 <Auto+0x104>
			}
			else
			{
				vesc_speed = RedType2;
 800b81c:	4b79      	ldr	r3, [pc, #484]	; (800ba04 <Auto+0x274>)
 800b81e:	4a83      	ldr	r2, [pc, #524]	; (800ba2c <Auto+0x29c>)
 800b820:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800b822:	4b7a      	ldr	r3, [pc, #488]	; (800ba0c <Auto+0x27c>)
 800b824:	4a82      	ldr	r2, [pc, #520]	; (800ba30 <Auto+0x2a0>)
 800b826:	601a      	str	r2, [r3, #0]
 800b828:	e034      	b.n	800b894 <Auto+0x104>
			}
//			vesc_duty = 0.275;
//			vesc_speed = 8.0;
		}
		else if(counter == 3)
 800b82a:	4b73      	ldr	r3, [pc, #460]	; (800b9f8 <Auto+0x268>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d11b      	bne.n	800b86a <Auto+0xda>
		{
			led_enb = 1;
 800b832:	4b72      	ldr	r3, [pc, #456]	; (800b9fc <Auto+0x26c>)
 800b834:	2201      	movs	r2, #1
 800b836:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800b838:	4b79      	ldr	r3, [pc, #484]	; (800ba20 <Auto+0x290>)
 800b83a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b83e:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.39;
 800b840:	4b72      	ldr	r3, [pc, #456]	; (800ba0c <Auto+0x27c>)
 800b842:	4a7c      	ldr	r2, [pc, #496]	; (800ba34 <Auto+0x2a4>)
 800b844:	601a      	str	r2, [r3, #0]
//			vesc_speed = 12.2;
			if(blue)
 800b846:	4b6e      	ldr	r3, [pc, #440]	; (800ba00 <Auto+0x270>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d006      	beq.n	800b85c <Auto+0xcc>
			{
				vesc_speed = BlueOppoType2;
 800b84e:	4b6d      	ldr	r3, [pc, #436]	; (800ba04 <Auto+0x274>)
 800b850:	4a79      	ldr	r2, [pc, #484]	; (800ba38 <Auto+0x2a8>)
 800b852:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800b854:	4b6d      	ldr	r3, [pc, #436]	; (800ba0c <Auto+0x27c>)
 800b856:	4a79      	ldr	r2, [pc, #484]	; (800ba3c <Auto+0x2ac>)
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e01b      	b.n	800b894 <Auto+0x104>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800b85c:	4b69      	ldr	r3, [pc, #420]	; (800ba04 <Auto+0x274>)
 800b85e:	4a78      	ldr	r2, [pc, #480]	; (800ba40 <Auto+0x2b0>)
 800b860:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800b862:	4b6a      	ldr	r3, [pc, #424]	; (800ba0c <Auto+0x27c>)
 800b864:	4a77      	ldr	r2, [pc, #476]	; (800ba44 <Auto+0x2b4>)
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	e014      	b.n	800b894 <Auto+0x104>
			}
		}

		else if(counter == 4)
 800b86a:	4b63      	ldr	r3, [pc, #396]	; (800b9f8 <Auto+0x268>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b04      	cmp	r3, #4
 800b870:	d110      	bne.n	800b894 <Auto+0x104>
		{
			led_enb = 0;
 800b872:	4b62      	ldr	r3, [pc, #392]	; (800b9fc <Auto+0x26c>)
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800b878:	4b64      	ldr	r3, [pc, #400]	; (800ba0c <Auto+0x27c>)
 800b87a:	4a73      	ldr	r2, [pc, #460]	; (800ba48 <Auto+0x2b8>)
 800b87c:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800b87e:	4b61      	ldr	r3, [pc, #388]	; (800ba04 <Auto+0x274>)
 800b880:	4a72      	ldr	r2, [pc, #456]	; (800ba4c <Auto+0x2bc>)
 800b882:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800b884:	4a65      	ldr	r2, [pc, #404]	; (800ba1c <Auto+0x28c>)
 800b886:	7e13      	ldrb	r3, [r2, #24]
 800b888:	f36f 1345 	bfc	r3, #5, #1
 800b88c:	7613      	strb	r3, [r2, #24]
			counter = 0;
 800b88e:	4b5a      	ldr	r3, [pc, #360]	; (800b9f8 <Auto+0x268>)
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800b894:	4b57      	ldr	r3, [pc, #348]	; (800b9f4 <Auto+0x264>)
 800b896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b89c:	d113      	bne.n	800b8c6 <Auto+0x136>
	{
		while(ps4.button == CROSS);
 800b89e:	bf00      	nop
 800b8a0:	4b54      	ldr	r3, [pc, #336]	; (800b9f4 <Auto+0x264>)
 800b8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8a8:	d0fa      	beq.n	800b8a0 <Auto+0x110>
		push_shoot;
 800b8aa:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800b8ae:	4868      	ldr	r0, [pc, #416]	; (800ba50 <Auto+0x2c0>)
 800b8b0:	f7f5 fc6b 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800b8b4:	4b67      	ldr	r3, [pc, #412]	; (800ba54 <Auto+0x2c4>)
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]
		stop_adjust = 1;
 800b8ba:	4b67      	ldr	r3, [pc, #412]	; (800ba58 <Auto+0x2c8>)
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800b8c0:	4b66      	ldr	r3, [pc, #408]	; (800ba5c <Auto+0x2cc>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
//			pick_manual(5000);
//			counter = 0;
//		}
	}

	if(ps4.button == SQUARE)
 800b8c6:	4b4b      	ldr	r3, [pc, #300]	; (800b9f4 <Auto+0x264>)
 800b8c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ce:	d13b      	bne.n	800b948 <Auto+0x1b8>
	{
		while(ps4.button == SQUARE);
 800b8d0:	bf00      	nop
 800b8d2:	4b48      	ldr	r3, [pc, #288]	; (800b9f4 <Auto+0x264>)
 800b8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8da:	d0fa      	beq.n	800b8d2 <Auto+0x142>

		if(pp.pp_start)
 800b8dc:	4b60      	ldr	r3, [pc, #384]	; (800ba60 <Auto+0x2d0>)
 800b8de:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <Auto+0x164>
		{
			PP_stop(&pp);
 800b8ec:	485c      	ldr	r0, [pc, #368]	; (800ba60 <Auto+0x2d0>)
 800b8ee:	f7fa faf0 	bl	8005ed2 <PP_stop>
 800b8f2:	e029      	b.n	800b948 <Auto+0x1b8>
		}
		else
		{
			loaded = 0;
 800b8f4:	4b5b      	ldr	r3, [pc, #364]	; (800ba64 <Auto+0x2d4>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.0;
 800b8fa:	4b44      	ldr	r3, [pc, #272]	; (800ba0c <Auto+0x27c>)
 800b8fc:	f04f 0200 	mov.w	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
			flywheelStop();
 800b902:	f001 f8e9 	bl	800cad8 <flywheelStop>
			pick_stop;
 800b906:	2100      	movs	r1, #0
 800b908:	4857      	ldr	r0, [pc, #348]	; (800ba68 <Auto+0x2d8>)
 800b90a:	f7f5 fc3e 	bl	800118a <WriteBDC>
			setPick(500);
 800b90e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b912:	f000 f929 	bl	800bb68 <setPick>
			cylinder_load;
 800b916:	4a41      	ldr	r2, [pc, #260]	; (800ba1c <Auto+0x28c>)
 800b918:	7f13      	ldrb	r3, [r2, #28]
 800b91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b91e:	7713      	strb	r3, [r2, #28]
			open_servo;
 800b920:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800b924:	4851      	ldr	r0, [pc, #324]	; (800ba6c <Auto+0x2dc>)
 800b926:	f7fe fac7 	bl	8009eb8 <ServoSetPulse>
			reload = 0;
 800b92a:	4b51      	ldr	r3, [pc, #324]	; (800ba70 <Auto+0x2e0>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]
			load_start = 0;
 800b930:	4b50      	ldr	r3, [pc, #320]	; (800ba74 <Auto+0x2e4>)
 800b932:	2200      	movs	r2, #0
 800b934:	601a      	str	r2, [r3, #0]
			load_adjust = 0;
 800b936:	4b50      	ldr	r3, [pc, #320]	; (800ba78 <Auto+0x2e8>)
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
			stick_fence = 0;
 800b93c:	4b4f      	ldr	r3, [pc, #316]	; (800ba7c <Auto+0x2ec>)
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]
			picked_manual = 0;
 800b942:	4b4f      	ldr	r3, [pc, #316]	; (800ba80 <Auto+0x2f0>)
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
		}
	}

	if(ps4.button == CIRCLE)
 800b948:	4b2a      	ldr	r3, [pc, #168]	; (800b9f4 <Auto+0x264>)
 800b94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b94c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b950:	f040 80b3 	bne.w	800baba <Auto+0x32a>
	{
		while(ps4.button == CIRCLE);
 800b954:	bf00      	nop
 800b956:	4b27      	ldr	r3, [pc, #156]	; (800b9f4 <Auto+0x264>)
 800b958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b95a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b95e:	d0fa      	beq.n	800b956 <Auto+0x1c6>
		vesc_speed = 4;
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <Auto+0x274>)
 800b962:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b966:	601a      	str	r2, [r3, #0]
		static int counter = 0;

		if(counter == 0)
 800b968:	4b46      	ldr	r3, [pc, #280]	; (800ba84 <Auto+0x2f4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8091 	bne.w	800ba94 <Auto+0x304>
		{
			lidar.pos = PICK_LEFT;
 800b972:	4b45      	ldr	r3, [pc, #276]	; (800ba88 <Auto+0x2f8>)
 800b974:	2201      	movs	r2, #1
 800b976:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = PICK_LEFT;
 800b97a:	4b43      	ldr	r3, [pc, #268]	; (800ba88 <Auto+0x2f8>)
 800b97c:	2201      	movs	r2, #1
 800b97e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			setPick(2200);
 800b982:	f640 0098 	movw	r0, #2200	; 0x898
 800b986:	f000 f8ef 	bl	800bb68 <setPick>

			float pick_left_point[1][7] = {{5.0, -3.9, 0.12, 0, 0, 0, 0}};
 800b98a:	4b40      	ldr	r3, [pc, #256]	; (800ba8c <Auto+0x2fc>)
 800b98c:	1d3c      	adds	r4, r7, #4
 800b98e:	461d      	mov	r5, r3
 800b990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800b99c:	1d3b      	adds	r3, r7, #4
 800b99e:	4a30      	ldr	r2, [pc, #192]	; (800ba60 <Auto+0x2d0>)
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fa f85b 	bl	8005a5e <PP_start>
			while(pp.pp_start)
 800b9a8:	e00d      	b.n	800b9c6 <Auto+0x236>
			{
				if(ps4.button == SQUARE)
 800b9aa:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <Auto+0x264>)
 800b9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b2:	d108      	bne.n	800b9c6 <Auto+0x236>
				{
					while(ps4.button == SQUARE);
 800b9b4:	bf00      	nop
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <Auto+0x264>)
 800b9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9be:	d0fa      	beq.n	800b9b6 <Auto+0x226>
					PP_stop(&pp);
 800b9c0:	4827      	ldr	r0, [pc, #156]	; (800ba60 <Auto+0x2d0>)
 800b9c2:	f7fa fa86 	bl	8005ed2 <PP_stop>
			while(pp.pp_start)
 800b9c6:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <Auto+0x2d0>)
 800b9c8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e9      	bne.n	800b9aa <Auto+0x21a>
				}
			}
			pick_left = 1;
 800b9d6:	4b2e      	ldr	r3, [pc, #184]	; (800ba90 <Auto+0x300>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
			counter++;
 800b9dc:	4b29      	ldr	r3, [pc, #164]	; (800ba84 <Auto+0x2f4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	4a28      	ldr	r2, [pc, #160]	; (800ba84 <Auto+0x2f4>)
 800b9e4:	6013      	str	r3, [r2, #0]
			cylinder_retract;
 800b9e6:	4a0d      	ldr	r2, [pc, #52]	; (800ba1c <Auto+0x28c>)
 800b9e8:	7f13      	ldrb	r3, [r2, #28]
 800b9ea:	f36f 1386 	bfc	r3, #6, #1
 800b9ee:	7713      	strb	r3, [r2, #28]
 800b9f0:	e063      	b.n	800baba <Auto+0x32a>
 800b9f2:	bf00      	nop
 800b9f4:	2000a028 	.word	0x2000a028
 800b9f8:	200002e0 	.word	0x200002e0
 800b9fc:	2000a604 	.word	0x2000a604
 800ba00:	20006a24 	.word	0x20006a24
 800ba04:	200065a0 	.word	0x200065a0
 800ba08:	413c0000 	.word	0x413c0000
 800ba0c:	20007388 	.word	0x20007388
 800ba10:	3ebeb852 	.word	0x3ebeb852
 800ba14:	413b3333 	.word	0x413b3333
 800ba18:	3ebd70a4 	.word	0x3ebd70a4
 800ba1c:	200095ac 	.word	0x200095ac
 800ba20:	2000a3a0 	.word	0x2000a3a0
 800ba24:	41026666 	.word	0x41026666
 800ba28:	3e8b851f 	.word	0x3e8b851f
 800ba2c:	41033333 	.word	0x41033333
 800ba30:	3e87ae14 	.word	0x3e87ae14
 800ba34:	3ec7ae14 	.word	0x3ec7ae14
 800ba38:	4144cccd 	.word	0x4144cccd
 800ba3c:	3ec66666 	.word	0x3ec66666
 800ba40:	41433333 	.word	0x41433333
 800ba44:	3ec51eb8 	.word	0x3ec51eb8
 800ba48:	3e2b851f 	.word	0x3e2b851f
 800ba4c:	40966666 	.word	0x40966666
 800ba50:	20009688 	.word	0x20009688
 800ba54:	200092dc 	.word	0x200092dc
 800ba58:	200064e8 	.word	0x200064e8
 800ba5c:	2000748c 	.word	0x2000748c
 800ba60:	20006ccc 	.word	0x20006ccc
 800ba64:	20009438 	.word	0x20009438
 800ba68:	20007714 	.word	0x20007714
 800ba6c:	20007874 	.word	0x20007874
 800ba70:	20007754 	.word	0x20007754
 800ba74:	20007350 	.word	0x20007350
 800ba78:	2000944c 	.word	0x2000944c
 800ba7c:	200072c4 	.word	0x200072c4
 800ba80:	20009498 	.word	0x20009498
 800ba84:	200002e4 	.word	0x200002e4
 800ba88:	20009038 	.word	0x20009038
 800ba8c:	0801fc60 	.word	0x0801fc60
 800ba90:	20007864 	.word	0x20007864
		}
		else
		{
			counter = 0;
 800ba94:	4b2b      	ldr	r3, [pc, #172]	; (800bb44 <Auto+0x3b4>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
			lidar.pos = POS_PENDING;
 800ba9a:	4b2b      	ldr	r3, [pc, #172]	; (800bb48 <Auto+0x3b8>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = POS_PENDING;
 800baa2:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <Auto+0x3b8>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			pick_right = 1;
 800baaa:	4b28      	ldr	r3, [pc, #160]	; (800bb4c <Auto+0x3bc>)
 800baac:	2201      	movs	r2, #1
 800baae:	601a      	str	r2, [r3, #0]
			cylinder_retract;
 800bab0:	4a27      	ldr	r2, [pc, #156]	; (800bb50 <Auto+0x3c0>)
 800bab2:	7f13      	ldrb	r3, [r2, #28]
 800bab4:	f36f 1386 	bfc	r3, #6, #1
 800bab8:	7713      	strb	r3, [r2, #28]
		}
	}

	if(ps4.button == TRIANGLE)
 800baba:	4b26      	ldr	r3, [pc, #152]	; (800bb54 <Auto+0x3c4>)
 800babc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800babe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bac2:	d11e      	bne.n	800bb02 <Auto+0x372>
	{
		while(ps4.button == TRIANGLE);
 800bac4:	bf00      	nop
 800bac6:	4b23      	ldr	r3, [pc, #140]	; (800bb54 <Auto+0x3c4>)
 800bac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bace:	d0fa      	beq.n	800bac6 <Auto+0x336>
		LoadRing();
 800bad0:	f000 fca2 	bl	800c418 <LoadRing>
		load_adjust = 1;
 800bad4:	4b20      	ldr	r3, [pc, #128]	; (800bb58 <Auto+0x3c8>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800bada:	4b20      	ldr	r3, [pc, #128]	; (800bb5c <Auto+0x3cc>)
 800badc:	2201      	movs	r2, #1
 800bade:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800bae0:	f240 31b6 	movw	r1, #950	; 0x3b6
 800bae4:	481e      	ldr	r0, [pc, #120]	; (800bb60 <Auto+0x3d0>)
 800bae6:	f7fe f9e7 	bl	8009eb8 <ServoSetPulse>
		cylinder_retract;
 800baea:	4a19      	ldr	r2, [pc, #100]	; (800bb50 <Auto+0x3c0>)
 800baec:	7f13      	ldrb	r3, [r2, #28]
 800baee:	f36f 1386 	bfc	r3, #6, #1
 800baf2:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800baf4:	f000 fcd6 	bl	800c4a4 <AdjustRings>
		adjust_servo;
 800baf8:	f240 31b6 	movw	r1, #950	; 0x3b6
 800bafc:	4818      	ldr	r0, [pc, #96]	; (800bb60 <Auto+0x3d0>)
 800bafe:	f7fe f9db 	bl	8009eb8 <ServoSetPulse>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800bb02:	f004 fcd3 	bl	80104ac <HAL_GetTick>
 800bb06:	4603      	mov	r3, r0
 800bb08:	4a16      	ldr	r2, [pc, #88]	; (800bb64 <Auto+0x3d4>)
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	1a9b      	subs	r3, r3, r2
 800bb0e:	2b7c      	cmp	r3, #124	; 0x7c
 800bb10:	d914      	bls.n	800bb3c <Auto+0x3ac>
	{
		led9= !led9;
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <Auto+0x3c0>)
 800bb14:	7e1b      	ldrb	r3, [r3, #24]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bf0c      	ite	eq
 800bb20:	2301      	moveq	r3, #1
 800bb22:	2300      	movne	r3, #0
 800bb24:	b2d9      	uxtb	r1, r3
 800bb26:	4a0a      	ldr	r2, [pc, #40]	; (800bb50 <Auto+0x3c0>)
 800bb28:	7e13      	ldrb	r3, [r2, #24]
 800bb2a:	f361 1304 	bfi	r3, r1, #4, #1
 800bb2e:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800bb30:	f004 fcbc 	bl	80104ac <HAL_GetTick>
 800bb34:	4603      	mov	r3, r0
 800bb36:	461a      	mov	r2, r3
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <Auto+0x3d4>)
 800bb3a:	601a      	str	r2, [r3, #0]
	}
}
 800bb3c:	bf00      	nop
 800bb3e:	3720      	adds	r7, #32
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bdb0      	pop	{r4, r5, r7, pc}
 800bb44:	200002e4 	.word	0x200002e4
 800bb48:	20009038 	.word	0x20009038
 800bb4c:	2000a648 	.word	0x2000a648
 800bb50:	200095ac 	.word	0x200095ac
 800bb54:	2000a028 	.word	0x2000a028
 800bb58:	2000944c 	.word	0x2000944c
 800bb5c:	20009498 	.word	0x20009498
 800bb60:	20007874 	.word	0x20007874
 800bb64:	200072a4 	.word	0x200072a4

0800bb68 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800bb70:	4a05      	ldr	r2, [pc, #20]	; (800bb88 <setPick+0x20>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <setPick+0x24>)
 800bb78:	2201      	movs	r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	200065ac 	.word	0x200065ac
 800bb8c:	20007738 	.word	0x20007738

0800bb90 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800bb94:	4b1a      	ldr	r3, [pc, #104]	; (800bc00 <CheckPickEnc+0x70>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d02e      	beq.n	800bbfa <CheckPickEnc+0x6a>
	{
		pickErr = pick_target_enc - pick_enc;
 800bb9c:	4b19      	ldr	r3, [pc, #100]	; (800bc04 <CheckPickEnc+0x74>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	4b19      	ldr	r3, [pc, #100]	; (800bc08 <CheckPickEnc+0x78>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbae:	4b17      	ldr	r3, [pc, #92]	; (800bc0c <CheckPickEnc+0x7c>)
 800bbb0:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800bbb4:	4816      	ldr	r0, [pc, #88]	; (800bc10 <CheckPickEnc+0x80>)
 800bbb6:	f7f9 fcfa 	bl	80055ae <PID>
		pick_manual((int32_t)pickU);
 800bbba:	4b16      	ldr	r3, [pc, #88]	; (800bc14 <CheckPickEnc+0x84>)
 800bbbc:	edd3 7a00 	vldr	s15, [r3]
 800bbc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbc4:	ee17 1a90 	vmov	r1, s15
 800bbc8:	4813      	ldr	r0, [pc, #76]	; (800bc18 <CheckPickEnc+0x88>)
 800bbca:	f7f5 fade 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800bbce:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <CheckPickEnc+0x7c>)
 800bbd0:	edd3 7a00 	vldr	s15, [r3]
 800bbd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbd8:	ee17 3a90 	vmov	r3, s15
 800bbdc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800bbe0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <CheckPickEnc+0x8c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	da06      	bge.n	800bbfa <CheckPickEnc+0x6a>
		{
			set_pick_enc = 0;
 800bbec:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <CheckPickEnc+0x70>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	601a      	str	r2, [r3, #0]
			pick_stop;
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	4808      	ldr	r0, [pc, #32]	; (800bc18 <CheckPickEnc+0x88>)
 800bbf6:	f7f5 fac8 	bl	800118a <WriteBDC>
		}
	}
}
 800bbfa:	bf00      	nop
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20007738 	.word	0x20007738
 800bc04:	200065ac 	.word	0x200065ac
 800bc08:	20006be8 	.word	0x20006be8
 800bc0c:	200064d8 	.word	0x200064d8
 800bc10:	20009824 	.word	0x20009824
 800bc14:	20007358 	.word	0x20007358
 800bc18:	20007714 	.word	0x20007714
 800bc1c:	200072bc 	.word	0x200072bc

0800bc20 <CheckPitch>:

void CheckPitch()
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
	if(set_pitch)
 800bc24:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <CheckPitch+0x74>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d02c      	beq.n	800bc86 <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800bc2c:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <CheckPitch+0x78>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <CheckPitch+0x1a>
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d013      	beq.n	800bc60 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800bc38:	e02a      	b.n	800bc90 <CheckPitch+0x70>
				if(In_Pitch70)
 800bc3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc3e:	4817      	ldr	r0, [pc, #92]	; (800bc9c <CheckPitch+0x7c>)
 800bc40:	f006 fab0 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d11f      	bne.n	800bc8a <CheckPitch+0x6a>
					pitch_stop;
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	4814      	ldr	r0, [pc, #80]	; (800bca0 <CheckPitch+0x80>)
 800bc4e:	f7f5 fa9c 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800bc52:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <CheckPitch+0x78>)
 800bc54:	2201      	movs	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bc58:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <CheckPitch+0x74>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
				break;
 800bc5e:	e014      	b.n	800bc8a <CheckPitch+0x6a>
				if(In_Pitch45)
 800bc60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc64:	480d      	ldr	r0, [pc, #52]	; (800bc9c <CheckPitch+0x7c>)
 800bc66:	f006 fa9d 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10e      	bne.n	800bc8e <CheckPitch+0x6e>
					pitch_stop;
 800bc70:	2100      	movs	r1, #0
 800bc72:	480b      	ldr	r0, [pc, #44]	; (800bca0 <CheckPitch+0x80>)
 800bc74:	f7f5 fa89 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800bc78:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <CheckPitch+0x78>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <CheckPitch+0x74>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	601a      	str	r2, [r3, #0]
				break;
 800bc84:	e003      	b.n	800bc8e <CheckPitch+0x6e>
	}
 800bc86:	bf00      	nop
 800bc88:	e002      	b.n	800bc90 <CheckPitch+0x70>
				break;
 800bc8a:	bf00      	nop
 800bc8c:	e000      	b.n	800bc90 <CheckPitch+0x70>
				break;
 800bc8e:	bf00      	nop
}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	2000966c 	.word	0x2000966c
 800bc98:	20009686 	.word	0x20009686
 800bc9c:	40020400 	.word	0x40020400
 800bca0:	20006c4c 	.word	0x20006c4c
 800bca4:	00000000 	.word	0x00000000

0800bca8 <CheckPick>:

void CheckPick()
{
 800bca8:	b5b0      	push	{r4, r5, r7, lr}
 800bcaa:	b0a4      	sub	sp, #144	; 0x90
 800bcac:	af00      	add	r7, sp, #0
	if(pick_left)
 800bcae:	4ba6      	ldr	r3, [pc, #664]	; (800bf48 <CheckPick+0x2a0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 810d 	beq.w	800bed2 <CheckPick+0x22a>
	{
		lidar.pos = PICK_LEFT;
 800bcb8:	4ba4      	ldr	r3, [pc, #656]	; (800bf4c <CheckPick+0x2a4>)
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800bcc0:	4ba2      	ldr	r3, [pc, #648]	; (800bf4c <CheckPick+0x2a4>)
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800bcc8:	4ba1      	ldr	r3, [pc, #644]	; (800bf50 <CheckPick+0x2a8>)
 800bcca:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800bcce:	461d      	mov	r5, r3
 800bcd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800bcdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800bce0:	4a9c      	ldr	r2, [pc, #624]	; (800bf54 <CheckPick+0x2ac>)
 800bce2:	2101      	movs	r1, #1
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f9 feba 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800bcea:	e020      	b.n	800bd2e <CheckPick+0x86>
		{
			if(ps4.button == SQUARE)
 800bcec:	4b9a      	ldr	r3, [pc, #616]	; (800bf58 <CheckPick+0x2b0>)
 800bcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf4:	d108      	bne.n	800bd08 <CheckPick+0x60>
			{
				while(ps4.button == SQUARE);
 800bcf6:	bf00      	nop
 800bcf8:	4b97      	ldr	r3, [pc, #604]	; (800bf58 <CheckPick+0x2b0>)
 800bcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd00:	d0fa      	beq.n	800bcf8 <CheckPick+0x50>
				PP_stop(&pp);
 800bd02:	4894      	ldr	r0, [pc, #592]	; (800bf54 <CheckPick+0x2ac>)
 800bd04:	f7fa f8e5 	bl	8005ed2 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800bd08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd0c:	4893      	ldr	r0, [pc, #588]	; (800bf5c <CheckPick+0x2b4>)
 800bd0e:	f006 fa49 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d007      	beq.n	800bd28 <CheckPick+0x80>
 800bd18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd1c:	488f      	ldr	r0, [pc, #572]	; (800bf5c <CheckPick+0x2b4>)
 800bd1e:	f006 fa41 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <CheckPick+0x86>
				PP_stop(&pp);
 800bd28:	488a      	ldr	r0, [pc, #552]	; (800bf54 <CheckPick+0x2ac>)
 800bd2a:	f7fa f8d2 	bl	8005ed2 <PP_stop>
		while(pp.pp_start)
 800bd2e:	4b89      	ldr	r3, [pc, #548]	; (800bf54 <CheckPick+0x2ac>)
 800bd30:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1d6      	bne.n	800bcec <CheckPick+0x44>
		}
		pick_left = 0;
 800bd3e:	4b82      	ldr	r3, [pc, #520]	; (800bf48 <CheckPick+0x2a0>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800bd44:	4b86      	ldr	r3, [pc, #536]	; (800bf60 <CheckPick+0x2b8>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]

		setPick(0);
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f7ff ff0c 	bl	800bb68 <setPick>

		if(pick_left_manual)
 800bd50:	4b84      	ldr	r3, [pc, #528]	; (800bf64 <CheckPick+0x2bc>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <CheckPick+0xb4>
			ResetCoordinate();
 800bd58:	f000 fbb6 	bl	800c4c8 <ResetCoordinate>

		float pick_left_point[1][7] = {{2.3, -10, -1.5, 0, 0, 0, 0}};
 800bd5c:	4b82      	ldr	r3, [pc, #520]	; (800bf68 <CheckPick+0x2c0>)
 800bd5e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800bd62:	461d      	mov	r5, r3
 800bd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bd6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800bd70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bd74:	4a77      	ldr	r2, [pc, #476]	; (800bf54 <CheckPick+0x2ac>)
 800bd76:	2101      	movs	r1, #1
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f9 fe70 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800bd7e:	e062      	b.n	800be46 <CheckPick+0x19e>
		{
			if(!pick_left_manual)
 800bd80:	4b78      	ldr	r3, [pc, #480]	; (800bf64 <CheckPick+0x2bc>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d127      	bne.n	800bdd8 <CheckPick+0x130>
			{
				if(pp.real_x <= -4.9)
 800bd88:	4b72      	ldr	r3, [pc, #456]	; (800bf54 <CheckPick+0x2ac>)
 800bd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7f4 fbdb 	bl	8000548 <__aeabi_f2d>
 800bd92:	a369      	add	r3, pc, #420	; (adr r3, 800bf38 <CheckPick+0x290>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 feaa 	bl	8000af0 <__aeabi_dcmple>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d004      	beq.n	800bdac <CheckPick+0x104>
					pp.target_vel[0] = 0.5;
 800bda2:	4b6c      	ldr	r3, [pc, #432]	; (800bf54 <CheckPick+0x2ac>)
 800bda4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800bda8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -5.0)
 800bdac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bdb0:	486e      	ldr	r0, [pc, #440]	; (800bf6c <CheckPick+0x2c4>)
 800bdb2:	f006 f9f7 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d133      	bne.n	800be24 <CheckPick+0x17c>
 800bdbc:	4b65      	ldr	r3, [pc, #404]	; (800bf54 <CheckPick+0x2ac>)
 800bdbe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bdc2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800bdc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdce:	d829      	bhi.n	800be24 <CheckPick+0x17c>
					PP_stop(&pp);
 800bdd0:	4860      	ldr	r0, [pc, #384]	; (800bf54 <CheckPick+0x2ac>)
 800bdd2:	f7fa f87e 	bl	8005ed2 <PP_stop>
 800bdd6:	e025      	b.n	800be24 <CheckPick+0x17c>
			}
			else
			{
				if(pp.real_x <= -0.25)
 800bdd8:	4b5e      	ldr	r3, [pc, #376]	; (800bf54 <CheckPick+0x2ac>)
 800bdda:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bdde:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bde2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdea:	d803      	bhi.n	800bdf4 <CheckPick+0x14c>
					pp.target_vel[0] = 0.55;
 800bdec:	4b59      	ldr	r3, [pc, #356]	; (800bf54 <CheckPick+0x2ac>)
 800bdee:	4a60      	ldr	r2, [pc, #384]	; (800bf70 <CheckPick+0x2c8>)
 800bdf0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

				if(In_Pick && pp.real_x <= -0.3)
 800bdf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bdf8:	485c      	ldr	r0, [pc, #368]	; (800bf6c <CheckPick+0x2c4>)
 800bdfa:	f006 f9d3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b01      	cmp	r3, #1
 800be02:	d10f      	bne.n	800be24 <CheckPick+0x17c>
 800be04:	4b53      	ldr	r3, [pc, #332]	; (800bf54 <CheckPick+0x2ac>)
 800be06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be08:	4618      	mov	r0, r3
 800be0a:	f7f4 fb9d 	bl	8000548 <__aeabi_f2d>
 800be0e:	a34c      	add	r3, pc, #304	; (adr r3, 800bf40 <CheckPick+0x298>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f7f4 fe6c 	bl	8000af0 <__aeabi_dcmple>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <CheckPick+0x17c>
					PP_stop(&pp);
 800be1e:	484d      	ldr	r0, [pc, #308]	; (800bf54 <CheckPick+0x2ac>)
 800be20:	f7fa f857 	bl	8005ed2 <PP_stop>
			}

			if(ps4.button == SQUARE)
 800be24:	4b4c      	ldr	r3, [pc, #304]	; (800bf58 <CheckPick+0x2b0>)
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2c:	d10b      	bne.n	800be46 <CheckPick+0x19e>
			{
				while(ps4.button == SQUARE);
 800be2e:	bf00      	nop
 800be30:	4b49      	ldr	r3, [pc, #292]	; (800bf58 <CheckPick+0x2b0>)
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be38:	d0fa      	beq.n	800be30 <CheckPick+0x188>
				PP_stop(&pp);
 800be3a:	4846      	ldr	r0, [pc, #280]	; (800bf54 <CheckPick+0x2ac>)
 800be3c:	f7fa f849 	bl	8005ed2 <PP_stop>
				picked_left = 0;
 800be40:	4b47      	ldr	r3, [pc, #284]	; (800bf60 <CheckPick+0x2b8>)
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800be46:	4b43      	ldr	r3, [pc, #268]	; (800bf54 <CheckPick+0x2ac>)
 800be48:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	d194      	bne.n	800bd80 <CheckPick+0xd8>
			}
		}
		pick_left_manual = 0;
 800be56:	4b43      	ldr	r3, [pc, #268]	; (800bf64 <CheckPick+0x2bc>)
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]
		if(picked_left)
 800be5c:	4b40      	ldr	r3, [pc, #256]	; (800bf60 <CheckPick+0x2b8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d036      	beq.n	800bed2 <CheckPick+0x22a>
		{
			float pick_left_adjust_servo[1][7] = {{4.0, 0.5, 0.2, 0, 0, 0, 0}};
 800be64:	4b43      	ldr	r3, [pc, #268]	; (800bf74 <CheckPick+0x2cc>)
 800be66:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800be6a:	461d      	mov	r5, r3
 800be6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800be78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be7c:	4a35      	ldr	r2, [pc, #212]	; (800bf54 <CheckPick+0x2ac>)
 800be7e:	2101      	movs	r1, #1
 800be80:	4618      	mov	r0, r3
 800be82:	f7f9 fdec 	bl	8005a5e <PP_start>
			while(pp.pp_start)
 800be86:	e00d      	b.n	800bea4 <CheckPick+0x1fc>
			{
				if(ps4.button == SQUARE)
 800be88:	4b33      	ldr	r3, [pc, #204]	; (800bf58 <CheckPick+0x2b0>)
 800be8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be90:	d108      	bne.n	800bea4 <CheckPick+0x1fc>
				{
					while(ps4.button == SQUARE);
 800be92:	bf00      	nop
 800be94:	4b30      	ldr	r3, [pc, #192]	; (800bf58 <CheckPick+0x2b0>)
 800be96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be9c:	d0fa      	beq.n	800be94 <CheckPick+0x1ec>
					PP_stop(&pp);
 800be9e:	482d      	ldr	r0, [pc, #180]	; (800bf54 <CheckPick+0x2ac>)
 800bea0:	f7fa f817 	bl	8005ed2 <PP_stop>
			while(pp.pp_start)
 800bea4:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <CheckPick+0x2ac>)
 800bea6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e9      	bne.n	800be88 <CheckPick+0x1e0>
				}
			}
			LoadRing();
 800beb4:	f000 fab0 	bl	800c418 <LoadRing>
			lidar.pos_counter = CENTER_1;
 800beb8:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <CheckPick+0x2a4>)
 800beba:	2203      	movs	r2, #3
 800bebc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			load_adjust = 1;
 800bec0:	4b2d      	ldr	r3, [pc, #180]	; (800bf78 <CheckPick+0x2d0>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	601a      	str	r2, [r3, #0]
			AdjustRings();
 800bec6:	f000 faed 	bl	800c4a4 <AdjustRings>
//			adjust_servo;
//			osDelay(500);
			setSpeedMODN(5.5);
 800beca:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800bece:	f7f8 fefb 	bl	8004cc8 <setSpeedMODN>
		}
	}

	if(pick_right)
 800bed2:	4b2a      	ldr	r3, [pc, #168]	; (800bf7c <CheckPick+0x2d4>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80f0 	beq.w	800c0bc <CheckPick+0x414>
	{
		load_stop_once = 0;
 800bedc:	4b28      	ldr	r3, [pc, #160]	; (800bf80 <CheckPick+0x2d8>)
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800bee2:	4b28      	ldr	r3, [pc, #160]	; (800bf84 <CheckPick+0x2dc>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
		load_adjust = 1;
 800bee8:	4b23      	ldr	r3, [pc, #140]	; (800bf78 <CheckPick+0x2d0>)
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]

//		pick_0 = 1;
//		pick_manual(-10000);

		lidar.pos = PICK_RIGHT;
 800beee:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <CheckPick+0x2a4>)
 800bef0:	2209      	movs	r2, #9
 800bef2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <CheckPick+0x2a4>)
 800bef8:	2209      	movs	r2, #9
 800befa:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		open_servo;
 800befe:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800bf02:	4821      	ldr	r0, [pc, #132]	; (800bf88 <CheckPick+0x2e0>)
 800bf04:	f7fd ffd8 	bl	8009eb8 <ServoSetPulse>
		pick_right = 0;
 800bf08:	4b1c      	ldr	r3, [pc, #112]	; (800bf7c <CheckPick+0x2d4>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 10, 0, -90, 0, 0, 0}};
 800bf0e:	4b1f      	ldr	r3, [pc, #124]	; (800bf8c <CheckPick+0x2e4>)
 800bf10:	f107 0420 	add.w	r4, r7, #32
 800bf14:	461d      	mov	r5, r3
 800bf16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_right, 1, &pp);
 800bf22:	f107 0320 	add.w	r3, r7, #32
 800bf26:	4a0b      	ldr	r2, [pc, #44]	; (800bf54 <CheckPick+0x2ac>)
 800bf28:	2101      	movs	r1, #1
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f9 fd97 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800bf30:	e04f      	b.n	800bfd2 <CheckPick+0x32a>
 800bf32:	bf00      	nop
 800bf34:	f3af 8000 	nop.w
 800bf38:	9999999a 	.word	0x9999999a
 800bf3c:	c0139999 	.word	0xc0139999
 800bf40:	33333333 	.word	0x33333333
 800bf44:	bfd33333 	.word	0xbfd33333
 800bf48:	20007864 	.word	0x20007864
 800bf4c:	20009038 	.word	0x20009038
 800bf50:	0801fc0c 	.word	0x0801fc0c
 800bf54:	20006ccc 	.word	0x20006ccc
 800bf58:	2000a028 	.word	0x2000a028
 800bf5c:	40020c00 	.word	0x40020c00
 800bf60:	20009810 	.word	0x20009810
 800bf64:	200099bc 	.word	0x200099bc
 800bf68:	0801fc7c 	.word	0x0801fc7c
 800bf6c:	40021000 	.word	0x40021000
 800bf70:	3f0ccccd 	.word	0x3f0ccccd
 800bf74:	0801fc98 	.word	0x0801fc98
 800bf78:	2000944c 	.word	0x2000944c
 800bf7c:	2000a648 	.word	0x2000a648
 800bf80:	2000998c 	.word	0x2000998c
 800bf84:	20009438 	.word	0x20009438
 800bf88:	20007874 	.word	0x20007874
 800bf8c:	0801fcb4 	.word	0x0801fcb4
		{
			if(ps4.button == SQUARE)
 800bf90:	4b4f      	ldr	r3, [pc, #316]	; (800c0d0 <CheckPick+0x428>)
 800bf92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf98:	d108      	bne.n	800bfac <CheckPick+0x304>
			{
				while(ps4.button == SQUARE);
 800bf9a:	bf00      	nop
 800bf9c:	4b4c      	ldr	r3, [pc, #304]	; (800c0d0 <CheckPick+0x428>)
 800bf9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa4:	d0fa      	beq.n	800bf9c <CheckPick+0x2f4>
				PP_stop(&pp);
 800bfa6:	484b      	ldr	r0, [pc, #300]	; (800c0d4 <CheckPick+0x42c>)
 800bfa8:	f7f9 ff93 	bl	8005ed2 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800bfac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bfb0:	4849      	ldr	r0, [pc, #292]	; (800c0d8 <CheckPick+0x430>)
 800bfb2:	f006 f8f7 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <CheckPick+0x324>
 800bfbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bfc0:	4845      	ldr	r0, [pc, #276]	; (800c0d8 <CheckPick+0x430>)
 800bfc2:	f006 f8ef 	bl	80121a4 <HAL_GPIO_ReadPin>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <CheckPick+0x32a>
				PP_stop(&pp);
 800bfcc:	4841      	ldr	r0, [pc, #260]	; (800c0d4 <CheckPick+0x42c>)
 800bfce:	f7f9 ff80 	bl	8005ed2 <PP_stop>
		while(pp.pp_start)
 800bfd2:	4b40      	ldr	r3, [pc, #256]	; (800c0d4 <CheckPick+0x42c>)
 800bfd4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1d6      	bne.n	800bf90 <CheckPick+0x2e8>
		}

		picked_right = 1;
 800bfe2:	4b3e      	ldr	r3, [pc, #248]	; (800c0dc <CheckPick+0x434>)
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	601a      	str	r2, [r3, #0]
		ResetCoordinate();
 800bfe8:	f000 fa6e 	bl	800c4c8 <ResetCoordinate>
		setPick(0);
 800bfec:	2000      	movs	r0, #0
 800bfee:	f7ff fdbb 	bl	800bb68 <setPick>
		float pick_right_point[1][7] = {{2.5, 2.5, -10, -90, 0, 0, 0}};
 800bff2:	4b3b      	ldr	r3, [pc, #236]	; (800c0e0 <CheckPick+0x438>)
 800bff4:	1d3c      	adds	r4, r7, #4
 800bff6:	461d      	mov	r5, r3
 800bff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bffc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c000:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_right_point, 1, &pp);
 800c004:	1d3b      	adds	r3, r7, #4
 800c006:	4a33      	ldr	r2, [pc, #204]	; (800c0d4 <CheckPick+0x42c>)
 800c008:	2101      	movs	r1, #1
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7f9 fd27 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800c010:	e037      	b.n	800c082 <CheckPick+0x3da>
		{
			if(ps4.button == SQUARE)
 800c012:	4b2f      	ldr	r3, [pc, #188]	; (800c0d0 <CheckPick+0x428>)
 800c014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c01a:	d10b      	bne.n	800c034 <CheckPick+0x38c>
			{
				while(ps4.button == SQUARE);
 800c01c:	bf00      	nop
 800c01e:	4b2c      	ldr	r3, [pc, #176]	; (800c0d0 <CheckPick+0x428>)
 800c020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c026:	d0fa      	beq.n	800c01e <CheckPick+0x376>
				PP_stop(&pp);
 800c028:	482a      	ldr	r0, [pc, #168]	; (800c0d4 <CheckPick+0x42c>)
 800c02a:	f7f9 ff52 	bl	8005ed2 <PP_stop>
				picked_right = 0;
 800c02e:	4b2b      	ldr	r3, [pc, #172]	; (800c0dc <CheckPick+0x434>)
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
			}

			if(pp.real_y <= -0.25)
 800c034:	4b27      	ldr	r3, [pc, #156]	; (800c0d4 <CheckPick+0x42c>)
 800c036:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800c03a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c03e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	d803      	bhi.n	800c050 <CheckPick+0x3a8>
				pp.target_vel[0] = 0.65;
 800c048:	4b22      	ldr	r3, [pc, #136]	; (800c0d4 <CheckPick+0x42c>)
 800c04a:	4a26      	ldr	r2, [pc, #152]	; (800c0e4 <CheckPick+0x43c>)
 800c04c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

			if(In_Pick && pp.real_y <= -0.3)
 800c050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c054:	4824      	ldr	r0, [pc, #144]	; (800c0e8 <CheckPick+0x440>)
 800c056:	f006 f8a5 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d110      	bne.n	800c082 <CheckPick+0x3da>
 800c060:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <CheckPick+0x42c>)
 800c062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c064:	4618      	mov	r0, r3
 800c066:	f7f4 fa6f 	bl	8000548 <__aeabi_f2d>
 800c06a:	a317      	add	r3, pc, #92	; (adr r3, 800c0c8 <CheckPick+0x420>)
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	f7f4 fd3e 	bl	8000af0 <__aeabi_dcmple>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d100      	bne.n	800c07c <CheckPick+0x3d4>
 800c07a:	e002      	b.n	800c082 <CheckPick+0x3da>
				PP_stop(&pp);
 800c07c:	4815      	ldr	r0, [pc, #84]	; (800c0d4 <CheckPick+0x42c>)
 800c07e:	f7f9 ff28 	bl	8005ed2 <PP_stop>
		while(pp.pp_start)
 800c082:	4b14      	ldr	r3, [pc, #80]	; (800c0d4 <CheckPick+0x42c>)
 800c084:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1bf      	bne.n	800c012 <CheckPick+0x36a>
		}

		if(picked_right)
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <CheckPick+0x434>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d010      	beq.n	800c0bc <CheckPick+0x414>
		{
//			LoadRing()
			if(!type_3_done)
 800c09a:	4b14      	ldr	r3, [pc, #80]	; (800c0ec <CheckPick+0x444>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d104      	bne.n	800c0ac <CheckPick+0x404>
				lidar.pos_counter = CENTER_4;
 800c0a2:	4b13      	ldr	r3, [pc, #76]	; (800c0f0 <CheckPick+0x448>)
 800c0a4:	2207      	movs	r2, #7
 800c0a6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800c0aa:	e003      	b.n	800c0b4 <CheckPick+0x40c>
			else
				lidar.pos_counter = UPPER_RIGHT;
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <CheckPick+0x448>)
 800c0ae:	2208      	movs	r2, #8
 800c0b0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
//			osDelay(500);
//			close_servo;
			setSpeedMODN(5.5);
 800c0b4:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800c0b8:	f7f8 fe06 	bl	8004cc8 <setSpeedMODN>
		}
	}
}
 800c0bc:	bf00      	nop
 800c0be:	3790      	adds	r7, #144	; 0x90
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	33333333 	.word	0x33333333
 800c0cc:	bfd33333 	.word	0xbfd33333
 800c0d0:	2000a028 	.word	0x2000a028
 800c0d4:	20006ccc 	.word	0x20006ccc
 800c0d8:	40020c00 	.word	0x40020c00
 800c0dc:	2000721c 	.word	0x2000721c
 800c0e0:	0801fcd0 	.word	0x0801fcd0
 800c0e4:	3f266666 	.word	0x3f266666
 800c0e8:	40021000 	.word	0x40021000
 800c0ec:	20009444 	.word	0x20009444
 800c0f0:	20009038 	.word	0x20009038

0800c0f4 <CheckShoot>:

void CheckShoot()
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800c0f8:	4b3a      	ldr	r3, [pc, #232]	; (800c1e4 <CheckShoot+0xf0>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d012      	beq.n	800c126 <CheckShoot+0x32>
 800c100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c104:	4838      	ldr	r0, [pc, #224]	; (800c1e8 <CheckShoot+0xf4>)
 800c106:	f006 f84d 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <CheckShoot+0x32>
	{
		shoot_done = 1;
 800c110:	4b36      	ldr	r3, [pc, #216]	; (800c1ec <CheckShoot+0xf8>)
 800c112:	2201      	movs	r2, #1
 800c114:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800c116:	4b33      	ldr	r3, [pc, #204]	; (800c1e4 <CheckShoot+0xf0>)
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
		push_return;
 800c11c:	4934      	ldr	r1, [pc, #208]	; (800c1f0 <CheckShoot+0xfc>)
 800c11e:	4835      	ldr	r0, [pc, #212]	; (800c1f4 <CheckShoot+0x100>)
 800c120:	f7f5 f833 	bl	800118a <WriteBDC>
 800c124:	e00e      	b.n	800c144 <CheckShoot+0x50>
	}
	else if(In_ShotDone)
 800c126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c12a:	482f      	ldr	r0, [pc, #188]	; (800c1e8 <CheckShoot+0xf4>)
 800c12c:	f006 f83a 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <CheckShoot+0x50>
	{
		push_return;
 800c136:	492e      	ldr	r1, [pc, #184]	; (800c1f0 <CheckShoot+0xfc>)
 800c138:	482e      	ldr	r0, [pc, #184]	; (800c1f4 <CheckShoot+0x100>)
 800c13a:	f7f5 f826 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800c13e:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <CheckShoot+0xf8>)
 800c140:	2201      	movs	r2, #1
 800c142:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800c144:	4b29      	ldr	r3, [pc, #164]	; (800c1ec <CheckShoot+0xf8>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d026      	beq.n	800c19a <CheckShoot+0xa6>
 800c14c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c150:	4825      	ldr	r0, [pc, #148]	; (800c1e8 <CheckShoot+0xf4>)
 800c152:	f006 f827 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d11e      	bne.n	800c19a <CheckShoot+0xa6>
 800c15c:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <CheckShoot+0x104>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01a      	beq.n	800c19a <CheckShoot+0xa6>
	{
		wait_load = 0;
 800c164:	4b24      	ldr	r3, [pc, #144]	; (800c1f8 <CheckShoot+0x104>)
 800c166:	2200      	movs	r2, #0
 800c168:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800c16a:	4b20      	ldr	r3, [pc, #128]	; (800c1ec <CheckShoot+0xf8>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	601a      	str	r2, [r3, #0]
		push_stop;
 800c170:	2100      	movs	r1, #0
 800c172:	4820      	ldr	r0, [pc, #128]	; (800c1f4 <CheckShoot+0x100>)
 800c174:	f7f5 f809 	bl	800118a <WriteBDC>
		adjust_servo;
 800c178:	f240 31b6 	movw	r1, #950	; 0x3b6
 800c17c:	481f      	ldr	r0, [pc, #124]	; (800c1fc <CheckShoot+0x108>)
 800c17e:	f7fd fe9b 	bl	8009eb8 <ServoSetPulse>
		reload = 1;
 800c182:	4b1f      	ldr	r3, [pc, #124]	; (800c200 <CheckShoot+0x10c>)
 800c184:	2201      	movs	r2, #1
 800c186:	601a      	str	r2, [r3, #0]
		pick_manual(4000);
 800c188:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800c18c:	481d      	ldr	r0, [pc, #116]	; (800c204 <CheckShoot+0x110>)
 800c18e:	f7f4 fffc 	bl	800118a <WriteBDC>
		must_load = 1;
 800c192:	4b1d      	ldr	r3, [pc, #116]	; (800c208 <CheckShoot+0x114>)
 800c194:	2201      	movs	r2, #1
 800c196:	601a      	str	r2, [r3, #0]
		}
	}

//	if(In_ShotReady && !shoot_start)
//		push_stop;
}
 800c198:	e021      	b.n	800c1de <CheckShoot+0xea>
	else if(shoot_done && In_ShotReady)
 800c19a:	4b14      	ldr	r3, [pc, #80]	; (800c1ec <CheckShoot+0xf8>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01d      	beq.n	800c1de <CheckShoot+0xea>
 800c1a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c1a6:	4810      	ldr	r0, [pc, #64]	; (800c1e8 <CheckShoot+0xf4>)
 800c1a8:	f005 fffc 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d115      	bne.n	800c1de <CheckShoot+0xea>
		shoot_done = 0;
 800c1b2:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <CheckShoot+0xf8>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
		push_stop;
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	480e      	ldr	r0, [pc, #56]	; (800c1f4 <CheckShoot+0x100>)
 800c1bc:	f7f4 ffe5 	bl	800118a <WriteBDC>
		if(wait_load)
 800c1c0:	4b0d      	ldr	r3, [pc, #52]	; (800c1f8 <CheckShoot+0x104>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00a      	beq.n	800c1de <CheckShoot+0xea>
			reload = 1;
 800c1c8:	4b0d      	ldr	r3, [pc, #52]	; (800c200 <CheckShoot+0x10c>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
			pick_manual(4000);
 800c1ce:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800c1d2:	480c      	ldr	r0, [pc, #48]	; (800c204 <CheckShoot+0x110>)
 800c1d4:	f7f4 ffd9 	bl	800118a <WriteBDC>
			wait_load = 0;
 800c1d8:	4b07      	ldr	r3, [pc, #28]	; (800c1f8 <CheckShoot+0x104>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	200092dc 	.word	0x200092dc
 800c1e8:	40021000 	.word	0x40021000
 800c1ec:	20008f84 	.word	0x20008f84
 800c1f0:	ffffb1e1 	.word	0xffffb1e1
 800c1f4:	20009688 	.word	0x20009688
 800c1f8:	2000748c 	.word	0x2000748c
 800c1fc:	20007874 	.word	0x20007874
 800c200:	20007754 	.word	0x20007754
 800c204:	20007714 	.word	0x20007714
 800c208:	20009678 	.word	0x20009678

0800c20c <CheckLoad>:

void CheckLoad()
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800c210:	4b6b      	ldr	r3, [pc, #428]	; (800c3c0 <CheckLoad+0x1b4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d103      	bne.n	800c220 <CheckLoad+0x14>
 800c218:	4b6a      	ldr	r3, [pc, #424]	; (800c3c4 <CheckLoad+0x1b8>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d02d      	beq.n	800c27c <CheckLoad+0x70>
	{
		if(pick_enc >= 10000 && !load_stop_once)
 800c220:	4b69      	ldr	r3, [pc, #420]	; (800c3c8 <CheckLoad+0x1bc>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f242 720f 	movw	r2, #9999	; 0x270f
 800c228:	4293      	cmp	r3, r2
 800c22a:	dd17      	ble.n	800c25c <CheckLoad+0x50>
 800c22c:	4b67      	ldr	r3, [pc, #412]	; (800c3cc <CheckLoad+0x1c0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d113      	bne.n	800c25c <CheckLoad+0x50>
		{
			pick_stop;
 800c234:	2100      	movs	r1, #0
 800c236:	4866      	ldr	r0, [pc, #408]	; (800c3d0 <CheckLoad+0x1c4>)
 800c238:	f7f4 ffa7 	bl	800118a <WriteBDC>
			osDelay(200);
 800c23c:	20c8      	movs	r0, #200	; 0xc8
 800c23e:	f00a fe98 	bl	8016f72 <osDelay>
			pick_manual(4000);
 800c242:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800c246:	4862      	ldr	r0, [pc, #392]	; (800c3d0 <CheckLoad+0x1c4>)
 800c248:	f7f4 ff9f 	bl	800118a <WriteBDC>
			adjust_servo;
 800c24c:	f240 31b6 	movw	r1, #950	; 0x3b6
 800c250:	4860      	ldr	r0, [pc, #384]	; (800c3d4 <CheckLoad+0x1c8>)
 800c252:	f7fd fe31 	bl	8009eb8 <ServoSetPulse>
//			close_servo;
			load_stop_once = 1;
 800c256:	4b5d      	ldr	r3, [pc, #372]	; (800c3cc <CheckLoad+0x1c0>)
 800c258:	2201      	movs	r2, #1
 800c25a:	601a      	str	r2, [r3, #0]
		}

		if(pick_enc >= 16500)
 800c25c:	4b5a      	ldr	r3, [pc, #360]	; (800c3c8 <CheckLoad+0x1bc>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f244 0273 	movw	r2, #16499	; 0x4073
 800c264:	4293      	cmp	r3, r2
 800c266:	dd09      	ble.n	800c27c <CheckLoad+0x70>
		{
			load_start = 0;
 800c268:	4b55      	ldr	r3, [pc, #340]	; (800c3c0 <CheckLoad+0x1b4>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
			reload = 0;
 800c26e:	4b55      	ldr	r3, [pc, #340]	; (800c3c4 <CheckLoad+0x1b8>)
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
			pick_stop;
 800c274:	2100      	movs	r1, #0
 800c276:	4856      	ldr	r0, [pc, #344]	; (800c3d0 <CheckLoad+0x1c4>)
 800c278:	f7f4 ff87 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 8000)
 800c27c:	4b50      	ldr	r3, [pc, #320]	; (800c3c0 <CheckLoad+0x1b4>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d048      	beq.n	800c316 <CheckLoad+0x10a>
 800c284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c288:	4853      	ldr	r0, [pc, #332]	; (800c3d8 <CheckLoad+0x1cc>)
 800c28a:	f005 ff8b 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b01      	cmp	r3, #1
 800c292:	d140      	bne.n	800c316 <CheckLoad+0x10a>
 800c294:	4b4c      	ldr	r3, [pc, #304]	; (800c3c8 <CheckLoad+0x1bc>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800c29c:	db3b      	blt.n	800c316 <CheckLoad+0x10a>
	{
		load_start = 0;
 800c29e:	4b48      	ldr	r3, [pc, #288]	; (800c3c0 <CheckLoad+0x1b4>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	601a      	str	r2, [r3, #0]
		pick_enc_buf = pick_enc;
 800c2a4:	4b48      	ldr	r3, [pc, #288]	; (800c3c8 <CheckLoad+0x1bc>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a4c      	ldr	r2, [pc, #304]	; (800c3dc <CheckLoad+0x1d0>)
 800c2aa:	6013      	str	r3, [r2, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800c2ac:	4b4c      	ldr	r3, [pc, #304]	; (800c3e0 <CheckLoad+0x1d4>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d016      	beq.n	800c2e2 <CheckLoad+0xd6>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800c2b4:	e003      	b.n	800c2be <CheckLoad+0xb2>
				pick_manual(-2500);
 800c2b6:	494b      	ldr	r1, [pc, #300]	; (800c3e4 <CheckLoad+0x1d8>)
 800c2b8:	4845      	ldr	r0, [pc, #276]	; (800c3d0 <CheckLoad+0x1c4>)
 800c2ba:	f7f4 ff66 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800c2be:	4b47      	ldr	r3, [pc, #284]	; (800c3dc <CheckLoad+0x1d0>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b41      	ldr	r3, [pc, #260]	; (800c3c8 <CheckLoad+0x1bc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c2cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c2d0:	4b45      	ldr	r3, [pc, #276]	; (800c3e8 <CheckLoad+0x1dc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	dbee      	blt.n	800c2b6 <CheckLoad+0xaa>
 800c2d8:	e010      	b.n	800c2fc <CheckLoad+0xf0>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800c2da:	4942      	ldr	r1, [pc, #264]	; (800c3e4 <CheckLoad+0x1d8>)
 800c2dc:	483c      	ldr	r0, [pc, #240]	; (800c3d0 <CheckLoad+0x1c4>)
 800c2de:	f7f4 ff54 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800c2e2:	4b3e      	ldr	r3, [pc, #248]	; (800c3dc <CheckLoad+0x1d0>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	4b38      	ldr	r3, [pc, #224]	; (800c3c8 <CheckLoad+0x1bc>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c2f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c2f4:	4b3d      	ldr	r3, [pc, #244]	; (800c3ec <CheckLoad+0x1e0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	dbee      	blt.n	800c2da <CheckLoad+0xce>
		}

		pick_tol = 100;
 800c2fc:	4b3c      	ldr	r3, [pc, #240]	; (800c3f0 <CheckLoad+0x1e4>)
 800c2fe:	2264      	movs	r2, #100	; 0x64
 800c300:	601a      	str	r2, [r3, #0]
		pick_stop;
 800c302:	2100      	movs	r1, #0
 800c304:	4832      	ldr	r0, [pc, #200]	; (800c3d0 <CheckLoad+0x1c4>)
 800c306:	f7f4 ff40 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800c30a:	4b3a      	ldr	r3, [pc, #232]	; (800c3f4 <CheckLoad+0x1e8>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <CheckLoad+0x10a>
			AutoLoadRing();
 800c312:	f000 f8a5 	bl	800c460 <AutoLoadRing>
	}

	if(reload && In_Load)
 800c316:	4b2b      	ldr	r3, [pc, #172]	; (800c3c4 <CheckLoad+0x1b8>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d046      	beq.n	800c3ac <CheckLoad+0x1a0>
 800c31e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c322:	482d      	ldr	r0, [pc, #180]	; (800c3d8 <CheckLoad+0x1cc>)
 800c324:	f005 ff3e 	bl	80121a4 <HAL_GPIO_ReadPin>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d13e      	bne.n	800c3ac <CheckLoad+0x1a0>
	{
		pick_enc_buf = pick_enc;
 800c32e:	4b26      	ldr	r3, [pc, #152]	; (800c3c8 <CheckLoad+0x1bc>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2a      	ldr	r2, [pc, #168]	; (800c3dc <CheckLoad+0x1d0>)
 800c334:	6013      	str	r3, [r2, #0]
		pick_tol = 10;
 800c336:	4b2e      	ldr	r3, [pc, #184]	; (800c3f0 <CheckLoad+0x1e4>)
 800c338:	220a      	movs	r2, #10
 800c33a:	601a      	str	r2, [r3, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800c33c:	4b28      	ldr	r3, [pc, #160]	; (800c3e0 <CheckLoad+0x1d4>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d016      	beq.n	800c372 <CheckLoad+0x166>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800c344:	e003      	b.n	800c34e <CheckLoad+0x142>
				pick_manual(-2500);
 800c346:	4927      	ldr	r1, [pc, #156]	; (800c3e4 <CheckLoad+0x1d8>)
 800c348:	4821      	ldr	r0, [pc, #132]	; (800c3d0 <CheckLoad+0x1c4>)
 800c34a:	f7f4 ff1e 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800c34e:	4b23      	ldr	r3, [pc, #140]	; (800c3dc <CheckLoad+0x1d0>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b1d      	ldr	r3, [pc, #116]	; (800c3c8 <CheckLoad+0x1bc>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c35c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c360:	4b21      	ldr	r3, [pc, #132]	; (800c3e8 <CheckLoad+0x1dc>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	dbee      	blt.n	800c346 <CheckLoad+0x13a>
 800c368:	e010      	b.n	800c38c <CheckLoad+0x180>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800c36a:	491e      	ldr	r1, [pc, #120]	; (800c3e4 <CheckLoad+0x1d8>)
 800c36c:	4818      	ldr	r0, [pc, #96]	; (800c3d0 <CheckLoad+0x1c4>)
 800c36e:	f7f4 ff0c 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800c372:	4b1a      	ldr	r3, [pc, #104]	; (800c3dc <CheckLoad+0x1d0>)
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	4b14      	ldr	r3, [pc, #80]	; (800c3c8 <CheckLoad+0x1bc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c380:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c384:	4b19      	ldr	r3, [pc, #100]	; (800c3ec <CheckLoad+0x1e0>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	dbee      	blt.n	800c36a <CheckLoad+0x15e>
		}
//		pick_tol = 100;
		reload = 0;
 800c38c:	4b0d      	ldr	r3, [pc, #52]	; (800c3c4 <CheckLoad+0x1b8>)
 800c38e:	2200      	movs	r2, #0
 800c390:	601a      	str	r2, [r3, #0]
		must_load = 0;
 800c392:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <CheckLoad+0x1ec>)
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
		pick_stop;
 800c398:	2100      	movs	r1, #0
 800c39a:	480d      	ldr	r0, [pc, #52]	; (800c3d0 <CheckLoad+0x1c4>)
 800c39c:	f7f4 fef5 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800c3a0:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <CheckLoad+0x1e8>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d101      	bne.n	800c3ac <CheckLoad+0x1a0>
			AutoLoadRing();
 800c3a8:	f000 f85a 	bl	800c460 <AutoLoadRing>

//	if(loaded >= 8)
//	{
//		load_adjust_servo;
//	}
	if(loaded >= 10)
 800c3ac:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <CheckLoad+0x1f0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b09      	cmp	r3, #9
 800c3b2:	dd02      	ble.n	800c3ba <CheckLoad+0x1ae>
		loaded = 0;
 800c3b4:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <CheckLoad+0x1f0>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]

}
 800c3ba:	bf00      	nop
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20007350 	.word	0x20007350
 800c3c4:	20007754 	.word	0x20007754
 800c3c8:	20006be8 	.word	0x20006be8
 800c3cc:	2000998c 	.word	0x2000998c
 800c3d0:	20007714 	.word	0x20007714
 800c3d4:	20007874 	.word	0x20007874
 800c3d8:	40021000 	.word	0x40021000
 800c3dc:	20009c54 	.word	0x20009c54
 800c3e0:	20006a24 	.word	0x20006a24
 800c3e4:	fffff63c 	.word	0xfffff63c
 800c3e8:	2000663c 	.word	0x2000663c
 800c3ec:	2000a2e8 	.word	0x2000a2e8
 800c3f0:	200072bc 	.word	0x200072bc
 800c3f4:	200092e0 	.word	0x200092e0
 800c3f8:	20009678 	.word	0x20009678
 800c3fc:	20009438 	.word	0x20009438

0800c400 <Checking>:
	}

}

void Checking()
{
 800c400:	b580      	push	{r7, lr}
 800c402:	af00      	add	r7, sp, #0
	CheckShoot();
 800c404:	f7ff fe76 	bl	800c0f4 <CheckShoot>
	CheckLoad();
 800c408:	f7ff ff00 	bl	800c20c <CheckLoad>
	CheckPick();
 800c40c:	f7ff fc4c 	bl	800bca8 <CheckPick>
	CheckPitch();
 800c410:	f7ff fc06 	bl	800bc20 <CheckPitch>
}
 800c414:	bf00      	nop
 800c416:	bd80      	pop	{r7, pc}

0800c418 <LoadRing>:

void LoadRing(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	af00      	add	r7, sp, #0
	load_start = 1;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <LoadRing+0x20>)
 800c41e:	2201      	movs	r2, #1
 800c420:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <LoadRing+0x24>)
 800c424:	2200      	movs	r2, #0
 800c426:	601a      	str	r2, [r3, #0]
	pick_up;
 800c428:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800c42c:	4804      	ldr	r0, [pc, #16]	; (800c440 <LoadRing+0x28>)
 800c42e:	f7f4 feac 	bl	800118a <WriteBDC>
}
 800c432:	bf00      	nop
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20007350 	.word	0x20007350
 800c43c:	2000998c 	.word	0x2000998c
 800c440:	20007714 	.word	0x20007714

0800c444 <StopAutoPP>:

void StopAutoPP(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800c448:	4803      	ldr	r0, [pc, #12]	; (800c458 <StopAutoPP+0x14>)
 800c44a:	f7f9 fd42 	bl	8005ed2 <PP_stop>
	RNSStop(&rns);
 800c44e:	4803      	ldr	r0, [pc, #12]	; (800c45c <StopAutoPP+0x18>)
 800c450:	f7fd f8a2 	bl	8009598 <RNSStop>
}
 800c454:	bf00      	nop
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20006ccc 	.word	0x20006ccc
 800c45c:	20008f10 	.word	0x20008f10

0800c460 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
	cylinder_load;
 800c464:	4a0d      	ldr	r2, [pc, #52]	; (800c49c <AutoLoadRing+0x3c>)
 800c466:	7f13      	ldrb	r3, [r2, #28]
 800c468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c46c:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c46e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c472:	f00a fd7e 	bl	8016f72 <osDelay>
	cylinder_retract;
 800c476:	4a09      	ldr	r2, [pc, #36]	; (800c49c <AutoLoadRing+0x3c>)
 800c478:	7f13      	ldrb	r3, [r2, #28]
 800c47a:	f36f 1386 	bfc	r3, #6, #1
 800c47e:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800c480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c484:	f00a fd75 	bl	8016f72 <osDelay>
	loaded++;
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <AutoLoadRing+0x40>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	4a04      	ldr	r2, [pc, #16]	; (800c4a0 <AutoLoadRing+0x40>)
 800c490:	6013      	str	r3, [r2, #0]

	AdjustRings();
 800c492:	f000 f807 	bl	800c4a4 <AdjustRings>
}
 800c496:	bf00      	nop
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	200095ac 	.word	0x200095ac
 800c4a0:	20009438 	.word	0x20009438

0800c4a4 <AdjustRings>:

void AdjustRings(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
	if(load_adjust)
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <AdjustRings+0x1c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <AdjustRings+0x12>
	{
		servo_enb = 1;
 800c4b0:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <AdjustRings+0x20>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	2000944c 	.word	0x2000944c
 800c4c4:	2000a594 	.word	0x2000a594

0800c4c8 <ResetCoordinate>:

void ResetCoordinate(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800c4cc:	2117      	movs	r1, #23
 800c4ce:	4804      	ldr	r0, [pc, #16]	; (800c4e0 <ResetCoordinate+0x18>)
 800c4d0:	f7fd f980 	bl	80097d4 <RNSSet>
	PP_reset(&pp);
 800c4d4:	4803      	ldr	r0, [pc, #12]	; (800c4e4 <ResetCoordinate+0x1c>)
 800c4d6:	f7f9 fd1d 	bl	8005f14 <PP_reset>
}
 800c4da:	bf00      	nop
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20008f10 	.word	0x20008f10
 800c4e4:	20006ccc 	.word	0x20006ccc

0800c4e8 <ResetPickEnc>:

void ResetPickEnc(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	f7f5 fb71 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800c4f2:	4b02      	ldr	r3, [pc, #8]	; (800c4fc <ResetPickEnc+0x14>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
}
 800c4f8:	bf00      	nop
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20006be8 	.word	0x20006be8

0800c500 <enq>:

void enq(void) {
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800c504:	4908      	ldr	r1, [pc, #32]	; (800c528 <enq+0x28>)
 800c506:	2061      	movs	r0, #97	; 0x61
 800c508:	f7fd fb1e 	bl	8009b48 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800c50c:	4b06      	ldr	r3, [pc, #24]	; (800c528 <enq+0x28>)
 800c50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c510:	4a06      	ldr	r2, [pc, #24]	; (800c52c <enq+0x2c>)
 800c512:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800c514:	4b04      	ldr	r3, [pc, #16]	; (800c528 <enq+0x28>)
 800c516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c518:	4a05      	ldr	r2, [pc, #20]	; (800c530 <enq+0x30>)
 800c51a:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <enq+0x28>)
 800c51e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c520:	4a04      	ldr	r2, [pc, #16]	; (800c534 <enq+0x34>)
 800c522:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800c524:	bf00      	nop
 800c526:	bd80      	pop	{r7, pc}
 800c528:	20008f10 	.word	0x20008f10
 800c52c:	200099c8 	.word	0x200099c8
 800c530:	2000981c 	.word	0x2000981c
 800c534:	20009980 	.word	0x20009980

0800c538 <tune>:

void tune(void)
{
 800c538:	b5b0      	push	{r4, r5, r7, lr}
 800c53a:	af00      	add	r7, sp, #0
	if(ps4.button == UP)
 800c53c:	4bb0      	ldr	r3, [pc, #704]	; (800c800 <tune+0x2c8>)
 800c53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c540:	2b10      	cmp	r3, #16
 800c542:	d117      	bne.n	800c574 <tune+0x3c>
	{
		while(ps4.button == UP);
 800c544:	bf00      	nop
 800c546:	4bae      	ldr	r3, [pc, #696]	; (800c800 <tune+0x2c8>)
 800c548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c54a:	2b10      	cmp	r3, #16
 800c54c:	d0fb      	beq.n	800c546 <tune+0xe>
//		tune_p = 1;
//		tune_i = 0;
//		tune_d = 0;
		if(blue)
 800c54e:	4bad      	ldr	r3, [pc, #692]	; (800c804 <tune+0x2cc>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d007      	beq.n	800c566 <tune+0x2e>
			BluePickLess = pick_enc_buf - pick_enc;
 800c556:	4bac      	ldr	r3, [pc, #688]	; (800c808 <tune+0x2d0>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	4bac      	ldr	r3, [pc, #688]	; (800c80c <tune+0x2d4>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	4aab      	ldr	r2, [pc, #684]	; (800c810 <tune+0x2d8>)
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	e006      	b.n	800c574 <tune+0x3c>
		else
			RedPickLess = pick_enc_buf - pick_enc;
 800c566:	4ba8      	ldr	r3, [pc, #672]	; (800c808 <tune+0x2d0>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4ba8      	ldr	r3, [pc, #672]	; (800c80c <tune+0x2d4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	4aa8      	ldr	r2, [pc, #672]	; (800c814 <tune+0x2dc>)
 800c572:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == DOWN)
 800c574:	4ba2      	ldr	r3, [pc, #648]	; (800c800 <tune+0x2c8>)
 800c576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c578:	2b40      	cmp	r3, #64	; 0x40
 800c57a:	d117      	bne.n	800c5ac <tune+0x74>
	{
		while(ps4.button == DOWN);
 800c57c:	bf00      	nop
 800c57e:	4ba0      	ldr	r3, [pc, #640]	; (800c800 <tune+0x2c8>)
 800c580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c582:	2b40      	cmp	r3, #64	; 0x40
 800c584:	d0fb      	beq.n	800c57e <tune+0x46>
		if(blue)
 800c586:	4b9f      	ldr	r3, [pc, #636]	; (800c804 <tune+0x2cc>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d007      	beq.n	800c59e <tune+0x66>
			BluePickMore = pick_enc - pick_enc_buf;
 800c58e:	4b9f      	ldr	r3, [pc, #636]	; (800c80c <tune+0x2d4>)
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b9d      	ldr	r3, [pc, #628]	; (800c808 <tune+0x2d0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	4a9f      	ldr	r2, [pc, #636]	; (800c818 <tune+0x2e0>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	e006      	b.n	800c5ac <tune+0x74>
		else
			RedPickMore = pick_enc - pick_enc_buf;
 800c59e:	4b9b      	ldr	r3, [pc, #620]	; (800c80c <tune+0x2d4>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b99      	ldr	r3, [pc, #612]	; (800c808 <tune+0x2d0>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	4a9c      	ldr	r2, [pc, #624]	; (800c81c <tune+0x2e4>)
 800c5aa:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == LEFT)
 800c5ac:	4b94      	ldr	r3, [pc, #592]	; (800c800 <tune+0x2c8>)
 800c5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5b0:	2b80      	cmp	r3, #128	; 0x80
 800c5b2:	d10d      	bne.n	800c5d0 <tune+0x98>
	{
		while(ps4.button == LEFT);
 800c5b4:	bf00      	nop
 800c5b6:	4b92      	ldr	r3, [pc, #584]	; (800c800 <tune+0x2c8>)
 800c5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ba:	2b80      	cmp	r3, #128	; 0x80
 800c5bc:	d0fb      	beq.n	800c5b6 <tune+0x7e>
		tune_p = 0;
 800c5be:	4b98      	ldr	r3, [pc, #608]	; (800c820 <tune+0x2e8>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800c5c4:	4b97      	ldr	r3, [pc, #604]	; (800c824 <tune+0x2ec>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800c5ca:	4b97      	ldr	r3, [pc, #604]	; (800c828 <tune+0x2f0>)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800c5d0:	4b8b      	ldr	r3, [pc, #556]	; (800c800 <tune+0x2c8>)
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	2b20      	cmp	r3, #32
 800c5d6:	d110      	bne.n	800c5fa <tune+0xc2>
	{
		while(ps4.button == RIGHT);
 800c5d8:	bf00      	nop
 800c5da:	4b89      	ldr	r3, [pc, #548]	; (800c800 <tune+0x2c8>)
 800c5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	d0fb      	beq.n	800c5da <tune+0xa2>
		wheel++;
 800c5e2:	4b92      	ldr	r3, [pc, #584]	; (800c82c <tune+0x2f4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	4a90      	ldr	r2, [pc, #576]	; (800c82c <tune+0x2f4>)
 800c5ea:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800c5ec:	4b8f      	ldr	r3, [pc, #572]	; (800c82c <tune+0x2f4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b05      	cmp	r3, #5
 800c5f2:	dd02      	ble.n	800c5fa <tune+0xc2>
			wheel = 1;
 800c5f4:	4b8d      	ldr	r3, [pc, #564]	; (800c82c <tune+0x2f4>)
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800c5fa:	4b89      	ldr	r3, [pc, #548]	; (800c820 <tune+0x2e8>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 809e 	beq.w	800c740 <tune+0x208>
	{
		switch(wheel)
 800c604:	4b89      	ldr	r3, [pc, #548]	; (800c82c <tune+0x2f4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3b01      	subs	r3, #1
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	f200 8200 	bhi.w	800ca10 <tune+0x4d8>
 800c610:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <tune+0xe0>)
 800c612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c616:	bf00      	nop
 800c618:	0800c629 	.word	0x0800c629
 800c61c:	0800c66f 	.word	0x0800c66f
 800c620:	0800c6b5 	.word	0x0800c6b5
 800c624:	0800c6fb 	.word	0x0800c6fb
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800c628:	4b75      	ldr	r3, [pc, #468]	; (800c800 <tune+0x2c8>)
 800c62a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f3 ff8b 	bl	8000548 <__aeabi_f2d>
 800c632:	a371      	add	r3, pc, #452	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 ffde 	bl	80005f8 <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4614      	mov	r4, r2
 800c642:	461d      	mov	r5, r3
 800c644:	4b7a      	ldr	r3, [pc, #488]	; (800c830 <tune+0x2f8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7f3 ff7d 	bl	8000548 <__aeabi_f2d>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	4620      	mov	r0, r4
 800c654:	4629      	mov	r1, r5
 800c656:	f7f3 fe19 	bl	800028c <__adddf3>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	4610      	mov	r0, r2
 800c660:	4619      	mov	r1, r3
 800c662:	f7f4 fac1 	bl	8000be8 <__aeabi_d2f>
 800c666:	4603      	mov	r3, r0
 800c668:	4a71      	ldr	r2, [pc, #452]	; (800c830 <tune+0x2f8>)
 800c66a:	6013      	str	r3, [r2, #0]
			break;
 800c66c:	e1d0      	b.n	800ca10 <tune+0x4d8>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800c66e:	4b64      	ldr	r3, [pc, #400]	; (800c800 <tune+0x2c8>)
 800c670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c672:	4618      	mov	r0, r3
 800c674:	f7f3 ff68 	bl	8000548 <__aeabi_f2d>
 800c678:	a35f      	add	r3, pc, #380	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f3 ffbb 	bl	80005f8 <__aeabi_dmul>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4614      	mov	r4, r2
 800c688:	461d      	mov	r5, r3
 800c68a:	4b6a      	ldr	r3, [pc, #424]	; (800c834 <tune+0x2fc>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7f3 ff5a 	bl	8000548 <__aeabi_f2d>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 fdf6 	bl	800028c <__adddf3>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	f7f4 fa9e 	bl	8000be8 <__aeabi_d2f>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	4a61      	ldr	r2, [pc, #388]	; (800c834 <tune+0x2fc>)
 800c6b0:	6013      	str	r3, [r2, #0]
			break;
 800c6b2:	e1ad      	b.n	800ca10 <tune+0x4d8>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800c6b4:	4b52      	ldr	r3, [pc, #328]	; (800c800 <tune+0x2c8>)
 800c6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7f3 ff45 	bl	8000548 <__aeabi_f2d>
 800c6be:	a34e      	add	r3, pc, #312	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f7f3 ff98 	bl	80005f8 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	461d      	mov	r5, r3
 800c6d0:	4b59      	ldr	r3, [pc, #356]	; (800c838 <tune+0x300>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7f3 ff37 	bl	8000548 <__aeabi_f2d>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4620      	mov	r0, r4
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7f4 fa7b 	bl	8000be8 <__aeabi_d2f>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4a50      	ldr	r2, [pc, #320]	; (800c838 <tune+0x300>)
 800c6f6:	6013      	str	r3, [r2, #0]
			break;
 800c6f8:	e18a      	b.n	800ca10 <tune+0x4d8>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800c6fa:	4b41      	ldr	r3, [pc, #260]	; (800c800 <tune+0x2c8>)
 800c6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7f3 ff22 	bl	8000548 <__aeabi_f2d>
 800c704:	a33c      	add	r3, pc, #240	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f7f3 ff75 	bl	80005f8 <__aeabi_dmul>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	4614      	mov	r4, r2
 800c714:	461d      	mov	r5, r3
 800c716:	4b49      	ldr	r3, [pc, #292]	; (800c83c <tune+0x304>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f3 ff14 	bl	8000548 <__aeabi_f2d>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 fdb0 	bl	800028c <__adddf3>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	4610      	mov	r0, r2
 800c732:	4619      	mov	r1, r3
 800c734:	f7f4 fa58 	bl	8000be8 <__aeabi_d2f>
 800c738:	4603      	mov	r3, r0
 800c73a:	4a40      	ldr	r2, [pc, #256]	; (800c83c <tune+0x304>)
 800c73c:	6013      	str	r3, [r2, #0]
			break;
 800c73e:	e167      	b.n	800ca10 <tune+0x4d8>
		}
	}
	else if(tune_i)
 800c740:	4b38      	ldr	r3, [pc, #224]	; (800c824 <tune+0x2ec>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80c5 	beq.w	800c8d4 <tune+0x39c>
	{
		switch(wheel)
 800c74a:	4b38      	ldr	r3, [pc, #224]	; (800c82c <tune+0x2f4>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3b01      	subs	r3, #1
 800c750:	2b03      	cmp	r3, #3
 800c752:	f200 815d 	bhi.w	800ca10 <tune+0x4d8>
 800c756:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <tune+0x224>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c7b3 	.word	0x0800c7b3
 800c764:	0800c849 	.word	0x0800c849
 800c768:	0800c88f 	.word	0x0800c88f
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800c76c:	4b24      	ldr	r3, [pc, #144]	; (800c800 <tune+0x2c8>)
 800c76e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c770:	4618      	mov	r0, r3
 800c772:	f7f3 fee9 	bl	8000548 <__aeabi_f2d>
 800c776:	a320      	add	r3, pc, #128	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f3 ff3c 	bl	80005f8 <__aeabi_dmul>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4614      	mov	r4, r2
 800c786:	461d      	mov	r5, r3
 800c788:	4b2d      	ldr	r3, [pc, #180]	; (800c840 <tune+0x308>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7f3 fedb 	bl	8000548 <__aeabi_f2d>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd77 	bl	800028c <__adddf3>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	f7f4 fa1f 	bl	8000be8 <__aeabi_d2f>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	4a24      	ldr	r2, [pc, #144]	; (800c840 <tune+0x308>)
 800c7ae:	6013      	str	r3, [r2, #0]
			break;
 800c7b0:	e12e      	b.n	800ca10 <tune+0x4d8>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800c7b2:	4b13      	ldr	r3, [pc, #76]	; (800c800 <tune+0x2c8>)
 800c7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7f3 fec6 	bl	8000548 <__aeabi_f2d>
 800c7bc:	a30e      	add	r3, pc, #56	; (adr r3, 800c7f8 <tune+0x2c0>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 ff19 	bl	80005f8 <__aeabi_dmul>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4614      	mov	r4, r2
 800c7cc:	461d      	mov	r5, r3
 800c7ce:	4b1d      	ldr	r3, [pc, #116]	; (800c844 <tune+0x30c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f3 feb8 	bl	8000548 <__aeabi_f2d>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f3 fd54 	bl	800028c <__adddf3>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	f7f4 f9fc 	bl	8000be8 <__aeabi_d2f>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4a14      	ldr	r2, [pc, #80]	; (800c844 <tune+0x30c>)
 800c7f4:	6013      	str	r3, [r2, #0]
			break;
 800c7f6:	e10b      	b.n	800ca10 <tune+0x4d8>
 800c7f8:	eb1c432d 	.word	0xeb1c432d
 800c7fc:	3f1a36e2 	.word	0x3f1a36e2
 800c800:	2000a028 	.word	0x2000a028
 800c804:	20006a24 	.word	0x20006a24
 800c808:	20009c54 	.word	0x20009c54
 800c80c:	20006be8 	.word	0x20006be8
 800c810:	2000663c 	.word	0x2000663c
 800c814:	2000a2e8 	.word	0x2000a2e8
 800c818:	2000a3bc 	.word	0x2000a3bc
 800c81c:	2000a574 	.word	0x2000a574
 800c820:	20007384 	.word	0x20007384
 800c824:	20007218 	.word	0x20007218
 800c828:	20009820 	.word	0x20009820
 800c82c:	200064dc 	.word	0x200064dc
 800c830:	2000a338 	.word	0x2000a338
 800c834:	200075bc 	.word	0x200075bc
 800c838:	20009680 	.word	0x20009680
 800c83c:	20009dc4 	.word	0x20009dc4
 800c840:	20007210 	.word	0x20007210
 800c844:	20009440 	.word	0x20009440
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800c848:	4b97      	ldr	r3, [pc, #604]	; (800caa8 <tune+0x570>)
 800c84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f3 fe7b 	bl	8000548 <__aeabi_f2d>
 800c852:	a391      	add	r3, pc, #580	; (adr r3, 800ca98 <tune+0x560>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fece 	bl	80005f8 <__aeabi_dmul>
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	4614      	mov	r4, r2
 800c862:	461d      	mov	r5, r3
 800c864:	4b91      	ldr	r3, [pc, #580]	; (800caac <tune+0x574>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7f3 fe6d 	bl	8000548 <__aeabi_f2d>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4620      	mov	r0, r4
 800c874:	4629      	mov	r1, r5
 800c876:	f7f3 fd09 	bl	800028c <__adddf3>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	4610      	mov	r0, r2
 800c880:	4619      	mov	r1, r3
 800c882:	f7f4 f9b1 	bl	8000be8 <__aeabi_d2f>
 800c886:	4603      	mov	r3, r0
 800c888:	4a88      	ldr	r2, [pc, #544]	; (800caac <tune+0x574>)
 800c88a:	6013      	str	r3, [r2, #0]
			break;
 800c88c:	e0c0      	b.n	800ca10 <tune+0x4d8>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800c88e:	4b86      	ldr	r3, [pc, #536]	; (800caa8 <tune+0x570>)
 800c890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c892:	4618      	mov	r0, r3
 800c894:	f7f3 fe58 	bl	8000548 <__aeabi_f2d>
 800c898:	a37f      	add	r3, pc, #508	; (adr r3, 800ca98 <tune+0x560>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 feab 	bl	80005f8 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	461d      	mov	r5, r3
 800c8aa:	4b81      	ldr	r3, [pc, #516]	; (800cab0 <tune+0x578>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f3 fe4a 	bl	8000548 <__aeabi_f2d>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fce6 	bl	800028c <__adddf3>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f7f4 f98e 	bl	8000be8 <__aeabi_d2f>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	4a78      	ldr	r2, [pc, #480]	; (800cab0 <tune+0x578>)
 800c8d0:	6013      	str	r3, [r2, #0]
			break;
 800c8d2:	e09d      	b.n	800ca10 <tune+0x4d8>
		}
	}
	else
	{
		switch(wheel)
 800c8d4:	4b77      	ldr	r3, [pc, #476]	; (800cab4 <tune+0x57c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	f200 8098 	bhi.w	800ca10 <tune+0x4d8>
 800c8e0:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <tune+0x3b0>)
 800c8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e6:	bf00      	nop
 800c8e8:	0800c8f9 	.word	0x0800c8f9
 800c8ec:	0800c93f 	.word	0x0800c93f
 800c8f0:	0800c985 	.word	0x0800c985
 800c8f4:	0800c9cb 	.word	0x0800c9cb
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800c8f8:	4b6b      	ldr	r3, [pc, #428]	; (800caa8 <tune+0x570>)
 800c8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f3 fe23 	bl	8000548 <__aeabi_f2d>
 800c902:	a367      	add	r3, pc, #412	; (adr r3, 800caa0 <tune+0x568>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f7f3 fe76 	bl	80005f8 <__aeabi_dmul>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4614      	mov	r4, r2
 800c912:	461d      	mov	r5, r3
 800c914:	4b68      	ldr	r3, [pc, #416]	; (800cab8 <tune+0x580>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7f3 fe15 	bl	8000548 <__aeabi_f2d>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4620      	mov	r0, r4
 800c924:	4629      	mov	r1, r5
 800c926:	f7f3 fcb1 	bl	800028c <__adddf3>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4610      	mov	r0, r2
 800c930:	4619      	mov	r1, r3
 800c932:	f7f4 f959 	bl	8000be8 <__aeabi_d2f>
 800c936:	4603      	mov	r3, r0
 800c938:	4a5f      	ldr	r2, [pc, #380]	; (800cab8 <tune+0x580>)
 800c93a:	6013      	str	r3, [r2, #0]
			break;
 800c93c:	e068      	b.n	800ca10 <tune+0x4d8>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800c93e:	4b5a      	ldr	r3, [pc, #360]	; (800caa8 <tune+0x570>)
 800c940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c942:	4618      	mov	r0, r3
 800c944:	f7f3 fe00 	bl	8000548 <__aeabi_f2d>
 800c948:	a355      	add	r3, pc, #340	; (adr r3, 800caa0 <tune+0x568>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f7f3 fe53 	bl	80005f8 <__aeabi_dmul>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	4614      	mov	r4, r2
 800c958:	461d      	mov	r5, r3
 800c95a:	4b58      	ldr	r3, [pc, #352]	; (800cabc <tune+0x584>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7f3 fdf2 	bl	8000548 <__aeabi_f2d>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	f7f3 fc8e 	bl	800028c <__adddf3>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4610      	mov	r0, r2
 800c976:	4619      	mov	r1, r3
 800c978:	f7f4 f936 	bl	8000be8 <__aeabi_d2f>
 800c97c:	4603      	mov	r3, r0
 800c97e:	4a4f      	ldr	r2, [pc, #316]	; (800cabc <tune+0x584>)
 800c980:	6013      	str	r3, [r2, #0]
			break;
 800c982:	e045      	b.n	800ca10 <tune+0x4d8>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800c984:	4b48      	ldr	r3, [pc, #288]	; (800caa8 <tune+0x570>)
 800c986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f3 fddd 	bl	8000548 <__aeabi_f2d>
 800c98e:	a344      	add	r3, pc, #272	; (adr r3, 800caa0 <tune+0x568>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f7f3 fe30 	bl	80005f8 <__aeabi_dmul>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4614      	mov	r4, r2
 800c99e:	461d      	mov	r5, r3
 800c9a0:	4b47      	ldr	r3, [pc, #284]	; (800cac0 <tune+0x588>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7f3 fdcf 	bl	8000548 <__aeabi_f2d>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	f7f3 fc6b 	bl	800028c <__adddf3>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	4619      	mov	r1, r3
 800c9be:	f7f4 f913 	bl	8000be8 <__aeabi_d2f>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4a3e      	ldr	r2, [pc, #248]	; (800cac0 <tune+0x588>)
 800c9c6:	6013      	str	r3, [r2, #0]
			break;
 800c9c8:	e022      	b.n	800ca10 <tune+0x4d8>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800c9ca:	4b37      	ldr	r3, [pc, #220]	; (800caa8 <tune+0x570>)
 800c9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f3 fdba 	bl	8000548 <__aeabi_f2d>
 800c9d4:	a332      	add	r3, pc, #200	; (adr r3, 800caa0 <tune+0x568>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fe0d 	bl	80005f8 <__aeabi_dmul>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4614      	mov	r4, r2
 800c9e4:	461d      	mov	r5, r3
 800c9e6:	4b37      	ldr	r3, [pc, #220]	; (800cac4 <tune+0x58c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7f3 fdac 	bl	8000548 <__aeabi_f2d>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	f7f3 fc48 	bl	800028c <__adddf3>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4610      	mov	r0, r2
 800ca02:	4619      	mov	r1, r3
 800ca04:	f7f4 f8f0 	bl	8000be8 <__aeabi_d2f>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	4a2e      	ldr	r2, [pc, #184]	; (800cac4 <tune+0x58c>)
 800ca0c:	6013      	str	r3, [r2, #0]
			break;
 800ca0e:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800ca10:	4b25      	ldr	r3, [pc, #148]	; (800caa8 <tune+0x570>)
 800ca12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca18:	d105      	bne.n	800ca26 <tune+0x4ee>
	{
		while(ps4.button == OPTION);
 800ca1a:	bf00      	nop
 800ca1c:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <tune+0x570>)
 800ca1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca24:	d0fa      	beq.n	800ca1c <tune+0x4e4>
//			BluePickLess = pick_enc_buf - pick_enc;
//		else
//			RedPickLess = pick_enc_buf - pick_enc;
	}

	if(ps4.button == TRIANGLE)
 800ca26:	4b20      	ldr	r3, [pc, #128]	; (800caa8 <tune+0x570>)
 800ca28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca2e:	d11e      	bne.n	800ca6e <tune+0x536>
	{
		while(ps4.button == TRIANGLE);
 800ca30:	bf00      	nop
 800ca32:	4b1d      	ldr	r3, [pc, #116]	; (800caa8 <tune+0x570>)
 800ca34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca3a:	d0fa      	beq.n	800ca32 <tune+0x4fa>

		LoadRing();
 800ca3c:	f7ff fcec 	bl	800c418 <LoadRing>
		load_adjust = 1;
 800ca40:	4b21      	ldr	r3, [pc, #132]	; (800cac8 <tune+0x590>)
 800ca42:	2201      	movs	r2, #1
 800ca44:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800ca46:	4b21      	ldr	r3, [pc, #132]	; (800cacc <tune+0x594>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800ca4c:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ca50:	481f      	ldr	r0, [pc, #124]	; (800cad0 <tune+0x598>)
 800ca52:	f7fd fa31 	bl	8009eb8 <ServoSetPulse>
		cylinder_retract;
 800ca56:	4a1f      	ldr	r2, [pc, #124]	; (800cad4 <tune+0x59c>)
 800ca58:	7f13      	ldrb	r3, [r2, #28]
 800ca5a:	f36f 1386 	bfc	r3, #6, #1
 800ca5e:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800ca60:	f7ff fd20 	bl	800c4a4 <AdjustRings>
		adjust_servo;
 800ca64:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ca68:	4819      	ldr	r0, [pc, #100]	; (800cad0 <tune+0x598>)
 800ca6a:	f7fd fa25 	bl	8009eb8 <ServoSetPulse>
	}

	if(ps4.button == CROSS)
 800ca6e:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <tune+0x570>)
 800ca70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca76:	d105      	bne.n	800ca84 <tune+0x54c>
	{
		while(ps4.button == CROSS);
 800ca78:	bf00      	nop
 800ca7a:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <tune+0x570>)
 800ca7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca82:	d0fa      	beq.n	800ca7a <tune+0x542>
	}

	led9 = 1;
 800ca84:	4a13      	ldr	r2, [pc, #76]	; (800cad4 <tune+0x59c>)
 800ca86:	7e13      	ldrb	r3, [r2, #24]
 800ca88:	f043 0310 	orr.w	r3, r3, #16
 800ca8c:	7613      	strb	r3, [r2, #24]
}
 800ca8e:	bf00      	nop
 800ca90:	bdb0      	pop	{r4, r5, r7, pc}
 800ca92:	bf00      	nop
 800ca94:	f3af 8000 	nop.w
 800ca98:	eb1c432d 	.word	0xeb1c432d
 800ca9c:	3f1a36e2 	.word	0x3f1a36e2
 800caa0:	88e368f1 	.word	0x88e368f1
 800caa4:	3ee4f8b5 	.word	0x3ee4f8b5
 800caa8:	2000a028 	.word	0x2000a028
 800caac:	20009818 	.word	0x20009818
 800cab0:	20006a68 	.word	0x20006a68
 800cab4:	200064dc 	.word	0x200064dc
 800cab8:	2000a314 	.word	0x2000a314
 800cabc:	2000720c 	.word	0x2000720c
 800cac0:	200064e0 	.word	0x200064e0
 800cac4:	20009ae8 	.word	0x20009ae8
 800cac8:	2000944c 	.word	0x2000944c
 800cacc:	20009498 	.word	0x20009498
 800cad0:	20007874 	.word	0x20007874
 800cad4:	200095ac 	.word	0x200095ac

0800cad8 <flywheelStop>:
	VESCPDC(leftU / 19999.00, &vesc1);
	VESCPDC(rightU / 19999.00, &vesc2);
}

void flywheelStop()
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
	vesc_speed = 0;
 800cadc:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <flywheelStop+0x38>)
 800cade:	f04f 0200 	mov.w	r2, #0
 800cae2:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&left_PID);
 800cae4:	480b      	ldr	r0, [pc, #44]	; (800cb14 <flywheelStop+0x3c>)
 800cae6:	f7f8 fd44 	bl	8005572 <PIDDelayInit>
	PIDDelayInit(&right_PID);
 800caea:	480b      	ldr	r0, [pc, #44]	; (800cb18 <flywheelStop+0x40>)
 800caec:	f7f8 fd41 	bl	8005572 <PIDDelayInit>

	leftU = 0;
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <flywheelStop+0x44>)
 800caf2:	f04f 0200 	mov.w	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]
	rightU = 0;
 800caf8:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <flywheelStop+0x48>)
 800cafa:	f04f 0200 	mov.w	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]

	VESCStop(&vesc1);
 800cb00:	4808      	ldr	r0, [pc, #32]	; (800cb24 <flywheelStop+0x4c>)
 800cb02:	f000 fe5b 	bl	800d7bc <VESCStop>
	VESCStop(&vesc2);
 800cb06:	4808      	ldr	r0, [pc, #32]	; (800cb28 <flywheelStop+0x50>)
 800cb08:	f000 fe58 	bl	800d7bc <VESCStop>
}
 800cb0c:	bf00      	nop
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200065a0 	.word	0x200065a0
 800cb14:	20008ebc 	.word	0x20008ebc
 800cb18:	20009f6c 	.word	0x20009f6c
 800cb1c:	20006888 	.word	0x20006888
 800cb20:	20006b08 	.word	0x20006b08
 800cb24:	20006b0c 	.word	0x20006b0c
 800cb28:	20009990 	.word	0x20009990

0800cb2c <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800cb30:	4802      	ldr	r0, [pc, #8]	; (800cb3c <DMA1_Stream0_IRQHandler+0x10>)
 800cb32:	f004 fe1b 	bl	801176c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800cb36:	bf00      	nop
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20009fc0 	.word	0x20009fc0

0800cb40 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800cb44:	4802      	ldr	r0, [pc, #8]	; (800cb50 <DMA1_Stream3_IRQHandler+0x10>)
 800cb46:	f004 fe11 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cb4a:	bf00      	nop
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	20006540 	.word	0x20006540

0800cb54 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800cb58:	4802      	ldr	r0, [pc, #8]	; (800cb64 <DMA1_Stream2_IRQHandler+0x10>)
 800cb5a:	f004 fe07 	bl	801176c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800cb5e:	bf00      	nop
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20005a20 	.word	0x20005a20

0800cb68 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800cb6c:	4802      	ldr	r0, [pc, #8]	; (800cb78 <DMA1_Stream1_IRQHandler+0x10>)
 800cb6e:	f004 fdfd 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cb72:	bf00      	nop
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	20005b64 	.word	0x20005b64

0800cb7c <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800cb80:	4802      	ldr	r0, [pc, #8]	; (800cb8c <DMA1_Stream4_IRQHandler+0x10>)
 800cb82:	f004 fdf3 	bl	801176c <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800cb86:	bf00      	nop
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	200061d8 	.word	0x200061d8

0800cb90 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800cb94:	4802      	ldr	r0, [pc, #8]	; (800cba0 <DMA1_Stream5_IRQHandler+0x10>)
 800cb96:	f004 fde9 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cb9a:	bf00      	nop
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20005a80 	.word	0x20005a80

0800cba4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800cba8:	4802      	ldr	r0, [pc, #8]	; (800cbb4 <DMA1_Stream6_IRQHandler+0x10>)
 800cbaa:	f004 fddf 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cbae:	bf00      	nop
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20005d6c 	.word	0x20005d6c

0800cbb8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800cbbc:	4802      	ldr	r0, [pc, #8]	; (800cbc8 <DMA1_Stream7_IRQHandler+0x10>)
 800cbbe:	f004 fdd5 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cbc2:	bf00      	nop
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20006238 	.word	0x20006238

0800cbcc <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800cbd0:	4802      	ldr	r0, [pc, #8]	; (800cbdc <DMA2_Stream0_IRQHandler+0x10>)
 800cbd2:	f004 fdcb 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cbd6:	bf00      	nop
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	200063d0 	.word	0x200063d0

0800cbe0 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800cbe4:	4802      	ldr	r0, [pc, #8]	; (800cbf0 <DMA2_Stream1_IRQHandler+0x10>)
 800cbe6:	f004 fdc1 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cbea:	bf00      	nop
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	200062e0 	.word	0x200062e0

0800cbf4 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800cbf8:	4802      	ldr	r0, [pc, #8]	; (800cc04 <DMA2_Stream2_IRQHandler+0x10>)
 800cbfa:	f004 fdb7 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cbfe:	bf00      	nop
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20009ee4 	.word	0x20009ee4

0800cc08 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800cc0c:	4802      	ldr	r0, [pc, #8]	; (800cc18 <DMA2_Stream3_IRQHandler+0x10>)
 800cc0e:	f004 fdad 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cc12:	bf00      	nop
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20006430 	.word	0x20006430

0800cc1c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800cc20:	4802      	ldr	r0, [pc, #8]	; (800cc2c <DMA2_Stream5_IRQHandler+0x10>)
 800cc22:	f004 fda3 	bl	801176c <HAL_DMA_IRQHandler>
}
 800cc26:	bf00      	nop
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2000a340 	.word	0x2000a340

0800cc30 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0

}
 800cc34:	bf00      	nop
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	af00      	add	r7, sp, #0

}
 800cc42:	bf00      	nop
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0

	while(1){
 800cc50:	e7fe      	b.n	800cc50 <MemManage_Handler+0x4>

0800cc52 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800cc52:	b480      	push	{r7}
 800cc54:	af00      	add	r7, sp, #0

}
 800cc56:	bf00      	nop
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800cc60:	b480      	push	{r7}
 800cc62:	af00      	add	r7, sp, #0

}
 800cc64:	bf00      	nop
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	af00      	add	r7, sp, #0

}
 800cc72:	bf00      	nop
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800cc80:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b81      	cmp	r3, #129	; 0x81
 800cc88:	d109      	bne.n	800cc9e <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800cc8a:	4b13      	ldr	r3, [pc, #76]	; (800ccd8 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3301      	adds	r3, #1
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	b21a      	sxth	r2, r3
 800cc98:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800cc9a:	805a      	strh	r2, [r3, #2]
 800cc9c:	e00d      	b.n	800ccba <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b91      	cmp	r3, #145	; 0x91
 800cca6:	d108      	bne.n	800ccba <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800cca8:	4b0b      	ldr	r3, [pc, #44]	; (800ccd8 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800ccaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	b21a      	sxth	r2, r3
 800ccb6:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800ccb8:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800ccba:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800ccc2:	20c8      	movs	r0, #200	; 0xc8
 800ccc4:	f7f4 ffe6 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800ccc8:	4804      	ldr	r0, [pc, #16]	; (800ccdc <TIM1_UP_TIM10_IRQHandler+0x60>)
 800ccca:	f008 fa53 	bl	8015174 <HAL_TIM_IRQHandler>
	return;
 800ccce:	bf00      	nop
}
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20005f34 	.word	0x20005f34
 800ccd8:	20006494 	.word	0x20006494
 800ccdc:	20005c04 	.word	0x20005c04

0800cce0 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800cce4:	4b12      	ldr	r3, [pc, #72]	; (800cd30 <TIM4_IRQHandler+0x50>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b81      	cmp	r3, #129	; 0x81
 800ccec:	d109      	bne.n	800cd02 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800ccee:	4b11      	ldr	r3, [pc, #68]	; (800cd34 <TIM4_IRQHandler+0x54>)
 800ccf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	b21a      	sxth	r2, r3
 800ccfc:	4b0d      	ldr	r3, [pc, #52]	; (800cd34 <TIM4_IRQHandler+0x54>)
 800ccfe:	805a      	strh	r2, [r3, #2]
 800cd00:	e00d      	b.n	800cd1e <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800cd02:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <TIM4_IRQHandler+0x50>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b91      	cmp	r3, #145	; 0x91
 800cd0a:	d108      	bne.n	800cd1e <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800cd0c:	4b09      	ldr	r3, [pc, #36]	; (800cd34 <TIM4_IRQHandler+0x54>)
 800cd0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	3b01      	subs	r3, #1
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	b21a      	sxth	r2, r3
 800cd1a:	4b06      	ldr	r3, [pc, #24]	; (800cd34 <TIM4_IRQHandler+0x54>)
 800cd1c:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800cd1e:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <TIM4_IRQHandler+0x50>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2200      	movs	r2, #0
 800cd24:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800cd26:	2064      	movs	r0, #100	; 0x64
 800cd28:	f7f4 ffb4 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800cd2c:	bf00      	nop
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20005b24 	.word	0x20005b24
 800cd34:	200064b8 	.word	0x200064b8

0800cd38 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800cd3c:	4803      	ldr	r0, [pc, #12]	; (800cd4c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800cd3e:	f008 fa19 	bl	8015174 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800cd42:	4803      	ldr	r0, [pc, #12]	; (800cd50 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800cd44:	f008 fa16 	bl	8015174 <HAL_TIM_IRQHandler>
	return;
 800cd48:	bf00      	nop
}
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20005ae4 	.word	0x20005ae4
 800cd50:	20005dcc 	.word	0x20005dcc

0800cd54 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800cd58:	4802      	ldr	r0, [pc, #8]	; (800cd64 <TIM2_IRQHandler+0x10>)
 800cd5a:	f008 fa0b 	bl	8015174 <HAL_TIM_IRQHandler>
}
 800cd5e:	bf00      	nop
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20006038 	.word	0x20006038

0800cd68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd78:	d109      	bne.n	800cd8e <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800cd7a:	f003 fb83 	bl	8010484 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800cd7e:	4806      	ldr	r0, [pc, #24]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800cd80:	f7f5 f853 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	4a04      	ldr	r2, [pc, #16]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd8c:	6013      	str	r3, [r2, #0]
	}
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	200095ac 	.word	0x200095ac
 800cd9c:	20009704 	.word	0x20009704

0800cda0 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cdaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d102      	bne.n	800cdb8 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800cdb2:	4803      	ldr	r0, [pc, #12]	; (800cdc0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800cdb4:	f7fb ff86 	bl	8008cc4 <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	2000a028 	.word	0x2000a028

0800cdc4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800cdc8:	4802      	ldr	r0, [pc, #8]	; (800cdd4 <I2C1_EV_IRQHandler+0x10>)
 800cdca:	f005 fca7 	bl	801271c <HAL_I2C_EV_IRQHandler>

}
 800cdce:	bf00      	nop
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20006b90 	.word	0x20006b90

0800cdd8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800cddc:	480a      	ldr	r0, [pc, #40]	; (800ce08 <I2C1_ER_IRQHandler+0x30>)
 800cdde:	f005 fe0a 	bl	80129f6 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800cde2:	480a      	ldr	r0, [pc, #40]	; (800ce0c <I2C1_ER_IRQHandler+0x34>)
 800cde4:	f004 fbea 	bl	80115bc <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800cde8:	4807      	ldr	r0, [pc, #28]	; (800ce08 <I2C1_ER_IRQHandler+0x30>)
 800cdea:	f005 fb51 	bl	8012490 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800cdee:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <I2C1_ER_IRQHandler+0x38>)
 800cdf0:	2208      	movs	r2, #8
 800cdf2:	4906      	ldr	r1, [pc, #24]	; (800ce0c <I2C1_ER_IRQHandler+0x34>)
 800cdf4:	4804      	ldr	r0, [pc, #16]	; (800ce08 <I2C1_ER_IRQHandler+0x30>)
 800cdf6:	f7f6 ff35 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800cdfa:	4903      	ldr	r1, [pc, #12]	; (800ce08 <I2C1_ER_IRQHandler+0x30>)
 800cdfc:	4805      	ldr	r0, [pc, #20]	; (800ce14 <I2C1_ER_IRQHandler+0x3c>)
 800cdfe:	f7fb ff74 	bl	8008cea <PSxInitDMA>

}
 800ce02:	bf00      	nop
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20006b90 	.word	0x20006b90
 800ce0c:	20009fc0 	.word	0x20009fc0
 800ce10:	00061a80 	.word	0x00061a80
 800ce14:	2000a028 	.word	0x2000a028

0800ce18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08c      	sub	sp, #48	; 0x30
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800ce28:	2200      	movs	r2, #0
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	201c      	movs	r0, #28
 800ce2e:	f004 fad1 	bl	80113d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ce32:	201c      	movs	r0, #28
 800ce34:	f004 faea 	bl	801140c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ce38:	2300      	movs	r3, #0
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	4b20      	ldr	r3, [pc, #128]	; (800cec0 <HAL_InitTick+0xa8>)
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	4a1f      	ldr	r2, [pc, #124]	; (800cec0 <HAL_InitTick+0xa8>)
 800ce42:	f043 0301 	orr.w	r3, r3, #1
 800ce46:	6413      	str	r3, [r2, #64]	; 0x40
 800ce48:	4b1d      	ldr	r3, [pc, #116]	; (800cec0 <HAL_InitTick+0xa8>)
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ce54:	f107 0210 	add.w	r2, r7, #16
 800ce58:	f107 0314 	add.w	r3, r7, #20
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f007 fe92 	bl	8014b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ce64:	f007 fe68 	bl	8014b38 <HAL_RCC_GetPCLK1Freq>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	4a14      	ldr	r2, [pc, #80]	; (800cec4 <HAL_InitTick+0xac>)
 800ce72:	fba2 2303 	umull	r2, r3, r2, r3
 800ce76:	0c9b      	lsrs	r3, r3, #18
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ce7c:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <HAL_InitTick+0xb0>)
 800ce7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ce82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800ce84:	4b10      	ldr	r3, [pc, #64]	; (800cec8 <HAL_InitTick+0xb0>)
 800ce86:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce8a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ce8c:	4a0e      	ldr	r2, [pc, #56]	; (800cec8 <HAL_InitTick+0xb0>)
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ce92:	4b0d      	ldr	r3, [pc, #52]	; (800cec8 <HAL_InitTick+0xb0>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce98:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <HAL_InitTick+0xb0>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ce9e:	480a      	ldr	r0, [pc, #40]	; (800cec8 <HAL_InitTick+0xb0>)
 800cea0:	f007 ffc2 	bl	8014e28 <HAL_TIM_Base_Init>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d104      	bne.n	800ceb4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ceaa:	4807      	ldr	r0, [pc, #28]	; (800cec8 <HAL_InitTick+0xb0>)
 800ceac:	f008 f80b 	bl	8014ec6 <HAL_TIM_Base_Start_IT>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	e000      	b.n	800ceb6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3730      	adds	r7, #48	; 0x30
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	40023800 	.word	0x40023800
 800cec4:	431bde83 	.word	0x431bde83
 800cec8:	20006038 	.word	0x20006038

0800cecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
	return 1;
 800ced0:	2301      	movs	r3, #1
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <_kill>:

int _kill(int pid, int sig)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800cee6:	f00c fd91 	bl	8019a0c <__errno>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2216      	movs	r2, #22
 800ceee:	601a      	str	r2, [r3, #0]
	return -1;
 800cef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <_exit>:

void _exit (int status)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800cf04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff ffe7 	bl	800cedc <_kill>
	while (1) {}		/* Make sure we hang here */
 800cf0e:	e7fe      	b.n	800cf0e <_exit+0x12>

0800cf10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	e00a      	b.n	800cf38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cf22:	f3af 8000 	nop.w
 800cf26:	4601      	mov	r1, r0
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	60ba      	str	r2, [r7, #8]
 800cf2e:	b2ca      	uxtb	r2, r1
 800cf30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	3301      	adds	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	dbf0      	blt.n	800cf22 <_read+0x12>
	}

return len;
 800cf40:	687b      	ldr	r3, [r7, #4]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3718      	adds	r7, #24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf56:	2300      	movs	r3, #0
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e009      	b.n	800cf70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	60ba      	str	r2, [r7, #8]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	dbf1      	blt.n	800cf5c <_write+0x12>
	}
	return len;
 800cf78:	687b      	ldr	r3, [r7, #4]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3718      	adds	r7, #24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <_close>:

int _close(int file)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
	return -1;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cfaa:	605a      	str	r2, [r3, #4]
	return 0;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <_isatty>:

int _isatty(int file)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b083      	sub	sp, #12
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
	return 1;
 800cfc2:	2301      	movs	r3, #1
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
	return 0;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3714      	adds	r7, #20
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
	...

0800cfec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cff4:	4a14      	ldr	r2, [pc, #80]	; (800d048 <_sbrk+0x5c>)
 800cff6:	4b15      	ldr	r3, [pc, #84]	; (800d04c <_sbrk+0x60>)
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d000:	4b13      	ldr	r3, [pc, #76]	; (800d050 <_sbrk+0x64>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d102      	bne.n	800d00e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d008:	4b11      	ldr	r3, [pc, #68]	; (800d050 <_sbrk+0x64>)
 800d00a:	4a12      	ldr	r2, [pc, #72]	; (800d054 <_sbrk+0x68>)
 800d00c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d00e:	4b10      	ldr	r3, [pc, #64]	; (800d050 <_sbrk+0x64>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4413      	add	r3, r2
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d207      	bcs.n	800d02c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d01c:	f00c fcf6 	bl	8019a0c <__errno>
 800d020:	4603      	mov	r3, r0
 800d022:	220c      	movs	r2, #12
 800d024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d02a:	e009      	b.n	800d040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <_sbrk+0x64>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d032:	4b07      	ldr	r3, [pc, #28]	; (800d050 <_sbrk+0x64>)
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4413      	add	r3, r2
 800d03a:	4a05      	ldr	r2, [pc, #20]	; (800d050 <_sbrk+0x64>)
 800d03c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d03e:	68fb      	ldr	r3, [r7, #12]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	20020000 	.word	0x20020000
 800d04c:	00000400 	.word	0x00000400
 800d050:	200002e8 	.word	0x200002e8
 800d054:	2000a708 	.word	0x2000a708

0800d058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d05c:	4b08      	ldr	r3, [pc, #32]	; (800d080 <SystemInit+0x28>)
 800d05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d062:	4a07      	ldr	r2, [pc, #28]	; (800d080 <SystemInit+0x28>)
 800d064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d06c:	4b04      	ldr	r3, [pc, #16]	; (800d080 <SystemInit+0x28>)
 800d06e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d072:	609a      	str	r2, [r3, #8]
#endif
}
 800d074:	bf00      	nop
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	e000ed00 	.word	0xe000ed00

0800d084 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
	send_func = func;
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <bldc_interface_init+0x1c>)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6013      	str	r3, [r2, #0]
}
 800d092:	bf00      	nop
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	200002ec 	.word	0x200002ec

0800d0a4 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	1618      	asrs	r0, r3, #24
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	1c59      	adds	r1, r3, #1
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	6011      	str	r1, [r2, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	b2c2      	uxtb	r2, r0
 800d0c6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	1418      	asrs	r0, r3, #16
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	1c59      	adds	r1, r3, #1
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	6011      	str	r1, [r2, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	b2c2      	uxtb	r2, r0
 800d0de:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	1218      	asrs	r0, r3, #8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	1c59      	adds	r1, r3, #1
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	6011      	str	r1, [r2, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	b2c2      	uxtb	r2, r0
 800d0f6:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	1c59      	adds	r1, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	6011      	str	r1, [r2, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4413      	add	r3, r2
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	701a      	strb	r2, [r3, #0]
}
 800d10e:	bf00      	nop
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800d11a:	b480      	push	{r7}
 800d11c:	b085      	sub	sp, #20
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	461a      	mov	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4413      	add	r3, r2
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3301      	adds	r3, #1
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	440b      	add	r3, r1
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800d142:	4313      	orrs	r3, r2
 800d144:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	1c9a      	adds	r2, r3, #2
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	601a      	str	r2, [r3, #0]
	return res;
 800d150:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4413      	add	r3, r2
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3301      	adds	r3, #1
 800d17e:	6879      	ldr	r1, [r7, #4]
 800d180:	440b      	add	r3, r1
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d186:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3302      	adds	r3, #2
 800d18e:	6879      	ldr	r1, [r7, #4]
 800d190:	440b      	add	r3, r1
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800d196:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	6812      	ldr	r2, [r2, #0]
 800d19c:	3203      	adds	r2, #3
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	440a      	add	r2, r1
 800d1a2:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800d1a4:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800d1a6:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	1d1a      	adds	r2, r3, #4
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	601a      	str	r2, [r3, #0]
	return res;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	ed87 0a02 	vstr	s0, [r7, #8]
 800d1cc:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7ff ffa2 	bl	800d11a <buffer_get_int16>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d1e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d1e8:	eef0 7a66 	vmov.f32	s15, s13
}
 800d1ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	ed87 0a02 	vstr	s0, [r7, #8]
 800d202:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff ffaa 	bl	800d160 <buffer_get_int32>
 800d20c:	ee07 0a90 	vmov	s15, r0
 800d210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d214:	edd7 7a02 	vldr	s15, [r7, #8]
 800d218:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d21c:	eef0 7a66 	vmov.f32	s15, s13
}
 800d220:	eeb0 0a67 	vmov.f32	s0, s15
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
	...

0800d22c <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d23a:	2300      	movs	r3, #0
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	e016      	b.n	800d26e <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800d240:	897b      	ldrh	r3, [r7, #10]
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	b29b      	uxth	r3, r3
 800d246:	4619      	mov	r1, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	1c5a      	adds	r2, r3, #1
 800d24c:	607a      	str	r2, [r7, #4]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	404b      	eors	r3, r1
 800d252:	b2db      	uxtb	r3, r3
 800d254:	4a0b      	ldr	r2, [pc, #44]	; (800d284 <crc16+0x58>)
 800d256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d25a:	b21a      	sxth	r2, r3
 800d25c:	897b      	ldrh	r3, [r7, #10]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	b21b      	sxth	r3, r3
 800d262:	4053      	eors	r3, r2
 800d264:	b21b      	sxth	r3, r3
 800d266:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	3301      	adds	r3, #1
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	429a      	cmp	r2, r3
 800d274:	d3e4      	bcc.n	800d240 <crc16+0x14>
	}
	return cksum;
 800d276:	897b      	ldrh	r3, [r7, #10]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	0802009c 	.word	0x0802009c

0800d288 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08e      	sub	sp, #56	; 0x38
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60b9      	str	r1, [r7, #8]
 800d290:	607a      	str	r2, [r7, #4]
 800d292:	461a      	mov	r2, r3
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]
 800d298:	4613      	mov	r3, r2
 800d29a:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b06      	cmp	r3, #6
 800d2a0:	d82b      	bhi.n	800d2fa <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	61ba      	str	r2, [r7, #24]
 800d2ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d2b0:	4413      	add	r3, r2
 800d2b2:	221e      	movs	r2, #30
 800d2b4:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	61ba      	str	r2, [r7, #24]
 800d2be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d2c2:	4413      	add	r3, r2
 800d2c4:	7bba      	ldrb	r2, [r7, #14]
 800d2c6:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800d2ca:	f107 0210 	add.w	r2, r7, #16
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f00c fbca 	bl	8019a70 <memcpy>
		ind += len;
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	f107 0210 	add.w	r2, r7, #16
 800d2f2:	4872      	ldr	r0, [pc, #456]	; (800d4bc <comm_can_send_buffer+0x234>)
 800d2f4:	f7f6 fa98 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800d2f8:	e0dc      	b.n	800d4b4 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800d2fe:	2300      	movs	r3, #0
 800d300:	633b      	str	r3, [r7, #48]	; 0x30
 800d302:	e03d      	b.n	800d380 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800d304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d306:	2bff      	cmp	r3, #255	; 0xff
 800d308:	d83f      	bhi.n	800d38a <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	3307      	adds	r3, #7
 800d30e:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800d310:	2307      	movs	r3, #7
 800d312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	3307      	adds	r3, #7
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d30b      	bcc.n	800d33e <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800d326:	f107 0310 	add.w	r3, r7, #16
 800d32a:	3301      	adds	r3, #1
 800d32c:	68b9      	ldr	r1, [r7, #8]
 800d32e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d330:	4411      	add	r1, r2
 800d332:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d336:	4618      	mov	r0, r3
 800d338:	f00c fb9a 	bl	8019a70 <memcpy>
 800d33c:	e011      	b.n	800d362 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	b2da      	uxtb	r2, r3
 800d342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d344:	b2db      	uxtb	r3, r3
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800d34c:	f107 0310 	add.w	r3, r7, #16
 800d350:	3301      	adds	r3, #1
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d356:	4411      	add	r1, r2
 800d358:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d35c:	4618      	mov	r0, r3
 800d35e:	f00c fb87 	bl	8019a70 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800d368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d36c:	3301      	adds	r3, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f107 0210 	add.w	r2, r7, #16
 800d374:	4851      	ldr	r0, [pc, #324]	; (800d4bc <comm_can_send_buffer+0x234>)
 800d376:	f7f6 fa57 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	3307      	adds	r3, #7
 800d37e:	633b      	str	r3, [r7, #48]	; 0x30
 800d380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d3bd      	bcc.n	800d304 <comm_can_send_buffer+0x7c>
 800d388:	e000      	b.n	800d38c <comm_can_send_buffer+0x104>
				break;
 800d38a:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800d38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d390:	e03b      	b.n	800d40a <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800d392:	2306      	movs	r3, #6
 800d394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	0a1b      	lsrs	r3, r3, #8
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	3306      	adds	r3, #6
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d30b      	bcc.n	800d3c8 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800d3b0:	f107 0310 	add.w	r3, r7, #16
 800d3b4:	3302      	adds	r3, #2
 800d3b6:	68b9      	ldr	r1, [r7, #8]
 800d3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ba:	4411      	add	r1, r2
 800d3bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f00c fb55 	bl	8019a70 <memcpy>
 800d3c6:	e011      	b.n	800d3ec <comm_can_send_buffer+0x164>
				send_len = len - i;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800d3d6:	f107 0310 	add.w	r3, r7, #16
 800d3da:	3302      	adds	r3, #2
 800d3dc:	68b9      	ldr	r1, [r7, #8]
 800d3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e0:	4411      	add	r1, r2
 800d3e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f00c fb42 	bl	8019a70 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800d3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f6:	3302      	adds	r3, #2
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	f107 0210 	add.w	r2, r7, #16
 800d3fe:	482f      	ldr	r0, [pc, #188]	; (800d4bc <comm_can_send_buffer+0x234>)
 800d400:	f7f6 fa12 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	3306      	adds	r3, #6
 800d408:	62bb      	str	r3, [r7, #40]	; 0x28
 800d40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d3bf      	bcc.n	800d392 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	623a      	str	r2, [r7, #32]
 800d41c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d420:	4413      	add	r3, r2
 800d422:	221e      	movs	r2, #30
 800d424:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800d428:	6a3b      	ldr	r3, [r7, #32]
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	623a      	str	r2, [r7, #32]
 800d42e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d432:	4413      	add	r3, r2
 800d434:	7bba      	ldrb	r2, [r7, #14]
 800d436:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	0a19      	lsrs	r1, r3, #8
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	1c5a      	adds	r2, r3, #1
 800d442:	623a      	str	r2, [r7, #32]
 800d444:	b2ca      	uxtb	r2, r1
 800d446:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d44a:	440b      	add	r3, r1
 800d44c:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	623a      	str	r2, [r7, #32]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	b2d2      	uxtb	r2, r2
 800d45a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d45e:	440b      	add	r3, r1
 800d460:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	68b8      	ldr	r0, [r7, #8]
 800d468:	f7ff fee0 	bl	800d22c <crc16>
 800d46c:	4603      	mov	r3, r0
 800d46e:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800d470:	8bfb      	ldrh	r3, [r7, #30]
 800d472:	0a1b      	lsrs	r3, r3, #8
 800d474:	b299      	uxth	r1, r3
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	623a      	str	r2, [r7, #32]
 800d47c:	b2ca      	uxtb	r2, r1
 800d47e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d482:	440b      	add	r3, r1
 800d484:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	623a      	str	r2, [r7, #32]
 800d48e:	8bfa      	ldrh	r2, [r7, #30]
 800d490:	b2d2      	uxtb	r2, r2
 800d492:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d496:	440b      	add	r3, r1
 800d498:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	f107 0210 	add.w	r2, r7, #16
 800d4ae:	4803      	ldr	r0, [pc, #12]	; (800d4bc <comm_can_send_buffer+0x234>)
 800d4b0:	f7f6 f9ba 	bl	8003828 <CAN_TxMsgEID>
}
 800d4b4:	bf00      	nop
 800d4b6:	3738      	adds	r7, #56	; 0x38
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20009008 	.word	0x20009008

0800d4c0 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	ed87 0a00 	vstr	s0, [r7]
 800d4cc:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800d4d2:	6838      	ldr	r0, [r7, #0]
 800d4d4:	f7f3 f838 	bl	8000548 <__aeabi_f2d>
 800d4d8:	a310      	add	r3, pc, #64	; (adr r3, 800d51c <comm_can_set_duty+0x5c>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	f7f3 fb35 	bl	8000b58 <__aeabi_d2iz>
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	f107 020c 	add.w	r2, r7, #12
 800d4f4:	f107 0308 	add.w	r3, r7, #8
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff fdd3 	bl	800d0a4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d4fe:	79f9      	ldrb	r1, [r7, #7]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f107 0208 	add.w	r2, r7, #8
 800d508:	4803      	ldr	r0, [pc, #12]	; (800d518 <comm_can_set_duty+0x58>)
 800d50a:	f7f6 f98d 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800d50e:	bf00      	nop
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	20009008 	.word	0x20009008
 800d51c:	00000000 	.word	0x00000000
 800d520:	40f86a00 	.word	0x40f86a00

0800d524 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	ed87 0a00 	vstr	s0, [r7]
 800d530:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800d536:	6838      	ldr	r0, [r7, #0]
 800d538:	f7f3 f806 	bl	8000548 <__aeabi_f2d>
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <comm_can_set_current+0x5c>)
 800d542:	f7f3 f859 	bl	80005f8 <__aeabi_dmul>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4610      	mov	r0, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	f7f3 fb03 	bl	8000b58 <__aeabi_d2iz>
 800d552:	4601      	mov	r1, r0
 800d554:	f107 020c 	add.w	r2, r7, #12
 800d558:	f107 0308 	add.w	r3, r7, #8
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fda1 	bl	800d0a4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d562:	79fb      	ldrb	r3, [r7, #7]
 800d564:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f107 0208 	add.w	r2, r7, #8
 800d570:	4804      	ldr	r0, [pc, #16]	; (800d584 <comm_can_set_current+0x60>)
 800d572:	f7f6 f959 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800d576:	bf00      	nop
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	408f4000 	.word	0x408f4000
 800d584:	20009008 	.word	0x20009008

0800d588 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	ed87 0a00 	vstr	s0, [r7]
 800d594:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800d59a:	edd7 7a00 	vldr	s15, [r7]
 800d59e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5a2:	f107 020c 	add.w	r2, r7, #12
 800d5a6:	f107 0308 	add.w	r3, r7, #8
 800d5aa:	ee17 1a90 	vmov	r1, s15
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fd78 	bl	800d0a4 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f107 0208 	add.w	r2, r7, #8
 800d5c2:	4803      	ldr	r0, [pc, #12]	; (800d5d0 <comm_can_set_rpm+0x48>)
 800d5c4:	f7f6 f930 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20009008 	.word	0x20009008

0800d5d4 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	603b      	str	r3, [r7, #0]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800d5de:	4b30      	ldr	r3, [pc, #192]	; (800d6a0 <decode_VESC+0xcc>)
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	2b04      	cmp	r3, #4
 800d5e4:	d158      	bne.n	800d698 <decode_VESC+0xc4>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800d5e6:	4b2e      	ldr	r3, [pc, #184]	; (800d6a0 <decode_VESC+0xcc>)
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	71fb      	strb	r3, [r7, #7]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800d5ec:	4b2c      	ldr	r3, [pc, #176]	; (800d6a0 <decode_VESC+0xcc>)
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	0a1b      	lsrs	r3, r3, #8
 800d5f2:	71bb      	strb	r3, [r7, #6]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800d5f4:	79bb      	ldrb	r3, [r7, #6]
 800d5f6:	2b09      	cmp	r3, #9
 800d5f8:	d14e      	bne.n	800d698 <decode_VESC+0xc4>
			{
				if(id == 111)
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	2b6f      	cmp	r3, #111	; 0x6f
 800d5fe:	d124      	bne.n	800d64a <decode_VESC+0x76>
				{
					vesc1.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d600:	463b      	mov	r3, r7
 800d602:	4619      	mov	r1, r3
 800d604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d608:	4826      	ldr	r0, [pc, #152]	; (800d6a4 <decode_VESC+0xd0>)
 800d60a:	f7ff fdf4 	bl	800d1f6 <buffer_get_float32>
 800d60e:	eef0 7a40 	vmov.f32	s15, s0
 800d612:	4b25      	ldr	r3, [pc, #148]	; (800d6a8 <decode_VESC+0xd4>)
 800d614:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc1.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d618:	463b      	mov	r3, r7
 800d61a:	4619      	mov	r1, r3
 800d61c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d620:	4820      	ldr	r0, [pc, #128]	; (800d6a4 <decode_VESC+0xd0>)
 800d622:	f7ff fdcd 	bl	800d1c0 <buffer_get_float16>
 800d626:	eef0 7a40 	vmov.f32	s15, s0
 800d62a:	4b1f      	ldr	r3, [pc, #124]	; (800d6a8 <decode_VESC+0xd4>)
 800d62c:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc1.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d630:	463b      	mov	r3, r7
 800d632:	4619      	mov	r1, r3
 800d634:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d638:	481a      	ldr	r0, [pc, #104]	; (800d6a4 <decode_VESC+0xd0>)
 800d63a:	f7ff fdc1 	bl	800d1c0 <buffer_get_float16>
 800d63e:	eef0 7a40 	vmov.f32	s15, s0
 800d642:	4b19      	ldr	r3, [pc, #100]	; (800d6a8 <decode_VESC+0xd4>)
 800d644:	edc3 7a05 	vstr	s15, [r3, #20]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800d648:	e026      	b.n	800d698 <decode_VESC+0xc4>
				else if(id == 112)
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	2b70      	cmp	r3, #112	; 0x70
 800d64e:	d123      	bne.n	800d698 <decode_VESC+0xc4>
					vesc2.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800d650:	463b      	mov	r3, r7
 800d652:	4619      	mov	r1, r3
 800d654:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d658:	4812      	ldr	r0, [pc, #72]	; (800d6a4 <decode_VESC+0xd0>)
 800d65a:	f7ff fdcc 	bl	800d1f6 <buffer_get_float32>
 800d65e:	eef0 7a40 	vmov.f32	s15, s0
 800d662:	4b12      	ldr	r3, [pc, #72]	; (800d6ac <decode_VESC+0xd8>)
 800d664:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d668:	463b      	mov	r3, r7
 800d66a:	4619      	mov	r1, r3
 800d66c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d670:	480c      	ldr	r0, [pc, #48]	; (800d6a4 <decode_VESC+0xd0>)
 800d672:	f7ff fda5 	bl	800d1c0 <buffer_get_float16>
 800d676:	eef0 7a40 	vmov.f32	s15, s0
 800d67a:	4b0c      	ldr	r3, [pc, #48]	; (800d6ac <decode_VESC+0xd8>)
 800d67c:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800d680:	463b      	mov	r3, r7
 800d682:	4619      	mov	r1, r3
 800d684:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d688:	4806      	ldr	r0, [pc, #24]	; (800d6a4 <decode_VESC+0xd0>)
 800d68a:	f7ff fd99 	bl	800d1c0 <buffer_get_float16>
 800d68e:	eef0 7a40 	vmov.f32	s15, s0
 800d692:	4b06      	ldr	r3, [pc, #24]	; (800d6ac <decode_VESC+0xd8>)
 800d694:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	200096d8 	.word	0x200096d8
 800d6a4:	200096f4 	.word	0x200096f4
 800d6a8:	20006b0c 	.word	0x20006b0c
 800d6ac:	20009990 	.word	0x20009990

0800d6b0 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800d6b0:	b4b0      	push	{r4, r5, r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800d6b8:	4b16      	ldr	r3, [pc, #88]	; (800d714 <set_rx_frames+0x64>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	1c53      	adds	r3, r2, #1
 800d6be:	4915      	ldr	r1, [pc, #84]	; (800d714 <set_rx_frames+0x64>)
 800d6c0:	600b      	str	r3, [r1, #0]
 800d6c2:	4915      	ldr	r1, [pc, #84]	; (800d718 <set_rx_frames+0x68>)
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	18ca      	adds	r2, r1, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	461d      	mov	r5, r3
 800d6d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800d6e0:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <set_rx_frames+0x64>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b64      	cmp	r3, #100	; 0x64
 800d6e6:	d102      	bne.n	800d6ee <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <set_rx_frames+0x64>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	0a1b      	lsrs	r3, r3, #8
 800d6f4:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2b07      	cmp	r3, #7
 800d6fa:	d002      	beq.n	800d702 <set_rx_frames+0x52>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b08      	cmp	r3, #8
 800d700:	d101      	bne.n	800d706 <set_rx_frames+0x56>
		return 112;
 800d702:	2370      	movs	r3, #112	; 0x70
 800d704:	e000      	b.n	800d708 <set_rx_frames+0x58>
	else
		return 0;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bcb0      	pop	{r4, r5, r7}
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	20001100 	.word	0x20001100
 800d718:	200002f0 	.word	0x200002f0

0800d71c <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	ed87 0a05 	vstr	s0, [r7, #20]
 800d726:	edc7 0a04 	vstr	s1, [r7, #16]
 800d72a:	ed87 1a03 	vstr	s2, [r7, #12]
 800d72e:	4603      	mov	r3, r0
 800d730:	6079      	str	r1, [r7, #4]
 800d732:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800d734:	4809      	ldr	r0, [pc, #36]	; (800d75c <VESCInit+0x40>)
 800d736:	f7ff fca5 	bl	800d084 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	897a      	ldrh	r2, [r7, #10]
 800d750:	819a      	strh	r2, [r3, #12]
}
 800d752:	bf00      	nop
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	0800d839 	.word	0x0800d839

0800d760 <VESCPDC>:
 * 						  BRightPDC		duty cycle of back right motor
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCPDC(0.5, 0.5, 0.5, 0.5);
 */
void VESCPDC(float Duty, VESC_t* vesc) {
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	ed87 0a01 	vstr	s0, [r7, #4]
 800d76a:	6038      	str	r0, [r7, #0]

	if(Duty > 0.9){
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7f2 feeb 	bl	8000548 <__aeabi_f2d>
 800d772:	a310      	add	r3, pc, #64	; (adr r3, 800d7b4 <VESCPDC+0x54>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f3 f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <VESCPDC+0x26>
		Duty = 0.9;
 800d782:	4b0b      	ldr	r3, [pc, #44]	; (800d7b0 <VESCPDC+0x50>)
 800d784:	607b      	str	r3, [r7, #4]
	}

	comm_can_set_duty(vesc->Instance, Duty);
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	ed97 0a01 	vldr	s0, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fe95 	bl	800d4c0 <comm_can_set_duty>

	vesc->pdc_flag = 1;
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	f892 3020 	ldrb.w	r3, [r2, #32]
 800d79c:	f043 0304 	orr.w	r3, r3, #4
 800d7a0:	f882 3020 	strb.w	r3, [r2, #32]
}
 800d7a4:	bf00      	nop
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	f3af 8000 	nop.w
 800d7b0:	3f666666 	.word	0x3f666666
 800d7b4:	cccccccd 	.word	0xcccccccd
 800d7b8:	3feccccc 	.word	0x3feccccc

0800d7bc <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d007      	beq.n	800d7e4 <VESCStop+0x28>
		comm_can_set_duty(vesc->Instance, 0.0);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	899b      	ldrh	r3, [r3, #12]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800d834 <VESCStop+0x78>
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fe6e 	bl	800d4c0 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d007      	beq.n	800d804 <VESCStop+0x48>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	899b      	ldrh	r3, [r3, #12]
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d834 <VESCStop+0x78>
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fec2 	bl	800d588 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <VESCStop+0x68>
		comm_can_set_current(vesc->Instance, 0.0);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	899b      	ldrh	r3, [r3, #12]
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800d834 <VESCStop+0x78>
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fe80 	bl	800d524 <comm_can_set_current>
	}

	vesc->flags = 0;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2020 	strb.w	r2, [r3, #32]
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	00000000 	.word	0x00000000

0800d838 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800d846:	7bf8      	ldrb	r0, [r7, #15]
 800d848:	2300      	movs	r3, #0
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	f7ff fd1b 	bl	800d288 <comm_can_send_buffer>
}
 800d852:	bf00      	nop
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.25, 0.99, 1.19, 0.96, -1.5, 0.99, -0.25, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	460b      	mov	r3, r1
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	7afa      	ldrb	r2, [r7, #11]
 800d876:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	f892 3298 	ldrb.w	r3, [r2, #664]	; 0x298
 800d880:	f36f 0382 	bfc	r3, #2, #1
 800d884:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298

	if(lidar->mode == CONTINUOUS)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d110      	bne.n	800d8b4 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	33c9      	adds	r3, #201	; 0xc9
 800d89c:	2205      	movs	r2, #5
 800d89e:	4619      	mov	r1, r3
 800d8a0:	f008 fba8 	bl	8015ff4 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	f892 3298 	ldrb.w	r3, [r2, #664]	; 0x298
 800d8aa:	f36f 0300 	bfc	r3, #0, #1
 800d8ae:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
		lidar->angle = B;
		lidar->angle_counter = 2;
		lidar->AdjEnb = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800d8b2:	e09d      	b.n	800d9f0 <LidarInit+0x194>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800d8b4:	4b50      	ldr	r3, [pc, #320]	; (800d9f8 <LidarInit+0x19c>)
 800d8b6:	edd3 7a00 	vldr	s15, [r3]
 800d8ba:	4b4f      	ldr	r3, [pc, #316]	; (800d9f8 <LidarInit+0x19c>)
 800d8bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8c0:	4b4d      	ldr	r3, [pc, #308]	; (800d9f8 <LidarInit+0x19c>)
 800d8c2:	edd3 6a02 	vldr	s13, [r3, #8]
 800d8c6:	4b4c      	ldr	r3, [pc, #304]	; (800d9f8 <LidarInit+0x19c>)
 800d8c8:	ed93 6a03 	vldr	s12, [r3, #12]
 800d8cc:	4b4a      	ldr	r3, [pc, #296]	; (800d9f8 <LidarInit+0x19c>)
 800d8ce:	edd3 5a04 	vldr	s11, [r3, #16]
 800d8d2:	4b49      	ldr	r3, [pc, #292]	; (800d9f8 <LidarInit+0x19c>)
 800d8d4:	ed93 5a05 	vldr	s10, [r3, #20]
 800d8d8:	4b47      	ldr	r3, [pc, #284]	; (800d9f8 <LidarInit+0x19c>)
 800d8da:	ed93 3a06 	vldr	s6, [r3, #24]
 800d8de:	4b46      	ldr	r3, [pc, #280]	; (800d9f8 <LidarInit+0x19c>)
 800d8e0:	edd3 3a07 	vldr	s7, [r3, #28]
 800d8e4:	4b44      	ldr	r3, [pc, #272]	; (800d9f8 <LidarInit+0x19c>)
 800d8e6:	ed93 4a08 	vldr	s8, [r3, #32]
 800d8ea:	4b43      	ldr	r3, [pc, #268]	; (800d9f8 <LidarInit+0x19c>)
 800d8ec:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	eef0 2a45 	vmov.f32	s5, s10
 800d8f6:	eeb0 2a65 	vmov.f32	s4, s11
 800d8fa:	eef0 1a46 	vmov.f32	s3, s12
 800d8fe:	eeb0 1a66 	vmov.f32	s2, s13
 800d902:	eef0 0a47 	vmov.f32	s1, s14
 800d906:	eeb0 0a67 	vmov.f32	s0, s15
 800d90a:	f000 f8e3 	bl	800dad4 <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800d90e:	4b3b      	ldr	r3, [pc, #236]	; (800d9fc <LidarInit+0x1a0>)
 800d910:	edd3 7a00 	vldr	s15, [r3]
 800d914:	4b39      	ldr	r3, [pc, #228]	; (800d9fc <LidarInit+0x1a0>)
 800d916:	ed93 7a01 	vldr	s14, [r3, #4]
 800d91a:	4b38      	ldr	r3, [pc, #224]	; (800d9fc <LidarInit+0x1a0>)
 800d91c:	edd3 6a02 	vldr	s13, [r3, #8]
 800d920:	4b36      	ldr	r3, [pc, #216]	; (800d9fc <LidarInit+0x1a0>)
 800d922:	ed93 6a03 	vldr	s12, [r3, #12]
 800d926:	4b35      	ldr	r3, [pc, #212]	; (800d9fc <LidarInit+0x1a0>)
 800d928:	edd3 5a04 	vldr	s11, [r3, #16]
 800d92c:	4b33      	ldr	r3, [pc, #204]	; (800d9fc <LidarInit+0x1a0>)
 800d92e:	ed93 5a05 	vldr	s10, [r3, #20]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	eef0 2a45 	vmov.f32	s5, s10
 800d938:	eeb0 2a65 	vmov.f32	s4, s11
 800d93c:	eef0 1a46 	vmov.f32	s3, s12
 800d940:	eeb0 1a66 	vmov.f32	s2, s13
 800d944:	eef0 0a47 	vmov.f32	s1, s14
 800d948:	eeb0 0a67 	vmov.f32	s0, s15
 800d94c:	f000 f85a 	bl	800da04 <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800d950:	4b2b      	ldr	r3, [pc, #172]	; (800da00 <LidarInit+0x1a4>)
 800d952:	edd3 7a00 	vldr	s15, [r3]
 800d956:	4b2a      	ldr	r3, [pc, #168]	; (800da00 <LidarInit+0x1a4>)
 800d958:	ed93 7a01 	vldr	s14, [r3, #4]
 800d95c:	4b28      	ldr	r3, [pc, #160]	; (800da00 <LidarInit+0x1a4>)
 800d95e:	edd3 6a02 	vldr	s13, [r3, #8]
 800d962:	4b27      	ldr	r3, [pc, #156]	; (800da00 <LidarInit+0x1a4>)
 800d964:	ed93 6a03 	vldr	s12, [r3, #12]
 800d968:	4b25      	ldr	r3, [pc, #148]	; (800da00 <LidarInit+0x1a4>)
 800d96a:	edd3 5a04 	vldr	s11, [r3, #16]
 800d96e:	4b24      	ldr	r3, [pc, #144]	; (800da00 <LidarInit+0x1a4>)
 800d970:	ed93 5a05 	vldr	s10, [r3, #20]
 800d974:	4b22      	ldr	r3, [pc, #136]	; (800da00 <LidarInit+0x1a4>)
 800d976:	edd3 4a06 	vldr	s9, [r3, #24]
 800d97a:	4b21      	ldr	r3, [pc, #132]	; (800da00 <LidarInit+0x1a4>)
 800d97c:	ed93 4a07 	vldr	s8, [r3, #28]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	eef0 3a44 	vmov.f32	s7, s8
 800d986:	eeb0 3a64 	vmov.f32	s6, s9
 800d98a:	eef0 2a45 	vmov.f32	s5, s10
 800d98e:	eeb0 2a65 	vmov.f32	s4, s11
 800d992:	eef0 1a46 	vmov.f32	s3, s12
 800d996:	eeb0 1a66 	vmov.f32	s2, s13
 800d99a:	eef0 0a47 	vmov.f32	s1, s14
 800d99e:	eeb0 0a67 	vmov.f32	s0, s15
 800d9a2:	f000 f85d 	bl	800da60 <LidarCenterOffsetInit>
		lidar->response = NO;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->fail = 0;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		lidar->pos = PICK_LEFT;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = B;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	33c9      	adds	r3, #201	; 0xc9
 800d9e8:	2202      	movs	r2, #2
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f008 fb02 	bl	8015ff4 <HAL_UART_Receive_IT>
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20000070 	.word	0x20000070
 800d9fc:	20000058 	.word	0x20000058
 800da00:	20000098 	.word	0x20000098

0800da04 <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800da04:	b480      	push	{r7}
 800da06:	b089      	sub	sp, #36	; 0x24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	ed87 0a07 	vstr	s0, [r7, #28]
 800da0e:	edc7 0a06 	vstr	s1, [r7, #24]
 800da12:	ed87 1a05 	vstr	s2, [r7, #20]
 800da16:	edc7 1a04 	vstr	s3, [r7, #16]
 800da1a:	ed87 2a03 	vstr	s4, [r7, #12]
 800da1e:	edc7 2a02 	vstr	s5, [r7, #8]
 800da22:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	69ba      	ldr	r2, [r7, #24]
 800da30:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800da54:	bf00      	nop
 800da56:	3724      	adds	r7, #36	; 0x24
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800da60:	b480      	push	{r7}
 800da62:	b08b      	sub	sp, #44	; 0x2c
 800da64:	af00      	add	r7, sp, #0
 800da66:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800da6a:	edc7 0a08 	vstr	s1, [r7, #32]
 800da6e:	ed87 1a07 	vstr	s2, [r7, #28]
 800da72:	edc7 1a06 	vstr	s3, [r7, #24]
 800da76:	ed87 2a05 	vstr	s4, [r7, #20]
 800da7a:	edc7 2a04 	vstr	s5, [r7, #16]
 800da7e:	ed87 3a03 	vstr	s6, [r7, #12]
 800da82:	edc7 3a02 	vstr	s7, [r7, #8]
 800da86:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a3a      	ldr	r2, [r7, #32]
 800da94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	69ba      	ldr	r2, [r7, #24]
 800daa4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800dac8:	bf00      	nop
 800daca:	372c      	adds	r7, #44	; 0x2c
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b08d      	sub	sp, #52	; 0x34
 800dad8:	af00      	add	r7, sp, #0
 800dada:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800dade:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800dae2:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800dae6:	edc7 1a08 	vstr	s3, [r7, #32]
 800daea:	ed87 2a07 	vstr	s4, [r7, #28]
 800daee:	edc7 2a06 	vstr	s5, [r7, #24]
 800daf2:	ed87 3a05 	vstr	s6, [r7, #20]
 800daf6:	edc7 3a04 	vstr	s7, [r7, #16]
 800dafa:	ed87 4a03 	vstr	s8, [r7, #12]
 800dafe:	edc7 4a02 	vstr	s9, [r7, #8]
 800db02:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db08:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db10:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db18:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6a3a      	ldr	r2, [r7, #32]
 800db20:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	69fa      	ldr	r2, [r7, #28]
 800db28:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69ba      	ldr	r2, [r7, #24]
 800db30:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800db54:	bf00      	nop
 800db56:	3734      	adds	r7, #52	; 0x34
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800db60:	b5b0      	push	{r4, r5, r7, lr}
 800db62:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 800db66:	af00      	add	r7, sp, #0
 800db68:	4602      	mov	r2, r0
 800db6a:	463b      	mov	r3, r7
 800db6c:	6019      	str	r1, [r3, #0]
 800db6e:	1dfb      	adds	r3, r7, #7
 800db70:	701a      	strb	r2, [r3, #0]
	// Pick Left
	float pick_left_adjust[1][7] = {{3.5, 1.8, 0.6, -90.0, 0, 0, 0}};
 800db72:	4bc3      	ldr	r3, [pc, #780]	; (800de80 <LidarSetPos+0x320>)
 800db74:	f507 7469 	add.w	r4, r7, #932	; 0x3a4
 800db78:	461d      	mov	r5, r3
 800db7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	float bang_fence[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};
 800db86:	4bbf      	ldr	r3, [pc, #764]	; (800de84 <LidarSetPos+0x324>)
 800db88:	f507 7462 	add.w	r4, r7, #904	; 0x388
 800db8c:	461d      	mov	r5, r3
 800db8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{PoleSpeed, 1.2, 0.0, -90, 0, 0, 0}};
 800db9a:	4bbb      	ldr	r3, [pc, #748]	; (800de88 <LidarSetPos+0x328>)
 800db9c:	f507 745b 	add.w	r4, r7, #876	; 0x36c
 800dba0:	461d      	mov	r5, r3
 800dba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_1[1][7] = {{PoleSpeed, -1.25, 0.0, -90, 0, 0, 0}};
 800dbae:	4bb7      	ldr	r3, [pc, #732]	; (800de8c <LidarSetPos+0x32c>)
 800dbb0:	f507 7454 	add.w	r4, r7, #848	; 0x350
 800dbb4:	461d      	mov	r5, r3
 800dbb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center[1][7] = {{PoleSpeed, 0.9, 0.0, -90, 0, 0, 0}};
 800dbc2:	4bb3      	ldr	r3, [pc, #716]	; (800de90 <LidarSetPos+0x330>)
 800dbc4:	f507 744d 	add.w	r4, r7, #820	; 0x334
 800dbc8:	461d      	mov	r5, r3
 800dbca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_2[1][7] = {{PoleSpeed, -1.1, 0.0, -90, 0, 0, 0}};
 800dbd6:	4baf      	ldr	r3, [pc, #700]	; (800de94 <LidarSetPos+0x334>)
 800dbd8:	f507 7446 	add.w	r4, r7, #792	; 0x318
 800dbdc:	461d      	mov	r5, r3
 800dbde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_3[1][7] = {{PoleSpeed, 0.9, 0.0, -90, 0, 0, 0}};
 800dbea:	4ba9      	ldr	r3, [pc, #676]	; (800de90 <LidarSetPos+0x330>)
 800dbec:	f507 743f 	add.w	r4, r7, #764	; 0x2fc
 800dbf0:	461d      	mov	r5, r3
 800dbf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dbfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center[1][7] = {{PoleSpeed, -0.75, 0.0, -90, 0, 0, 0}};
 800dbfe:	4ba6      	ldr	r3, [pc, #664]	; (800de98 <LidarSetPos+0x338>)
 800dc00:	f507 7438 	add.w	r4, r7, #736	; 0x2e0
 800dc04:	461d      	mov	r5, r3
 800dc06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_4[1][7] = {{PoleSpeed, 1.35, 0.0, -90, 0, 0, 0}};
 800dc12:	4ba2      	ldr	r3, [pc, #648]	; (800de9c <LidarSetPos+0x33c>)
 800dc14:	f507 7431 	add.w	r4, r7, #708	; 0x2c4
 800dc18:	461d      	mov	r5, r3
 800dc1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center_3[1][7] = {{PoleSpeed, -1.5, 0.0, -90, 0, 0, 0}};
 800dc26:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800dc2a:	4a9d      	ldr	r2, [pc, #628]	; (800dea0 <LidarSetPos+0x340>)
 800dc2c:	461c      	mov	r4, r3
 800dc2e:	4615      	mov	r5, r2
 800dc30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right[1][7] = {{PoleSpeed, 1.55, 0.0, -90, 0, 0, 0}};
 800dc3c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800dc40:	4a98      	ldr	r2, [pc, #608]	; (800dea4 <LidarSetPos+0x344>)
 800dc42:	461c      	mov	r4, r3
 800dc44:	4615      	mov	r5, r2
 800dc46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dc52:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800dc56:	4a94      	ldr	r2, [pc, #592]	; (800dea8 <LidarSetPos+0x348>)
 800dc58:	461c      	mov	r4, r3
 800dc5a:	4615      	mov	r5, r2
 800dc5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4[1][7] = {{PoleSpeed, 0.5, -4.1, -90, 0, 0, 0}};
 800dc68:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800dc6c:	4a8f      	ldr	r2, [pc, #572]	; (800deac <LidarSetPos+0x34c>)
 800dc6e:	461c      	mov	r4, r3
 800dc70:	4615      	mov	r5, r2
 800dc72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4_2[1][7] = {{PoleSpeed, -1.3, 0.0, -90.0, 0, 0, 0}};
 800dc7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800dc82:	4a8b      	ldr	r2, [pc, #556]	; (800deb0 <LidarSetPos+0x350>)
 800dc84:	461c      	mov	r4, r3
 800dc86:	4615      	mov	r5, r2
 800dc88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_pick_right[1][7] = {{PoleSpeed, 0.5, -4.35, -180.0, 0, 0, 0}};
 800dc94:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dc98:	4a86      	ldr	r2, [pc, #536]	; (800deb4 <LidarSetPos+0x354>)
 800dc9a:	461c      	mov	r4, r3
 800dc9c:	4615      	mov	r5, r2
 800dc9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dca2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right[1][7] = {{PoleSpeed, -0.2, 0.5, -90, 0, 0, 0}};
 800dcaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800dcae:	4a82      	ldr	r2, [pc, #520]	; (800deb8 <LidarSetPos+0x358>)
 800dcb0:	461c      	mov	r4, r3
 800dcb2:	4615      	mov	r5, r2
 800dcb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dcbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right_2[1][7] = {{PoleSpeed, 0.2, 6, -178.0, 0, 0, 0}};
 800dcc0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800dcc4:	4a7d      	ldr	r2, [pc, #500]	; (800debc <LidarSetPos+0x35c>)
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	4615      	mov	r5, r2
 800dcca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dcd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Offset 2 poles
	float center_1_to_center[1][7] = {{PoleSpeed, 2.3, 0.0, -90, 0, 0, 0}};
 800dcd6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800dcda:	4a79      	ldr	r2, [pc, #484]	; (800dec0 <LidarSetPos+0x360>)
 800dcdc:	461c      	mov	r4, r3
 800dcde:	4615      	mov	r5, r2
 800dce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_1[1][7] = {{PoleSpeed, -2.5, 0.0, -90, 0, 0, 0}};
 800dcec:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800dcf0:	4a74      	ldr	r2, [pc, #464]	; (800dec4 <LidarSetPos+0x364>)
 800dcf2:	461c      	mov	r4, r3
 800dcf4:	4615      	mov	r5, r2
 800dcf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dcfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_4[1][7] = {{PoleSpeed, 2.3, 0.0, -90, 0, 0, 0}};
 800dd02:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800dd06:	4a6e      	ldr	r2, [pc, #440]	; (800dec0 <LidarSetPos+0x360>)
 800dd08:	461c      	mov	r4, r3
 800dd0a:	4615      	mov	r5, r2
 800dd0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center[1][7] = {{PoleSpeed, -2.66, 0.0, -90, 0, 0, 0}};
 800dd18:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800dd1c:	4a6a      	ldr	r2, [pc, #424]	; (800dec8 <LidarSetPos+0x368>)
 800dd1e:	461c      	mov	r4, r3
 800dd20:	4615      	mov	r5, r2
 800dd22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_3[1][7] = {{PoleSpeed, 1.7, 0.0, -90, 0, 0, 0}};
 800dd2e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800dd32:	4a66      	ldr	r2, [pc, #408]	; (800decc <LidarSetPos+0x36c>)
 800dd34:	461c      	mov	r4, r3
 800dd36:	4615      	mov	r5, r2
 800dd38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_2[1][7] = {{PoleSpeed, -1.8, 0.0, -90, 0, 0, 0}};
 800dd44:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800dd48:	4a61      	ldr	r2, [pc, #388]	; (800ded0 <LidarSetPos+0x370>)
 800dd4a:	461c      	mov	r4, r3
 800dd4c:	4615      	mov	r5, r2
 800dd4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right[1][7] = {{PoleSpeed, 3.4, 0.0, -90, 0, 0, 0}};
 800dd5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dd5e:	4a5d      	ldr	r2, [pc, #372]	; (800ded4 <LidarSetPos+0x374>)
 800dd60:	461c      	mov	r4, r3
 800dd62:	4615      	mov	r5, r2
 800dd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800dd70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800dd74:	4a4c      	ldr	r2, [pc, #304]	; (800dea8 <LidarSetPos+0x348>)
 800dd76:	461c      	mov	r4, r3
 800dd78:	4615      	mov	r5, r2
 800dd7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3[1][7] = {{PoleSpeed, 0.5, -4.2, -90, 0, 0, 0}};
 800dd86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800dd8a:	4a53      	ldr	r2, [pc, #332]	; (800ded8 <LidarSetPos+0x378>)
 800dd8c:	461c      	mov	r4, r3
 800dd8e:	4615      	mov	r5, r2
 800dd90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3_2[1][7] = {{PoleSpeed, -3.3, 0.0, -90, 0, 0, 0}};
 800dd9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dda0:	4a4e      	ldr	r2, [pc, #312]	; (800dedc <LidarSetPos+0x37c>)
 800dda2:	461c      	mov	r4, r3
 800dda4:	4615      	mov	r5, r2
 800dda6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dda8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_pick_right[1][7] = {{PoleSpeed, 1.7, -0.5, -90, 0, 0, 0}};
 800ddb2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ddb6:	4a4a      	ldr	r2, [pc, #296]	; (800dee0 <LidarSetPos+0x380>)
 800ddb8:	461c      	mov	r4, r3
 800ddba:	4615      	mov	r5, r2
 800ddbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float pick_right_to_center_4_servo[1][7] = {{4, 0, 0.4, -90, 0, 0, 0}};
 800ddc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ddcc:	4a45      	ldr	r2, [pc, #276]	; (800dee4 <LidarSetPos+0x384>)
 800ddce:	461c      	mov	r4, r3
 800ddd0:	4615      	mov	r5, r2
 800ddd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{PoleSpeed, -2.1, 0.3, -90, 0, 0, 0}};
 800ddde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dde2:	4a41      	ldr	r2, [pc, #260]	; (800dee8 <LidarSetPos+0x388>)
 800dde4:	461c      	mov	r4, r3
 800dde6:	4615      	mov	r5, r2
 800dde8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ddf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float center_3_to_pick_right[1][7] = {{PoleSpeed, 2.9, -0.5, -90, 0, 0, 0}};
 800ddf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ddf8:	4a3c      	ldr	r2, [pc, #240]	; (800deec <LidarSetPos+0x38c>)
 800ddfa:	461c      	mov	r4, r3
 800ddfc:	4615      	mov	r5, r2
 800ddfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_pick_right[1][7] = {{PoleSpeed, 4.3, -0.5, -90, 0, 0, 0}};
 800de0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de0e:	4a38      	ldr	r2, [pc, #224]	; (800def0 <LidarSetPos+0x390>)
 800de10:	461c      	mov	r4, r3
 800de12:	4615      	mov	r5, r2
 800de14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_pick_right[1][7] = {{PoleSpeed, 5.5, -0.5, -90, 0, 0, 0}};
 800de20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de24:	4a33      	ldr	r2, [pc, #204]	; (800def4 <LidarSetPos+0x394>)
 800de26:	461c      	mov	r4, r3
 800de28:	4615      	mov	r5, r2
 800de2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_pick_right[1][7] = {{PoleSpeed, 6.8, -0.5, -90, 0, 0, 0}};
 800de36:	f107 0308 	add.w	r3, r7, #8
 800de3a:	4a2f      	ldr	r2, [pc, #188]	; (800def8 <LidarSetPos+0x398>)
 800de3c:	461c      	mov	r4, r3
 800de3e:	4615      	mov	r5, r2
 800de40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de48:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(pose) // Target Pose
 800de4c:	1dfb      	adds	r3, r7, #7
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	3b02      	subs	r3, #2
 800de52:	2b07      	cmp	r3, #7
 800de54:	f201 85bb 	bhi.w	800f9ce <LidarSetPos+0x1e6e>
 800de58:	a201      	add	r2, pc, #4	; (adr r2, 800de60 <LidarSetPos+0x300>)
 800de5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5e:	bf00      	nop
 800de60:	0800defd 	.word	0x0800defd
 800de64:	0800df6b 	.word	0x0800df6b
 800de68:	0800e1dd 	.word	0x0800e1dd
 800de6c:	0800e525 	.word	0x0800e525
 800de70:	0800e8e9 	.word	0x0800e8e9
 800de74:	0800ed2f 	.word	0x0800ed2f
 800de78:	0800f155 	.word	0x0800f155
 800de7c:	0800f533 	.word	0x0800f533
 800de80:	0801fcec 	.word	0x0801fcec
 800de84:	0801fd08 	.word	0x0801fd08
 800de88:	0801fd24 	.word	0x0801fd24
 800de8c:	0801fd40 	.word	0x0801fd40
 800de90:	0801fd5c 	.word	0x0801fd5c
 800de94:	0801fd78 	.word	0x0801fd78
 800de98:	0801fd94 	.word	0x0801fd94
 800de9c:	0801fdb0 	.word	0x0801fdb0
 800dea0:	0801fdcc 	.word	0x0801fdcc
 800dea4:	0801fde8 	.word	0x0801fde8
 800dea8:	0801fe04 	.word	0x0801fe04
 800deac:	0801fe20 	.word	0x0801fe20
 800deb0:	0801fe3c 	.word	0x0801fe3c
 800deb4:	0801fe58 	.word	0x0801fe58
 800deb8:	0801fe74 	.word	0x0801fe74
 800debc:	0801fe90 	.word	0x0801fe90
 800dec0:	0801feac 	.word	0x0801feac
 800dec4:	0801fec8 	.word	0x0801fec8
 800dec8:	0801fee4 	.word	0x0801fee4
 800decc:	0801ff00 	.word	0x0801ff00
 800ded0:	0801ff1c 	.word	0x0801ff1c
 800ded4:	0801ff38 	.word	0x0801ff38
 800ded8:	0801ff54 	.word	0x0801ff54
 800dedc:	0801ff70 	.word	0x0801ff70
 800dee0:	0801ff8c 	.word	0x0801ff8c
 800dee4:	0801ffa8 	.word	0x0801ffa8
 800dee8:	0801ffc4 	.word	0x0801ffc4
 800deec:	0801ffe0 	.word	0x0801ffe0
 800def0:	0801fffc 	.word	0x0801fffc
 800def4:	08020018 	.word	0x08020018
 800def8:	08020034 	.word	0x08020034
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800defc:	463b      	mov	r3, r7
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800df04:	3b01      	subs	r3, #1
 800df06:	2b08      	cmp	r3, #8
 800df08:	d82c      	bhi.n	800df64 <LidarSetPos+0x404>
 800df0a:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <LidarSetPos+0x3b0>)
 800df0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df10:	0800df35 	.word	0x0800df35
 800df14:	0800df65 	.word	0x0800df65
 800df18:	0800df65 	.word	0x0800df65
 800df1c:	0800df65 	.word	0x0800df65
 800df20:	0800df4d 	.word	0x0800df4d
 800df24:	0800df65 	.word	0x0800df65
 800df28:	0800df65 	.word	0x0800df65
 800df2c:	0800df59 	.word	0x0800df59
 800df30:	0800df41 	.word	0x0800df41
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800df34:	463b      	mov	r3, r7
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2202      	movs	r2, #2
 800df3a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800df3e:	e012      	b.n	800df66 <LidarSetPos+0x406>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800df40:	463b      	mov	r3, r7
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2202      	movs	r2, #2
 800df46:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800df4a:	e00c      	b.n	800df66 <LidarSetPos+0x406>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800df4c:	463b      	mov	r3, r7
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2202      	movs	r2, #2
 800df52:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800df56:	e006      	b.n	800df66 <LidarSetPos+0x406>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800df58:	463b      	mov	r3, r7
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2202      	movs	r2, #2
 800df5e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800df62:	e000      	b.n	800df66 <LidarSetPos+0x406>

				default:
					break;
 800df64:	bf00      	nop

			}
			break;
 800df66:	f001 bd33 	b.w	800f9d0 <LidarSetPos+0x1e70>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800df6a:	463b      	mov	r3, r7
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800df72:	3b01      	subs	r3, #1
 800df74:	2b08      	cmp	r3, #8
 800df76:	f200 8125 	bhi.w	800e1c4 <LidarSetPos+0x664>
 800df7a:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <LidarSetPos+0x420>)
 800df7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df80:	0800dfa5 	.word	0x0800dfa5
 800df84:	0800e035 	.word	0x0800e035
 800df88:	0800e1c5 	.word	0x0800e1c5
 800df8c:	0800e04d 	.word	0x0800e04d
 800df90:	0800e109 	.word	0x0800e109
 800df94:	0800e1c5 	.word	0x0800e1c5
 800df98:	0800e1c5 	.word	0x0800e1c5
 800df9c:	0800e041 	.word	0x0800e041
 800dfa0:	0800e029 	.word	0x0800e029
			{
				case PICK_LEFT:
					lidar->fail = 0;
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 800dfae:	4bb0      	ldr	r3, [pc, #704]	; (800e270 <LidarSetPos+0x710>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800dfb4:	4baf      	ldr	r3, [pc, #700]	; (800e274 <LidarSetPos+0x714>)
 800dfb6:	4ab0      	ldr	r2, [pc, #704]	; (800e278 <LidarSetPos+0x718>)
 800dfb8:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800dfba:	4bb0      	ldr	r3, [pc, #704]	; (800e27c <LidarSetPos+0x71c>)
 800dfbc:	4ab0      	ldr	r2, [pc, #704]	; (800e280 <LidarSetPos+0x720>)
 800dfbe:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800dfc0:	f7fe fa82 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800dfc4:	463b      	mov	r3, r7
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2203      	movs	r2, #3
 800dfca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					PP_start(pick_left_adjust, 1, &pp);
 800dfce:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800dfd2:	4aac      	ldr	r2, [pc, #688]	; (800e284 <LidarSetPos+0x724>)
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f7 fd41 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800dfdc:	e00d      	b.n	800dffa <LidarSetPos+0x49a>
					{
						if(ps4.button == SQUARE)
 800dfde:	4baa      	ldr	r3, [pc, #680]	; (800e288 <LidarSetPos+0x728>)
 800dfe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfe6:	d108      	bne.n	800dffa <LidarSetPos+0x49a>
						{
							while(ps4.button == SQUARE);
 800dfe8:	bf00      	nop
 800dfea:	4ba7      	ldr	r3, [pc, #668]	; (800e288 <LidarSetPos+0x728>)
 800dfec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dff2:	d0fa      	beq.n	800dfea <LidarSetPos+0x48a>
							PP_stop(&pp);
 800dff4:	48a3      	ldr	r0, [pc, #652]	; (800e284 <LidarSetPos+0x724>)
 800dff6:	f7f7 ff6c 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800dffa:	4ba2      	ldr	r3, [pc, #648]	; (800e284 <LidarSetPos+0x724>)
 800dffc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	b2db      	uxtb	r3, r3
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1e9      	bne.n	800dfde <LidarSetPos+0x47e>
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

//					Shot();
					stick_fence = 1;
 800e00a:	4b99      	ldr	r3, [pc, #612]	; (800e270 <LidarSetPos+0x710>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e010:	463b      	mov	r3, r7
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f040 80d6 	bne.w	800e1ca <LidarSetPos+0x66a>
						LidarAdjust(lidar);
 800e01e:	463b      	mov	r3, r7
 800e020:	6818      	ldr	r0, [r3, #0]
 800e022:	f001 fce1 	bl	800f9e8 <LidarAdjust>
					break;
 800e026:	e0d0      	b.n	800e1ca <LidarSetPos+0x66a>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800e028:	463b      	mov	r3, r7
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2203      	movs	r2, #3
 800e02e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e032:	e0d1      	b.n	800e1d8 <LidarSetPos+0x678>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800e034:	463b      	mov	r3, r7
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2203      	movs	r2, #3
 800e03a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e03e:	e0cb      	b.n	800e1d8 <LidarSetPos+0x678>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800e040:	463b      	mov	r3, r7
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2203      	movs	r2, #3
 800e046:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e04a:	e0c5      	b.n	800e1d8 <LidarSetPos+0x678>

				case CENTER_2:
					lidar->fail = 0;
 800e04c:	463b      	mov	r3, r7
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2200      	movs	r2, #0
 800e052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 800e056:	4b86      	ldr	r3, [pc, #536]	; (800e270 <LidarSetPos+0x710>)
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e05c:	4b85      	ldr	r3, [pc, #532]	; (800e274 <LidarSetPos+0x714>)
 800e05e:	4a86      	ldr	r2, [pc, #536]	; (800e278 <LidarSetPos+0x718>)
 800e060:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e062:	4b86      	ldr	r3, [pc, #536]	; (800e27c <LidarSetPos+0x71c>)
 800e064:	4a86      	ldr	r2, [pc, #536]	; (800e280 <LidarSetPos+0x720>)
 800e066:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e068:	f7fe fa2e 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e06c:	463b      	mov	r3, r7
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2203      	movs	r2, #3
 800e072:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_1, 1, &pp);
 800e076:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800e07a:	4a82      	ldr	r2, [pc, #520]	; (800e284 <LidarSetPos+0x724>)
 800e07c:	2101      	movs	r1, #1
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f7 fced 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e084:	e02a      	b.n	800e0dc <LidarSetPos+0x57c>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e086:	2108      	movs	r1, #8
 800e088:	4880      	ldr	r0, [pc, #512]	; (800e28c <LidarSetPos+0x72c>)
 800e08a:	f004 f88b 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d006      	beq.n	800e0a2 <LidarSetPos+0x542>
 800e094:	2110      	movs	r1, #16
 800e096:	487d      	ldr	r0, [pc, #500]	; (800e28c <LidarSetPos+0x72c>)
 800e098:	f004 f884 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d109      	bne.n	800e0b6 <LidarSetPos+0x556>
						{
							pp.target_y[0] = pp.real_y;
 800e0a2:	4b78      	ldr	r3, [pc, #480]	; (800e284 <LidarSetPos+0x724>)
 800e0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a6:	4a77      	ldr	r2, [pc, #476]	; (800e284 <LidarSetPos+0x724>)
 800e0a8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e0ac:	4b75      	ldr	r3, [pc, #468]	; (800e284 <LidarSetPos+0x724>)
 800e0ae:	f04f 0200 	mov.w	r2, #0
 800e0b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e0b6:	4b74      	ldr	r3, [pc, #464]	; (800e288 <LidarSetPos+0x728>)
 800e0b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0be:	d10d      	bne.n	800e0dc <LidarSetPos+0x57c>
						{
							while(ps4.button == SQUARE);
 800e0c0:	bf00      	nop
 800e0c2:	4b71      	ldr	r3, [pc, #452]	; (800e288 <LidarSetPos+0x728>)
 800e0c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0ca:	d0fa      	beq.n	800e0c2 <LidarSetPos+0x562>
							PP_stop(&pp);
 800e0cc:	486d      	ldr	r0, [pc, #436]	; (800e284 <LidarSetPos+0x724>)
 800e0ce:	f7f7 ff00 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e0d2:	463b      	mov	r3, r7
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					while(pp.pp_start)
 800e0dc:	4b69      	ldr	r3, [pc, #420]	; (800e284 <LidarSetPos+0x724>)
 800e0de:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e0e2:	f003 0301 	and.w	r3, r3, #1
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1cc      	bne.n	800e086 <LidarSetPos+0x526>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					stick_fence = 1;
 800e0ec:	4b60      	ldr	r3, [pc, #384]	; (800e270 <LidarSetPos+0x710>)
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d168      	bne.n	800e1d0 <LidarSetPos+0x670>
						LidarAdjust(lidar);
 800e0fe:	463b      	mov	r3, r7
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	f001 fc71 	bl	800f9e8 <LidarAdjust>
					break;
 800e106:	e063      	b.n	800e1d0 <LidarSetPos+0x670>

				case CENTER:
					stick_fence = 0;
 800e108:	4b59      	ldr	r3, [pc, #356]	; (800e270 <LidarSetPos+0x710>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e10e:	4b59      	ldr	r3, [pc, #356]	; (800e274 <LidarSetPos+0x714>)
 800e110:	4a59      	ldr	r2, [pc, #356]	; (800e278 <LidarSetPos+0x718>)
 800e112:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e114:	4b59      	ldr	r3, [pc, #356]	; (800e27c <LidarSetPos+0x71c>)
 800e116:	4a5a      	ldr	r2, [pc, #360]	; (800e280 <LidarSetPos+0x720>)
 800e118:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e11a:	463b      	mov	r3, r7
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					ResetCoordinate();
 800e124:	f7fe f9d0 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800e128:	463b      	mov	r3, r7
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2203      	movs	r2, #3
 800e12e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_1, 1, &pp);
 800e132:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800e136:	4a53      	ldr	r2, [pc, #332]	; (800e284 <LidarSetPos+0x724>)
 800e138:	2101      	movs	r1, #1
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7f7 fc8f 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e140:	e02a      	b.n	800e198 <LidarSetPos+0x638>
					{
						if(ps4.button == SQUARE)
 800e142:	4b51      	ldr	r3, [pc, #324]	; (800e288 <LidarSetPos+0x728>)
 800e144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e14a:	d10d      	bne.n	800e168 <LidarSetPos+0x608>
						{
							while(ps4.button == SQUARE);
 800e14c:	bf00      	nop
 800e14e:	4b4e      	ldr	r3, [pc, #312]	; (800e288 <LidarSetPos+0x728>)
 800e150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e156:	d0fa      	beq.n	800e14e <LidarSetPos+0x5ee>
							PP_stop(&pp);
 800e158:	484a      	ldr	r0, [pc, #296]	; (800e284 <LidarSetPos+0x724>)
 800e15a:	f7f7 feba 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e15e:	463b      	mov	r3, r7
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2201      	movs	r2, #1
 800e164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER; // PP Failed
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e168:	2108      	movs	r1, #8
 800e16a:	4848      	ldr	r0, [pc, #288]	; (800e28c <LidarSetPos+0x72c>)
 800e16c:	f004 f81a 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d006      	beq.n	800e184 <LidarSetPos+0x624>
 800e176:	2110      	movs	r1, #16
 800e178:	4844      	ldr	r0, [pc, #272]	; (800e28c <LidarSetPos+0x72c>)
 800e17a:	f004 f813 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d109      	bne.n	800e198 <LidarSetPos+0x638>
						{
							pp.target_y[0] = pp.real_y;
 800e184:	4b3f      	ldr	r3, [pc, #252]	; (800e284 <LidarSetPos+0x724>)
 800e186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e188:	4a3e      	ldr	r2, [pc, #248]	; (800e284 <LidarSetPos+0x724>)
 800e18a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e18e:	4b3d      	ldr	r3, [pc, #244]	; (800e284 <LidarSetPos+0x724>)
 800e190:	f04f 0200 	mov.w	r2, #0
 800e194:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e198:	4b3a      	ldr	r3, [pc, #232]	; (800e284 <LidarSetPos+0x724>)
 800e19a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1cc      	bne.n	800e142 <LidarSetPos+0x5e2>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e1a8:	4b31      	ldr	r3, [pc, #196]	; (800e270 <LidarSetPos+0x710>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e1ae:	463b      	mov	r3, r7
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10d      	bne.n	800e1d6 <LidarSetPos+0x676>
						LidarAdjust(lidar);
 800e1ba:	463b      	mov	r3, r7
 800e1bc:	6818      	ldr	r0, [r3, #0]
 800e1be:	f001 fc13 	bl	800f9e8 <LidarAdjust>
					break;
 800e1c2:	e008      	b.n	800e1d6 <LidarSetPos+0x676>

				default:
					break;
 800e1c4:	bf00      	nop
 800e1c6:	f001 bc03 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e1ca:	bf00      	nop
 800e1cc:	f001 bc00 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e1d0:	bf00      	nop
 800e1d2:	f001 bbfd 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e1d6:	bf00      	nop
			}
			break;
 800e1d8:	f001 bbfa 	b.w	800f9d0 <LidarSetPos+0x1e70>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 800e1dc:	463b      	mov	r3, r7
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	2b08      	cmp	r3, #8
 800e1e8:	f200 8193 	bhi.w	800e512 <LidarSetPos+0x9b2>
 800e1ec:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <LidarSetPos+0x694>)
 800e1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f2:	bf00      	nop
 800e1f4:	0800e219 	.word	0x0800e219
 800e1f8:	0800e231 	.word	0x0800e231
 800e1fc:	0800e249 	.word	0x0800e249
 800e200:	0800e513 	.word	0x0800e513
 800e204:	0800e34b 	.word	0x0800e34b
 800e208:	0800e443 	.word	0x0800e443
 800e20c:	0800e513 	.word	0x0800e513
 800e210:	0800e23d 	.word	0x0800e23d
 800e214:	0800e225 	.word	0x0800e225
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 800e218:	463b      	mov	r3, r7
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2204      	movs	r2, #4
 800e21e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e222:	e17d      	b.n	800e520 <LidarSetPos+0x9c0>

				case PICK_RIGHT:
					lidar->pos = CENTER_2;
 800e224:	463b      	mov	r3, r7
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2204      	movs	r2, #4
 800e22a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e22e:	e177      	b.n	800e520 <LidarSetPos+0x9c0>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 800e230:	463b      	mov	r3, r7
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2204      	movs	r2, #4
 800e236:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e23a:	e171      	b.n	800e520 <LidarSetPos+0x9c0>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 800e23c:	463b      	mov	r3, r7
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2204      	movs	r2, #4
 800e242:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e246:	e16b      	b.n	800e520 <LidarSetPos+0x9c0>

				case CENTER_1:
					stick_fence = 0;
 800e248:	4b09      	ldr	r3, [pc, #36]	; (800e270 <LidarSetPos+0x710>)
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e24e:	463b      	mov	r3, r7
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2200      	movs	r2, #0
 800e254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800e258:	4b0d      	ldr	r3, [pc, #52]	; (800e290 <LidarSetPos+0x730>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d01d      	beq.n	800e29c <LidarSetPos+0x73c>
					{
						vesc_speed = BlueType2;
 800e260:	4b06      	ldr	r3, [pc, #24]	; (800e27c <LidarSetPos+0x71c>)
 800e262:	4a0c      	ldr	r2, [pc, #48]	; (800e294 <LidarSetPos+0x734>)
 800e264:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e266:	4b03      	ldr	r3, [pc, #12]	; (800e274 <LidarSetPos+0x714>)
 800e268:	4a0b      	ldr	r2, [pc, #44]	; (800e298 <LidarSetPos+0x738>)
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	e01c      	b.n	800e2a8 <LidarSetPos+0x748>
 800e26e:	bf00      	nop
 800e270:	200072c4 	.word	0x200072c4
 800e274:	20007388 	.word	0x20007388
 800e278:	3e2b851f 	.word	0x3e2b851f
 800e27c:	200065a0 	.word	0x200065a0
 800e280:	40966666 	.word	0x40966666
 800e284:	20006ccc 	.word	0x20006ccc
 800e288:	2000a028 	.word	0x2000a028
 800e28c:	40020c00 	.word	0x40020c00
 800e290:	20006a24 	.word	0x20006a24
 800e294:	41026666 	.word	0x41026666
 800e298:	3e8b851f 	.word	0x3e8b851f
					}
					else
					{
						vesc_speed = RedType2;
 800e29c:	4bb6      	ldr	r3, [pc, #728]	; (800e578 <LidarSetPos+0xa18>)
 800e29e:	4ab7      	ldr	r2, [pc, #732]	; (800e57c <LidarSetPos+0xa1c>)
 800e2a0:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e2a2:	4bb7      	ldr	r3, [pc, #732]	; (800e580 <LidarSetPos+0xa20>)
 800e2a4:	4ab7      	ldr	r2, [pc, #732]	; (800e584 <LidarSetPos+0xa24>)
 800e2a6:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e2a8:	f7fe f90e 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e2ac:	463b      	mov	r3, r7
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2204      	movs	r2, #4
 800e2b2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center_2, 1, &pp);
 800e2b6:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800e2ba:	4ab3      	ldr	r2, [pc, #716]	; (800e588 <LidarSetPos+0xa28>)
 800e2bc:	2101      	movs	r1, #1
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f7 fbcd 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e2c4:	e02a      	b.n	800e31c <LidarSetPos+0x7bc>
					{
						if(ps4.button == SQUARE)
 800e2c6:	4bb1      	ldr	r3, [pc, #708]	; (800e58c <LidarSetPos+0xa2c>)
 800e2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ce:	d10d      	bne.n	800e2ec <LidarSetPos+0x78c>
						{
							while(ps4.button == SQUARE);
 800e2d0:	bf00      	nop
 800e2d2:	4bae      	ldr	r3, [pc, #696]	; (800e58c <LidarSetPos+0xa2c>)
 800e2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2da:	d0fa      	beq.n	800e2d2 <LidarSetPos+0x772>
							PP_stop(&pp);
 800e2dc:	48aa      	ldr	r0, [pc, #680]	; (800e588 <LidarSetPos+0xa28>)
 800e2de:	f7f7 fdf8 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_1;
//							lidar->pos_counter = CENTER_1;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e2ec:	2108      	movs	r1, #8
 800e2ee:	48a8      	ldr	r0, [pc, #672]	; (800e590 <LidarSetPos+0xa30>)
 800e2f0:	f003 ff58 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d006      	beq.n	800e308 <LidarSetPos+0x7a8>
 800e2fa:	2110      	movs	r1, #16
 800e2fc:	48a4      	ldr	r0, [pc, #656]	; (800e590 <LidarSetPos+0xa30>)
 800e2fe:	f003 ff51 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d109      	bne.n	800e31c <LidarSetPos+0x7bc>
						{
							pp.target_y[0] = pp.real_y;
 800e308:	4b9f      	ldr	r3, [pc, #636]	; (800e588 <LidarSetPos+0xa28>)
 800e30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30c:	4a9e      	ldr	r2, [pc, #632]	; (800e588 <LidarSetPos+0xa28>)
 800e30e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e312:	4b9d      	ldr	r3, [pc, #628]	; (800e588 <LidarSetPos+0xa28>)
 800e314:	f04f 0200 	mov.w	r2, #0
 800e318:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e31c:	4b9a      	ldr	r3, [pc, #616]	; (800e588 <LidarSetPos+0xa28>)
 800e31e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1cc      	bne.n	800e2c6 <LidarSetPos+0x766>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e32c:	4b99      	ldr	r3, [pc, #612]	; (800e594 <LidarSetPos+0xa34>)
 800e32e:	2201      	movs	r2, #1
 800e330:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e332:	463b      	mov	r3, r7
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f040 80ec 	bne.w	800e518 <LidarSetPos+0x9b8>
						LidarAdjust(lidar);
 800e340:	463b      	mov	r3, r7
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	f001 fb50 	bl	800f9e8 <LidarAdjust>
					break;
 800e348:	e0e6      	b.n	800e518 <LidarSetPos+0x9b8>

				case CENTER:
					stick_fence = 0;
 800e34a:	4b92      	ldr	r3, [pc, #584]	; (800e594 <LidarSetPos+0xa34>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e350:	463b      	mov	r3, r7
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2200      	movs	r2, #0
 800e356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800e35a:	4b8f      	ldr	r3, [pc, #572]	; (800e598 <LidarSetPos+0xa38>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d006      	beq.n	800e370 <LidarSetPos+0x810>
					{
						vesc_speed = BlueType2;
 800e362:	4b85      	ldr	r3, [pc, #532]	; (800e578 <LidarSetPos+0xa18>)
 800e364:	4a8d      	ldr	r2, [pc, #564]	; (800e59c <LidarSetPos+0xa3c>)
 800e366:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e368:	4b85      	ldr	r3, [pc, #532]	; (800e580 <LidarSetPos+0xa20>)
 800e36a:	4a8d      	ldr	r2, [pc, #564]	; (800e5a0 <LidarSetPos+0xa40>)
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	e005      	b.n	800e37c <LidarSetPos+0x81c>
					}
					else
					{
						vesc_speed = RedType2;
 800e370:	4b81      	ldr	r3, [pc, #516]	; (800e578 <LidarSetPos+0xa18>)
 800e372:	4a82      	ldr	r2, [pc, #520]	; (800e57c <LidarSetPos+0xa1c>)
 800e374:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e376:	4b82      	ldr	r3, [pc, #520]	; (800e580 <LidarSetPos+0xa20>)
 800e378:	4a82      	ldr	r2, [pc, #520]	; (800e584 <LidarSetPos+0xa24>)
 800e37a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e37c:	f7fe f8a4 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e380:	463b      	mov	r3, r7
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2204      	movs	r2, #4
 800e386:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_2, 1, &pp);
 800e38a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800e38e:	4a7e      	ldr	r2, [pc, #504]	; (800e588 <LidarSetPos+0xa28>)
 800e390:	2101      	movs	r1, #1
 800e392:	4618      	mov	r0, r3
 800e394:	f7f7 fb63 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e398:	e03d      	b.n	800e416 <LidarSetPos+0x8b6>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e39a:	2108      	movs	r1, #8
 800e39c:	487c      	ldr	r0, [pc, #496]	; (800e590 <LidarSetPos+0xa30>)
 800e39e:	f003 ff01 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d006      	beq.n	800e3b6 <LidarSetPos+0x856>
 800e3a8:	2110      	movs	r1, #16
 800e3aa:	4879      	ldr	r0, [pc, #484]	; (800e590 <LidarSetPos+0xa30>)
 800e3ac:	f003 fefa 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d104      	bne.n	800e3c0 <LidarSetPos+0x860>
							pp.error_y = 0;
 800e3b6:	4b74      	ldr	r3, [pc, #464]	; (800e588 <LidarSetPos+0xa28>)
 800e3b8:	f04f 0200 	mov.w	r2, #0
 800e3bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4

						if(ps4.button == SQUARE)
 800e3c0:	4b72      	ldr	r3, [pc, #456]	; (800e58c <LidarSetPos+0xa2c>)
 800e3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3c8:	d10d      	bne.n	800e3e6 <LidarSetPos+0x886>
						{
							while(ps4.button == SQUARE);
 800e3ca:	bf00      	nop
 800e3cc:	4b6f      	ldr	r3, [pc, #444]	; (800e58c <LidarSetPos+0xa2c>)
 800e3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3d4:	d0fa      	beq.n	800e3cc <LidarSetPos+0x86c>
							PP_stop(&pp);
 800e3d6:	486c      	ldr	r0, [pc, #432]	; (800e588 <LidarSetPos+0xa28>)
 800e3d8:	f7f7 fd7b 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e3dc:	463b      	mov	r3, r7
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e3e6:	2108      	movs	r1, #8
 800e3e8:	4869      	ldr	r0, [pc, #420]	; (800e590 <LidarSetPos+0xa30>)
 800e3ea:	f003 fedb 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d006      	beq.n	800e402 <LidarSetPos+0x8a2>
 800e3f4:	2110      	movs	r1, #16
 800e3f6:	4866      	ldr	r0, [pc, #408]	; (800e590 <LidarSetPos+0xa30>)
 800e3f8:	f003 fed4 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d109      	bne.n	800e416 <LidarSetPos+0x8b6>
						{
							pp.target_y[0] = pp.real_y;
 800e402:	4b61      	ldr	r3, [pc, #388]	; (800e588 <LidarSetPos+0xa28>)
 800e404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e406:	4a60      	ldr	r2, [pc, #384]	; (800e588 <LidarSetPos+0xa28>)
 800e408:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e40c:	4b5e      	ldr	r3, [pc, #376]	; (800e588 <LidarSetPos+0xa28>)
 800e40e:	f04f 0200 	mov.w	r2, #0
 800e412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e416:	4b5c      	ldr	r3, [pc, #368]	; (800e588 <LidarSetPos+0xa28>)
 800e418:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e41c:	f003 0301 	and.w	r3, r3, #1
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1b9      	bne.n	800e39a <LidarSetPos+0x83a>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e426:	4b5b      	ldr	r3, [pc, #364]	; (800e594 <LidarSetPos+0xa34>)
 800e428:	2201      	movs	r2, #1
 800e42a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e42c:	463b      	mov	r3, r7
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e434:	2b00      	cmp	r3, #0
 800e436:	d172      	bne.n	800e51e <LidarSetPos+0x9be>
						LidarAdjust(lidar);
 800e438:	463b      	mov	r3, r7
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	f001 fad4 	bl	800f9e8 <LidarAdjust>
					break;
 800e440:	e06d      	b.n	800e51e <LidarSetPos+0x9be>

				case CENTER_3:
					stick_fence = 0;
 800e442:	4b54      	ldr	r3, [pc, #336]	; (800e594 <LidarSetPos+0xa34>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e448:	463b      	mov	r3, r7
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800e452:	4b51      	ldr	r3, [pc, #324]	; (800e598 <LidarSetPos+0xa38>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d006      	beq.n	800e468 <LidarSetPos+0x908>
					{
						vesc_speed = BlueType2;
 800e45a:	4b47      	ldr	r3, [pc, #284]	; (800e578 <LidarSetPos+0xa18>)
 800e45c:	4a4f      	ldr	r2, [pc, #316]	; (800e59c <LidarSetPos+0xa3c>)
 800e45e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e460:	4b47      	ldr	r3, [pc, #284]	; (800e580 <LidarSetPos+0xa20>)
 800e462:	4a4f      	ldr	r2, [pc, #316]	; (800e5a0 <LidarSetPos+0xa40>)
 800e464:	601a      	str	r2, [r3, #0]
 800e466:	e005      	b.n	800e474 <LidarSetPos+0x914>
					}
					else
					{
						vesc_speed = RedType2;
 800e468:	4b43      	ldr	r3, [pc, #268]	; (800e578 <LidarSetPos+0xa18>)
 800e46a:	4a44      	ldr	r2, [pc, #272]	; (800e57c <LidarSetPos+0xa1c>)
 800e46c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e46e:	4b44      	ldr	r3, [pc, #272]	; (800e580 <LidarSetPos+0xa20>)
 800e470:	4a44      	ldr	r2, [pc, #272]	; (800e584 <LidarSetPos+0xa24>)
 800e472:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e474:	f7fe f828 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_2;
 800e478:	463b      	mov	r3, r7
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2204      	movs	r2, #4
 800e47e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_2, 1, &pp);
 800e482:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800e486:	4a40      	ldr	r2, [pc, #256]	; (800e588 <LidarSetPos+0xa28>)
 800e488:	2101      	movs	r1, #1
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7f7 fae7 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e490:	e02a      	b.n	800e4e8 <LidarSetPos+0x988>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e492:	2108      	movs	r1, #8
 800e494:	483e      	ldr	r0, [pc, #248]	; (800e590 <LidarSetPos+0xa30>)
 800e496:	f003 fe85 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d006      	beq.n	800e4ae <LidarSetPos+0x94e>
 800e4a0:	2110      	movs	r1, #16
 800e4a2:	483b      	ldr	r0, [pc, #236]	; (800e590 <LidarSetPos+0xa30>)
 800e4a4:	f003 fe7e 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d109      	bne.n	800e4c2 <LidarSetPos+0x962>
						{
							pp.target_y[0] = pp.real_y;
 800e4ae:	4b36      	ldr	r3, [pc, #216]	; (800e588 <LidarSetPos+0xa28>)
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	4a35      	ldr	r2, [pc, #212]	; (800e588 <LidarSetPos+0xa28>)
 800e4b4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e4b8:	4b33      	ldr	r3, [pc, #204]	; (800e588 <LidarSetPos+0xa28>)
 800e4ba:	f04f 0200 	mov.w	r2, #0
 800e4be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e4c2:	4b32      	ldr	r3, [pc, #200]	; (800e58c <LidarSetPos+0xa2c>)
 800e4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4ca:	d10d      	bne.n	800e4e8 <LidarSetPos+0x988>
						{
							while(ps4.button == SQUARE);
 800e4cc:	bf00      	nop
 800e4ce:	4b2f      	ldr	r3, [pc, #188]	; (800e58c <LidarSetPos+0xa2c>)
 800e4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4d6:	d0fa      	beq.n	800e4ce <LidarSetPos+0x96e>
							PP_stop(&pp);
 800e4d8:	482b      	ldr	r0, [pc, #172]	; (800e588 <LidarSetPos+0xa28>)
 800e4da:	f7f7 fcfa 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e4de:	463b      	mov	r3, r7
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					while(pp.pp_start)
 800e4e8:	4b27      	ldr	r3, [pc, #156]	; (800e588 <LidarSetPos+0xa28>)
 800e4ea:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e4ee:	f003 0301 	and.w	r3, r3, #1
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1cc      	bne.n	800e492 <LidarSetPos+0x932>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e4f8:	4b26      	ldr	r3, [pc, #152]	; (800e594 <LidarSetPos+0xa34>)
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e4fe:	463b      	mov	r3, r7
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e506:	2b00      	cmp	r3, #0
 800e508:	d103      	bne.n	800e512 <LidarSetPos+0x9b2>
						LidarAdjust(lidar);
 800e50a:	463b      	mov	r3, r7
 800e50c:	6818      	ldr	r0, [r3, #0]
 800e50e:	f001 fa6b 	bl	800f9e8 <LidarAdjust>

				default:
					break;
 800e512:	bf00      	nop
 800e514:	f001 ba5c 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e518:	bf00      	nop
 800e51a:	f001 ba59 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e51e:	bf00      	nop
			}
			break;
 800e520:	f001 ba56 	b.w	800f9d0 <LidarSetPos+0x1e70>

		case CENTER:
			switch(lidar->pos) // Self Pose
 800e524:	463b      	mov	r3, r7
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e52c:	3b01      	subs	r3, #1
 800e52e:	2b08      	cmp	r3, #8
 800e530:	f200 81ce 	bhi.w	800e8d0 <LidarSetPos+0xd70>
 800e534:	a201      	add	r2, pc, #4	; (adr r2, 800e53c <LidarSetPos+0x9dc>)
 800e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53a:	bf00      	nop
 800e53c:	0800e561 	.word	0x0800e561
 800e540:	0800e5a5 	.word	0x0800e5a5
 800e544:	0800e5bd 	.word	0x0800e5bd
 800e548:	0800e67b 	.word	0x0800e67b
 800e54c:	0800e8d1 	.word	0x0800e8d1
 800e550:	0800e739 	.word	0x0800e739
 800e554:	0800e7f5 	.word	0x0800e7f5
 800e558:	0800e5b1 	.word	0x0800e5b1
 800e55c:	0800e56d 	.word	0x0800e56d
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 800e560:	463b      	mov	r3, r7
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2205      	movs	r2, #5
 800e566:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e56a:	e1bb      	b.n	800e8e4 <LidarSetPos+0xd84>

				case PICK_RIGHT:
					lidar->pos = CENTER;
 800e56c:	463b      	mov	r3, r7
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2205      	movs	r2, #5
 800e572:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e576:	e1b5      	b.n	800e8e4 <LidarSetPos+0xd84>
 800e578:	200065a0 	.word	0x200065a0
 800e57c:	41033333 	.word	0x41033333
 800e580:	20007388 	.word	0x20007388
 800e584:	3e87ae14 	.word	0x3e87ae14
 800e588:	20006ccc 	.word	0x20006ccc
 800e58c:	2000a028 	.word	0x2000a028
 800e590:	40020c00 	.word	0x40020c00
 800e594:	200072c4 	.word	0x200072c4
 800e598:	20006a24 	.word	0x20006a24
 800e59c:	41026666 	.word	0x41026666
 800e5a0:	3e8b851f 	.word	0x3e8b851f

				case UPPER_LEFT:
					lidar->pos = CENTER;
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2205      	movs	r2, #5
 800e5aa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e5ae:	e199      	b.n	800e8e4 <LidarSetPos+0xd84>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 800e5b0:	463b      	mov	r3, r7
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2205      	movs	r2, #5
 800e5b6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e5ba:	e193      	b.n	800e8e4 <LidarSetPos+0xd84>

				case CENTER_1:
					stick_fence = 0;
 800e5bc:	4b9c      	ldr	r3, [pc, #624]	; (800e830 <LidarSetPos+0xcd0>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e5c2:	4b9c      	ldr	r3, [pc, #624]	; (800e834 <LidarSetPos+0xcd4>)
 800e5c4:	4a9c      	ldr	r2, [pc, #624]	; (800e838 <LidarSetPos+0xcd8>)
 800e5c6:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 800e5d2:	4b9a      	ldr	r3, [pc, #616]	; (800e83c <LidarSetPos+0xcdc>)
 800e5d4:	4a9a      	ldr	r2, [pc, #616]	; (800e840 <LidarSetPos+0xce0>)
 800e5d6:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e5d8:	f7fd ff76 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER;
 800e5dc:	463b      	mov	r3, r7
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2205      	movs	r2, #5
 800e5e2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_1_to_center, 1, &pp);
 800e5e6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800e5ea:	4a96      	ldr	r2, [pc, #600]	; (800e844 <LidarSetPos+0xce4>)
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7f7 fa35 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e5f4:	e02a      	b.n	800e64c <LidarSetPos+0xaec>
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e5f6:	2108      	movs	r1, #8
 800e5f8:	4893      	ldr	r0, [pc, #588]	; (800e848 <LidarSetPos+0xce8>)
 800e5fa:	f003 fdd3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d006      	beq.n	800e612 <LidarSetPos+0xab2>
 800e604:	2110      	movs	r1, #16
 800e606:	4890      	ldr	r0, [pc, #576]	; (800e848 <LidarSetPos+0xce8>)
 800e608:	f003 fdcc 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d109      	bne.n	800e626 <LidarSetPos+0xac6>
						{
							pp.target_y[0] = pp.real_y;
 800e612:	4b8c      	ldr	r3, [pc, #560]	; (800e844 <LidarSetPos+0xce4>)
 800e614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e616:	4a8b      	ldr	r2, [pc, #556]	; (800e844 <LidarSetPos+0xce4>)
 800e618:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e61c:	4b89      	ldr	r3, [pc, #548]	; (800e844 <LidarSetPos+0xce4>)
 800e61e:	f04f 0200 	mov.w	r2, #0
 800e622:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e626:	4b89      	ldr	r3, [pc, #548]	; (800e84c <LidarSetPos+0xcec>)
 800e628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e62e:	d10d      	bne.n	800e64c <LidarSetPos+0xaec>
						{
							while(ps4.button == SQUARE);
 800e630:	bf00      	nop
 800e632:	4b86      	ldr	r3, [pc, #536]	; (800e84c <LidarSetPos+0xcec>)
 800e634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e63a:	d0fa      	beq.n	800e632 <LidarSetPos+0xad2>
							PP_stop(&pp);
 800e63c:	4881      	ldr	r0, [pc, #516]	; (800e844 <LidarSetPos+0xce4>)
 800e63e:	f7f7 fc48 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e642:	463b      	mov	r3, r7
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2201      	movs	r2, #1
 800e648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					while(pp.pp_start)
 800e64c:	4b7d      	ldr	r3, [pc, #500]	; (800e844 <LidarSetPos+0xce4>)
 800e64e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e652:	f003 0301 	and.w	r3, r3, #1
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1cc      	bne.n	800e5f6 <LidarSetPos+0xa96>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e65c:	4b74      	ldr	r3, [pc, #464]	; (800e830 <LidarSetPos+0xcd0>)
 800e65e:	2201      	movs	r2, #1
 800e660:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e662:	463b      	mov	r3, r7
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f040 8133 	bne.w	800e8d6 <LidarSetPos+0xd76>
						LidarAdjust(lidar);
 800e670:	463b      	mov	r3, r7
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	f001 f9b8 	bl	800f9e8 <LidarAdjust>
					break;
 800e678:	e12d      	b.n	800e8d6 <LidarSetPos+0xd76>


				case CENTER_2:
					stick_fence = 0;
 800e67a:	4b6d      	ldr	r3, [pc, #436]	; (800e830 <LidarSetPos+0xcd0>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e680:	4b6c      	ldr	r3, [pc, #432]	; (800e834 <LidarSetPos+0xcd4>)
 800e682:	4a6d      	ldr	r2, [pc, #436]	; (800e838 <LidarSetPos+0xcd8>)
 800e684:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e686:	463b      	mov	r3, r7
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 800e690:	4b6a      	ldr	r3, [pc, #424]	; (800e83c <LidarSetPos+0xcdc>)
 800e692:	4a6b      	ldr	r2, [pc, #428]	; (800e840 <LidarSetPos+0xce0>)
 800e694:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e696:	f7fd ff17 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER;
 800e69a:	463b      	mov	r3, r7
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2205      	movs	r2, #5
 800e6a0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center, 1, &pp);
 800e6a4:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800e6a8:	4a66      	ldr	r2, [pc, #408]	; (800e844 <LidarSetPos+0xce4>)
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f7 f9d6 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e6b2:	e02a      	b.n	800e70a <LidarSetPos+0xbaa>
					{
						if(ps4.button == SQUARE)
 800e6b4:	4b65      	ldr	r3, [pc, #404]	; (800e84c <LidarSetPos+0xcec>)
 800e6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6bc:	d10d      	bne.n	800e6da <LidarSetPos+0xb7a>
						{
							while(ps4.button == SQUARE);
 800e6be:	bf00      	nop
 800e6c0:	4b62      	ldr	r3, [pc, #392]	; (800e84c <LidarSetPos+0xcec>)
 800e6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6c8:	d0fa      	beq.n	800e6c0 <LidarSetPos+0xb60>
							PP_stop(&pp);
 800e6ca:	485e      	ldr	r0, [pc, #376]	; (800e844 <LidarSetPos+0xce4>)
 800e6cc:	f7f7 fc01 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e6d0:	463b      	mov	r3, r7
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_2;
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e6da:	2108      	movs	r1, #8
 800e6dc:	485a      	ldr	r0, [pc, #360]	; (800e848 <LidarSetPos+0xce8>)
 800e6de:	f003 fd61 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <LidarSetPos+0xb96>
 800e6e8:	2110      	movs	r1, #16
 800e6ea:	4857      	ldr	r0, [pc, #348]	; (800e848 <LidarSetPos+0xce8>)
 800e6ec:	f003 fd5a 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d109      	bne.n	800e70a <LidarSetPos+0xbaa>
						{
							pp.target_y[0] = pp.real_y;
 800e6f6:	4b53      	ldr	r3, [pc, #332]	; (800e844 <LidarSetPos+0xce4>)
 800e6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fa:	4a52      	ldr	r2, [pc, #328]	; (800e844 <LidarSetPos+0xce4>)
 800e6fc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e700:	4b50      	ldr	r3, [pc, #320]	; (800e844 <LidarSetPos+0xce4>)
 800e702:	f04f 0200 	mov.w	r2, #0
 800e706:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e70a:	4b4e      	ldr	r3, [pc, #312]	; (800e844 <LidarSetPos+0xce4>)
 800e70c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e710:	f003 0301 	and.w	r3, r3, #1
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1cc      	bne.n	800e6b4 <LidarSetPos+0xb54>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e71a:	4b45      	ldr	r3, [pc, #276]	; (800e830 <LidarSetPos+0xcd0>)
 800e71c:	2201      	movs	r2, #1
 800e71e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e720:	463b      	mov	r3, r7
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f040 80d7 	bne.w	800e8dc <LidarSetPos+0xd7c>
						LidarAdjust(lidar);
 800e72e:	463b      	mov	r3, r7
 800e730:	6818      	ldr	r0, [r3, #0]
 800e732:	f001 f959 	bl	800f9e8 <LidarAdjust>
					break;
 800e736:	e0d1      	b.n	800e8dc <LidarSetPos+0xd7c>

				case CENTER_3:
					stick_fence = 0;
 800e738:	4b3d      	ldr	r3, [pc, #244]	; (800e830 <LidarSetPos+0xcd0>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e73e:	4b3d      	ldr	r3, [pc, #244]	; (800e834 <LidarSetPos+0xcd4>)
 800e740:	4a3d      	ldr	r2, [pc, #244]	; (800e838 <LidarSetPos+0xcd8>)
 800e742:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e744:	463b      	mov	r3, r7
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2200      	movs	r2, #0
 800e74a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 800e74e:	4b3b      	ldr	r3, [pc, #236]	; (800e83c <LidarSetPos+0xcdc>)
 800e750:	4a3b      	ldr	r2, [pc, #236]	; (800e840 <LidarSetPos+0xce0>)
 800e752:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800e754:	f7fd feb8 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER;
 800e758:	463b      	mov	r3, r7
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2205      	movs	r2, #5
 800e75e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center, 1, &pp);
 800e762:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800e766:	4a37      	ldr	r2, [pc, #220]	; (800e844 <LidarSetPos+0xce4>)
 800e768:	2101      	movs	r1, #1
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f7 f977 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e770:	e02a      	b.n	800e7c8 <LidarSetPos+0xc68>
					{
						if(ps4.button == SQUARE)
 800e772:	4b36      	ldr	r3, [pc, #216]	; (800e84c <LidarSetPos+0xcec>)
 800e774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e77a:	d10d      	bne.n	800e798 <LidarSetPos+0xc38>
						{
							while(ps4.button == SQUARE);
 800e77c:	bf00      	nop
 800e77e:	4b33      	ldr	r3, [pc, #204]	; (800e84c <LidarSetPos+0xcec>)
 800e780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e786:	d0fa      	beq.n	800e77e <LidarSetPos+0xc1e>
							PP_stop(&pp);
 800e788:	482e      	ldr	r0, [pc, #184]	; (800e844 <LidarSetPos+0xce4>)
 800e78a:	f7f7 fba2 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e78e:	463b      	mov	r3, r7
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2201      	movs	r2, #1
 800e794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e798:	2108      	movs	r1, #8
 800e79a:	482b      	ldr	r0, [pc, #172]	; (800e848 <LidarSetPos+0xce8>)
 800e79c:	f003 fd02 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d006      	beq.n	800e7b4 <LidarSetPos+0xc54>
 800e7a6:	2110      	movs	r1, #16
 800e7a8:	4827      	ldr	r0, [pc, #156]	; (800e848 <LidarSetPos+0xce8>)
 800e7aa:	f003 fcfb 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d109      	bne.n	800e7c8 <LidarSetPos+0xc68>
						{
							pp.target_y[0] = pp.real_y;
 800e7b4:	4b23      	ldr	r3, [pc, #140]	; (800e844 <LidarSetPos+0xce4>)
 800e7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b8:	4a22      	ldr	r2, [pc, #136]	; (800e844 <LidarSetPos+0xce4>)
 800e7ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e7be:	4b21      	ldr	r3, [pc, #132]	; (800e844 <LidarSetPos+0xce4>)
 800e7c0:	f04f 0200 	mov.w	r2, #0
 800e7c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <LidarSetPos+0xce4>)
 800e7ca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1cc      	bne.n	800e772 <LidarSetPos+0xc12>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e7d8:	4b15      	ldr	r3, [pc, #84]	; (800e830 <LidarSetPos+0xcd0>)
 800e7da:	2201      	movs	r2, #1
 800e7dc:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e7de:	463b      	mov	r3, r7
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d17b      	bne.n	800e8e2 <LidarSetPos+0xd82>
						LidarAdjust(lidar);
 800e7ea:	463b      	mov	r3, r7
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f001 f8fb 	bl	800f9e8 <LidarAdjust>
					break;
 800e7f2:	e076      	b.n	800e8e2 <LidarSetPos+0xd82>

				case CENTER_4:
					stick_fence = 0;
 800e7f4:	4b0e      	ldr	r3, [pc, #56]	; (800e830 <LidarSetPos+0xcd0>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800e7fa:	4b0e      	ldr	r3, [pc, #56]	; (800e834 <LidarSetPos+0xcd4>)
 800e7fc:	4a0e      	ldr	r2, [pc, #56]	; (800e838 <LidarSetPos+0xcd8>)
 800e7fe:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800e800:	4b0e      	ldr	r3, [pc, #56]	; (800e83c <LidarSetPos+0xcdc>)
 800e802:	4a0f      	ldr	r2, [pc, #60]	; (800e840 <LidarSetPos+0xce0>)
 800e804:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800e806:	463b      	mov	r3, r7
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					ResetCoordinate();
 800e810:	f7fd fe5a 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER;
 800e814:	463b      	mov	r3, r7
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2205      	movs	r2, #5
 800e81a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center, 1, &pp);
 800e81e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800e822:	4a08      	ldr	r2, [pc, #32]	; (800e844 <LidarSetPos+0xce4>)
 800e824:	2101      	movs	r1, #1
 800e826:	4618      	mov	r0, r3
 800e828:	f7f7 f919 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e82c:	e03b      	b.n	800e8a6 <LidarSetPos+0xd46>
 800e82e:	bf00      	nop
 800e830:	200072c4 	.word	0x200072c4
 800e834:	20007388 	.word	0x20007388
 800e838:	3e2b851f 	.word	0x3e2b851f
 800e83c:	200065a0 	.word	0x200065a0
 800e840:	40966666 	.word	0x40966666
 800e844:	20006ccc 	.word	0x20006ccc
 800e848:	40020c00 	.word	0x40020c00
 800e84c:	2000a028 	.word	0x2000a028
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800e850:	2108      	movs	r1, #8
 800e852:	489b      	ldr	r0, [pc, #620]	; (800eac0 <LidarSetPos+0xf60>)
 800e854:	f003 fca6 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d006      	beq.n	800e86c <LidarSetPos+0xd0c>
 800e85e:	2110      	movs	r1, #16
 800e860:	4897      	ldr	r0, [pc, #604]	; (800eac0 <LidarSetPos+0xf60>)
 800e862:	f003 fc9f 	bl	80121a4 <HAL_GPIO_ReadPin>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d109      	bne.n	800e880 <LidarSetPos+0xd20>
						{
							pp.target_y[0] = pp.real_y;
 800e86c:	4b95      	ldr	r3, [pc, #596]	; (800eac4 <LidarSetPos+0xf64>)
 800e86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e870:	4a94      	ldr	r2, [pc, #592]	; (800eac4 <LidarSetPos+0xf64>)
 800e872:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800e876:	4b93      	ldr	r3, [pc, #588]	; (800eac4 <LidarSetPos+0xf64>)
 800e878:	f04f 0200 	mov.w	r2, #0
 800e87c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800e880:	4b91      	ldr	r3, [pc, #580]	; (800eac8 <LidarSetPos+0xf68>)
 800e882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e888:	d10d      	bne.n	800e8a6 <LidarSetPos+0xd46>
						{
							while(ps4.button == SQUARE);
 800e88a:	bf00      	nop
 800e88c:	4b8e      	ldr	r3, [pc, #568]	; (800eac8 <LidarSetPos+0xf68>)
 800e88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e894:	d0fa      	beq.n	800e88c <LidarSetPos+0xd2c>
							PP_stop(&pp);
 800e896:	488b      	ldr	r0, [pc, #556]	; (800eac4 <LidarSetPos+0xf64>)
 800e898:	f7f7 fb1b 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800e89c:	463b      	mov	r3, r7
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					while(pp.pp_start)
 800e8a6:	4b87      	ldr	r3, [pc, #540]	; (800eac4 <LidarSetPos+0xf64>)
 800e8a8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1cc      	bne.n	800e850 <LidarSetPos+0xcf0>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800e8b6:	4b85      	ldr	r3, [pc, #532]	; (800eacc <LidarSetPos+0xf6c>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800e8bc:	463b      	mov	r3, r7
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <LidarSetPos+0xd70>
						LidarAdjust(lidar);
 800e8c8:	463b      	mov	r3, r7
 800e8ca:	6818      	ldr	r0, [r3, #0]
 800e8cc:	f001 f88c 	bl	800f9e8 <LidarAdjust>

				default:
					break;
 800e8d0:	bf00      	nop
 800e8d2:	f001 b87d 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e8d6:	bf00      	nop
 800e8d8:	f001 b87a 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e8dc:	bf00      	nop
 800e8de:	f001 b877 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800e8e2:	bf00      	nop
			}
			break;
 800e8e4:	f001 b874 	b.w	800f9d0 <LidarSetPos+0x1e70>

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 800e8e8:	463b      	mov	r3, r7
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	2b08      	cmp	r3, #8
 800e8f4:	f200 820f 	bhi.w	800ed16 <LidarSetPos+0x11b6>
 800e8f8:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <LidarSetPos+0xda0>)
 800e8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fe:	bf00      	nop
 800e900:	0800e925 	.word	0x0800e925
 800e904:	0800e93d 	.word	0x0800e93d
 800e908:	0800ed17 	.word	0x0800ed17
 800e90c:	0800eb73 	.word	0x0800eb73
 800e910:	0800ea65 	.word	0x0800ea65
 800e914:	0800ed17 	.word	0x0800ed17
 800e918:	0800ec45 	.word	0x0800ec45
 800e91c:	0800e949 	.word	0x0800e949
 800e920:	0800e931 	.word	0x0800e931
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 800e924:	463b      	mov	r3, r7
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2206      	movs	r2, #6
 800e92a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e92e:	e1fc      	b.n	800ed2a <LidarSetPos+0x11ca>

				case PICK_RIGHT:
					lidar->pos = CENTER_3;
 800e930:	463b      	mov	r3, r7
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2206      	movs	r2, #6
 800e936:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e93a:	e1f6      	b.n	800ed2a <LidarSetPos+0x11ca>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 800e93c:	463b      	mov	r3, r7
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2206      	movs	r2, #6
 800e942:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800e946:	e1f0      	b.n	800ed2a <LidarSetPos+0x11ca>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 800e948:	463b      	mov	r3, r7
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2206      	movs	r2, #6
 800e94e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->fail = 0;
 800e952:	463b      	mov	r3, r7
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2200      	movs	r2, #0
 800e958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800e95c:	4b5c      	ldr	r3, [pc, #368]	; (800ead0 <LidarSetPos+0xf70>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d006      	beq.n	800e972 <LidarSetPos+0xe12>
					{
						vesc_speed = BlueType2;
 800e964:	4b5b      	ldr	r3, [pc, #364]	; (800ead4 <LidarSetPos+0xf74>)
 800e966:	4a5c      	ldr	r2, [pc, #368]	; (800ead8 <LidarSetPos+0xf78>)
 800e968:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800e96a:	4b5c      	ldr	r3, [pc, #368]	; (800eadc <LidarSetPos+0xf7c>)
 800e96c:	4a5c      	ldr	r2, [pc, #368]	; (800eae0 <LidarSetPos+0xf80>)
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	e005      	b.n	800e97e <LidarSetPos+0xe1e>
					}
					else
					{
						vesc_speed = RedType2;
 800e972:	4b58      	ldr	r3, [pc, #352]	; (800ead4 <LidarSetPos+0xf74>)
 800e974:	4a5b      	ldr	r2, [pc, #364]	; (800eae4 <LidarSetPos+0xf84>)
 800e976:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800e978:	4b58      	ldr	r3, [pc, #352]	; (800eadc <LidarSetPos+0xf7c>)
 800e97a:	4a5b      	ldr	r2, [pc, #364]	; (800eae8 <LidarSetPos+0xf88>)
 800e97c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800e97e:	f7fd fda3 	bl	800c4c8 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800e982:	2000      	movs	r0, #0
 800e984:	f7f6 f990 	bl	8004ca8 <setOrientationMODN>
					PP_start(upper_right_to_center_3, 1, &pp);
 800e988:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800e98c:	4a4d      	ldr	r2, [pc, #308]	; (800eac4 <LidarSetPos+0xf64>)
 800e98e:	2101      	movs	r1, #1
 800e990:	4618      	mov	r0, r3
 800e992:	f7f7 f864 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e996:	e020      	b.n	800e9da <LidarSetPos+0xe7a>
					{
						if(ps4.button == SQUARE)
 800e998:	4b4b      	ldr	r3, [pc, #300]	; (800eac8 <LidarSetPos+0xf68>)
 800e99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e99c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9a0:	d108      	bne.n	800e9b4 <LidarSetPos+0xe54>
						{
							while(ps4.button == SQUARE);
 800e9a2:	bf00      	nop
 800e9a4:	4b48      	ldr	r3, [pc, #288]	; (800eac8 <LidarSetPos+0xf68>)
 800e9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ac:	d0fa      	beq.n	800e9a4 <LidarSetPos+0xe44>
							PP_stop(&pp);
 800e9ae:	4845      	ldr	r0, [pc, #276]	; (800eac4 <LidarSetPos+0xf64>)
 800e9b0:	f7f7 fa8f 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800e9b4:	4b43      	ldr	r3, [pc, #268]	; (800eac4 <LidarSetPos+0xf64>)
 800e9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7f1 fdc5 	bl	8000548 <__aeabi_f2d>
 800e9be:	a33e      	add	r3, pc, #248	; (adr r3, 800eab8 <LidarSetPos+0xf58>)
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	f7f2 f894 	bl	8000af0 <__aeabi_dcmple>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d100      	bne.n	800e9d0 <LidarSetPos+0xe70>
 800e9ce:	e004      	b.n	800e9da <LidarSetPos+0xe7a>
							pp.target_vel[0] = 2.0;
 800e9d0:	4b3c      	ldr	r3, [pc, #240]	; (800eac4 <LidarSetPos+0xf64>)
 800e9d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e9d6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800e9da:	4b3a      	ldr	r3, [pc, #232]	; (800eac4 <LidarSetPos+0xf64>)
 800e9dc:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1d6      	bne.n	800e998 <LidarSetPos+0xe38>
					}

					PP_start(upper_right_to_center_3_2, 1, &pp);
 800e9ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e9ee:	4a35      	ldr	r2, [pc, #212]	; (800eac4 <LidarSetPos+0xf64>)
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7f7 f833 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800e9f8:	e020      	b.n	800ea3c <LidarSetPos+0xedc>
					{
						if(ps4.button == SQUARE)
 800e9fa:	4b33      	ldr	r3, [pc, #204]	; (800eac8 <LidarSetPos+0xf68>)
 800e9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea02:	d108      	bne.n	800ea16 <LidarSetPos+0xeb6>
						{
							while(ps4.button == SQUARE);
 800ea04:	bf00      	nop
 800ea06:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <LidarSetPos+0xf68>)
 800ea08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea0e:	d0fa      	beq.n	800ea06 <LidarSetPos+0xea6>
							PP_stop(&pp);
 800ea10:	482c      	ldr	r0, [pc, #176]	; (800eac4 <LidarSetPos+0xf64>)
 800ea12:	f7f7 fa5e 	bl	8005ed2 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ea16:	2108      	movs	r1, #8
 800ea18:	4829      	ldr	r0, [pc, #164]	; (800eac0 <LidarSetPos+0xf60>)
 800ea1a:	f003 fbc3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d006      	beq.n	800ea32 <LidarSetPos+0xed2>
 800ea24:	2110      	movs	r1, #16
 800ea26:	4826      	ldr	r0, [pc, #152]	; (800eac0 <LidarSetPos+0xf60>)
 800ea28:	f003 fbbc 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d104      	bne.n	800ea3c <LidarSetPos+0xedc>
							pp.error_y = 0;
 800ea32:	4b24      	ldr	r3, [pc, #144]	; (800eac4 <LidarSetPos+0xf64>)
 800ea34:	f04f 0200 	mov.w	r2, #0
 800ea38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ea3c:	4b21      	ldr	r3, [pc, #132]	; (800eac4 <LidarSetPos+0xf64>)
 800ea3e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1d6      	bne.n	800e9fa <LidarSetPos+0xe9a>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					AdjustRings();
 800ea4c:	f7fd fd2a 	bl	800c4a4 <AdjustRings>
					adjust_servo;
 800ea50:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ea54:	4825      	ldr	r0, [pc, #148]	; (800eaec <LidarSetPos+0xf8c>)
 800ea56:	f7fb fa2f 	bl	8009eb8 <ServoSetPulse>

					LidarAdjust(lidar);
 800ea5a:	463b      	mov	r3, r7
 800ea5c:	6818      	ldr	r0, [r3, #0]
 800ea5e:	f000 ffc3 	bl	800f9e8 <LidarAdjust>

					break;
 800ea62:	e162      	b.n	800ed2a <LidarSetPos+0x11ca>

				case CENTER:
					stick_fence = 0;
 800ea64:	4b19      	ldr	r3, [pc, #100]	; (800eacc <LidarSetPos+0xf6c>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800ea74:	4b16      	ldr	r3, [pc, #88]	; (800ead0 <LidarSetPos+0xf70>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d006      	beq.n	800ea8a <LidarSetPos+0xf2a>
					{
						vesc_speed = BlueType2;
 800ea7c:	4b15      	ldr	r3, [pc, #84]	; (800ead4 <LidarSetPos+0xf74>)
 800ea7e:	4a16      	ldr	r2, [pc, #88]	; (800ead8 <LidarSetPos+0xf78>)
 800ea80:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ea82:	4b16      	ldr	r3, [pc, #88]	; (800eadc <LidarSetPos+0xf7c>)
 800ea84:	4a16      	ldr	r2, [pc, #88]	; (800eae0 <LidarSetPos+0xf80>)
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	e005      	b.n	800ea96 <LidarSetPos+0xf36>
					}
					else
					{
						vesc_speed = RedType2;
 800ea8a:	4b12      	ldr	r3, [pc, #72]	; (800ead4 <LidarSetPos+0xf74>)
 800ea8c:	4a15      	ldr	r2, [pc, #84]	; (800eae4 <LidarSetPos+0xf84>)
 800ea8e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ea90:	4b12      	ldr	r3, [pc, #72]	; (800eadc <LidarSetPos+0xf7c>)
 800ea92:	4a15      	ldr	r2, [pc, #84]	; (800eae8 <LidarSetPos+0xf88>)
 800ea94:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ea96:	f7fd fd17 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ea9a:	463b      	mov	r3, r7
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2206      	movs	r2, #6
 800eaa0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_3, 1, &pp);
 800eaa4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800eaa8:	4a06      	ldr	r2, [pc, #24]	; (800eac4 <LidarSetPos+0xf64>)
 800eaaa:	2101      	movs	r1, #1
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7f6 ffd6 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800eab2:	e047      	b.n	800eb44 <LidarSetPos+0xfe4>
 800eab4:	f3af 8000 	nop.w
 800eab8:	9999999a 	.word	0x9999999a
 800eabc:	c0059999 	.word	0xc0059999
 800eac0:	40020c00 	.word	0x40020c00
 800eac4:	20006ccc 	.word	0x20006ccc
 800eac8:	2000a028 	.word	0x2000a028
 800eacc:	200072c4 	.word	0x200072c4
 800ead0:	20006a24 	.word	0x20006a24
 800ead4:	200065a0 	.word	0x200065a0
 800ead8:	41026666 	.word	0x41026666
 800eadc:	20007388 	.word	0x20007388
 800eae0:	3e8b851f 	.word	0x3e8b851f
 800eae4:	41033333 	.word	0x41033333
 800eae8:	3e87ae14 	.word	0x3e87ae14
 800eaec:	20007874 	.word	0x20007874
					{
						if(ps4.button == SQUARE)
 800eaf0:	4baf      	ldr	r3, [pc, #700]	; (800edb0 <LidarSetPos+0x1250>)
 800eaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaf8:	d10c      	bne.n	800eb14 <LidarSetPos+0xfb4>
						{
							while(ps4.button == SQUARE);
 800eafa:	bf00      	nop
 800eafc:	4bac      	ldr	r3, [pc, #688]	; (800edb0 <LidarSetPos+0x1250>)
 800eafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb04:	d0fa      	beq.n	800eafc <LidarSetPos+0xf9c>
							StopAutoPP();
 800eb06:	f7fd fc9d 	bl	800c444 <StopAutoPP>
							lidar->fail = 1;
 800eb0a:	463b      	mov	r3, r7
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER;
//							lidar->pos_counter = CENTER;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800eb14:	2108      	movs	r1, #8
 800eb16:	48a7      	ldr	r0, [pc, #668]	; (800edb4 <LidarSetPos+0x1254>)
 800eb18:	f003 fb44 	bl	80121a4 <HAL_GPIO_ReadPin>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d006      	beq.n	800eb30 <LidarSetPos+0xfd0>
 800eb22:	2110      	movs	r1, #16
 800eb24:	48a3      	ldr	r0, [pc, #652]	; (800edb4 <LidarSetPos+0x1254>)
 800eb26:	f003 fb3d 	bl	80121a4 <HAL_GPIO_ReadPin>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d109      	bne.n	800eb44 <LidarSetPos+0xfe4>
						{
							pp.target_y[0] = pp.real_y;
 800eb30:	4ba1      	ldr	r3, [pc, #644]	; (800edb8 <LidarSetPos+0x1258>)
 800eb32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb34:	4aa0      	ldr	r2, [pc, #640]	; (800edb8 <LidarSetPos+0x1258>)
 800eb36:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800eb3a:	4b9f      	ldr	r3, [pc, #636]	; (800edb8 <LidarSetPos+0x1258>)
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800eb44:	4b9c      	ldr	r3, [pc, #624]	; (800edb8 <LidarSetPos+0x1258>)
 800eb46:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1cd      	bne.n	800eaf0 <LidarSetPos+0xf90>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800eb54:	4b99      	ldr	r3, [pc, #612]	; (800edbc <LidarSetPos+0x125c>)
 800eb56:	2201      	movs	r2, #1
 800eb58:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800eb5a:	463b      	mov	r3, r7
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f040 80da 	bne.w	800ed1c <LidarSetPos+0x11bc>
						LidarAdjust(lidar);
 800eb68:	463b      	mov	r3, r7
 800eb6a:	6818      	ldr	r0, [r3, #0]
 800eb6c:	f000 ff3c 	bl	800f9e8 <LidarAdjust>
					break;
 800eb70:	e0d4      	b.n	800ed1c <LidarSetPos+0x11bc>

				case CENTER_2:
					stick_fence = 0;
 800eb72:	4b92      	ldr	r3, [pc, #584]	; (800edbc <LidarSetPos+0x125c>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800eb78:	463b      	mov	r3, r7
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800eb82:	4b8f      	ldr	r3, [pc, #572]	; (800edc0 <LidarSetPos+0x1260>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d006      	beq.n	800eb98 <LidarSetPos+0x1038>
					{
						vesc_speed = BlueType2;
 800eb8a:	4b8e      	ldr	r3, [pc, #568]	; (800edc4 <LidarSetPos+0x1264>)
 800eb8c:	4a8e      	ldr	r2, [pc, #568]	; (800edc8 <LidarSetPos+0x1268>)
 800eb8e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800eb90:	4b8e      	ldr	r3, [pc, #568]	; (800edcc <LidarSetPos+0x126c>)
 800eb92:	4a8f      	ldr	r2, [pc, #572]	; (800edd0 <LidarSetPos+0x1270>)
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	e005      	b.n	800eba4 <LidarSetPos+0x1044>
					}
					else
					{
						vesc_speed = RedType2;
 800eb98:	4b8a      	ldr	r3, [pc, #552]	; (800edc4 <LidarSetPos+0x1264>)
 800eb9a:	4a8e      	ldr	r2, [pc, #568]	; (800edd4 <LidarSetPos+0x1274>)
 800eb9c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800eb9e:	4b8b      	ldr	r3, [pc, #556]	; (800edcc <LidarSetPos+0x126c>)
 800eba0:	4a8d      	ldr	r2, [pc, #564]	; (800edd8 <LidarSetPos+0x1278>)
 800eba2:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800eba4:	f7fd fc90 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800eba8:	463b      	mov	r3, r7
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2206      	movs	r2, #6
 800ebae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_2_to_center_3, 1, &pp);
 800ebb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ebb6:	4a80      	ldr	r2, [pc, #512]	; (800edb8 <LidarSetPos+0x1258>)
 800ebb8:	2101      	movs	r1, #1
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f6 ff4f 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800ebc0:	e02a      	b.n	800ec18 <LidarSetPos+0x10b8>
					{
						if(ps4.button == SQUARE)
 800ebc2:	4b7b      	ldr	r3, [pc, #492]	; (800edb0 <LidarSetPos+0x1250>)
 800ebc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebca:	d10d      	bne.n	800ebe8 <LidarSetPos+0x1088>
						{
							while(ps4.button == SQUARE);
 800ebcc:	bf00      	nop
 800ebce:	4b78      	ldr	r3, [pc, #480]	; (800edb0 <LidarSetPos+0x1250>)
 800ebd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebd6:	d0fa      	beq.n	800ebce <LidarSetPos+0x106e>
							PP_stop(&pp);
 800ebd8:	4877      	ldr	r0, [pc, #476]	; (800edb8 <LidarSetPos+0x1258>)
 800ebda:	f7f7 f97a 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800ebde:	463b      	mov	r3, r7
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_2; // PP Failed
//							lidar->pos_counter = CENTER_2;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ebe8:	2108      	movs	r1, #8
 800ebea:	4872      	ldr	r0, [pc, #456]	; (800edb4 <LidarSetPos+0x1254>)
 800ebec:	f003 fada 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d006      	beq.n	800ec04 <LidarSetPos+0x10a4>
 800ebf6:	2110      	movs	r1, #16
 800ebf8:	486e      	ldr	r0, [pc, #440]	; (800edb4 <LidarSetPos+0x1254>)
 800ebfa:	f003 fad3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d109      	bne.n	800ec18 <LidarSetPos+0x10b8>
						{
							pp.target_y[0] = pp.real_y;
 800ec04:	4b6c      	ldr	r3, [pc, #432]	; (800edb8 <LidarSetPos+0x1258>)
 800ec06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec08:	4a6b      	ldr	r2, [pc, #428]	; (800edb8 <LidarSetPos+0x1258>)
 800ec0a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ec0e:	4b6a      	ldr	r3, [pc, #424]	; (800edb8 <LidarSetPos+0x1258>)
 800ec10:	f04f 0200 	mov.w	r2, #0
 800ec14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ec18:	4b67      	ldr	r3, [pc, #412]	; (800edb8 <LidarSetPos+0x1258>)
 800ec1a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1cc      	bne.n	800ebc2 <LidarSetPos+0x1062>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ec28:	4b64      	ldr	r3, [pc, #400]	; (800edbc <LidarSetPos+0x125c>)
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800ec2e:	463b      	mov	r3, r7
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d173      	bne.n	800ed22 <LidarSetPos+0x11c2>
						LidarAdjust(lidar);
 800ec3a:	463b      	mov	r3, r7
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	f000 fed3 	bl	800f9e8 <LidarAdjust>
					break;
 800ec42:	e06e      	b.n	800ed22 <LidarSetPos+0x11c2>


				case CENTER_4:
					stick_fence = 0;
 800ec44:	4b5d      	ldr	r3, [pc, #372]	; (800edbc <LidarSetPos+0x125c>)
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800ec4a:	463b      	mov	r3, r7
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 800ec54:	4b5a      	ldr	r3, [pc, #360]	; (800edc0 <LidarSetPos+0x1260>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d006      	beq.n	800ec6a <LidarSetPos+0x110a>
					{
						vesc_speed = BlueType2;
 800ec5c:	4b59      	ldr	r3, [pc, #356]	; (800edc4 <LidarSetPos+0x1264>)
 800ec5e:	4a5a      	ldr	r2, [pc, #360]	; (800edc8 <LidarSetPos+0x1268>)
 800ec60:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 800ec62:	4b5a      	ldr	r3, [pc, #360]	; (800edcc <LidarSetPos+0x126c>)
 800ec64:	4a5a      	ldr	r2, [pc, #360]	; (800edd0 <LidarSetPos+0x1270>)
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e005      	b.n	800ec76 <LidarSetPos+0x1116>
					}
					else
					{
						vesc_speed = RedType2;
 800ec6a:	4b56      	ldr	r3, [pc, #344]	; (800edc4 <LidarSetPos+0x1264>)
 800ec6c:	4a59      	ldr	r2, [pc, #356]	; (800edd4 <LidarSetPos+0x1274>)
 800ec6e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 800ec70:	4b56      	ldr	r3, [pc, #344]	; (800edcc <LidarSetPos+0x126c>)
 800ec72:	4a59      	ldr	r2, [pc, #356]	; (800edd8 <LidarSetPos+0x1278>)
 800ec74:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 800ec76:	f7fd fc27 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_3;
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2206      	movs	r2, #6
 800ec80:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_4_to_center_3, 1, &pp);
 800ec84:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ec88:	4a4b      	ldr	r2, [pc, #300]	; (800edb8 <LidarSetPos+0x1258>)
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f6 fee6 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800ec92:	e02a      	b.n	800ecea <LidarSetPos+0x118a>
					{
						if(ps4.button == SQUARE)
 800ec94:	4b46      	ldr	r3, [pc, #280]	; (800edb0 <LidarSetPos+0x1250>)
 800ec96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec9c:	d10d      	bne.n	800ecba <LidarSetPos+0x115a>
						{
							while(ps4.button == SQUARE);
 800ec9e:	bf00      	nop
 800eca0:	4b43      	ldr	r3, [pc, #268]	; (800edb0 <LidarSetPos+0x1250>)
 800eca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eca8:	d0fa      	beq.n	800eca0 <LidarSetPos+0x1140>
							PP_stop(&pp);
 800ecaa:	4843      	ldr	r0, [pc, #268]	; (800edb8 <LidarSetPos+0x1258>)
 800ecac:	f7f7 f911 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800ecb0:	463b      	mov	r3, r7
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ecba:	2108      	movs	r1, #8
 800ecbc:	483d      	ldr	r0, [pc, #244]	; (800edb4 <LidarSetPos+0x1254>)
 800ecbe:	f003 fa71 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d006      	beq.n	800ecd6 <LidarSetPos+0x1176>
 800ecc8:	2110      	movs	r1, #16
 800ecca:	483a      	ldr	r0, [pc, #232]	; (800edb4 <LidarSetPos+0x1254>)
 800eccc:	f003 fa6a 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d109      	bne.n	800ecea <LidarSetPos+0x118a>
						{
							pp.target_y[0] = pp.real_y;
 800ecd6:	4b38      	ldr	r3, [pc, #224]	; (800edb8 <LidarSetPos+0x1258>)
 800ecd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecda:	4a37      	ldr	r2, [pc, #220]	; (800edb8 <LidarSetPos+0x1258>)
 800ecdc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ece0:	4b35      	ldr	r3, [pc, #212]	; (800edb8 <LidarSetPos+0x1258>)
 800ece2:	f04f 0200 	mov.w	r2, #0
 800ece6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ecea:	4b33      	ldr	r3, [pc, #204]	; (800edb8 <LidarSetPos+0x1258>)
 800ecec:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1cc      	bne.n	800ec94 <LidarSetPos+0x1134>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ecfa:	4b30      	ldr	r3, [pc, #192]	; (800edbc <LidarSetPos+0x125c>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800ed00:	463b      	mov	r3, r7
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10d      	bne.n	800ed28 <LidarSetPos+0x11c8>
						LidarAdjust(lidar);
 800ed0c:	463b      	mov	r3, r7
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	f000 fe6a 	bl	800f9e8 <LidarAdjust>
					break;
 800ed14:	e008      	b.n	800ed28 <LidarSetPos+0x11c8>
				default:
					break;
 800ed16:	bf00      	nop
 800ed18:	f000 be5a 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800ed1c:	bf00      	nop
 800ed1e:	f000 be57 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800ed22:	bf00      	nop
 800ed24:	f000 be54 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800ed28:	bf00      	nop
			}
			break;
 800ed2a:	f000 be51 	b.w	800f9d0 <LidarSetPos+0x1e70>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 800ed2e:	463b      	mov	r3, r7
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ed36:	3b01      	subs	r3, #1
 800ed38:	2b08      	cmp	r3, #8
 800ed3a:	f200 8202 	bhi.w	800f142 <LidarSetPos+0x15e2>
 800ed3e:	a201      	add	r2, pc, #4	; (adr r2, 800ed44 <LidarSetPos+0x11e4>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800ed69 	.word	0x0800ed69
 800ed48:	0800ef4f 	.word	0x0800ef4f
 800ed4c:	0800f143 	.word	0x0800f143
 800ed50:	0800f143 	.word	0x0800f143
 800ed54:	0800ed75 	.word	0x0800ed75
 800ed58:	0800f057 	.word	0x0800f057
 800ed5c:	0800f143 	.word	0x0800f143
 800ed60:	0800ef5b 	.word	0x0800ef5b
 800ed64:	0800ee69 	.word	0x0800ee69
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 800ed68:	463b      	mov	r3, r7
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2207      	movs	r2, #7
 800ed6e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ed72:	e1ed      	b.n	800f150 <LidarSetPos+0x15f0>

				case CENTER:
					stick_fence = 0;
 800ed74:	4b11      	ldr	r3, [pc, #68]	; (800edbc <LidarSetPos+0x125c>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800ed7a:	463b      	mov	r3, r7
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 800ed84:	4b11      	ldr	r3, [pc, #68]	; (800edcc <LidarSetPos+0x126c>)
 800ed86:	4a15      	ldr	r2, [pc, #84]	; (800eddc <LidarSetPos+0x127c>)
 800ed88:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ed8a:	4b0e      	ldr	r3, [pc, #56]	; (800edc4 <LidarSetPos+0x1264>)
 800ed8c:	4a14      	ldr	r2, [pc, #80]	; (800ede0 <LidarSetPos+0x1280>)
 800ed8e:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ed90:	f7fd fb9a 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800ed94:	463b      	mov	r3, r7
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2207      	movs	r2, #7
 800ed9a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_to_center_4, 1, &pp);
 800ed9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800eda2:	4a05      	ldr	r2, [pc, #20]	; (800edb8 <LidarSetPos+0x1258>)
 800eda4:	2101      	movs	r1, #1
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7f6 fe59 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800edac:	e045      	b.n	800ee3a <LidarSetPos+0x12da>
 800edae:	bf00      	nop
 800edb0:	2000a028 	.word	0x2000a028
 800edb4:	40020c00 	.word	0x40020c00
 800edb8:	20006ccc 	.word	0x20006ccc
 800edbc:	200072c4 	.word	0x200072c4
 800edc0:	20006a24 	.word	0x20006a24
 800edc4:	200065a0 	.word	0x200065a0
 800edc8:	41026666 	.word	0x41026666
 800edcc:	20007388 	.word	0x20007388
 800edd0:	3e8b851f 	.word	0x3e8b851f
 800edd4:	41033333 	.word	0x41033333
 800edd8:	3e87ae14 	.word	0x3e87ae14
 800eddc:	3e2b851f 	.word	0x3e2b851f
 800ede0:	40966666 	.word	0x40966666
					{
						if(In_LS_Shot_1 || In_LS_Shot_2)
 800ede4:	2108      	movs	r1, #8
 800ede6:	48ac      	ldr	r0, [pc, #688]	; (800f098 <LidarSetPos+0x1538>)
 800ede8:	f003 f9dc 	bl	80121a4 <HAL_GPIO_ReadPin>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d006      	beq.n	800ee00 <LidarSetPos+0x12a0>
 800edf2:	2110      	movs	r1, #16
 800edf4:	48a8      	ldr	r0, [pc, #672]	; (800f098 <LidarSetPos+0x1538>)
 800edf6:	f003 f9d5 	bl	80121a4 <HAL_GPIO_ReadPin>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d109      	bne.n	800ee14 <LidarSetPos+0x12b4>
						{
							pp.target_y[0] = pp.real_y;
 800ee00:	4ba6      	ldr	r3, [pc, #664]	; (800f09c <LidarSetPos+0x153c>)
 800ee02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee04:	4aa5      	ldr	r2, [pc, #660]	; (800f09c <LidarSetPos+0x153c>)
 800ee06:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800ee0a:	4ba4      	ldr	r3, [pc, #656]	; (800f09c <LidarSetPos+0x153c>)
 800ee0c:	f04f 0200 	mov.w	r2, #0
 800ee10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
						}

						if(ps4.button == SQUARE)
 800ee14:	4ba2      	ldr	r3, [pc, #648]	; (800f0a0 <LidarSetPos+0x1540>)
 800ee16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee1c:	d10d      	bne.n	800ee3a <LidarSetPos+0x12da>
						{
							while(ps4.button == SQUARE);
 800ee1e:	bf00      	nop
 800ee20:	4b9f      	ldr	r3, [pc, #636]	; (800f0a0 <LidarSetPos+0x1540>)
 800ee22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee28:	d0fa      	beq.n	800ee20 <LidarSetPos+0x12c0>
							PP_stop(&pp);
 800ee2a:	489c      	ldr	r0, [pc, #624]	; (800f09c <LidarSetPos+0x153c>)
 800ee2c:	f7f7 f851 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800ee30:	463b      	mov	r3, r7
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					while(pp.pp_start)
 800ee3a:	4b98      	ldr	r3, [pc, #608]	; (800f09c <LidarSetPos+0x153c>)
 800ee3c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1cc      	bne.n	800ede4 <LidarSetPos+0x1284>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800ee4a:	4b96      	ldr	r3, [pc, #600]	; (800f0a4 <LidarSetPos+0x1544>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800ee50:	463b      	mov	r3, r7
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f040 8175 	bne.w	800f148 <LidarSetPos+0x15e8>
						LidarAdjust(lidar);
 800ee5e:	463b      	mov	r3, r7
 800ee60:	6818      	ldr	r0, [r3, #0]
 800ee62:	f000 fdc1 	bl	800f9e8 <LidarAdjust>
					break;
 800ee66:	e16f      	b.n	800f148 <LidarSetPos+0x15e8>

				case PICK_RIGHT:
					stick_fence = 0;
 800ee68:	4b8e      	ldr	r3, [pc, #568]	; (800f0a4 <LidarSetPos+0x1544>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800ee6e:	4b8e      	ldr	r3, [pc, #568]	; (800f0a8 <LidarSetPos+0x1548>)
 800ee70:	4a8e      	ldr	r2, [pc, #568]	; (800f0ac <LidarSetPos+0x154c>)
 800ee72:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ee74:	4b8e      	ldr	r3, [pc, #568]	; (800f0b0 <LidarSetPos+0x1550>)
 800ee76:	4a8f      	ldr	r2, [pc, #572]	; (800f0b4 <LidarSetPos+0x1554>)
 800ee78:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ee7a:	f7fd fb25 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800ee7e:	463b      	mov	r3, r7
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2207      	movs	r2, #7
 800ee84:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 800ee88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ee8c:	4a83      	ldr	r2, [pc, #524]	; (800f09c <LidarSetPos+0x153c>)
 800ee8e:	2101      	movs	r1, #1
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f6 fde4 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800ee96:	e00d      	b.n	800eeb4 <LidarSetPos+0x1354>
					{
						if(ps4.button == SQUARE)
 800ee98:	4b81      	ldr	r3, [pc, #516]	; (800f0a0 <LidarSetPos+0x1540>)
 800ee9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eea0:	d108      	bne.n	800eeb4 <LidarSetPos+0x1354>
						{
							while(ps4.button == SQUARE);
 800eea2:	bf00      	nop
 800eea4:	4b7e      	ldr	r3, [pc, #504]	; (800f0a0 <LidarSetPos+0x1540>)
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeac:	d0fa      	beq.n	800eea4 <LidarSetPos+0x1344>
							PP_stop(&pp);
 800eeae:	487b      	ldr	r0, [pc, #492]	; (800f09c <LidarSetPos+0x153c>)
 800eeb0:	f7f7 f80f 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800eeb4:	4b79      	ldr	r3, [pc, #484]	; (800f09c <LidarSetPos+0x153c>)
 800eeb6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d1e9      	bne.n	800ee98 <LidarSetPos+0x1338>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}
					}
					LoadRing();
 800eec4:	f7fd faa8 	bl	800c418 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_4, 1, &pp);
 800eec8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eecc:	4a73      	ldr	r2, [pc, #460]	; (800f09c <LidarSetPos+0x153c>)
 800eece:	2101      	movs	r1, #1
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f6 fdc4 	bl	8005a5e <PP_start>

					load_adjust = 1;
 800eed6:	4b78      	ldr	r3, [pc, #480]	; (800f0b8 <LidarSetPos+0x1558>)
 800eed8:	2201      	movs	r2, #1
 800eeda:	601a      	str	r2, [r3, #0]
					AdjustRings();
 800eedc:	f7fd fae2 	bl	800c4a4 <AdjustRings>
					while(pp.pp_start)
 800eee0:	e020      	b.n	800ef24 <LidarSetPos+0x13c4>
					{
						if(ps4.button == SQUARE)
 800eee2:	4b6f      	ldr	r3, [pc, #444]	; (800f0a0 <LidarSetPos+0x1540>)
 800eee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeea:	d108      	bne.n	800eefe <LidarSetPos+0x139e>
						{
							while(ps4.button == SQUARE);
 800eeec:	bf00      	nop
 800eeee:	4b6c      	ldr	r3, [pc, #432]	; (800f0a0 <LidarSetPos+0x1540>)
 800eef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eef6:	d0fa      	beq.n	800eeee <LidarSetPos+0x138e>
							PP_stop(&pp);
 800eef8:	4868      	ldr	r0, [pc, #416]	; (800f09c <LidarSetPos+0x153c>)
 800eefa:	f7f6 ffea 	bl	8005ed2 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800eefe:	2108      	movs	r1, #8
 800ef00:	4865      	ldr	r0, [pc, #404]	; (800f098 <LidarSetPos+0x1538>)
 800ef02:	f003 f94f 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d006      	beq.n	800ef1a <LidarSetPos+0x13ba>
 800ef0c:	2110      	movs	r1, #16
 800ef0e:	4862      	ldr	r0, [pc, #392]	; (800f098 <LidarSetPos+0x1538>)
 800ef10:	f003 f948 	bl	80121a4 <HAL_GPIO_ReadPin>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d104      	bne.n	800ef24 <LidarSetPos+0x13c4>
							pp.error_y = 0;
 800ef1a:	4b60      	ldr	r3, [pc, #384]	; (800f09c <LidarSetPos+0x153c>)
 800ef1c:	f04f 0200 	mov.w	r2, #0
 800ef20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800ef24:	4b5d      	ldr	r3, [pc, #372]	; (800f09c <LidarSetPos+0x153c>)
 800ef26:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ef2a:	f003 0301 	and.w	r3, r3, #1
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1d6      	bne.n	800eee2 <LidarSetPos+0x1382>
//						load_adjust_servo;
//						osDelay(100);
//						close_servo;
//						osDelay(100);
//					}
					adjust_servo;
 800ef34:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ef38:	4860      	ldr	r0, [pc, #384]	; (800f0bc <LidarSetPos+0x155c>)
 800ef3a:	f7fa ffbd 	bl	8009eb8 <ServoSetPulse>

					stick_fence = 1;
 800ef3e:	4b59      	ldr	r3, [pc, #356]	; (800f0a4 <LidarSetPos+0x1544>)
 800ef40:	2201      	movs	r2, #1
 800ef42:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 800ef44:	463b      	mov	r3, r7
 800ef46:	6818      	ldr	r0, [r3, #0]
 800ef48:	f000 fd4e 	bl	800f9e8 <LidarAdjust>
					break;
 800ef4c:	e100      	b.n	800f150 <LidarSetPos+0x15f0>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 800ef4e:	463b      	mov	r3, r7
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2207      	movs	r2, #7
 800ef54:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800ef58:	e0fa      	b.n	800f150 <LidarSetPos+0x15f0>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 800ef5a:	463b      	mov	r3, r7
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2207      	movs	r2, #7
 800ef60:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800ef64:	2000      	movs	r0, #0
 800ef66:	f7f5 fe9f 	bl	8004ca8 <setOrientationMODN>
					vesc_duty = type1Duty;
 800ef6a:	4b4f      	ldr	r3, [pc, #316]	; (800f0a8 <LidarSetPos+0x1548>)
 800ef6c:	4a4f      	ldr	r2, [pc, #316]	; (800f0ac <LidarSetPos+0x154c>)
 800ef6e:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800ef70:	4b4f      	ldr	r3, [pc, #316]	; (800f0b0 <LidarSetPos+0x1550>)
 800ef72:	4a50      	ldr	r2, [pc, #320]	; (800f0b4 <LidarSetPos+0x1554>)
 800ef74:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800ef76:	f7fd faa7 	bl	800c4c8 <ResetCoordinate>
					PP_start(upper_right_to_center_4, 1, &pp);
 800ef7a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800ef7e:	4a47      	ldr	r2, [pc, #284]	; (800f09c <LidarSetPos+0x153c>)
 800ef80:	2101      	movs	r1, #1
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7f6 fd6b 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800ef88:	e020      	b.n	800efcc <LidarSetPos+0x146c>
					{
						if(ps4.button == SQUARE)
 800ef8a:	4b45      	ldr	r3, [pc, #276]	; (800f0a0 <LidarSetPos+0x1540>)
 800ef8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef92:	d108      	bne.n	800efa6 <LidarSetPos+0x1446>
						{
							while(ps4.button == SQUARE);
 800ef94:	bf00      	nop
 800ef96:	4b42      	ldr	r3, [pc, #264]	; (800f0a0 <LidarSetPos+0x1540>)
 800ef98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef9e:	d0fa      	beq.n	800ef96 <LidarSetPos+0x1436>
							PP_stop(&pp);
 800efa0:	483e      	ldr	r0, [pc, #248]	; (800f09c <LidarSetPos+0x153c>)
 800efa2:	f7f6 ff96 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_y <= -3.1)
 800efa6:	4b3d      	ldr	r3, [pc, #244]	; (800f09c <LidarSetPos+0x153c>)
 800efa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f1 facc 	bl	8000548 <__aeabi_f2d>
 800efb0:	a337      	add	r3, pc, #220	; (adr r3, 800f090 <LidarSetPos+0x1530>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f7f1 fd9b 	bl	8000af0 <__aeabi_dcmple>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d100      	bne.n	800efc2 <LidarSetPos+0x1462>
 800efc0:	e004      	b.n	800efcc <LidarSetPos+0x146c>
						{
							pp.target_vel[0] = 2.0;
 800efc2:	4b36      	ldr	r3, [pc, #216]	; (800f09c <LidarSetPos+0x153c>)
 800efc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800efc8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800efcc:	4b33      	ldr	r3, [pc, #204]	; (800f09c <LidarSetPos+0x153c>)
 800efce:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1d6      	bne.n	800ef8a <LidarSetPos+0x142a>
						}
					}

					PP_start(upper_right_to_center_4_2, 1, &pp);
 800efdc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800efe0:	4a2e      	ldr	r2, [pc, #184]	; (800f09c <LidarSetPos+0x153c>)
 800efe2:	2101      	movs	r1, #1
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f6 fd3a 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800efea:	e020      	b.n	800f02e <LidarSetPos+0x14ce>
					{
						if(ps4.button == SQUARE)
 800efec:	4b2c      	ldr	r3, [pc, #176]	; (800f0a0 <LidarSetPos+0x1540>)
 800efee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eff4:	d108      	bne.n	800f008 <LidarSetPos+0x14a8>
						{
							while(ps4.button == SQUARE);
 800eff6:	bf00      	nop
 800eff8:	4b29      	ldr	r3, [pc, #164]	; (800f0a0 <LidarSetPos+0x1540>)
 800effa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800effc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f000:	d0fa      	beq.n	800eff8 <LidarSetPos+0x1498>
							PP_stop(&pp);
 800f002:	4826      	ldr	r0, [pc, #152]	; (800f09c <LidarSetPos+0x153c>)
 800f004:	f7f6 ff65 	bl	8005ed2 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f008:	2108      	movs	r1, #8
 800f00a:	4823      	ldr	r0, [pc, #140]	; (800f098 <LidarSetPos+0x1538>)
 800f00c:	f003 f8ca 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d006      	beq.n	800f024 <LidarSetPos+0x14c4>
 800f016:	2110      	movs	r1, #16
 800f018:	481f      	ldr	r0, [pc, #124]	; (800f098 <LidarSetPos+0x1538>)
 800f01a:	f003 f8c3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d104      	bne.n	800f02e <LidarSetPos+0x14ce>
							pp.error_y = 0;
 800f024:	4b1d      	ldr	r3, [pc, #116]	; (800f09c <LidarSetPos+0x153c>)
 800f026:	f04f 0200 	mov.w	r2, #0
 800f02a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f02e:	4b1b      	ldr	r3, [pc, #108]	; (800f09c <LidarSetPos+0x153c>)
 800f030:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f034:	f003 0301 	and.w	r3, r3, #1
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1d6      	bne.n	800efec <LidarSetPos+0x148c>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					LidarAdjust(lidar);
 800f03e:	463b      	mov	r3, r7
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	f000 fcd1 	bl	800f9e8 <LidarAdjust>

					AdjustRings();
 800f046:	f7fd fa2d 	bl	800c4a4 <AdjustRings>
					adjust_servo;
 800f04a:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f04e:	481b      	ldr	r0, [pc, #108]	; (800f0bc <LidarSetPos+0x155c>)
 800f050:	f7fa ff32 	bl	8009eb8 <ServoSetPulse>

					break;
 800f054:	e07c      	b.n	800f150 <LidarSetPos+0x15f0>

				case CENTER_3:
					stick_fence = 0;
 800f056:	4b13      	ldr	r3, [pc, #76]	; (800f0a4 <LidarSetPos+0x1544>)
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 800f05c:	463b      	mov	r3, r7
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2200      	movs	r2, #0
 800f062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 800f066:	4b10      	ldr	r3, [pc, #64]	; (800f0a8 <LidarSetPos+0x1548>)
 800f068:	4a10      	ldr	r2, [pc, #64]	; (800f0ac <LidarSetPos+0x154c>)
 800f06a:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800f06c:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <LidarSetPos+0x1550>)
 800f06e:	4a11      	ldr	r2, [pc, #68]	; (800f0b4 <LidarSetPos+0x1554>)
 800f070:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800f072:	f7fd fa29 	bl	800c4c8 <ResetCoordinate>
					lidar->pos = CENTER_4;
 800f076:	463b      	mov	r3, r7
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2207      	movs	r2, #7
 800f07c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					PP_start(center_3_to_center_4, 1, &pp);
 800f080:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f084:	4a05      	ldr	r2, [pc, #20]	; (800f09c <LidarSetPos+0x153c>)
 800f086:	2101      	movs	r1, #1
 800f088:	4618      	mov	r0, r3
 800f08a:	f7f6 fce8 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f08e:	e042      	b.n	800f116 <LidarSetPos+0x15b6>
 800f090:	cccccccd 	.word	0xcccccccd
 800f094:	c008cccc 	.word	0xc008cccc
 800f098:	40020c00 	.word	0x40020c00
 800f09c:	20006ccc 	.word	0x20006ccc
 800f0a0:	2000a028 	.word	0x2000a028
 800f0a4:	200072c4 	.word	0x200072c4
 800f0a8:	20007388 	.word	0x20007388
 800f0ac:	3e2b851f 	.word	0x3e2b851f
 800f0b0:	200065a0 	.word	0x200065a0
 800f0b4:	40966666 	.word	0x40966666
 800f0b8:	2000944c 	.word	0x2000944c
 800f0bc:	20007874 	.word	0x20007874
					{
						if(ps4.button == SQUARE)
 800f0c0:	4bac      	ldr	r3, [pc, #688]	; (800f374 <LidarSetPos+0x1814>)
 800f0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0c8:	d10d      	bne.n	800f0e6 <LidarSetPos+0x1586>
						{
							while(ps4.button == SQUARE);
 800f0ca:	bf00      	nop
 800f0cc:	4ba9      	ldr	r3, [pc, #676]	; (800f374 <LidarSetPos+0x1814>)
 800f0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0d4:	d0fa      	beq.n	800f0cc <LidarSetPos+0x156c>
							PP_stop(&pp);
 800f0d6:	48a8      	ldr	r0, [pc, #672]	; (800f378 <LidarSetPos+0x1818>)
 800f0d8:	f7f6 fefb 	bl	8005ed2 <PP_stop>
							lidar->fail = 1;
 800f0dc:	463b      	mov	r3, r7
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
//							lidar->pos = CENTER_3;
//							lidar->pos_counter = CENTER_3;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 800f0e6:	2108      	movs	r1, #8
 800f0e8:	48a4      	ldr	r0, [pc, #656]	; (800f37c <LidarSetPos+0x181c>)
 800f0ea:	f003 f85b 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d006      	beq.n	800f102 <LidarSetPos+0x15a2>
 800f0f4:	2110      	movs	r1, #16
 800f0f6:	48a1      	ldr	r0, [pc, #644]	; (800f37c <LidarSetPos+0x181c>)
 800f0f8:	f003 f854 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d109      	bne.n	800f116 <LidarSetPos+0x15b6>
						{
							pp.target_y[0] = pp.real_y;
 800f102:	4b9d      	ldr	r3, [pc, #628]	; (800f378 <LidarSetPos+0x1818>)
 800f104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f106:	4a9c      	ldr	r2, [pc, #624]	; (800f378 <LidarSetPos+0x1818>)
 800f108:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
							pp.error_y = 0;
 800f10c:	4b9a      	ldr	r3, [pc, #616]	; (800f378 <LidarSetPos+0x1818>)
 800f10e:	f04f 0200 	mov.w	r2, #0
 800f112:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
					while(pp.pp_start)
 800f116:	4b98      	ldr	r3, [pc, #608]	; (800f378 <LidarSetPos+0x1818>)
 800f118:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f11c:	f003 0301 	and.w	r3, r3, #1
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1cc      	bne.n	800f0c0 <LidarSetPos+0x1560>
//						}
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}
					stick_fence = 1;
 800f126:	4b96      	ldr	r3, [pc, #600]	; (800f380 <LidarSetPos+0x1820>)
 800f128:	2201      	movs	r2, #1
 800f12a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800f12c:	463b      	mov	r3, r7
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10a      	bne.n	800f14e <LidarSetPos+0x15ee>
						LidarAdjust(lidar);
 800f138:	463b      	mov	r3, r7
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	f000 fc54 	bl	800f9e8 <LidarAdjust>
					break;
 800f140:	e005      	b.n	800f14e <LidarSetPos+0x15ee>

				default:
					break;
 800f142:	bf00      	nop
 800f144:	f000 bc44 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800f148:	bf00      	nop
 800f14a:	f000 bc41 	b.w	800f9d0 <LidarSetPos+0x1e70>
					break;
 800f14e:	bf00      	nop
			}
			break;
 800f150:	f000 bc3e 	b.w	800f9d0 <LidarSetPos+0x1e70>


		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
 800f154:	463b      	mov	r3, r7
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f15c:	3b01      	subs	r3, #1
 800f15e:	2b08      	cmp	r3, #8
 800f160:	f200 81e5 	bhi.w	800f52e <LidarSetPos+0x19ce>
 800f164:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <LidarSetPos+0x160c>)
 800f166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16a:	bf00      	nop
 800f16c:	0800f191 	.word	0x0800f191
 800f170:	0800f2d9 	.word	0x0800f2d9
 800f174:	0800f52f 	.word	0x0800f52f
 800f178:	0800f52f 	.word	0x0800f52f
 800f17c:	0800f2e5 	.word	0x0800f2e5
 800f180:	0800f2f1 	.word	0x0800f2f1
 800f184:	0800f42d 	.word	0x0800f42d
 800f188:	0800f52f 	.word	0x0800f52f
 800f18c:	0800f19d 	.word	0x0800f19d
			{
				case PICK_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f190:	463b      	mov	r3, r7
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2208      	movs	r2, #8
 800f196:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f19a:	e1c9      	b.n	800f530 <LidarSetPos+0x19d0>

				case PICK_RIGHT:
					lidar->pos = UPPER_RIGHT;
 800f19c:	463b      	mov	r3, r7
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2208      	movs	r2, #8
 800f1a2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f1a6:	4b77      	ldr	r3, [pc, #476]	; (800f384 <LidarSetPos+0x1824>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d006      	beq.n	800f1bc <LidarSetPos+0x165c>
					{
						vesc_speed = BlueType3;
 800f1ae:	4b76      	ldr	r3, [pc, #472]	; (800f388 <LidarSetPos+0x1828>)
 800f1b0:	4a76      	ldr	r2, [pc, #472]	; (800f38c <LidarSetPos+0x182c>)
 800f1b2:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f1b4:	4b76      	ldr	r3, [pc, #472]	; (800f390 <LidarSetPos+0x1830>)
 800f1b6:	4a77      	ldr	r2, [pc, #476]	; (800f394 <LidarSetPos+0x1834>)
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	e005      	b.n	800f1c8 <LidarSetPos+0x1668>
					}
					else
					{
						vesc_speed = RedType3;
 800f1bc:	4b72      	ldr	r3, [pc, #456]	; (800f388 <LidarSetPos+0x1828>)
 800f1be:	4a76      	ldr	r2, [pc, #472]	; (800f398 <LidarSetPos+0x1838>)
 800f1c0:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f1c2:	4b73      	ldr	r3, [pc, #460]	; (800f390 <LidarSetPos+0x1830>)
 800f1c4:	4a75      	ldr	r2, [pc, #468]	; (800f39c <LidarSetPos+0x183c>)
 800f1c6:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f1c8:	2003      	movs	r0, #3
 800f1ca:	f7f5 fd6d 	bl	8004ca8 <setOrientationMODN>
					ResetCoordinate();
 800f1ce:	f7fd f97b 	bl	800c4c8 <ResetCoordinate>
					PP_start(pick_right_to_upper_right, 1, &pp);
 800f1d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800f1d6:	4a68      	ldr	r2, [pc, #416]	; (800f378 <LidarSetPos+0x1818>)
 800f1d8:	2101      	movs	r1, #1
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7f6 fc3f 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f1e0:	e00d      	b.n	800f1fe <LidarSetPos+0x169e>
					{
						if(ps4.button == SQUARE)
 800f1e2:	4b64      	ldr	r3, [pc, #400]	; (800f374 <LidarSetPos+0x1814>)
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1ea:	d108      	bne.n	800f1fe <LidarSetPos+0x169e>
						{
							while(ps4.button == SQUARE);
 800f1ec:	bf00      	nop
 800f1ee:	4b61      	ldr	r3, [pc, #388]	; (800f374 <LidarSetPos+0x1814>)
 800f1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1f6:	d0fa      	beq.n	800f1ee <LidarSetPos+0x168e>
							PP_stop(&pp);
 800f1f8:	485f      	ldr	r0, [pc, #380]	; (800f378 <LidarSetPos+0x1818>)
 800f1fa:	f7f6 fe6a 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f1fe:	4b5e      	ldr	r3, [pc, #376]	; (800f378 <LidarSetPos+0x1818>)
 800f200:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1e9      	bne.n	800f1e2 <LidarSetPos+0x1682>
						}
					}
					LoadRing();
 800f20e:	f7fd f903 	bl	800c418 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_upper_right_2, 1, &pp);
 800f212:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800f216:	4a58      	ldr	r2, [pc, #352]	; (800f378 <LidarSetPos+0x1818>)
 800f218:	2101      	movs	r1, #1
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f6 fc1f 	bl	8005a5e <PP_start>
					load_adjust = 1;
 800f220:	4b5f      	ldr	r3, [pc, #380]	; (800f3a0 <LidarSetPos+0x1840>)
 800f222:	2201      	movs	r2, #1
 800f224:	601a      	str	r2, [r3, #0]
					AdjustRings();
 800f226:	f7fd f93d 	bl	800c4a4 <AdjustRings>
					while(pp.pp_start)
 800f22a:	e045      	b.n	800f2b8 <LidarSetPos+0x1758>
					{
						if(ps4.button == SQUARE)
 800f22c:	4b51      	ldr	r3, [pc, #324]	; (800f374 <LidarSetPos+0x1814>)
 800f22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f234:	d108      	bne.n	800f248 <LidarSetPos+0x16e8>
						{
							while(ps4.button == SQUARE);
 800f236:	bf00      	nop
 800f238:	4b4e      	ldr	r3, [pc, #312]	; (800f374 <LidarSetPos+0x1814>)
 800f23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f240:	d0fa      	beq.n	800f238 <LidarSetPos+0x16d8>
							PP_stop(&pp);
 800f242:	484d      	ldr	r0, [pc, #308]	; (800f378 <LidarSetPos+0x1818>)
 800f244:	f7f6 fe45 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_y >= 3.0)
 800f248:	4b4b      	ldr	r3, [pc, #300]	; (800f378 <LidarSetPos+0x1818>)
 800f24a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f24e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f252:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f25a:	db04      	blt.n	800f266 <LidarSetPos+0x1706>
							pp.target_vel[0] = 1.0;
 800f25c:	4b46      	ldr	r3, [pc, #280]	; (800f378 <LidarSetPos+0x1818>)
 800f25e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f262:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2 && pp.real_z < -150 && pp.real_y > 3)
 800f266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f26a:	4844      	ldr	r0, [pc, #272]	; (800f37c <LidarSetPos+0x181c>)
 800f26c:	f002 ff9a 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d120      	bne.n	800f2b8 <LidarSetPos+0x1758>
 800f276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f27a:	4840      	ldr	r0, [pc, #256]	; (800f37c <LidarSetPos+0x181c>)
 800f27c:	f002 ff92 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d118      	bne.n	800f2b8 <LidarSetPos+0x1758>
 800f286:	4b3c      	ldr	r3, [pc, #240]	; (800f378 <LidarSetPos+0x1818>)
 800f288:	edd3 7a04 	vldr	s15, [r3, #16]
 800f28c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800f3a4 <LidarSetPos+0x1844>
 800f290:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f298:	d400      	bmi.n	800f29c <LidarSetPos+0x173c>
 800f29a:	e00d      	b.n	800f2b8 <LidarSetPos+0x1758>
 800f29c:	4b36      	ldr	r3, [pc, #216]	; (800f378 <LidarSetPos+0x1818>)
 800f29e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f2a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f2a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ae:	dc00      	bgt.n	800f2b2 <LidarSetPos+0x1752>
 800f2b0:	e002      	b.n	800f2b8 <LidarSetPos+0x1758>
							PP_stop(&pp);
 800f2b2:	4831      	ldr	r0, [pc, #196]	; (800f378 <LidarSetPos+0x1818>)
 800f2b4:	f7f6 fe0d 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f2b8:	4b2f      	ldr	r3, [pc, #188]	; (800f378 <LidarSetPos+0x1818>)
 800f2ba:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f2be:	f003 0301 	and.w	r3, r3, #1
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1b1      	bne.n	800f22c <LidarSetPos+0x16cc>
					}

					AdjustRings();
 800f2c8:	f7fd f8ec 	bl	800c4a4 <AdjustRings>
					adjust_servo;
 800f2cc:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f2d0:	4835      	ldr	r0, [pc, #212]	; (800f3a8 <LidarSetPos+0x1848>)
 800f2d2:	f7fa fdf1 	bl	8009eb8 <ServoSetPulse>
					break;
 800f2d6:	e12b      	b.n	800f530 <LidarSetPos+0x19d0>

				case UPPER_LEFT:
					lidar->pos = UPPER_RIGHT;
 800f2d8:	463b      	mov	r3, r7
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2208      	movs	r2, #8
 800f2de:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f2e2:	e125      	b.n	800f530 <LidarSetPos+0x19d0>

				case CENTER:
					lidar->pos = UPPER_RIGHT;
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2208      	movs	r2, #8
 800f2ea:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800f2ee:	e11f      	b.n	800f530 <LidarSetPos+0x19d0>

				case CENTER_3:
					lidar->pos = UPPER_RIGHT;
 800f2f0:	463b      	mov	r3, r7
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2208      	movs	r2, #8
 800f2f6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f2fa:	4b22      	ldr	r3, [pc, #136]	; (800f384 <LidarSetPos+0x1824>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d006      	beq.n	800f310 <LidarSetPos+0x17b0>
					{
						vesc_speed = BlueType3;
 800f302:	4b21      	ldr	r3, [pc, #132]	; (800f388 <LidarSetPos+0x1828>)
 800f304:	4a21      	ldr	r2, [pc, #132]	; (800f38c <LidarSetPos+0x182c>)
 800f306:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f308:	4b21      	ldr	r3, [pc, #132]	; (800f390 <LidarSetPos+0x1830>)
 800f30a:	4a22      	ldr	r2, [pc, #136]	; (800f394 <LidarSetPos+0x1834>)
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	e005      	b.n	800f31c <LidarSetPos+0x17bc>
					}
					else
					{
						vesc_speed = RedType3;
 800f310:	4b1d      	ldr	r3, [pc, #116]	; (800f388 <LidarSetPos+0x1828>)
 800f312:	4a21      	ldr	r2, [pc, #132]	; (800f398 <LidarSetPos+0x1838>)
 800f314:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f316:	4b1e      	ldr	r3, [pc, #120]	; (800f390 <LidarSetPos+0x1830>)
 800f318:	4a20      	ldr	r2, [pc, #128]	; (800f39c <LidarSetPos+0x183c>)
 800f31a:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f31c:	2003      	movs	r0, #3
 800f31e:	f7f5 fcc3 	bl	8004ca8 <setOrientationMODN>
					ResetCoordinate();
 800f322:	f7fd f8d1 	bl	800c4c8 <ResetCoordinate>
					PP_start(center_3_to_upper_right, 1, &pp);
 800f326:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800f32a:	4a13      	ldr	r2, [pc, #76]	; (800f378 <LidarSetPos+0x1818>)
 800f32c:	2101      	movs	r1, #1
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f6 fb95 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f334:	e00d      	b.n	800f352 <LidarSetPos+0x17f2>
					{
						if(ps4.button == SQUARE)
 800f336:	4b0f      	ldr	r3, [pc, #60]	; (800f374 <LidarSetPos+0x1814>)
 800f338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f33e:	d108      	bne.n	800f352 <LidarSetPos+0x17f2>
						{
							while(ps4.button == SQUARE);
 800f340:	bf00      	nop
 800f342:	4b0c      	ldr	r3, [pc, #48]	; (800f374 <LidarSetPos+0x1814>)
 800f344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f34a:	d0fa      	beq.n	800f342 <LidarSetPos+0x17e2>
							PP_stop(&pp);
 800f34c:	480a      	ldr	r0, [pc, #40]	; (800f378 <LidarSetPos+0x1818>)
 800f34e:	f7f6 fdc0 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f352:	4b09      	ldr	r3, [pc, #36]	; (800f378 <LidarSetPos+0x1818>)
 800f354:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f358:	f003 0301 	and.w	r3, r3, #1
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1e9      	bne.n	800f336 <LidarSetPos+0x17d6>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_3_to_upper_right_2, 1, &pp);
 800f362:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800f366:	4a04      	ldr	r2, [pc, #16]	; (800f378 <LidarSetPos+0x1818>)
 800f368:	2101      	movs	r1, #1
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7f6 fb77 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f370:	e04c      	b.n	800f40c <LidarSetPos+0x18ac>
 800f372:	bf00      	nop
 800f374:	2000a028 	.word	0x2000a028
 800f378:	20006ccc 	.word	0x20006ccc
 800f37c:	40020c00 	.word	0x40020c00
 800f380:	200072c4 	.word	0x200072c4
 800f384:	20006a24 	.word	0x20006a24
 800f388:	200065a0 	.word	0x200065a0
 800f38c:	413c0000 	.word	0x413c0000
 800f390:	20007388 	.word	0x20007388
 800f394:	3ebeb852 	.word	0x3ebeb852
 800f398:	413b3333 	.word	0x413b3333
 800f39c:	3ebd70a4 	.word	0x3ebd70a4
 800f3a0:	2000944c 	.word	0x2000944c
 800f3a4:	c3160000 	.word	0xc3160000
 800f3a8:	20007874 	.word	0x20007874
					{
						if(ps4.button == SQUARE)
 800f3ac:	4bae      	ldr	r3, [pc, #696]	; (800f668 <LidarSetPos+0x1b08>)
 800f3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3b4:	d108      	bne.n	800f3c8 <LidarSetPos+0x1868>
						{
							while(ps4.button == SQUARE);
 800f3b6:	bf00      	nop
 800f3b8:	4bab      	ldr	r3, [pc, #684]	; (800f668 <LidarSetPos+0x1b08>)
 800f3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3c0:	d0fa      	beq.n	800f3b8 <LidarSetPos+0x1858>
							PP_stop(&pp);
 800f3c2:	48aa      	ldr	r0, [pc, #680]	; (800f66c <LidarSetPos+0x1b0c>)
 800f3c4:	f7f6 fd85 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_y >= 2.0)
 800f3c8:	4ba8      	ldr	r3, [pc, #672]	; (800f66c <LidarSetPos+0x1b0c>)
 800f3ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f3ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f3d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3da:	db04      	blt.n	800f3e6 <LidarSetPos+0x1886>
							pp.target_vel[0] = 1.0;
 800f3dc:	4ba3      	ldr	r3, [pc, #652]	; (800f66c <LidarSetPos+0x1b0c>)
 800f3de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f3e2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f3e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f3ea:	48a1      	ldr	r0, [pc, #644]	; (800f670 <LidarSetPos+0x1b10>)
 800f3ec:	f002 feda 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10a      	bne.n	800f40c <LidarSetPos+0x18ac>
 800f3f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f3fa:	489d      	ldr	r0, [pc, #628]	; (800f670 <LidarSetPos+0x1b10>)
 800f3fc:	f002 fed2 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d102      	bne.n	800f40c <LidarSetPos+0x18ac>
							PP_stop(&pp);
 800f406:	4899      	ldr	r0, [pc, #612]	; (800f66c <LidarSetPos+0x1b0c>)
 800f408:	f7f6 fd63 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f40c:	4b97      	ldr	r3, [pc, #604]	; (800f66c <LidarSetPos+0x1b0c>)
 800f40e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f412:	f003 0301 	and.w	r3, r3, #1
 800f416:	b2db      	uxtb	r3, r3
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1c7      	bne.n	800f3ac <LidarSetPos+0x184c>
					}

					AdjustRings();
 800f41c:	f7fd f842 	bl	800c4a4 <AdjustRings>
					adjust_servo;
 800f420:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f424:	4893      	ldr	r0, [pc, #588]	; (800f674 <LidarSetPos+0x1b14>)
 800f426:	f7fa fd47 	bl	8009eb8 <ServoSetPulse>


					break;
 800f42a:	e081      	b.n	800f530 <LidarSetPos+0x19d0>

				case CENTER_4:
					lidar->pos = UPPER_RIGHT;
 800f42c:	463b      	mov	r3, r7
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2208      	movs	r2, #8
 800f432:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					if(blue)
 800f436:	4b90      	ldr	r3, [pc, #576]	; (800f678 <LidarSetPos+0x1b18>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <LidarSetPos+0x18ec>
					{
						vesc_speed = BlueType3;
 800f43e:	4b8f      	ldr	r3, [pc, #572]	; (800f67c <LidarSetPos+0x1b1c>)
 800f440:	4a8f      	ldr	r2, [pc, #572]	; (800f680 <LidarSetPos+0x1b20>)
 800f442:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 800f444:	4b8f      	ldr	r3, [pc, #572]	; (800f684 <LidarSetPos+0x1b24>)
 800f446:	4a90      	ldr	r2, [pc, #576]	; (800f688 <LidarSetPos+0x1b28>)
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	e005      	b.n	800f458 <LidarSetPos+0x18f8>
					}
					else
					{
						vesc_speed = RedType3;
 800f44c:	4b8b      	ldr	r3, [pc, #556]	; (800f67c <LidarSetPos+0x1b1c>)
 800f44e:	4a8f      	ldr	r2, [pc, #572]	; (800f68c <LidarSetPos+0x1b2c>)
 800f450:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 800f452:	4b8c      	ldr	r3, [pc, #560]	; (800f684 <LidarSetPos+0x1b24>)
 800f454:	4a8e      	ldr	r2, [pc, #568]	; (800f690 <LidarSetPos+0x1b30>)
 800f456:	601a      	str	r2, [r3, #0]
					}
					setOrientationMODN(OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE);
 800f458:	2003      	movs	r0, #3
 800f45a:	f7f5 fc25 	bl	8004ca8 <setOrientationMODN>
					ResetCoordinate();
 800f45e:	f7fd f833 	bl	800c4c8 <ResetCoordinate>
					PP_start(center_4_to_upper_right, 1, &pp);
 800f462:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800f466:	4a81      	ldr	r2, [pc, #516]	; (800f66c <LidarSetPos+0x1b0c>)
 800f468:	2101      	movs	r1, #1
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f6 faf7 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f470:	e00d      	b.n	800f48e <LidarSetPos+0x192e>
					{
						if(ps4.button == SQUARE)
 800f472:	4b7d      	ldr	r3, [pc, #500]	; (800f668 <LidarSetPos+0x1b08>)
 800f474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f47a:	d108      	bne.n	800f48e <LidarSetPos+0x192e>
						{
							while(ps4.button == SQUARE);
 800f47c:	bf00      	nop
 800f47e:	4b7a      	ldr	r3, [pc, #488]	; (800f668 <LidarSetPos+0x1b08>)
 800f480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f486:	d0fa      	beq.n	800f47e <LidarSetPos+0x191e>
							PP_stop(&pp);
 800f488:	4878      	ldr	r0, [pc, #480]	; (800f66c <LidarSetPos+0x1b0c>)
 800f48a:	f7f6 fd22 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f48e:	4b77      	ldr	r3, [pc, #476]	; (800f66c <LidarSetPos+0x1b0c>)
 800f490:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f494:	f003 0301 	and.w	r3, r3, #1
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1e9      	bne.n	800f472 <LidarSetPos+0x1912>
//							lidar->pos = CENTER_4;
//							lidar->pos_counter = CENTER_4;
						}
					}

					PP_start(center_4_to_upper_right_2, 1, &pp);
 800f49e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800f4a2:	4a72      	ldr	r2, [pc, #456]	; (800f66c <LidarSetPos+0x1b0c>)
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7f6 fad9 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f4ac:	e02f      	b.n	800f50e <LidarSetPos+0x19ae>
					{
						if(ps4.button == SQUARE)
 800f4ae:	4b6e      	ldr	r3, [pc, #440]	; (800f668 <LidarSetPos+0x1b08>)
 800f4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4b6:	d108      	bne.n	800f4ca <LidarSetPos+0x196a>
						{
							while(ps4.button == SQUARE)
 800f4b8:	e002      	b.n	800f4c0 <LidarSetPos+0x1960>
							PP_stop(&pp);
 800f4ba:	486c      	ldr	r0, [pc, #432]	; (800f66c <LidarSetPos+0x1b0c>)
 800f4bc:	f7f6 fd09 	bl	8005ed2 <PP_stop>
							while(ps4.button == SQUARE)
 800f4c0:	4b69      	ldr	r3, [pc, #420]	; (800f668 <LidarSetPos+0x1b08>)
 800f4c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4c8:	d0f7      	beq.n	800f4ba <LidarSetPos+0x195a>
						}

						if(pp.real_y >= 2.0)
 800f4ca:	4b68      	ldr	r3, [pc, #416]	; (800f66c <LidarSetPos+0x1b0c>)
 800f4cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800f4d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f4d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4dc:	db04      	blt.n	800f4e8 <LidarSetPos+0x1988>
							pp.target_vel[0] = 1.0;
 800f4de:	4b63      	ldr	r3, [pc, #396]	; (800f66c <LidarSetPos+0x1b0c>)
 800f4e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f4e4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

						if(In_LS_Left_1 && In_LS_Left_2)
 800f4e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f4ec:	4860      	ldr	r0, [pc, #384]	; (800f670 <LidarSetPos+0x1b10>)
 800f4ee:	f002 fe59 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10a      	bne.n	800f50e <LidarSetPos+0x19ae>
 800f4f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f4fc:	485c      	ldr	r0, [pc, #368]	; (800f670 <LidarSetPos+0x1b10>)
 800f4fe:	f002 fe51 	bl	80121a4 <HAL_GPIO_ReadPin>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d102      	bne.n	800f50e <LidarSetPos+0x19ae>
							PP_stop(&pp);
 800f508:	4858      	ldr	r0, [pc, #352]	; (800f66c <LidarSetPos+0x1b0c>)
 800f50a:	f7f6 fce2 	bl	8005ed2 <PP_stop>
					while(pp.pp_start)
 800f50e:	4b57      	ldr	r3, [pc, #348]	; (800f66c <LidarSetPos+0x1b0c>)
 800f510:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f514:	f003 0301 	and.w	r3, r3, #1
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1c7      	bne.n	800f4ae <LidarSetPos+0x194e>
					}

					AdjustRings();
 800f51e:	f7fc ffc1 	bl	800c4a4 <AdjustRings>
					adjust_servo;
 800f522:	f240 31b6 	movw	r1, #950	; 0x3b6
 800f526:	4853      	ldr	r0, [pc, #332]	; (800f674 <LidarSetPos+0x1b14>)
 800f528:	f7fa fcc6 	bl	8009eb8 <ServoSetPulse>

					break;
 800f52c:	e000      	b.n	800f530 <LidarSetPos+0x19d0>

				default:
					break;
 800f52e:	bf00      	nop
			}
			break;
 800f530:	e24e      	b.n	800f9d0 <LidarSetPos+0x1e70>

		case PICK_RIGHT:
			switch(lidar->pos)
 800f532:	463b      	mov	r3, r7
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f53a:	3b03      	subs	r3, #3
 800f53c:	2b05      	cmp	r3, #5
 800f53e:	f200 8245 	bhi.w	800f9cc <LidarSetPos+0x1e6c>
 800f542:	a201      	add	r2, pc, #4	; (adr r2, 800f548 <LidarSetPos+0x19e8>)
 800f544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f548:	0800f611 	.word	0x0800f611
 800f54c:	0800f6f9 	.word	0x0800f6f9
 800f550:	0800f79b 	.word	0x0800f79b
 800f554:	0800f843 	.word	0x0800f843
 800f558:	0800f8eb 	.word	0x0800f8eb
 800f55c:	0800f561 	.word	0x0800f561
			{
				case UPPER_RIGHT:
					lidar->pos = PICK_RIGHT;
 800f560:	463b      	mov	r3, r7
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2209      	movs	r2, #9
 800f566:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f56a:	f7fc ffad 	bl	800c4c8 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 800f56e:	2000      	movs	r0, #0
 800f570:	f7f5 fb9a 	bl	8004ca8 <setOrientationMODN>
					loaded = 0;
 800f574:	4b47      	ldr	r3, [pc, #284]	; (800f694 <LidarSetPos+0x1b34>)
 800f576:	2200      	movs	r2, #0
 800f578:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f57a:	4b42      	ldr	r3, [pc, #264]	; (800f684 <LidarSetPos+0x1b24>)
 800f57c:	f04f 0200 	mov.w	r2, #0
 800f580:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f582:	4b3e      	ldr	r3, [pc, #248]	; (800f67c <LidarSetPos+0x1b1c>)
 800f584:	f04f 0200 	mov.w	r2, #0
 800f588:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f58a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f58e:	f7fc faeb 	bl	800bb68 <setPick>
					open_servo;
 800f592:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f596:	4837      	ldr	r0, [pc, #220]	; (800f674 <LidarSetPos+0x1b14>)
 800f598:	f7fa fc8e 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f59c:	4a3e      	ldr	r2, [pc, #248]	; (800f698 <LidarSetPos+0x1b38>)
 800f59e:	7f13      	ldrb	r3, [r2, #28]
 800f5a0:	f36f 1386 	bfc	r3, #6, #1
 800f5a4:	7713      	strb	r3, [r2, #28]
					PP_start(upper_right_to_pick_right, 1, &pp);
 800f5a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800f5aa:	4a30      	ldr	r2, [pc, #192]	; (800f66c <LidarSetPos+0x1b0c>)
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f6 fa55 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f5b4:	e020      	b.n	800f5f8 <LidarSetPos+0x1a98>
					{
						if(ps4.button == SQUARE)
 800f5b6:	4b2c      	ldr	r3, [pc, #176]	; (800f668 <LidarSetPos+0x1b08>)
 800f5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5be:	d108      	bne.n	800f5d2 <LidarSetPos+0x1a72>
						{
							while(ps4.button == SQUARE);
 800f5c0:	bf00      	nop
 800f5c2:	4b29      	ldr	r3, [pc, #164]	; (800f668 <LidarSetPos+0x1b08>)
 800f5c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ca:	d0fa      	beq.n	800f5c2 <LidarSetPos+0x1a62>
							PP_stop(&pp);
 800f5cc:	4827      	ldr	r0, [pc, #156]	; (800f66c <LidarSetPos+0x1b0c>)
 800f5ce:	f7f6 fc80 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_y <= -2.7)
 800f5d2:	4b26      	ldr	r3, [pc, #152]	; (800f66c <LidarSetPos+0x1b0c>)
 800f5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7f0 ffb6 	bl	8000548 <__aeabi_f2d>
 800f5dc:	a320      	add	r3, pc, #128	; (adr r3, 800f660 <LidarSetPos+0x1b00>)
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	f7f1 fa85 	bl	8000af0 <__aeabi_dcmple>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d100      	bne.n	800f5ee <LidarSetPos+0x1a8e>
 800f5ec:	e004      	b.n	800f5f8 <LidarSetPos+0x1a98>
							pp.target_vel[0] = 1.5;
 800f5ee:	4b1f      	ldr	r3, [pc, #124]	; (800f66c <LidarSetPos+0x1b0c>)
 800f5f0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800f5f4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f5f8:	4b1c      	ldr	r3, [pc, #112]	; (800f66c <LidarSetPos+0x1b0c>)
 800f5fa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1d6      	bne.n	800f5b6 <LidarSetPos+0x1a56>
					}
					pick_right = 1;
 800f608:	4b24      	ldr	r3, [pc, #144]	; (800f69c <LidarSetPos+0x1b3c>)
 800f60a:	2201      	movs	r2, #1
 800f60c:	601a      	str	r2, [r3, #0]
					break;
 800f60e:	e1de      	b.n	800f9ce <LidarSetPos+0x1e6e>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 800f610:	463b      	mov	r3, r7
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2209      	movs	r2, #9
 800f616:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f61a:	f7fc ff55 	bl	800c4c8 <ResetCoordinate>
					loaded = 0;
 800f61e:	4b1d      	ldr	r3, [pc, #116]	; (800f694 <LidarSetPos+0x1b34>)
 800f620:	2200      	movs	r2, #0
 800f622:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f624:	4b17      	ldr	r3, [pc, #92]	; (800f684 <LidarSetPos+0x1b24>)
 800f626:	f04f 0200 	mov.w	r2, #0
 800f62a:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f62c:	4b13      	ldr	r3, [pc, #76]	; (800f67c <LidarSetPos+0x1b1c>)
 800f62e:	f04f 0200 	mov.w	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f638:	f7fc fa96 	bl	800bb68 <setPick>
					open_servo;
 800f63c:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f640:	480c      	ldr	r0, [pc, #48]	; (800f674 <LidarSetPos+0x1b14>)
 800f642:	f7fa fc39 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f646:	4a14      	ldr	r2, [pc, #80]	; (800f698 <LidarSetPos+0x1b38>)
 800f648:	7f13      	ldrb	r3, [r2, #28]
 800f64a:	f36f 1386 	bfc	r3, #6, #1
 800f64e:	7713      	strb	r3, [r2, #28]
					PP_start(center_1_to_pick_right, 1, &pp);
 800f650:	f107 0308 	add.w	r3, r7, #8
 800f654:	4a05      	ldr	r2, [pc, #20]	; (800f66c <LidarSetPos+0x1b0c>)
 800f656:	2101      	movs	r1, #1
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f6 fa00 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f65e:	e03f      	b.n	800f6e0 <LidarSetPos+0x1b80>
 800f660:	9999999a 	.word	0x9999999a
 800f664:	c0059999 	.word	0xc0059999
 800f668:	2000a028 	.word	0x2000a028
 800f66c:	20006ccc 	.word	0x20006ccc
 800f670:	40020c00 	.word	0x40020c00
 800f674:	20007874 	.word	0x20007874
 800f678:	20006a24 	.word	0x20006a24
 800f67c:	200065a0 	.word	0x200065a0
 800f680:	413c0000 	.word	0x413c0000
 800f684:	20007388 	.word	0x20007388
 800f688:	3ebeb852 	.word	0x3ebeb852
 800f68c:	413b3333 	.word	0x413b3333
 800f690:	3ebd70a4 	.word	0x3ebd70a4
 800f694:	20009438 	.word	0x20009438
 800f698:	200095ac 	.word	0x200095ac
 800f69c:	2000a648 	.word	0x2000a648
					{
						if(ps4.button == SQUARE)
 800f6a0:	4bb9      	ldr	r3, [pc, #740]	; (800f988 <LidarSetPos+0x1e28>)
 800f6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6a8:	d108      	bne.n	800f6bc <LidarSetPos+0x1b5c>
						{
							while(ps4.button == SQUARE);
 800f6aa:	bf00      	nop
 800f6ac:	4bb6      	ldr	r3, [pc, #728]	; (800f988 <LidarSetPos+0x1e28>)
 800f6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6b4:	d0fa      	beq.n	800f6ac <LidarSetPos+0x1b4c>
							PP_stop(&pp);
 800f6b6:	48b5      	ldr	r0, [pc, #724]	; (800f98c <LidarSetPos+0x1e2c>)
 800f6b8:	f7f6 fc0b 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_x >= 5.2)
 800f6bc:	4bb3      	ldr	r3, [pc, #716]	; (800f98c <LidarSetPos+0x1e2c>)
 800f6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f0 ff41 	bl	8000548 <__aeabi_f2d>
 800f6c6:	a3aa      	add	r3, pc, #680	; (adr r3, 800f970 <LidarSetPos+0x1e10>)
 800f6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6cc:	f7f1 fa1a 	bl	8000b04 <__aeabi_dcmpge>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d100      	bne.n	800f6d8 <LidarSetPos+0x1b78>
 800f6d6:	e003      	b.n	800f6e0 <LidarSetPos+0x1b80>
							pp.target_vel[0] = 1.7;
 800f6d8:	4bac      	ldr	r3, [pc, #688]	; (800f98c <LidarSetPos+0x1e2c>)
 800f6da:	4aad      	ldr	r2, [pc, #692]	; (800f990 <LidarSetPos+0x1e30>)
 800f6dc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f6e0:	4baa      	ldr	r3, [pc, #680]	; (800f98c <LidarSetPos+0x1e2c>)
 800f6e2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1d7      	bne.n	800f6a0 <LidarSetPos+0x1b40>
					}
					pick_right = 1;
 800f6f0:	4ba8      	ldr	r3, [pc, #672]	; (800f994 <LidarSetPos+0x1e34>)
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	601a      	str	r2, [r3, #0]
					break;
 800f6f6:	e16a      	b.n	800f9ce <LidarSetPos+0x1e6e>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 800f6f8:	463b      	mov	r3, r7
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2209      	movs	r2, #9
 800f6fe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f702:	f7fc fee1 	bl	800c4c8 <ResetCoordinate>
					loaded = 0;
 800f706:	4ba4      	ldr	r3, [pc, #656]	; (800f998 <LidarSetPos+0x1e38>)
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f70c:	4ba3      	ldr	r3, [pc, #652]	; (800f99c <LidarSetPos+0x1e3c>)
 800f70e:	f04f 0200 	mov.w	r2, #0
 800f712:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f714:	4ba2      	ldr	r3, [pc, #648]	; (800f9a0 <LidarSetPos+0x1e40>)
 800f716:	f04f 0200 	mov.w	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f71c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f720:	f7fc fa22 	bl	800bb68 <setPick>
					open_servo;
 800f724:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f728:	489e      	ldr	r0, [pc, #632]	; (800f9a4 <LidarSetPos+0x1e44>)
 800f72a:	f7fa fbc5 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f72e:	4a9e      	ldr	r2, [pc, #632]	; (800f9a8 <LidarSetPos+0x1e48>)
 800f730:	7f13      	ldrb	r3, [r2, #28]
 800f732:	f36f 1386 	bfc	r3, #6, #1
 800f736:	7713      	strb	r3, [r2, #28]
					PP_start(center_2_to_pick_right, 1, &pp);
 800f738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f73c:	4a93      	ldr	r2, [pc, #588]	; (800f98c <LidarSetPos+0x1e2c>)
 800f73e:	2101      	movs	r1, #1
 800f740:	4618      	mov	r0, r3
 800f742:	f7f6 f98c 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f746:	e01c      	b.n	800f782 <LidarSetPos+0x1c22>
					{
						if(ps4.button == SQUARE)
 800f748:	4b8f      	ldr	r3, [pc, #572]	; (800f988 <LidarSetPos+0x1e28>)
 800f74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f750:	d108      	bne.n	800f764 <LidarSetPos+0x1c04>
						{
							while(ps4.button == SQUARE);
 800f752:	bf00      	nop
 800f754:	4b8c      	ldr	r3, [pc, #560]	; (800f988 <LidarSetPos+0x1e28>)
 800f756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f75c:	d0fa      	beq.n	800f754 <LidarSetPos+0x1bf4>
							PP_stop(&pp);
 800f75e:	488b      	ldr	r0, [pc, #556]	; (800f98c <LidarSetPos+0x1e2c>)
 800f760:	f7f6 fbb7 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_x >= 4.5)
 800f764:	4b89      	ldr	r3, [pc, #548]	; (800f98c <LidarSetPos+0x1e2c>)
 800f766:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f76a:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800f76e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f776:	da00      	bge.n	800f77a <LidarSetPos+0x1c1a>
 800f778:	e003      	b.n	800f782 <LidarSetPos+0x1c22>
							pp.target_vel[0] = 1.7;
 800f77a:	4b84      	ldr	r3, [pc, #528]	; (800f98c <LidarSetPos+0x1e2c>)
 800f77c:	4a84      	ldr	r2, [pc, #528]	; (800f990 <LidarSetPos+0x1e30>)
 800f77e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f782:	4b82      	ldr	r3, [pc, #520]	; (800f98c <LidarSetPos+0x1e2c>)
 800f784:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1da      	bne.n	800f748 <LidarSetPos+0x1be8>
					}
					pick_right = 1;
 800f792:	4b80      	ldr	r3, [pc, #512]	; (800f994 <LidarSetPos+0x1e34>)
 800f794:	2201      	movs	r2, #1
 800f796:	601a      	str	r2, [r3, #0]
					break;
 800f798:	e119      	b.n	800f9ce <LidarSetPos+0x1e6e>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 800f79a:	463b      	mov	r3, r7
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2209      	movs	r2, #9
 800f7a0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f7a4:	f7fc fe90 	bl	800c4c8 <ResetCoordinate>
					loaded = 0;
 800f7a8:	4b7b      	ldr	r3, [pc, #492]	; (800f998 <LidarSetPos+0x1e38>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f7ae:	4b7b      	ldr	r3, [pc, #492]	; (800f99c <LidarSetPos+0x1e3c>)
 800f7b0:	f04f 0200 	mov.w	r2, #0
 800f7b4:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f7b6:	4b7a      	ldr	r3, [pc, #488]	; (800f9a0 <LidarSetPos+0x1e40>)
 800f7b8:	f04f 0200 	mov.w	r2, #0
 800f7bc:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f7be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f7c2:	f7fc f9d1 	bl	800bb68 <setPick>
					open_servo;
 800f7c6:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f7ca:	4876      	ldr	r0, [pc, #472]	; (800f9a4 <LidarSetPos+0x1e44>)
 800f7cc:	f7fa fb74 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f7d0:	4a75      	ldr	r2, [pc, #468]	; (800f9a8 <LidarSetPos+0x1e48>)
 800f7d2:	7f13      	ldrb	r3, [r2, #28]
 800f7d4:	f36f 1386 	bfc	r3, #6, #1
 800f7d8:	7713      	strb	r3, [r2, #28]
					PP_start(center_to_pick_right, 1, &pp);
 800f7da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f7de:	4a6b      	ldr	r2, [pc, #428]	; (800f98c <LidarSetPos+0x1e2c>)
 800f7e0:	2101      	movs	r1, #1
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7f6 f93b 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f7e8:	e01f      	b.n	800f82a <LidarSetPos+0x1cca>
					{
						if(ps4.button == SQUARE)
 800f7ea:	4b67      	ldr	r3, [pc, #412]	; (800f988 <LidarSetPos+0x1e28>)
 800f7ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7f2:	d108      	bne.n	800f806 <LidarSetPos+0x1ca6>
						{
							while(ps4.button == SQUARE);
 800f7f4:	bf00      	nop
 800f7f6:	4b64      	ldr	r3, [pc, #400]	; (800f988 <LidarSetPos+0x1e28>)
 800f7f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7fe:	d0fa      	beq.n	800f7f6 <LidarSetPos+0x1c96>
							PP_stop(&pp);
 800f800:	4862      	ldr	r0, [pc, #392]	; (800f98c <LidarSetPos+0x1e2c>)
 800f802:	f7f6 fb66 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_x >= 3.7)
 800f806:	4b61      	ldr	r3, [pc, #388]	; (800f98c <LidarSetPos+0x1e2c>)
 800f808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f0 fe9c 	bl	8000548 <__aeabi_f2d>
 800f810:	a359      	add	r3, pc, #356	; (adr r3, 800f978 <LidarSetPos+0x1e18>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f1 f975 	bl	8000b04 <__aeabi_dcmpge>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d100      	bne.n	800f822 <LidarSetPos+0x1cc2>
 800f820:	e003      	b.n	800f82a <LidarSetPos+0x1cca>
							pp.target_vel[0] = 1.7;
 800f822:	4b5a      	ldr	r3, [pc, #360]	; (800f98c <LidarSetPos+0x1e2c>)
 800f824:	4a5a      	ldr	r2, [pc, #360]	; (800f990 <LidarSetPos+0x1e30>)
 800f826:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f82a:	4b58      	ldr	r3, [pc, #352]	; (800f98c <LidarSetPos+0x1e2c>)
 800f82c:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1d7      	bne.n	800f7ea <LidarSetPos+0x1c8a>
					}
					pick_right = 1;
 800f83a:	4b56      	ldr	r3, [pc, #344]	; (800f994 <LidarSetPos+0x1e34>)
 800f83c:	2201      	movs	r2, #1
 800f83e:	601a      	str	r2, [r3, #0]
					break;
 800f840:	e0c5      	b.n	800f9ce <LidarSetPos+0x1e6e>

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 800f842:	463b      	mov	r3, r7
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2209      	movs	r2, #9
 800f848:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f84c:	f7fc fe3c 	bl	800c4c8 <ResetCoordinate>
					loaded = 0;
 800f850:	4b51      	ldr	r3, [pc, #324]	; (800f998 <LidarSetPos+0x1e38>)
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f856:	4b51      	ldr	r3, [pc, #324]	; (800f99c <LidarSetPos+0x1e3c>)
 800f858:	f04f 0200 	mov.w	r2, #0
 800f85c:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f85e:	4b50      	ldr	r3, [pc, #320]	; (800f9a0 <LidarSetPos+0x1e40>)
 800f860:	f04f 0200 	mov.w	r2, #0
 800f864:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f86a:	f7fc f97d 	bl	800bb68 <setPick>
					open_servo;
 800f86e:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f872:	484c      	ldr	r0, [pc, #304]	; (800f9a4 <LidarSetPos+0x1e44>)
 800f874:	f7fa fb20 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f878:	4a4b      	ldr	r2, [pc, #300]	; (800f9a8 <LidarSetPos+0x1e48>)
 800f87a:	7f13      	ldrb	r3, [r2, #28]
 800f87c:	f36f 1386 	bfc	r3, #6, #1
 800f880:	7713      	strb	r3, [r2, #28]
					PP_start(center_3_to_pick_right, 1, &pp);
 800f882:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f886:	4a41      	ldr	r2, [pc, #260]	; (800f98c <LidarSetPos+0x1e2c>)
 800f888:	2101      	movs	r1, #1
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f6 f8e7 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f890:	e01f      	b.n	800f8d2 <LidarSetPos+0x1d72>
					{
						if(ps4.button == SQUARE)
 800f892:	4b3d      	ldr	r3, [pc, #244]	; (800f988 <LidarSetPos+0x1e28>)
 800f894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f89a:	d108      	bne.n	800f8ae <LidarSetPos+0x1d4e>
						{
							while(ps4.button == SQUARE);
 800f89c:	bf00      	nop
 800f89e:	4b3a      	ldr	r3, [pc, #232]	; (800f988 <LidarSetPos+0x1e28>)
 800f8a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8a6:	d0fa      	beq.n	800f89e <LidarSetPos+0x1d3e>
							PP_stop(&pp);
 800f8a8:	4838      	ldr	r0, [pc, #224]	; (800f98c <LidarSetPos+0x1e2c>)
 800f8aa:	f7f6 fb12 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_x >= 2.4)
 800f8ae:	4b37      	ldr	r3, [pc, #220]	; (800f98c <LidarSetPos+0x1e2c>)
 800f8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f0 fe48 	bl	8000548 <__aeabi_f2d>
 800f8b8:	a331      	add	r3, pc, #196	; (adr r3, 800f980 <LidarSetPos+0x1e20>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f1 f921 	bl	8000b04 <__aeabi_dcmpge>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d100      	bne.n	800f8ca <LidarSetPos+0x1d6a>
 800f8c8:	e003      	b.n	800f8d2 <LidarSetPos+0x1d72>
							pp.target_vel[0] = 1.7;
 800f8ca:	4b30      	ldr	r3, [pc, #192]	; (800f98c <LidarSetPos+0x1e2c>)
 800f8cc:	4a30      	ldr	r2, [pc, #192]	; (800f990 <LidarSetPos+0x1e30>)
 800f8ce:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f8d2:	4b2e      	ldr	r3, [pc, #184]	; (800f98c <LidarSetPos+0x1e2c>)
 800f8d4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1d7      	bne.n	800f892 <LidarSetPos+0x1d32>
					}
					pick_right = 1;
 800f8e2:	4b2c      	ldr	r3, [pc, #176]	; (800f994 <LidarSetPos+0x1e34>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	601a      	str	r2, [r3, #0]

					break;
 800f8e8:	e071      	b.n	800f9ce <LidarSetPos+0x1e6e>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 800f8ea:	463b      	mov	r3, r7
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2209      	movs	r2, #9
 800f8f0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 800f8f4:	f7fc fde8 	bl	800c4c8 <ResetCoordinate>
					loaded = 0;
 800f8f8:	4b27      	ldr	r3, [pc, #156]	; (800f998 <LidarSetPos+0x1e38>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 800f8fe:	4b27      	ldr	r3, [pc, #156]	; (800f99c <LidarSetPos+0x1e3c>)
 800f900:	f04f 0200 	mov.w	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 800f906:	4b26      	ldr	r3, [pc, #152]	; (800f9a0 <LidarSetPos+0x1e40>)
 800f908:	f04f 0200 	mov.w	r2, #0
 800f90c:	601a      	str	r2, [r3, #0]
					setPick(1000);
 800f90e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f912:	f7fc f929 	bl	800bb68 <setPick>
					open_servo;
 800f916:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800f91a:	4822      	ldr	r0, [pc, #136]	; (800f9a4 <LidarSetPos+0x1e44>)
 800f91c:	f7fa facc 	bl	8009eb8 <ServoSetPulse>
					cylinder_retract;
 800f920:	4a21      	ldr	r2, [pc, #132]	; (800f9a8 <LidarSetPos+0x1e48>)
 800f922:	7f13      	ldrb	r3, [r2, #28]
 800f924:	f36f 1386 	bfc	r3, #6, #1
 800f928:	7713      	strb	r3, [r2, #28]
					PP_start(center_4_to_pick_right, 1, &pp);
 800f92a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800f92e:	4a17      	ldr	r2, [pc, #92]	; (800f98c <LidarSetPos+0x1e2c>)
 800f930:	2101      	movs	r1, #1
 800f932:	4618      	mov	r0, r3
 800f934:	f7f6 f893 	bl	8005a5e <PP_start>
					while(pp.pp_start)
 800f938:	e03c      	b.n	800f9b4 <LidarSetPos+0x1e54>
					{
						if(ps4.button == SQUARE)
 800f93a:	4b13      	ldr	r3, [pc, #76]	; (800f988 <LidarSetPos+0x1e28>)
 800f93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f942:	d108      	bne.n	800f956 <LidarSetPos+0x1df6>
						{
							while(ps4.button == SQUARE);
 800f944:	bf00      	nop
 800f946:	4b10      	ldr	r3, [pc, #64]	; (800f988 <LidarSetPos+0x1e28>)
 800f948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f94a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f94e:	d0fa      	beq.n	800f946 <LidarSetPos+0x1de6>
							PP_stop(&pp);
 800f950:	480e      	ldr	r0, [pc, #56]	; (800f98c <LidarSetPos+0x1e2c>)
 800f952:	f7f6 fabe 	bl	8005ed2 <PP_stop>
						}

						if(pp.real_x >= 1.5)
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <LidarSetPos+0x1e2c>)
 800f958:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f95c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f960:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f968:	da20      	bge.n	800f9ac <LidarSetPos+0x1e4c>
 800f96a:	e023      	b.n	800f9b4 <LidarSetPos+0x1e54>
 800f96c:	f3af 8000 	nop.w
 800f970:	cccccccd 	.word	0xcccccccd
 800f974:	4014cccc 	.word	0x4014cccc
 800f978:	9999999a 	.word	0x9999999a
 800f97c:	400d9999 	.word	0x400d9999
 800f980:	33333333 	.word	0x33333333
 800f984:	40033333 	.word	0x40033333
 800f988:	2000a028 	.word	0x2000a028
 800f98c:	20006ccc 	.word	0x20006ccc
 800f990:	3fd9999a 	.word	0x3fd9999a
 800f994:	2000a648 	.word	0x2000a648
 800f998:	20009438 	.word	0x20009438
 800f99c:	20007388 	.word	0x20007388
 800f9a0:	200065a0 	.word	0x200065a0
 800f9a4:	20007874 	.word	0x20007874
 800f9a8:	200095ac 	.word	0x200095ac
							pp.target_vel[0] = 1.7;
 800f9ac:	4b0b      	ldr	r3, [pc, #44]	; (800f9dc <LidarSetPos+0x1e7c>)
 800f9ae:	4a0c      	ldr	r2, [pc, #48]	; (800f9e0 <LidarSetPos+0x1e80>)
 800f9b0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
					while(pp.pp_start)
 800f9b4:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <LidarSetPos+0x1e7c>)
 800f9b6:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1ba      	bne.n	800f93a <LidarSetPos+0x1dda>
					}

					pick_right = 1;
 800f9c4:	4b07      	ldr	r3, [pc, #28]	; (800f9e4 <LidarSetPos+0x1e84>)
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	601a      	str	r2, [r3, #0]
					break;
 800f9ca:	e000      	b.n	800f9ce <LidarSetPos+0x1e6e>

				default:
					break;
 800f9cc:	bf00      	nop
			}

		default:
			break;
 800f9ce:	bf00      	nop
		}
}
 800f9d0:	bf00      	nop
 800f9d2:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20006ccc 	.word	0x20006ccc
 800f9e0:	3fd9999a 	.word	0x3fd9999a
 800f9e4:	2000a648 	.word	0x2000a648

0800f9e8 <LidarAdjust>:
			break;
	}
}

void LidarAdjust(Lidar_t* lidar)
{
 800f9e8:	b5b0      	push	{r4, r5, r7, lr}
 800f9ea:	b08a      	sub	sp, #40	; 0x28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f000 81b6 	beq.w	800fd68 <LidarAdjust+0x380>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 800f9fc:	4bb2      	ldr	r3, [pc, #712]	; (800fcc8 <LidarAdjust+0x2e0>)
 800f9fe:	f107 040c 	add.w	r4, r7, #12
 800fa02:	461d      	mov	r5, r3
 800fa04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800fa10:	f107 030c 	add.w	r3, r7, #12
 800fa14:	4aad      	ldr	r2, [pc, #692]	; (800fccc <LidarAdjust+0x2e4>)
 800fa16:	2101      	movs	r1, #1
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f6 f820 	bl	8005a5e <PP_start>
		while(pp.pp_start)
 800fa1e:	e01e      	b.n	800fa5e <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 800fa20:	4bab      	ldr	r3, [pc, #684]	; (800fcd0 <LidarAdjust+0x2e8>)
 800fa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa28:	d108      	bne.n	800fa3c <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 800fa2a:	bf00      	nop
 800fa2c:	4ba8      	ldr	r3, [pc, #672]	; (800fcd0 <LidarAdjust+0x2e8>)
 800fa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa34:	d0fa      	beq.n	800fa2c <LidarAdjust+0x44>
				PP_stop(&pp);
 800fa36:	48a5      	ldr	r0, [pc, #660]	; (800fccc <LidarAdjust+0x2e4>)
 800fa38:	f7f6 fa4b 	bl	8005ed2 <PP_stop>
			}

			if(In_LS_Shot_1 || In_LS_Shot_2)
 800fa3c:	2108      	movs	r1, #8
 800fa3e:	48a5      	ldr	r0, [pc, #660]	; (800fcd4 <LidarAdjust+0x2ec>)
 800fa40:	f002 fbb0 	bl	80121a4 <HAL_GPIO_ReadPin>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d006      	beq.n	800fa58 <LidarAdjust+0x70>
 800fa4a:	2110      	movs	r1, #16
 800fa4c:	48a1      	ldr	r0, [pc, #644]	; (800fcd4 <LidarAdjust+0x2ec>)
 800fa4e:	f002 fba9 	bl	80121a4 <HAL_GPIO_ReadPin>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d102      	bne.n	800fa5e <LidarAdjust+0x76>
				PP_stop(&pp);
 800fa58:	489c      	ldr	r0, [pc, #624]	; (800fccc <LidarAdjust+0x2e4>)
 800fa5a:	f7f6 fa3a 	bl	8005ed2 <PP_stop>
		while(pp.pp_start)
 800fa5e:	4b9b      	ldr	r3, [pc, #620]	; (800fccc <LidarAdjust+0x2e4>)
 800fa60:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fa64:	f003 0301 	and.w	r3, r3, #1
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1d8      	bne.n	800fa20 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fa74:	3b02      	subs	r3, #2
 800fa76:	2b06      	cmp	r3, #6
 800fa78:	f200 8175 	bhi.w	800fd66 <LidarAdjust+0x37e>
 800fa7c:	a201      	add	r2, pc, #4	; (adr r2, 800fa84 <LidarAdjust+0x9c>)
 800fa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa82:	bf00      	nop
 800fa84:	0800fd67 	.word	0x0800fd67
 800fa88:	0800faa1 	.word	0x0800faa1
 800fa8c:	0800fb2b 	.word	0x0800fb2b
 800fa90:	0800fbb5 	.word	0x0800fbb5
 800fa94:	0800fc3f 	.word	0x0800fc3f
 800fa98:	0800fcdd 	.word	0x0800fcdd
 800fa9c:	0800fd67 	.word	0x0800fd67
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	2001      	movs	r0, #1
 800faa4:	f000 fa5c 	bl	800ff60 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f0 fd47 	bl	8000548 <__aeabi_f2d>
 800faba:	4602      	mov	r2, r0
 800fabc:	460b      	mov	r3, r1
 800fabe:	4620      	mov	r0, r4
 800fac0:	4629      	mov	r1, r5
 800fac2:	f7f0 fbe1 	bl	8000288 <__aeabi_dsub>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	4610      	mov	r0, r2
 800facc:	4619      	mov	r1, r3
 800face:	f7f1 f88b 	bl	8000be8 <__aeabi_d2f>
 800fad2:	4602      	mov	r2, r0
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f0 fd2e 	bl	8000548 <__aeabi_f2d>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4620      	mov	r0, r4
 800faf2:	4629      	mov	r1, r5
 800faf4:	f7f0 fbc8 	bl	8000288 <__aeabi_dsub>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4610      	mov	r0, r2
 800fafe:	4619      	mov	r1, r3
 800fb00:	f7f1 f872 	bl	8000be8 <__aeabi_d2f>
 800fb04:	4602      	mov	r2, r0
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fb18:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800fcd8 <LidarAdjust+0x2f0>
 800fb1c:	eef0 0a47 	vmov.f32	s1, s14
 800fb20:	eeb0 0a67 	vmov.f32	s0, s15
 800fb24:	f000 f924 	bl	800fd70 <LidarAdjustPP>
				break;
 800fb28:	e11e      	b.n	800fd68 <LidarAdjust+0x380>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	f000 fa17 	bl	800ff60 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7f0 fd02 	bl	8000548 <__aeabi_f2d>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	4620      	mov	r0, r4
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	f7f0 fb9c 	bl	8000288 <__aeabi_dsub>
 800fb50:	4602      	mov	r2, r0
 800fb52:	460b      	mov	r3, r1
 800fb54:	4610      	mov	r0, r2
 800fb56:	4619      	mov	r1, r3
 800fb58:	f7f1 f846 	bl	8000be8 <__aeabi_d2f>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7f0 fce9 	bl	8000548 <__aeabi_f2d>
 800fb76:	4602      	mov	r2, r0
 800fb78:	460b      	mov	r3, r1
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	f7f0 fb83 	bl	8000288 <__aeabi_dsub>
 800fb82:	4602      	mov	r2, r0
 800fb84:	460b      	mov	r3, r1
 800fb86:	4610      	mov	r0, r2
 800fb88:	4619      	mov	r1, r3
 800fb8a:	f7f1 f82d 	bl	8000be8 <__aeabi_d2f>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fba2:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 800fcd8 <LidarAdjust+0x2f0>
 800fba6:	eef0 0a47 	vmov.f32	s1, s14
 800fbaa:	eeb0 0a67 	vmov.f32	s0, s15
 800fbae:	f000 f8df 	bl	800fd70 <LidarAdjustPP>
				break;
 800fbb2:	e0d9      	b.n	800fd68 <LidarAdjust+0x380>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 800fbb4:	6879      	ldr	r1, [r7, #4]
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	f000 f9d2 	bl	800ff60 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7f0 fcbd 	bl	8000548 <__aeabi_f2d>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	f7f0 fb57 	bl	8000288 <__aeabi_dsub>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	460b      	mov	r3, r1
 800fbde:	4610      	mov	r0, r2
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f7f1 f801 	bl	8000be8 <__aeabi_d2f>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7f0 fca4 	bl	8000548 <__aeabi_f2d>
 800fc00:	4602      	mov	r2, r0
 800fc02:	460b      	mov	r3, r1
 800fc04:	4620      	mov	r0, r4
 800fc06:	4629      	mov	r1, r5
 800fc08:	f7f0 fb3e 	bl	8000288 <__aeabi_dsub>
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	460b      	mov	r3, r1
 800fc10:	4610      	mov	r0, r2
 800fc12:	4619      	mov	r1, r3
 800fc14:	f7f0 ffe8 	bl	8000be8 <__aeabi_d2f>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fc2c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800fcd8 <LidarAdjust+0x2f0>
 800fc30:	eef0 0a47 	vmov.f32	s1, s14
 800fc34:	eeb0 0a67 	vmov.f32	s0, s15
 800fc38:	f000 f89a 	bl	800fd70 <LidarAdjustPP>
				break;
 800fc3c:	e094      	b.n	800fd68 <LidarAdjust+0x380>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	2001      	movs	r0, #1
 800fc42:	f000 f98d 	bl	800ff60 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7f0 fc78 	bl	8000548 <__aeabi_f2d>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	4629      	mov	r1, r5
 800fc60:	f7f0 fb12 	bl	8000288 <__aeabi_dsub>
 800fc64:	4602      	mov	r2, r0
 800fc66:	460b      	mov	r3, r1
 800fc68:	4610      	mov	r0, r2
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	f7f0 ffbc 	bl	8000be8 <__aeabi_d2f>
 800fc70:	4602      	mov	r2, r0
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7f0 fc5f 	bl	8000548 <__aeabi_f2d>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 faf9 	bl	8000288 <__aeabi_dsub>
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4610      	mov	r0, r2
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	f7f0 ffa3 	bl	8000be8 <__aeabi_d2f>
 800fca2:	4602      	mov	r2, r0
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fcb6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800fcd8 <LidarAdjust+0x2f0>
 800fcba:	eef0 0a47 	vmov.f32	s1, s14
 800fcbe:	eeb0 0a67 	vmov.f32	s0, s15
 800fcc2:	f000 f855 	bl	800fd70 <LidarAdjustPP>
				break;
 800fcc6:	e04f      	b.n	800fd68 <LidarAdjust+0x380>
 800fcc8:	08020050 	.word	0x08020050
 800fccc:	20006ccc 	.word	0x20006ccc
 800fcd0:	2000a028 	.word	0x2000a028
 800fcd4:	40020c00 	.word	0x40020c00
 800fcd8:	c2b40000 	.word	0xc2b40000

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 800fcdc:	6879      	ldr	r1, [r7, #4]
 800fcde:	2001      	movs	r0, #1
 800fce0:	f000 f93e 	bl	800ff60 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7f0 fc29 	bl	8000548 <__aeabi_f2d>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	f7f0 fac3 	bl	8000288 <__aeabi_dsub>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4610      	mov	r0, r2
 800fd08:	4619      	mov	r1, r3
 800fd0a:	f7f0 ff6d 	bl	8000be8 <__aeabi_d2f>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7f0 fc10 	bl	8000548 <__aeabi_f2d>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	f7f0 faaa 	bl	8000288 <__aeabi_dsub>
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	4610      	mov	r0, r2
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f7f0 ff54 	bl	8000be8 <__aeabi_d2f>
 800fd40:	4602      	mov	r2, r0
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800fd54:	ed1f 1a20 	vldr	s2, [pc, #-128]	; 800fcd8 <LidarAdjust+0x2f0>
 800fd58:	eef0 0a47 	vmov.f32	s1, s14
 800fd5c:	eeb0 0a67 	vmov.f32	s0, s15
 800fd60:	f000 f806 	bl	800fd70 <LidarAdjustPP>
				break;
 800fd64:	e000      	b.n	800fd68 <LidarAdjust+0x380>

			case UPPER_RIGHT:
				break;

			default:
				break;
 800fd66:	bf00      	nop
		}
	}
}
 800fd68:	bf00      	nop
 800fd6a:	3728      	adds	r7, #40	; 0x28
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bdb0      	pop	{r4, r5, r7, pc}

0800fd70 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08c      	sub	sp, #48	; 0x30
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	ed87 0a03 	vstr	s0, [r7, #12]
 800fd7a:	edc7 0a02 	vstr	s1, [r7, #8]
 800fd7e:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 800fd82:	f7fc fba1 	bl	800c4c8 <ResetCoordinate>

	float adj_point[1][7] = {{1.5, adj_x, adj_y, z, 0, 1, 0}};
 800fd86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fd8a:	617b      	str	r3, [r7, #20]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	61bb      	str	r3, [r7, #24]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	623b      	str	r3, [r7, #32]
 800fd98:	f04f 0300 	mov.w	r3, #0
 800fd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800fd9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fda4:	f04f 0300 	mov.w	r3, #0
 800fda8:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 800fdaa:	f107 0314 	add.w	r3, r7, #20
 800fdae:	4a1c      	ldr	r2, [pc, #112]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f5 fe53 	bl	8005a5e <PP_start>

	while(pp.pp_start)
 800fdb8:	e025      	b.n	800fe06 <LidarAdjustPP+0x96>
	{
		if(ps4.button == SQUARE)
 800fdba:	4b1a      	ldr	r3, [pc, #104]	; (800fe24 <LidarAdjustPP+0xb4>)
 800fdbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdc2:	d108      	bne.n	800fdd6 <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 800fdc4:	bf00      	nop
 800fdc6:	4b17      	ldr	r3, [pc, #92]	; (800fe24 <LidarAdjustPP+0xb4>)
 800fdc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdce:	d0fa      	beq.n	800fdc6 <LidarAdjustPP+0x56>
			PP_stop(&pp);
 800fdd0:	4813      	ldr	r0, [pc, #76]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fdd2:	f7f6 f87e 	bl	8005ed2 <PP_stop>
		}

		if(In_LS_Shot_1 || In_LS_Shot_2)
 800fdd6:	2108      	movs	r1, #8
 800fdd8:	4813      	ldr	r0, [pc, #76]	; (800fe28 <LidarAdjustPP+0xb8>)
 800fdda:	f002 f9e3 	bl	80121a4 <HAL_GPIO_ReadPin>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d006      	beq.n	800fdf2 <LidarAdjustPP+0x82>
 800fde4:	2110      	movs	r1, #16
 800fde6:	4810      	ldr	r0, [pc, #64]	; (800fe28 <LidarAdjustPP+0xb8>)
 800fde8:	f002 f9dc 	bl	80121a4 <HAL_GPIO_ReadPin>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d109      	bne.n	800fe06 <LidarAdjustPP+0x96>
		{
			pp.error_y = 0;
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fdf4:	f04f 0200 	mov.w	r2, #0
 800fdf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
			pp.target_y[0] = pp.real_y;
 800fdfc:	4b08      	ldr	r3, [pc, #32]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe00:	4a07      	ldr	r2, [pc, #28]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fe02:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	while(pp.pp_start)
 800fe06:	4b06      	ldr	r3, [pc, #24]	; (800fe20 <LidarAdjustPP+0xb0>)
 800fe08:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800fe0c:	f003 0301 	and.w	r3, r3, #1
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1d1      	bne.n	800fdba <LidarAdjustPP+0x4a>
		}
	}
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	3730      	adds	r7, #48	; 0x30
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	20006ccc 	.word	0x20006ccc
 800fe24:	2000a028 	.word	0x2000a028
 800fe28:	40020c00 	.word	0x40020c00

0800fe2c <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 800fe34:	4b23      	ldr	r3, [pc, #140]	; (800fec4 <LidarControl+0x98>)
 800fe36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe38:	2b80      	cmp	r3, #128	; 0x80
 800fe3a:	d10b      	bne.n	800fe54 <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 800fe3c:	bf00      	nop
 800fe3e:	4b21      	ldr	r3, [pc, #132]	; (800fec4 <LidarControl+0x98>)
 800fe40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe42:	2b80      	cmp	r3, #128	; 0x80
 800fe44:	d0fb      	beq.n	800fe3e <LidarControl+0x12>
		lidar->pos_counter--;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe4c:	1e5a      	subs	r2, r3, #1
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == RIGHT)
 800fe54:	4b1b      	ldr	r3, [pc, #108]	; (800fec4 <LidarControl+0x98>)
 800fe56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe58:	2b20      	cmp	r3, #32
 800fe5a:	d10b      	bne.n	800fe74 <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 800fe5c:	bf00      	nop
 800fe5e:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <LidarControl+0x98>)
 800fe60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe62:	2b20      	cmp	r3, #32
 800fe64:	d0fb      	beq.n	800fe5e <LidarControl+0x32>
		lidar->pos_counter++;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe6c:	1c5a      	adds	r2, r3, #1
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == UP)
 800fe74:	4b13      	ldr	r3, [pc, #76]	; (800fec4 <LidarControl+0x98>)
 800fe76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe78:	2b10      	cmp	r3, #16
 800fe7a:	d10b      	bne.n	800fe94 <LidarControl+0x68>
	{
		while(ps4.button == UP);
 800fe7c:	bf00      	nop
 800fe7e:	4b11      	ldr	r3, [pc, #68]	; (800fec4 <LidarControl+0x98>)
 800fe80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe82:	2b10      	cmp	r3, #16
 800fe84:	d0fb      	beq.n	800fe7e <LidarControl+0x52>
		lidar->pos_counter += 2;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fe8c:	1c9a      	adds	r2, r3, #2
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	if(ps4.button == DOWN)
 800fe94:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <LidarControl+0x98>)
 800fe96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe98:	2b40      	cmp	r3, #64	; 0x40
 800fe9a:	d10b      	bne.n	800feb4 <LidarControl+0x88>
	{
		while(ps4.button == DOWN);
 800fe9c:	bf00      	nop
 800fe9e:	4b09      	ldr	r3, [pc, #36]	; (800fec4 <LidarControl+0x98>)
 800fea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea2:	2b40      	cmp	r3, #64	; 0x40
 800fea4:	d0fb      	beq.n	800fe9e <LidarControl+0x72>
		lidar->pos_counter -= 2;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800feac:	1e9a      	subs	r2, r3, #2
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	LidarCheckPos(lidar);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f807 	bl	800fec8 <LidarCheckPos>
//	LidarCheckAngle(lidar);
}
 800feba:	bf00      	nop
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	2000a028 	.word	0x2000a028

0800fec8 <LidarCheckPos>:
			break;
	}
}

void LidarCheckPos(Lidar_t* lidar)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800fed6:	3b02      	subs	r3, #2
 800fed8:	2b07      	cmp	r3, #7
 800feda:	d83b      	bhi.n	800ff54 <LidarCheckPos+0x8c>
 800fedc:	a201      	add	r2, pc, #4	; (adr r2, 800fee4 <LidarCheckPos+0x1c>)
 800fede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee2:	bf00      	nop
 800fee4:	0800ff0f 	.word	0x0800ff0f
 800fee8:	0800ff19 	.word	0x0800ff19
 800feec:	0800ff23 	.word	0x0800ff23
 800fef0:	0800ff2d 	.word	0x0800ff2d
 800fef4:	0800ff37 	.word	0x0800ff37
 800fef8:	0800ff41 	.word	0x0800ff41
 800fefc:	0800ff4b 	.word	0x0800ff4b
 800ff00:	0800ff05 	.word	0x0800ff05
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	2009      	movs	r0, #9
 800ff08:	f7fd fe2a 	bl	800db60 <LidarSetPos>
			break;
 800ff0c:	e023      	b.n	800ff56 <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 800ff0e:	6879      	ldr	r1, [r7, #4]
 800ff10:	2002      	movs	r0, #2
 800ff12:	f7fd fe25 	bl	800db60 <LidarSetPos>
			break;
 800ff16:	e01e      	b.n	800ff56 <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 800ff18:	6879      	ldr	r1, [r7, #4]
 800ff1a:	2003      	movs	r0, #3
 800ff1c:	f7fd fe20 	bl	800db60 <LidarSetPos>
			break;
 800ff20:	e019      	b.n	800ff56 <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	2004      	movs	r0, #4
 800ff26:	f7fd fe1b 	bl	800db60 <LidarSetPos>
			break;
 800ff2a:	e014      	b.n	800ff56 <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 800ff2c:	6879      	ldr	r1, [r7, #4]
 800ff2e:	2005      	movs	r0, #5
 800ff30:	f7fd fe16 	bl	800db60 <LidarSetPos>
			break;
 800ff34:	e00f      	b.n	800ff56 <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 800ff36:	6879      	ldr	r1, [r7, #4]
 800ff38:	2006      	movs	r0, #6
 800ff3a:	f7fd fe11 	bl	800db60 <LidarSetPos>
			break;
 800ff3e:	e00a      	b.n	800ff56 <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	2007      	movs	r0, #7
 800ff44:	f7fd fe0c 	bl	800db60 <LidarSetPos>
			break;
 800ff48:	e005      	b.n	800ff56 <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 800ff4a:	6879      	ldr	r1, [r7, #4]
 800ff4c:	2008      	movs	r0, #8
 800ff4e:	f7fd fe07 	bl	800db60 <LidarSetPos>
			break;
 800ff52:	e000      	b.n	800ff56 <LidarCheckPos+0x8e>

		default:
			break;
 800ff54:	bf00      	nop
	}
}
 800ff56:	bf00      	nop
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop

0800ff60 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	4603      	mov	r3, r0
 800ff68:	6039      	str	r1, [r7, #0]
 800ff6a:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	79fa      	ldrb	r2, [r7, #7]
 800ff78:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	3302      	adds	r3, #2
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 800ff8c:	7812      	ldrb	r2, [r2, #0]
 800ff8e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	1c59      	adds	r1, r3, #1
 800ff9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff9e:	2202      	movs	r2, #2
 800ffa0:	f005 ff8f 	bl	8015ec2 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	33c9      	adds	r3, #201	; 0xc9
 800ffae:	2219      	movs	r2, #25
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	f006 f81f 	bl	8015ff4 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 800ffb6:	e004      	b.n	800ffc2 <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 800ffb8:	4b07      	ldr	r3, [pc, #28]	; (800ffd8 <LidarSendIns+0x78>)
 800ffba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffc0:	d005      	beq.n	800ffce <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d0f5      	beq.n	800ffb8 <LidarSendIns+0x58>
			break;
	}
}
 800ffcc:	e000      	b.n	800ffd0 <LidarSendIns+0x70>
			break;
 800ffce:	bf00      	nop
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	2000a028 	.word	0x2000a028

0800ffdc <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 800ffdc:	b5b0      	push	{r4, r5, r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 8115 	bne.w	801021a <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 800fff0:	4baa      	ldr	r3, [pc, #680]	; (801029c <ObstacleHandler+0x2c0>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <ObstacleHandler+0x22>
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d061      	beq.n	80100c0 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 800fffc:	e1f1      	b.n	80103e2 <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010004:	2b01      	cmp	r3, #1
 8010006:	f040 81eb 	bne.w	80103e0 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	32ca      	adds	r2, #202	; 0xca
 8010014:	6812      	ldr	r2, [r2, #0]
 8010016:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 801001e:	f003 0301 	and.w	r3, r3, #1
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b00      	cmp	r3, #0
 8010026:	d110      	bne.n	801004a <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801002e:	461a      	mov	r2, r3
 8010030:	4613      	mov	r3, r2
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4618      	mov	r0, r3
 801003a:	f009 fd11 	bl	8019a60 <malloc>
 801003e:	4603      	mov	r3, r0
 8010040:	461a      	mov	r2, r3
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8010048:	e012      	b.n	8010070 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010056:	4619      	mov	r1, r3
 8010058:	460b      	mov	r3, r1
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	440b      	add	r3, r1
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f00a fc3e 	bl	801a8e4 <realloc>
 8010068:	4602      	mov	r2, r0
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 801007c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010080:	2204      	movs	r2, #4
 8010082:	f005 ff1e 	bl	8015ec2 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010098:	b29b      	uxth	r3, r3
 801009a:	461a      	mov	r2, r3
 801009c:	0052      	lsls	r2, r2, #1
 801009e:	4413      	add	r3, r2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	461a      	mov	r2, r3
 80100a6:	f005 ffa5 	bl	8015ff4 <HAL_UART_Receive_IT>
					mode = 1;
 80100aa:	4b7c      	ldr	r3, [pc, #496]	; (801029c <ObstacleHandler+0x2c0>)
 80100ac:	2201      	movs	r2, #1
 80100ae:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	f892 3298 	ldrb.w	r3, [r2, #664]	; 0x298
 80100b6:	f043 0301 	orr.w	r3, r3, #1
 80100ba:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
				break;
 80100be:	e18f      	b.n	80103e0 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 80100c0:	2300      	movs	r3, #0
 80100c2:	617b      	str	r3, [r7, #20]
 80100c4:	e05b      	b.n	801017e <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 80100cc:	697a      	ldr	r2, [r7, #20]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	33c8      	adds	r3, #200	; 0xc8
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	4413      	add	r3, r2
 80100dc:	3301      	adds	r3, #1
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80100e8:	697a      	ldr	r2, [r7, #20]
 80100ea:	4613      	mov	r3, r2
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	4413      	add	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	3304      	adds	r3, #4
 80100f4:	33c8      	adds	r3, #200	; 0xc8
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	4413      	add	r3, r2
 80100fa:	3301      	adds	r3, #1
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	4613      	mov	r3, r2
 801010a:	005b      	lsls	r3, r3, #1
 801010c:	4413      	add	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	3308      	adds	r3, #8
 8010112:	33c8      	adds	r3, #200	; 0xc8
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	4413      	add	r3, r2
 8010118:	3301      	adds	r3, #1
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 801012a:	f7f0 fb8f 	bl	800084c <__aeabi_ddiv>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	4610      	mov	r0, r2
 8010134:	4619      	mov	r1, r3
 8010136:	f7f0 fd57 	bl	8000be8 <__aeabi_d2f>
 801013a:	4603      	mov	r3, r0
 801013c:	ee00 3a10 	vmov	s0, r3
 8010140:	f00e f94e 	bl	801e3e0 <atanf>
 8010144:	ee10 3a10 	vmov	r3, s0
 8010148:	4618      	mov	r0, r3
 801014a:	f7f0 f9fd 	bl	8000548 <__aeabi_f2d>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	6879      	ldr	r1, [r7, #4]
 8010154:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	015b      	lsls	r3, r3, #5
 8010162:	441a      	add	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4615      	mov	r5, r2
 8010168:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 801016c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801016e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010174:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	3301      	adds	r3, #1
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010184:	697a      	ldr	r2, [r7, #20]
 8010186:	429a      	cmp	r2, r3
 8010188:	db9d      	blt.n	80100c6 <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 801018a:	2300      	movs	r3, #0
 801018c:	613b      	str	r3, [r7, #16]
 801018e:	e031      	b.n	80101f4 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	015b      	lsls	r3, r3, #5
 80101a0:	4413      	add	r3, r2
 80101a2:	4619      	mov	r1, r3
 80101a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101a8:	2204      	movs	r2, #4
 80101aa:	f005 fe8a 	bl	8015ec2 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	015b      	lsls	r3, r3, #5
 80101be:	4413      	add	r3, r2
 80101c0:	f103 0108 	add.w	r1, r3, #8
 80101c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101c8:	2204      	movs	r2, #4
 80101ca:	f005 fe7a 	bl	8015ec2 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	015b      	lsls	r3, r3, #5
 80101de:	4413      	add	r3, r2
 80101e0:	f103 0110 	add.w	r1, r3, #16
 80101e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e8:	2204      	movs	r2, #4
 80101ea:	f005 fe6a 	bl	8015ec2 <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	3301      	adds	r3, #1
 80101f2:	613b      	str	r3, [r7, #16]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	dbc7      	blt.n	8010190 <ObstacleHandler+0x1b4>
				mode = 0;
 8010200:	4b26      	ldr	r3, [pc, #152]	; (801029c <ObstacleHandler+0x2c0>)
 8010202:	2200      	movs	r2, #0
 8010204:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	33c9      	adds	r3, #201	; 0xc9
 8010210:	2205      	movs	r2, #5
 8010212:	4619      	mov	r1, r3
 8010214:	f005 feee 	bl	8015ff4 <HAL_UART_Receive_IT>
				break;
 8010218:	e0e3      	b.n	80103e2 <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8010220:	f003 0304 	and.w	r3, r3, #4
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	d13a      	bne.n	80102a0 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8010230:	2b01      	cmp	r3, #1
 8010232:	f040 80d6 	bne.w	80103e2 <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f203 1399 	addw	r3, r3, #409	; 0x199
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	32ca      	adds	r2, #202	; 0xca
 8010240:	7812      	ldrb	r2, [r2, #0]
 8010242:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8010256:	2b00      	cmp	r3, #0
 8010258:	f040 80c3 	bne.w	80103e2 <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801026c:	2201      	movs	r2, #1
 801026e:	f005 fe28 	bl	8015ec2 <HAL_UART_Transmit>
					lidar->start = 1;
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	f892 3298 	ldrb.w	r3, [r2, #664]	; 0x298
 8010278:	f043 0304 	orr.w	r3, r3, #4
 801027c:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
					lidar->response = NO;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	33c9      	adds	r3, #201	; 0xc9
 8010292:	2219      	movs	r2, #25
 8010294:	4619      	mov	r1, r3
 8010296:	f005 fead 	bl	8015ff4 <HAL_UART_Receive_IT>
}
 801029a:	e0a2      	b.n	80103e2 <ObstacleHandler+0x406>
 801029c:	20001104 	.word	0x20001104
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f203 1399 	addw	r3, r3, #409	; 0x199
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	32c9      	adds	r2, #201	; 0xc9
 80102aa:	7812      	ldrb	r2, [r2, #0]
 80102ac:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d152      	bne.n	801036a <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	33ca      	adds	r3, #202	; 0xca
 80102ce:	2208      	movs	r2, #8
 80102d0:	4619      	mov	r1, r3
 80102d2:	f009 fbcd 	bl	8019a70 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	33d2      	adds	r3, #210	; 0xd2
 80102e0:	2208      	movs	r2, #8
 80102e2:	4619      	mov	r1, r3
 80102e4:	f009 fbc4 	bl	8019a70 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	33da      	adds	r3, #218	; 0xda
 80102f2:	2208      	movs	r2, #8
 80102f4:	4619      	mov	r1, r3
 80102f6:	f009 fbbb 	bl	8019a70 <memcpy>
				float temp = lidar->pole.x;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8010300:	4610      	mov	r0, r2
 8010302:	4619      	mov	r1, r3
 8010304:	f7f0 fc70 	bl	8000be8 <__aeabi_d2f>
 8010308:	4603      	mov	r3, r0
 801030a:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8010312:	4614      	mov	r4, r2
 8010314:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f7f0 f912 	bl	8000548 <__aeabi_f2d>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	6879      	ldr	r1, [r7, #4]
 801032a:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 801033a:	f7f0 fa87 	bl	800084c <__aeabi_ddiv>
 801033e:	4602      	mov	r2, r0
 8010340:	460b      	mov	r3, r1
 8010342:	4610      	mov	r0, r2
 8010344:	4619      	mov	r1, r3
 8010346:	f7f0 fc4f 	bl	8000be8 <__aeabi_d2f>
 801034a:	4603      	mov	r3, r0
 801034c:	ee00 3a10 	vmov	s0, r3
 8010350:	f00e f846 	bl	801e3e0 <atanf>
 8010354:	ee10 3a10 	vmov	r3, s0
 8010358:	4618      	mov	r0, r3
 801035a:	f7f0 f8f5 	bl	8000548 <__aeabi_f2d>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8010368:	e00d      	b.n	8010386 <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	f892 3298 	ldrb.w	r3, [r2, #664]	; 0x298
 8010370:	f043 0302 	orr.w	r3, r3, #2
 8010374:	f882 3298 	strb.w	r3, [r2, #664]	; 0x298
				LidarSendIns(lidar->inst, lidar);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	4618      	mov	r0, r3
 8010382:	f7ff fded 	bl	800ff60 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f203 1199 	addw	r1, r3, #409	; 0x199
 8010392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010396:	2201      	movs	r2, #1
 8010398:	f005 fd93 	bl	8015ec2 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103ac:	2208      	movs	r2, #8
 80103ae:	f005 fd88 	bl	8015ec2 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80103be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103c2:	2208      	movs	r2, #8
 80103c4:	f005 fd7d 	bl	8015ec2 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80103d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103d8:	2208      	movs	r2, #8
 80103da:	f005 fd72 	bl	8015ec2 <HAL_UART_Transmit>
}
 80103de:	e000      	b.n	80103e2 <ObstacleHandler+0x406>
				break;
 80103e0:	bf00      	nop
}
 80103e2:	bf00      	nop
 80103e4:	3718      	adds	r7, #24
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bdb0      	pop	{r4, r5, r7, pc}
 80103ea:	bf00      	nop

080103ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80103ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80103f0:	480d      	ldr	r0, [pc, #52]	; (8010428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80103f2:	490e      	ldr	r1, [pc, #56]	; (801042c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80103f4:	4a0e      	ldr	r2, [pc, #56]	; (8010430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80103f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80103f8:	e002      	b.n	8010400 <LoopCopyDataInit>

080103fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80103fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80103fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80103fe:	3304      	adds	r3, #4

08010400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010404:	d3f9      	bcc.n	80103fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010406:	4a0b      	ldr	r2, [pc, #44]	; (8010434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010408:	4c0b      	ldr	r4, [pc, #44]	; (8010438 <LoopFillZerobss+0x26>)
  movs r3, #0
 801040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801040c:	e001      	b.n	8010412 <LoopFillZerobss>

0801040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010410:	3204      	adds	r2, #4

08010412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010414:	d3fb      	bcc.n	801040e <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010416:	f7fc fe1f 	bl	800d058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801041a:	f009 fafd 	bl	8019a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801041e:	f7f3 fd99 	bl	8003f54 <main>
  bx  lr    
 8010422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801042c:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8010430:	08020b94 	.word	0x08020b94
  ldr r2, =_sbss
 8010434:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8010438:	2000a708 	.word	0x2000a708

0801043c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801043c:	e7fe      	b.n	801043c <ADC_IRQHandler>
	...

08010440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010444:	4b0e      	ldr	r3, [pc, #56]	; (8010480 <HAL_Init+0x40>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a0d      	ldr	r2, [pc, #52]	; (8010480 <HAL_Init+0x40>)
 801044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801044e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010450:	4b0b      	ldr	r3, [pc, #44]	; (8010480 <HAL_Init+0x40>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a0a      	ldr	r2, [pc, #40]	; (8010480 <HAL_Init+0x40>)
 8010456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801045a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801045c:	4b08      	ldr	r3, [pc, #32]	; (8010480 <HAL_Init+0x40>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a07      	ldr	r2, [pc, #28]	; (8010480 <HAL_Init+0x40>)
 8010462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010468:	2003      	movs	r0, #3
 801046a:	f000 ffa8 	bl	80113be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801046e:	2000      	movs	r0, #0
 8010470:	f7fc fcd2 	bl	800ce18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010474:	f7f1 fd40 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	40023c00 	.word	0x40023c00

08010484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010488:	4b06      	ldr	r3, [pc, #24]	; (80104a4 <HAL_IncTick+0x20>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	4b06      	ldr	r3, [pc, #24]	; (80104a8 <HAL_IncTick+0x24>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4413      	add	r3, r2
 8010494:	4a04      	ldr	r2, [pc, #16]	; (80104a8 <HAL_IncTick+0x24>)
 8010496:	6013      	str	r3, [r2, #0]
}
 8010498:	bf00      	nop
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	200000bc 	.word	0x200000bc
 80104a8:	2000a6b4 	.word	0x2000a6b4

080104ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80104ac:	b480      	push	{r7}
 80104ae:	af00      	add	r7, sp, #0
  return uwTick;
 80104b0:	4b03      	ldr	r3, [pc, #12]	; (80104c0 <HAL_GetTick+0x14>)
 80104b2:	681b      	ldr	r3, [r3, #0]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	2000a6b4 	.word	0x2000a6b4

080104c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d101      	bne.n	80104d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80104d2:	2301      	movs	r3, #1
 80104d4:	e0ed      	b.n	80106b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d102      	bne.n	80104e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7f1 fd34 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f022 0202 	bic.w	r2, r2, #2
 80104f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80104f8:	f7ff ffd8 	bl	80104ac <HAL_GetTick>
 80104fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80104fe:	e012      	b.n	8010526 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010500:	f7ff ffd4 	bl	80104ac <HAL_GetTick>
 8010504:	4602      	mov	r2, r0
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	2b0a      	cmp	r3, #10
 801050c:	d90b      	bls.n	8010526 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010512:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2205      	movs	r2, #5
 801051e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010522:	2301      	movs	r3, #1
 8010524:	e0c5      	b.n	80106b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	f003 0302 	and.w	r3, r3, #2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e5      	bne.n	8010500 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f042 0201 	orr.w	r2, r2, #1
 8010542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010544:	f7ff ffb2 	bl	80104ac <HAL_GetTick>
 8010548:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801054a:	e012      	b.n	8010572 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801054c:	f7ff ffae 	bl	80104ac <HAL_GetTick>
 8010550:	4602      	mov	r2, r0
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	2b0a      	cmp	r3, #10
 8010558:	d90b      	bls.n	8010572 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2205      	movs	r2, #5
 801056a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801056e:	2301      	movs	r3, #1
 8010570:	e09f      	b.n	80106b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	f003 0301 	and.w	r3, r3, #1
 801057c:	2b00      	cmp	r3, #0
 801057e:	d0e5      	beq.n	801054c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	7e1b      	ldrb	r3, [r3, #24]
 8010584:	2b01      	cmp	r3, #1
 8010586:	d108      	bne.n	801059a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	e007      	b.n	80105aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80105a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	7e5b      	ldrb	r3, [r3, #25]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d108      	bne.n	80105c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105c0:	601a      	str	r2, [r3, #0]
 80105c2:	e007      	b.n	80105d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	7e9b      	ldrb	r3, [r3, #26]
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d108      	bne.n	80105ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f042 0220 	orr.w	r2, r2, #32
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	e007      	b.n	80105fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f022 0220 	bic.w	r2, r2, #32
 80105fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	7edb      	ldrb	r3, [r3, #27]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d108      	bne.n	8010618 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 0210 	bic.w	r2, r2, #16
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	e007      	b.n	8010628 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f042 0210 	orr.w	r2, r2, #16
 8010626:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7f1b      	ldrb	r3, [r3, #28]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d108      	bne.n	8010642 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f042 0208 	orr.w	r2, r2, #8
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	e007      	b.n	8010652 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f022 0208 	bic.w	r2, r2, #8
 8010650:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7f5b      	ldrb	r3, [r3, #29]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d108      	bne.n	801066c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f042 0204 	orr.w	r2, r2, #4
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	e007      	b.n	801067c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f022 0204 	bic.w	r2, r2, #4
 801067a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	689a      	ldr	r2, [r3, #8]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	431a      	orrs	r2, r3
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	691b      	ldr	r3, [r3, #16]
 801068a:	431a      	orrs	r2, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	ea42 0103 	orr.w	r1, r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	1e5a      	subs	r2, r3, #1
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	430a      	orrs	r2, r1
 80106a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2201      	movs	r2, #1
 80106ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80106bc:	b480      	push	{r7}
 80106be:	b087      	sub	sp, #28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80106d4:	7cfb      	ldrb	r3, [r7, #19]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d003      	beq.n	80106e2 <HAL_CAN_ConfigFilter+0x26>
 80106da:	7cfb      	ldrb	r3, [r7, #19]
 80106dc:	2b02      	cmp	r3, #2
 80106de:	f040 80be 	bne.w	801085e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80106e2:	4b65      	ldr	r3, [pc, #404]	; (8010878 <HAL_CAN_ConfigFilter+0x1bc>)
 80106e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106ec:	f043 0201 	orr.w	r2, r3, #1
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010710:	021b      	lsls	r3, r3, #8
 8010712:	431a      	orrs	r2, r3
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	f003 031f 	and.w	r3, r3, #31
 8010722:	2201      	movs	r2, #1
 8010724:	fa02 f303 	lsl.w	r3, r2, r3
 8010728:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	43db      	mvns	r3, r3
 8010734:	401a      	ands	r2, r3
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	69db      	ldr	r3, [r3, #28]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d123      	bne.n	801078c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	43db      	mvns	r3, r3
 801074e:	401a      	ands	r2, r3
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010762:	683a      	ldr	r2, [r7, #0]
 8010764:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010766:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	3248      	adds	r2, #72	; 0x48
 801076c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010780:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010782:	6979      	ldr	r1, [r7, #20]
 8010784:	3348      	adds	r3, #72	; 0x48
 8010786:	00db      	lsls	r3, r3, #3
 8010788:	440b      	add	r3, r1
 801078a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	69db      	ldr	r3, [r3, #28]
 8010790:	2b01      	cmp	r3, #1
 8010792:	d122      	bne.n	80107da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	431a      	orrs	r2, r3
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80107b0:	683a      	ldr	r2, [r7, #0]
 80107b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80107b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	3248      	adds	r2, #72	; 0x48
 80107ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80107ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80107d0:	6979      	ldr	r1, [r7, #20]
 80107d2:	3348      	adds	r3, #72	; 0x48
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	440b      	add	r3, r1
 80107d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	43db      	mvns	r3, r3
 80107ec:	401a      	ands	r2, r3
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80107f4:	e007      	b.n	8010806 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	431a      	orrs	r2, r3
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	691b      	ldr	r3, [r3, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d109      	bne.n	8010822 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	43db      	mvns	r3, r3
 8010818:	401a      	ands	r2, r3
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010820:	e007      	b.n	8010832 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	431a      	orrs	r2, r3
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d107      	bne.n	801084a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	431a      	orrs	r2, r3
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010850:	f023 0201 	bic.w	r2, r3, #1
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 801085a:	2300      	movs	r3, #0
 801085c:	e006      	b.n	801086c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010862:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
  }
}
 801086c:	4618      	mov	r0, r3
 801086e:	371c      	adds	r7, #28
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	40006400 	.word	0x40006400

0801087c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 3020 	ldrb.w	r3, [r3, #32]
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b01      	cmp	r3, #1
 801088e:	d12e      	bne.n	80108ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2202      	movs	r2, #2
 8010894:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f022 0201 	bic.w	r2, r2, #1
 80108a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80108a8:	f7ff fe00 	bl	80104ac <HAL_GetTick>
 80108ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80108ae:	e012      	b.n	80108d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80108b0:	f7ff fdfc 	bl	80104ac <HAL_GetTick>
 80108b4:	4602      	mov	r2, r0
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	2b0a      	cmp	r3, #10
 80108bc:	d90b      	bls.n	80108d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2205      	movs	r2, #5
 80108ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e012      	b.n	80108fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e5      	bne.n	80108b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e006      	b.n	80108fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80108fa:	2301      	movs	r3, #1
  }
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8010904:	b480      	push	{r7}
 8010906:	b089      	sub	sp, #36	; 0x24
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010918:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8010922:	7ffb      	ldrb	r3, [r7, #31]
 8010924:	2b01      	cmp	r3, #1
 8010926:	d003      	beq.n	8010930 <HAL_CAN_AddTxMessage+0x2c>
 8010928:	7ffb      	ldrb	r3, [r7, #31]
 801092a:	2b02      	cmp	r3, #2
 801092c:	f040 80b8 	bne.w	8010aa0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010936:	2b00      	cmp	r3, #0
 8010938:	d10a      	bne.n	8010950 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8010940:	2b00      	cmp	r3, #0
 8010942:	d105      	bne.n	8010950 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801094a:	2b00      	cmp	r3, #0
 801094c:	f000 80a0 	beq.w	8010a90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	0e1b      	lsrs	r3, r3, #24
 8010954:	f003 0303 	and.w	r3, r3, #3
 8010958:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2b02      	cmp	r3, #2
 801095e:	d907      	bls.n	8010970 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801096c:	2301      	movs	r3, #1
 801096e:	e09e      	b.n	8010aae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8010970:	2201      	movs	r2, #1
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	409a      	lsls	r2, r3
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d10d      	bne.n	801099e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801098c:	68f9      	ldr	r1, [r7, #12]
 801098e:	6809      	ldr	r1, [r1, #0]
 8010990:	431a      	orrs	r2, r3
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	3318      	adds	r3, #24
 8010996:	011b      	lsls	r3, r3, #4
 8010998:	440b      	add	r3, r1
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	e00f      	b.n	80109be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80109a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80109b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	3318      	adds	r3, #24
 80109b8:	011b      	lsls	r3, r3, #4
 80109ba:	440b      	add	r3, r1
 80109bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6819      	ldr	r1, [r3, #0]
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	691a      	ldr	r2, [r3, #16]
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	3318      	adds	r3, #24
 80109ca:	011b      	lsls	r3, r3, #4
 80109cc:	440b      	add	r3, r1
 80109ce:	3304      	adds	r3, #4
 80109d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	7d1b      	ldrb	r3, [r3, #20]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d111      	bne.n	80109fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	3318      	adds	r3, #24
 80109e2:	011b      	lsls	r3, r3, #4
 80109e4:	4413      	add	r3, r2
 80109e6:	3304      	adds	r3, #4
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	6811      	ldr	r1, [r2, #0]
 80109ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	3318      	adds	r3, #24
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	440b      	add	r3, r1
 80109fa:	3304      	adds	r3, #4
 80109fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	3307      	adds	r3, #7
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	061a      	lsls	r2, r3, #24
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	3306      	adds	r3, #6
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	041b      	lsls	r3, r3, #16
 8010a0e:	431a      	orrs	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	3305      	adds	r3, #5
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	021b      	lsls	r3, r3, #8
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	3204      	adds	r2, #4
 8010a1e:	7812      	ldrb	r2, [r2, #0]
 8010a20:	4610      	mov	r0, r2
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	6811      	ldr	r1, [r2, #0]
 8010a26:	ea43 0200 	orr.w	r2, r3, r0
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	440b      	add	r3, r1
 8010a30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8010a34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	3303      	adds	r3, #3
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	061a      	lsls	r2, r3, #24
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	3302      	adds	r3, #2
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	041b      	lsls	r3, r3, #16
 8010a46:	431a      	orrs	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	021b      	lsls	r3, r3, #8
 8010a50:	4313      	orrs	r3, r2
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	7812      	ldrb	r2, [r2, #0]
 8010a56:	4610      	mov	r0, r2
 8010a58:	68fa      	ldr	r2, [r7, #12]
 8010a5a:	6811      	ldr	r1, [r2, #0]
 8010a5c:	ea43 0200 	orr.w	r2, r3, r0
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	011b      	lsls	r3, r3, #4
 8010a64:	440b      	add	r3, r1
 8010a66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8010a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	3318      	adds	r3, #24
 8010a74:	011b      	lsls	r3, r3, #4
 8010a76:	4413      	add	r3, r2
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	6811      	ldr	r1, [r2, #0]
 8010a7e:	f043 0201 	orr.w	r2, r3, #1
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	3318      	adds	r3, #24
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	440b      	add	r3, r1
 8010a8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	e00e      	b.n	8010aae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e006      	b.n	8010aae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010aac:	2301      	movs	r3, #1
  }
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3724      	adds	r7, #36	; 0x24
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b085      	sub	sp, #20
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010acc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8010ace:	7afb      	ldrb	r3, [r7, #11]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d002      	beq.n	8010ada <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8010ad4:	7afb      	ldrb	r3, [r7, #11]
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d11d      	bne.n	8010b16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	3301      	adds	r3, #1
 8010aec:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3301      	adds	r3, #1
 8010b00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	3301      	adds	r3, #1
 8010b14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8010b16:	68fb      	ldr	r3, [r7, #12]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3714      	adds	r7, #20
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8010b24:	b480      	push	{r7}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8010b3a:	7dfb      	ldrb	r3, [r7, #23]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d003      	beq.n	8010b48 <HAL_CAN_GetRxMessage+0x24>
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	f040 80f3 	bne.w	8010d2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d10e      	bne.n	8010b6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	f003 0303 	and.w	r3, r3, #3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d116      	bne.n	8010b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e0e7      	b.n	8010d3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	f003 0303 	and.w	r3, r3, #3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d107      	bne.n	8010b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	e0d8      	b.n	8010d3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	331b      	adds	r3, #27
 8010b92:	011b      	lsls	r3, r3, #4
 8010b94:	4413      	add	r3, r2
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 0204 	and.w	r2, r3, #4
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d10c      	bne.n	8010bc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	331b      	adds	r3, #27
 8010bb0:	011b      	lsls	r3, r3, #4
 8010bb2:	4413      	add	r3, r2
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	0d5b      	lsrs	r3, r3, #21
 8010bb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	601a      	str	r2, [r3, #0]
 8010bc0:	e00b      	b.n	8010bda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	331b      	adds	r3, #27
 8010bca:	011b      	lsls	r3, r3, #4
 8010bcc:	4413      	add	r3, r2
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	08db      	lsrs	r3, r3, #3
 8010bd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	331b      	adds	r3, #27
 8010be2:	011b      	lsls	r3, r3, #4
 8010be4:	4413      	add	r3, r2
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f003 0202 	and.w	r2, r3, #2
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	331b      	adds	r3, #27
 8010bf8:	011b      	lsls	r3, r3, #4
 8010bfa:	4413      	add	r3, r2
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f003 020f 	and.w	r2, r3, #15
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	331b      	adds	r3, #27
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	4413      	add	r3, r2
 8010c14:	3304      	adds	r3, #4
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	0a1b      	lsrs	r3, r3, #8
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	331b      	adds	r3, #27
 8010c28:	011b      	lsls	r3, r3, #4
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	0c1b      	lsrs	r3, r3, #16
 8010c32:	b29a      	uxth	r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	011b      	lsls	r3, r3, #4
 8010c40:	4413      	add	r3, r2
 8010c42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	4413      	add	r3, r2
 8010c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	0a1a      	lsrs	r2, r3, #8
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	3301      	adds	r3, #1
 8010c64:	b2d2      	uxtb	r2, r2
 8010c66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	011b      	lsls	r3, r3, #4
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	0c1a      	lsrs	r2, r3, #16
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	3302      	adds	r3, #2
 8010c7e:	b2d2      	uxtb	r2, r2
 8010c80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	011b      	lsls	r3, r3, #4
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	0e1a      	lsrs	r2, r3, #24
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	3303      	adds	r3, #3
 8010c98:	b2d2      	uxtb	r2, r2
 8010c9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	011b      	lsls	r3, r3, #4
 8010ca4:	4413      	add	r3, r2
 8010ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	3304      	adds	r3, #4
 8010cb0:	b2d2      	uxtb	r2, r2
 8010cb2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	011b      	lsls	r3, r3, #4
 8010cbc:	4413      	add	r3, r2
 8010cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	0a1a      	lsrs	r2, r3, #8
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	3305      	adds	r3, #5
 8010cca:	b2d2      	uxtb	r2, r2
 8010ccc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	011b      	lsls	r3, r3, #4
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	0c1a      	lsrs	r2, r3, #16
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	3306      	adds	r3, #6
 8010ce4:	b2d2      	uxtb	r2, r2
 8010ce6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	011b      	lsls	r3, r3, #4
 8010cf0:	4413      	add	r3, r2
 8010cf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	0e1a      	lsrs	r2, r3, #24
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	3307      	adds	r3, #7
 8010cfe:	b2d2      	uxtb	r2, r2
 8010d00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d108      	bne.n	8010d1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	68da      	ldr	r2, [r3, #12]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f042 0220 	orr.w	r2, r2, #32
 8010d16:	60da      	str	r2, [r3, #12]
 8010d18:	e007      	b.n	8010d2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	691a      	ldr	r2, [r3, #16]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f042 0220 	orr.w	r2, r2, #32
 8010d28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	e006      	b.n	8010d3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010d3a:	2301      	movs	r3, #1
  }
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	371c      	adds	r7, #28
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8010d5a:	7bfb      	ldrb	r3, [r7, #15]
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d002      	beq.n	8010d66 <HAL_CAN_ActivateNotification+0x1e>
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	2b02      	cmp	r3, #2
 8010d64:	d109      	bne.n	8010d7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	6959      	ldr	r1, [r3, #20]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	683a      	ldr	r2, [r7, #0]
 8010d72:	430a      	orrs	r2, r1
 8010d74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e006      	b.n	8010d88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010d86:	2301      	movs	r3, #1
  }
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3714      	adds	r7, #20
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08a      	sub	sp, #40	; 0x28
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	691b      	ldr	r3, [r3, #16]
 8010dc6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8010dd0:	6a3b      	ldr	r3, [r7, #32]
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d07c      	beq.n	8010ed4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d023      	beq.n	8010e2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2201      	movs	r2, #1
 8010dea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d003      	beq.n	8010dfe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 f983 	bl	8011102 <HAL_CAN_TxMailbox0CompleteCallback>
 8010dfc:	e016      	b.n	8010e2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	f003 0304 	and.w	r3, r3, #4
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8010e10:	e00c      	b.n	8010e2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	f003 0308 	and.w	r3, r3, #8
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d004      	beq.n	8010e26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010e22:	627b      	str	r3, [r7, #36]	; 0x24
 8010e24:	e002      	b.n	8010e2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 f989 	bl	801113e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d024      	beq.n	8010e80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d003      	beq.n	8010e52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 f963 	bl	8011116 <HAL_CAN_TxMailbox1CompleteCallback>
 8010e50:	e016      	b.n	8010e80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d004      	beq.n	8010e66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010e62:	627b      	str	r3, [r7, #36]	; 0x24
 8010e64:	e00c      	b.n	8010e80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e76:	627b      	str	r3, [r7, #36]	; 0x24
 8010e78:	e002      	b.n	8010e80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 f969 	bl	8011152 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d024      	beq.n	8010ed4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010e92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d003      	beq.n	8010ea6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 f943 	bl	801112a <HAL_CAN_TxMailbox2CompleteCallback>
 8010ea4:	e016      	b.n	8010ed4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8010eb8:	e00c      	b.n	8010ed4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010eca:	627b      	str	r3, [r7, #36]	; 0x24
 8010ecc:	e002      	b.n	8010ed4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 f949 	bl	8011166 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8010ed4:	6a3b      	ldr	r3, [r7, #32]
 8010ed6:	f003 0308 	and.w	r3, r3, #8
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00c      	beq.n	8010ef8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	f003 0310 	and.w	r3, r3, #16
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d007      	beq.n	8010ef8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2210      	movs	r2, #16
 8010ef6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8010ef8:	6a3b      	ldr	r3, [r7, #32]
 8010efa:	f003 0304 	and.w	r3, r3, #4
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00b      	beq.n	8010f1a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	f003 0308 	and.w	r3, r3, #8
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d006      	beq.n	8010f1a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2208      	movs	r2, #8
 8010f12:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f930 	bl	801117a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	f003 0302 	and.w	r3, r3, #2
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d009      	beq.n	8010f38 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68db      	ldr	r3, [r3, #12]
 8010f2a:	f003 0303 	and.w	r3, r3, #3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7f9 faca 	bl	800a4cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8010f38:	6a3b      	ldr	r3, [r7, #32]
 8010f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00c      	beq.n	8010f5c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	f003 0310 	and.w	r3, r3, #16
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d007      	beq.n	8010f5c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010f52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2210      	movs	r2, #16
 8010f5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	f003 0320 	and.w	r3, r3, #32
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00b      	beq.n	8010f7e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	f003 0308 	and.w	r3, r3, #8
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d006      	beq.n	8010f7e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2208      	movs	r2, #8
 8010f76:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f908 	bl	801118e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8010f7e:	6a3b      	ldr	r3, [r7, #32]
 8010f80:	f003 0310 	and.w	r3, r3, #16
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d009      	beq.n	8010f9c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	f003 0303 	and.w	r3, r3, #3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7f9 fc28 	bl	800a7ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8010f9c:	6a3b      	ldr	r3, [r7, #32]
 8010f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00b      	beq.n	8010fbe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	f003 0310 	and.w	r3, r3, #16
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d006      	beq.n	8010fbe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2210      	movs	r2, #16
 8010fb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 f8f2 	bl	80111a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00b      	beq.n	8010fe0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	f003 0308 	and.w	r3, r3, #8
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d006      	beq.n	8010fe0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2208      	movs	r2, #8
 8010fd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 f8eb 	bl	80111b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d07b      	beq.n	80110e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	f003 0304 	and.w	r3, r3, #4
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d072      	beq.n	80110da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d008      	beq.n	8011010 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011004:	2b00      	cmp	r3, #0
 8011006:	d003      	beq.n	8011010 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	f043 0301 	orr.w	r3, r3, #1
 801100e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011016:	2b00      	cmp	r3, #0
 8011018:	d008      	beq.n	801102c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	f043 0302 	orr.w	r3, r3, #2
 801102a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011032:	2b00      	cmp	r3, #0
 8011034:	d008      	beq.n	8011048 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801103c:	2b00      	cmp	r3, #0
 801103e:	d003      	beq.n	8011048 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	f043 0304 	orr.w	r3, r3, #4
 8011046:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011048:	6a3b      	ldr	r3, [r7, #32]
 801104a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801104e:	2b00      	cmp	r3, #0
 8011050:	d043      	beq.n	80110da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8011058:	2b00      	cmp	r3, #0
 801105a:	d03e      	beq.n	80110da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011062:	2b60      	cmp	r3, #96	; 0x60
 8011064:	d02b      	beq.n	80110be <HAL_CAN_IRQHandler+0x32a>
 8011066:	2b60      	cmp	r3, #96	; 0x60
 8011068:	d82e      	bhi.n	80110c8 <HAL_CAN_IRQHandler+0x334>
 801106a:	2b50      	cmp	r3, #80	; 0x50
 801106c:	d022      	beq.n	80110b4 <HAL_CAN_IRQHandler+0x320>
 801106e:	2b50      	cmp	r3, #80	; 0x50
 8011070:	d82a      	bhi.n	80110c8 <HAL_CAN_IRQHandler+0x334>
 8011072:	2b40      	cmp	r3, #64	; 0x40
 8011074:	d019      	beq.n	80110aa <HAL_CAN_IRQHandler+0x316>
 8011076:	2b40      	cmp	r3, #64	; 0x40
 8011078:	d826      	bhi.n	80110c8 <HAL_CAN_IRQHandler+0x334>
 801107a:	2b30      	cmp	r3, #48	; 0x30
 801107c:	d010      	beq.n	80110a0 <HAL_CAN_IRQHandler+0x30c>
 801107e:	2b30      	cmp	r3, #48	; 0x30
 8011080:	d822      	bhi.n	80110c8 <HAL_CAN_IRQHandler+0x334>
 8011082:	2b10      	cmp	r3, #16
 8011084:	d002      	beq.n	801108c <HAL_CAN_IRQHandler+0x2f8>
 8011086:	2b20      	cmp	r3, #32
 8011088:	d005      	beq.n	8011096 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801108a:	e01d      	b.n	80110c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	f043 0308 	orr.w	r3, r3, #8
 8011092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8011094:	e019      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8011096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011098:	f043 0310 	orr.w	r3, r3, #16
 801109c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801109e:	e014      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	f043 0320 	orr.w	r3, r3, #32
 80110a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80110a8:	e00f      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80110aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80110b2:	e00a      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80110b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80110bc:	e005      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80110be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80110c6:	e000      	b.n	80110ca <HAL_CAN_IRQHandler+0x336>
            break;
 80110c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	699a      	ldr	r2, [r3, #24]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80110d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2204      	movs	r2, #4
 80110e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d008      	beq.n	80110fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	431a      	orrs	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 f868 	bl	80111ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80110fa:	bf00      	nop
 80110fc:	3728      	adds	r7, #40	; 0x28
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011102:	b480      	push	{r7}
 8011104:	b083      	sub	sp, #12
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801110a:	bf00      	nop
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011116:	b480      	push	{r7}
 8011118:	b083      	sub	sp, #12
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801111e:	bf00      	nop
 8011120:	370c      	adds	r7, #12
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr

0801112a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801112a:	b480      	push	{r7}
 801112c:	b083      	sub	sp, #12
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011132:	bf00      	nop
 8011134:	370c      	adds	r7, #12
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801113e:	b480      	push	{r7}
 8011140:	b083      	sub	sp, #12
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011146:	bf00      	nop
 8011148:	370c      	adds	r7, #12
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011152:	b480      	push	{r7}
 8011154:	b083      	sub	sp, #12
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801115a:	bf00      	nop
 801115c:	370c      	adds	r7, #12
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011166:	b480      	push	{r7}
 8011168:	b083      	sub	sp, #12
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801116e:	bf00      	nop
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801117a:	b480      	push	{r7}
 801117c:	b083      	sub	sp, #12
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011182:	bf00      	nop
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801118e:	b480      	push	{r7}
 8011190:	b083      	sub	sp, #12
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8011196:	bf00      	nop
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80111a2:	b480      	push	{r7}
 80111a4:	b083      	sub	sp, #12
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80111aa:	bf00      	nop
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80111b6:	b480      	push	{r7}
 80111b8:	b083      	sub	sp, #12
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80111be:	bf00      	nop
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80111d2:	bf00      	nop
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
	...

080111e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f003 0307 	and.w	r3, r3, #7
 80111ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80111f0:	4b0c      	ldr	r3, [pc, #48]	; (8011224 <__NVIC_SetPriorityGrouping+0x44>)
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80111f6:	68ba      	ldr	r2, [r7, #8]
 80111f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80111fc:	4013      	ands	r3, r2
 80111fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011212:	4a04      	ldr	r2, [pc, #16]	; (8011224 <__NVIC_SetPriorityGrouping+0x44>)
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	60d3      	str	r3, [r2, #12]
}
 8011218:	bf00      	nop
 801121a:	3714      	adds	r7, #20
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr
 8011224:	e000ed00 	.word	0xe000ed00

08011228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011228:	b480      	push	{r7}
 801122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801122c:	4b04      	ldr	r3, [pc, #16]	; (8011240 <__NVIC_GetPriorityGrouping+0x18>)
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	0a1b      	lsrs	r3, r3, #8
 8011232:	f003 0307 	and.w	r3, r3, #7
}
 8011236:	4618      	mov	r0, r3
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	e000ed00 	.word	0xe000ed00

08011244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	4603      	mov	r3, r0
 801124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011252:	2b00      	cmp	r3, #0
 8011254:	db0b      	blt.n	801126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	f003 021f 	and.w	r2, r3, #31
 801125c:	4907      	ldr	r1, [pc, #28]	; (801127c <__NVIC_EnableIRQ+0x38>)
 801125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011262:	095b      	lsrs	r3, r3, #5
 8011264:	2001      	movs	r0, #1
 8011266:	fa00 f202 	lsl.w	r2, r0, r2
 801126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801126e:	bf00      	nop
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	e000e100 	.word	0xe000e100

08011280 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801128e:	2b00      	cmp	r3, #0
 8011290:	db12      	blt.n	80112b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	f003 021f 	and.w	r2, r3, #31
 8011298:	490a      	ldr	r1, [pc, #40]	; (80112c4 <__NVIC_DisableIRQ+0x44>)
 801129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801129e:	095b      	lsrs	r3, r3, #5
 80112a0:	2001      	movs	r0, #1
 80112a2:	fa00 f202 	lsl.w	r2, r0, r2
 80112a6:	3320      	adds	r3, #32
 80112a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80112ac:	f3bf 8f4f 	dsb	sy
}
 80112b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112b2:	f3bf 8f6f 	isb	sy
}
 80112b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	e000e100 	.word	0xe000e100

080112c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	db0c      	blt.n	80112f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112da:	79fb      	ldrb	r3, [r7, #7]
 80112dc:	f003 021f 	and.w	r2, r3, #31
 80112e0:	4907      	ldr	r1, [pc, #28]	; (8011300 <__NVIC_ClearPendingIRQ+0x38>)
 80112e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112e6:	095b      	lsrs	r3, r3, #5
 80112e8:	2001      	movs	r0, #1
 80112ea:	fa00 f202 	lsl.w	r2, r0, r2
 80112ee:	3360      	adds	r3, #96	; 0x60
 80112f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80112f4:	bf00      	nop
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	e000e100 	.word	0xe000e100

08011304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	6039      	str	r1, [r7, #0]
 801130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011314:	2b00      	cmp	r3, #0
 8011316:	db0a      	blt.n	801132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	b2da      	uxtb	r2, r3
 801131c:	490c      	ldr	r1, [pc, #48]	; (8011350 <__NVIC_SetPriority+0x4c>)
 801131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011322:	0112      	lsls	r2, r2, #4
 8011324:	b2d2      	uxtb	r2, r2
 8011326:	440b      	add	r3, r1
 8011328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801132c:	e00a      	b.n	8011344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	b2da      	uxtb	r2, r3
 8011332:	4908      	ldr	r1, [pc, #32]	; (8011354 <__NVIC_SetPriority+0x50>)
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	f003 030f 	and.w	r3, r3, #15
 801133a:	3b04      	subs	r3, #4
 801133c:	0112      	lsls	r2, r2, #4
 801133e:	b2d2      	uxtb	r2, r2
 8011340:	440b      	add	r3, r1
 8011342:	761a      	strb	r2, [r3, #24]
}
 8011344:	bf00      	nop
 8011346:	370c      	adds	r7, #12
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr
 8011350:	e000e100 	.word	0xe000e100
 8011354:	e000ed00 	.word	0xe000ed00

08011358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011358:	b480      	push	{r7}
 801135a:	b089      	sub	sp, #36	; 0x24
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f003 0307 	and.w	r3, r3, #7
 801136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	f1c3 0307 	rsb	r3, r3, #7
 8011372:	2b04      	cmp	r3, #4
 8011374:	bf28      	it	cs
 8011376:	2304      	movcs	r3, #4
 8011378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	3304      	adds	r3, #4
 801137e:	2b06      	cmp	r3, #6
 8011380:	d902      	bls.n	8011388 <NVIC_EncodePriority+0x30>
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	3b03      	subs	r3, #3
 8011386:	e000      	b.n	801138a <NVIC_EncodePriority+0x32>
 8011388:	2300      	movs	r3, #0
 801138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801138c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011390:	69bb      	ldr	r3, [r7, #24]
 8011392:	fa02 f303 	lsl.w	r3, r2, r3
 8011396:	43da      	mvns	r2, r3
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	401a      	ands	r2, r3
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80113a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	fa01 f303 	lsl.w	r3, r1, r3
 80113aa:	43d9      	mvns	r1, r3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80113b0:	4313      	orrs	r3, r2
         );
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3724      	adds	r7, #36	; 0x24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr

080113be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b082      	sub	sp, #8
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff ff0a 	bl	80111e0 <__NVIC_SetPriorityGrouping>
}
 80113cc:	bf00      	nop
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b086      	sub	sp, #24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	4603      	mov	r3, r0
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80113e2:	2300      	movs	r3, #0
 80113e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80113e6:	f7ff ff1f 	bl	8011228 <__NVIC_GetPriorityGrouping>
 80113ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	68b9      	ldr	r1, [r7, #8]
 80113f0:	6978      	ldr	r0, [r7, #20]
 80113f2:	f7ff ffb1 	bl	8011358 <NVIC_EncodePriority>
 80113f6:	4602      	mov	r2, r0
 80113f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff ff80 	bl	8011304 <__NVIC_SetPriority>
}
 8011404:	bf00      	nop
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	4603      	mov	r3, r0
 8011414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801141a:	4618      	mov	r0, r3
 801141c:	f7ff ff12 	bl	8011244 <__NVIC_EnableIRQ>
}
 8011420:	bf00      	nop
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	4603      	mov	r3, r0
 8011430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff ff22 	bl	8011280 <__NVIC_DisableIRQ>
}
 801143c:	bf00      	nop
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	4603      	mov	r3, r0
 801144c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 801144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011452:	4618      	mov	r0, r3
 8011454:	f7ff ff38 	bl	80112c8 <__NVIC_ClearPendingIRQ>
}
 8011458:	bf00      	nop
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b086      	sub	sp, #24
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011468:	2300      	movs	r3, #0
 801146a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801146c:	f7ff f81e 	bl	80104ac <HAL_GetTick>
 8011470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d101      	bne.n	801147c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011478:	2301      	movs	r3, #1
 801147a:	e099      	b.n	80115b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2202      	movs	r2, #2
 8011488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f022 0201 	bic.w	r2, r2, #1
 801149a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801149c:	e00f      	b.n	80114be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801149e:	f7ff f805 	bl	80104ac <HAL_GetTick>
 80114a2:	4602      	mov	r2, r0
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	2b05      	cmp	r3, #5
 80114aa:	d908      	bls.n	80114be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2220      	movs	r2, #32
 80114b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2203      	movs	r2, #3
 80114b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80114ba:	2303      	movs	r3, #3
 80114bc:	e078      	b.n	80115b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f003 0301 	and.w	r3, r3, #1
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1e8      	bne.n	801149e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80114d4:	697a      	ldr	r2, [r7, #20]
 80114d6:	4b38      	ldr	r3, [pc, #224]	; (80115b8 <HAL_DMA_Init+0x158>)
 80114d8:	4013      	ands	r3, r2
 80114da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685a      	ldr	r2, [r3, #4]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80114ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	691b      	ldr	r3, [r3, #16]
 80114f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80114f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	699b      	ldr	r3, [r3, #24]
 80114fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a1b      	ldr	r3, [r3, #32]
 8011508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801150a:	697a      	ldr	r2, [r7, #20]
 801150c:	4313      	orrs	r3, r2
 801150e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	2b04      	cmp	r3, #4
 8011516:	d107      	bne.n	8011528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011520:	4313      	orrs	r3, r2
 8011522:	697a      	ldr	r2, [r7, #20]
 8011524:	4313      	orrs	r3, r2
 8011526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	697a      	ldr	r2, [r7, #20]
 801152e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	695b      	ldr	r3, [r3, #20]
 8011536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f023 0307 	bic.w	r3, r3, #7
 801153e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	697a      	ldr	r2, [r7, #20]
 8011546:	4313      	orrs	r3, r2
 8011548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154e:	2b04      	cmp	r3, #4
 8011550:	d117      	bne.n	8011582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011556:	697a      	ldr	r2, [r7, #20]
 8011558:	4313      	orrs	r3, r2
 801155a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00e      	beq.n	8011582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 fb09 	bl	8011b7c <DMA_CheckFifoParam>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d008      	beq.n	8011582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2240      	movs	r2, #64	; 0x40
 8011574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801157e:	2301      	movs	r3, #1
 8011580:	e016      	b.n	80115b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	697a      	ldr	r2, [r7, #20]
 8011588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fac0 	bl	8011b10 <DMA_CalcBaseAndBitshift>
 8011590:	4603      	mov	r3, r0
 8011592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011598:	223f      	movs	r2, #63	; 0x3f
 801159a:	409a      	lsls	r2, r3
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2201      	movs	r2, #1
 80115aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3718      	adds	r7, #24
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	f010803f 	.word	0xf010803f

080115bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d101      	bne.n	80115ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
 80115cc:	e050      	b.n	8011670 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	d101      	bne.n	80115de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80115da:	2302      	movs	r3, #2
 80115dc:	e048      	b.n	8011670 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f022 0201 	bic.w	r2, r2, #1
 80115ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2200      	movs	r2, #0
 80115fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2200      	movs	r2, #0
 8011604:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2200      	movs	r2, #0
 801160c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	2200      	movs	r2, #0
 8011614:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2221      	movs	r2, #33	; 0x21
 801161c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 fa76 	bl	8011b10 <DMA_CalcBaseAndBitshift>
 8011624:	4603      	mov	r3, r0
 8011626:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2200      	movs	r2, #0
 801164a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011650:	223f      	movs	r2, #63	; 0x3f
 8011652:	409a      	lsls	r2, r3
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2200      	movs	r2, #0
 801166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011686:	2300      	movs	r3, #0
 8011688:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801168e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011696:	2b01      	cmp	r3, #1
 8011698:	d101      	bne.n	801169e <HAL_DMA_Start_IT+0x26>
 801169a:	2302      	movs	r3, #2
 801169c:	e040      	b.n	8011720 <HAL_DMA_Start_IT+0xa8>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2201      	movs	r2, #1
 80116a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d12f      	bne.n	8011712 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2202      	movs	r2, #2
 80116b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2200      	movs	r2, #0
 80116be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	68b9      	ldr	r1, [r7, #8]
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f000 f9f4 	bl	8011ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80116d0:	223f      	movs	r2, #63	; 0x3f
 80116d2:	409a      	lsls	r2, r3
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f042 0216 	orr.w	r2, r2, #22
 80116e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d007      	beq.n	8011700 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f042 0208 	orr.w	r2, r2, #8
 80116fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f042 0201 	orr.w	r2, r2, #1
 801170e:	601a      	str	r2, [r3, #0]
 8011710:	e005      	b.n	801171e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 801171a:	2302      	movs	r3, #2
 801171c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011736:	b2db      	uxtb	r3, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	d004      	beq.n	8011746 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2280      	movs	r2, #128	; 0x80
 8011740:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8011742:	2301      	movs	r3, #1
 8011744:	e00c      	b.n	8011760 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2205      	movs	r2, #5
 801174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f022 0201 	bic.w	r2, r2, #1
 801175c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801175e:	2300      	movs	r3, #0
}
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011774:	2300      	movs	r3, #0
 8011776:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011778:	4b92      	ldr	r3, [pc, #584]	; (80119c4 <HAL_DMA_IRQHandler+0x258>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4a92      	ldr	r2, [pc, #584]	; (80119c8 <HAL_DMA_IRQHandler+0x25c>)
 801177e:	fba2 2303 	umull	r2, r3, r2, r3
 8011782:	0a9b      	lsrs	r3, r3, #10
 8011784:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801178a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011796:	2208      	movs	r2, #8
 8011798:	409a      	lsls	r2, r3
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	4013      	ands	r3, r2
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d01a      	beq.n	80117d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d013      	beq.n	80117d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f022 0204 	bic.w	r2, r2, #4
 80117be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117c4:	2208      	movs	r2, #8
 80117c6:	409a      	lsls	r2, r3
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117d0:	f043 0201 	orr.w	r2, r3, #1
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117dc:	2201      	movs	r2, #1
 80117de:	409a      	lsls	r2, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4013      	ands	r3, r2
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d012      	beq.n	801180e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	695b      	ldr	r3, [r3, #20]
 80117ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00b      	beq.n	801180e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117fa:	2201      	movs	r2, #1
 80117fc:	409a      	lsls	r2, r3
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011806:	f043 0202 	orr.w	r2, r3, #2
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011812:	2204      	movs	r2, #4
 8011814:	409a      	lsls	r2, r3
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	4013      	ands	r3, r2
 801181a:	2b00      	cmp	r3, #0
 801181c:	d012      	beq.n	8011844 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00b      	beq.n	8011844 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011830:	2204      	movs	r2, #4
 8011832:	409a      	lsls	r2, r3
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801183c:	f043 0204 	orr.w	r2, r3, #4
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011848:	2210      	movs	r2, #16
 801184a:	409a      	lsls	r2, r3
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	4013      	ands	r3, r2
 8011850:	2b00      	cmp	r3, #0
 8011852:	d043      	beq.n	80118dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f003 0308 	and.w	r3, r3, #8
 801185e:	2b00      	cmp	r3, #0
 8011860:	d03c      	beq.n	80118dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011866:	2210      	movs	r2, #16
 8011868:	409a      	lsls	r2, r3
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011878:	2b00      	cmp	r3, #0
 801187a:	d018      	beq.n	80118ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011886:	2b00      	cmp	r3, #0
 8011888:	d108      	bne.n	801189c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188e:	2b00      	cmp	r3, #0
 8011890:	d024      	beq.n	80118dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	4798      	blx	r3
 801189a:	e01f      	b.n	80118dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d01b      	beq.n	80118dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	4798      	blx	r3
 80118ac:	e016      	b.n	80118dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d107      	bne.n	80118cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f022 0208 	bic.w	r2, r2, #8
 80118ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d003      	beq.n	80118dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118e0:	2220      	movs	r2, #32
 80118e2:	409a      	lsls	r2, r3
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	4013      	ands	r3, r2
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f000 808e 	beq.w	8011a0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	f003 0310 	and.w	r3, r3, #16
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 8086 	beq.w	8011a0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011902:	2220      	movs	r2, #32
 8011904:	409a      	lsls	r2, r3
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011910:	b2db      	uxtb	r3, r3
 8011912:	2b05      	cmp	r3, #5
 8011914:	d136      	bne.n	8011984 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f022 0216 	bic.w	r2, r2, #22
 8011924:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	695a      	ldr	r2, [r3, #20]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011934:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193a:	2b00      	cmp	r3, #0
 801193c:	d103      	bne.n	8011946 <HAL_DMA_IRQHandler+0x1da>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011942:	2b00      	cmp	r3, #0
 8011944:	d007      	beq.n	8011956 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f022 0208 	bic.w	r2, r2, #8
 8011954:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801195a:	223f      	movs	r2, #63	; 0x3f
 801195c:	409a      	lsls	r2, r3
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2201      	movs	r2, #1
 801196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011976:	2b00      	cmp	r3, #0
 8011978:	d07d      	beq.n	8011a76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	4798      	blx	r3
        }
        return;
 8011982:	e078      	b.n	8011a76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801198e:	2b00      	cmp	r3, #0
 8011990:	d01c      	beq.n	80119cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801199c:	2b00      	cmp	r3, #0
 801199e:	d108      	bne.n	80119b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d030      	beq.n	8011a0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	4798      	blx	r3
 80119b0:	e02b      	b.n	8011a0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d027      	beq.n	8011a0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	4798      	blx	r3
 80119c2:	e022      	b.n	8011a0a <HAL_DMA_IRQHandler+0x29e>
 80119c4:	20000054 	.word	0x20000054
 80119c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10f      	bne.n	80119fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f022 0210 	bic.w	r2, r2, #16
 80119e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d032      	beq.n	8011a78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a16:	f003 0301 	and.w	r3, r3, #1
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d022      	beq.n	8011a64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2205      	movs	r2, #5
 8011a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f022 0201 	bic.w	r2, r2, #1
 8011a34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	60bb      	str	r3, [r7, #8]
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d307      	bcc.n	8011a52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1f2      	bne.n	8011a36 <HAL_DMA_IRQHandler+0x2ca>
 8011a50:	e000      	b.n	8011a54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8011a52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d005      	beq.n	8011a78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	4798      	blx	r3
 8011a74:	e000      	b.n	8011a78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8011a76:	bf00      	nop
    }
  }
}
 8011a78:	3718      	adds	r7, #24
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop

08011a80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011a8e:	b2db      	uxtb	r3, r3
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
 8011ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	2b40      	cmp	r3, #64	; 0x40
 8011ae0:	d108      	bne.n	8011af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	68ba      	ldr	r2, [r7, #8]
 8011af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8011af2:	e007      	b.n	8011b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	60da      	str	r2, [r3, #12]
}
 8011b04:	bf00      	nop
 8011b06:	3714      	adds	r7, #20
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b085      	sub	sp, #20
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	3b10      	subs	r3, #16
 8011b20:	4a14      	ldr	r2, [pc, #80]	; (8011b74 <DMA_CalcBaseAndBitshift+0x64>)
 8011b22:	fba2 2303 	umull	r2, r3, r2, r3
 8011b26:	091b      	lsrs	r3, r3, #4
 8011b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011b2a:	4a13      	ldr	r2, [pc, #76]	; (8011b78 <DMA_CalcBaseAndBitshift+0x68>)
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	4413      	add	r3, r2
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d909      	bls.n	8011b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	1d1a      	adds	r2, r3, #4
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8011b50:	e007      	b.n	8011b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011b5a:	f023 0303 	bic.w	r3, r3, #3
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3714      	adds	r7, #20
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	aaaaaaab 	.word	0xaaaaaaab
 8011b78:	0802029c 	.word	0x0802029c

08011b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b84:	2300      	movs	r3, #0
 8011b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	699b      	ldr	r3, [r3, #24]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d11f      	bne.n	8011bd6 <DMA_CheckFifoParam+0x5a>
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2b03      	cmp	r3, #3
 8011b9a:	d856      	bhi.n	8011c4a <DMA_CheckFifoParam+0xce>
 8011b9c:	a201      	add	r2, pc, #4	; (adr r2, 8011ba4 <DMA_CheckFifoParam+0x28>)
 8011b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba2:	bf00      	nop
 8011ba4:	08011bb5 	.word	0x08011bb5
 8011ba8:	08011bc7 	.word	0x08011bc7
 8011bac:	08011bb5 	.word	0x08011bb5
 8011bb0:	08011c4b 	.word	0x08011c4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d046      	beq.n	8011c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011bc4:	e043      	b.n	8011c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011bce:	d140      	bne.n	8011c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011bd4:	e03d      	b.n	8011c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	699b      	ldr	r3, [r3, #24]
 8011bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bde:	d121      	bne.n	8011c24 <DMA_CheckFifoParam+0xa8>
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d837      	bhi.n	8011c56 <DMA_CheckFifoParam+0xda>
 8011be6:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <DMA_CheckFifoParam+0x70>)
 8011be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bec:	08011bfd 	.word	0x08011bfd
 8011bf0:	08011c03 	.word	0x08011c03
 8011bf4:	08011bfd 	.word	0x08011bfd
 8011bf8:	08011c15 	.word	0x08011c15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8011c00:	e030      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d025      	beq.n	8011c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011c12:	e022      	b.n	8011c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011c1c:	d11f      	bne.n	8011c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8011c22:	e01c      	b.n	8011c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	d903      	bls.n	8011c32 <DMA_CheckFifoParam+0xb6>
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	d003      	beq.n	8011c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011c30:	e018      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8011c32:	2301      	movs	r3, #1
 8011c34:	73fb      	strb	r3, [r7, #15]
      break;
 8011c36:	e015      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00e      	beq.n	8011c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	73fb      	strb	r3, [r7, #15]
      break;
 8011c48:	e00b      	b.n	8011c62 <DMA_CheckFifoParam+0xe6>
      break;
 8011c4a:	bf00      	nop
 8011c4c:	e00a      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;
 8011c4e:	bf00      	nop
 8011c50:	e008      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;
 8011c52:	bf00      	nop
 8011c54:	e006      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;
 8011c56:	bf00      	nop
 8011c58:	e004      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;
 8011c5a:	bf00      	nop
 8011c5c:	e002      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8011c5e:	bf00      	nop
 8011c60:	e000      	b.n	8011c64 <DMA_CheckFifoParam+0xe8>
      break;
 8011c62:	bf00      	nop
    }
  } 
  
  return status; 
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3714      	adds	r7, #20
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr
 8011c72:	bf00      	nop

08011c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b089      	sub	sp, #36	; 0x24
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011c82:	2300      	movs	r3, #0
 8011c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011c86:	2300      	movs	r3, #0
 8011c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	61fb      	str	r3, [r7, #28]
 8011c8e:	e16b      	b.n	8011f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011c90:	2201      	movs	r2, #1
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	fa02 f303 	lsl.w	r3, r2, r3
 8011c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	4013      	ands	r3, r2
 8011ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011ca4:	693a      	ldr	r2, [r7, #16]
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	f040 815a 	bne.w	8011f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d00b      	beq.n	8011cce <HAL_GPIO_Init+0x5a>
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	2b02      	cmp	r3, #2
 8011cbc:	d007      	beq.n	8011cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011cc2:	2b11      	cmp	r3, #17
 8011cc4:	d003      	beq.n	8011cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	2b12      	cmp	r3, #18
 8011ccc:	d130      	bne.n	8011d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	2203      	movs	r2, #3
 8011cda:	fa02 f303 	lsl.w	r3, r2, r3
 8011cde:	43db      	mvns	r3, r3
 8011ce0:	69ba      	ldr	r2, [r7, #24]
 8011ce2:	4013      	ands	r3, r2
 8011ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	69ba      	ldr	r2, [r7, #24]
 8011cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011d04:	2201      	movs	r2, #1
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	fa02 f303 	lsl.w	r3, r2, r3
 8011d0c:	43db      	mvns	r3, r3
 8011d0e:	69ba      	ldr	r2, [r7, #24]
 8011d10:	4013      	ands	r3, r2
 8011d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	091b      	lsrs	r3, r3, #4
 8011d1a:	f003 0201 	and.w	r2, r3, #1
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	69ba      	ldr	r2, [r7, #24]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	2203      	movs	r2, #3
 8011d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d40:	43db      	mvns	r3, r3
 8011d42:	69ba      	ldr	r2, [r7, #24]
 8011d44:	4013      	ands	r3, r2
 8011d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	689a      	ldr	r2, [r3, #8]
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	005b      	lsls	r3, r3, #1
 8011d50:	fa02 f303 	lsl.w	r3, r2, r3
 8011d54:	69ba      	ldr	r2, [r7, #24]
 8011d56:	4313      	orrs	r3, r2
 8011d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	69ba      	ldr	r2, [r7, #24]
 8011d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d003      	beq.n	8011d70 <HAL_GPIO_Init+0xfc>
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	2b12      	cmp	r3, #18
 8011d6e:	d123      	bne.n	8011db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	08da      	lsrs	r2, r3, #3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	3208      	adds	r2, #8
 8011d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	f003 0307 	and.w	r3, r3, #7
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	220f      	movs	r2, #15
 8011d88:	fa02 f303 	lsl.w	r3, r2, r3
 8011d8c:	43db      	mvns	r3, r3
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	4013      	ands	r3, r2
 8011d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	691a      	ldr	r2, [r3, #16]
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	f003 0307 	and.w	r3, r3, #7
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	fa02 f303 	lsl.w	r3, r2, r3
 8011da4:	69ba      	ldr	r2, [r7, #24]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	08da      	lsrs	r2, r3, #3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	3208      	adds	r2, #8
 8011db2:	69b9      	ldr	r1, [r7, #24]
 8011db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	2203      	movs	r2, #3
 8011dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc8:	43db      	mvns	r3, r3
 8011dca:	69ba      	ldr	r2, [r7, #24]
 8011dcc:	4013      	ands	r3, r2
 8011dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	f003 0203 	and.w	r2, r3, #3
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	005b      	lsls	r3, r3, #1
 8011ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8011de0:	69ba      	ldr	r2, [r7, #24]
 8011de2:	4313      	orrs	r3, r2
 8011de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	69ba      	ldr	r2, [r7, #24]
 8011dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	f000 80b4 	beq.w	8011f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	60fb      	str	r3, [r7, #12]
 8011dfe:	4b60      	ldr	r3, [pc, #384]	; (8011f80 <HAL_GPIO_Init+0x30c>)
 8011e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e02:	4a5f      	ldr	r2, [pc, #380]	; (8011f80 <HAL_GPIO_Init+0x30c>)
 8011e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011e08:	6453      	str	r3, [r2, #68]	; 0x44
 8011e0a:	4b5d      	ldr	r3, [pc, #372]	; (8011f80 <HAL_GPIO_Init+0x30c>)
 8011e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e12:	60fb      	str	r3, [r7, #12]
 8011e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011e16:	4a5b      	ldr	r2, [pc, #364]	; (8011f84 <HAL_GPIO_Init+0x310>)
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	089b      	lsrs	r3, r3, #2
 8011e1c:	3302      	adds	r3, #2
 8011e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	f003 0303 	and.w	r3, r3, #3
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	220f      	movs	r2, #15
 8011e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e32:	43db      	mvns	r3, r3
 8011e34:	69ba      	ldr	r2, [r7, #24]
 8011e36:	4013      	ands	r3, r2
 8011e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a52      	ldr	r2, [pc, #328]	; (8011f88 <HAL_GPIO_Init+0x314>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d02b      	beq.n	8011e9a <HAL_GPIO_Init+0x226>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4a51      	ldr	r2, [pc, #324]	; (8011f8c <HAL_GPIO_Init+0x318>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d025      	beq.n	8011e96 <HAL_GPIO_Init+0x222>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a50      	ldr	r2, [pc, #320]	; (8011f90 <HAL_GPIO_Init+0x31c>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d01f      	beq.n	8011e92 <HAL_GPIO_Init+0x21e>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4a4f      	ldr	r2, [pc, #316]	; (8011f94 <HAL_GPIO_Init+0x320>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d019      	beq.n	8011e8e <HAL_GPIO_Init+0x21a>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4a4e      	ldr	r2, [pc, #312]	; (8011f98 <HAL_GPIO_Init+0x324>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d013      	beq.n	8011e8a <HAL_GPIO_Init+0x216>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4a4d      	ldr	r2, [pc, #308]	; (8011f9c <HAL_GPIO_Init+0x328>)
 8011e66:	4293      	cmp	r3, r2
 8011e68:	d00d      	beq.n	8011e86 <HAL_GPIO_Init+0x212>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4a4c      	ldr	r2, [pc, #304]	; (8011fa0 <HAL_GPIO_Init+0x32c>)
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d007      	beq.n	8011e82 <HAL_GPIO_Init+0x20e>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	4a4b      	ldr	r2, [pc, #300]	; (8011fa4 <HAL_GPIO_Init+0x330>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d101      	bne.n	8011e7e <HAL_GPIO_Init+0x20a>
 8011e7a:	2307      	movs	r3, #7
 8011e7c:	e00e      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e7e:	2308      	movs	r3, #8
 8011e80:	e00c      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e82:	2306      	movs	r3, #6
 8011e84:	e00a      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e86:	2305      	movs	r3, #5
 8011e88:	e008      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e8a:	2304      	movs	r3, #4
 8011e8c:	e006      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e8e:	2303      	movs	r3, #3
 8011e90:	e004      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e92:	2302      	movs	r3, #2
 8011e94:	e002      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e96:	2301      	movs	r3, #1
 8011e98:	e000      	b.n	8011e9c <HAL_GPIO_Init+0x228>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	69fa      	ldr	r2, [r7, #28]
 8011e9e:	f002 0203 	and.w	r2, r2, #3
 8011ea2:	0092      	lsls	r2, r2, #2
 8011ea4:	4093      	lsls	r3, r2
 8011ea6:	69ba      	ldr	r2, [r7, #24]
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011eac:	4935      	ldr	r1, [pc, #212]	; (8011f84 <HAL_GPIO_Init+0x310>)
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	089b      	lsrs	r3, r3, #2
 8011eb2:	3302      	adds	r3, #2
 8011eb4:	69ba      	ldr	r2, [r7, #24]
 8011eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011eba:	4b3b      	ldr	r3, [pc, #236]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	43db      	mvns	r3, r3
 8011ec4:	69ba      	ldr	r2, [r7, #24]
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011ed6:	69ba      	ldr	r2, [r7, #24]
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011ede:	4a32      	ldr	r2, [pc, #200]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011ee0:	69bb      	ldr	r3, [r7, #24]
 8011ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011ee4:	4b30      	ldr	r3, [pc, #192]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	43db      	mvns	r3, r3
 8011eee:	69ba      	ldr	r2, [r7, #24]
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d003      	beq.n	8011f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011f00:	69ba      	ldr	r2, [r7, #24]
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	4313      	orrs	r3, r2
 8011f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011f08:	4a27      	ldr	r2, [pc, #156]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011f0a:	69bb      	ldr	r3, [r7, #24]
 8011f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011f0e:	4b26      	ldr	r3, [pc, #152]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	43db      	mvns	r3, r3
 8011f18:	69ba      	ldr	r2, [r7, #24]
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d003      	beq.n	8011f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011f2a:	69ba      	ldr	r2, [r7, #24]
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011f32:	4a1d      	ldr	r2, [pc, #116]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011f38:	4b1b      	ldr	r3, [pc, #108]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	43db      	mvns	r3, r3
 8011f42:	69ba      	ldr	r2, [r7, #24]
 8011f44:	4013      	ands	r3, r2
 8011f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d003      	beq.n	8011f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011f54:	69ba      	ldr	r2, [r7, #24]
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011f5c:	4a12      	ldr	r2, [pc, #72]	; (8011fa8 <HAL_GPIO_Init+0x334>)
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	3301      	adds	r3, #1
 8011f66:	61fb      	str	r3, [r7, #28]
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	2b0f      	cmp	r3, #15
 8011f6c:	f67f ae90 	bls.w	8011c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011f70:	bf00      	nop
 8011f72:	bf00      	nop
 8011f74:	3724      	adds	r7, #36	; 0x24
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	40023800 	.word	0x40023800
 8011f84:	40013800 	.word	0x40013800
 8011f88:	40020000 	.word	0x40020000
 8011f8c:	40020400 	.word	0x40020400
 8011f90:	40020800 	.word	0x40020800
 8011f94:	40020c00 	.word	0x40020c00
 8011f98:	40021000 	.word	0x40021000
 8011f9c:	40021400 	.word	0x40021400
 8011fa0:	40021800 	.word	0x40021800
 8011fa4:	40021c00 	.word	0x40021c00
 8011fa8:	40013c00 	.word	0x40013c00

08011fac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b087      	sub	sp, #28
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	e0cd      	b.n	8012164 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011fc8:	2201      	movs	r2, #1
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8011fd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	4013      	ands	r3, r2
 8011fd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	f040 80bd 	bne.w	801215e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011fe4:	4a65      	ldr	r2, [pc, #404]	; (801217c <HAL_GPIO_DeInit+0x1d0>)
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	089b      	lsrs	r3, r3, #2
 8011fea:	3302      	adds	r3, #2
 8011fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ff0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	f003 0303 	and.w	r3, r3, #3
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	220f      	movs	r2, #15
 8011ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8012000:	68ba      	ldr	r2, [r7, #8]
 8012002:	4013      	ands	r3, r2
 8012004:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	4a5d      	ldr	r2, [pc, #372]	; (8012180 <HAL_GPIO_DeInit+0x1d4>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d02b      	beq.n	8012066 <HAL_GPIO_DeInit+0xba>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4a5c      	ldr	r2, [pc, #368]	; (8012184 <HAL_GPIO_DeInit+0x1d8>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d025      	beq.n	8012062 <HAL_GPIO_DeInit+0xb6>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	4a5b      	ldr	r2, [pc, #364]	; (8012188 <HAL_GPIO_DeInit+0x1dc>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d01f      	beq.n	801205e <HAL_GPIO_DeInit+0xb2>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4a5a      	ldr	r2, [pc, #360]	; (801218c <HAL_GPIO_DeInit+0x1e0>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d019      	beq.n	801205a <HAL_GPIO_DeInit+0xae>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4a59      	ldr	r2, [pc, #356]	; (8012190 <HAL_GPIO_DeInit+0x1e4>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d013      	beq.n	8012056 <HAL_GPIO_DeInit+0xaa>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4a58      	ldr	r2, [pc, #352]	; (8012194 <HAL_GPIO_DeInit+0x1e8>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d00d      	beq.n	8012052 <HAL_GPIO_DeInit+0xa6>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4a57      	ldr	r2, [pc, #348]	; (8012198 <HAL_GPIO_DeInit+0x1ec>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d007      	beq.n	801204e <HAL_GPIO_DeInit+0xa2>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4a56      	ldr	r2, [pc, #344]	; (801219c <HAL_GPIO_DeInit+0x1f0>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d101      	bne.n	801204a <HAL_GPIO_DeInit+0x9e>
 8012046:	2307      	movs	r3, #7
 8012048:	e00e      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 801204a:	2308      	movs	r3, #8
 801204c:	e00c      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 801204e:	2306      	movs	r3, #6
 8012050:	e00a      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 8012052:	2305      	movs	r3, #5
 8012054:	e008      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 8012056:	2304      	movs	r3, #4
 8012058:	e006      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 801205a:	2303      	movs	r3, #3
 801205c:	e004      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 801205e:	2302      	movs	r3, #2
 8012060:	e002      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 8012062:	2301      	movs	r3, #1
 8012064:	e000      	b.n	8012068 <HAL_GPIO_DeInit+0xbc>
 8012066:	2300      	movs	r3, #0
 8012068:	697a      	ldr	r2, [r7, #20]
 801206a:	f002 0203 	and.w	r2, r2, #3
 801206e:	0092      	lsls	r2, r2, #2
 8012070:	4093      	lsls	r3, r2
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	429a      	cmp	r2, r3
 8012076:	d132      	bne.n	80120de <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012078:	4b49      	ldr	r3, [pc, #292]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	43db      	mvns	r3, r3
 8012080:	4947      	ldr	r1, [pc, #284]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 8012082:	4013      	ands	r3, r2
 8012084:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012086:	4b46      	ldr	r3, [pc, #280]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 8012088:	685a      	ldr	r2, [r3, #4]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	43db      	mvns	r3, r3
 801208e:	4944      	ldr	r1, [pc, #272]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 8012090:	4013      	ands	r3, r2
 8012092:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012094:	4b42      	ldr	r3, [pc, #264]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 8012096:	689a      	ldr	r2, [r3, #8]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	43db      	mvns	r3, r3
 801209c:	4940      	ldr	r1, [pc, #256]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 801209e:	4013      	ands	r3, r2
 80120a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80120a2:	4b3f      	ldr	r3, [pc, #252]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 80120a4:	68da      	ldr	r2, [r3, #12]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	43db      	mvns	r3, r3
 80120aa:	493d      	ldr	r1, [pc, #244]	; (80121a0 <HAL_GPIO_DeInit+0x1f4>)
 80120ac:	4013      	ands	r3, r2
 80120ae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	f003 0303 	and.w	r3, r3, #3
 80120b6:	009b      	lsls	r3, r3, #2
 80120b8:	220f      	movs	r2, #15
 80120ba:	fa02 f303 	lsl.w	r3, r2, r3
 80120be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80120c0:	4a2e      	ldr	r2, [pc, #184]	; (801217c <HAL_GPIO_DeInit+0x1d0>)
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	089b      	lsrs	r3, r3, #2
 80120c6:	3302      	adds	r3, #2
 80120c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	43da      	mvns	r2, r3
 80120d0:	482a      	ldr	r0, [pc, #168]	; (801217c <HAL_GPIO_DeInit+0x1d0>)
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	089b      	lsrs	r3, r3, #2
 80120d6:	400a      	ands	r2, r1
 80120d8:	3302      	adds	r3, #2
 80120da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	005b      	lsls	r3, r3, #1
 80120e6:	2103      	movs	r1, #3
 80120e8:	fa01 f303 	lsl.w	r3, r1, r3
 80120ec:	43db      	mvns	r3, r3
 80120ee:	401a      	ands	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	08da      	lsrs	r2, r3, #3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3208      	adds	r2, #8
 80120fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	f003 0307 	and.w	r3, r3, #7
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	220f      	movs	r2, #15
 801210a:	fa02 f303 	lsl.w	r3, r2, r3
 801210e:	43db      	mvns	r3, r3
 8012110:	697a      	ldr	r2, [r7, #20]
 8012112:	08d2      	lsrs	r2, r2, #3
 8012114:	4019      	ands	r1, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	3208      	adds	r2, #8
 801211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	68da      	ldr	r2, [r3, #12]
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	2103      	movs	r1, #3
 8012128:	fa01 f303 	lsl.w	r3, r1, r3
 801212c:	43db      	mvns	r3, r3
 801212e:	401a      	ands	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	685a      	ldr	r2, [r3, #4]
 8012138:	2101      	movs	r1, #1
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	fa01 f303 	lsl.w	r3, r1, r3
 8012140:	43db      	mvns	r3, r3
 8012142:	401a      	ands	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	689a      	ldr	r2, [r3, #8]
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	2103      	movs	r1, #3
 8012152:	fa01 f303 	lsl.w	r3, r1, r3
 8012156:	43db      	mvns	r3, r3
 8012158:	401a      	ands	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	3301      	adds	r3, #1
 8012162:	617b      	str	r3, [r7, #20]
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b0f      	cmp	r3, #15
 8012168:	f67f af2e 	bls.w	8011fc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801216c:	bf00      	nop
 801216e:	bf00      	nop
 8012170:	371c      	adds	r7, #28
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop
 801217c:	40013800 	.word	0x40013800
 8012180:	40020000 	.word	0x40020000
 8012184:	40020400 	.word	0x40020400
 8012188:	40020800 	.word	0x40020800
 801218c:	40020c00 	.word	0x40020c00
 8012190:	40021000 	.word	0x40021000
 8012194:	40021400 	.word	0x40021400
 8012198:	40021800 	.word	0x40021800
 801219c:	40021c00 	.word	0x40021c00
 80121a0:	40013c00 	.word	0x40013c00

080121a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b085      	sub	sp, #20
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	460b      	mov	r3, r1
 80121ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	691a      	ldr	r2, [r3, #16]
 80121b4:	887b      	ldrh	r3, [r7, #2]
 80121b6:	4013      	ands	r3, r2
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d002      	beq.n	80121c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80121bc:	2301      	movs	r3, #1
 80121be:	73fb      	strb	r3, [r7, #15]
 80121c0:	e001      	b.n	80121c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80121c2:	2300      	movs	r3, #0
 80121c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80121c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	807b      	strh	r3, [r7, #2]
 80121e0:	4613      	mov	r3, r2
 80121e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80121e4:	787b      	ldrb	r3, [r7, #1]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d003      	beq.n	80121f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80121ea:	887a      	ldrh	r2, [r7, #2]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80121f0:	e003      	b.n	80121fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80121f2:	887b      	ldrh	r3, [r7, #2]
 80121f4:	041a      	lsls	r2, r3, #16
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	619a      	str	r2, [r3, #24]
}
 80121fa:	bf00      	nop
 80121fc:	370c      	adds	r7, #12
 80121fe:	46bd      	mov	sp, r7
 8012200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012204:	4770      	bx	lr
	...

08012208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d101      	bne.n	801221a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012216:	2301      	movs	r3, #1
 8012218:	e12b      	b.n	8012472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012220:	b2db      	uxtb	r3, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	d106      	bne.n	8012234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ef ff2e 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2224      	movs	r2, #36	; 0x24
 8012238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f022 0201 	bic.w	r2, r2, #1
 801224a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801225a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801226a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801226c:	f002 fc64 	bl	8014b38 <HAL_RCC_GetPCLK1Freq>
 8012270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	4a81      	ldr	r2, [pc, #516]	; (801247c <HAL_I2C_Init+0x274>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d807      	bhi.n	801228c <HAL_I2C_Init+0x84>
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	4a80      	ldr	r2, [pc, #512]	; (8012480 <HAL_I2C_Init+0x278>)
 8012280:	4293      	cmp	r3, r2
 8012282:	bf94      	ite	ls
 8012284:	2301      	movls	r3, #1
 8012286:	2300      	movhi	r3, #0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	e006      	b.n	801229a <HAL_I2C_Init+0x92>
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	4a7d      	ldr	r2, [pc, #500]	; (8012484 <HAL_I2C_Init+0x27c>)
 8012290:	4293      	cmp	r3, r2
 8012292:	bf94      	ite	ls
 8012294:	2301      	movls	r3, #1
 8012296:	2300      	movhi	r3, #0
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801229e:	2301      	movs	r3, #1
 80122a0:	e0e7      	b.n	8012472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	4a78      	ldr	r2, [pc, #480]	; (8012488 <HAL_I2C_Init+0x280>)
 80122a6:	fba2 2303 	umull	r2, r3, r2, r3
 80122aa:	0c9b      	lsrs	r3, r3, #18
 80122ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	430a      	orrs	r2, r1
 80122c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	6a1b      	ldr	r3, [r3, #32]
 80122c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	4a6a      	ldr	r2, [pc, #424]	; (801247c <HAL_I2C_Init+0x274>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d802      	bhi.n	80122dc <HAL_I2C_Init+0xd4>
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	3301      	adds	r3, #1
 80122da:	e009      	b.n	80122f0 <HAL_I2C_Init+0xe8>
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80122e2:	fb02 f303 	mul.w	r3, r2, r3
 80122e6:	4a69      	ldr	r2, [pc, #420]	; (801248c <HAL_I2C_Init+0x284>)
 80122e8:	fba2 2303 	umull	r2, r3, r2, r3
 80122ec:	099b      	lsrs	r3, r3, #6
 80122ee:	3301      	adds	r3, #1
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	6812      	ldr	r2, [r2, #0]
 80122f4:	430b      	orrs	r3, r1
 80122f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	69db      	ldr	r3, [r3, #28]
 80122fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	495c      	ldr	r1, [pc, #368]	; (801247c <HAL_I2C_Init+0x274>)
 801230c:	428b      	cmp	r3, r1
 801230e:	d819      	bhi.n	8012344 <HAL_I2C_Init+0x13c>
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	1e59      	subs	r1, r3, #1
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	fbb1 f3f3 	udiv	r3, r1, r3
 801231e:	1c59      	adds	r1, r3, #1
 8012320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012324:	400b      	ands	r3, r1
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00a      	beq.n	8012340 <HAL_I2C_Init+0x138>
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	1e59      	subs	r1, r3, #1
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	005b      	lsls	r3, r3, #1
 8012334:	fbb1 f3f3 	udiv	r3, r1, r3
 8012338:	3301      	adds	r3, #1
 801233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801233e:	e051      	b.n	80123e4 <HAL_I2C_Init+0x1dc>
 8012340:	2304      	movs	r3, #4
 8012342:	e04f      	b.n	80123e4 <HAL_I2C_Init+0x1dc>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d111      	bne.n	8012370 <HAL_I2C_Init+0x168>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	1e58      	subs	r0, r3, #1
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6859      	ldr	r1, [r3, #4]
 8012354:	460b      	mov	r3, r1
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	440b      	add	r3, r1
 801235a:	fbb0 f3f3 	udiv	r3, r0, r3
 801235e:	3301      	adds	r3, #1
 8012360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012364:	2b00      	cmp	r3, #0
 8012366:	bf0c      	ite	eq
 8012368:	2301      	moveq	r3, #1
 801236a:	2300      	movne	r3, #0
 801236c:	b2db      	uxtb	r3, r3
 801236e:	e012      	b.n	8012396 <HAL_I2C_Init+0x18e>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	1e58      	subs	r0, r3, #1
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6859      	ldr	r1, [r3, #4]
 8012378:	460b      	mov	r3, r1
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	440b      	add	r3, r1
 801237e:	0099      	lsls	r1, r3, #2
 8012380:	440b      	add	r3, r1
 8012382:	fbb0 f3f3 	udiv	r3, r0, r3
 8012386:	3301      	adds	r3, #1
 8012388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801238c:	2b00      	cmp	r3, #0
 801238e:	bf0c      	ite	eq
 8012390:	2301      	moveq	r3, #1
 8012392:	2300      	movne	r3, #0
 8012394:	b2db      	uxtb	r3, r3
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <HAL_I2C_Init+0x196>
 801239a:	2301      	movs	r3, #1
 801239c:	e022      	b.n	80123e4 <HAL_I2C_Init+0x1dc>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	689b      	ldr	r3, [r3, #8]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10e      	bne.n	80123c4 <HAL_I2C_Init+0x1bc>
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	1e58      	subs	r0, r3, #1
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6859      	ldr	r1, [r3, #4]
 80123ae:	460b      	mov	r3, r1
 80123b0:	005b      	lsls	r3, r3, #1
 80123b2:	440b      	add	r3, r1
 80123b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80123b8:	3301      	adds	r3, #1
 80123ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80123be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123c2:	e00f      	b.n	80123e4 <HAL_I2C_Init+0x1dc>
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	1e58      	subs	r0, r3, #1
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6859      	ldr	r1, [r3, #4]
 80123cc:	460b      	mov	r3, r1
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	440b      	add	r3, r1
 80123d2:	0099      	lsls	r1, r3, #2
 80123d4:	440b      	add	r3, r1
 80123d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80123da:	3301      	adds	r3, #1
 80123dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80123e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80123e4:	6879      	ldr	r1, [r7, #4]
 80123e6:	6809      	ldr	r1, [r1, #0]
 80123e8:	4313      	orrs	r3, r2
 80123ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	69da      	ldr	r2, [r3, #28]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6a1b      	ldr	r3, [r3, #32]
 80123fe:	431a      	orrs	r2, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	430a      	orrs	r2, r1
 8012406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	689b      	ldr	r3, [r3, #8]
 801240e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012416:	687a      	ldr	r2, [r7, #4]
 8012418:	6911      	ldr	r1, [r2, #16]
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	68d2      	ldr	r2, [r2, #12]
 801241e:	4311      	orrs	r1, r2
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	6812      	ldr	r2, [r2, #0]
 8012424:	430b      	orrs	r3, r1
 8012426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	695a      	ldr	r2, [r3, #20]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	699b      	ldr	r3, [r3, #24]
 801243a:	431a      	orrs	r2, r3
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	430a      	orrs	r2, r1
 8012442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f042 0201 	orr.w	r2, r2, #1
 8012452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2220      	movs	r2, #32
 801245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	000186a0 	.word	0x000186a0
 8012480:	001e847f 	.word	0x001e847f
 8012484:	003d08ff 	.word	0x003d08ff
 8012488:	431bde83 	.word	0x431bde83
 801248c:	10624dd3 	.word	0x10624dd3

08012490 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d101      	bne.n	80124a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801249e:	2301      	movs	r3, #1
 80124a0:	e021      	b.n	80124e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2224      	movs	r2, #36	; 0x24
 80124a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f022 0201 	bic.w	r2, r2, #1
 80124b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7ef febe 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2200      	movs	r2, #0
 80124c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
	...

080124f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	607a      	str	r2, [r7, #4]
 80124fa:	461a      	mov	r2, r3
 80124fc:	460b      	mov	r3, r1
 80124fe:	817b      	strh	r3, [r7, #10]
 8012500:	4613      	mov	r3, r2
 8012502:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8012504:	2300      	movs	r3, #0
 8012506:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801250e:	b2db      	uxtb	r3, r3
 8012510:	2b20      	cmp	r3, #32
 8012512:	f040 80f4 	bne.w	80126fe <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8012516:	4b7c      	ldr	r3, [pc, #496]	; (8012708 <HAL_I2C_Master_Receive_DMA+0x218>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	08db      	lsrs	r3, r3, #3
 801251c:	4a7b      	ldr	r2, [pc, #492]	; (801270c <HAL_I2C_Master_Receive_DMA+0x21c>)
 801251e:	fba2 2303 	umull	r2, r3, r2, r3
 8012522:	0a1a      	lsrs	r2, r3, #8
 8012524:	4613      	mov	r3, r2
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	4413      	add	r3, r2
 801252a:	009a      	lsls	r2, r3, #2
 801252c:	4413      	add	r3, r2
 801252e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	3b01      	subs	r3, #1
 8012534:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d116      	bne.n	801256a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2200      	movs	r2, #0
 8012540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2220      	movs	r2, #32
 8012546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2200      	movs	r2, #0
 801254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012556:	f043 0220 	orr.w	r2, r3, #32
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2200      	movs	r2, #0
 8012562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8012566:	2301      	movs	r3, #1
 8012568:	e0ca      	b.n	8012700 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	699b      	ldr	r3, [r3, #24]
 8012570:	f003 0302 	and.w	r3, r3, #2
 8012574:	2b02      	cmp	r3, #2
 8012576:	d0db      	beq.n	8012530 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801257e:	2b01      	cmp	r3, #1
 8012580:	d101      	bne.n	8012586 <HAL_I2C_Master_Receive_DMA+0x96>
 8012582:	2302      	movs	r3, #2
 8012584:	e0bc      	b.n	8012700 <HAL_I2C_Master_Receive_DMA+0x210>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2201      	movs	r2, #1
 801258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f003 0301 	and.w	r3, r3, #1
 8012598:	2b01      	cmp	r3, #1
 801259a:	d007      	beq.n	80125ac <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f042 0201 	orr.w	r2, r2, #1
 80125aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	681a      	ldr	r2, [r3, #0]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80125ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2222      	movs	r2, #34	; 0x22
 80125c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2210      	movs	r2, #16
 80125c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2200      	movs	r2, #0
 80125d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	893a      	ldrh	r2, [r7, #8]
 80125dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	4a49      	ldr	r2, [pc, #292]	; (8012710 <HAL_I2C_Master_Receive_DMA+0x220>)
 80125ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80125ee:	897a      	ldrh	r2, [r7, #10]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d062      	beq.n	80126c2 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012600:	4a44      	ldr	r2, [pc, #272]	; (8012714 <HAL_I2C_Master_Receive_DMA+0x224>)
 8012602:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012608:	4a43      	ldr	r2, [pc, #268]	; (8012718 <HAL_I2C_Master_Receive_DMA+0x228>)
 801260a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012610:	2200      	movs	r2, #0
 8012612:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012618:	2200      	movs	r2, #0
 801261a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012620:	2200      	movs	r2, #0
 8012622:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012628:	2200      	movs	r2, #0
 801262a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	3310      	adds	r3, #16
 8012636:	4619      	mov	r1, r3
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263c:	461a      	mov	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012642:	f7ff f819 	bl	8011678 <HAL_DMA_Start_IT>
 8012646:	4603      	mov	r3, r0
 8012648:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 801264a:	7dfb      	ldrb	r3, [r7, #23]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d124      	bne.n	801269a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801265e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801266e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2200      	movs	r2, #0
 8012674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	685a      	ldr	r2, [r3, #4]
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8012686:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	685a      	ldr	r2, [r3, #4]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012696:	605a      	str	r2, [r3, #4]
 8012698:	e02f      	b.n	80126fa <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2220      	movs	r2, #32
 801269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	2200      	movs	r2, #0
 80126a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ae:	f043 0210 	orr.w	r2, r3, #16
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80126be:	2301      	movs	r3, #1
 80126c0:	e01e      	b.n	8012700 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80126d0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80126e0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	685a      	ldr	r2, [r3, #4]
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80126f8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e000      	b.n	8012700 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80126fe:	2302      	movs	r3, #2
  }
}
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	20000054 	.word	0x20000054
 801270c:	14f8b589 	.word	0x14f8b589
 8012710:	ffff0000 	.word	0xffff0000
 8012714:	08013e89 	.word	0x08013e89
 8012718:	08014033 	.word	0x08014033

0801271c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b088      	sub	sp, #32
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8012724:	2300      	movs	r3, #0
 8012726:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012734:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801273c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012744:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8012746:	7bfb      	ldrb	r3, [r7, #15]
 8012748:	2b10      	cmp	r3, #16
 801274a:	d003      	beq.n	8012754 <HAL_I2C_EV_IRQHandler+0x38>
 801274c:	7bfb      	ldrb	r3, [r7, #15]
 801274e:	2b40      	cmp	r3, #64	; 0x40
 8012750:	f040 80bd 	bne.w	80128ce <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	699b      	ldr	r3, [r3, #24]
 801275a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	695b      	ldr	r3, [r3, #20]
 8012762:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	f003 0301 	and.w	r3, r3, #1
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10d      	bne.n	801278a <HAL_I2C_EV_IRQHandler+0x6e>
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012774:	d003      	beq.n	801277e <HAL_I2C_EV_IRQHandler+0x62>
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801277c:	d101      	bne.n	8012782 <HAL_I2C_EV_IRQHandler+0x66>
 801277e:	2301      	movs	r3, #1
 8012780:	e000      	b.n	8012784 <HAL_I2C_EV_IRQHandler+0x68>
 8012782:	2300      	movs	r3, #0
 8012784:	2b01      	cmp	r3, #1
 8012786:	f000 812e 	beq.w	80129e6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	f003 0301 	and.w	r3, r3, #1
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00c      	beq.n	80127ae <HAL_I2C_EV_IRQHandler+0x92>
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	0a5b      	lsrs	r3, r3, #9
 8012798:	f003 0301 	and.w	r3, r3, #1
 801279c:	2b00      	cmp	r3, #0
 801279e:	d006      	beq.n	80127ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f001 fd5d 	bl	8014260 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fd58 	bl	801325c <I2C_Master_SB>
 80127ac:	e08e      	b.n	80128cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	08db      	lsrs	r3, r3, #3
 80127b2:	f003 0301 	and.w	r3, r3, #1
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d009      	beq.n	80127ce <HAL_I2C_EV_IRQHandler+0xb2>
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	0a5b      	lsrs	r3, r3, #9
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d003      	beq.n	80127ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 fdce 	bl	8013368 <I2C_Master_ADD10>
 80127cc:	e07e      	b.n	80128cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	085b      	lsrs	r3, r3, #1
 80127d2:	f003 0301 	and.w	r3, r3, #1
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d009      	beq.n	80127ee <HAL_I2C_EV_IRQHandler+0xd2>
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	0a5b      	lsrs	r3, r3, #9
 80127de:	f003 0301 	and.w	r3, r3, #1
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d003      	beq.n	80127ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f000 fde8 	bl	80133bc <I2C_Master_ADDR>
 80127ec:	e06e      	b.n	80128cc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	089b      	lsrs	r3, r3, #2
 80127f2:	f003 0301 	and.w	r3, r3, #1
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d037      	beq.n	801286a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012808:	f000 80ef 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	09db      	lsrs	r3, r3, #7
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00f      	beq.n	8012838 <HAL_I2C_EV_IRQHandler+0x11c>
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	0a9b      	lsrs	r3, r3, #10
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	2b00      	cmp	r3, #0
 8012822:	d009      	beq.n	8012838 <HAL_I2C_EV_IRQHandler+0x11c>
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	089b      	lsrs	r3, r3, #2
 8012828:	f003 0301 	and.w	r3, r3, #1
 801282c:	2b00      	cmp	r3, #0
 801282e:	d103      	bne.n	8012838 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f9e5 	bl	8012c00 <I2C_MasterTransmit_TXE>
 8012836:	e049      	b.n	80128cc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	089b      	lsrs	r3, r3, #2
 801283c:	f003 0301 	and.w	r3, r3, #1
 8012840:	2b00      	cmp	r3, #0
 8012842:	f000 80d2 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	0a5b      	lsrs	r3, r3, #9
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	2b00      	cmp	r3, #0
 8012850:	f000 80cb 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8012854:	7bfb      	ldrb	r3, [r7, #15]
 8012856:	2b10      	cmp	r3, #16
 8012858:	d103      	bne.n	8012862 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 fa6c 	bl	8012d38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012860:	e0c3      	b.n	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 fad0 	bl	8012e08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012868:	e0bf      	b.n	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012878:	f000 80b7 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	099b      	lsrs	r3, r3, #6
 8012880:	f003 0301 	and.w	r3, r3, #1
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00f      	beq.n	80128a8 <HAL_I2C_EV_IRQHandler+0x18c>
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	0a9b      	lsrs	r3, r3, #10
 801288c:	f003 0301 	and.w	r3, r3, #1
 8012890:	2b00      	cmp	r3, #0
 8012892:	d009      	beq.n	80128a8 <HAL_I2C_EV_IRQHandler+0x18c>
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	089b      	lsrs	r3, r3, #2
 8012898:	f003 0301 	and.w	r3, r3, #1
 801289c:	2b00      	cmp	r3, #0
 801289e:	d103      	bne.n	80128a8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 fb40 	bl	8012f26 <I2C_MasterReceive_RXNE>
 80128a6:	e011      	b.n	80128cc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	089b      	lsrs	r3, r3, #2
 80128ac:	f003 0301 	and.w	r3, r3, #1
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f000 809a 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	0a5b      	lsrs	r3, r3, #9
 80128ba:	f003 0301 	and.w	r3, r3, #1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f000 8093 	beq.w	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fbdf 	bl	8013088 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80128ca:	e08e      	b.n	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
 80128cc:	e08d      	b.n	80129ea <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d004      	beq.n	80128e0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	695b      	ldr	r3, [r3, #20]
 80128dc:	61fb      	str	r3, [r7, #28]
 80128de:	e007      	b.n	80128f0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	699b      	ldr	r3, [r3, #24]
 80128e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	695b      	ldr	r3, [r3, #20]
 80128ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	085b      	lsrs	r3, r3, #1
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d012      	beq.n	8012922 <HAL_I2C_EV_IRQHandler+0x206>
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	0a5b      	lsrs	r3, r3, #9
 8012900:	f003 0301 	and.w	r3, r3, #1
 8012904:	2b00      	cmp	r3, #0
 8012906:	d00c      	beq.n	8012922 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801290c:	2b00      	cmp	r3, #0
 801290e:	d003      	beq.n	8012918 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	699b      	ldr	r3, [r3, #24]
 8012916:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8012918:	69b9      	ldr	r1, [r7, #24]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f000 ff9d 	bl	801385a <I2C_Slave_ADDR>
 8012920:	e066      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	091b      	lsrs	r3, r3, #4
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	2b00      	cmp	r3, #0
 801292c:	d009      	beq.n	8012942 <HAL_I2C_EV_IRQHandler+0x226>
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	0a5b      	lsrs	r3, r3, #9
 8012932:	f003 0301 	and.w	r3, r3, #1
 8012936:	2b00      	cmp	r3, #0
 8012938:	d003      	beq.n	8012942 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 ffd2 	bl	80138e4 <I2C_Slave_STOPF>
 8012940:	e056      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012942:	7bbb      	ldrb	r3, [r7, #14]
 8012944:	2b21      	cmp	r3, #33	; 0x21
 8012946:	d002      	beq.n	801294e <HAL_I2C_EV_IRQHandler+0x232>
 8012948:	7bbb      	ldrb	r3, [r7, #14]
 801294a:	2b29      	cmp	r3, #41	; 0x29
 801294c:	d125      	bne.n	801299a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	09db      	lsrs	r3, r3, #7
 8012952:	f003 0301 	and.w	r3, r3, #1
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00f      	beq.n	801297a <HAL_I2C_EV_IRQHandler+0x25e>
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	0a9b      	lsrs	r3, r3, #10
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	2b00      	cmp	r3, #0
 8012964:	d009      	beq.n	801297a <HAL_I2C_EV_IRQHandler+0x25e>
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	089b      	lsrs	r3, r3, #2
 801296a:	f003 0301 	and.w	r3, r3, #1
 801296e:	2b00      	cmp	r3, #0
 8012970:	d103      	bne.n	801297a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 feb3 	bl	80136de <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012978:	e039      	b.n	80129ee <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	089b      	lsrs	r3, r3, #2
 801297e:	f003 0301 	and.w	r3, r3, #1
 8012982:	2b00      	cmp	r3, #0
 8012984:	d033      	beq.n	80129ee <HAL_I2C_EV_IRQHandler+0x2d2>
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	0a5b      	lsrs	r3, r3, #9
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d02d      	beq.n	80129ee <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 fee0 	bl	8013758 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8012998:	e029      	b.n	80129ee <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	099b      	lsrs	r3, r3, #6
 801299e:	f003 0301 	and.w	r3, r3, #1
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00f      	beq.n	80129c6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	0a9b      	lsrs	r3, r3, #10
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d009      	beq.n	80129c6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	089b      	lsrs	r3, r3, #2
 80129b6:	f003 0301 	and.w	r3, r3, #1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d103      	bne.n	80129c6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f000 feeb 	bl	801379a <I2C_SlaveReceive_RXNE>
 80129c4:	e014      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80129c6:	69fb      	ldr	r3, [r7, #28]
 80129c8:	089b      	lsrs	r3, r3, #2
 80129ca:	f003 0301 	and.w	r3, r3, #1
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00e      	beq.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	0a5b      	lsrs	r3, r3, #9
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d008      	beq.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 ff19 	bl	8013816 <I2C_SlaveReceive_BTF>
 80129e4:	e004      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80129e6:	bf00      	nop
 80129e8:	e002      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80129ea:	bf00      	nop
 80129ec:	e000      	b.n	80129f0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80129ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80129f0:	3720      	adds	r7, #32
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b08a      	sub	sp, #40	; 0x28
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	695b      	ldr	r3, [r3, #20]
 8012a04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012a1a:	6a3b      	ldr	r3, [r7, #32]
 8012a1c:	0a1b      	lsrs	r3, r3, #8
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00e      	beq.n	8012a44 <HAL_I2C_ER_IRQHandler+0x4e>
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	0a1b      	lsrs	r3, r3, #8
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d008      	beq.n	8012a44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8012a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a34:	f043 0301 	orr.w	r3, r3, #1
 8012a38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012a42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012a44:	6a3b      	ldr	r3, [r7, #32]
 8012a46:	0a5b      	lsrs	r3, r3, #9
 8012a48:	f003 0301 	and.w	r3, r3, #1
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d00e      	beq.n	8012a6e <HAL_I2C_ER_IRQHandler+0x78>
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	0a1b      	lsrs	r3, r3, #8
 8012a54:	f003 0301 	and.w	r3, r3, #1
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d008      	beq.n	8012a6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5e:	f043 0302 	orr.w	r3, r3, #2
 8012a62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8012a6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	0a9b      	lsrs	r3, r3, #10
 8012a72:	f003 0301 	and.w	r3, r3, #1
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d03f      	beq.n	8012afa <HAL_I2C_ER_IRQHandler+0x104>
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	0a1b      	lsrs	r3, r3, #8
 8012a7e:	f003 0301 	and.w	r3, r3, #1
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d039      	beq.n	8012afa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8012a86:	7efb      	ldrb	r3, [r7, #27]
 8012a88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8012aa0:	7ebb      	ldrb	r3, [r7, #26]
 8012aa2:	2b20      	cmp	r3, #32
 8012aa4:	d112      	bne.n	8012acc <HAL_I2C_ER_IRQHandler+0xd6>
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10f      	bne.n	8012acc <HAL_I2C_ER_IRQHandler+0xd6>
 8012aac:	7cfb      	ldrb	r3, [r7, #19]
 8012aae:	2b21      	cmp	r3, #33	; 0x21
 8012ab0:	d008      	beq.n	8012ac4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8012ab2:	7cfb      	ldrb	r3, [r7, #19]
 8012ab4:	2b29      	cmp	r3, #41	; 0x29
 8012ab6:	d005      	beq.n	8012ac4 <HAL_I2C_ER_IRQHandler+0xce>
 8012ab8:	7cfb      	ldrb	r3, [r7, #19]
 8012aba:	2b28      	cmp	r3, #40	; 0x28
 8012abc:	d106      	bne.n	8012acc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2b21      	cmp	r3, #33	; 0x21
 8012ac2:	d103      	bne.n	8012acc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f001 f83d 	bl	8013b44 <I2C_Slave_AF>
 8012aca:	e016      	b.n	8012afa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012ad4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad8:	f043 0304 	orr.w	r3, r3, #4
 8012adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8012ade:	7efb      	ldrb	r3, [r7, #27]
 8012ae0:	2b10      	cmp	r3, #16
 8012ae2:	d002      	beq.n	8012aea <HAL_I2C_ER_IRQHandler+0xf4>
 8012ae4:	7efb      	ldrb	r3, [r7, #27]
 8012ae6:	2b40      	cmp	r3, #64	; 0x40
 8012ae8:	d107      	bne.n	8012afa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012af8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012afa:	6a3b      	ldr	r3, [r7, #32]
 8012afc:	0adb      	lsrs	r3, r3, #11
 8012afe:	f003 0301 	and.w	r3, r3, #1
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00e      	beq.n	8012b24 <HAL_I2C_ER_IRQHandler+0x12e>
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	0a1b      	lsrs	r3, r3, #8
 8012b0a:	f003 0301 	and.w	r3, r3, #1
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d008      	beq.n	8012b24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8012b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b14:	f043 0308 	orr.w	r3, r3, #8
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8012b22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d008      	beq.n	8012b3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b30:	431a      	orrs	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f001 f874 	bl	8013c24 <I2C_ITError>
  }
}
 8012b3c:	bf00      	nop
 8012b3e:	3728      	adds	r7, #40	; 0x28
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8012b4c:	bf00      	nop
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b083      	sub	sp, #12
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8012b60:	bf00      	nop
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8012b74:	bf00      	nop
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
 8012b8c:	4613      	mov	r3, r2
 8012b8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8012b90:	bf00      	nop
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b083      	sub	sp, #12
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr

08012bb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b083      	sub	sp, #12
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8012bb8:	bf00      	nop
 8012bba:	370c      	adds	r7, #12
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8012bcc:	bf00      	nop
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b083      	sub	sp, #12
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8012be0:	bf00      	nop
 8012be2:	370c      	adds	r7, #12
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr

08012bec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8012bf4:	bf00      	nop
 8012bf6:	370c      	adds	r7, #12
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012c16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d150      	bne.n	8012cc8 <I2C_MasterTransmit_TXE+0xc8>
 8012c26:	7bfb      	ldrb	r3, [r7, #15]
 8012c28:	2b21      	cmp	r3, #33	; 0x21
 8012c2a:	d14d      	bne.n	8012cc8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2b08      	cmp	r3, #8
 8012c30:	d01d      	beq.n	8012c6e <I2C_MasterTransmit_TXE+0x6e>
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2b20      	cmp	r3, #32
 8012c36:	d01a      	beq.n	8012c6e <I2C_MasterTransmit_TXE+0x6e>
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012c3e:	d016      	beq.n	8012c6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	685a      	ldr	r2, [r3, #4]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012c4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2211      	movs	r2, #17
 8012c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2220      	movs	r2, #32
 8012c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7ff ff6c 	bl	8012b44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012c6c:	e060      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	685a      	ldr	r2, [r3, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012c7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2220      	movs	r2, #32
 8012c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	2b40      	cmp	r3, #64	; 0x40
 8012ca6:	d107      	bne.n	8012cb8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7ff ff7d 	bl	8012bb0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012cb6:	e03b      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7ff ff3f 	bl	8012b44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012cc6:	e033      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8012cc8:	7bfb      	ldrb	r3, [r7, #15]
 8012cca:	2b21      	cmp	r3, #33	; 0x21
 8012ccc:	d005      	beq.n	8012cda <I2C_MasterTransmit_TXE+0xda>
 8012cce:	7bbb      	ldrb	r3, [r7, #14]
 8012cd0:	2b40      	cmp	r3, #64	; 0x40
 8012cd2:	d12d      	bne.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
 8012cd6:	2b22      	cmp	r3, #34	; 0x22
 8012cd8:	d12a      	bne.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d108      	bne.n	8012cf6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	685a      	ldr	r2, [r3, #4]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012cf2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8012cf4:	e01c      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	2b40      	cmp	r3, #64	; 0x40
 8012d00:	d103      	bne.n	8012d0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 f880 	bl	8012e08 <I2C_MemoryTransmit_TXE_BTF>
}
 8012d08:	e012      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0e:	781a      	ldrb	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	3b01      	subs	r3, #1
 8012d28:	b29a      	uxth	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012d2e:	e7ff      	b.n	8012d30 <I2C_MasterTransmit_TXE+0x130>
 8012d30:	bf00      	nop
 8012d32:	3710      	adds	r7, #16
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	2b21      	cmp	r3, #33	; 0x21
 8012d50:	d156      	bne.n	8012e00 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d012      	beq.n	8012d82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d60:	781a      	ldrb	r2, [r3, #0]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8012d80:	e03e      	b.n	8012e00 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b08      	cmp	r3, #8
 8012d86:	d01d      	beq.n	8012dc4 <I2C_MasterTransmit_BTF+0x8c>
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b20      	cmp	r3, #32
 8012d8c:	d01a      	beq.n	8012dc4 <I2C_MasterTransmit_BTF+0x8c>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012d94:	d016      	beq.n	8012dc4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	685a      	ldr	r2, [r3, #4]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012da4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2211      	movs	r2, #17
 8012daa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2220      	movs	r2, #32
 8012db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f7ff fec1 	bl	8012b44 <HAL_I2C_MasterTxCpltCallback>
}
 8012dc2:	e01d      	b.n	8012e00 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	685a      	ldr	r2, [r3, #4]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012dd2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012de2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2200      	movs	r2, #0
 8012de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2220      	movs	r2, #32
 8012dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2200      	movs	r2, #0
 8012df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ff fea2 	bl	8012b44 <HAL_I2C_MasterTxCpltCallback>
}
 8012e00:	bf00      	nop
 8012e02:	3710      	adds	r7, #16
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d11d      	bne.n	8012e5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d10b      	bne.n	8012e40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e2c:	b2da      	uxtb	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e38:	1c9a      	adds	r2, r3, #2
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8012e3e:	e06e      	b.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	121b      	asrs	r3, r3, #8
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e54:	1c5a      	adds	r2, r3, #1
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012e5a:	e060      	b.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d10b      	bne.n	8012e7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e74:	1c5a      	adds	r2, r3, #1
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012e7a:	e050      	b.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e80:	2b02      	cmp	r3, #2
 8012e82:	d14c      	bne.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8012e84:	7bfb      	ldrb	r3, [r7, #15]
 8012e86:	2b22      	cmp	r3, #34	; 0x22
 8012e88:	d108      	bne.n	8012e9c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e98:	601a      	str	r2, [r3, #0]
}
 8012e9a:	e040      	b.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d015      	beq.n	8012ed2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8012ea6:	7bfb      	ldrb	r3, [r7, #15]
 8012ea8:	2b21      	cmp	r3, #33	; 0x21
 8012eaa:	d112      	bne.n	8012ed2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	781a      	ldrb	r2, [r3, #0]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ebc:	1c5a      	adds	r2, r3, #1
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012ed0:	e025      	b.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d120      	bne.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
 8012edc:	7bfb      	ldrb	r3, [r7, #15]
 8012ede:	2b21      	cmp	r3, #33	; 0x21
 8012ee0:	d11d      	bne.n	8012f1e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	685a      	ldr	r2, [r3, #4]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012ef0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f00:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2220      	movs	r2, #32
 8012f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff fe49 	bl	8012bb0 <HAL_I2C_MemTxCpltCallback>
}
 8012f1e:	bf00      	nop
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}

08012f26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8012f26:	b580      	push	{r7, lr}
 8012f28:	b084      	sub	sp, #16
 8012f2a:	af00      	add	r7, sp, #0
 8012f2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	2b22      	cmp	r3, #34	; 0x22
 8012f38:	f040 80a2 	bne.w	8013080 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2b03      	cmp	r3, #3
 8012f48:	d921      	bls.n	8012f8e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	691a      	ldr	r2, [r3, #16]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f54:	b2d2      	uxtb	r2, r2
 8012f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5c:	1c5a      	adds	r2, r3, #1
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	2b03      	cmp	r3, #3
 8012f78:	f040 8082 	bne.w	8013080 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	685a      	ldr	r2, [r3, #4]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f8a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8012f8c:	e078      	b.n	8013080 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f92:	2b02      	cmp	r3, #2
 8012f94:	d074      	beq.n	8013080 <I2C_MasterReceive_RXNE+0x15a>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d002      	beq.n	8012fa2 <I2C_MasterReceive_RXNE+0x7c>
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d16e      	bne.n	8013080 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f001 f92a 	bl	80141fc <I2C_WaitOnSTOPRequestThroughIT>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d142      	bne.n	8013034 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012fbc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	685a      	ldr	r2, [r3, #4]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012fcc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	691a      	ldr	r2, [r3, #16]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd8:	b2d2      	uxtb	r2, r2
 8012fda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe0:	1c5a      	adds	r2, r3, #1
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	3b01      	subs	r3, #1
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2220      	movs	r2, #32
 8012ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013002:	b2db      	uxtb	r3, r3
 8013004:	2b40      	cmp	r3, #64	; 0x40
 8013006:	d10a      	bne.n	801301e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7ff fdd4 	bl	8012bc4 <HAL_I2C_MemRxCpltCallback>
}
 801301c:	e030      	b.n	8013080 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2200      	movs	r2, #0
 8013022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2212      	movs	r2, #18
 801302a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7f9 feb7 	bl	800cda0 <HAL_I2C_MasterRxCpltCallback>
}
 8013032:	e025      	b.n	8013080 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	685a      	ldr	r2, [r3, #4]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013042:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	691a      	ldr	r2, [r3, #16]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304e:	b2d2      	uxtb	r2, r2
 8013050:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013056:	1c5a      	adds	r2, r3, #1
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013060:	b29b      	uxth	r3, r3
 8013062:	3b01      	subs	r3, #1
 8013064:	b29a      	uxth	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2220      	movs	r2, #32
 801306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fdac 	bl	8012bd8 <HAL_I2C_ErrorCallback>
}
 8013080:	bf00      	nop
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013094:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801309a:	b29b      	uxth	r3, r3
 801309c:	2b04      	cmp	r3, #4
 801309e:	d11b      	bne.n	80130d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	685a      	ldr	r2, [r3, #4]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	691a      	ldr	r2, [r3, #16]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ba:	b2d2      	uxtb	r2, r2
 80130bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	1c5a      	adds	r2, r3, #1
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	3b01      	subs	r3, #1
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80130d6:	e0bd      	b.n	8013254 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130dc:	b29b      	uxth	r3, r3
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d129      	bne.n	8013136 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2b04      	cmp	r3, #4
 80130f6:	d00a      	beq.n	801310e <I2C_MasterReceive_BTF+0x86>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b02      	cmp	r3, #2
 80130fc:	d007      	beq.n	801310e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801310c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	691a      	ldr	r2, [r3, #16]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	b2d2      	uxtb	r2, r2
 801311a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013120:	1c5a      	adds	r2, r3, #1
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801312a:	b29b      	uxth	r3, r3
 801312c:	3b01      	subs	r3, #1
 801312e:	b29a      	uxth	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013134:	e08e      	b.n	8013254 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801313a:	b29b      	uxth	r3, r3
 801313c:	2b02      	cmp	r3, #2
 801313e:	d176      	bne.n	801322e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d002      	beq.n	801314c <I2C_MasterReceive_BTF+0xc4>
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2b10      	cmp	r3, #16
 801314a:	d108      	bne.n	801315e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801315a:	601a      	str	r2, [r3, #0]
 801315c:	e019      	b.n	8013192 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2b04      	cmp	r3, #4
 8013162:	d002      	beq.n	801316a <I2C_MasterReceive_BTF+0xe2>
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2b02      	cmp	r3, #2
 8013168:	d108      	bne.n	801317c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013178:	601a      	str	r2, [r3, #0]
 801317a:	e00a      	b.n	8013192 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2b10      	cmp	r3, #16
 8013180:	d007      	beq.n	8013192 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013190:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	691a      	ldr	r2, [r3, #16]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801319c:	b2d2      	uxtb	r2, r2
 801319e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a4:	1c5a      	adds	r2, r3, #1
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	3b01      	subs	r3, #1
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	691a      	ldr	r2, [r3, #16]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c2:	b2d2      	uxtb	r2, r2
 80131c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ca:	1c5a      	adds	r2, r3, #1
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	3b01      	subs	r3, #1
 80131d8:	b29a      	uxth	r2, r3
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	685a      	ldr	r2, [r3, #4]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80131ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2220      	movs	r2, #32
 80131f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	2b40      	cmp	r3, #64	; 0x40
 8013200:	d10a      	bne.n	8013218 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7ff fcd7 	bl	8012bc4 <HAL_I2C_MemRxCpltCallback>
}
 8013216:	e01d      	b.n	8013254 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2212      	movs	r2, #18
 8013224:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7f9 fdba 	bl	800cda0 <HAL_I2C_MasterRxCpltCallback>
}
 801322c:	e012      	b.n	8013254 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	691a      	ldr	r2, [r3, #16]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013238:	b2d2      	uxtb	r2, r2
 801323a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013240:	1c5a      	adds	r2, r3, #1
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801324a:	b29b      	uxth	r3, r3
 801324c:	3b01      	subs	r3, #1
 801324e:	b29a      	uxth	r2, r3
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8013254:	bf00      	nop
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b40      	cmp	r3, #64	; 0x40
 801326e:	d117      	bne.n	80132a0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013274:	2b00      	cmp	r3, #0
 8013276:	d109      	bne.n	801328c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801327c:	b2db      	uxtb	r3, r3
 801327e:	461a      	mov	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013288:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801328a:	e067      	b.n	801335c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013290:	b2db      	uxtb	r3, r3
 8013292:	f043 0301 	orr.w	r3, r3, #1
 8013296:	b2da      	uxtb	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	611a      	str	r2, [r3, #16]
}
 801329e:	e05d      	b.n	801335c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132a8:	d133      	bne.n	8013312 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	2b21      	cmp	r3, #33	; 0x21
 80132b4:	d109      	bne.n	80132ca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	461a      	mov	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80132c6:	611a      	str	r2, [r3, #16]
 80132c8:	e008      	b.n	80132dc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	f043 0301 	orr.w	r3, r3, #1
 80132d4:	b2da      	uxtb	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d004      	beq.n	80132ee <I2C_Master_SB+0x92>
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d108      	bne.n	8013300 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d032      	beq.n	801335c <I2C_Master_SB+0x100>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d02d      	beq.n	801335c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	685a      	ldr	r2, [r3, #4]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801330e:	605a      	str	r2, [r3, #4]
}
 8013310:	e024      	b.n	801335c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013316:	2b00      	cmp	r3, #0
 8013318:	d10e      	bne.n	8013338 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801331e:	b29b      	uxth	r3, r3
 8013320:	11db      	asrs	r3, r3, #7
 8013322:	b2db      	uxtb	r3, r3
 8013324:	f003 0306 	and.w	r3, r3, #6
 8013328:	b2db      	uxtb	r3, r3
 801332a:	f063 030f 	orn	r3, r3, #15
 801332e:	b2da      	uxtb	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	611a      	str	r2, [r3, #16]
}
 8013336:	e011      	b.n	801335c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801333c:	2b01      	cmp	r3, #1
 801333e:	d10d      	bne.n	801335c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013344:	b29b      	uxth	r3, r3
 8013346:	11db      	asrs	r3, r3, #7
 8013348:	b2db      	uxtb	r3, r3
 801334a:	f003 0306 	and.w	r3, r3, #6
 801334e:	b2db      	uxtb	r3, r3
 8013350:	f063 030e 	orn	r3, r3, #14
 8013354:	b2da      	uxtb	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	611a      	str	r2, [r3, #16]
}
 801335c:	bf00      	nop
 801335e:	370c      	adds	r7, #12
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr

08013368 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013374:	b2da      	uxtb	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013380:	2b00      	cmp	r3, #0
 8013382:	d103      	bne.n	801338c <I2C_Master_ADD10+0x24>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013388:	2b00      	cmp	r3, #0
 801338a:	d011      	beq.n	80133b0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013392:	2b00      	cmp	r3, #0
 8013394:	d104      	bne.n	80133a0 <I2C_Master_ADD10+0x38>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801339c:	2b00      	cmp	r3, #0
 801339e:	d007      	beq.n	80133b0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	685a      	ldr	r2, [r3, #4]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80133ae:	605a      	str	r2, [r3, #4]
    }
  }
}
 80133b0:	bf00      	nop
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80133bc:	b480      	push	{r7}
 80133be:	b091      	sub	sp, #68	; 0x44
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80133ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b22      	cmp	r3, #34	; 0x22
 80133e4:	f040 8169 	bne.w	80136ba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d10f      	bne.n	8013410 <I2C_Master_ADDR+0x54>
 80133f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80133f4:	2b40      	cmp	r3, #64	; 0x40
 80133f6:	d10b      	bne.n	8013410 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80133f8:	2300      	movs	r3, #0
 80133fa:	633b      	str	r3, [r7, #48]	; 0x30
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	633b      	str	r3, [r7, #48]	; 0x30
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	699b      	ldr	r3, [r3, #24]
 801340a:	633b      	str	r3, [r7, #48]	; 0x30
 801340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340e:	e160      	b.n	80136d2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013414:	2b00      	cmp	r3, #0
 8013416:	d11d      	bne.n	8013454 <I2C_Master_ADDR+0x98>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013420:	d118      	bne.n	8013454 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013422:	2300      	movs	r3, #0
 8013424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	699b      	ldr	r3, [r3, #24]
 8013434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013436:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013446:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801344c:	1c5a      	adds	r2, r3, #1
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	651a      	str	r2, [r3, #80]	; 0x50
 8013452:	e13e      	b.n	80136d2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013458:	b29b      	uxth	r3, r3
 801345a:	2b00      	cmp	r3, #0
 801345c:	d113      	bne.n	8013486 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801345e:	2300      	movs	r3, #0
 8013460:	62bb      	str	r3, [r7, #40]	; 0x28
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	695b      	ldr	r3, [r3, #20]
 8013468:	62bb      	str	r3, [r7, #40]	; 0x28
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	699b      	ldr	r3, [r3, #24]
 8013470:	62bb      	str	r3, [r7, #40]	; 0x28
 8013472:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	e115      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801348a:	b29b      	uxth	r3, r3
 801348c:	2b01      	cmp	r3, #1
 801348e:	f040 808a 	bne.w	80135a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8013492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013498:	d137      	bne.n	801350a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134a8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134b8:	d113      	bne.n	80134e2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	681a      	ldr	r2, [r3, #0]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134c8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80134ca:	2300      	movs	r3, #0
 80134cc:	627b      	str	r3, [r7, #36]	; 0x24
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	627b      	str	r3, [r7, #36]	; 0x24
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	699b      	ldr	r3, [r3, #24]
 80134dc:	627b      	str	r3, [r7, #36]	; 0x24
 80134de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e0:	e0e7      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80134e2:	2300      	movs	r3, #0
 80134e4:	623b      	str	r3, [r7, #32]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	623b      	str	r3, [r7, #32]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	699b      	ldr	r3, [r3, #24]
 80134f4:	623b      	str	r3, [r7, #32]
 80134f6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	e0d3      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801350c:	2b08      	cmp	r3, #8
 801350e:	d02e      	beq.n	801356e <I2C_Master_ADDR+0x1b2>
 8013510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013512:	2b20      	cmp	r3, #32
 8013514:	d02b      	beq.n	801356e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8013516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013518:	2b12      	cmp	r3, #18
 801351a:	d102      	bne.n	8013522 <I2C_Master_ADDR+0x166>
 801351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351e:	2b01      	cmp	r3, #1
 8013520:	d125      	bne.n	801356e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	2b04      	cmp	r3, #4
 8013526:	d00e      	beq.n	8013546 <I2C_Master_ADDR+0x18a>
 8013528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352a:	2b02      	cmp	r3, #2
 801352c:	d00b      	beq.n	8013546 <I2C_Master_ADDR+0x18a>
 801352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013530:	2b10      	cmp	r3, #16
 8013532:	d008      	beq.n	8013546 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013542:	601a      	str	r2, [r3, #0]
 8013544:	e007      	b.n	8013556 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013554:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013556:	2300      	movs	r3, #0
 8013558:	61fb      	str	r3, [r7, #28]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	695b      	ldr	r3, [r3, #20]
 8013560:	61fb      	str	r3, [r7, #28]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	61fb      	str	r3, [r7, #28]
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	e0a1      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801357c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801357e:	2300      	movs	r3, #0
 8013580:	61bb      	str	r3, [r7, #24]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	61bb      	str	r3, [r7, #24]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	699b      	ldr	r3, [r3, #24]
 8013590:	61bb      	str	r3, [r7, #24]
 8013592:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	e085      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	2b02      	cmp	r3, #2
 80135ae:	d14d      	bne.n	801364c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80135b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b2:	2b04      	cmp	r3, #4
 80135b4:	d016      	beq.n	80135e4 <I2C_Master_ADDR+0x228>
 80135b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	d013      	beq.n	80135e4 <I2C_Master_ADDR+0x228>
 80135bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135be:	2b10      	cmp	r3, #16
 80135c0:	d010      	beq.n	80135e4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80135d0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80135e0:	601a      	str	r2, [r3, #0]
 80135e2:	e007      	b.n	80135f4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80135f2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80135fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013602:	d117      	bne.n	8013634 <I2C_Master_ADDR+0x278>
 8013604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013606:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801360a:	d00b      	beq.n	8013624 <I2C_Master_ADDR+0x268>
 801360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360e:	2b01      	cmp	r3, #1
 8013610:	d008      	beq.n	8013624 <I2C_Master_ADDR+0x268>
 8013612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013614:	2b08      	cmp	r3, #8
 8013616:	d005      	beq.n	8013624 <I2C_Master_ADDR+0x268>
 8013618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801361a:	2b10      	cmp	r3, #16
 801361c:	d002      	beq.n	8013624 <I2C_Master_ADDR+0x268>
 801361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013620:	2b20      	cmp	r3, #32
 8013622:	d107      	bne.n	8013634 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013632:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013634:	2300      	movs	r3, #0
 8013636:	617b      	str	r3, [r7, #20]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	695b      	ldr	r3, [r3, #20]
 801363e:	617b      	str	r3, [r7, #20]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	699b      	ldr	r3, [r3, #24]
 8013646:	617b      	str	r3, [r7, #20]
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	e032      	b.n	80136b2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801365a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801366a:	d117      	bne.n	801369c <I2C_Master_ADDR+0x2e0>
 801366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013672:	d00b      	beq.n	801368c <I2C_Master_ADDR+0x2d0>
 8013674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013676:	2b01      	cmp	r3, #1
 8013678:	d008      	beq.n	801368c <I2C_Master_ADDR+0x2d0>
 801367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801367c:	2b08      	cmp	r3, #8
 801367e:	d005      	beq.n	801368c <I2C_Master_ADDR+0x2d0>
 8013680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013682:	2b10      	cmp	r3, #16
 8013684:	d002      	beq.n	801368c <I2C_Master_ADDR+0x2d0>
 8013686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013688:	2b20      	cmp	r3, #32
 801368a:	d107      	bne.n	801369c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	685a      	ldr	r2, [r3, #4]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801369a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801369c:	2300      	movs	r3, #0
 801369e:	613b      	str	r3, [r7, #16]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	695b      	ldr	r3, [r3, #20]
 80136a6:	613b      	str	r3, [r7, #16]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	699b      	ldr	r3, [r3, #24]
 80136ae:	613b      	str	r3, [r7, #16]
 80136b0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2200      	movs	r2, #0
 80136b6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80136b8:	e00b      	b.n	80136d2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80136ba:	2300      	movs	r3, #0
 80136bc:	60fb      	str	r3, [r7, #12]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	695b      	ldr	r3, [r3, #20]
 80136c4:	60fb      	str	r3, [r7, #12]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	699b      	ldr	r3, [r3, #24]
 80136cc:	60fb      	str	r3, [r7, #12]
 80136ce:	68fb      	ldr	r3, [r7, #12]
}
 80136d0:	e7ff      	b.n	80136d2 <I2C_Master_ADDR+0x316>
 80136d2:	bf00      	nop
 80136d4:	3744      	adds	r7, #68	; 0x44
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr

080136de <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b084      	sub	sp, #16
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80136ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d02b      	beq.n	8013750 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fc:	781a      	ldrb	r2, [r3, #0]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013708:	1c5a      	adds	r2, r3, #1
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013712:	b29b      	uxth	r3, r3
 8013714:	3b01      	subs	r3, #1
 8013716:	b29a      	uxth	r2, r3
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013720:	b29b      	uxth	r3, r3
 8013722:	2b00      	cmp	r3, #0
 8013724:	d114      	bne.n	8013750 <I2C_SlaveTransmit_TXE+0x72>
 8013726:	7bfb      	ldrb	r3, [r7, #15]
 8013728:	2b29      	cmp	r3, #41	; 0x29
 801372a:	d111      	bne.n	8013750 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	685a      	ldr	r2, [r3, #4]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801373a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2221      	movs	r2, #33	; 0x21
 8013740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2228      	movs	r2, #40	; 0x28
 8013746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff fa04 	bl	8012b58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8013750:	bf00      	nop
 8013752:	3710      	adds	r7, #16
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013764:	b29b      	uxth	r3, r3
 8013766:	2b00      	cmp	r3, #0
 8013768:	d011      	beq.n	801378e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801376e:	781a      	ldrb	r2, [r3, #0]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801377a:	1c5a      	adds	r2, r3, #1
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013784:	b29b      	uxth	r3, r3
 8013786:	3b01      	subs	r3, #1
 8013788:	b29a      	uxth	r2, r3
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801378e:	bf00      	nop
 8013790:	370c      	adds	r7, #12
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr

0801379a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801379a:	b580      	push	{r7, lr}
 801379c:	b084      	sub	sp, #16
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80137a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d02c      	beq.n	801380e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	691a      	ldr	r2, [r3, #16]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137be:	b2d2      	uxtb	r2, r2
 80137c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c6:	1c5a      	adds	r2, r3, #1
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137d0:	b29b      	uxth	r3, r3
 80137d2:	3b01      	subs	r3, #1
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137de:	b29b      	uxth	r3, r3
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d114      	bne.n	801380e <I2C_SlaveReceive_RXNE+0x74>
 80137e4:	7bfb      	ldrb	r3, [r7, #15]
 80137e6:	2b2a      	cmp	r3, #42	; 0x2a
 80137e8:	d111      	bne.n	801380e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	685a      	ldr	r2, [r3, #4]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80137f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2222      	movs	r2, #34	; 0x22
 80137fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2228      	movs	r2, #40	; 0x28
 8013804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7ff f9af 	bl	8012b6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801380e:	bf00      	nop
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}

08013816 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8013816:	b480      	push	{r7}
 8013818:	b083      	sub	sp, #12
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013822:	b29b      	uxth	r3, r3
 8013824:	2b00      	cmp	r3, #0
 8013826:	d012      	beq.n	801384e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	691a      	ldr	r2, [r3, #16]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013832:	b2d2      	uxtb	r2, r2
 8013834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801383a:	1c5a      	adds	r2, r3, #1
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013844:	b29b      	uxth	r3, r3
 8013846:	3b01      	subs	r3, #1
 8013848:	b29a      	uxth	r2, r3
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801384e:	bf00      	nop
 8013850:	370c      	adds	r7, #12
 8013852:	46bd      	mov	sp, r7
 8013854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013858:	4770      	bx	lr

0801385a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801385a:	b580      	push	{r7, lr}
 801385c:	b084      	sub	sp, #16
 801385e:	af00      	add	r7, sp, #0
 8013860:	6078      	str	r0, [r7, #4]
 8013862:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8013864:	2300      	movs	r3, #0
 8013866:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801386e:	b2db      	uxtb	r3, r3
 8013870:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013874:	2b28      	cmp	r3, #40	; 0x28
 8013876:	d127      	bne.n	80138c8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013886:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	089b      	lsrs	r3, r3, #2
 801388c:	f003 0301 	and.w	r3, r3, #1
 8013890:	2b00      	cmp	r3, #0
 8013892:	d101      	bne.n	8013898 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8013894:	2301      	movs	r3, #1
 8013896:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	09db      	lsrs	r3, r3, #7
 801389c:	f003 0301 	and.w	r3, r3, #1
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d103      	bne.n	80138ac <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	81bb      	strh	r3, [r7, #12]
 80138aa:	e002      	b.n	80138b2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	699b      	ldr	r3, [r3, #24]
 80138b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80138ba:	89ba      	ldrh	r2, [r7, #12]
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
 80138be:	4619      	mov	r1, r3
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f7ff f95d 	bl	8012b80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80138c6:	e008      	b.n	80138da <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f06f 0202 	mvn.w	r2, #2
 80138d0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2200      	movs	r2, #0
 80138d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80138da:	bf00      	nop
 80138dc:	3710      	adds	r7, #16
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
	...

080138e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80138f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	685a      	ldr	r2, [r3, #4]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013902:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8013904:	2300      	movs	r3, #0
 8013906:	60bb      	str	r3, [r7, #8]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	695b      	ldr	r3, [r3, #20]
 801390e:	60bb      	str	r3, [r7, #8]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f042 0201 	orr.w	r2, r2, #1
 801391e:	601a      	str	r2, [r3, #0]
 8013920:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013930:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801393c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013940:	d172      	bne.n	8013a28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013942:	7bfb      	ldrb	r3, [r7, #15]
 8013944:	2b22      	cmp	r3, #34	; 0x22
 8013946:	d002      	beq.n	801394e <I2C_Slave_STOPF+0x6a>
 8013948:	7bfb      	ldrb	r3, [r7, #15]
 801394a:	2b2a      	cmp	r3, #42	; 0x2a
 801394c:	d135      	bne.n	80139ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	b29a      	uxth	r2, r3
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013960:	b29b      	uxth	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d005      	beq.n	8013972 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801396a:	f043 0204 	orr.w	r2, r3, #4
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	685a      	ldr	r2, [r3, #4]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013980:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013986:	4618      	mov	r0, r3
 8013988:	f7fe f87a 	bl	8011a80 <HAL_DMA_GetState>
 801398c:	4603      	mov	r3, r0
 801398e:	2b01      	cmp	r3, #1
 8013990:	d049      	beq.n	8013a26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013996:	4a69      	ldr	r2, [pc, #420]	; (8013b3c <I2C_Slave_STOPF+0x258>)
 8013998:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fd fec2 	bl	8011728 <HAL_DMA_Abort_IT>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d03d      	beq.n	8013a26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80139b4:	4610      	mov	r0, r2
 80139b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80139b8:	e035      	b.n	8013a26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	b29a      	uxth	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d005      	beq.n	80139de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d6:	f043 0204 	orr.w	r2, r3, #4
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685a      	ldr	r2, [r3, #4]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80139ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe f844 	bl	8011a80 <HAL_DMA_GetState>
 80139f8:	4603      	mov	r3, r0
 80139fa:	2b01      	cmp	r3, #1
 80139fc:	d014      	beq.n	8013a28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a02:	4a4e      	ldr	r2, [pc, #312]	; (8013b3c <I2C_Slave_STOPF+0x258>)
 8013a04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fd fe8c 	bl	8011728 <HAL_DMA_Abort_IT>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d008      	beq.n	8013a28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013a20:	4610      	mov	r0, r2
 8013a22:	4798      	blx	r3
 8013a24:	e000      	b.n	8013a28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8013a26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d03e      	beq.n	8013ab0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	695b      	ldr	r3, [r3, #20]
 8013a38:	f003 0304 	and.w	r3, r3, #4
 8013a3c:	2b04      	cmp	r3, #4
 8013a3e:	d112      	bne.n	8013a66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	691a      	ldr	r2, [r3, #16]
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a4a:	b2d2      	uxtb	r2, r2
 8013a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a52:	1c5a      	adds	r2, r3, #1
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	3b01      	subs	r3, #1
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	695b      	ldr	r3, [r3, #20]
 8013a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a70:	2b40      	cmp	r3, #64	; 0x40
 8013a72:	d112      	bne.n	8013a9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	691a      	ldr	r2, [r3, #16]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7e:	b2d2      	uxtb	r2, r2
 8013a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a86:	1c5a      	adds	r2, r3, #1
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	3b01      	subs	r3, #1
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d005      	beq.n	8013ab0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aa8:	f043 0204 	orr.w	r2, r3, #4
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d003      	beq.n	8013ac0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 f8b3 	bl	8013c24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8013abe:	e039      	b.n	8013b34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
 8013ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ac4:	d109      	bne.n	8013ada <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2228      	movs	r2, #40	; 0x28
 8013ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7ff f849 	bl	8012b6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	2b28      	cmp	r3, #40	; 0x28
 8013ae4:	d111      	bne.n	8013b0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4a15      	ldr	r2, [pc, #84]	; (8013b40 <I2C_Slave_STOPF+0x25c>)
 8013aea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2220      	movs	r2, #32
 8013af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2200      	movs	r2, #0
 8013afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7ff f84a 	bl	8012b9c <HAL_I2C_ListenCpltCallback>
}
 8013b08:	e014      	b.n	8013b34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b0e:	2b22      	cmp	r3, #34	; 0x22
 8013b10:	d002      	beq.n	8013b18 <I2C_Slave_STOPF+0x234>
 8013b12:	7bfb      	ldrb	r3, [r7, #15]
 8013b14:	2b22      	cmp	r3, #34	; 0x22
 8013b16:	d10d      	bne.n	8013b34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2220      	movs	r2, #32
 8013b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f7ff f81c 	bl	8012b6c <HAL_I2C_SlaveRxCpltCallback>
}
 8013b34:	bf00      	nop
 8013b36:	3710      	adds	r7, #16
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	080140ad 	.word	0x080140ad
 8013b40:	ffff0000 	.word	0xffff0000

08013b44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	2b08      	cmp	r3, #8
 8013b5e:	d002      	beq.n	8013b66 <I2C_Slave_AF+0x22>
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	2b20      	cmp	r3, #32
 8013b64:	d129      	bne.n	8013bba <I2C_Slave_AF+0x76>
 8013b66:	7bfb      	ldrb	r3, [r7, #15]
 8013b68:	2b28      	cmp	r3, #40	; 0x28
 8013b6a:	d126      	bne.n	8013bba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4a2c      	ldr	r2, [pc, #176]	; (8013c20 <I2C_Slave_AF+0xdc>)
 8013b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	685a      	ldr	r2, [r3, #4]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013b80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013b8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013b9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2220      	movs	r2, #32
 8013ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7fe fff2 	bl	8012b9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8013bb8:	e02e      	b.n	8013c18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8013bba:	7bfb      	ldrb	r3, [r7, #15]
 8013bbc:	2b21      	cmp	r3, #33	; 0x21
 8013bbe:	d126      	bne.n	8013c0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4a17      	ldr	r2, [pc, #92]	; (8013c20 <I2C_Slave_AF+0xdc>)
 8013bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2221      	movs	r2, #33	; 0x21
 8013bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2220      	movs	r2, #32
 8013bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	685a      	ldr	r2, [r3, #4]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013bea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013bf4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013c04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7fe ffa6 	bl	8012b58 <HAL_I2C_SlaveTxCpltCallback>
}
 8013c0c:	e004      	b.n	8013c18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013c16:	615a      	str	r2, [r3, #20]
}
 8013c18:	bf00      	nop
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	ffff0000 	.word	0xffff0000

08013c24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013c3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013c3c:	7bbb      	ldrb	r3, [r7, #14]
 8013c3e:	2b10      	cmp	r3, #16
 8013c40:	d002      	beq.n	8013c48 <I2C_ITError+0x24>
 8013c42:	7bbb      	ldrb	r3, [r7, #14]
 8013c44:	2b40      	cmp	r3, #64	; 0x40
 8013c46:	d10a      	bne.n	8013c5e <I2C_ITError+0x3a>
 8013c48:	7bfb      	ldrb	r3, [r7, #15]
 8013c4a:	2b22      	cmp	r3, #34	; 0x22
 8013c4c:	d107      	bne.n	8013c5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013c5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013c5e:	7bfb      	ldrb	r3, [r7, #15]
 8013c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013c64:	2b28      	cmp	r3, #40	; 0x28
 8013c66:	d107      	bne.n	8013c78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2228      	movs	r2, #40	; 0x28
 8013c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013c76:	e015      	b.n	8013ca4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c86:	d00a      	beq.n	8013c9e <I2C_ITError+0x7a>
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
 8013c8a:	2b60      	cmp	r3, #96	; 0x60
 8013c8c:	d007      	beq.n	8013c9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2220      	movs	r2, #32
 8013c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013cb2:	d162      	bne.n	8013d7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	685a      	ldr	r2, [r3, #4]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013cc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d020      	beq.n	8013d14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cd6:	4a6a      	ldr	r2, [pc, #424]	; (8013e80 <I2C_ITError+0x25c>)
 8013cd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7fd fd22 	bl	8011728 <HAL_DMA_Abort_IT>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 8089 	beq.w	8013dfe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f022 0201 	bic.w	r2, r2, #1
 8013cfa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2220      	movs	r2, #32
 8013d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013d0e:	4610      	mov	r0, r2
 8013d10:	4798      	blx	r3
 8013d12:	e074      	b.n	8013dfe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d18:	4a59      	ldr	r2, [pc, #356]	; (8013e80 <I2C_ITError+0x25c>)
 8013d1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fd fd01 	bl	8011728 <HAL_DMA_Abort_IT>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d068      	beq.n	8013dfe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d36:	2b40      	cmp	r3, #64	; 0x40
 8013d38:	d10b      	bne.n	8013d52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	691a      	ldr	r2, [r3, #16]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d44:	b2d2      	uxtb	r2, r2
 8013d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4c:	1c5a      	adds	r2, r3, #1
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	f022 0201 	bic.w	r2, r2, #1
 8013d60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2220      	movs	r2, #32
 8013d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013d74:	4610      	mov	r0, r2
 8013d76:	4798      	blx	r3
 8013d78:	e041      	b.n	8013dfe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d80:	b2db      	uxtb	r3, r3
 8013d82:	2b60      	cmp	r3, #96	; 0x60
 8013d84:	d125      	bne.n	8013dd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2220      	movs	r2, #32
 8013d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2200      	movs	r2, #0
 8013d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	695b      	ldr	r3, [r3, #20]
 8013d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d9e:	2b40      	cmp	r3, #64	; 0x40
 8013da0:	d10b      	bne.n	8013dba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	691a      	ldr	r2, [r3, #16]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dac:	b2d2      	uxtb	r2, r2
 8013dae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db4:	1c5a      	adds	r2, r3, #1
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f022 0201 	bic.w	r2, r2, #1
 8013dc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f7fe ff0e 	bl	8012bec <HAL_I2C_AbortCpltCallback>
 8013dd0:	e015      	b.n	8013dfe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	695b      	ldr	r3, [r3, #20]
 8013dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ddc:	2b40      	cmp	r3, #64	; 0x40
 8013dde:	d10b      	bne.n	8013df8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	691a      	ldr	r2, [r3, #16]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dea:	b2d2      	uxtb	r2, r2
 8013dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df2:	1c5a      	adds	r2, r3, #1
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f7fe feed 	bl	8012bd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	f003 0301 	and.w	r3, r3, #1
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d10e      	bne.n	8013e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d109      	bne.n	8013e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d104      	bne.n	8013e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d007      	beq.n	8013e3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	685a      	ldr	r2, [r3, #4]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013e3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e48:	f003 0304 	and.w	r3, r3, #4
 8013e4c:	2b04      	cmp	r3, #4
 8013e4e:	d113      	bne.n	8013e78 <I2C_ITError+0x254>
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
 8013e52:	2b28      	cmp	r3, #40	; 0x28
 8013e54:	d110      	bne.n	8013e78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	4a0a      	ldr	r2, [pc, #40]	; (8013e84 <I2C_ITError+0x260>)
 8013e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2220      	movs	r2, #32
 8013e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7fe fe92 	bl	8012b9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8013e78:	bf00      	nop
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	080140ad 	.word	0x080140ad
 8013e84:	ffff0000 	.word	0xffff0000

08013e88 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b086      	sub	sp, #24
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e9c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ea4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eaa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	685a      	ldr	r2, [r3, #4]
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013eba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d003      	beq.n	8013ecc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ec8:	2200      	movs	r2, #0
 8013eca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d003      	beq.n	8013edc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed8:	2200      	movs	r2, #0
 8013eda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8013edc:	7cfb      	ldrb	r3, [r7, #19]
 8013ede:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8013ee2:	2b21      	cmp	r3, #33	; 0x21
 8013ee4:	d007      	beq.n	8013ef6 <I2C_DMAXferCplt+0x6e>
 8013ee6:	7cfb      	ldrb	r3, [r7, #19]
 8013ee8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8013eec:	2b22      	cmp	r3, #34	; 0x22
 8013eee:	d131      	bne.n	8013f54 <I2C_DMAXferCplt+0xcc>
 8013ef0:	7cbb      	ldrb	r3, [r7, #18]
 8013ef2:	2b20      	cmp	r3, #32
 8013ef4:	d12e      	bne.n	8013f54 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	685a      	ldr	r2, [r3, #4]
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013f04:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8013f0c:	7cfb      	ldrb	r3, [r7, #19]
 8013f0e:	2b29      	cmp	r3, #41	; 0x29
 8013f10:	d10a      	bne.n	8013f28 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2221      	movs	r2, #33	; 0x21
 8013f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2228      	movs	r2, #40	; 0x28
 8013f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013f20:	6978      	ldr	r0, [r7, #20]
 8013f22:	f7fe fe19 	bl	8012b58 <HAL_I2C_SlaveTxCpltCallback>
 8013f26:	e00c      	b.n	8013f42 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013f28:	7cfb      	ldrb	r3, [r7, #19]
 8013f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8013f2c:	d109      	bne.n	8013f42 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	2222      	movs	r2, #34	; 0x22
 8013f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	2228      	movs	r2, #40	; 0x28
 8013f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013f3c:	6978      	ldr	r0, [r7, #20]
 8013f3e:	f7fe fe15 	bl	8012b6c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	685a      	ldr	r2, [r3, #4]
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8013f50:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8013f52:	e06a      	b.n	801402a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013f5a:	b2db      	uxtb	r3, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d064      	beq.n	801402a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d107      	bne.n	8013f7a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013f78:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	685a      	ldr	r2, [r3, #4]
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013f88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013f90:	d009      	beq.n	8013fa6 <I2C_DMAXferCplt+0x11e>
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2b08      	cmp	r3, #8
 8013f96:	d006      	beq.n	8013fa6 <I2C_DMAXferCplt+0x11e>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8013f9e:	d002      	beq.n	8013fa6 <I2C_DMAXferCplt+0x11e>
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2b20      	cmp	r3, #32
 8013fa4:	d107      	bne.n	8013fb6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	681a      	ldr	r2, [r3, #0]
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013fb4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	685a      	ldr	r2, [r3, #4]
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013fc4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013fd4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d003      	beq.n	8013fec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8013fe4:	6978      	ldr	r0, [r7, #20]
 8013fe6:	f7fe fdf7 	bl	8012bd8 <HAL_I2C_ErrorCallback>
}
 8013fea:	e01e      	b.n	801402a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	2220      	movs	r2, #32
 8013ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	2b40      	cmp	r3, #64	; 0x40
 8013ffe:	d10a      	bne.n	8014016 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	2200      	movs	r2, #0
 8014004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	2200      	movs	r2, #0
 801400c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801400e:	6978      	ldr	r0, [r7, #20]
 8014010:	f7fe fdd8 	bl	8012bc4 <HAL_I2C_MemRxCpltCallback>
}
 8014014:	e009      	b.n	801402a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	2200      	movs	r2, #0
 801401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	2212      	movs	r2, #18
 8014022:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8014024:	6978      	ldr	r0, [r7, #20]
 8014026:	f7f8 febb 	bl	800cda0 <HAL_I2C_MasterRxCpltCallback>
}
 801402a:	bf00      	nop
 801402c:	3718      	adds	r7, #24
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014032:	b580      	push	{r7, lr}
 8014034:	b084      	sub	sp, #16
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801403e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014044:	2b00      	cmp	r3, #0
 8014046:	d003      	beq.n	8014050 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801404c:	2200      	movs	r2, #0
 801404e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014054:	2b00      	cmp	r3, #0
 8014056:	d003      	beq.n	8014060 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801405c:	2200      	movs	r2, #0
 801405e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f7fd fd1b 	bl	8011a9c <HAL_DMA_GetError>
 8014066:	4603      	mov	r3, r0
 8014068:	2b02      	cmp	r3, #2
 801406a:	d01b      	beq.n	80140a4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801407a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2200      	movs	r2, #0
 8014080:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2220      	movs	r2, #32
 8014086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2200      	movs	r2, #0
 801408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014096:	f043 0210 	orr.w	r2, r3, #16
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f7fe fd9a 	bl	8012bd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80140a4:	bf00      	nop
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b086      	sub	sp, #24
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80140b4:	2300      	movs	r3, #0
 80140b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80140c6:	4b4b      	ldr	r3, [pc, #300]	; (80141f4 <I2C_DMAAbort+0x148>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	08db      	lsrs	r3, r3, #3
 80140cc:	4a4a      	ldr	r2, [pc, #296]	; (80141f8 <I2C_DMAAbort+0x14c>)
 80140ce:	fba2 2303 	umull	r2, r3, r2, r3
 80140d2:	0a1a      	lsrs	r2, r3, #8
 80140d4:	4613      	mov	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4413      	add	r3, r2
 80140da:	00da      	lsls	r2, r3, #3
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ea:	f043 0220 	orr.w	r2, r3, #32
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80140f2:	e00a      	b.n	801410a <I2C_DMAAbort+0x5e>
    }
    count--;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3b01      	subs	r3, #1
 80140f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014108:	d0ea      	beq.n	80140e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801410e:	2b00      	cmp	r3, #0
 8014110:	d003      	beq.n	801411a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014116:	2200      	movs	r2, #0
 8014118:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801411e:	2b00      	cmp	r3, #0
 8014120:	d003      	beq.n	801412a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014126:	2200      	movs	r2, #0
 8014128:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014138:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	2200      	movs	r2, #0
 801413e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014144:	2b00      	cmp	r3, #0
 8014146:	d003      	beq.n	8014150 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801414c:	2200      	movs	r2, #0
 801414e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014154:	2b00      	cmp	r3, #0
 8014156:	d003      	beq.n	8014160 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801415c:	2200      	movs	r2, #0
 801415e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f022 0201 	bic.w	r2, r2, #1
 801416e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b60      	cmp	r3, #96	; 0x60
 801417a:	d10e      	bne.n	801419a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	2220      	movs	r2, #32
 8014180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	2200      	movs	r2, #0
 8014188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	2200      	movs	r2, #0
 8014190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014192:	6978      	ldr	r0, [r7, #20]
 8014194:	f7fe fd2a 	bl	8012bec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014198:	e027      	b.n	80141ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801419a:	7cfb      	ldrb	r3, [r7, #19]
 801419c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80141a0:	2b28      	cmp	r3, #40	; 0x28
 80141a2:	d117      	bne.n	80141d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	f042 0201 	orr.w	r2, r2, #1
 80141b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80141c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	2200      	movs	r2, #0
 80141c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	2228      	movs	r2, #40	; 0x28
 80141ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80141d2:	e007      	b.n	80141e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	2220      	movs	r2, #32
 80141d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	2200      	movs	r2, #0
 80141e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80141e4:	6978      	ldr	r0, [r7, #20]
 80141e6:	f7fe fcf7 	bl	8012bd8 <HAL_I2C_ErrorCallback>
}
 80141ea:	bf00      	nop
 80141ec:	3718      	adds	r7, #24
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	20000054 	.word	0x20000054
 80141f8:	14f8b589 	.word	0x14f8b589

080141fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014204:	2300      	movs	r3, #0
 8014206:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8014208:	4b13      	ldr	r3, [pc, #76]	; (8014258 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	08db      	lsrs	r3, r3, #3
 801420e:	4a13      	ldr	r2, [pc, #76]	; (801425c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8014210:	fba2 2303 	umull	r2, r3, r2, r3
 8014214:	0a1a      	lsrs	r2, r3, #8
 8014216:	4613      	mov	r3, r2
 8014218:	009b      	lsls	r3, r3, #2
 801421a:	4413      	add	r3, r2
 801421c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	3b01      	subs	r3, #1
 8014222:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d107      	bne.n	801423a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801422e:	f043 0220 	orr.w	r2, r3, #32
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8014236:	2301      	movs	r3, #1
 8014238:	e008      	b.n	801424c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014248:	d0e9      	beq.n	801421e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801424a:	2300      	movs	r3, #0
}
 801424c:	4618      	mov	r0, r3
 801424e:	3714      	adds	r7, #20
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr
 8014258:	20000054 	.word	0x20000054
 801425c:	14f8b589 	.word	0x14f8b589

08014260 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801426c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014270:	d103      	bne.n	801427a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2201      	movs	r2, #1
 8014276:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8014278:	e007      	b.n	801428a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8014282:	d102      	bne.n	801428a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2208      	movs	r2, #8
 8014288:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801428a:	bf00      	nop
 801428c:	370c      	adds	r7, #12
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr
	...

08014298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d101      	bne.n	80142aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e25b      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	f003 0301 	and.w	r3, r3, #1
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d075      	beq.n	80143a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80142b6:	4ba3      	ldr	r3, [pc, #652]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80142b8:	689b      	ldr	r3, [r3, #8]
 80142ba:	f003 030c 	and.w	r3, r3, #12
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d00c      	beq.n	80142dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80142c2:	4ba0      	ldr	r3, [pc, #640]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80142c4:	689b      	ldr	r3, [r3, #8]
 80142c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80142ca:	2b08      	cmp	r3, #8
 80142cc:	d112      	bne.n	80142f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80142ce:	4b9d      	ldr	r3, [pc, #628]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80142d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80142da:	d10b      	bne.n	80142f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80142dc:	4b99      	ldr	r3, [pc, #612]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d05b      	beq.n	80143a0 <HAL_RCC_OscConfig+0x108>
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d157      	bne.n	80143a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80142f0:	2301      	movs	r3, #1
 80142f2:	e236      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80142fc:	d106      	bne.n	801430c <HAL_RCC_OscConfig+0x74>
 80142fe:	4b91      	ldr	r3, [pc, #580]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	4a90      	ldr	r2, [pc, #576]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014308:	6013      	str	r3, [r2, #0]
 801430a:	e01d      	b.n	8014348 <HAL_RCC_OscConfig+0xb0>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014314:	d10c      	bne.n	8014330 <HAL_RCC_OscConfig+0x98>
 8014316:	4b8b      	ldr	r3, [pc, #556]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4a8a      	ldr	r2, [pc, #552]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014320:	6013      	str	r3, [r2, #0]
 8014322:	4b88      	ldr	r3, [pc, #544]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	4a87      	ldr	r2, [pc, #540]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801432c:	6013      	str	r3, [r2, #0]
 801432e:	e00b      	b.n	8014348 <HAL_RCC_OscConfig+0xb0>
 8014330:	4b84      	ldr	r3, [pc, #528]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4a83      	ldr	r2, [pc, #524]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801433a:	6013      	str	r3, [r2, #0]
 801433c:	4b81      	ldr	r3, [pc, #516]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	4a80      	ldr	r2, [pc, #512]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d013      	beq.n	8014378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014350:	f7fc f8ac 	bl	80104ac <HAL_GetTick>
 8014354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014356:	e008      	b.n	801436a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014358:	f7fc f8a8 	bl	80104ac <HAL_GetTick>
 801435c:	4602      	mov	r2, r0
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	2b64      	cmp	r3, #100	; 0x64
 8014364:	d901      	bls.n	801436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014366:	2303      	movs	r3, #3
 8014368:	e1fb      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801436a:	4b76      	ldr	r3, [pc, #472]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014372:	2b00      	cmp	r3, #0
 8014374:	d0f0      	beq.n	8014358 <HAL_RCC_OscConfig+0xc0>
 8014376:	e014      	b.n	80143a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014378:	f7fc f898 	bl	80104ac <HAL_GetTick>
 801437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801437e:	e008      	b.n	8014392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014380:	f7fc f894 	bl	80104ac <HAL_GetTick>
 8014384:	4602      	mov	r2, r0
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	2b64      	cmp	r3, #100	; 0x64
 801438c:	d901      	bls.n	8014392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801438e:	2303      	movs	r3, #3
 8014390:	e1e7      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8014392:	4b6c      	ldr	r3, [pc, #432]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1f0      	bne.n	8014380 <HAL_RCC_OscConfig+0xe8>
 801439e:	e000      	b.n	80143a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80143a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f003 0302 	and.w	r3, r3, #2
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d063      	beq.n	8014476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80143ae:	4b65      	ldr	r3, [pc, #404]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143b0:	689b      	ldr	r3, [r3, #8]
 80143b2:	f003 030c 	and.w	r3, r3, #12
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00b      	beq.n	80143d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80143ba:	4b62      	ldr	r3, [pc, #392]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80143c2:	2b08      	cmp	r3, #8
 80143c4:	d11c      	bne.n	8014400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80143c6:	4b5f      	ldr	r3, [pc, #380]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d116      	bne.n	8014400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80143d2:	4b5c      	ldr	r3, [pc, #368]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f003 0302 	and.w	r3, r3, #2
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d005      	beq.n	80143ea <HAL_RCC_OscConfig+0x152>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	2b01      	cmp	r3, #1
 80143e4:	d001      	beq.n	80143ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80143e6:	2301      	movs	r3, #1
 80143e8:	e1bb      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80143ea:	4b56      	ldr	r3, [pc, #344]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	691b      	ldr	r3, [r3, #16]
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	4952      	ldr	r1, [pc, #328]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80143fa:	4313      	orrs	r3, r2
 80143fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80143fe:	e03a      	b.n	8014476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	68db      	ldr	r3, [r3, #12]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d020      	beq.n	801444a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014408:	4b4f      	ldr	r3, [pc, #316]	; (8014548 <HAL_RCC_OscConfig+0x2b0>)
 801440a:	2201      	movs	r2, #1
 801440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801440e:	f7fc f84d 	bl	80104ac <HAL_GetTick>
 8014412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014414:	e008      	b.n	8014428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014416:	f7fc f849 	bl	80104ac <HAL_GetTick>
 801441a:	4602      	mov	r2, r0
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	2b02      	cmp	r3, #2
 8014422:	d901      	bls.n	8014428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8014424:	2303      	movs	r3, #3
 8014426:	e19c      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014428:	4b46      	ldr	r3, [pc, #280]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f003 0302 	and.w	r3, r3, #2
 8014430:	2b00      	cmp	r3, #0
 8014432:	d0f0      	beq.n	8014416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014434:	4b43      	ldr	r3, [pc, #268]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	691b      	ldr	r3, [r3, #16]
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	4940      	ldr	r1, [pc, #256]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014444:	4313      	orrs	r3, r2
 8014446:	600b      	str	r3, [r1, #0]
 8014448:	e015      	b.n	8014476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801444a:	4b3f      	ldr	r3, [pc, #252]	; (8014548 <HAL_RCC_OscConfig+0x2b0>)
 801444c:	2200      	movs	r2, #0
 801444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014450:	f7fc f82c 	bl	80104ac <HAL_GetTick>
 8014454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8014456:	e008      	b.n	801446a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014458:	f7fc f828 	bl	80104ac <HAL_GetTick>
 801445c:	4602      	mov	r2, r0
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	2b02      	cmp	r3, #2
 8014464:	d901      	bls.n	801446a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8014466:	2303      	movs	r3, #3
 8014468:	e17b      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801446a:	4b36      	ldr	r3, [pc, #216]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	f003 0302 	and.w	r3, r3, #2
 8014472:	2b00      	cmp	r3, #0
 8014474:	d1f0      	bne.n	8014458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f003 0308 	and.w	r3, r3, #8
 801447e:	2b00      	cmp	r3, #0
 8014480:	d030      	beq.n	80144e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	695b      	ldr	r3, [r3, #20]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d016      	beq.n	80144b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801448a:	4b30      	ldr	r3, [pc, #192]	; (801454c <HAL_RCC_OscConfig+0x2b4>)
 801448c:	2201      	movs	r2, #1
 801448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014490:	f7fc f80c 	bl	80104ac <HAL_GetTick>
 8014494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8014496:	e008      	b.n	80144aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014498:	f7fc f808 	bl	80104ac <HAL_GetTick>
 801449c:	4602      	mov	r2, r0
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	1ad3      	subs	r3, r2, r3
 80144a2:	2b02      	cmp	r3, #2
 80144a4:	d901      	bls.n	80144aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80144a6:	2303      	movs	r3, #3
 80144a8:	e15b      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80144aa:	4b26      	ldr	r3, [pc, #152]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80144ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144ae:	f003 0302 	and.w	r3, r3, #2
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d0f0      	beq.n	8014498 <HAL_RCC_OscConfig+0x200>
 80144b6:	e015      	b.n	80144e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80144b8:	4b24      	ldr	r3, [pc, #144]	; (801454c <HAL_RCC_OscConfig+0x2b4>)
 80144ba:	2200      	movs	r2, #0
 80144bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80144be:	f7fb fff5 	bl	80104ac <HAL_GetTick>
 80144c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80144c4:	e008      	b.n	80144d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80144c6:	f7fb fff1 	bl	80104ac <HAL_GetTick>
 80144ca:	4602      	mov	r2, r0
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	2b02      	cmp	r3, #2
 80144d2:	d901      	bls.n	80144d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80144d4:	2303      	movs	r3, #3
 80144d6:	e144      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80144d8:	4b1a      	ldr	r3, [pc, #104]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80144da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144dc:	f003 0302 	and.w	r3, r3, #2
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d1f0      	bne.n	80144c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	f003 0304 	and.w	r3, r3, #4
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f000 80a0 	beq.w	8014632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80144f2:	2300      	movs	r3, #0
 80144f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80144f6:	4b13      	ldr	r3, [pc, #76]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 80144f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d10f      	bne.n	8014522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014502:	2300      	movs	r3, #0
 8014504:	60bb      	str	r3, [r7, #8]
 8014506:	4b0f      	ldr	r3, [pc, #60]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801450a:	4a0e      	ldr	r2, [pc, #56]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 801450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014510:	6413      	str	r3, [r2, #64]	; 0x40
 8014512:	4b0c      	ldr	r3, [pc, #48]	; (8014544 <HAL_RCC_OscConfig+0x2ac>)
 8014514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801451a:	60bb      	str	r3, [r7, #8]
 801451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801451e:	2301      	movs	r3, #1
 8014520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014522:	4b0b      	ldr	r3, [pc, #44]	; (8014550 <HAL_RCC_OscConfig+0x2b8>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801452a:	2b00      	cmp	r3, #0
 801452c:	d121      	bne.n	8014572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801452e:	4b08      	ldr	r3, [pc, #32]	; (8014550 <HAL_RCC_OscConfig+0x2b8>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	4a07      	ldr	r2, [pc, #28]	; (8014550 <HAL_RCC_OscConfig+0x2b8>)
 8014534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801453a:	f7fb ffb7 	bl	80104ac <HAL_GetTick>
 801453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014540:	e011      	b.n	8014566 <HAL_RCC_OscConfig+0x2ce>
 8014542:	bf00      	nop
 8014544:	40023800 	.word	0x40023800
 8014548:	42470000 	.word	0x42470000
 801454c:	42470e80 	.word	0x42470e80
 8014550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014554:	f7fb ffaa 	bl	80104ac <HAL_GetTick>
 8014558:	4602      	mov	r2, r0
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	1ad3      	subs	r3, r2, r3
 801455e:	2b02      	cmp	r3, #2
 8014560:	d901      	bls.n	8014566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8014562:	2303      	movs	r3, #3
 8014564:	e0fd      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014566:	4b81      	ldr	r3, [pc, #516]	; (801476c <HAL_RCC_OscConfig+0x4d4>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801456e:	2b00      	cmp	r3, #0
 8014570:	d0f0      	beq.n	8014554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	2b01      	cmp	r3, #1
 8014578:	d106      	bne.n	8014588 <HAL_RCC_OscConfig+0x2f0>
 801457a:	4b7d      	ldr	r3, [pc, #500]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 801457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801457e:	4a7c      	ldr	r2, [pc, #496]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014580:	f043 0301 	orr.w	r3, r3, #1
 8014584:	6713      	str	r3, [r2, #112]	; 0x70
 8014586:	e01c      	b.n	80145c2 <HAL_RCC_OscConfig+0x32a>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	689b      	ldr	r3, [r3, #8]
 801458c:	2b05      	cmp	r3, #5
 801458e:	d10c      	bne.n	80145aa <HAL_RCC_OscConfig+0x312>
 8014590:	4b77      	ldr	r3, [pc, #476]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014594:	4a76      	ldr	r2, [pc, #472]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014596:	f043 0304 	orr.w	r3, r3, #4
 801459a:	6713      	str	r3, [r2, #112]	; 0x70
 801459c:	4b74      	ldr	r3, [pc, #464]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 801459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145a0:	4a73      	ldr	r2, [pc, #460]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145a2:	f043 0301 	orr.w	r3, r3, #1
 80145a6:	6713      	str	r3, [r2, #112]	; 0x70
 80145a8:	e00b      	b.n	80145c2 <HAL_RCC_OscConfig+0x32a>
 80145aa:	4b71      	ldr	r3, [pc, #452]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ae:	4a70      	ldr	r2, [pc, #448]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145b0:	f023 0301 	bic.w	r3, r3, #1
 80145b4:	6713      	str	r3, [r2, #112]	; 0x70
 80145b6:	4b6e      	ldr	r3, [pc, #440]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ba:	4a6d      	ldr	r2, [pc, #436]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145bc:	f023 0304 	bic.w	r3, r3, #4
 80145c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	689b      	ldr	r3, [r3, #8]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d015      	beq.n	80145f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80145ca:	f7fb ff6f 	bl	80104ac <HAL_GetTick>
 80145ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80145d0:	e00a      	b.n	80145e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80145d2:	f7fb ff6b 	bl	80104ac <HAL_GetTick>
 80145d6:	4602      	mov	r2, r0
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	1ad3      	subs	r3, r2, r3
 80145dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d901      	bls.n	80145e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80145e4:	2303      	movs	r3, #3
 80145e6:	e0bc      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80145e8:	4b61      	ldr	r3, [pc, #388]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80145ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ec:	f003 0302 	and.w	r3, r3, #2
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d0ee      	beq.n	80145d2 <HAL_RCC_OscConfig+0x33a>
 80145f4:	e014      	b.n	8014620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80145f6:	f7fb ff59 	bl	80104ac <HAL_GetTick>
 80145fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80145fc:	e00a      	b.n	8014614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80145fe:	f7fb ff55 	bl	80104ac <HAL_GetTick>
 8014602:	4602      	mov	r2, r0
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	1ad3      	subs	r3, r2, r3
 8014608:	f241 3288 	movw	r2, #5000	; 0x1388
 801460c:	4293      	cmp	r3, r2
 801460e:	d901      	bls.n	8014614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014610:	2303      	movs	r3, #3
 8014612:	e0a6      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014614:	4b56      	ldr	r3, [pc, #344]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014618:	f003 0302 	and.w	r3, r3, #2
 801461c:	2b00      	cmp	r3, #0
 801461e:	d1ee      	bne.n	80145fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d105      	bne.n	8014632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014626:	4b52      	ldr	r3, [pc, #328]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801462a:	4a51      	ldr	r2, [pc, #324]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 801462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	699b      	ldr	r3, [r3, #24]
 8014636:	2b00      	cmp	r3, #0
 8014638:	f000 8092 	beq.w	8014760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801463c:	4b4c      	ldr	r3, [pc, #304]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 801463e:	689b      	ldr	r3, [r3, #8]
 8014640:	f003 030c 	and.w	r3, r3, #12
 8014644:	2b08      	cmp	r3, #8
 8014646:	d05c      	beq.n	8014702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	699b      	ldr	r3, [r3, #24]
 801464c:	2b02      	cmp	r3, #2
 801464e:	d141      	bne.n	80146d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014650:	4b48      	ldr	r3, [pc, #288]	; (8014774 <HAL_RCC_OscConfig+0x4dc>)
 8014652:	2200      	movs	r2, #0
 8014654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014656:	f7fb ff29 	bl	80104ac <HAL_GetTick>
 801465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801465c:	e008      	b.n	8014670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801465e:	f7fb ff25 	bl	80104ac <HAL_GetTick>
 8014662:	4602      	mov	r2, r0
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	2b02      	cmp	r3, #2
 801466a:	d901      	bls.n	8014670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801466c:	2303      	movs	r3, #3
 801466e:	e078      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014670:	4b3f      	ldr	r3, [pc, #252]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014678:	2b00      	cmp	r3, #0
 801467a:	d1f0      	bne.n	801465e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	69da      	ldr	r2, [r3, #28]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6a1b      	ldr	r3, [r3, #32]
 8014684:	431a      	orrs	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801468a:	019b      	lsls	r3, r3, #6
 801468c:	431a      	orrs	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014692:	085b      	lsrs	r3, r3, #1
 8014694:	3b01      	subs	r3, #1
 8014696:	041b      	lsls	r3, r3, #16
 8014698:	431a      	orrs	r2, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801469e:	061b      	lsls	r3, r3, #24
 80146a0:	4933      	ldr	r1, [pc, #204]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80146a2:	4313      	orrs	r3, r2
 80146a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80146a6:	4b33      	ldr	r3, [pc, #204]	; (8014774 <HAL_RCC_OscConfig+0x4dc>)
 80146a8:	2201      	movs	r2, #1
 80146aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80146ac:	f7fb fefe 	bl	80104ac <HAL_GetTick>
 80146b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80146b2:	e008      	b.n	80146c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80146b4:	f7fb fefa 	bl	80104ac <HAL_GetTick>
 80146b8:	4602      	mov	r2, r0
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	2b02      	cmp	r3, #2
 80146c0:	d901      	bls.n	80146c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e04d      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80146c6:	4b2a      	ldr	r3, [pc, #168]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d0f0      	beq.n	80146b4 <HAL_RCC_OscConfig+0x41c>
 80146d2:	e045      	b.n	8014760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80146d4:	4b27      	ldr	r3, [pc, #156]	; (8014774 <HAL_RCC_OscConfig+0x4dc>)
 80146d6:	2200      	movs	r2, #0
 80146d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80146da:	f7fb fee7 	bl	80104ac <HAL_GetTick>
 80146de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80146e0:	e008      	b.n	80146f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80146e2:	f7fb fee3 	bl	80104ac <HAL_GetTick>
 80146e6:	4602      	mov	r2, r0
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d901      	bls.n	80146f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80146f0:	2303      	movs	r3, #3
 80146f2:	e036      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80146f4:	4b1e      	ldr	r3, [pc, #120]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d1f0      	bne.n	80146e2 <HAL_RCC_OscConfig+0x44a>
 8014700:	e02e      	b.n	8014760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	699b      	ldr	r3, [r3, #24]
 8014706:	2b01      	cmp	r3, #1
 8014708:	d101      	bne.n	801470e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801470a:	2301      	movs	r3, #1
 801470c:	e029      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801470e:	4b18      	ldr	r3, [pc, #96]	; (8014770 <HAL_RCC_OscConfig+0x4d8>)
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	69db      	ldr	r3, [r3, #28]
 801471e:	429a      	cmp	r2, r3
 8014720:	d11c      	bne.n	801475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801472c:	429a      	cmp	r2, r3
 801472e:	d115      	bne.n	801475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014736:	4013      	ands	r3, r2
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801473c:	4293      	cmp	r3, r2
 801473e:	d10d      	bne.n	801475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801474a:	429a      	cmp	r2, r3
 801474c:	d106      	bne.n	801475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8014758:	429a      	cmp	r2, r3
 801475a:	d001      	beq.n	8014760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801475c:	2301      	movs	r3, #1
 801475e:	e000      	b.n	8014762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	3718      	adds	r7, #24
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	40007000 	.word	0x40007000
 8014770:	40023800 	.word	0x40023800
 8014774:	42470060 	.word	0x42470060

08014778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014788:	2301      	movs	r3, #1
 801478a:	e0cc      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801478c:	4b68      	ldr	r3, [pc, #416]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f003 030f 	and.w	r3, r3, #15
 8014794:	683a      	ldr	r2, [r7, #0]
 8014796:	429a      	cmp	r2, r3
 8014798:	d90c      	bls.n	80147b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801479a:	4b65      	ldr	r3, [pc, #404]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 801479c:	683a      	ldr	r2, [r7, #0]
 801479e:	b2d2      	uxtb	r2, r2
 80147a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80147a2:	4b63      	ldr	r3, [pc, #396]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f003 030f 	and.w	r3, r3, #15
 80147aa:	683a      	ldr	r2, [r7, #0]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d001      	beq.n	80147b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80147b0:	2301      	movs	r3, #1
 80147b2:	e0b8      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f003 0302 	and.w	r3, r3, #2
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d020      	beq.n	8014802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	f003 0304 	and.w	r3, r3, #4
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d005      	beq.n	80147d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80147cc:	4b59      	ldr	r3, [pc, #356]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147ce:	689b      	ldr	r3, [r3, #8]
 80147d0:	4a58      	ldr	r2, [pc, #352]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80147d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f003 0308 	and.w	r3, r3, #8
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d005      	beq.n	80147f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80147e4:	4b53      	ldr	r3, [pc, #332]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	4a52      	ldr	r2, [pc, #328]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80147ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80147f0:	4b50      	ldr	r3, [pc, #320]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147f2:	689b      	ldr	r3, [r3, #8]
 80147f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	494d      	ldr	r1, [pc, #308]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80147fe:	4313      	orrs	r3, r2
 8014800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f003 0301 	and.w	r3, r3, #1
 801480a:	2b00      	cmp	r3, #0
 801480c:	d044      	beq.n	8014898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d107      	bne.n	8014826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014816:	4b47      	ldr	r3, [pc, #284]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801481e:	2b00      	cmp	r3, #0
 8014820:	d119      	bne.n	8014856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014822:	2301      	movs	r3, #1
 8014824:	e07f      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	2b02      	cmp	r3, #2
 801482c:	d003      	beq.n	8014836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014832:	2b03      	cmp	r3, #3
 8014834:	d107      	bne.n	8014846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014836:	4b3f      	ldr	r3, [pc, #252]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801483e:	2b00      	cmp	r3, #0
 8014840:	d109      	bne.n	8014856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014842:	2301      	movs	r3, #1
 8014844:	e06f      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014846:	4b3b      	ldr	r3, [pc, #236]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f003 0302 	and.w	r3, r3, #2
 801484e:	2b00      	cmp	r3, #0
 8014850:	d101      	bne.n	8014856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014852:	2301      	movs	r3, #1
 8014854:	e067      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014856:	4b37      	ldr	r3, [pc, #220]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014858:	689b      	ldr	r3, [r3, #8]
 801485a:	f023 0203 	bic.w	r2, r3, #3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	4934      	ldr	r1, [pc, #208]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014864:	4313      	orrs	r3, r2
 8014866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014868:	f7fb fe20 	bl	80104ac <HAL_GetTick>
 801486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801486e:	e00a      	b.n	8014886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014870:	f7fb fe1c 	bl	80104ac <HAL_GetTick>
 8014874:	4602      	mov	r2, r0
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	f241 3288 	movw	r2, #5000	; 0x1388
 801487e:	4293      	cmp	r3, r2
 8014880:	d901      	bls.n	8014886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014882:	2303      	movs	r3, #3
 8014884:	e04f      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014886:	4b2b      	ldr	r3, [pc, #172]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014888:	689b      	ldr	r3, [r3, #8]
 801488a:	f003 020c 	and.w	r2, r3, #12
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	429a      	cmp	r2, r3
 8014896:	d1eb      	bne.n	8014870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014898:	4b25      	ldr	r3, [pc, #148]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f003 030f 	and.w	r3, r3, #15
 80148a0:	683a      	ldr	r2, [r7, #0]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d20c      	bcs.n	80148c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80148a6:	4b22      	ldr	r3, [pc, #136]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 80148a8:	683a      	ldr	r2, [r7, #0]
 80148aa:	b2d2      	uxtb	r2, r2
 80148ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80148ae:	4b20      	ldr	r3, [pc, #128]	; (8014930 <HAL_RCC_ClockConfig+0x1b8>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f003 030f 	and.w	r3, r3, #15
 80148b6:	683a      	ldr	r2, [r7, #0]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d001      	beq.n	80148c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80148bc:	2301      	movs	r3, #1
 80148be:	e032      	b.n	8014926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f003 0304 	and.w	r3, r3, #4
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d008      	beq.n	80148de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80148cc:	4b19      	ldr	r3, [pc, #100]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	4916      	ldr	r1, [pc, #88]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80148da:	4313      	orrs	r3, r2
 80148dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f003 0308 	and.w	r3, r3, #8
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d009      	beq.n	80148fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80148ea:	4b12      	ldr	r3, [pc, #72]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	490e      	ldr	r1, [pc, #56]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 80148fa:	4313      	orrs	r3, r2
 80148fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80148fe:	f000 f82d 	bl	801495c <HAL_RCC_GetSysClockFreq>
 8014902:	4602      	mov	r2, r0
 8014904:	4b0b      	ldr	r3, [pc, #44]	; (8014934 <HAL_RCC_ClockConfig+0x1bc>)
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	091b      	lsrs	r3, r3, #4
 801490a:	f003 030f 	and.w	r3, r3, #15
 801490e:	490a      	ldr	r1, [pc, #40]	; (8014938 <HAL_RCC_ClockConfig+0x1c0>)
 8014910:	5ccb      	ldrb	r3, [r1, r3]
 8014912:	fa22 f303 	lsr.w	r3, r2, r3
 8014916:	4a09      	ldr	r2, [pc, #36]	; (801493c <HAL_RCC_ClockConfig+0x1c4>)
 8014918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801491a:	4b09      	ldr	r3, [pc, #36]	; (8014940 <HAL_RCC_ClockConfig+0x1c8>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	4618      	mov	r0, r3
 8014920:	f7f8 fa7a 	bl	800ce18 <HAL_InitTick>

  return HAL_OK;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	40023c00 	.word	0x40023c00
 8014934:	40023800 	.word	0x40023800
 8014938:	08020084 	.word	0x08020084
 801493c:	20000054 	.word	0x20000054
 8014940:	200000b8 	.word	0x200000b8

08014944 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8014944:	b480      	push	{r7}
 8014946:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8014948:	4b03      	ldr	r3, [pc, #12]	; (8014958 <HAL_RCC_EnableCSS+0x14>)
 801494a:	2201      	movs	r2, #1
 801494c:	601a      	str	r2, [r3, #0]
}
 801494e:	bf00      	nop
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr
 8014958:	4247004c 	.word	0x4247004c

0801495c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801495c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014960:	b084      	sub	sp, #16
 8014962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014964:	2300      	movs	r3, #0
 8014966:	607b      	str	r3, [r7, #4]
 8014968:	2300      	movs	r3, #0
 801496a:	60fb      	str	r3, [r7, #12]
 801496c:	2300      	movs	r3, #0
 801496e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8014970:	2300      	movs	r3, #0
 8014972:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014974:	4b67      	ldr	r3, [pc, #412]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014976:	689b      	ldr	r3, [r3, #8]
 8014978:	f003 030c 	and.w	r3, r3, #12
 801497c:	2b08      	cmp	r3, #8
 801497e:	d00d      	beq.n	801499c <HAL_RCC_GetSysClockFreq+0x40>
 8014980:	2b08      	cmp	r3, #8
 8014982:	f200 80bd 	bhi.w	8014b00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8014986:	2b00      	cmp	r3, #0
 8014988:	d002      	beq.n	8014990 <HAL_RCC_GetSysClockFreq+0x34>
 801498a:	2b04      	cmp	r3, #4
 801498c:	d003      	beq.n	8014996 <HAL_RCC_GetSysClockFreq+0x3a>
 801498e:	e0b7      	b.n	8014b00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014990:	4b61      	ldr	r3, [pc, #388]	; (8014b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014992:	60bb      	str	r3, [r7, #8]
       break;
 8014994:	e0b7      	b.n	8014b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014996:	4b61      	ldr	r3, [pc, #388]	; (8014b1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8014998:	60bb      	str	r3, [r7, #8]
      break;
 801499a:	e0b4      	b.n	8014b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801499c:	4b5d      	ldr	r3, [pc, #372]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80149a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80149a6:	4b5b      	ldr	r3, [pc, #364]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d04d      	beq.n	8014a4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80149b2:	4b58      	ldr	r3, [pc, #352]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	099b      	lsrs	r3, r3, #6
 80149b8:	461a      	mov	r2, r3
 80149ba:	f04f 0300 	mov.w	r3, #0
 80149be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80149c2:	f04f 0100 	mov.w	r1, #0
 80149c6:	ea02 0800 	and.w	r8, r2, r0
 80149ca:	ea03 0901 	and.w	r9, r3, r1
 80149ce:	4640      	mov	r0, r8
 80149d0:	4649      	mov	r1, r9
 80149d2:	f04f 0200 	mov.w	r2, #0
 80149d6:	f04f 0300 	mov.w	r3, #0
 80149da:	014b      	lsls	r3, r1, #5
 80149dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80149e0:	0142      	lsls	r2, r0, #5
 80149e2:	4610      	mov	r0, r2
 80149e4:	4619      	mov	r1, r3
 80149e6:	ebb0 0008 	subs.w	r0, r0, r8
 80149ea:	eb61 0109 	sbc.w	r1, r1, r9
 80149ee:	f04f 0200 	mov.w	r2, #0
 80149f2:	f04f 0300 	mov.w	r3, #0
 80149f6:	018b      	lsls	r3, r1, #6
 80149f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80149fc:	0182      	lsls	r2, r0, #6
 80149fe:	1a12      	subs	r2, r2, r0
 8014a00:	eb63 0301 	sbc.w	r3, r3, r1
 8014a04:	f04f 0000 	mov.w	r0, #0
 8014a08:	f04f 0100 	mov.w	r1, #0
 8014a0c:	00d9      	lsls	r1, r3, #3
 8014a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014a12:	00d0      	lsls	r0, r2, #3
 8014a14:	4602      	mov	r2, r0
 8014a16:	460b      	mov	r3, r1
 8014a18:	eb12 0208 	adds.w	r2, r2, r8
 8014a1c:	eb43 0309 	adc.w	r3, r3, r9
 8014a20:	f04f 0000 	mov.w	r0, #0
 8014a24:	f04f 0100 	mov.w	r1, #0
 8014a28:	0259      	lsls	r1, r3, #9
 8014a2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8014a2e:	0250      	lsls	r0, r2, #9
 8014a30:	4602      	mov	r2, r0
 8014a32:	460b      	mov	r3, r1
 8014a34:	4610      	mov	r0, r2
 8014a36:	4619      	mov	r1, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	f04f 0300 	mov.w	r3, #0
 8014a40:	f7ec f922 	bl	8000c88 <__aeabi_uldivmod>
 8014a44:	4602      	mov	r2, r0
 8014a46:	460b      	mov	r3, r1
 8014a48:	4613      	mov	r3, r2
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	e04a      	b.n	8014ae4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014a4e:	4b31      	ldr	r3, [pc, #196]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	099b      	lsrs	r3, r3, #6
 8014a54:	461a      	mov	r2, r3
 8014a56:	f04f 0300 	mov.w	r3, #0
 8014a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014a5e:	f04f 0100 	mov.w	r1, #0
 8014a62:	ea02 0400 	and.w	r4, r2, r0
 8014a66:	ea03 0501 	and.w	r5, r3, r1
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	4629      	mov	r1, r5
 8014a6e:	f04f 0200 	mov.w	r2, #0
 8014a72:	f04f 0300 	mov.w	r3, #0
 8014a76:	014b      	lsls	r3, r1, #5
 8014a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014a7c:	0142      	lsls	r2, r0, #5
 8014a7e:	4610      	mov	r0, r2
 8014a80:	4619      	mov	r1, r3
 8014a82:	1b00      	subs	r0, r0, r4
 8014a84:	eb61 0105 	sbc.w	r1, r1, r5
 8014a88:	f04f 0200 	mov.w	r2, #0
 8014a8c:	f04f 0300 	mov.w	r3, #0
 8014a90:	018b      	lsls	r3, r1, #6
 8014a92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014a96:	0182      	lsls	r2, r0, #6
 8014a98:	1a12      	subs	r2, r2, r0
 8014a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8014a9e:	f04f 0000 	mov.w	r0, #0
 8014aa2:	f04f 0100 	mov.w	r1, #0
 8014aa6:	00d9      	lsls	r1, r3, #3
 8014aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014aac:	00d0      	lsls	r0, r2, #3
 8014aae:	4602      	mov	r2, r0
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	1912      	adds	r2, r2, r4
 8014ab4:	eb45 0303 	adc.w	r3, r5, r3
 8014ab8:	f04f 0000 	mov.w	r0, #0
 8014abc:	f04f 0100 	mov.w	r1, #0
 8014ac0:	0299      	lsls	r1, r3, #10
 8014ac2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8014ac6:	0290      	lsls	r0, r2, #10
 8014ac8:	4602      	mov	r2, r0
 8014aca:	460b      	mov	r3, r1
 8014acc:	4610      	mov	r0, r2
 8014ace:	4619      	mov	r1, r3
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	f04f 0300 	mov.w	r3, #0
 8014ad8:	f7ec f8d6 	bl	8000c88 <__aeabi_uldivmod>
 8014adc:	4602      	mov	r2, r0
 8014ade:	460b      	mov	r3, r1
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014ae4:	4b0b      	ldr	r3, [pc, #44]	; (8014b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	0c1b      	lsrs	r3, r3, #16
 8014aea:	f003 0303 	and.w	r3, r3, #3
 8014aee:	3301      	adds	r3, #1
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8014afc:	60bb      	str	r3, [r7, #8]
      break;
 8014afe:	e002      	b.n	8014b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014b00:	4b05      	ldr	r3, [pc, #20]	; (8014b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8014b02:	60bb      	str	r3, [r7, #8]
      break;
 8014b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014b06:	68bb      	ldr	r3, [r7, #8]
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3710      	adds	r7, #16
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014b12:	bf00      	nop
 8014b14:	40023800 	.word	0x40023800
 8014b18:	00f42400 	.word	0x00f42400
 8014b1c:	007a1200 	.word	0x007a1200

08014b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014b20:	b480      	push	{r7}
 8014b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014b24:	4b03      	ldr	r3, [pc, #12]	; (8014b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8014b26:	681b      	ldr	r3, [r3, #0]
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b30:	4770      	bx	lr
 8014b32:	bf00      	nop
 8014b34:	20000054 	.word	0x20000054

08014b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014b3c:	f7ff fff0 	bl	8014b20 <HAL_RCC_GetHCLKFreq>
 8014b40:	4602      	mov	r2, r0
 8014b42:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	0a9b      	lsrs	r3, r3, #10
 8014b48:	f003 0307 	and.w	r3, r3, #7
 8014b4c:	4903      	ldr	r1, [pc, #12]	; (8014b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8014b4e:	5ccb      	ldrb	r3, [r1, r3]
 8014b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	40023800 	.word	0x40023800
 8014b5c:	08020094 	.word	0x08020094

08014b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014b64:	f7ff ffdc 	bl	8014b20 <HAL_RCC_GetHCLKFreq>
 8014b68:	4602      	mov	r2, r0
 8014b6a:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014b6c:	689b      	ldr	r3, [r3, #8]
 8014b6e:	0b5b      	lsrs	r3, r3, #13
 8014b70:	f003 0307 	and.w	r3, r3, #7
 8014b74:	4903      	ldr	r1, [pc, #12]	; (8014b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014b76:	5ccb      	ldrb	r3, [r1, r3]
 8014b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	40023800 	.word	0x40023800
 8014b84:	08020094 	.word	0x08020094

08014b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	220f      	movs	r2, #15
 8014b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014b98:	4b12      	ldr	r3, [pc, #72]	; (8014be4 <HAL_RCC_GetClockConfig+0x5c>)
 8014b9a:	689b      	ldr	r3, [r3, #8]
 8014b9c:	f003 0203 	and.w	r2, r3, #3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8014ba4:	4b0f      	ldr	r3, [pc, #60]	; (8014be4 <HAL_RCC_GetClockConfig+0x5c>)
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014bb0:	4b0c      	ldr	r3, [pc, #48]	; (8014be4 <HAL_RCC_GetClockConfig+0x5c>)
 8014bb2:	689b      	ldr	r3, [r3, #8]
 8014bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8014bbc:	4b09      	ldr	r3, [pc, #36]	; (8014be4 <HAL_RCC_GetClockConfig+0x5c>)
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	08db      	lsrs	r3, r3, #3
 8014bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014bca:	4b07      	ldr	r3, [pc, #28]	; (8014be8 <HAL_RCC_GetClockConfig+0x60>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f003 020f 	and.w	r2, r3, #15
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	601a      	str	r2, [r3, #0]
}
 8014bd6:	bf00      	nop
 8014bd8:	370c      	adds	r7, #12
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	40023800 	.word	0x40023800
 8014be8:	40023c00 	.word	0x40023c00

08014bec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b088      	sub	sp, #32
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014c04:	69bb      	ldr	r3, [r7, #24]
 8014c06:	099b      	lsrs	r3, r3, #6
 8014c08:	f003 0301 	and.w	r3, r3, #1
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d10f      	bne.n	8014c30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00a      	beq.n	8014c30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014c1a:	69fb      	ldr	r3, [r7, #28]
 8014c1c:	099b      	lsrs	r3, r3, #6
 8014c1e:	f003 0301 	and.w	r3, r3, #1
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d004      	beq.n	8014c30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	4798      	blx	r3
    return;
 8014c2e:	e0d7      	b.n	8014de0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	085b      	lsrs	r3, r3, #1
 8014c34:	f003 0301 	and.w	r3, r3, #1
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d00a      	beq.n	8014c52 <HAL_SPI_IRQHandler+0x66>
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	09db      	lsrs	r3, r3, #7
 8014c40:	f003 0301 	and.w	r3, r3, #1
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d004      	beq.n	8014c52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	4798      	blx	r3
    return;
 8014c50:	e0c6      	b.n	8014de0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	095b      	lsrs	r3, r3, #5
 8014c56:	f003 0301 	and.w	r3, r3, #1
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d10c      	bne.n	8014c78 <HAL_SPI_IRQHandler+0x8c>
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	099b      	lsrs	r3, r3, #6
 8014c62:	f003 0301 	and.w	r3, r3, #1
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d106      	bne.n	8014c78 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	0a1b      	lsrs	r3, r3, #8
 8014c6e:	f003 0301 	and.w	r3, r3, #1
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	f000 80b4 	beq.w	8014de0 <HAL_SPI_IRQHandler+0x1f4>
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	095b      	lsrs	r3, r3, #5
 8014c7c:	f003 0301 	and.w	r3, r3, #1
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f000 80ad 	beq.w	8014de0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	099b      	lsrs	r3, r3, #6
 8014c8a:	f003 0301 	and.w	r3, r3, #1
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d023      	beq.n	8014cda <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	2b03      	cmp	r3, #3
 8014c9c:	d011      	beq.n	8014cc2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ca2:	f043 0204 	orr.w	r2, r3, #4
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014caa:	2300      	movs	r3, #0
 8014cac:	617b      	str	r3, [r7, #20]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	617b      	str	r3, [r7, #20]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	689b      	ldr	r3, [r3, #8]
 8014cbc:	617b      	str	r3, [r7, #20]
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	e00b      	b.n	8014cda <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	613b      	str	r3, [r7, #16]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	613b      	str	r3, [r7, #16]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	613b      	str	r3, [r7, #16]
 8014cd6:	693b      	ldr	r3, [r7, #16]
        return;
 8014cd8:	e082      	b.n	8014de0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	095b      	lsrs	r3, r3, #5
 8014cde:	f003 0301 	and.w	r3, r3, #1
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d014      	beq.n	8014d10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cea:	f043 0201 	orr.w	r2, r3, #1
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	60fb      	str	r3, [r7, #12]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	60fb      	str	r3, [r7, #12]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d0c:	601a      	str	r2, [r3, #0]
 8014d0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014d10:	69bb      	ldr	r3, [r7, #24]
 8014d12:	0a1b      	lsrs	r3, r3, #8
 8014d14:	f003 0301 	and.w	r3, r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00c      	beq.n	8014d36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d20:	f043 0208 	orr.w	r2, r3, #8
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014d28:	2300      	movs	r3, #0
 8014d2a:	60bb      	str	r3, [r7, #8]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	60bb      	str	r3, [r7, #8]
 8014d34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d04f      	beq.n	8014dde <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	685a      	ldr	r2, [r3, #4]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014d4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2201      	movs	r2, #1
 8014d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014d56:	69fb      	ldr	r3, [r7, #28]
 8014d58:	f003 0302 	and.w	r3, r3, #2
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d104      	bne.n	8014d6a <HAL_SPI_IRQHandler+0x17e>
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d034      	beq.n	8014dd4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	685a      	ldr	r2, [r3, #4]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	f022 0203 	bic.w	r2, r2, #3
 8014d78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d011      	beq.n	8014da6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d86:	4a18      	ldr	r2, [pc, #96]	; (8014de8 <HAL_SPI_IRQHandler+0x1fc>)
 8014d88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fc fcca 	bl	8011728 <HAL_DMA_Abort_IT>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d005      	beq.n	8014da6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d016      	beq.n	8014ddc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014db2:	4a0d      	ldr	r2, [pc, #52]	; (8014de8 <HAL_SPI_IRQHandler+0x1fc>)
 8014db4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fc fcb4 	bl	8011728 <HAL_DMA_Abort_IT>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00a      	beq.n	8014ddc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014dd2:	e003      	b.n	8014ddc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f000 f809 	bl	8014dec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014dda:	e000      	b.n	8014dde <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014ddc:	bf00      	nop
    return;
 8014dde:	bf00      	nop
  }
}
 8014de0:	3720      	adds	r7, #32
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	08014e01 	.word	0x08014e01

08014dec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014df4:	bf00      	nop
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2200      	movs	r2, #0
 8014e12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2200      	movs	r2, #0
 8014e18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f7ff ffe6 	bl	8014dec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014e20:	bf00      	nop
 8014e22:	3710      	adds	r7, #16
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d101      	bne.n	8014e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014e36:	2301      	movs	r3, #1
 8014e38:	e01d      	b.n	8014e76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f7ed fb9c 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2202      	movs	r2, #2
 8014e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	3304      	adds	r3, #4
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f000 fc3e 	bl	80156e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2201      	movs	r2, #1
 8014e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014e7e:	b480      	push	{r7}
 8014e80:	b085      	sub	sp, #20
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2202      	movs	r2, #2
 8014e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	f003 0307 	and.w	r3, r3, #7
 8014e98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	2b06      	cmp	r3, #6
 8014e9e:	d007      	beq.n	8014eb0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f042 0201 	orr.w	r2, r2, #1
 8014eae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3714      	adds	r7, #20
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr

08014ec6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014ec6:	b480      	push	{r7}
 8014ec8:	b085      	sub	sp, #20
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	68da      	ldr	r2, [r3, #12]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	f042 0201 	orr.w	r2, r2, #1
 8014edc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	689b      	ldr	r3, [r3, #8]
 8014ee4:	f003 0307 	and.w	r3, r3, #7
 8014ee8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2b06      	cmp	r3, #6
 8014eee:	d007      	beq.n	8014f00 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f042 0201 	orr.w	r2, r2, #1
 8014efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014f00:	2300      	movs	r3, #0
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3714      	adds	r7, #20
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr

08014f0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b082      	sub	sp, #8
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	e01d      	b.n	8014f5c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d106      	bne.n	8014f3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f7ed f9eb 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2202      	movs	r2, #2
 8014f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	4610      	mov	r0, r2
 8014f4e:	f000 fbcb 	bl	80156e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2201      	movs	r2, #1
 8014f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2201      	movs	r2, #1
 8014f74:	6839      	ldr	r1, [r7, #0]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 fea0 	bl	8015cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	4a15      	ldr	r2, [pc, #84]	; (8014fd8 <HAL_TIM_PWM_Start+0x74>)
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d004      	beq.n	8014f90 <HAL_TIM_PWM_Start+0x2c>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4a14      	ldr	r2, [pc, #80]	; (8014fdc <HAL_TIM_PWM_Start+0x78>)
 8014f8c:	4293      	cmp	r3, r2
 8014f8e:	d101      	bne.n	8014f94 <HAL_TIM_PWM_Start+0x30>
 8014f90:	2301      	movs	r3, #1
 8014f92:	e000      	b.n	8014f96 <HAL_TIM_PWM_Start+0x32>
 8014f94:	2300      	movs	r3, #0
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d007      	beq.n	8014faa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	f003 0307 	and.w	r3, r3, #7
 8014fb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2b06      	cmp	r3, #6
 8014fba:	d007      	beq.n	8014fcc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	f042 0201 	orr.w	r2, r2, #1
 8014fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3710      	adds	r7, #16
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	40010000 	.word	0x40010000
 8014fdc:	40010400 	.word	0x40010400

08014fe0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b086      	sub	sp, #24
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d101      	bne.n	8014ff4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	e083      	b.n	80150fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d106      	bne.n	801500e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f7ed fd73 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2202      	movs	r2, #2
 8015012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	6812      	ldr	r2, [r2, #0]
 8015020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015024:	f023 0307 	bic.w	r3, r3, #7
 8015028:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	3304      	adds	r3, #4
 8015032:	4619      	mov	r1, r3
 8015034:	4610      	mov	r0, r2
 8015036:	f000 fb57 	bl	80156e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	689b      	ldr	r3, [r3, #8]
 8015040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	699b      	ldr	r3, [r3, #24]
 8015048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	6a1b      	ldr	r3, [r3, #32]
 8015050:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	697a      	ldr	r2, [r7, #20]
 8015058:	4313      	orrs	r3, r2
 801505a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015062:	f023 0303 	bic.w	r3, r3, #3
 8015066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	689a      	ldr	r2, [r3, #8]
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	699b      	ldr	r3, [r3, #24]
 8015070:	021b      	lsls	r3, r3, #8
 8015072:	4313      	orrs	r3, r2
 8015074:	693a      	ldr	r2, [r7, #16]
 8015076:	4313      	orrs	r3, r2
 8015078:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8015080:	f023 030c 	bic.w	r3, r3, #12
 8015084:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801508c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	68da      	ldr	r2, [r3, #12]
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	69db      	ldr	r3, [r3, #28]
 801509a:	021b      	lsls	r3, r3, #8
 801509c:	4313      	orrs	r3, r2
 801509e:	693a      	ldr	r2, [r7, #16]
 80150a0:	4313      	orrs	r3, r2
 80150a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	691b      	ldr	r3, [r3, #16]
 80150a8:	011a      	lsls	r2, r3, #4
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	6a1b      	ldr	r3, [r3, #32]
 80150ae:	031b      	lsls	r3, r3, #12
 80150b0:	4313      	orrs	r3, r2
 80150b2:	693a      	ldr	r2, [r7, #16]
 80150b4:	4313      	orrs	r3, r2
 80150b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80150be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80150c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	685a      	ldr	r2, [r3, #4]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	695b      	ldr	r3, [r3, #20]
 80150d0:	011b      	lsls	r3, r3, #4
 80150d2:	4313      	orrs	r3, r2
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	4313      	orrs	r3, r2
 80150d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	697a      	ldr	r2, [r7, #20]
 80150e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	693a      	ldr	r2, [r7, #16]
 80150e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2201      	movs	r2, #1
 80150f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3718      	adds	r7, #24
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801510e:	683b      	ldr	r3, [r7, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d003      	beq.n	801511c <HAL_TIM_Encoder_Start+0x18>
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	2b04      	cmp	r3, #4
 8015118:	d008      	beq.n	801512c <HAL_TIM_Encoder_Start+0x28>
 801511a:	e00f      	b.n	801513c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	2201      	movs	r2, #1
 8015122:	2100      	movs	r1, #0
 8015124:	4618      	mov	r0, r3
 8015126:	f000 fdc9 	bl	8015cbc <TIM_CCxChannelCmd>
      break;
 801512a:	e016      	b.n	801515a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2201      	movs	r2, #1
 8015132:	2104      	movs	r1, #4
 8015134:	4618      	mov	r0, r3
 8015136:	f000 fdc1 	bl	8015cbc <TIM_CCxChannelCmd>
      break;
 801513a:	e00e      	b.n	801515a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2201      	movs	r2, #1
 8015142:	2100      	movs	r1, #0
 8015144:	4618      	mov	r0, r3
 8015146:	f000 fdb9 	bl	8015cbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2201      	movs	r2, #1
 8015150:	2104      	movs	r1, #4
 8015152:	4618      	mov	r0, r3
 8015154:	f000 fdb2 	bl	8015cbc <TIM_CCxChannelCmd>
      break;
 8015158:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f042 0201 	orr.w	r2, r2, #1
 8015168:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801516a:	2300      	movs	r3, #0
}
 801516c:	4618      	mov	r0, r3
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	f003 0302 	and.w	r3, r3, #2
 8015186:	2b02      	cmp	r3, #2
 8015188:	d122      	bne.n	80151d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	f003 0302 	and.w	r3, r3, #2
 8015194:	2b02      	cmp	r3, #2
 8015196:	d11b      	bne.n	80151d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	f06f 0202 	mvn.w	r2, #2
 80151a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2201      	movs	r2, #1
 80151a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	699b      	ldr	r3, [r3, #24]
 80151ae:	f003 0303 	and.w	r3, r3, #3
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d003      	beq.n	80151be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f000 fa78 	bl	80156ac <HAL_TIM_IC_CaptureCallback>
 80151bc:	e005      	b.n	80151ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f000 fa6a 	bl	8015698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 fa7b 	bl	80156c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2200      	movs	r2, #0
 80151ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	691b      	ldr	r3, [r3, #16]
 80151d6:	f003 0304 	and.w	r3, r3, #4
 80151da:	2b04      	cmp	r3, #4
 80151dc:	d122      	bne.n	8015224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	f003 0304 	and.w	r3, r3, #4
 80151e8:	2b04      	cmp	r3, #4
 80151ea:	d11b      	bne.n	8015224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f06f 0204 	mvn.w	r2, #4
 80151f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2202      	movs	r2, #2
 80151fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015206:	2b00      	cmp	r3, #0
 8015208:	d003      	beq.n	8015212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f000 fa4e 	bl	80156ac <HAL_TIM_IC_CaptureCallback>
 8015210:	e005      	b.n	801521e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f000 fa40 	bl	8015698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f000 fa51 	bl	80156c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2200      	movs	r2, #0
 8015222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	691b      	ldr	r3, [r3, #16]
 801522a:	f003 0308 	and.w	r3, r3, #8
 801522e:	2b08      	cmp	r3, #8
 8015230:	d122      	bne.n	8015278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	f003 0308 	and.w	r3, r3, #8
 801523c:	2b08      	cmp	r3, #8
 801523e:	d11b      	bne.n	8015278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	f06f 0208 	mvn.w	r2, #8
 8015248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2204      	movs	r2, #4
 801524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	69db      	ldr	r3, [r3, #28]
 8015256:	f003 0303 	and.w	r3, r3, #3
 801525a:	2b00      	cmp	r3, #0
 801525c:	d003      	beq.n	8015266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f000 fa24 	bl	80156ac <HAL_TIM_IC_CaptureCallback>
 8015264:	e005      	b.n	8015272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f000 fa16 	bl	8015698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f000 fa27 	bl	80156c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2200      	movs	r2, #0
 8015276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	691b      	ldr	r3, [r3, #16]
 801527e:	f003 0310 	and.w	r3, r3, #16
 8015282:	2b10      	cmp	r3, #16
 8015284:	d122      	bne.n	80152cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	f003 0310 	and.w	r3, r3, #16
 8015290:	2b10      	cmp	r3, #16
 8015292:	d11b      	bne.n	80152cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	f06f 0210 	mvn.w	r2, #16
 801529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2208      	movs	r2, #8
 80152a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	69db      	ldr	r3, [r3, #28]
 80152aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d003      	beq.n	80152ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f000 f9fa 	bl	80156ac <HAL_TIM_IC_CaptureCallback>
 80152b8:	e005      	b.n	80152c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f000 f9ec 	bl	8015698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 f9fd 	bl	80156c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2200      	movs	r2, #0
 80152ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	691b      	ldr	r3, [r3, #16]
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d10e      	bne.n	80152f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	f003 0301 	and.w	r3, r3, #1
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d107      	bne.n	80152f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f06f 0201 	mvn.w	r2, #1
 80152f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f7f7 fd38 	bl	800cd68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	691b      	ldr	r3, [r3, #16]
 80152fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015302:	2b80      	cmp	r3, #128	; 0x80
 8015304:	d10e      	bne.n	8015324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015310:	2b80      	cmp	r3, #128	; 0x80
 8015312:	d107      	bne.n	8015324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 fd78 	bl	8015e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	691b      	ldr	r3, [r3, #16]
 801532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801532e:	2b40      	cmp	r3, #64	; 0x40
 8015330:	d10e      	bne.n	8015350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801533c:	2b40      	cmp	r3, #64	; 0x40
 801533e:	d107      	bne.n	8015350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f000 f9c2 	bl	80156d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	691b      	ldr	r3, [r3, #16]
 8015356:	f003 0320 	and.w	r3, r3, #32
 801535a:	2b20      	cmp	r3, #32
 801535c:	d10e      	bne.n	801537c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	f003 0320 	and.w	r3, r3, #32
 8015368:	2b20      	cmp	r3, #32
 801536a:	d107      	bne.n	801537c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f06f 0220 	mvn.w	r2, #32
 8015374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f000 fd42 	bl	8015e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015396:	2b01      	cmp	r3, #1
 8015398:	d101      	bne.n	801539e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801539a:	2302      	movs	r3, #2
 801539c:	e0b4      	b.n	8015508 <HAL_TIM_PWM_ConfigChannel+0x184>
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2201      	movs	r2, #1
 80153a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	2202      	movs	r2, #2
 80153aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2b0c      	cmp	r3, #12
 80153b2:	f200 809f 	bhi.w	80154f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80153b6:	a201      	add	r2, pc, #4	; (adr r2, 80153bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80153b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153bc:	080153f1 	.word	0x080153f1
 80153c0:	080154f5 	.word	0x080154f5
 80153c4:	080154f5 	.word	0x080154f5
 80153c8:	080154f5 	.word	0x080154f5
 80153cc:	08015431 	.word	0x08015431
 80153d0:	080154f5 	.word	0x080154f5
 80153d4:	080154f5 	.word	0x080154f5
 80153d8:	080154f5 	.word	0x080154f5
 80153dc:	08015473 	.word	0x08015473
 80153e0:	080154f5 	.word	0x080154f5
 80153e4:	080154f5 	.word	0x080154f5
 80153e8:	080154f5 	.word	0x080154f5
 80153ec:	080154b3 	.word	0x080154b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	68b9      	ldr	r1, [r7, #8]
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 fa16 	bl	8015828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	699a      	ldr	r2, [r3, #24]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	f042 0208 	orr.w	r2, r2, #8
 801540a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	699a      	ldr	r2, [r3, #24]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	f022 0204 	bic.w	r2, r2, #4
 801541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	6999      	ldr	r1, [r3, #24]
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	691a      	ldr	r2, [r3, #16]
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	430a      	orrs	r2, r1
 801542c:	619a      	str	r2, [r3, #24]
      break;
 801542e:	e062      	b.n	80154f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	68b9      	ldr	r1, [r7, #8]
 8015436:	4618      	mov	r0, r3
 8015438:	f000 fa66 	bl	8015908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	699a      	ldr	r2, [r3, #24]
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801544a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	699a      	ldr	r2, [r3, #24]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801545a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6999      	ldr	r1, [r3, #24]
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	691b      	ldr	r3, [r3, #16]
 8015466:	021a      	lsls	r2, r3, #8
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	430a      	orrs	r2, r1
 801546e:	619a      	str	r2, [r3, #24]
      break;
 8015470:	e041      	b.n	80154f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68b9      	ldr	r1, [r7, #8]
 8015478:	4618      	mov	r0, r3
 801547a:	f000 fabb 	bl	80159f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	69da      	ldr	r2, [r3, #28]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	f042 0208 	orr.w	r2, r2, #8
 801548c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	69da      	ldr	r2, [r3, #28]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f022 0204 	bic.w	r2, r2, #4
 801549c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	69d9      	ldr	r1, [r3, #28]
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	691a      	ldr	r2, [r3, #16]
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	430a      	orrs	r2, r1
 80154ae:	61da      	str	r2, [r3, #28]
      break;
 80154b0:	e021      	b.n	80154f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	68b9      	ldr	r1, [r7, #8]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f000 fb0f 	bl	8015adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	69da      	ldr	r2, [r3, #28]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80154cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	69da      	ldr	r2, [r3, #28]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80154dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	69d9      	ldr	r1, [r3, #28]
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	691b      	ldr	r3, [r3, #16]
 80154e8:	021a      	lsls	r2, r3, #8
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	430a      	orrs	r2, r1
 80154f0:	61da      	str	r2, [r3, #28]
      break;
 80154f2:	e000      	b.n	80154f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80154f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2200      	movs	r2, #0
 8015502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3710      	adds	r7, #16
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015520:	2b01      	cmp	r3, #1
 8015522:	d101      	bne.n	8015528 <HAL_TIM_ConfigClockSource+0x18>
 8015524:	2302      	movs	r3, #2
 8015526:	e0b3      	b.n	8015690 <HAL_TIM_ConfigClockSource+0x180>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2201      	movs	r2, #1
 801552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2202      	movs	r2, #2
 8015534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	689b      	ldr	r3, [r3, #8]
 801553e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801554e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015560:	d03e      	beq.n	80155e0 <HAL_TIM_ConfigClockSource+0xd0>
 8015562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015566:	f200 8087 	bhi.w	8015678 <HAL_TIM_ConfigClockSource+0x168>
 801556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801556e:	f000 8085 	beq.w	801567c <HAL_TIM_ConfigClockSource+0x16c>
 8015572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015576:	d87f      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 8015578:	2b70      	cmp	r3, #112	; 0x70
 801557a:	d01a      	beq.n	80155b2 <HAL_TIM_ConfigClockSource+0xa2>
 801557c:	2b70      	cmp	r3, #112	; 0x70
 801557e:	d87b      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 8015580:	2b60      	cmp	r3, #96	; 0x60
 8015582:	d050      	beq.n	8015626 <HAL_TIM_ConfigClockSource+0x116>
 8015584:	2b60      	cmp	r3, #96	; 0x60
 8015586:	d877      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 8015588:	2b50      	cmp	r3, #80	; 0x50
 801558a:	d03c      	beq.n	8015606 <HAL_TIM_ConfigClockSource+0xf6>
 801558c:	2b50      	cmp	r3, #80	; 0x50
 801558e:	d873      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 8015590:	2b40      	cmp	r3, #64	; 0x40
 8015592:	d058      	beq.n	8015646 <HAL_TIM_ConfigClockSource+0x136>
 8015594:	2b40      	cmp	r3, #64	; 0x40
 8015596:	d86f      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 8015598:	2b30      	cmp	r3, #48	; 0x30
 801559a:	d064      	beq.n	8015666 <HAL_TIM_ConfigClockSource+0x156>
 801559c:	2b30      	cmp	r3, #48	; 0x30
 801559e:	d86b      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 80155a0:	2b20      	cmp	r3, #32
 80155a2:	d060      	beq.n	8015666 <HAL_TIM_ConfigClockSource+0x156>
 80155a4:	2b20      	cmp	r3, #32
 80155a6:	d867      	bhi.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d05c      	beq.n	8015666 <HAL_TIM_ConfigClockSource+0x156>
 80155ac:	2b10      	cmp	r3, #16
 80155ae:	d05a      	beq.n	8015666 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80155b0:	e062      	b.n	8015678 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6818      	ldr	r0, [r3, #0]
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	6899      	ldr	r1, [r3, #8]
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	f000 fb5b 	bl	8015c7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	689b      	ldr	r3, [r3, #8]
 80155cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80155d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	609a      	str	r2, [r3, #8]
      break;
 80155de:	e04e      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6818      	ldr	r0, [r3, #0]
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	6899      	ldr	r1, [r3, #8]
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	f000 fb44 	bl	8015c7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	689a      	ldr	r2, [r3, #8]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015602:	609a      	str	r2, [r3, #8]
      break;
 8015604:	e03b      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6818      	ldr	r0, [r3, #0]
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	6859      	ldr	r1, [r3, #4]
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	461a      	mov	r2, r3
 8015614:	f000 fab8 	bl	8015b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2150      	movs	r1, #80	; 0x50
 801561e:	4618      	mov	r0, r3
 8015620:	f000 fb11 	bl	8015c46 <TIM_ITRx_SetConfig>
      break;
 8015624:	e02b      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6818      	ldr	r0, [r3, #0]
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	6859      	ldr	r1, [r3, #4]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	461a      	mov	r2, r3
 8015634:	f000 fad7 	bl	8015be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2160      	movs	r1, #96	; 0x60
 801563e:	4618      	mov	r0, r3
 8015640:	f000 fb01 	bl	8015c46 <TIM_ITRx_SetConfig>
      break;
 8015644:	e01b      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6818      	ldr	r0, [r3, #0]
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	6859      	ldr	r1, [r3, #4]
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	461a      	mov	r2, r3
 8015654:	f000 fa98 	bl	8015b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2140      	movs	r1, #64	; 0x40
 801565e:	4618      	mov	r0, r3
 8015660:	f000 faf1 	bl	8015c46 <TIM_ITRx_SetConfig>
      break;
 8015664:	e00b      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681a      	ldr	r2, [r3, #0]
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	4619      	mov	r1, r3
 8015670:	4610      	mov	r0, r2
 8015672:	f000 fae8 	bl	8015c46 <TIM_ITRx_SetConfig>
      break;
 8015676:	e002      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8015678:	bf00      	nop
 801567a:	e000      	b.n	801567e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801567c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2201      	movs	r2, #1
 8015682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2200      	movs	r2, #0
 801568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801568e:	2300      	movs	r3, #0
}
 8015690:	4618      	mov	r0, r3
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015698:	b480      	push	{r7}
 801569a:	b083      	sub	sp, #12
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80156a0:	bf00      	nop
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80156b4:	bf00      	nop
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80156c8:	bf00      	nop
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80156dc:	bf00      	nop
 80156de:	370c      	adds	r7, #12
 80156e0:	46bd      	mov	sp, r7
 80156e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e6:	4770      	bx	lr

080156e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80156e8:	b480      	push	{r7}
 80156ea:	b085      	sub	sp, #20
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	4a40      	ldr	r2, [pc, #256]	; (80157fc <TIM_Base_SetConfig+0x114>)
 80156fc:	4293      	cmp	r3, r2
 80156fe:	d013      	beq.n	8015728 <TIM_Base_SetConfig+0x40>
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015706:	d00f      	beq.n	8015728 <TIM_Base_SetConfig+0x40>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4a3d      	ldr	r2, [pc, #244]	; (8015800 <TIM_Base_SetConfig+0x118>)
 801570c:	4293      	cmp	r3, r2
 801570e:	d00b      	beq.n	8015728 <TIM_Base_SetConfig+0x40>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	4a3c      	ldr	r2, [pc, #240]	; (8015804 <TIM_Base_SetConfig+0x11c>)
 8015714:	4293      	cmp	r3, r2
 8015716:	d007      	beq.n	8015728 <TIM_Base_SetConfig+0x40>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	4a3b      	ldr	r2, [pc, #236]	; (8015808 <TIM_Base_SetConfig+0x120>)
 801571c:	4293      	cmp	r3, r2
 801571e:	d003      	beq.n	8015728 <TIM_Base_SetConfig+0x40>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	4a3a      	ldr	r2, [pc, #232]	; (801580c <TIM_Base_SetConfig+0x124>)
 8015724:	4293      	cmp	r3, r2
 8015726:	d108      	bne.n	801573a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801572e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	68fa      	ldr	r2, [r7, #12]
 8015736:	4313      	orrs	r3, r2
 8015738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	4a2f      	ldr	r2, [pc, #188]	; (80157fc <TIM_Base_SetConfig+0x114>)
 801573e:	4293      	cmp	r3, r2
 8015740:	d02b      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015748:	d027      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4a2c      	ldr	r2, [pc, #176]	; (8015800 <TIM_Base_SetConfig+0x118>)
 801574e:	4293      	cmp	r3, r2
 8015750:	d023      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4a2b      	ldr	r2, [pc, #172]	; (8015804 <TIM_Base_SetConfig+0x11c>)
 8015756:	4293      	cmp	r3, r2
 8015758:	d01f      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4a2a      	ldr	r2, [pc, #168]	; (8015808 <TIM_Base_SetConfig+0x120>)
 801575e:	4293      	cmp	r3, r2
 8015760:	d01b      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4a29      	ldr	r2, [pc, #164]	; (801580c <TIM_Base_SetConfig+0x124>)
 8015766:	4293      	cmp	r3, r2
 8015768:	d017      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	4a28      	ldr	r2, [pc, #160]	; (8015810 <TIM_Base_SetConfig+0x128>)
 801576e:	4293      	cmp	r3, r2
 8015770:	d013      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	4a27      	ldr	r2, [pc, #156]	; (8015814 <TIM_Base_SetConfig+0x12c>)
 8015776:	4293      	cmp	r3, r2
 8015778:	d00f      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4a26      	ldr	r2, [pc, #152]	; (8015818 <TIM_Base_SetConfig+0x130>)
 801577e:	4293      	cmp	r3, r2
 8015780:	d00b      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	4a25      	ldr	r2, [pc, #148]	; (801581c <TIM_Base_SetConfig+0x134>)
 8015786:	4293      	cmp	r3, r2
 8015788:	d007      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	4a24      	ldr	r2, [pc, #144]	; (8015820 <TIM_Base_SetConfig+0x138>)
 801578e:	4293      	cmp	r3, r2
 8015790:	d003      	beq.n	801579a <TIM_Base_SetConfig+0xb2>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	4a23      	ldr	r2, [pc, #140]	; (8015824 <TIM_Base_SetConfig+0x13c>)
 8015796:	4293      	cmp	r3, r2
 8015798:	d108      	bne.n	80157ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80157a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	68fa      	ldr	r2, [r7, #12]
 80157a8:	4313      	orrs	r3, r2
 80157aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	695b      	ldr	r3, [r3, #20]
 80157b6:	4313      	orrs	r3, r2
 80157b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	68fa      	ldr	r2, [r7, #12]
 80157be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	689a      	ldr	r2, [r3, #8]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	681a      	ldr	r2, [r3, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	4a0a      	ldr	r2, [pc, #40]	; (80157fc <TIM_Base_SetConfig+0x114>)
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d003      	beq.n	80157e0 <TIM_Base_SetConfig+0xf8>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	4a0c      	ldr	r2, [pc, #48]	; (801580c <TIM_Base_SetConfig+0x124>)
 80157dc:	4293      	cmp	r3, r2
 80157de:	d103      	bne.n	80157e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	691a      	ldr	r2, [r3, #16]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2201      	movs	r2, #1
 80157ec:	615a      	str	r2, [r3, #20]
}
 80157ee:	bf00      	nop
 80157f0:	3714      	adds	r7, #20
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr
 80157fa:	bf00      	nop
 80157fc:	40010000 	.word	0x40010000
 8015800:	40000400 	.word	0x40000400
 8015804:	40000800 	.word	0x40000800
 8015808:	40000c00 	.word	0x40000c00
 801580c:	40010400 	.word	0x40010400
 8015810:	40014000 	.word	0x40014000
 8015814:	40014400 	.word	0x40014400
 8015818:	40014800 	.word	0x40014800
 801581c:	40001800 	.word	0x40001800
 8015820:	40001c00 	.word	0x40001c00
 8015824:	40002000 	.word	0x40002000

08015828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015828:	b480      	push	{r7}
 801582a:	b087      	sub	sp, #28
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6a1b      	ldr	r3, [r3, #32]
 8015836:	f023 0201 	bic.w	r2, r3, #1
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6a1b      	ldr	r3, [r3, #32]
 8015842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	699b      	ldr	r3, [r3, #24]
 801584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f023 0303 	bic.w	r3, r3, #3
 801585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	68fa      	ldr	r2, [r7, #12]
 8015866:	4313      	orrs	r3, r2
 8015868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	f023 0302 	bic.w	r3, r3, #2
 8015870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	689b      	ldr	r3, [r3, #8]
 8015876:	697a      	ldr	r2, [r7, #20]
 8015878:	4313      	orrs	r3, r2
 801587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	4a20      	ldr	r2, [pc, #128]	; (8015900 <TIM_OC1_SetConfig+0xd8>)
 8015880:	4293      	cmp	r3, r2
 8015882:	d003      	beq.n	801588c <TIM_OC1_SetConfig+0x64>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a1f      	ldr	r2, [pc, #124]	; (8015904 <TIM_OC1_SetConfig+0xdc>)
 8015888:	4293      	cmp	r3, r2
 801588a:	d10c      	bne.n	80158a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	f023 0308 	bic.w	r3, r3, #8
 8015892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	697a      	ldr	r2, [r7, #20]
 801589a:	4313      	orrs	r3, r2
 801589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	f023 0304 	bic.w	r3, r3, #4
 80158a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	4a15      	ldr	r2, [pc, #84]	; (8015900 <TIM_OC1_SetConfig+0xd8>)
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d003      	beq.n	80158b6 <TIM_OC1_SetConfig+0x8e>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4a14      	ldr	r2, [pc, #80]	; (8015904 <TIM_OC1_SetConfig+0xdc>)
 80158b2:	4293      	cmp	r3, r2
 80158b4:	d111      	bne.n	80158da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80158bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80158c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	695b      	ldr	r3, [r3, #20]
 80158ca:	693a      	ldr	r2, [r7, #16]
 80158cc:	4313      	orrs	r3, r2
 80158ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	699b      	ldr	r3, [r3, #24]
 80158d4:	693a      	ldr	r2, [r7, #16]
 80158d6:	4313      	orrs	r3, r2
 80158d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	693a      	ldr	r2, [r7, #16]
 80158de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	68fa      	ldr	r2, [r7, #12]
 80158e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	685a      	ldr	r2, [r3, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	697a      	ldr	r2, [r7, #20]
 80158f2:	621a      	str	r2, [r3, #32]
}
 80158f4:	bf00      	nop
 80158f6:	371c      	adds	r7, #28
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr
 8015900:	40010000 	.word	0x40010000
 8015904:	40010400 	.word	0x40010400

08015908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015908:	b480      	push	{r7}
 801590a:	b087      	sub	sp, #28
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	6a1b      	ldr	r3, [r3, #32]
 8015916:	f023 0210 	bic.w	r2, r3, #16
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	6a1b      	ldr	r3, [r3, #32]
 8015922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	699b      	ldr	r3, [r3, #24]
 801592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801593e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	021b      	lsls	r3, r3, #8
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	4313      	orrs	r3, r2
 801594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	f023 0320 	bic.w	r3, r3, #32
 8015952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015954:	683b      	ldr	r3, [r7, #0]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	011b      	lsls	r3, r3, #4
 801595a:	697a      	ldr	r2, [r7, #20]
 801595c:	4313      	orrs	r3, r2
 801595e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	4a22      	ldr	r2, [pc, #136]	; (80159ec <TIM_OC2_SetConfig+0xe4>)
 8015964:	4293      	cmp	r3, r2
 8015966:	d003      	beq.n	8015970 <TIM_OC2_SetConfig+0x68>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	4a21      	ldr	r2, [pc, #132]	; (80159f0 <TIM_OC2_SetConfig+0xe8>)
 801596c:	4293      	cmp	r3, r2
 801596e:	d10d      	bne.n	801598c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	011b      	lsls	r3, r3, #4
 801597e:	697a      	ldr	r2, [r7, #20]
 8015980:	4313      	orrs	r3, r2
 8015982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801598a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	4a17      	ldr	r2, [pc, #92]	; (80159ec <TIM_OC2_SetConfig+0xe4>)
 8015990:	4293      	cmp	r3, r2
 8015992:	d003      	beq.n	801599c <TIM_OC2_SetConfig+0x94>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	4a16      	ldr	r2, [pc, #88]	; (80159f0 <TIM_OC2_SetConfig+0xe8>)
 8015998:	4293      	cmp	r3, r2
 801599a:	d113      	bne.n	80159c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80159a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80159aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	695b      	ldr	r3, [r3, #20]
 80159b0:	009b      	lsls	r3, r3, #2
 80159b2:	693a      	ldr	r2, [r7, #16]
 80159b4:	4313      	orrs	r3, r2
 80159b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	699b      	ldr	r3, [r3, #24]
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	693a      	ldr	r2, [r7, #16]
 80159c0:	4313      	orrs	r3, r2
 80159c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	693a      	ldr	r2, [r7, #16]
 80159c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	68fa      	ldr	r2, [r7, #12]
 80159ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	685a      	ldr	r2, [r3, #4]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	697a      	ldr	r2, [r7, #20]
 80159dc:	621a      	str	r2, [r3, #32]
}
 80159de:	bf00      	nop
 80159e0:	371c      	adds	r7, #28
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	40010000 	.word	0x40010000
 80159f0:	40010400 	.word	0x40010400

080159f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80159f4:	b480      	push	{r7}
 80159f6:	b087      	sub	sp, #28
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6a1b      	ldr	r3, [r3, #32]
 8015a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	6a1b      	ldr	r3, [r3, #32]
 8015a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	69db      	ldr	r3, [r3, #28]
 8015a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	f023 0303 	bic.w	r3, r3, #3
 8015a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	4313      	orrs	r3, r2
 8015a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	689b      	ldr	r3, [r3, #8]
 8015a42:	021b      	lsls	r3, r3, #8
 8015a44:	697a      	ldr	r2, [r7, #20]
 8015a46:	4313      	orrs	r3, r2
 8015a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4a21      	ldr	r2, [pc, #132]	; (8015ad4 <TIM_OC3_SetConfig+0xe0>)
 8015a4e:	4293      	cmp	r3, r2
 8015a50:	d003      	beq.n	8015a5a <TIM_OC3_SetConfig+0x66>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	4a20      	ldr	r2, [pc, #128]	; (8015ad8 <TIM_OC3_SetConfig+0xe4>)
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d10d      	bne.n	8015a76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	021b      	lsls	r3, r3, #8
 8015a68:	697a      	ldr	r2, [r7, #20]
 8015a6a:	4313      	orrs	r3, r2
 8015a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015a6e:	697b      	ldr	r3, [r7, #20]
 8015a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	4a16      	ldr	r2, [pc, #88]	; (8015ad4 <TIM_OC3_SetConfig+0xe0>)
 8015a7a:	4293      	cmp	r3, r2
 8015a7c:	d003      	beq.n	8015a86 <TIM_OC3_SetConfig+0x92>
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	4a15      	ldr	r2, [pc, #84]	; (8015ad8 <TIM_OC3_SetConfig+0xe4>)
 8015a82:	4293      	cmp	r3, r2
 8015a84:	d113      	bne.n	8015aae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	695b      	ldr	r3, [r3, #20]
 8015a9a:	011b      	lsls	r3, r3, #4
 8015a9c:	693a      	ldr	r2, [r7, #16]
 8015a9e:	4313      	orrs	r3, r2
 8015aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	699b      	ldr	r3, [r3, #24]
 8015aa6:	011b      	lsls	r3, r3, #4
 8015aa8:	693a      	ldr	r2, [r7, #16]
 8015aaa:	4313      	orrs	r3, r2
 8015aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	693a      	ldr	r2, [r7, #16]
 8015ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	685a      	ldr	r2, [r3, #4]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	697a      	ldr	r2, [r7, #20]
 8015ac6:	621a      	str	r2, [r3, #32]
}
 8015ac8:	bf00      	nop
 8015aca:	371c      	adds	r7, #28
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr
 8015ad4:	40010000 	.word	0x40010000
 8015ad8:	40010400 	.word	0x40010400

08015adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b087      	sub	sp, #28
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6a1b      	ldr	r3, [r3, #32]
 8015aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6a1b      	ldr	r3, [r3, #32]
 8015af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	69db      	ldr	r3, [r3, #28]
 8015b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	021b      	lsls	r3, r3, #8
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	4313      	orrs	r3, r2
 8015b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	689b      	ldr	r3, [r3, #8]
 8015b2c:	031b      	lsls	r3, r3, #12
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	4313      	orrs	r3, r2
 8015b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	4a12      	ldr	r2, [pc, #72]	; (8015b80 <TIM_OC4_SetConfig+0xa4>)
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d003      	beq.n	8015b44 <TIM_OC4_SetConfig+0x68>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	4a11      	ldr	r2, [pc, #68]	; (8015b84 <TIM_OC4_SetConfig+0xa8>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d109      	bne.n	8015b58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	695b      	ldr	r3, [r3, #20]
 8015b50:	019b      	lsls	r3, r3, #6
 8015b52:	697a      	ldr	r2, [r7, #20]
 8015b54:	4313      	orrs	r3, r2
 8015b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	697a      	ldr	r2, [r7, #20]
 8015b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	68fa      	ldr	r2, [r7, #12]
 8015b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	685a      	ldr	r2, [r3, #4]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	693a      	ldr	r2, [r7, #16]
 8015b70:	621a      	str	r2, [r3, #32]
}
 8015b72:	bf00      	nop
 8015b74:	371c      	adds	r7, #28
 8015b76:	46bd      	mov	sp, r7
 8015b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7c:	4770      	bx	lr
 8015b7e:	bf00      	nop
 8015b80:	40010000 	.word	0x40010000
 8015b84:	40010400 	.word	0x40010400

08015b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b087      	sub	sp, #28
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	6a1b      	ldr	r3, [r3, #32]
 8015b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	6a1b      	ldr	r3, [r3, #32]
 8015b9e:	f023 0201 	bic.w	r2, r3, #1
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	699b      	ldr	r3, [r3, #24]
 8015baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	011b      	lsls	r3, r3, #4
 8015bb8:	693a      	ldr	r2, [r7, #16]
 8015bba:	4313      	orrs	r3, r2
 8015bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	f023 030a 	bic.w	r3, r3, #10
 8015bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	4313      	orrs	r3, r2
 8015bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	693a      	ldr	r2, [r7, #16]
 8015bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	697a      	ldr	r2, [r7, #20]
 8015bd8:	621a      	str	r2, [r3, #32]
}
 8015bda:	bf00      	nop
 8015bdc:	371c      	adds	r7, #28
 8015bde:	46bd      	mov	sp, r7
 8015be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be4:	4770      	bx	lr

08015be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015be6:	b480      	push	{r7}
 8015be8:	b087      	sub	sp, #28
 8015bea:	af00      	add	r7, sp, #0
 8015bec:	60f8      	str	r0, [r7, #12]
 8015bee:	60b9      	str	r1, [r7, #8]
 8015bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	6a1b      	ldr	r3, [r3, #32]
 8015bf6:	f023 0210 	bic.w	r2, r3, #16
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	699b      	ldr	r3, [r3, #24]
 8015c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	6a1b      	ldr	r3, [r3, #32]
 8015c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	031b      	lsls	r3, r3, #12
 8015c16:	697a      	ldr	r2, [r7, #20]
 8015c18:	4313      	orrs	r3, r2
 8015c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015c1c:	693b      	ldr	r3, [r7, #16]
 8015c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	011b      	lsls	r3, r3, #4
 8015c28:	693a      	ldr	r2, [r7, #16]
 8015c2a:	4313      	orrs	r3, r2
 8015c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	697a      	ldr	r2, [r7, #20]
 8015c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	693a      	ldr	r2, [r7, #16]
 8015c38:	621a      	str	r2, [r3, #32]
}
 8015c3a:	bf00      	nop
 8015c3c:	371c      	adds	r7, #28
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c44:	4770      	bx	lr

08015c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015c46:	b480      	push	{r7}
 8015c48:	b085      	sub	sp, #20
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
 8015c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	689b      	ldr	r3, [r3, #8]
 8015c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015c5e:	683a      	ldr	r2, [r7, #0]
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	4313      	orrs	r3, r2
 8015c64:	f043 0307 	orr.w	r3, r3, #7
 8015c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	609a      	str	r2, [r3, #8]
}
 8015c70:	bf00      	nop
 8015c72:	3714      	adds	r7, #20
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b087      	sub	sp, #28
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
 8015c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	689b      	ldr	r3, [r3, #8]
 8015c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	021a      	lsls	r2, r3, #8
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	431a      	orrs	r2, r3
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	4313      	orrs	r3, r2
 8015ca4:	697a      	ldr	r2, [r7, #20]
 8015ca6:	4313      	orrs	r3, r2
 8015ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	697a      	ldr	r2, [r7, #20]
 8015cae:	609a      	str	r2, [r3, #8]
}
 8015cb0:	bf00      	nop
 8015cb2:	371c      	adds	r7, #28
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr

08015cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b087      	sub	sp, #28
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	f003 031f 	and.w	r3, r3, #31
 8015cce:	2201      	movs	r2, #1
 8015cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8015cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	6a1a      	ldr	r2, [r3, #32]
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	43db      	mvns	r3, r3
 8015cde:	401a      	ands	r2, r3
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	6a1a      	ldr	r2, [r3, #32]
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	f003 031f 	and.w	r3, r3, #31
 8015cee:	6879      	ldr	r1, [r7, #4]
 8015cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8015cf4:	431a      	orrs	r2, r3
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	621a      	str	r2, [r3, #32]
}
 8015cfa:	bf00      	nop
 8015cfc:	371c      	adds	r7, #28
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d04:	4770      	bx	lr
	...

08015d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d101      	bne.n	8015d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	e05a      	b.n	8015dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2202      	movs	r2, #2
 8015d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	68fa      	ldr	r2, [r7, #12]
 8015d4e:	4313      	orrs	r3, r2
 8015d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	68fa      	ldr	r2, [r7, #12]
 8015d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4a21      	ldr	r2, [pc, #132]	; (8015de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015d60:	4293      	cmp	r3, r2
 8015d62:	d022      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d6c:	d01d      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	4a1d      	ldr	r2, [pc, #116]	; (8015de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015d74:	4293      	cmp	r3, r2
 8015d76:	d018      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4a1b      	ldr	r2, [pc, #108]	; (8015dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d013      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4a1a      	ldr	r2, [pc, #104]	; (8015df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d00e      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a18      	ldr	r2, [pc, #96]	; (8015df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d009      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	4a17      	ldr	r2, [pc, #92]	; (8015df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	d004      	beq.n	8015daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	4a15      	ldr	r2, [pc, #84]	; (8015dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d10c      	bne.n	8015dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	685b      	ldr	r3, [r3, #4]
 8015db6:	68ba      	ldr	r2, [r7, #8]
 8015db8:	4313      	orrs	r3, r2
 8015dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	68ba      	ldr	r2, [r7, #8]
 8015dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015dd4:	2300      	movs	r3, #0
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3714      	adds	r7, #20
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr
 8015de2:	bf00      	nop
 8015de4:	40010000 	.word	0x40010000
 8015de8:	40000400 	.word	0x40000400
 8015dec:	40000800 	.word	0x40000800
 8015df0:	40000c00 	.word	0x40000c00
 8015df4:	40010400 	.word	0x40010400
 8015df8:	40014000 	.word	0x40014000
 8015dfc:	40001800 	.word	0x40001800

08015e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015e00:	b480      	push	{r7}
 8015e02:	b083      	sub	sp, #12
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015e08:	bf00      	nop
 8015e0a:	370c      	adds	r7, #12
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015e1c:	bf00      	nop
 8015e1e:	370c      	adds	r7, #12
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr

08015e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d101      	bne.n	8015e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015e36:	2301      	movs	r3, #1
 8015e38:	e03f      	b.n	8015eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d106      	bne.n	8015e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7ec fcda 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2224      	movs	r2, #36	; 0x24
 8015e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	68da      	ldr	r2, [r3, #12]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f000 fb97 	bl	80165a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	691a      	ldr	r2, [r3, #16]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	695a      	ldr	r2, [r3, #20]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	68da      	ldr	r2, [r3, #12]
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2220      	movs	r2, #32
 8015eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2220      	movs	r2, #32
 8015eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8015eb8:	2300      	movs	r3, #0
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}

08015ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015ec2:	b580      	push	{r7, lr}
 8015ec4:	b088      	sub	sp, #32
 8015ec6:	af02      	add	r7, sp, #8
 8015ec8:	60f8      	str	r0, [r7, #12]
 8015eca:	60b9      	str	r1, [r7, #8]
 8015ecc:	603b      	str	r3, [r7, #0]
 8015ece:	4613      	mov	r3, r2
 8015ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015edc:	b2db      	uxtb	r3, r3
 8015ede:	2b20      	cmp	r3, #32
 8015ee0:	f040 8083 	bne.w	8015fea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d002      	beq.n	8015ef0 <HAL_UART_Transmit+0x2e>
 8015eea:	88fb      	ldrh	r3, [r7, #6]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d101      	bne.n	8015ef4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	e07b      	b.n	8015fec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d101      	bne.n	8015f02 <HAL_UART_Transmit+0x40>
 8015efe:	2302      	movs	r3, #2
 8015f00:	e074      	b.n	8015fec <HAL_UART_Transmit+0x12a>
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2201      	movs	r2, #1
 8015f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2221      	movs	r2, #33	; 0x21
 8015f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015f18:	f7fa fac8 	bl	80104ac <HAL_GetTick>
 8015f1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	88fa      	ldrh	r2, [r7, #6]
 8015f22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	88fa      	ldrh	r2, [r7, #6]
 8015f28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8015f32:	e042      	b.n	8015fba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	689b      	ldr	r3, [r3, #8]
 8015f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f4a:	d122      	bne.n	8015f92 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	9300      	str	r3, [sp, #0]
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	2200      	movs	r2, #0
 8015f54:	2180      	movs	r1, #128	; 0x80
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	f000 f9b6 	bl	80162c8 <UART_WaitOnFlagUntilTimeout>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d001      	beq.n	8015f66 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8015f62:	2303      	movs	r3, #3
 8015f64:	e042      	b.n	8015fec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	881b      	ldrh	r3, [r3, #0]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015f78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	691b      	ldr	r3, [r3, #16]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d103      	bne.n	8015f8a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	3302      	adds	r3, #2
 8015f86:	60bb      	str	r3, [r7, #8]
 8015f88:	e017      	b.n	8015fba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	60bb      	str	r3, [r7, #8]
 8015f90:	e013      	b.n	8015fba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	2180      	movs	r1, #128	; 0x80
 8015f9c:	68f8      	ldr	r0, [r7, #12]
 8015f9e:	f000 f993 	bl	80162c8 <UART_WaitOnFlagUntilTimeout>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8015fa8:	2303      	movs	r3, #3
 8015faa:	e01f      	b.n	8015fec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	1c5a      	adds	r2, r3, #1
 8015fb0:	60ba      	str	r2, [r7, #8]
 8015fb2:	781a      	ldrb	r2, [r3, #0]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1b7      	bne.n	8015f34 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	2140      	movs	r1, #64	; 0x40
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f000 f97a 	bl	80162c8 <UART_WaitOnFlagUntilTimeout>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d001      	beq.n	8015fde <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8015fda:	2303      	movs	r3, #3
 8015fdc:	e006      	b.n	8015fec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2220      	movs	r2, #32
 8015fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e000      	b.n	8015fec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8015fea:	2302      	movs	r3, #2
  }
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	3718      	adds	r7, #24
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b085      	sub	sp, #20
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	4613      	mov	r3, r2
 8016000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b20      	cmp	r3, #32
 801600c:	d140      	bne.n	8016090 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d002      	beq.n	801601a <HAL_UART_Receive_IT+0x26>
 8016014:	88fb      	ldrh	r3, [r7, #6]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d101      	bne.n	801601e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801601a:	2301      	movs	r3, #1
 801601c:	e039      	b.n	8016092 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016024:	2b01      	cmp	r3, #1
 8016026:	d101      	bne.n	801602c <HAL_UART_Receive_IT+0x38>
 8016028:	2302      	movs	r3, #2
 801602a:	e032      	b.n	8016092 <HAL_UART_Receive_IT+0x9e>
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	2201      	movs	r2, #1
 8016030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	68ba      	ldr	r2, [r7, #8]
 8016038:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	88fa      	ldrh	r2, [r7, #6]
 801603e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	88fa      	ldrh	r2, [r7, #6]
 8016044:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2200      	movs	r2, #0
 801604a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	2222      	movs	r2, #34	; 0x22
 8016050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2200      	movs	r2, #0
 8016058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	68da      	ldr	r2, [r3, #12]
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801606a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	695a      	ldr	r2, [r3, #20]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	f042 0201 	orr.w	r2, r2, #1
 801607a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	68da      	ldr	r2, [r3, #12]
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	f042 0220 	orr.w	r2, r2, #32
 801608a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801608c:	2300      	movs	r3, #0
 801608e:	e000      	b.n	8016092 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8016090:	2302      	movs	r3, #2
  }
}
 8016092:	4618      	mov	r0, r3
 8016094:	3714      	adds	r7, #20
 8016096:	46bd      	mov	sp, r7
 8016098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609c:	4770      	bx	lr
	...

080160a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b088      	sub	sp, #32
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	68db      	ldr	r3, [r3, #12]
 80160b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	695b      	ldr	r3, [r3, #20]
 80160be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80160c0:	2300      	movs	r3, #0
 80160c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80160c4:	2300      	movs	r3, #0
 80160c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80160c8:	69fb      	ldr	r3, [r7, #28]
 80160ca:	f003 030f 	and.w	r3, r3, #15
 80160ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d10d      	bne.n	80160f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80160d6:	69fb      	ldr	r3, [r7, #28]
 80160d8:	f003 0320 	and.w	r3, r3, #32
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d008      	beq.n	80160f2 <HAL_UART_IRQHandler+0x52>
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	f003 0320 	and.w	r3, r3, #32
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d003      	beq.n	80160f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f000 f9d6 	bl	801649c <UART_Receive_IT>
      return;
 80160f0:	e0d0      	b.n	8016294 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f000 80b0 	beq.w	801625a <HAL_UART_IRQHandler+0x1ba>
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	f003 0301 	and.w	r3, r3, #1
 8016100:	2b00      	cmp	r3, #0
 8016102:	d105      	bne.n	8016110 <HAL_UART_IRQHandler+0x70>
 8016104:	69bb      	ldr	r3, [r7, #24]
 8016106:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801610a:	2b00      	cmp	r3, #0
 801610c:	f000 80a5 	beq.w	801625a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016110:	69fb      	ldr	r3, [r7, #28]
 8016112:	f003 0301 	and.w	r3, r3, #1
 8016116:	2b00      	cmp	r3, #0
 8016118:	d00a      	beq.n	8016130 <HAL_UART_IRQHandler+0x90>
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016120:	2b00      	cmp	r3, #0
 8016122:	d005      	beq.n	8016130 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016128:	f043 0201 	orr.w	r2, r3, #1
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	f003 0304 	and.w	r3, r3, #4
 8016136:	2b00      	cmp	r3, #0
 8016138:	d00a      	beq.n	8016150 <HAL_UART_IRQHandler+0xb0>
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	f003 0301 	and.w	r3, r3, #1
 8016140:	2b00      	cmp	r3, #0
 8016142:	d005      	beq.n	8016150 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016148:	f043 0202 	orr.w	r2, r3, #2
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	f003 0302 	and.w	r3, r3, #2
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00a      	beq.n	8016170 <HAL_UART_IRQHandler+0xd0>
 801615a:	697b      	ldr	r3, [r7, #20]
 801615c:	f003 0301 	and.w	r3, r3, #1
 8016160:	2b00      	cmp	r3, #0
 8016162:	d005      	beq.n	8016170 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016168:	f043 0204 	orr.w	r2, r3, #4
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	f003 0308 	and.w	r3, r3, #8
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00f      	beq.n	801619a <HAL_UART_IRQHandler+0xfa>
 801617a:	69bb      	ldr	r3, [r7, #24]
 801617c:	f003 0320 	and.w	r3, r3, #32
 8016180:	2b00      	cmp	r3, #0
 8016182:	d104      	bne.n	801618e <HAL_UART_IRQHandler+0xee>
 8016184:	697b      	ldr	r3, [r7, #20]
 8016186:	f003 0301 	and.w	r3, r3, #1
 801618a:	2b00      	cmp	r3, #0
 801618c:	d005      	beq.n	801619a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016192:	f043 0208 	orr.w	r2, r3, #8
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d077      	beq.n	8016292 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80161a2:	69fb      	ldr	r3, [r7, #28]
 80161a4:	f003 0320 	and.w	r3, r3, #32
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d007      	beq.n	80161bc <HAL_UART_IRQHandler+0x11c>
 80161ac:	69bb      	ldr	r3, [r7, #24]
 80161ae:	f003 0320 	and.w	r3, r3, #32
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d002      	beq.n	80161bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f000 f970 	bl	801649c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	695b      	ldr	r3, [r3, #20]
 80161c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161c6:	2b40      	cmp	r3, #64	; 0x40
 80161c8:	bf0c      	ite	eq
 80161ca:	2301      	moveq	r3, #1
 80161cc:	2300      	movne	r3, #0
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161d6:	f003 0308 	and.w	r3, r3, #8
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d102      	bne.n	80161e4 <HAL_UART_IRQHandler+0x144>
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d031      	beq.n	8016248 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f000 f8b9 	bl	801635c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	695b      	ldr	r3, [r3, #20]
 80161f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161f4:	2b40      	cmp	r3, #64	; 0x40
 80161f6:	d123      	bne.n	8016240 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	695a      	ldr	r2, [r3, #20]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016206:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801620c:	2b00      	cmp	r3, #0
 801620e:	d013      	beq.n	8016238 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016214:	4a21      	ldr	r2, [pc, #132]	; (801629c <HAL_UART_IRQHandler+0x1fc>)
 8016216:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801621c:	4618      	mov	r0, r3
 801621e:	f7fb fa83 	bl	8011728 <HAL_DMA_Abort_IT>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d016      	beq.n	8016256 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801622c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016232:	4610      	mov	r0, r2
 8016234:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016236:	e00e      	b.n	8016256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 f83b 	bl	80162b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801623e:	e00a      	b.n	8016256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f000 f837 	bl	80162b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016246:	e006      	b.n	8016256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 f833 	bl	80162b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2200      	movs	r2, #0
 8016252:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8016254:	e01d      	b.n	8016292 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016256:	bf00      	nop
    return;
 8016258:	e01b      	b.n	8016292 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801625a:	69fb      	ldr	r3, [r7, #28]
 801625c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016260:	2b00      	cmp	r3, #0
 8016262:	d008      	beq.n	8016276 <HAL_UART_IRQHandler+0x1d6>
 8016264:	69bb      	ldr	r3, [r7, #24]
 8016266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801626a:	2b00      	cmp	r3, #0
 801626c:	d003      	beq.n	8016276 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f8a6 	bl	80163c0 <UART_Transmit_IT>
    return;
 8016274:	e00e      	b.n	8016294 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801627c:	2b00      	cmp	r3, #0
 801627e:	d009      	beq.n	8016294 <HAL_UART_IRQHandler+0x1f4>
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016286:	2b00      	cmp	r3, #0
 8016288:	d004      	beq.n	8016294 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 f8ee 	bl	801646c <UART_EndTransmit_IT>
    return;
 8016290:	e000      	b.n	8016294 <HAL_UART_IRQHandler+0x1f4>
    return;
 8016292:	bf00      	nop
  }
}
 8016294:	3720      	adds	r7, #32
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	08016399 	.word	0x08016399

080162a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b083      	sub	sp, #12
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80162a8:	bf00      	nop
 80162aa:	370c      	adds	r7, #12
 80162ac:	46bd      	mov	sp, r7
 80162ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b2:	4770      	bx	lr

080162b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80162bc:	bf00      	nop
 80162be:	370c      	adds	r7, #12
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr

080162c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	603b      	str	r3, [r7, #0]
 80162d4:	4613      	mov	r3, r2
 80162d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80162d8:	e02c      	b.n	8016334 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80162da:	69bb      	ldr	r3, [r7, #24]
 80162dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162e0:	d028      	beq.n	8016334 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d007      	beq.n	80162f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80162e8:	f7fa f8e0 	bl	80104ac <HAL_GetTick>
 80162ec:	4602      	mov	r2, r0
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	69ba      	ldr	r2, [r7, #24]
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d21d      	bcs.n	8016334 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	68da      	ldr	r2, [r3, #12]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016306:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	695a      	ldr	r2, [r3, #20]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	f022 0201 	bic.w	r2, r2, #1
 8016316:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	2220      	movs	r2, #32
 801631c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2220      	movs	r2, #32
 8016324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2200      	movs	r2, #0
 801632c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8016330:	2303      	movs	r3, #3
 8016332:	e00f      	b.n	8016354 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	4013      	ands	r3, r2
 801633e:	68ba      	ldr	r2, [r7, #8]
 8016340:	429a      	cmp	r2, r3
 8016342:	bf0c      	ite	eq
 8016344:	2301      	moveq	r3, #1
 8016346:	2300      	movne	r3, #0
 8016348:	b2db      	uxtb	r3, r3
 801634a:	461a      	mov	r2, r3
 801634c:	79fb      	ldrb	r3, [r7, #7]
 801634e:	429a      	cmp	r2, r3
 8016350:	d0c3      	beq.n	80162da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016352:	2300      	movs	r3, #0
}
 8016354:	4618      	mov	r0, r3
 8016356:	3710      	adds	r7, #16
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	68da      	ldr	r2, [r3, #12]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8016372:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	695a      	ldr	r2, [r3, #20]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	f022 0201 	bic.w	r2, r2, #1
 8016382:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2220      	movs	r2, #32
 8016388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801638c:	bf00      	nop
 801638e:	370c      	adds	r7, #12
 8016390:	46bd      	mov	sp, r7
 8016392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016396:	4770      	bx	lr

08016398 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b084      	sub	sp, #16
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2200      	movs	r2, #0
 80163aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	2200      	movs	r2, #0
 80163b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80163b2:	68f8      	ldr	r0, [r7, #12]
 80163b4:	f7ff ff7e 	bl	80162b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80163b8:	bf00      	nop
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80163ce:	b2db      	uxtb	r3, r3
 80163d0:	2b21      	cmp	r3, #33	; 0x21
 80163d2:	d144      	bne.n	801645e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	689b      	ldr	r3, [r3, #8]
 80163d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80163dc:	d11a      	bne.n	8016414 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	6a1b      	ldr	r3, [r3, #32]
 80163e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	461a      	mov	r2, r3
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80163f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	691b      	ldr	r3, [r3, #16]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d105      	bne.n	8016408 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6a1b      	ldr	r3, [r3, #32]
 8016400:	1c9a      	adds	r2, r3, #2
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	621a      	str	r2, [r3, #32]
 8016406:	e00e      	b.n	8016426 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6a1b      	ldr	r3, [r3, #32]
 801640c:	1c5a      	adds	r2, r3, #1
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	621a      	str	r2, [r3, #32]
 8016412:	e008      	b.n	8016426 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6a1b      	ldr	r3, [r3, #32]
 8016418:	1c59      	adds	r1, r3, #1
 801641a:	687a      	ldr	r2, [r7, #4]
 801641c:	6211      	str	r1, [r2, #32]
 801641e:	781a      	ldrb	r2, [r3, #0]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801642a:	b29b      	uxth	r3, r3
 801642c:	3b01      	subs	r3, #1
 801642e:	b29b      	uxth	r3, r3
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	4619      	mov	r1, r3
 8016434:	84d1      	strh	r1, [r2, #38]	; 0x26
 8016436:	2b00      	cmp	r3, #0
 8016438:	d10f      	bne.n	801645a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	68da      	ldr	r2, [r3, #12]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016448:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	68da      	ldr	r2, [r3, #12]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016458:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801645a:	2300      	movs	r3, #0
 801645c:	e000      	b.n	8016460 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801645e:	2302      	movs	r3, #2
  }
}
 8016460:	4618      	mov	r0, r3
 8016462:	3714      	adds	r7, #20
 8016464:	46bd      	mov	sp, r7
 8016466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646a:	4770      	bx	lr

0801646c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	68da      	ldr	r2, [r3, #12]
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016482:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2220      	movs	r2, #32
 8016488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7ff ff07 	bl	80162a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8016492:	2300      	movs	r3, #0
}
 8016494:	4618      	mov	r0, r3
 8016496:	3708      	adds	r7, #8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b22      	cmp	r3, #34	; 0x22
 80164ae:	d171      	bne.n	8016594 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	689b      	ldr	r3, [r3, #8]
 80164b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164b8:	d123      	bne.n	8016502 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	691b      	ldr	r3, [r3, #16]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d10e      	bne.n	80164e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164d4:	b29a      	uxth	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164de:	1c9a      	adds	r2, r3, #2
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	629a      	str	r2, [r3, #40]	; 0x28
 80164e4:	e029      	b.n	801653a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	b29b      	uxth	r3, r3
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	b29a      	uxth	r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164fa:	1c5a      	adds	r2, r3, #1
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	629a      	str	r2, [r3, #40]	; 0x28
 8016500:	e01b      	b.n	801653a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	691b      	ldr	r3, [r3, #16]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d10a      	bne.n	8016520 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	6858      	ldr	r0, [r3, #4]
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016514:	1c59      	adds	r1, r3, #1
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	6291      	str	r1, [r2, #40]	; 0x28
 801651a:	b2c2      	uxtb	r2, r0
 801651c:	701a      	strb	r2, [r3, #0]
 801651e:	e00c      	b.n	801653a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	b2da      	uxtb	r2, r3
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801652c:	1c58      	adds	r0, r3, #1
 801652e:	6879      	ldr	r1, [r7, #4]
 8016530:	6288      	str	r0, [r1, #40]	; 0x28
 8016532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016536:	b2d2      	uxtb	r2, r2
 8016538:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801653e:	b29b      	uxth	r3, r3
 8016540:	3b01      	subs	r3, #1
 8016542:	b29b      	uxth	r3, r3
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	4619      	mov	r1, r3
 8016548:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801654a:	2b00      	cmp	r3, #0
 801654c:	d120      	bne.n	8016590 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	68da      	ldr	r2, [r3, #12]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f022 0220 	bic.w	r2, r2, #32
 801655c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	68da      	ldr	r2, [r3, #12]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801656c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	695a      	ldr	r2, [r3, #20]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f022 0201 	bic.w	r2, r2, #1
 801657c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2220      	movs	r2, #32
 8016582:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7ee f82a 	bl	80045e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801658c:	2300      	movs	r3, #0
 801658e:	e002      	b.n	8016596 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8016590:	2300      	movs	r3, #0
 8016592:	e000      	b.n	8016596 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8016594:	2302      	movs	r3, #2
  }
}
 8016596:	4618      	mov	r0, r3
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
	...

080165a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80165a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a4:	b0bd      	sub	sp, #244	; 0xf4
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80165ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	691b      	ldr	r3, [r3, #16]
 80165b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80165b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165bc:	68d9      	ldr	r1, [r3, #12]
 80165be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	ea40 0301 	orr.w	r3, r0, r1
 80165c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80165ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165ce:	689a      	ldr	r2, [r3, #8]
 80165d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165d4:	691b      	ldr	r3, [r3, #16]
 80165d6:	431a      	orrs	r2, r3
 80165d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165dc:	695b      	ldr	r3, [r3, #20]
 80165de:	431a      	orrs	r2, r3
 80165e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165e4:	69db      	ldr	r3, [r3, #28]
 80165e6:	4313      	orrs	r3, r2
 80165e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80165ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80165f8:	f021 010c 	bic.w	r1, r1, #12
 80165fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016606:	430b      	orrs	r3, r1
 8016608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	695b      	ldr	r3, [r3, #20]
 8016612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8016616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801661a:	6999      	ldr	r1, [r3, #24]
 801661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016620:	681a      	ldr	r2, [r3, #0]
 8016622:	ea40 0301 	orr.w	r3, r0, r1
 8016626:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801662c:	69db      	ldr	r3, [r3, #28]
 801662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016632:	f040 81a5 	bne.w	8016980 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801663a:	681a      	ldr	r2, [r3, #0]
 801663c:	4bcd      	ldr	r3, [pc, #820]	; (8016974 <UART_SetConfig+0x3d4>)
 801663e:	429a      	cmp	r2, r3
 8016640:	d006      	beq.n	8016650 <UART_SetConfig+0xb0>
 8016642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	4bcb      	ldr	r3, [pc, #812]	; (8016978 <UART_SetConfig+0x3d8>)
 801664a:	429a      	cmp	r2, r3
 801664c:	f040 80cb 	bne.w	80167e6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8016650:	f7fe fa86 	bl	8014b60 <HAL_RCC_GetPCLK2Freq>
 8016654:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801665c:	461c      	mov	r4, r3
 801665e:	f04f 0500 	mov.w	r5, #0
 8016662:	4622      	mov	r2, r4
 8016664:	462b      	mov	r3, r5
 8016666:	1891      	adds	r1, r2, r2
 8016668:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801666c:	415b      	adcs	r3, r3
 801666e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016672:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8016676:	1912      	adds	r2, r2, r4
 8016678:	eb45 0303 	adc.w	r3, r5, r3
 801667c:	f04f 0000 	mov.w	r0, #0
 8016680:	f04f 0100 	mov.w	r1, #0
 8016684:	00d9      	lsls	r1, r3, #3
 8016686:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801668a:	00d0      	lsls	r0, r2, #3
 801668c:	4602      	mov	r2, r0
 801668e:	460b      	mov	r3, r1
 8016690:	1911      	adds	r1, r2, r4
 8016692:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8016696:	416b      	adcs	r3, r5
 8016698:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	461a      	mov	r2, r3
 80166a4:	f04f 0300 	mov.w	r3, #0
 80166a8:	1891      	adds	r1, r2, r2
 80166aa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80166ae:	415b      	adcs	r3, r3
 80166b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80166b4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80166b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80166bc:	f7ea fae4 	bl	8000c88 <__aeabi_uldivmod>
 80166c0:	4602      	mov	r2, r0
 80166c2:	460b      	mov	r3, r1
 80166c4:	4bad      	ldr	r3, [pc, #692]	; (801697c <UART_SetConfig+0x3dc>)
 80166c6:	fba3 2302 	umull	r2, r3, r3, r2
 80166ca:	095b      	lsrs	r3, r3, #5
 80166cc:	011e      	lsls	r6, r3, #4
 80166ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80166d2:	461c      	mov	r4, r3
 80166d4:	f04f 0500 	mov.w	r5, #0
 80166d8:	4622      	mov	r2, r4
 80166da:	462b      	mov	r3, r5
 80166dc:	1891      	adds	r1, r2, r2
 80166de:	67b9      	str	r1, [r7, #120]	; 0x78
 80166e0:	415b      	adcs	r3, r3
 80166e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80166e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80166e8:	1912      	adds	r2, r2, r4
 80166ea:	eb45 0303 	adc.w	r3, r5, r3
 80166ee:	f04f 0000 	mov.w	r0, #0
 80166f2:	f04f 0100 	mov.w	r1, #0
 80166f6:	00d9      	lsls	r1, r3, #3
 80166f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80166fc:	00d0      	lsls	r0, r2, #3
 80166fe:	4602      	mov	r2, r0
 8016700:	460b      	mov	r3, r1
 8016702:	1911      	adds	r1, r2, r4
 8016704:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8016708:	416b      	adcs	r3, r5
 801670a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	461a      	mov	r2, r3
 8016716:	f04f 0300 	mov.w	r3, #0
 801671a:	1891      	adds	r1, r2, r2
 801671c:	6739      	str	r1, [r7, #112]	; 0x70
 801671e:	415b      	adcs	r3, r3
 8016720:	677b      	str	r3, [r7, #116]	; 0x74
 8016722:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8016726:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801672a:	f7ea faad 	bl	8000c88 <__aeabi_uldivmod>
 801672e:	4602      	mov	r2, r0
 8016730:	460b      	mov	r3, r1
 8016732:	4b92      	ldr	r3, [pc, #584]	; (801697c <UART_SetConfig+0x3dc>)
 8016734:	fba3 1302 	umull	r1, r3, r3, r2
 8016738:	095b      	lsrs	r3, r3, #5
 801673a:	2164      	movs	r1, #100	; 0x64
 801673c:	fb01 f303 	mul.w	r3, r1, r3
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	00db      	lsls	r3, r3, #3
 8016744:	3332      	adds	r3, #50	; 0x32
 8016746:	4a8d      	ldr	r2, [pc, #564]	; (801697c <UART_SetConfig+0x3dc>)
 8016748:	fba2 2303 	umull	r2, r3, r2, r3
 801674c:	095b      	lsrs	r3, r3, #5
 801674e:	005b      	lsls	r3, r3, #1
 8016750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016754:	441e      	add	r6, r3
 8016756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801675a:	4618      	mov	r0, r3
 801675c:	f04f 0100 	mov.w	r1, #0
 8016760:	4602      	mov	r2, r0
 8016762:	460b      	mov	r3, r1
 8016764:	1894      	adds	r4, r2, r2
 8016766:	66bc      	str	r4, [r7, #104]	; 0x68
 8016768:	415b      	adcs	r3, r3
 801676a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801676c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8016770:	1812      	adds	r2, r2, r0
 8016772:	eb41 0303 	adc.w	r3, r1, r3
 8016776:	f04f 0400 	mov.w	r4, #0
 801677a:	f04f 0500 	mov.w	r5, #0
 801677e:	00dd      	lsls	r5, r3, #3
 8016780:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016784:	00d4      	lsls	r4, r2, #3
 8016786:	4622      	mov	r2, r4
 8016788:	462b      	mov	r3, r5
 801678a:	1814      	adds	r4, r2, r0
 801678c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8016790:	414b      	adcs	r3, r1
 8016792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	461a      	mov	r2, r3
 801679e:	f04f 0300 	mov.w	r3, #0
 80167a2:	1891      	adds	r1, r2, r2
 80167a4:	6639      	str	r1, [r7, #96]	; 0x60
 80167a6:	415b      	adcs	r3, r3
 80167a8:	667b      	str	r3, [r7, #100]	; 0x64
 80167aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80167ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80167b2:	f7ea fa69 	bl	8000c88 <__aeabi_uldivmod>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	4b70      	ldr	r3, [pc, #448]	; (801697c <UART_SetConfig+0x3dc>)
 80167bc:	fba3 1302 	umull	r1, r3, r3, r2
 80167c0:	095b      	lsrs	r3, r3, #5
 80167c2:	2164      	movs	r1, #100	; 0x64
 80167c4:	fb01 f303 	mul.w	r3, r1, r3
 80167c8:	1ad3      	subs	r3, r2, r3
 80167ca:	00db      	lsls	r3, r3, #3
 80167cc:	3332      	adds	r3, #50	; 0x32
 80167ce:	4a6b      	ldr	r2, [pc, #428]	; (801697c <UART_SetConfig+0x3dc>)
 80167d0:	fba2 2303 	umull	r2, r3, r2, r3
 80167d4:	095b      	lsrs	r3, r3, #5
 80167d6:	f003 0207 	and.w	r2, r3, #7
 80167da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4432      	add	r2, r6
 80167e2:	609a      	str	r2, [r3, #8]
 80167e4:	e26d      	b.n	8016cc2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80167e6:	f7fe f9a7 	bl	8014b38 <HAL_RCC_GetPCLK1Freq>
 80167ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80167ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80167f2:	461c      	mov	r4, r3
 80167f4:	f04f 0500 	mov.w	r5, #0
 80167f8:	4622      	mov	r2, r4
 80167fa:	462b      	mov	r3, r5
 80167fc:	1891      	adds	r1, r2, r2
 80167fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8016800:	415b      	adcs	r3, r3
 8016802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8016808:	1912      	adds	r2, r2, r4
 801680a:	eb45 0303 	adc.w	r3, r5, r3
 801680e:	f04f 0000 	mov.w	r0, #0
 8016812:	f04f 0100 	mov.w	r1, #0
 8016816:	00d9      	lsls	r1, r3, #3
 8016818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801681c:	00d0      	lsls	r0, r2, #3
 801681e:	4602      	mov	r2, r0
 8016820:	460b      	mov	r3, r1
 8016822:	1911      	adds	r1, r2, r4
 8016824:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8016828:	416b      	adcs	r3, r5
 801682a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	461a      	mov	r2, r3
 8016836:	f04f 0300 	mov.w	r3, #0
 801683a:	1891      	adds	r1, r2, r2
 801683c:	6539      	str	r1, [r7, #80]	; 0x50
 801683e:	415b      	adcs	r3, r3
 8016840:	657b      	str	r3, [r7, #84]	; 0x54
 8016842:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016846:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801684a:	f7ea fa1d 	bl	8000c88 <__aeabi_uldivmod>
 801684e:	4602      	mov	r2, r0
 8016850:	460b      	mov	r3, r1
 8016852:	4b4a      	ldr	r3, [pc, #296]	; (801697c <UART_SetConfig+0x3dc>)
 8016854:	fba3 2302 	umull	r2, r3, r3, r2
 8016858:	095b      	lsrs	r3, r3, #5
 801685a:	011e      	lsls	r6, r3, #4
 801685c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016860:	461c      	mov	r4, r3
 8016862:	f04f 0500 	mov.w	r5, #0
 8016866:	4622      	mov	r2, r4
 8016868:	462b      	mov	r3, r5
 801686a:	1891      	adds	r1, r2, r2
 801686c:	64b9      	str	r1, [r7, #72]	; 0x48
 801686e:	415b      	adcs	r3, r3
 8016870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016872:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016876:	1912      	adds	r2, r2, r4
 8016878:	eb45 0303 	adc.w	r3, r5, r3
 801687c:	f04f 0000 	mov.w	r0, #0
 8016880:	f04f 0100 	mov.w	r1, #0
 8016884:	00d9      	lsls	r1, r3, #3
 8016886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801688a:	00d0      	lsls	r0, r2, #3
 801688c:	4602      	mov	r2, r0
 801688e:	460b      	mov	r3, r1
 8016890:	1911      	adds	r1, r2, r4
 8016892:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8016896:	416b      	adcs	r3, r5
 8016898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	461a      	mov	r2, r3
 80168a4:	f04f 0300 	mov.w	r3, #0
 80168a8:	1891      	adds	r1, r2, r2
 80168aa:	6439      	str	r1, [r7, #64]	; 0x40
 80168ac:	415b      	adcs	r3, r3
 80168ae:	647b      	str	r3, [r7, #68]	; 0x44
 80168b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80168b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80168b8:	f7ea f9e6 	bl	8000c88 <__aeabi_uldivmod>
 80168bc:	4602      	mov	r2, r0
 80168be:	460b      	mov	r3, r1
 80168c0:	4b2e      	ldr	r3, [pc, #184]	; (801697c <UART_SetConfig+0x3dc>)
 80168c2:	fba3 1302 	umull	r1, r3, r3, r2
 80168c6:	095b      	lsrs	r3, r3, #5
 80168c8:	2164      	movs	r1, #100	; 0x64
 80168ca:	fb01 f303 	mul.w	r3, r1, r3
 80168ce:	1ad3      	subs	r3, r2, r3
 80168d0:	00db      	lsls	r3, r3, #3
 80168d2:	3332      	adds	r3, #50	; 0x32
 80168d4:	4a29      	ldr	r2, [pc, #164]	; (801697c <UART_SetConfig+0x3dc>)
 80168d6:	fba2 2303 	umull	r2, r3, r2, r3
 80168da:	095b      	lsrs	r3, r3, #5
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80168e2:	441e      	add	r6, r3
 80168e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80168e8:	4618      	mov	r0, r3
 80168ea:	f04f 0100 	mov.w	r1, #0
 80168ee:	4602      	mov	r2, r0
 80168f0:	460b      	mov	r3, r1
 80168f2:	1894      	adds	r4, r2, r2
 80168f4:	63bc      	str	r4, [r7, #56]	; 0x38
 80168f6:	415b      	adcs	r3, r3
 80168f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80168fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80168fe:	1812      	adds	r2, r2, r0
 8016900:	eb41 0303 	adc.w	r3, r1, r3
 8016904:	f04f 0400 	mov.w	r4, #0
 8016908:	f04f 0500 	mov.w	r5, #0
 801690c:	00dd      	lsls	r5, r3, #3
 801690e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016912:	00d4      	lsls	r4, r2, #3
 8016914:	4622      	mov	r2, r4
 8016916:	462b      	mov	r3, r5
 8016918:	1814      	adds	r4, r2, r0
 801691a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801691e:	414b      	adcs	r3, r1
 8016920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	461a      	mov	r2, r3
 801692c:	f04f 0300 	mov.w	r3, #0
 8016930:	1891      	adds	r1, r2, r2
 8016932:	6339      	str	r1, [r7, #48]	; 0x30
 8016934:	415b      	adcs	r3, r3
 8016936:	637b      	str	r3, [r7, #52]	; 0x34
 8016938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801693c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016940:	f7ea f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8016944:	4602      	mov	r2, r0
 8016946:	460b      	mov	r3, r1
 8016948:	4b0c      	ldr	r3, [pc, #48]	; (801697c <UART_SetConfig+0x3dc>)
 801694a:	fba3 1302 	umull	r1, r3, r3, r2
 801694e:	095b      	lsrs	r3, r3, #5
 8016950:	2164      	movs	r1, #100	; 0x64
 8016952:	fb01 f303 	mul.w	r3, r1, r3
 8016956:	1ad3      	subs	r3, r2, r3
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	3332      	adds	r3, #50	; 0x32
 801695c:	4a07      	ldr	r2, [pc, #28]	; (801697c <UART_SetConfig+0x3dc>)
 801695e:	fba2 2303 	umull	r2, r3, r2, r3
 8016962:	095b      	lsrs	r3, r3, #5
 8016964:	f003 0207 	and.w	r2, r3, #7
 8016968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	4432      	add	r2, r6
 8016970:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8016972:	e1a6      	b.n	8016cc2 <UART_SetConfig+0x722>
 8016974:	40011000 	.word	0x40011000
 8016978:	40011400 	.word	0x40011400
 801697c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	4bd1      	ldr	r3, [pc, #836]	; (8016ccc <UART_SetConfig+0x72c>)
 8016988:	429a      	cmp	r2, r3
 801698a:	d006      	beq.n	801699a <UART_SetConfig+0x3fa>
 801698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016990:	681a      	ldr	r2, [r3, #0]
 8016992:	4bcf      	ldr	r3, [pc, #828]	; (8016cd0 <UART_SetConfig+0x730>)
 8016994:	429a      	cmp	r2, r3
 8016996:	f040 80ca 	bne.w	8016b2e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801699a:	f7fe f8e1 	bl	8014b60 <HAL_RCC_GetPCLK2Freq>
 801699e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80169a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80169a6:	461c      	mov	r4, r3
 80169a8:	f04f 0500 	mov.w	r5, #0
 80169ac:	4622      	mov	r2, r4
 80169ae:	462b      	mov	r3, r5
 80169b0:	1891      	adds	r1, r2, r2
 80169b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80169b4:	415b      	adcs	r3, r3
 80169b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80169bc:	1912      	adds	r2, r2, r4
 80169be:	eb45 0303 	adc.w	r3, r5, r3
 80169c2:	f04f 0000 	mov.w	r0, #0
 80169c6:	f04f 0100 	mov.w	r1, #0
 80169ca:	00d9      	lsls	r1, r3, #3
 80169cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80169d0:	00d0      	lsls	r0, r2, #3
 80169d2:	4602      	mov	r2, r0
 80169d4:	460b      	mov	r3, r1
 80169d6:	eb12 0a04 	adds.w	sl, r2, r4
 80169da:	eb43 0b05 	adc.w	fp, r3, r5
 80169de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169e2:	685b      	ldr	r3, [r3, #4]
 80169e4:	4618      	mov	r0, r3
 80169e6:	f04f 0100 	mov.w	r1, #0
 80169ea:	f04f 0200 	mov.w	r2, #0
 80169ee:	f04f 0300 	mov.w	r3, #0
 80169f2:	008b      	lsls	r3, r1, #2
 80169f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80169f8:	0082      	lsls	r2, r0, #2
 80169fa:	4650      	mov	r0, sl
 80169fc:	4659      	mov	r1, fp
 80169fe:	f7ea f943 	bl	8000c88 <__aeabi_uldivmod>
 8016a02:	4602      	mov	r2, r0
 8016a04:	460b      	mov	r3, r1
 8016a06:	4bb3      	ldr	r3, [pc, #716]	; (8016cd4 <UART_SetConfig+0x734>)
 8016a08:	fba3 2302 	umull	r2, r3, r3, r2
 8016a0c:	095b      	lsrs	r3, r3, #5
 8016a0e:	011e      	lsls	r6, r3, #4
 8016a10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a14:	4618      	mov	r0, r3
 8016a16:	f04f 0100 	mov.w	r1, #0
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	460b      	mov	r3, r1
 8016a1e:	1894      	adds	r4, r2, r2
 8016a20:	623c      	str	r4, [r7, #32]
 8016a22:	415b      	adcs	r3, r3
 8016a24:	627b      	str	r3, [r7, #36]	; 0x24
 8016a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016a2a:	1812      	adds	r2, r2, r0
 8016a2c:	eb41 0303 	adc.w	r3, r1, r3
 8016a30:	f04f 0400 	mov.w	r4, #0
 8016a34:	f04f 0500 	mov.w	r5, #0
 8016a38:	00dd      	lsls	r5, r3, #3
 8016a3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016a3e:	00d4      	lsls	r4, r2, #3
 8016a40:	4622      	mov	r2, r4
 8016a42:	462b      	mov	r3, r5
 8016a44:	1814      	adds	r4, r2, r0
 8016a46:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8016a4a:	414b      	adcs	r3, r1
 8016a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f04f 0100 	mov.w	r1, #0
 8016a5c:	f04f 0200 	mov.w	r2, #0
 8016a60:	f04f 0300 	mov.w	r3, #0
 8016a64:	008b      	lsls	r3, r1, #2
 8016a66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016a6a:	0082      	lsls	r2, r0, #2
 8016a6c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8016a70:	f7ea f90a 	bl	8000c88 <__aeabi_uldivmod>
 8016a74:	4602      	mov	r2, r0
 8016a76:	460b      	mov	r3, r1
 8016a78:	4b96      	ldr	r3, [pc, #600]	; (8016cd4 <UART_SetConfig+0x734>)
 8016a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8016a7e:	095b      	lsrs	r3, r3, #5
 8016a80:	2164      	movs	r1, #100	; 0x64
 8016a82:	fb01 f303 	mul.w	r3, r1, r3
 8016a86:	1ad3      	subs	r3, r2, r3
 8016a88:	011b      	lsls	r3, r3, #4
 8016a8a:	3332      	adds	r3, #50	; 0x32
 8016a8c:	4a91      	ldr	r2, [pc, #580]	; (8016cd4 <UART_SetConfig+0x734>)
 8016a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8016a92:	095b      	lsrs	r3, r3, #5
 8016a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a98:	441e      	add	r6, r3
 8016a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f04f 0100 	mov.w	r1, #0
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	460b      	mov	r3, r1
 8016aa8:	1894      	adds	r4, r2, r2
 8016aaa:	61bc      	str	r4, [r7, #24]
 8016aac:	415b      	adcs	r3, r3
 8016aae:	61fb      	str	r3, [r7, #28]
 8016ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016ab4:	1812      	adds	r2, r2, r0
 8016ab6:	eb41 0303 	adc.w	r3, r1, r3
 8016aba:	f04f 0400 	mov.w	r4, #0
 8016abe:	f04f 0500 	mov.w	r5, #0
 8016ac2:	00dd      	lsls	r5, r3, #3
 8016ac4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016ac8:	00d4      	lsls	r4, r2, #3
 8016aca:	4622      	mov	r2, r4
 8016acc:	462b      	mov	r3, r5
 8016ace:	1814      	adds	r4, r2, r0
 8016ad0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8016ad4:	414b      	adcs	r3, r1
 8016ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f04f 0100 	mov.w	r1, #0
 8016ae6:	f04f 0200 	mov.w	r2, #0
 8016aea:	f04f 0300 	mov.w	r3, #0
 8016aee:	008b      	lsls	r3, r1, #2
 8016af0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016af4:	0082      	lsls	r2, r0, #2
 8016af6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8016afa:	f7ea f8c5 	bl	8000c88 <__aeabi_uldivmod>
 8016afe:	4602      	mov	r2, r0
 8016b00:	460b      	mov	r3, r1
 8016b02:	4b74      	ldr	r3, [pc, #464]	; (8016cd4 <UART_SetConfig+0x734>)
 8016b04:	fba3 1302 	umull	r1, r3, r3, r2
 8016b08:	095b      	lsrs	r3, r3, #5
 8016b0a:	2164      	movs	r1, #100	; 0x64
 8016b0c:	fb01 f303 	mul.w	r3, r1, r3
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	011b      	lsls	r3, r3, #4
 8016b14:	3332      	adds	r3, #50	; 0x32
 8016b16:	4a6f      	ldr	r2, [pc, #444]	; (8016cd4 <UART_SetConfig+0x734>)
 8016b18:	fba2 2303 	umull	r2, r3, r2, r3
 8016b1c:	095b      	lsrs	r3, r3, #5
 8016b1e:	f003 020f 	and.w	r2, r3, #15
 8016b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4432      	add	r2, r6
 8016b2a:	609a      	str	r2, [r3, #8]
 8016b2c:	e0c9      	b.n	8016cc2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8016b2e:	f7fe f803 	bl	8014b38 <HAL_RCC_GetPCLK1Freq>
 8016b32:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016b36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016b3a:	461c      	mov	r4, r3
 8016b3c:	f04f 0500 	mov.w	r5, #0
 8016b40:	4622      	mov	r2, r4
 8016b42:	462b      	mov	r3, r5
 8016b44:	1891      	adds	r1, r2, r2
 8016b46:	6139      	str	r1, [r7, #16]
 8016b48:	415b      	adcs	r3, r3
 8016b4a:	617b      	str	r3, [r7, #20]
 8016b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016b50:	1912      	adds	r2, r2, r4
 8016b52:	eb45 0303 	adc.w	r3, r5, r3
 8016b56:	f04f 0000 	mov.w	r0, #0
 8016b5a:	f04f 0100 	mov.w	r1, #0
 8016b5e:	00d9      	lsls	r1, r3, #3
 8016b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016b64:	00d0      	lsls	r0, r2, #3
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	eb12 0804 	adds.w	r8, r2, r4
 8016b6e:	eb43 0905 	adc.w	r9, r3, r5
 8016b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f04f 0100 	mov.w	r1, #0
 8016b7e:	f04f 0200 	mov.w	r2, #0
 8016b82:	f04f 0300 	mov.w	r3, #0
 8016b86:	008b      	lsls	r3, r1, #2
 8016b88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016b8c:	0082      	lsls	r2, r0, #2
 8016b8e:	4640      	mov	r0, r8
 8016b90:	4649      	mov	r1, r9
 8016b92:	f7ea f879 	bl	8000c88 <__aeabi_uldivmod>
 8016b96:	4602      	mov	r2, r0
 8016b98:	460b      	mov	r3, r1
 8016b9a:	4b4e      	ldr	r3, [pc, #312]	; (8016cd4 <UART_SetConfig+0x734>)
 8016b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8016ba0:	095b      	lsrs	r3, r3, #5
 8016ba2:	011e      	lsls	r6, r3, #4
 8016ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f04f 0100 	mov.w	r1, #0
 8016bae:	4602      	mov	r2, r0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	1894      	adds	r4, r2, r2
 8016bb4:	60bc      	str	r4, [r7, #8]
 8016bb6:	415b      	adcs	r3, r3
 8016bb8:	60fb      	str	r3, [r7, #12]
 8016bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016bbe:	1812      	adds	r2, r2, r0
 8016bc0:	eb41 0303 	adc.w	r3, r1, r3
 8016bc4:	f04f 0400 	mov.w	r4, #0
 8016bc8:	f04f 0500 	mov.w	r5, #0
 8016bcc:	00dd      	lsls	r5, r3, #3
 8016bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016bd2:	00d4      	lsls	r4, r2, #3
 8016bd4:	4622      	mov	r2, r4
 8016bd6:	462b      	mov	r3, r5
 8016bd8:	1814      	adds	r4, r2, r0
 8016bda:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8016bde:	414b      	adcs	r3, r1
 8016be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f04f 0100 	mov.w	r1, #0
 8016bf0:	f04f 0200 	mov.w	r2, #0
 8016bf4:	f04f 0300 	mov.w	r3, #0
 8016bf8:	008b      	lsls	r3, r1, #2
 8016bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016bfe:	0082      	lsls	r2, r0, #2
 8016c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016c04:	f7ea f840 	bl	8000c88 <__aeabi_uldivmod>
 8016c08:	4602      	mov	r2, r0
 8016c0a:	460b      	mov	r3, r1
 8016c0c:	4b31      	ldr	r3, [pc, #196]	; (8016cd4 <UART_SetConfig+0x734>)
 8016c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8016c12:	095b      	lsrs	r3, r3, #5
 8016c14:	2164      	movs	r1, #100	; 0x64
 8016c16:	fb01 f303 	mul.w	r3, r1, r3
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	011b      	lsls	r3, r3, #4
 8016c1e:	3332      	adds	r3, #50	; 0x32
 8016c20:	4a2c      	ldr	r2, [pc, #176]	; (8016cd4 <UART_SetConfig+0x734>)
 8016c22:	fba2 2303 	umull	r2, r3, r2, r3
 8016c26:	095b      	lsrs	r3, r3, #5
 8016c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c2c:	441e      	add	r6, r3
 8016c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016c32:	4618      	mov	r0, r3
 8016c34:	f04f 0100 	mov.w	r1, #0
 8016c38:	4602      	mov	r2, r0
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	1894      	adds	r4, r2, r2
 8016c3e:	603c      	str	r4, [r7, #0]
 8016c40:	415b      	adcs	r3, r3
 8016c42:	607b      	str	r3, [r7, #4]
 8016c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c48:	1812      	adds	r2, r2, r0
 8016c4a:	eb41 0303 	adc.w	r3, r1, r3
 8016c4e:	f04f 0400 	mov.w	r4, #0
 8016c52:	f04f 0500 	mov.w	r5, #0
 8016c56:	00dd      	lsls	r5, r3, #3
 8016c58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016c5c:	00d4      	lsls	r4, r2, #3
 8016c5e:	4622      	mov	r2, r4
 8016c60:	462b      	mov	r3, r5
 8016c62:	1814      	adds	r4, r2, r0
 8016c64:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8016c68:	414b      	adcs	r3, r1
 8016c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c72:	685b      	ldr	r3, [r3, #4]
 8016c74:	4618      	mov	r0, r3
 8016c76:	f04f 0100 	mov.w	r1, #0
 8016c7a:	f04f 0200 	mov.w	r2, #0
 8016c7e:	f04f 0300 	mov.w	r3, #0
 8016c82:	008b      	lsls	r3, r1, #2
 8016c84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016c88:	0082      	lsls	r2, r0, #2
 8016c8a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8016c8e:	f7e9 fffb 	bl	8000c88 <__aeabi_uldivmod>
 8016c92:	4602      	mov	r2, r0
 8016c94:	460b      	mov	r3, r1
 8016c96:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <UART_SetConfig+0x734>)
 8016c98:	fba3 1302 	umull	r1, r3, r3, r2
 8016c9c:	095b      	lsrs	r3, r3, #5
 8016c9e:	2164      	movs	r1, #100	; 0x64
 8016ca0:	fb01 f303 	mul.w	r3, r1, r3
 8016ca4:	1ad3      	subs	r3, r2, r3
 8016ca6:	011b      	lsls	r3, r3, #4
 8016ca8:	3332      	adds	r3, #50	; 0x32
 8016caa:	4a0a      	ldr	r2, [pc, #40]	; (8016cd4 <UART_SetConfig+0x734>)
 8016cac:	fba2 2303 	umull	r2, r3, r2, r3
 8016cb0:	095b      	lsrs	r3, r3, #5
 8016cb2:	f003 020f 	and.w	r2, r3, #15
 8016cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	4432      	add	r2, r6
 8016cbe:	609a      	str	r2, [r3, #8]
}
 8016cc0:	e7ff      	b.n	8016cc2 <UART_SetConfig+0x722>
 8016cc2:	bf00      	nop
 8016cc4:	37f4      	adds	r7, #244	; 0xf4
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ccc:	40011000 	.word	0x40011000
 8016cd0:	40011400 	.word	0x40011400
 8016cd4:	51eb851f 	.word	0x51eb851f

08016cd8 <__NVIC_SetPriority>:
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	4603      	mov	r3, r0
 8016ce0:	6039      	str	r1, [r7, #0]
 8016ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	db0a      	blt.n	8016d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	b2da      	uxtb	r2, r3
 8016cf0:	490c      	ldr	r1, [pc, #48]	; (8016d24 <__NVIC_SetPriority+0x4c>)
 8016cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cf6:	0112      	lsls	r2, r2, #4
 8016cf8:	b2d2      	uxtb	r2, r2
 8016cfa:	440b      	add	r3, r1
 8016cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016d00:	e00a      	b.n	8016d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	b2da      	uxtb	r2, r3
 8016d06:	4908      	ldr	r1, [pc, #32]	; (8016d28 <__NVIC_SetPriority+0x50>)
 8016d08:	79fb      	ldrb	r3, [r7, #7]
 8016d0a:	f003 030f 	and.w	r3, r3, #15
 8016d0e:	3b04      	subs	r3, #4
 8016d10:	0112      	lsls	r2, r2, #4
 8016d12:	b2d2      	uxtb	r2, r2
 8016d14:	440b      	add	r3, r1
 8016d16:	761a      	strb	r2, [r3, #24]
}
 8016d18:	bf00      	nop
 8016d1a:	370c      	adds	r7, #12
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr
 8016d24:	e000e100 	.word	0xe000e100
 8016d28:	e000ed00 	.word	0xe000ed00

08016d2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016d30:	4b05      	ldr	r3, [pc, #20]	; (8016d48 <SysTick_Handler+0x1c>)
 8016d32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016d34:	f001 fe02 	bl	801893c <xTaskGetSchedulerState>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b01      	cmp	r3, #1
 8016d3c:	d001      	beq.n	8016d42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016d3e:	f002 fbeb 	bl	8019518 <xPortSysTickHandler>
  }
}
 8016d42:	bf00      	nop
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	e000e010 	.word	0xe000e010

08016d4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016d50:	2100      	movs	r1, #0
 8016d52:	f06f 0004 	mvn.w	r0, #4
 8016d56:	f7ff ffbf 	bl	8016cd8 <__NVIC_SetPriority>
#endif
}
 8016d5a:	bf00      	nop
 8016d5c:	bd80      	pop	{r7, pc}
	...

08016d60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016d60:	b480      	push	{r7}
 8016d62:	b083      	sub	sp, #12
 8016d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d66:	f3ef 8305 	mrs	r3, IPSR
 8016d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8016d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d003      	beq.n	8016d7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016d72:	f06f 0305 	mvn.w	r3, #5
 8016d76:	607b      	str	r3, [r7, #4]
 8016d78:	e00c      	b.n	8016d94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016d7a:	4b0a      	ldr	r3, [pc, #40]	; (8016da4 <osKernelInitialize+0x44>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016d82:	4b08      	ldr	r3, [pc, #32]	; (8016da4 <osKernelInitialize+0x44>)
 8016d84:	2201      	movs	r2, #1
 8016d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	607b      	str	r3, [r7, #4]
 8016d8c:	e002      	b.n	8016d94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016d94:	687b      	ldr	r3, [r7, #4]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	370c      	adds	r7, #12
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr
 8016da2:	bf00      	nop
 8016da4:	20001108 	.word	0x20001108

08016da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016dae:	f3ef 8305 	mrs	r3, IPSR
 8016db2:	603b      	str	r3, [r7, #0]
  return(result);
 8016db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d003      	beq.n	8016dc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016dba:	f06f 0305 	mvn.w	r3, #5
 8016dbe:	607b      	str	r3, [r7, #4]
 8016dc0:	e010      	b.n	8016de4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016dc2:	4b0b      	ldr	r3, [pc, #44]	; (8016df0 <osKernelStart+0x48>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2b01      	cmp	r3, #1
 8016dc8:	d109      	bne.n	8016dde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016dca:	f7ff ffbf 	bl	8016d4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016dce:	4b08      	ldr	r3, [pc, #32]	; (8016df0 <osKernelStart+0x48>)
 8016dd0:	2202      	movs	r2, #2
 8016dd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016dd4:	f001 f96a 	bl	80180ac <vTaskStartScheduler>
      stat = osOK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	607b      	str	r3, [r7, #4]
 8016ddc:	e002      	b.n	8016de4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016de4:	687b      	ldr	r3, [r7, #4]
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3708      	adds	r7, #8
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	20001108 	.word	0x20001108

08016df4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b08e      	sub	sp, #56	; 0x38
 8016df8:	af04      	add	r7, sp, #16
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016e00:	2300      	movs	r3, #0
 8016e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e04:	f3ef 8305 	mrs	r3, IPSR
 8016e08:	617b      	str	r3, [r7, #20]
  return(result);
 8016e0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d17e      	bne.n	8016f0e <osThreadNew+0x11a>
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d07b      	beq.n	8016f0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016e16:	2380      	movs	r3, #128	; 0x80
 8016e18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016e1a:	2318      	movs	r3, #24
 8016e1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d045      	beq.n	8016eba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d002      	beq.n	8016e3c <osThreadNew+0x48>
        name = attr->name;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	699b      	ldr	r3, [r3, #24]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d002      	beq.n	8016e4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	699b      	ldr	r3, [r3, #24]
 8016e48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016e4a:	69fb      	ldr	r3, [r7, #28]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d008      	beq.n	8016e62 <osThreadNew+0x6e>
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	2b38      	cmp	r3, #56	; 0x38
 8016e54:	d805      	bhi.n	8016e62 <osThreadNew+0x6e>
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	f003 0301 	and.w	r3, r3, #1
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d001      	beq.n	8016e66 <osThreadNew+0x72>
        return (NULL);
 8016e62:	2300      	movs	r3, #0
 8016e64:	e054      	b.n	8016f10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	695b      	ldr	r3, [r3, #20]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d003      	beq.n	8016e76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	695b      	ldr	r3, [r3, #20]
 8016e72:	089b      	lsrs	r3, r3, #2
 8016e74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	689b      	ldr	r3, [r3, #8]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00e      	beq.n	8016e9c <osThreadNew+0xa8>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	68db      	ldr	r3, [r3, #12]
 8016e82:	2b5b      	cmp	r3, #91	; 0x5b
 8016e84:	d90a      	bls.n	8016e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d006      	beq.n	8016e9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	695b      	ldr	r3, [r3, #20]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d002      	beq.n	8016e9c <osThreadNew+0xa8>
        mem = 1;
 8016e96:	2301      	movs	r3, #1
 8016e98:	61bb      	str	r3, [r7, #24]
 8016e9a:	e010      	b.n	8016ebe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	689b      	ldr	r3, [r3, #8]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d10c      	bne.n	8016ebe <osThreadNew+0xca>
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d108      	bne.n	8016ebe <osThreadNew+0xca>
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	691b      	ldr	r3, [r3, #16]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d104      	bne.n	8016ebe <osThreadNew+0xca>
          mem = 0;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	61bb      	str	r3, [r7, #24]
 8016eb8:	e001      	b.n	8016ebe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016ebe:	69bb      	ldr	r3, [r7, #24]
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	d110      	bne.n	8016ee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016ecc:	9202      	str	r2, [sp, #8]
 8016ece:	9301      	str	r3, [sp, #4]
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	6a3a      	ldr	r2, [r7, #32]
 8016ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016eda:	68f8      	ldr	r0, [r7, #12]
 8016edc:	f000 fe38 	bl	8017b50 <xTaskCreateStatic>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	613b      	str	r3, [r7, #16]
 8016ee4:	e013      	b.n	8016f0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016ee6:	69bb      	ldr	r3, [r7, #24]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d110      	bne.n	8016f0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016eec:	6a3b      	ldr	r3, [r7, #32]
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	f107 0310 	add.w	r3, r7, #16
 8016ef4:	9301      	str	r3, [sp, #4]
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	9300      	str	r3, [sp, #0]
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016efe:	68f8      	ldr	r0, [r7, #12]
 8016f00:	f000 fe83 	bl	8017c0a <xTaskCreate>
 8016f04:	4603      	mov	r3, r0
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d001      	beq.n	8016f0e <osThreadNew+0x11a>
            hTask = NULL;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016f0e:	693b      	ldr	r3, [r7, #16]
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3728      	adds	r7, #40	; 0x28
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b086      	sub	sp, #24
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f24:	f3ef 8305 	mrs	r3, IPSR
 8016f28:	60bb      	str	r3, [r7, #8]
  return(result);
 8016f2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d003      	beq.n	8016f38 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8016f30:	f06f 0305 	mvn.w	r3, #5
 8016f34:	617b      	str	r3, [r7, #20]
 8016f36:	e017      	b.n	8016f68 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d103      	bne.n	8016f46 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8016f3e:	f06f 0303 	mvn.w	r3, #3
 8016f42:	617b      	str	r3, [r7, #20]
 8016f44:	e010      	b.n	8016f68 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8016f46:	6938      	ldr	r0, [r7, #16]
 8016f48:	f001 f84a 	bl	8017fe0 <eTaskGetState>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8016f50:	7bfb      	ldrb	r3, [r7, #15]
 8016f52:	2b04      	cmp	r3, #4
 8016f54:	d005      	beq.n	8016f62 <osThreadTerminate+0x4a>
      stat = osOK;
 8016f56:	2300      	movs	r3, #0
 8016f58:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8016f5a:	6938      	ldr	r0, [r7, #16]
 8016f5c:	f000 ff9a 	bl	8017e94 <vTaskDelete>
 8016f60:	e002      	b.n	8016f68 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8016f62:	f06f 0302 	mvn.w	r3, #2
 8016f66:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8016f68:	697b      	ldr	r3, [r7, #20]
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3718      	adds	r7, #24
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}

08016f72 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b084      	sub	sp, #16
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f7a:	f3ef 8305 	mrs	r3, IPSR
 8016f7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016f80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d003      	beq.n	8016f8e <osDelay+0x1c>
    stat = osErrorISR;
 8016f86:	f06f 0305 	mvn.w	r3, #5
 8016f8a:	60fb      	str	r3, [r7, #12]
 8016f8c:	e007      	b.n	8016f9e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d002      	beq.n	8016f9e <osDelay+0x2c>
      vTaskDelay(ticks);
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f000 ffed 	bl	8017f78 <vTaskDelay>
    }
  }

  return (stat);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016fa8:	b480      	push	{r7}
 8016faa:	b085      	sub	sp, #20
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	4a07      	ldr	r2, [pc, #28]	; (8016fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8016fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	4a06      	ldr	r2, [pc, #24]	; (8016fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8016fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2280      	movs	r2, #128	; 0x80
 8016fc4:	601a      	str	r2, [r3, #0]
}
 8016fc6:	bf00      	nop
 8016fc8:	3714      	adds	r7, #20
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd0:	4770      	bx	lr
 8016fd2:	bf00      	nop
 8016fd4:	2000110c 	.word	0x2000110c
 8016fd8:	20001168 	.word	0x20001168

08016fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016fdc:	b480      	push	{r7}
 8016fde:	b085      	sub	sp, #20
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	4a07      	ldr	r2, [pc, #28]	; (8017008 <vApplicationGetTimerTaskMemory+0x2c>)
 8016fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016fee:	68bb      	ldr	r3, [r7, #8]
 8016ff0:	4a06      	ldr	r2, [pc, #24]	; (801700c <vApplicationGetTimerTaskMemory+0x30>)
 8016ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ffa:	601a      	str	r2, [r3, #0]
}
 8016ffc:	bf00      	nop
 8016ffe:	3714      	adds	r7, #20
 8017000:	46bd      	mov	sp, r7
 8017002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017006:	4770      	bx	lr
 8017008:	20001368 	.word	0x20001368
 801700c:	200013c4 	.word	0x200013c4

08017010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f103 0208 	add.w	r2, r3, #8
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	f103 0208 	add.w	r2, r3, #8
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	f103 0208 	add.w	r2, r3, #8
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2200      	movs	r2, #0
 8017042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017044:	bf00      	nop
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2200      	movs	r2, #0
 801705c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801705e:	bf00      	nop
 8017060:	370c      	adds	r7, #12
 8017062:	46bd      	mov	sp, r7
 8017064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017068:	4770      	bx	lr

0801706a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801706a:	b480      	push	{r7}
 801706c:	b085      	sub	sp, #20
 801706e:	af00      	add	r7, sp, #0
 8017070:	6078      	str	r0, [r7, #4]
 8017072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	68fa      	ldr	r2, [r7, #12]
 801707e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	689a      	ldr	r2, [r3, #8]
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	689b      	ldr	r3, [r3, #8]
 801708c:	683a      	ldr	r2, [r7, #0]
 801708e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	683a      	ldr	r2, [r7, #0]
 8017094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	1c5a      	adds	r2, r3, #1
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	601a      	str	r2, [r3, #0]
}
 80170a6:	bf00      	nop
 80170a8:	3714      	adds	r7, #20
 80170aa:	46bd      	mov	sp, r7
 80170ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b0:	4770      	bx	lr

080170b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80170b2:	b480      	push	{r7}
 80170b4:	b085      	sub	sp, #20
 80170b6:	af00      	add	r7, sp, #0
 80170b8:	6078      	str	r0, [r7, #4]
 80170ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170c8:	d103      	bne.n	80170d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	691b      	ldr	r3, [r3, #16]
 80170ce:	60fb      	str	r3, [r7, #12]
 80170d0:	e00c      	b.n	80170ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	3308      	adds	r3, #8
 80170d6:	60fb      	str	r3, [r7, #12]
 80170d8:	e002      	b.n	80170e0 <vListInsert+0x2e>
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	685b      	ldr	r3, [r3, #4]
 80170de:	60fb      	str	r3, [r7, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	68ba      	ldr	r2, [r7, #8]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d2f6      	bcs.n	80170da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	685a      	ldr	r2, [r3, #4]
 80170f0:	683b      	ldr	r3, [r7, #0]
 80170f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	685b      	ldr	r3, [r3, #4]
 80170f8:	683a      	ldr	r2, [r7, #0]
 80170fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	68fa      	ldr	r2, [r7, #12]
 8017100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	683a      	ldr	r2, [r7, #0]
 8017106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	687a      	ldr	r2, [r7, #4]
 801710c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	1c5a      	adds	r2, r3, #1
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	601a      	str	r2, [r3, #0]
}
 8017118:	bf00      	nop
 801711a:	3714      	adds	r7, #20
 801711c:	46bd      	mov	sp, r7
 801711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017122:	4770      	bx	lr

08017124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017124:	b480      	push	{r7}
 8017126:	b085      	sub	sp, #20
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	691b      	ldr	r3, [r3, #16]
 8017130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	687a      	ldr	r2, [r7, #4]
 8017138:	6892      	ldr	r2, [r2, #8]
 801713a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	689b      	ldr	r3, [r3, #8]
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	6852      	ldr	r2, [r2, #4]
 8017144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	429a      	cmp	r2, r3
 801714e:	d103      	bne.n	8017158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	689a      	ldr	r2, [r3, #8]
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2200      	movs	r2, #0
 801715c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	1e5a      	subs	r2, r3, #1
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	681b      	ldr	r3, [r3, #0]
}
 801716c:	4618      	mov	r0, r3
 801716e:	3714      	adds	r7, #20
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr

08017178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d10a      	bne.n	80171a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017190:	f383 8811 	msr	BASEPRI, r3
 8017194:	f3bf 8f6f 	isb	sy
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801719e:	bf00      	nop
 80171a0:	e7fe      	b.n	80171a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80171a2:	f002 f927 	bl	80193f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171ae:	68f9      	ldr	r1, [r7, #12]
 80171b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80171b2:	fb01 f303 	mul.w	r3, r1, r3
 80171b6:	441a      	add	r2, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	2200      	movs	r2, #0
 80171c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	681a      	ldr	r2, [r3, #0]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171d2:	3b01      	subs	r3, #1
 80171d4:	68f9      	ldr	r1, [r7, #12]
 80171d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80171d8:	fb01 f303 	mul.w	r3, r1, r3
 80171dc:	441a      	add	r2, r3
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	22ff      	movs	r2, #255	; 0xff
 80171e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	22ff      	movs	r2, #255	; 0xff
 80171ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d114      	bne.n	8017222 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	691b      	ldr	r3, [r3, #16]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d01a      	beq.n	8017236 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	3310      	adds	r3, #16
 8017204:	4618      	mov	r0, r3
 8017206:	f001 f9db 	bl	80185c0 <xTaskRemoveFromEventList>
 801720a:	4603      	mov	r3, r0
 801720c:	2b00      	cmp	r3, #0
 801720e:	d012      	beq.n	8017236 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017210:	4b0c      	ldr	r3, [pc, #48]	; (8017244 <xQueueGenericReset+0xcc>)
 8017212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017216:	601a      	str	r2, [r3, #0]
 8017218:	f3bf 8f4f 	dsb	sy
 801721c:	f3bf 8f6f 	isb	sy
 8017220:	e009      	b.n	8017236 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	3310      	adds	r3, #16
 8017226:	4618      	mov	r0, r3
 8017228:	f7ff fef2 	bl	8017010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	3324      	adds	r3, #36	; 0x24
 8017230:	4618      	mov	r0, r3
 8017232:	f7ff feed 	bl	8017010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017236:	f002 f90d 	bl	8019454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801723a:	2301      	movs	r3, #1
}
 801723c:	4618      	mov	r0, r3
 801723e:	3710      	adds	r7, #16
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	e000ed04 	.word	0xe000ed04

08017248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017248:	b580      	push	{r7, lr}
 801724a:	b08e      	sub	sp, #56	; 0x38
 801724c:	af02      	add	r7, sp, #8
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
 8017254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10a      	bne.n	8017272 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017260:	f383 8811 	msr	BASEPRI, r3
 8017264:	f3bf 8f6f 	isb	sy
 8017268:	f3bf 8f4f 	dsb	sy
 801726c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801726e:	bf00      	nop
 8017270:	e7fe      	b.n	8017270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d10a      	bne.n	801728e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801727c:	f383 8811 	msr	BASEPRI, r3
 8017280:	f3bf 8f6f 	isb	sy
 8017284:	f3bf 8f4f 	dsb	sy
 8017288:	627b      	str	r3, [r7, #36]	; 0x24
}
 801728a:	bf00      	nop
 801728c:	e7fe      	b.n	801728c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d002      	beq.n	801729a <xQueueGenericCreateStatic+0x52>
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d001      	beq.n	801729e <xQueueGenericCreateStatic+0x56>
 801729a:	2301      	movs	r3, #1
 801729c:	e000      	b.n	80172a0 <xQueueGenericCreateStatic+0x58>
 801729e:	2300      	movs	r3, #0
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d10a      	bne.n	80172ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80172a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a8:	f383 8811 	msr	BASEPRI, r3
 80172ac:	f3bf 8f6f 	isb	sy
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	623b      	str	r3, [r7, #32]
}
 80172b6:	bf00      	nop
 80172b8:	e7fe      	b.n	80172b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d102      	bne.n	80172c6 <xQueueGenericCreateStatic+0x7e>
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d101      	bne.n	80172ca <xQueueGenericCreateStatic+0x82>
 80172c6:	2301      	movs	r3, #1
 80172c8:	e000      	b.n	80172cc <xQueueGenericCreateStatic+0x84>
 80172ca:	2300      	movs	r3, #0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d10a      	bne.n	80172e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80172d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d4:	f383 8811 	msr	BASEPRI, r3
 80172d8:	f3bf 8f6f 	isb	sy
 80172dc:	f3bf 8f4f 	dsb	sy
 80172e0:	61fb      	str	r3, [r7, #28]
}
 80172e2:	bf00      	nop
 80172e4:	e7fe      	b.n	80172e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80172e6:	2350      	movs	r3, #80	; 0x50
 80172e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	2b50      	cmp	r3, #80	; 0x50
 80172ee:	d00a      	beq.n	8017306 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80172f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f4:	f383 8811 	msr	BASEPRI, r3
 80172f8:	f3bf 8f6f 	isb	sy
 80172fc:	f3bf 8f4f 	dsb	sy
 8017300:	61bb      	str	r3, [r7, #24]
}
 8017302:	bf00      	nop
 8017304:	e7fe      	b.n	8017304 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017306:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801730e:	2b00      	cmp	r3, #0
 8017310:	d00d      	beq.n	801732e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017314:	2201      	movs	r2, #1
 8017316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801731a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017320:	9300      	str	r3, [sp, #0]
 8017322:	4613      	mov	r3, r2
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	68b9      	ldr	r1, [r7, #8]
 8017328:	68f8      	ldr	r0, [r7, #12]
 801732a:	f000 f805 	bl	8017338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017330:	4618      	mov	r0, r3
 8017332:	3730      	adds	r7, #48	; 0x30
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}

08017338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	af00      	add	r7, sp, #0
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	607a      	str	r2, [r7, #4]
 8017344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d103      	bne.n	8017354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801734c:	69bb      	ldr	r3, [r7, #24]
 801734e:	69ba      	ldr	r2, [r7, #24]
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	e002      	b.n	801735a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017354:	69bb      	ldr	r3, [r7, #24]
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801735a:	69bb      	ldr	r3, [r7, #24]
 801735c:	68fa      	ldr	r2, [r7, #12]
 801735e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017360:	69bb      	ldr	r3, [r7, #24]
 8017362:	68ba      	ldr	r2, [r7, #8]
 8017364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017366:	2101      	movs	r1, #1
 8017368:	69b8      	ldr	r0, [r7, #24]
 801736a:	f7ff ff05 	bl	8017178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801736e:	69bb      	ldr	r3, [r7, #24]
 8017370:	78fa      	ldrb	r2, [r7, #3]
 8017372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017376:	bf00      	nop
 8017378:	3710      	adds	r7, #16
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
	...

08017380 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b08e      	sub	sp, #56	; 0x38
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
 801738c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801738e:	2300      	movs	r3, #0
 8017390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017398:	2b00      	cmp	r3, #0
 801739a:	d10a      	bne.n	80173b2 <xQueueGenericSend+0x32>
	__asm volatile
 801739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a0:	f383 8811 	msr	BASEPRI, r3
 80173a4:	f3bf 8f6f 	isb	sy
 80173a8:	f3bf 8f4f 	dsb	sy
 80173ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80173ae:	bf00      	nop
 80173b0:	e7fe      	b.n	80173b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d103      	bne.n	80173c0 <xQueueGenericSend+0x40>
 80173b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d101      	bne.n	80173c4 <xQueueGenericSend+0x44>
 80173c0:	2301      	movs	r3, #1
 80173c2:	e000      	b.n	80173c6 <xQueueGenericSend+0x46>
 80173c4:	2300      	movs	r3, #0
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d10a      	bne.n	80173e0 <xQueueGenericSend+0x60>
	__asm volatile
 80173ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173ce:	f383 8811 	msr	BASEPRI, r3
 80173d2:	f3bf 8f6f 	isb	sy
 80173d6:	f3bf 8f4f 	dsb	sy
 80173da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80173dc:	bf00      	nop
 80173de:	e7fe      	b.n	80173de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	2b02      	cmp	r3, #2
 80173e4:	d103      	bne.n	80173ee <xQueueGenericSend+0x6e>
 80173e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173ea:	2b01      	cmp	r3, #1
 80173ec:	d101      	bne.n	80173f2 <xQueueGenericSend+0x72>
 80173ee:	2301      	movs	r3, #1
 80173f0:	e000      	b.n	80173f4 <xQueueGenericSend+0x74>
 80173f2:	2300      	movs	r3, #0
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d10a      	bne.n	801740e <xQueueGenericSend+0x8e>
	__asm volatile
 80173f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173fc:	f383 8811 	msr	BASEPRI, r3
 8017400:	f3bf 8f6f 	isb	sy
 8017404:	f3bf 8f4f 	dsb	sy
 8017408:	623b      	str	r3, [r7, #32]
}
 801740a:	bf00      	nop
 801740c:	e7fe      	b.n	801740c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801740e:	f001 fa95 	bl	801893c <xTaskGetSchedulerState>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	d102      	bne.n	801741e <xQueueGenericSend+0x9e>
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d101      	bne.n	8017422 <xQueueGenericSend+0xa2>
 801741e:	2301      	movs	r3, #1
 8017420:	e000      	b.n	8017424 <xQueueGenericSend+0xa4>
 8017422:	2300      	movs	r3, #0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d10a      	bne.n	801743e <xQueueGenericSend+0xbe>
	__asm volatile
 8017428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801742c:	f383 8811 	msr	BASEPRI, r3
 8017430:	f3bf 8f6f 	isb	sy
 8017434:	f3bf 8f4f 	dsb	sy
 8017438:	61fb      	str	r3, [r7, #28]
}
 801743a:	bf00      	nop
 801743c:	e7fe      	b.n	801743c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801743e:	f001 ffd9 	bl	80193f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801744a:	429a      	cmp	r2, r3
 801744c:	d302      	bcc.n	8017454 <xQueueGenericSend+0xd4>
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	2b02      	cmp	r3, #2
 8017452:	d129      	bne.n	80174a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017454:	683a      	ldr	r2, [r7, #0]
 8017456:	68b9      	ldr	r1, [r7, #8]
 8017458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801745a:	f000 fa0b 	bl	8017874 <prvCopyDataToQueue>
 801745e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017464:	2b00      	cmp	r3, #0
 8017466:	d010      	beq.n	801748a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801746a:	3324      	adds	r3, #36	; 0x24
 801746c:	4618      	mov	r0, r3
 801746e:	f001 f8a7 	bl	80185c0 <xTaskRemoveFromEventList>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d013      	beq.n	80174a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017478:	4b3f      	ldr	r3, [pc, #252]	; (8017578 <xQueueGenericSend+0x1f8>)
 801747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801747e:	601a      	str	r2, [r3, #0]
 8017480:	f3bf 8f4f 	dsb	sy
 8017484:	f3bf 8f6f 	isb	sy
 8017488:	e00a      	b.n	80174a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748c:	2b00      	cmp	r3, #0
 801748e:	d007      	beq.n	80174a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017490:	4b39      	ldr	r3, [pc, #228]	; (8017578 <xQueueGenericSend+0x1f8>)
 8017492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017496:	601a      	str	r2, [r3, #0]
 8017498:	f3bf 8f4f 	dsb	sy
 801749c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80174a0:	f001 ffd8 	bl	8019454 <vPortExitCritical>
				return pdPASS;
 80174a4:	2301      	movs	r3, #1
 80174a6:	e063      	b.n	8017570 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d103      	bne.n	80174b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80174ae:	f001 ffd1 	bl	8019454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80174b2:	2300      	movs	r3, #0
 80174b4:	e05c      	b.n	8017570 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80174b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d106      	bne.n	80174ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80174bc:	f107 0314 	add.w	r3, r7, #20
 80174c0:	4618      	mov	r0, r3
 80174c2:	f001 f8e1 	bl	8018688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80174c6:	2301      	movs	r3, #1
 80174c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80174ca:	f001 ffc3 	bl	8019454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80174ce:	f000 fe53 	bl	8018178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80174d2:	f001 ff8f 	bl	80193f4 <vPortEnterCritical>
 80174d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80174dc:	b25b      	sxtb	r3, r3
 80174de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80174e2:	d103      	bne.n	80174ec <xQueueGenericSend+0x16c>
 80174e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e6:	2200      	movs	r2, #0
 80174e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80174ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174f2:	b25b      	sxtb	r3, r3
 80174f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80174f8:	d103      	bne.n	8017502 <xQueueGenericSend+0x182>
 80174fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fc:	2200      	movs	r2, #0
 80174fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017502:	f001 ffa7 	bl	8019454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017506:	1d3a      	adds	r2, r7, #4
 8017508:	f107 0314 	add.w	r3, r7, #20
 801750c:	4611      	mov	r1, r2
 801750e:	4618      	mov	r0, r3
 8017510:	f001 f8d0 	bl	80186b4 <xTaskCheckForTimeOut>
 8017514:	4603      	mov	r3, r0
 8017516:	2b00      	cmp	r3, #0
 8017518:	d124      	bne.n	8017564 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801751a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801751c:	f000 faa2 	bl	8017a64 <prvIsQueueFull>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	d018      	beq.n	8017558 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017528:	3310      	adds	r3, #16
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	4611      	mov	r1, r2
 801752e:	4618      	mov	r0, r3
 8017530:	f000 fff6 	bl	8018520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017536:	f000 fa2d 	bl	8017994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801753a:	f000 fe2b 	bl	8018194 <xTaskResumeAll>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	f47f af7c 	bne.w	801743e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017546:	4b0c      	ldr	r3, [pc, #48]	; (8017578 <xQueueGenericSend+0x1f8>)
 8017548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801754c:	601a      	str	r2, [r3, #0]
 801754e:	f3bf 8f4f 	dsb	sy
 8017552:	f3bf 8f6f 	isb	sy
 8017556:	e772      	b.n	801743e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801755a:	f000 fa1b 	bl	8017994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801755e:	f000 fe19 	bl	8018194 <xTaskResumeAll>
 8017562:	e76c      	b.n	801743e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017566:	f000 fa15 	bl	8017994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801756a:	f000 fe13 	bl	8018194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801756e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017570:	4618      	mov	r0, r3
 8017572:	3738      	adds	r7, #56	; 0x38
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}
 8017578:	e000ed04 	.word	0xe000ed04

0801757c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b090      	sub	sp, #64	; 0x40
 8017580:	af00      	add	r7, sp, #0
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
 8017588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017590:	2b00      	cmp	r3, #0
 8017592:	d10a      	bne.n	80175aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017598:	f383 8811 	msr	BASEPRI, r3
 801759c:	f3bf 8f6f 	isb	sy
 80175a0:	f3bf 8f4f 	dsb	sy
 80175a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80175a6:	bf00      	nop
 80175a8:	e7fe      	b.n	80175a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d103      	bne.n	80175b8 <xQueueGenericSendFromISR+0x3c>
 80175b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d101      	bne.n	80175bc <xQueueGenericSendFromISR+0x40>
 80175b8:	2301      	movs	r3, #1
 80175ba:	e000      	b.n	80175be <xQueueGenericSendFromISR+0x42>
 80175bc:	2300      	movs	r3, #0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d10a      	bne.n	80175d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80175c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c6:	f383 8811 	msr	BASEPRI, r3
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	f3bf 8f4f 	dsb	sy
 80175d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175d4:	bf00      	nop
 80175d6:	e7fe      	b.n	80175d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	2b02      	cmp	r3, #2
 80175dc:	d103      	bne.n	80175e6 <xQueueGenericSendFromISR+0x6a>
 80175de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175e2:	2b01      	cmp	r3, #1
 80175e4:	d101      	bne.n	80175ea <xQueueGenericSendFromISR+0x6e>
 80175e6:	2301      	movs	r3, #1
 80175e8:	e000      	b.n	80175ec <xQueueGenericSendFromISR+0x70>
 80175ea:	2300      	movs	r3, #0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d10a      	bne.n	8017606 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80175f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f4:	f383 8811 	msr	BASEPRI, r3
 80175f8:	f3bf 8f6f 	isb	sy
 80175fc:	f3bf 8f4f 	dsb	sy
 8017600:	623b      	str	r3, [r7, #32]
}
 8017602:	bf00      	nop
 8017604:	e7fe      	b.n	8017604 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017606:	f001 ffd7 	bl	80195b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801760a:	f3ef 8211 	mrs	r2, BASEPRI
 801760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017612:	f383 8811 	msr	BASEPRI, r3
 8017616:	f3bf 8f6f 	isb	sy
 801761a:	f3bf 8f4f 	dsb	sy
 801761e:	61fa      	str	r2, [r7, #28]
 8017620:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017622:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017624:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801762e:	429a      	cmp	r2, r3
 8017630:	d302      	bcc.n	8017638 <xQueueGenericSendFromISR+0xbc>
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	2b02      	cmp	r3, #2
 8017636:	d12f      	bne.n	8017698 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801763a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801763e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017646:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017648:	683a      	ldr	r2, [r7, #0]
 801764a:	68b9      	ldr	r1, [r7, #8]
 801764c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801764e:	f000 f911 	bl	8017874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017652:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801765a:	d112      	bne.n	8017682 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017660:	2b00      	cmp	r3, #0
 8017662:	d016      	beq.n	8017692 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017666:	3324      	adds	r3, #36	; 0x24
 8017668:	4618      	mov	r0, r3
 801766a:	f000 ffa9 	bl	80185c0 <xTaskRemoveFromEventList>
 801766e:	4603      	mov	r3, r0
 8017670:	2b00      	cmp	r3, #0
 8017672:	d00e      	beq.n	8017692 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00b      	beq.n	8017692 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2201      	movs	r2, #1
 801767e:	601a      	str	r2, [r3, #0]
 8017680:	e007      	b.n	8017692 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017682:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017686:	3301      	adds	r3, #1
 8017688:	b2db      	uxtb	r3, r3
 801768a:	b25a      	sxtb	r2, r3
 801768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801768e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017692:	2301      	movs	r3, #1
 8017694:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017696:	e001      	b.n	801769c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017698:	2300      	movs	r3, #0
 801769a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801769c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801769e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80176a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80176a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3740      	adds	r7, #64	; 0x40
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
	...

080176b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b08c      	sub	sp, #48	; 0x30
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80176c0:	2300      	movs	r3, #0
 80176c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80176c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d10a      	bne.n	80176e4 <xQueueReceive+0x30>
	__asm volatile
 80176ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d2:	f383 8811 	msr	BASEPRI, r3
 80176d6:	f3bf 8f6f 	isb	sy
 80176da:	f3bf 8f4f 	dsb	sy
 80176de:	623b      	str	r3, [r7, #32]
}
 80176e0:	bf00      	nop
 80176e2:	e7fe      	b.n	80176e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d103      	bne.n	80176f2 <xQueueReceive+0x3e>
 80176ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d101      	bne.n	80176f6 <xQueueReceive+0x42>
 80176f2:	2301      	movs	r3, #1
 80176f4:	e000      	b.n	80176f8 <xQueueReceive+0x44>
 80176f6:	2300      	movs	r3, #0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d10a      	bne.n	8017712 <xQueueReceive+0x5e>
	__asm volatile
 80176fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017700:	f383 8811 	msr	BASEPRI, r3
 8017704:	f3bf 8f6f 	isb	sy
 8017708:	f3bf 8f4f 	dsb	sy
 801770c:	61fb      	str	r3, [r7, #28]
}
 801770e:	bf00      	nop
 8017710:	e7fe      	b.n	8017710 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017712:	f001 f913 	bl	801893c <xTaskGetSchedulerState>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d102      	bne.n	8017722 <xQueueReceive+0x6e>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d101      	bne.n	8017726 <xQueueReceive+0x72>
 8017722:	2301      	movs	r3, #1
 8017724:	e000      	b.n	8017728 <xQueueReceive+0x74>
 8017726:	2300      	movs	r3, #0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d10a      	bne.n	8017742 <xQueueReceive+0x8e>
	__asm volatile
 801772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	61bb      	str	r3, [r7, #24]
}
 801773e:	bf00      	nop
 8017740:	e7fe      	b.n	8017740 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017742:	f001 fe57 	bl	80193f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801774a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774e:	2b00      	cmp	r3, #0
 8017750:	d01f      	beq.n	8017792 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017752:	68b9      	ldr	r1, [r7, #8]
 8017754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017756:	f000 f8f7 	bl	8017948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775c:	1e5a      	subs	r2, r3, #1
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017764:	691b      	ldr	r3, [r3, #16]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d00f      	beq.n	801778a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776c:	3310      	adds	r3, #16
 801776e:	4618      	mov	r0, r3
 8017770:	f000 ff26 	bl	80185c0 <xTaskRemoveFromEventList>
 8017774:	4603      	mov	r3, r0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d007      	beq.n	801778a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801777a:	4b3d      	ldr	r3, [pc, #244]	; (8017870 <xQueueReceive+0x1bc>)
 801777c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017780:	601a      	str	r2, [r3, #0]
 8017782:	f3bf 8f4f 	dsb	sy
 8017786:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801778a:	f001 fe63 	bl	8019454 <vPortExitCritical>
				return pdPASS;
 801778e:	2301      	movs	r3, #1
 8017790:	e069      	b.n	8017866 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d103      	bne.n	80177a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017798:	f001 fe5c 	bl	8019454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801779c:	2300      	movs	r3, #0
 801779e:	e062      	b.n	8017866 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d106      	bne.n	80177b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80177a6:	f107 0310 	add.w	r3, r7, #16
 80177aa:	4618      	mov	r0, r3
 80177ac:	f000 ff6c 	bl	8018688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80177b0:	2301      	movs	r3, #1
 80177b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80177b4:	f001 fe4e 	bl	8019454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80177b8:	f000 fcde 	bl	8018178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80177bc:	f001 fe1a 	bl	80193f4 <vPortEnterCritical>
 80177c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80177c6:	b25b      	sxtb	r3, r3
 80177c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177cc:	d103      	bne.n	80177d6 <xQueueReceive+0x122>
 80177ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d0:	2200      	movs	r2, #0
 80177d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80177d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80177dc:	b25b      	sxtb	r3, r3
 80177de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177e2:	d103      	bne.n	80177ec <xQueueReceive+0x138>
 80177e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e6:	2200      	movs	r2, #0
 80177e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80177ec:	f001 fe32 	bl	8019454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80177f0:	1d3a      	adds	r2, r7, #4
 80177f2:	f107 0310 	add.w	r3, r7, #16
 80177f6:	4611      	mov	r1, r2
 80177f8:	4618      	mov	r0, r3
 80177fa:	f000 ff5b 	bl	80186b4 <xTaskCheckForTimeOut>
 80177fe:	4603      	mov	r3, r0
 8017800:	2b00      	cmp	r3, #0
 8017802:	d123      	bne.n	801784c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017806:	f000 f917 	bl	8017a38 <prvIsQueueEmpty>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d017      	beq.n	8017840 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017812:	3324      	adds	r3, #36	; 0x24
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	4611      	mov	r1, r2
 8017818:	4618      	mov	r0, r3
 801781a:	f000 fe81 	bl	8018520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801781e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017820:	f000 f8b8 	bl	8017994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017824:	f000 fcb6 	bl	8018194 <xTaskResumeAll>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d189      	bne.n	8017742 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801782e:	4b10      	ldr	r3, [pc, #64]	; (8017870 <xQueueReceive+0x1bc>)
 8017830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017834:	601a      	str	r2, [r3, #0]
 8017836:	f3bf 8f4f 	dsb	sy
 801783a:	f3bf 8f6f 	isb	sy
 801783e:	e780      	b.n	8017742 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017842:	f000 f8a7 	bl	8017994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017846:	f000 fca5 	bl	8018194 <xTaskResumeAll>
 801784a:	e77a      	b.n	8017742 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801784c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801784e:	f000 f8a1 	bl	8017994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017852:	f000 fc9f 	bl	8018194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017858:	f000 f8ee 	bl	8017a38 <prvIsQueueEmpty>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	f43f af6f 	beq.w	8017742 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017864:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017866:	4618      	mov	r0, r3
 8017868:	3730      	adds	r7, #48	; 0x30
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	e000ed04 	.word	0xe000ed04

08017874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b086      	sub	sp, #24
 8017878:	af00      	add	r7, sp, #0
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017880:	2300      	movs	r3, #0
 8017882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788e:	2b00      	cmp	r3, #0
 8017890:	d10d      	bne.n	80178ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d14d      	bne.n	8017936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	689b      	ldr	r3, [r3, #8]
 801789e:	4618      	mov	r0, r3
 80178a0:	f001 f86a 	bl	8018978 <xTaskPriorityDisinherit>
 80178a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	2200      	movs	r2, #0
 80178aa:	609a      	str	r2, [r3, #8]
 80178ac:	e043      	b.n	8017936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d119      	bne.n	80178e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6858      	ldr	r0, [r3, #4]
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178bc:	461a      	mov	r2, r3
 80178be:	68b9      	ldr	r1, [r7, #8]
 80178c0:	f002 f8d6 	bl	8019a70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	685a      	ldr	r2, [r3, #4]
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178cc:	441a      	add	r2, r3
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	685a      	ldr	r2, [r3, #4]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	689b      	ldr	r3, [r3, #8]
 80178da:	429a      	cmp	r2, r3
 80178dc:	d32b      	bcc.n	8017936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	605a      	str	r2, [r3, #4]
 80178e6:	e026      	b.n	8017936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	68d8      	ldr	r0, [r3, #12]
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178f0:	461a      	mov	r2, r3
 80178f2:	68b9      	ldr	r1, [r7, #8]
 80178f4:	f002 f8bc 	bl	8019a70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	68da      	ldr	r2, [r3, #12]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017900:	425b      	negs	r3, r3
 8017902:	441a      	add	r2, r3
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	68da      	ldr	r2, [r3, #12]
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	429a      	cmp	r2, r3
 8017912:	d207      	bcs.n	8017924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	689a      	ldr	r2, [r3, #8]
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801791c:	425b      	negs	r3, r3
 801791e:	441a      	add	r2, r3
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2b02      	cmp	r3, #2
 8017928:	d105      	bne.n	8017936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d002      	beq.n	8017936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017930:	693b      	ldr	r3, [r7, #16]
 8017932:	3b01      	subs	r3, #1
 8017934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	1c5a      	adds	r2, r3, #1
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801793e:	697b      	ldr	r3, [r7, #20]
}
 8017940:	4618      	mov	r0, r3
 8017942:	3718      	adds	r7, #24
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b082      	sub	sp, #8
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017956:	2b00      	cmp	r3, #0
 8017958:	d018      	beq.n	801798c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	68da      	ldr	r2, [r3, #12]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017962:	441a      	add	r2, r3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	68da      	ldr	r2, [r3, #12]
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	689b      	ldr	r3, [r3, #8]
 8017970:	429a      	cmp	r2, r3
 8017972:	d303      	bcc.n	801797c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	68d9      	ldr	r1, [r3, #12]
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017984:	461a      	mov	r2, r3
 8017986:	6838      	ldr	r0, [r7, #0]
 8017988:	f002 f872 	bl	8019a70 <memcpy>
	}
}
 801798c:	bf00      	nop
 801798e:	3708      	adds	r7, #8
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801799c:	f001 fd2a 	bl	80193f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80179a8:	e011      	b.n	80179ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d012      	beq.n	80179d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	3324      	adds	r3, #36	; 0x24
 80179b6:	4618      	mov	r0, r3
 80179b8:	f000 fe02 	bl	80185c0 <xTaskRemoveFromEventList>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80179c2:	f000 fed9 	bl	8018778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80179c6:	7bfb      	ldrb	r3, [r7, #15]
 80179c8:	3b01      	subs	r3, #1
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80179ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	dce9      	bgt.n	80179aa <prvUnlockQueue+0x16>
 80179d6:	e000      	b.n	80179da <prvUnlockQueue+0x46>
					break;
 80179d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	22ff      	movs	r2, #255	; 0xff
 80179de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80179e2:	f001 fd37 	bl	8019454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80179e6:	f001 fd05 	bl	80193f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80179f2:	e011      	b.n	8017a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	691b      	ldr	r3, [r3, #16]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d012      	beq.n	8017a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	3310      	adds	r3, #16
 8017a00:	4618      	mov	r0, r3
 8017a02:	f000 fddd 	bl	80185c0 <xTaskRemoveFromEventList>
 8017a06:	4603      	mov	r3, r0
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d001      	beq.n	8017a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017a0c:	f000 feb4 	bl	8018778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017a10:	7bbb      	ldrb	r3, [r7, #14]
 8017a12:	3b01      	subs	r3, #1
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	dce9      	bgt.n	80179f4 <prvUnlockQueue+0x60>
 8017a20:	e000      	b.n	8017a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	22ff      	movs	r2, #255	; 0xff
 8017a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017a2c:	f001 fd12 	bl	8019454 <vPortExitCritical>
}
 8017a30:	bf00      	nop
 8017a32:	3710      	adds	r7, #16
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b084      	sub	sp, #16
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017a40:	f001 fcd8 	bl	80193f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d102      	bne.n	8017a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	60fb      	str	r3, [r7, #12]
 8017a50:	e001      	b.n	8017a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017a52:	2300      	movs	r3, #0
 8017a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017a56:	f001 fcfd 	bl	8019454 <vPortExitCritical>

	return xReturn;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3710      	adds	r7, #16
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b084      	sub	sp, #16
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017a6c:	f001 fcc2 	bl	80193f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d102      	bne.n	8017a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	60fb      	str	r3, [r7, #12]
 8017a80:	e001      	b.n	8017a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017a82:	2300      	movs	r3, #0
 8017a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017a86:	f001 fce5 	bl	8019454 <vPortExitCritical>

	return xReturn;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3710      	adds	r7, #16
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017a94:	b480      	push	{r7}
 8017a96:	b085      	sub	sp, #20
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	60fb      	str	r3, [r7, #12]
 8017aa2:	e014      	b.n	8017ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017aa4:	4a0f      	ldr	r2, [pc, #60]	; (8017ae4 <vQueueAddToRegistry+0x50>)
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d10b      	bne.n	8017ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017ab0:	490c      	ldr	r1, [pc, #48]	; (8017ae4 <vQueueAddToRegistry+0x50>)
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	683a      	ldr	r2, [r7, #0]
 8017ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017aba:	4a0a      	ldr	r2, [pc, #40]	; (8017ae4 <vQueueAddToRegistry+0x50>)
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	00db      	lsls	r3, r3, #3
 8017ac0:	4413      	add	r3, r2
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017ac6:	e006      	b.n	8017ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	3301      	adds	r3, #1
 8017acc:	60fb      	str	r3, [r7, #12]
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2b07      	cmp	r3, #7
 8017ad2:	d9e7      	bls.n	8017aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017ad4:	bf00      	nop
 8017ad6:	bf00      	nop
 8017ad8:	3714      	adds	r7, #20
 8017ada:	46bd      	mov	sp, r7
 8017adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae0:	4770      	bx	lr
 8017ae2:	bf00      	nop
 8017ae4:	2000a6b8 	.word	0x2000a6b8

08017ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b086      	sub	sp, #24
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	60f8      	str	r0, [r7, #12]
 8017af0:	60b9      	str	r1, [r7, #8]
 8017af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017af8:	f001 fc7c 	bl	80193f4 <vPortEnterCritical>
 8017afc:	697b      	ldr	r3, [r7, #20]
 8017afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b02:	b25b      	sxtb	r3, r3
 8017b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b08:	d103      	bne.n	8017b12 <vQueueWaitForMessageRestricted+0x2a>
 8017b0a:	697b      	ldr	r3, [r7, #20]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b18:	b25b      	sxtb	r3, r3
 8017b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b1e:	d103      	bne.n	8017b28 <vQueueWaitForMessageRestricted+0x40>
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	2200      	movs	r2, #0
 8017b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b28:	f001 fc94 	bl	8019454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d106      	bne.n	8017b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	3324      	adds	r3, #36	; 0x24
 8017b38:	687a      	ldr	r2, [r7, #4]
 8017b3a:	68b9      	ldr	r1, [r7, #8]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f000 fd13 	bl	8018568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017b42:	6978      	ldr	r0, [r7, #20]
 8017b44:	f7ff ff26 	bl	8017994 <prvUnlockQueue>
	}
 8017b48:	bf00      	nop
 8017b4a:	3718      	adds	r7, #24
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b08e      	sub	sp, #56	; 0x38
 8017b54:	af04      	add	r7, sp, #16
 8017b56:	60f8      	str	r0, [r7, #12]
 8017b58:	60b9      	str	r1, [r7, #8]
 8017b5a:	607a      	str	r2, [r7, #4]
 8017b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d10a      	bne.n	8017b7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b68:	f383 8811 	msr	BASEPRI, r3
 8017b6c:	f3bf 8f6f 	isb	sy
 8017b70:	f3bf 8f4f 	dsb	sy
 8017b74:	623b      	str	r3, [r7, #32]
}
 8017b76:	bf00      	nop
 8017b78:	e7fe      	b.n	8017b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d10a      	bne.n	8017b96 <xTaskCreateStatic+0x46>
	__asm volatile
 8017b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b84:	f383 8811 	msr	BASEPRI, r3
 8017b88:	f3bf 8f6f 	isb	sy
 8017b8c:	f3bf 8f4f 	dsb	sy
 8017b90:	61fb      	str	r3, [r7, #28]
}
 8017b92:	bf00      	nop
 8017b94:	e7fe      	b.n	8017b94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017b96:	235c      	movs	r3, #92	; 0x5c
 8017b98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8017b9e:	d00a      	beq.n	8017bb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8017ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba4:	f383 8811 	msr	BASEPRI, r3
 8017ba8:	f3bf 8f6f 	isb	sy
 8017bac:	f3bf 8f4f 	dsb	sy
 8017bb0:	61bb      	str	r3, [r7, #24]
}
 8017bb2:	bf00      	nop
 8017bb4:	e7fe      	b.n	8017bb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017bb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d01e      	beq.n	8017bfc <xTaskCreateStatic+0xac>
 8017bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d01b      	beq.n	8017bfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd0:	2202      	movs	r2, #2
 8017bd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	9303      	str	r3, [sp, #12]
 8017bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bdc:	9302      	str	r3, [sp, #8]
 8017bde:	f107 0314 	add.w	r3, r7, #20
 8017be2:	9301      	str	r3, [sp, #4]
 8017be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be6:	9300      	str	r3, [sp, #0]
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	687a      	ldr	r2, [r7, #4]
 8017bec:	68b9      	ldr	r1, [r7, #8]
 8017bee:	68f8      	ldr	r0, [r7, #12]
 8017bf0:	f000 f850 	bl	8017c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bf6:	f000 f8dd 	bl	8017db4 <prvAddNewTaskToReadyList>
 8017bfa:	e001      	b.n	8017c00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017c00:	697b      	ldr	r3, [r7, #20]
	}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3728      	adds	r7, #40	; 0x28
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}

08017c0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017c0a:	b580      	push	{r7, lr}
 8017c0c:	b08c      	sub	sp, #48	; 0x30
 8017c0e:	af04      	add	r7, sp, #16
 8017c10:	60f8      	str	r0, [r7, #12]
 8017c12:	60b9      	str	r1, [r7, #8]
 8017c14:	603b      	str	r3, [r7, #0]
 8017c16:	4613      	mov	r3, r2
 8017c18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017c1a:	88fb      	ldrh	r3, [r7, #6]
 8017c1c:	009b      	lsls	r3, r3, #2
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f001 fd0a 	bl	8019638 <pvPortMalloc>
 8017c24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d00e      	beq.n	8017c4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017c2c:	205c      	movs	r0, #92	; 0x5c
 8017c2e:	f001 fd03 	bl	8019638 <pvPortMalloc>
 8017c32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017c34:	69fb      	ldr	r3, [r7, #28]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d003      	beq.n	8017c42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017c3a:	69fb      	ldr	r3, [r7, #28]
 8017c3c:	697a      	ldr	r2, [r7, #20]
 8017c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8017c40:	e005      	b.n	8017c4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017c42:	6978      	ldr	r0, [r7, #20]
 8017c44:	f001 fdc4 	bl	80197d0 <vPortFree>
 8017c48:	e001      	b.n	8017c4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d017      	beq.n	8017c84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	2200      	movs	r2, #0
 8017c58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017c5c:	88fa      	ldrh	r2, [r7, #6]
 8017c5e:	2300      	movs	r3, #0
 8017c60:	9303      	str	r3, [sp, #12]
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	9302      	str	r3, [sp, #8]
 8017c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c68:	9301      	str	r3, [sp, #4]
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	9300      	str	r3, [sp, #0]
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	68b9      	ldr	r1, [r7, #8]
 8017c72:	68f8      	ldr	r0, [r7, #12]
 8017c74:	f000 f80e 	bl	8017c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017c78:	69f8      	ldr	r0, [r7, #28]
 8017c7a:	f000 f89b 	bl	8017db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017c7e:	2301      	movs	r3, #1
 8017c80:	61bb      	str	r3, [r7, #24]
 8017c82:	e002      	b.n	8017c8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	3720      	adds	r7, #32
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b088      	sub	sp, #32
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	607a      	str	r2, [r7, #4]
 8017ca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	461a      	mov	r2, r3
 8017cac:	21a5      	movs	r1, #165	; 0xa5
 8017cae:	f001 feed 	bl	8019a8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	4413      	add	r3, r2
 8017cc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017cc4:	69bb      	ldr	r3, [r7, #24]
 8017cc6:	f023 0307 	bic.w	r3, r3, #7
 8017cca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017ccc:	69bb      	ldr	r3, [r7, #24]
 8017cce:	f003 0307 	and.w	r3, r3, #7
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00a      	beq.n	8017cec <prvInitialiseNewTask+0x58>
	__asm volatile
 8017cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cda:	f383 8811 	msr	BASEPRI, r3
 8017cde:	f3bf 8f6f 	isb	sy
 8017ce2:	f3bf 8f4f 	dsb	sy
 8017ce6:	617b      	str	r3, [r7, #20]
}
 8017ce8:	bf00      	nop
 8017cea:	e7fe      	b.n	8017cea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d01f      	beq.n	8017d32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	61fb      	str	r3, [r7, #28]
 8017cf6:	e012      	b.n	8017d1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017cf8:	68ba      	ldr	r2, [r7, #8]
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	4413      	add	r3, r2
 8017cfe:	7819      	ldrb	r1, [r3, #0]
 8017d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d02:	69fb      	ldr	r3, [r7, #28]
 8017d04:	4413      	add	r3, r2
 8017d06:	3334      	adds	r3, #52	; 0x34
 8017d08:	460a      	mov	r2, r1
 8017d0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017d0c:	68ba      	ldr	r2, [r7, #8]
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	4413      	add	r3, r2
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d006      	beq.n	8017d26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017d18:	69fb      	ldr	r3, [r7, #28]
 8017d1a:	3301      	adds	r3, #1
 8017d1c:	61fb      	str	r3, [r7, #28]
 8017d1e:	69fb      	ldr	r3, [r7, #28]
 8017d20:	2b0f      	cmp	r3, #15
 8017d22:	d9e9      	bls.n	8017cf8 <prvInitialiseNewTask+0x64>
 8017d24:	e000      	b.n	8017d28 <prvInitialiseNewTask+0x94>
			{
				break;
 8017d26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d30:	e003      	b.n	8017d3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d34:	2200      	movs	r2, #0
 8017d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3c:	2b37      	cmp	r3, #55	; 0x37
 8017d3e:	d901      	bls.n	8017d44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017d40:	2337      	movs	r3, #55	; 0x37
 8017d42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d52:	2200      	movs	r2, #0
 8017d54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d58:	3304      	adds	r3, #4
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7ff f978 	bl	8017050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d62:	3318      	adds	r3, #24
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ff f973 	bl	8017050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d82:	2200      	movs	r2, #0
 8017d84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d88:	2200      	movs	r2, #0
 8017d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d8e:	683a      	ldr	r2, [r7, #0]
 8017d90:	68f9      	ldr	r1, [r7, #12]
 8017d92:	69b8      	ldr	r0, [r7, #24]
 8017d94:	f001 fa00 	bl	8019198 <pxPortInitialiseStack>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d002      	beq.n	8017daa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017daa:	bf00      	nop
 8017dac:	3720      	adds	r7, #32
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
	...

08017db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b082      	sub	sp, #8
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017dbc:	f001 fb1a 	bl	80193f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017dc0:	4b2d      	ldr	r3, [pc, #180]	; (8017e78 <prvAddNewTaskToReadyList+0xc4>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	4a2c      	ldr	r2, [pc, #176]	; (8017e78 <prvAddNewTaskToReadyList+0xc4>)
 8017dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017dca:	4b2c      	ldr	r3, [pc, #176]	; (8017e7c <prvAddNewTaskToReadyList+0xc8>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d109      	bne.n	8017de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017dd2:	4a2a      	ldr	r2, [pc, #168]	; (8017e7c <prvAddNewTaskToReadyList+0xc8>)
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017dd8:	4b27      	ldr	r3, [pc, #156]	; (8017e78 <prvAddNewTaskToReadyList+0xc4>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	d110      	bne.n	8017e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017de0:	f000 fcee 	bl	80187c0 <prvInitialiseTaskLists>
 8017de4:	e00d      	b.n	8017e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017de6:	4b26      	ldr	r3, [pc, #152]	; (8017e80 <prvAddNewTaskToReadyList+0xcc>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d109      	bne.n	8017e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017dee:	4b23      	ldr	r3, [pc, #140]	; (8017e7c <prvAddNewTaskToReadyList+0xc8>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	d802      	bhi.n	8017e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017dfc:	4a1f      	ldr	r2, [pc, #124]	; (8017e7c <prvAddNewTaskToReadyList+0xc8>)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017e02:	4b20      	ldr	r3, [pc, #128]	; (8017e84 <prvAddNewTaskToReadyList+0xd0>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	3301      	adds	r3, #1
 8017e08:	4a1e      	ldr	r2, [pc, #120]	; (8017e84 <prvAddNewTaskToReadyList+0xd0>)
 8017e0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017e0c:	4b1d      	ldr	r3, [pc, #116]	; (8017e84 <prvAddNewTaskToReadyList+0xd0>)
 8017e0e:	681a      	ldr	r2, [r3, #0]
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e18:	4b1b      	ldr	r3, [pc, #108]	; (8017e88 <prvAddNewTaskToReadyList+0xd4>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d903      	bls.n	8017e28 <prvAddNewTaskToReadyList+0x74>
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e24:	4a18      	ldr	r2, [pc, #96]	; (8017e88 <prvAddNewTaskToReadyList+0xd4>)
 8017e26:	6013      	str	r3, [r2, #0]
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	009b      	lsls	r3, r3, #2
 8017e30:	4413      	add	r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	4a15      	ldr	r2, [pc, #84]	; (8017e8c <prvAddNewTaskToReadyList+0xd8>)
 8017e36:	441a      	add	r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	3304      	adds	r3, #4
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	4610      	mov	r0, r2
 8017e40:	f7ff f913 	bl	801706a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017e44:	f001 fb06 	bl	8019454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017e48:	4b0d      	ldr	r3, [pc, #52]	; (8017e80 <prvAddNewTaskToReadyList+0xcc>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00e      	beq.n	8017e6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e50:	4b0a      	ldr	r3, [pc, #40]	; (8017e7c <prvAddNewTaskToReadyList+0xc8>)
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d207      	bcs.n	8017e6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017e5e:	4b0c      	ldr	r3, [pc, #48]	; (8017e90 <prvAddNewTaskToReadyList+0xdc>)
 8017e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e64:	601a      	str	r2, [r3, #0]
 8017e66:	f3bf 8f4f 	dsb	sy
 8017e6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017e6e:	bf00      	nop
 8017e70:	3708      	adds	r7, #8
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
 8017e76:	bf00      	nop
 8017e78:	20001c98 	.word	0x20001c98
 8017e7c:	200017c4 	.word	0x200017c4
 8017e80:	20001ca4 	.word	0x20001ca4
 8017e84:	20001cb4 	.word	0x20001cb4
 8017e88:	20001ca0 	.word	0x20001ca0
 8017e8c:	200017c8 	.word	0x200017c8
 8017e90:	e000ed04 	.word	0xe000ed04

08017e94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017e9c:	f001 faaa 	bl	80193f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d102      	bne.n	8017eac <vTaskDelete+0x18>
 8017ea6:	4b2c      	ldr	r3, [pc, #176]	; (8017f58 <vTaskDelete+0xc4>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	e000      	b.n	8017eae <vTaskDelete+0x1a>
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	3304      	adds	r3, #4
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7ff f935 	bl	8017124 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d004      	beq.n	8017ecc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	3318      	adds	r3, #24
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7ff f92c 	bl	8017124 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8017ecc:	4b23      	ldr	r3, [pc, #140]	; (8017f5c <vTaskDelete+0xc8>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	3301      	adds	r3, #1
 8017ed2:	4a22      	ldr	r2, [pc, #136]	; (8017f5c <vTaskDelete+0xc8>)
 8017ed4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8017ed6:	4b20      	ldr	r3, [pc, #128]	; (8017f58 <vTaskDelete+0xc4>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	68fa      	ldr	r2, [r7, #12]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d10b      	bne.n	8017ef8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	4619      	mov	r1, r3
 8017ee6:	481e      	ldr	r0, [pc, #120]	; (8017f60 <vTaskDelete+0xcc>)
 8017ee8:	f7ff f8bf 	bl	801706a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8017eec:	4b1d      	ldr	r3, [pc, #116]	; (8017f64 <vTaskDelete+0xd0>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	3301      	adds	r3, #1
 8017ef2:	4a1c      	ldr	r2, [pc, #112]	; (8017f64 <vTaskDelete+0xd0>)
 8017ef4:	6013      	str	r3, [r2, #0]
 8017ef6:	e009      	b.n	8017f0c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017ef8:	4b1b      	ldr	r3, [pc, #108]	; (8017f68 <vTaskDelete+0xd4>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	3b01      	subs	r3, #1
 8017efe:	4a1a      	ldr	r2, [pc, #104]	; (8017f68 <vTaskDelete+0xd4>)
 8017f00:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8017f02:	68f8      	ldr	r0, [r7, #12]
 8017f04:	f000 fcca 	bl	801889c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017f08:	f000 fcf8 	bl	80188fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017f0c:	f001 faa2 	bl	8019454 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017f10:	4b16      	ldr	r3, [pc, #88]	; (8017f6c <vTaskDelete+0xd8>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d01b      	beq.n	8017f50 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8017f18:	4b0f      	ldr	r3, [pc, #60]	; (8017f58 <vTaskDelete+0xc4>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	68fa      	ldr	r2, [r7, #12]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d116      	bne.n	8017f50 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8017f22:	4b13      	ldr	r3, [pc, #76]	; (8017f70 <vTaskDelete+0xdc>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d00a      	beq.n	8017f40 <vTaskDelete+0xac>
	__asm volatile
 8017f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f2e:	f383 8811 	msr	BASEPRI, r3
 8017f32:	f3bf 8f6f 	isb	sy
 8017f36:	f3bf 8f4f 	dsb	sy
 8017f3a:	60bb      	str	r3, [r7, #8]
}
 8017f3c:	bf00      	nop
 8017f3e:	e7fe      	b.n	8017f3e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8017f40:	4b0c      	ldr	r3, [pc, #48]	; (8017f74 <vTaskDelete+0xe0>)
 8017f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f46:	601a      	str	r2, [r3, #0]
 8017f48:	f3bf 8f4f 	dsb	sy
 8017f4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017f50:	bf00      	nop
 8017f52:	3710      	adds	r7, #16
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd80      	pop	{r7, pc}
 8017f58:	200017c4 	.word	0x200017c4
 8017f5c:	20001cb4 	.word	0x20001cb4
 8017f60:	20001c6c 	.word	0x20001c6c
 8017f64:	20001c80 	.word	0x20001c80
 8017f68:	20001c98 	.word	0x20001c98
 8017f6c:	20001ca4 	.word	0x20001ca4
 8017f70:	20001cc0 	.word	0x20001cc0
 8017f74:	e000ed04 	.word	0xe000ed04

08017f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017f80:	2300      	movs	r3, #0
 8017f82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d017      	beq.n	8017fba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017f8a:	4b13      	ldr	r3, [pc, #76]	; (8017fd8 <vTaskDelay+0x60>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d00a      	beq.n	8017fa8 <vTaskDelay+0x30>
	__asm volatile
 8017f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f96:	f383 8811 	msr	BASEPRI, r3
 8017f9a:	f3bf 8f6f 	isb	sy
 8017f9e:	f3bf 8f4f 	dsb	sy
 8017fa2:	60bb      	str	r3, [r7, #8]
}
 8017fa4:	bf00      	nop
 8017fa6:	e7fe      	b.n	8017fa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017fa8:	f000 f8e6 	bl	8018178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017fac:	2100      	movs	r1, #0
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f000 fd50 	bl	8018a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017fb4:	f000 f8ee 	bl	8018194 <xTaskResumeAll>
 8017fb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d107      	bne.n	8017fd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017fc0:	4b06      	ldr	r3, [pc, #24]	; (8017fdc <vTaskDelay+0x64>)
 8017fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fc6:	601a      	str	r2, [r3, #0]
 8017fc8:	f3bf 8f4f 	dsb	sy
 8017fcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017fd0:	bf00      	nop
 8017fd2:	3710      	adds	r7, #16
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}
 8017fd8:	20001cc0 	.word	0x20001cc0
 8017fdc:	e000ed04 	.word	0xe000ed04

08017fe0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b088      	sub	sp, #32
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8017fec:	69bb      	ldr	r3, [r7, #24]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d10a      	bne.n	8018008 <eTaskGetState+0x28>
	__asm volatile
 8017ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff6:	f383 8811 	msr	BASEPRI, r3
 8017ffa:	f3bf 8f6f 	isb	sy
 8017ffe:	f3bf 8f4f 	dsb	sy
 8018002:	60bb      	str	r3, [r7, #8]
}
 8018004:	bf00      	nop
 8018006:	e7fe      	b.n	8018006 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8018008:	4b23      	ldr	r3, [pc, #140]	; (8018098 <eTaskGetState+0xb8>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	69ba      	ldr	r2, [r7, #24]
 801800e:	429a      	cmp	r2, r3
 8018010:	d102      	bne.n	8018018 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8018012:	2300      	movs	r3, #0
 8018014:	77fb      	strb	r3, [r7, #31]
 8018016:	e03a      	b.n	801808e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8018018:	f001 f9ec 	bl	80193f4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801801c:	69bb      	ldr	r3, [r7, #24]
 801801e:	695b      	ldr	r3, [r3, #20]
 8018020:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8018022:	4b1e      	ldr	r3, [pc, #120]	; (801809c <eTaskGetState+0xbc>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8018028:	4b1d      	ldr	r3, [pc, #116]	; (80180a0 <eTaskGetState+0xc0>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801802e:	f001 fa11 	bl	8019454 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8018032:	697a      	ldr	r2, [r7, #20]
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	429a      	cmp	r2, r3
 8018038:	d003      	beq.n	8018042 <eTaskGetState+0x62>
 801803a:	697a      	ldr	r2, [r7, #20]
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	429a      	cmp	r2, r3
 8018040:	d102      	bne.n	8018048 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8018042:	2302      	movs	r3, #2
 8018044:	77fb      	strb	r3, [r7, #31]
 8018046:	e022      	b.n	801808e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	4a16      	ldr	r2, [pc, #88]	; (80180a4 <eTaskGetState+0xc4>)
 801804c:	4293      	cmp	r3, r2
 801804e:	d112      	bne.n	8018076 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8018050:	69bb      	ldr	r3, [r7, #24]
 8018052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018054:	2b00      	cmp	r3, #0
 8018056:	d10b      	bne.n	8018070 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018058:	69bb      	ldr	r3, [r7, #24]
 801805a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801805e:	b2db      	uxtb	r3, r3
 8018060:	2b01      	cmp	r3, #1
 8018062:	d102      	bne.n	801806a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8018064:	2302      	movs	r3, #2
 8018066:	77fb      	strb	r3, [r7, #31]
 8018068:	e011      	b.n	801808e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801806a:	2303      	movs	r3, #3
 801806c:	77fb      	strb	r3, [r7, #31]
 801806e:	e00e      	b.n	801808e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8018070:	2302      	movs	r3, #2
 8018072:	77fb      	strb	r3, [r7, #31]
 8018074:	e00b      	b.n	801808e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8018076:	697b      	ldr	r3, [r7, #20]
 8018078:	4a0b      	ldr	r2, [pc, #44]	; (80180a8 <eTaskGetState+0xc8>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d002      	beq.n	8018084 <eTaskGetState+0xa4>
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d102      	bne.n	801808a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8018084:	2304      	movs	r3, #4
 8018086:	77fb      	strb	r3, [r7, #31]
 8018088:	e001      	b.n	801808e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801808a:	2301      	movs	r3, #1
 801808c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801808e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018090:	4618      	mov	r0, r3
 8018092:	3720      	adds	r7, #32
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	200017c4 	.word	0x200017c4
 801809c:	20001c50 	.word	0x20001c50
 80180a0:	20001c54 	.word	0x20001c54
 80180a4:	20001c84 	.word	0x20001c84
 80180a8:	20001c6c 	.word	0x20001c6c

080180ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b08a      	sub	sp, #40	; 0x28
 80180b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80180b2:	2300      	movs	r3, #0
 80180b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80180b6:	2300      	movs	r3, #0
 80180b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80180ba:	463a      	mov	r2, r7
 80180bc:	1d39      	adds	r1, r7, #4
 80180be:	f107 0308 	add.w	r3, r7, #8
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fe ff70 	bl	8016fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80180c8:	6839      	ldr	r1, [r7, #0]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	68ba      	ldr	r2, [r7, #8]
 80180ce:	9202      	str	r2, [sp, #8]
 80180d0:	9301      	str	r3, [sp, #4]
 80180d2:	2300      	movs	r3, #0
 80180d4:	9300      	str	r3, [sp, #0]
 80180d6:	2300      	movs	r3, #0
 80180d8:	460a      	mov	r2, r1
 80180da:	4921      	ldr	r1, [pc, #132]	; (8018160 <vTaskStartScheduler+0xb4>)
 80180dc:	4821      	ldr	r0, [pc, #132]	; (8018164 <vTaskStartScheduler+0xb8>)
 80180de:	f7ff fd37 	bl	8017b50 <xTaskCreateStatic>
 80180e2:	4603      	mov	r3, r0
 80180e4:	4a20      	ldr	r2, [pc, #128]	; (8018168 <vTaskStartScheduler+0xbc>)
 80180e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80180e8:	4b1f      	ldr	r3, [pc, #124]	; (8018168 <vTaskStartScheduler+0xbc>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d002      	beq.n	80180f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80180f0:	2301      	movs	r3, #1
 80180f2:	617b      	str	r3, [r7, #20]
 80180f4:	e001      	b.n	80180fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80180f6:	2300      	movs	r3, #0
 80180f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80180fa:	697b      	ldr	r3, [r7, #20]
 80180fc:	2b01      	cmp	r3, #1
 80180fe:	d102      	bne.n	8018106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018100:	f000 fcfc 	bl	8018afc <xTimerCreateTimerTask>
 8018104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018106:	697b      	ldr	r3, [r7, #20]
 8018108:	2b01      	cmp	r3, #1
 801810a:	d116      	bne.n	801813a <vTaskStartScheduler+0x8e>
	__asm volatile
 801810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018110:	f383 8811 	msr	BASEPRI, r3
 8018114:	f3bf 8f6f 	isb	sy
 8018118:	f3bf 8f4f 	dsb	sy
 801811c:	613b      	str	r3, [r7, #16]
}
 801811e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018120:	4b12      	ldr	r3, [pc, #72]	; (801816c <vTaskStartScheduler+0xc0>)
 8018122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018126:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018128:	4b11      	ldr	r3, [pc, #68]	; (8018170 <vTaskStartScheduler+0xc4>)
 801812a:	2201      	movs	r2, #1
 801812c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801812e:	4b11      	ldr	r3, [pc, #68]	; (8018174 <vTaskStartScheduler+0xc8>)
 8018130:	2200      	movs	r2, #0
 8018132:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018134:	f001 f8bc 	bl	80192b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018138:	e00e      	b.n	8018158 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018140:	d10a      	bne.n	8018158 <vTaskStartScheduler+0xac>
	__asm volatile
 8018142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018146:	f383 8811 	msr	BASEPRI, r3
 801814a:	f3bf 8f6f 	isb	sy
 801814e:	f3bf 8f4f 	dsb	sy
 8018152:	60fb      	str	r3, [r7, #12]
}
 8018154:	bf00      	nop
 8018156:	e7fe      	b.n	8018156 <vTaskStartScheduler+0xaa>
}
 8018158:	bf00      	nop
 801815a:	3718      	adds	r7, #24
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}
 8018160:	0802006c 	.word	0x0802006c
 8018164:	08018791 	.word	0x08018791
 8018168:	20001cbc 	.word	0x20001cbc
 801816c:	20001cb8 	.word	0x20001cb8
 8018170:	20001ca4 	.word	0x20001ca4
 8018174:	20001c9c 	.word	0x20001c9c

08018178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018178:	b480      	push	{r7}
 801817a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801817c:	4b04      	ldr	r3, [pc, #16]	; (8018190 <vTaskSuspendAll+0x18>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	3301      	adds	r3, #1
 8018182:	4a03      	ldr	r2, [pc, #12]	; (8018190 <vTaskSuspendAll+0x18>)
 8018184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018186:	bf00      	nop
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr
 8018190:	20001cc0 	.word	0x20001cc0

08018194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b084      	sub	sp, #16
 8018198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801819e:	2300      	movs	r3, #0
 80181a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80181a2:	4b42      	ldr	r3, [pc, #264]	; (80182ac <xTaskResumeAll+0x118>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d10a      	bne.n	80181c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80181aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ae:	f383 8811 	msr	BASEPRI, r3
 80181b2:	f3bf 8f6f 	isb	sy
 80181b6:	f3bf 8f4f 	dsb	sy
 80181ba:	603b      	str	r3, [r7, #0]
}
 80181bc:	bf00      	nop
 80181be:	e7fe      	b.n	80181be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80181c0:	f001 f918 	bl	80193f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80181c4:	4b39      	ldr	r3, [pc, #228]	; (80182ac <xTaskResumeAll+0x118>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	3b01      	subs	r3, #1
 80181ca:	4a38      	ldr	r2, [pc, #224]	; (80182ac <xTaskResumeAll+0x118>)
 80181cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181ce:	4b37      	ldr	r3, [pc, #220]	; (80182ac <xTaskResumeAll+0x118>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d162      	bne.n	801829c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80181d6:	4b36      	ldr	r3, [pc, #216]	; (80182b0 <xTaskResumeAll+0x11c>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d05e      	beq.n	801829c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80181de:	e02f      	b.n	8018240 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181e0:	4b34      	ldr	r3, [pc, #208]	; (80182b4 <xTaskResumeAll+0x120>)
 80181e2:	68db      	ldr	r3, [r3, #12]
 80181e4:	68db      	ldr	r3, [r3, #12]
 80181e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	3318      	adds	r3, #24
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fe ff99 	bl	8017124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	3304      	adds	r3, #4
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fe ff94 	bl	8017124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018200:	4b2d      	ldr	r3, [pc, #180]	; (80182b8 <xTaskResumeAll+0x124>)
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	429a      	cmp	r2, r3
 8018206:	d903      	bls.n	8018210 <xTaskResumeAll+0x7c>
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801820c:	4a2a      	ldr	r2, [pc, #168]	; (80182b8 <xTaskResumeAll+0x124>)
 801820e:	6013      	str	r3, [r2, #0]
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018214:	4613      	mov	r3, r2
 8018216:	009b      	lsls	r3, r3, #2
 8018218:	4413      	add	r3, r2
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	4a27      	ldr	r2, [pc, #156]	; (80182bc <xTaskResumeAll+0x128>)
 801821e:	441a      	add	r2, r3
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	3304      	adds	r3, #4
 8018224:	4619      	mov	r1, r3
 8018226:	4610      	mov	r0, r2
 8018228:	f7fe ff1f 	bl	801706a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018230:	4b23      	ldr	r3, [pc, #140]	; (80182c0 <xTaskResumeAll+0x12c>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018236:	429a      	cmp	r2, r3
 8018238:	d302      	bcc.n	8018240 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801823a:	4b22      	ldr	r3, [pc, #136]	; (80182c4 <xTaskResumeAll+0x130>)
 801823c:	2201      	movs	r2, #1
 801823e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018240:	4b1c      	ldr	r3, [pc, #112]	; (80182b4 <xTaskResumeAll+0x120>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d1cb      	bne.n	80181e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d001      	beq.n	8018252 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801824e:	f000 fb55 	bl	80188fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018252:	4b1d      	ldr	r3, [pc, #116]	; (80182c8 <xTaskResumeAll+0x134>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d010      	beq.n	8018280 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801825e:	f000 f847 	bl	80182f0 <xTaskIncrementTick>
 8018262:	4603      	mov	r3, r0
 8018264:	2b00      	cmp	r3, #0
 8018266:	d002      	beq.n	801826e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018268:	4b16      	ldr	r3, [pc, #88]	; (80182c4 <xTaskResumeAll+0x130>)
 801826a:	2201      	movs	r2, #1
 801826c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	3b01      	subs	r3, #1
 8018272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d1f1      	bne.n	801825e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801827a:	4b13      	ldr	r3, [pc, #76]	; (80182c8 <xTaskResumeAll+0x134>)
 801827c:	2200      	movs	r2, #0
 801827e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018280:	4b10      	ldr	r3, [pc, #64]	; (80182c4 <xTaskResumeAll+0x130>)
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d009      	beq.n	801829c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018288:	2301      	movs	r3, #1
 801828a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801828c:	4b0f      	ldr	r3, [pc, #60]	; (80182cc <xTaskResumeAll+0x138>)
 801828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018292:	601a      	str	r2, [r3, #0]
 8018294:	f3bf 8f4f 	dsb	sy
 8018298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801829c:	f001 f8da 	bl	8019454 <vPortExitCritical>

	return xAlreadyYielded;
 80182a0:	68bb      	ldr	r3, [r7, #8]
}
 80182a2:	4618      	mov	r0, r3
 80182a4:	3710      	adds	r7, #16
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}
 80182aa:	bf00      	nop
 80182ac:	20001cc0 	.word	0x20001cc0
 80182b0:	20001c98 	.word	0x20001c98
 80182b4:	20001c58 	.word	0x20001c58
 80182b8:	20001ca0 	.word	0x20001ca0
 80182bc:	200017c8 	.word	0x200017c8
 80182c0:	200017c4 	.word	0x200017c4
 80182c4:	20001cac 	.word	0x20001cac
 80182c8:	20001ca8 	.word	0x20001ca8
 80182cc:	e000ed04 	.word	0xe000ed04

080182d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80182d0:	b480      	push	{r7}
 80182d2:	b083      	sub	sp, #12
 80182d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80182d6:	4b05      	ldr	r3, [pc, #20]	; (80182ec <xTaskGetTickCount+0x1c>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80182dc:	687b      	ldr	r3, [r7, #4]
}
 80182de:	4618      	mov	r0, r3
 80182e0:	370c      	adds	r7, #12
 80182e2:	46bd      	mov	sp, r7
 80182e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e8:	4770      	bx	lr
 80182ea:	bf00      	nop
 80182ec:	20001c9c 	.word	0x20001c9c

080182f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b086      	sub	sp, #24
 80182f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80182f6:	2300      	movs	r3, #0
 80182f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80182fa:	4b4f      	ldr	r3, [pc, #316]	; (8018438 <xTaskIncrementTick+0x148>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	f040 808f 	bne.w	8018422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018304:	4b4d      	ldr	r3, [pc, #308]	; (801843c <xTaskIncrementTick+0x14c>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	3301      	adds	r3, #1
 801830a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801830c:	4a4b      	ldr	r2, [pc, #300]	; (801843c <xTaskIncrementTick+0x14c>)
 801830e:	693b      	ldr	r3, [r7, #16]
 8018310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018312:	693b      	ldr	r3, [r7, #16]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d120      	bne.n	801835a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018318:	4b49      	ldr	r3, [pc, #292]	; (8018440 <xTaskIncrementTick+0x150>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d00a      	beq.n	8018338 <xTaskIncrementTick+0x48>
	__asm volatile
 8018322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018326:	f383 8811 	msr	BASEPRI, r3
 801832a:	f3bf 8f6f 	isb	sy
 801832e:	f3bf 8f4f 	dsb	sy
 8018332:	603b      	str	r3, [r7, #0]
}
 8018334:	bf00      	nop
 8018336:	e7fe      	b.n	8018336 <xTaskIncrementTick+0x46>
 8018338:	4b41      	ldr	r3, [pc, #260]	; (8018440 <xTaskIncrementTick+0x150>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	60fb      	str	r3, [r7, #12]
 801833e:	4b41      	ldr	r3, [pc, #260]	; (8018444 <xTaskIncrementTick+0x154>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	4a3f      	ldr	r2, [pc, #252]	; (8018440 <xTaskIncrementTick+0x150>)
 8018344:	6013      	str	r3, [r2, #0]
 8018346:	4a3f      	ldr	r2, [pc, #252]	; (8018444 <xTaskIncrementTick+0x154>)
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	6013      	str	r3, [r2, #0]
 801834c:	4b3e      	ldr	r3, [pc, #248]	; (8018448 <xTaskIncrementTick+0x158>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	3301      	adds	r3, #1
 8018352:	4a3d      	ldr	r2, [pc, #244]	; (8018448 <xTaskIncrementTick+0x158>)
 8018354:	6013      	str	r3, [r2, #0]
 8018356:	f000 fad1 	bl	80188fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801835a:	4b3c      	ldr	r3, [pc, #240]	; (801844c <xTaskIncrementTick+0x15c>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	693a      	ldr	r2, [r7, #16]
 8018360:	429a      	cmp	r2, r3
 8018362:	d349      	bcc.n	80183f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018364:	4b36      	ldr	r3, [pc, #216]	; (8018440 <xTaskIncrementTick+0x150>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d104      	bne.n	8018378 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801836e:	4b37      	ldr	r3, [pc, #220]	; (801844c <xTaskIncrementTick+0x15c>)
 8018370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018374:	601a      	str	r2, [r3, #0]
					break;
 8018376:	e03f      	b.n	80183f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018378:	4b31      	ldr	r3, [pc, #196]	; (8018440 <xTaskIncrementTick+0x150>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	68db      	ldr	r3, [r3, #12]
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018388:	693a      	ldr	r2, [r7, #16]
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	429a      	cmp	r2, r3
 801838e:	d203      	bcs.n	8018398 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018390:	4a2e      	ldr	r2, [pc, #184]	; (801844c <xTaskIncrementTick+0x15c>)
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018396:	e02f      	b.n	80183f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	3304      	adds	r3, #4
 801839c:	4618      	mov	r0, r3
 801839e:	f7fe fec1 	bl	8017124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80183a2:	68bb      	ldr	r3, [r7, #8]
 80183a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d004      	beq.n	80183b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	3318      	adds	r3, #24
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fe feb8 	bl	8017124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b8:	4b25      	ldr	r3, [pc, #148]	; (8018450 <xTaskIncrementTick+0x160>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d903      	bls.n	80183c8 <xTaskIncrementTick+0xd8>
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183c4:	4a22      	ldr	r2, [pc, #136]	; (8018450 <xTaskIncrementTick+0x160>)
 80183c6:	6013      	str	r3, [r2, #0]
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183cc:	4613      	mov	r3, r2
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	4413      	add	r3, r2
 80183d2:	009b      	lsls	r3, r3, #2
 80183d4:	4a1f      	ldr	r2, [pc, #124]	; (8018454 <xTaskIncrementTick+0x164>)
 80183d6:	441a      	add	r2, r3
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	3304      	adds	r3, #4
 80183dc:	4619      	mov	r1, r3
 80183de:	4610      	mov	r0, r2
 80183e0:	f7fe fe43 	bl	801706a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e8:	4b1b      	ldr	r3, [pc, #108]	; (8018458 <xTaskIncrementTick+0x168>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d3b8      	bcc.n	8018364 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80183f2:	2301      	movs	r3, #1
 80183f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80183f6:	e7b5      	b.n	8018364 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80183f8:	4b17      	ldr	r3, [pc, #92]	; (8018458 <xTaskIncrementTick+0x168>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183fe:	4915      	ldr	r1, [pc, #84]	; (8018454 <xTaskIncrementTick+0x164>)
 8018400:	4613      	mov	r3, r2
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	4413      	add	r3, r2
 8018406:	009b      	lsls	r3, r3, #2
 8018408:	440b      	add	r3, r1
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2b01      	cmp	r3, #1
 801840e:	d901      	bls.n	8018414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018410:	2301      	movs	r3, #1
 8018412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018414:	4b11      	ldr	r3, [pc, #68]	; (801845c <xTaskIncrementTick+0x16c>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d007      	beq.n	801842c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801841c:	2301      	movs	r3, #1
 801841e:	617b      	str	r3, [r7, #20]
 8018420:	e004      	b.n	801842c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018422:	4b0f      	ldr	r3, [pc, #60]	; (8018460 <xTaskIncrementTick+0x170>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	3301      	adds	r3, #1
 8018428:	4a0d      	ldr	r2, [pc, #52]	; (8018460 <xTaskIncrementTick+0x170>)
 801842a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801842c:	697b      	ldr	r3, [r7, #20]
}
 801842e:	4618      	mov	r0, r3
 8018430:	3718      	adds	r7, #24
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	20001cc0 	.word	0x20001cc0
 801843c:	20001c9c 	.word	0x20001c9c
 8018440:	20001c50 	.word	0x20001c50
 8018444:	20001c54 	.word	0x20001c54
 8018448:	20001cb0 	.word	0x20001cb0
 801844c:	20001cb8 	.word	0x20001cb8
 8018450:	20001ca0 	.word	0x20001ca0
 8018454:	200017c8 	.word	0x200017c8
 8018458:	200017c4 	.word	0x200017c4
 801845c:	20001cac 	.word	0x20001cac
 8018460:	20001ca8 	.word	0x20001ca8

08018464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018464:	b480      	push	{r7}
 8018466:	b085      	sub	sp, #20
 8018468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801846a:	4b28      	ldr	r3, [pc, #160]	; (801850c <vTaskSwitchContext+0xa8>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d003      	beq.n	801847a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018472:	4b27      	ldr	r3, [pc, #156]	; (8018510 <vTaskSwitchContext+0xac>)
 8018474:	2201      	movs	r2, #1
 8018476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018478:	e041      	b.n	80184fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801847a:	4b25      	ldr	r3, [pc, #148]	; (8018510 <vTaskSwitchContext+0xac>)
 801847c:	2200      	movs	r2, #0
 801847e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018480:	4b24      	ldr	r3, [pc, #144]	; (8018514 <vTaskSwitchContext+0xb0>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	60fb      	str	r3, [r7, #12]
 8018486:	e010      	b.n	80184aa <vTaskSwitchContext+0x46>
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d10a      	bne.n	80184a4 <vTaskSwitchContext+0x40>
	__asm volatile
 801848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018492:	f383 8811 	msr	BASEPRI, r3
 8018496:	f3bf 8f6f 	isb	sy
 801849a:	f3bf 8f4f 	dsb	sy
 801849e:	607b      	str	r3, [r7, #4]
}
 80184a0:	bf00      	nop
 80184a2:	e7fe      	b.n	80184a2 <vTaskSwitchContext+0x3e>
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	3b01      	subs	r3, #1
 80184a8:	60fb      	str	r3, [r7, #12]
 80184aa:	491b      	ldr	r1, [pc, #108]	; (8018518 <vTaskSwitchContext+0xb4>)
 80184ac:	68fa      	ldr	r2, [r7, #12]
 80184ae:	4613      	mov	r3, r2
 80184b0:	009b      	lsls	r3, r3, #2
 80184b2:	4413      	add	r3, r2
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	440b      	add	r3, r1
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d0e4      	beq.n	8018488 <vTaskSwitchContext+0x24>
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	4613      	mov	r3, r2
 80184c2:	009b      	lsls	r3, r3, #2
 80184c4:	4413      	add	r3, r2
 80184c6:	009b      	lsls	r3, r3, #2
 80184c8:	4a13      	ldr	r2, [pc, #76]	; (8018518 <vTaskSwitchContext+0xb4>)
 80184ca:	4413      	add	r3, r2
 80184cc:	60bb      	str	r3, [r7, #8]
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	685a      	ldr	r2, [r3, #4]
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	605a      	str	r2, [r3, #4]
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	685a      	ldr	r2, [r3, #4]
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	3308      	adds	r3, #8
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d104      	bne.n	80184ee <vTaskSwitchContext+0x8a>
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	685a      	ldr	r2, [r3, #4]
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	605a      	str	r2, [r3, #4]
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	685b      	ldr	r3, [r3, #4]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	4a09      	ldr	r2, [pc, #36]	; (801851c <vTaskSwitchContext+0xb8>)
 80184f6:	6013      	str	r3, [r2, #0]
 80184f8:	4a06      	ldr	r2, [pc, #24]	; (8018514 <vTaskSwitchContext+0xb0>)
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	6013      	str	r3, [r2, #0]
}
 80184fe:	bf00      	nop
 8018500:	3714      	adds	r7, #20
 8018502:	46bd      	mov	sp, r7
 8018504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018508:	4770      	bx	lr
 801850a:	bf00      	nop
 801850c:	20001cc0 	.word	0x20001cc0
 8018510:	20001cac 	.word	0x20001cac
 8018514:	20001ca0 	.word	0x20001ca0
 8018518:	200017c8 	.word	0x200017c8
 801851c:	200017c4 	.word	0x200017c4

08018520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d10a      	bne.n	8018546 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018534:	f383 8811 	msr	BASEPRI, r3
 8018538:	f3bf 8f6f 	isb	sy
 801853c:	f3bf 8f4f 	dsb	sy
 8018540:	60fb      	str	r3, [r7, #12]
}
 8018542:	bf00      	nop
 8018544:	e7fe      	b.n	8018544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018546:	4b07      	ldr	r3, [pc, #28]	; (8018564 <vTaskPlaceOnEventList+0x44>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	3318      	adds	r3, #24
 801854c:	4619      	mov	r1, r3
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f7fe fdaf 	bl	80170b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018554:	2101      	movs	r1, #1
 8018556:	6838      	ldr	r0, [r7, #0]
 8018558:	f000 fa7c 	bl	8018a54 <prvAddCurrentTaskToDelayedList>
}
 801855c:	bf00      	nop
 801855e:	3710      	adds	r7, #16
 8018560:	46bd      	mov	sp, r7
 8018562:	bd80      	pop	{r7, pc}
 8018564:	200017c4 	.word	0x200017c4

08018568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018568:	b580      	push	{r7, lr}
 801856a:	b086      	sub	sp, #24
 801856c:	af00      	add	r7, sp, #0
 801856e:	60f8      	str	r0, [r7, #12]
 8018570:	60b9      	str	r1, [r7, #8]
 8018572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d10a      	bne.n	8018590 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801857e:	f383 8811 	msr	BASEPRI, r3
 8018582:	f3bf 8f6f 	isb	sy
 8018586:	f3bf 8f4f 	dsb	sy
 801858a:	617b      	str	r3, [r7, #20]
}
 801858c:	bf00      	nop
 801858e:	e7fe      	b.n	801858e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018590:	4b0a      	ldr	r3, [pc, #40]	; (80185bc <vTaskPlaceOnEventListRestricted+0x54>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	3318      	adds	r3, #24
 8018596:	4619      	mov	r1, r3
 8018598:	68f8      	ldr	r0, [r7, #12]
 801859a:	f7fe fd66 	bl	801706a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d002      	beq.n	80185aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80185a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80185aa:	6879      	ldr	r1, [r7, #4]
 80185ac:	68b8      	ldr	r0, [r7, #8]
 80185ae:	f000 fa51 	bl	8018a54 <prvAddCurrentTaskToDelayedList>
	}
 80185b2:	bf00      	nop
 80185b4:	3718      	adds	r7, #24
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
 80185ba:	bf00      	nop
 80185bc:	200017c4 	.word	0x200017c4

080185c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b086      	sub	sp, #24
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	68db      	ldr	r3, [r3, #12]
 80185cc:	68db      	ldr	r3, [r3, #12]
 80185ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80185d0:	693b      	ldr	r3, [r7, #16]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d10a      	bne.n	80185ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80185d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185da:	f383 8811 	msr	BASEPRI, r3
 80185de:	f3bf 8f6f 	isb	sy
 80185e2:	f3bf 8f4f 	dsb	sy
 80185e6:	60fb      	str	r3, [r7, #12]
}
 80185e8:	bf00      	nop
 80185ea:	e7fe      	b.n	80185ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	3318      	adds	r3, #24
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7fe fd97 	bl	8017124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185f6:	4b1e      	ldr	r3, [pc, #120]	; (8018670 <xTaskRemoveFromEventList+0xb0>)
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d11d      	bne.n	801863a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	3304      	adds	r3, #4
 8018602:	4618      	mov	r0, r3
 8018604:	f7fe fd8e 	bl	8017124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018608:	693b      	ldr	r3, [r7, #16]
 801860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801860c:	4b19      	ldr	r3, [pc, #100]	; (8018674 <xTaskRemoveFromEventList+0xb4>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	429a      	cmp	r2, r3
 8018612:	d903      	bls.n	801861c <xTaskRemoveFromEventList+0x5c>
 8018614:	693b      	ldr	r3, [r7, #16]
 8018616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018618:	4a16      	ldr	r2, [pc, #88]	; (8018674 <xTaskRemoveFromEventList+0xb4>)
 801861a:	6013      	str	r3, [r2, #0]
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018620:	4613      	mov	r3, r2
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	4413      	add	r3, r2
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	4a13      	ldr	r2, [pc, #76]	; (8018678 <xTaskRemoveFromEventList+0xb8>)
 801862a:	441a      	add	r2, r3
 801862c:	693b      	ldr	r3, [r7, #16]
 801862e:	3304      	adds	r3, #4
 8018630:	4619      	mov	r1, r3
 8018632:	4610      	mov	r0, r2
 8018634:	f7fe fd19 	bl	801706a <vListInsertEnd>
 8018638:	e005      	b.n	8018646 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	3318      	adds	r3, #24
 801863e:	4619      	mov	r1, r3
 8018640:	480e      	ldr	r0, [pc, #56]	; (801867c <xTaskRemoveFromEventList+0xbc>)
 8018642:	f7fe fd12 	bl	801706a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801864a:	4b0d      	ldr	r3, [pc, #52]	; (8018680 <xTaskRemoveFromEventList+0xc0>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018650:	429a      	cmp	r2, r3
 8018652:	d905      	bls.n	8018660 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018654:	2301      	movs	r3, #1
 8018656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018658:	4b0a      	ldr	r3, [pc, #40]	; (8018684 <xTaskRemoveFromEventList+0xc4>)
 801865a:	2201      	movs	r2, #1
 801865c:	601a      	str	r2, [r3, #0]
 801865e:	e001      	b.n	8018664 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018660:	2300      	movs	r3, #0
 8018662:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018664:	697b      	ldr	r3, [r7, #20]
}
 8018666:	4618      	mov	r0, r3
 8018668:	3718      	adds	r7, #24
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}
 801866e:	bf00      	nop
 8018670:	20001cc0 	.word	0x20001cc0
 8018674:	20001ca0 	.word	0x20001ca0
 8018678:	200017c8 	.word	0x200017c8
 801867c:	20001c58 	.word	0x20001c58
 8018680:	200017c4 	.word	0x200017c4
 8018684:	20001cac 	.word	0x20001cac

08018688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018688:	b480      	push	{r7}
 801868a:	b083      	sub	sp, #12
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018690:	4b06      	ldr	r3, [pc, #24]	; (80186ac <vTaskInternalSetTimeOutState+0x24>)
 8018692:	681a      	ldr	r2, [r3, #0]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018698:	4b05      	ldr	r3, [pc, #20]	; (80186b0 <vTaskInternalSetTimeOutState+0x28>)
 801869a:	681a      	ldr	r2, [r3, #0]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	605a      	str	r2, [r3, #4]
}
 80186a0:	bf00      	nop
 80186a2:	370c      	adds	r7, #12
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr
 80186ac:	20001cb0 	.word	0x20001cb0
 80186b0:	20001c9c 	.word	0x20001c9c

080186b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b088      	sub	sp, #32
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d10a      	bne.n	80186da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80186c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c8:	f383 8811 	msr	BASEPRI, r3
 80186cc:	f3bf 8f6f 	isb	sy
 80186d0:	f3bf 8f4f 	dsb	sy
 80186d4:	613b      	str	r3, [r7, #16]
}
 80186d6:	bf00      	nop
 80186d8:	e7fe      	b.n	80186d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d10a      	bne.n	80186f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80186e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e4:	f383 8811 	msr	BASEPRI, r3
 80186e8:	f3bf 8f6f 	isb	sy
 80186ec:	f3bf 8f4f 	dsb	sy
 80186f0:	60fb      	str	r3, [r7, #12]
}
 80186f2:	bf00      	nop
 80186f4:	e7fe      	b.n	80186f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80186f6:	f000 fe7d 	bl	80193f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80186fa:	4b1d      	ldr	r3, [pc, #116]	; (8018770 <xTaskCheckForTimeOut+0xbc>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	685b      	ldr	r3, [r3, #4]
 8018704:	69ba      	ldr	r2, [r7, #24]
 8018706:	1ad3      	subs	r3, r2, r3
 8018708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018712:	d102      	bne.n	801871a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018714:	2300      	movs	r3, #0
 8018716:	61fb      	str	r3, [r7, #28]
 8018718:	e023      	b.n	8018762 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681a      	ldr	r2, [r3, #0]
 801871e:	4b15      	ldr	r3, [pc, #84]	; (8018774 <xTaskCheckForTimeOut+0xc0>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	429a      	cmp	r2, r3
 8018724:	d007      	beq.n	8018736 <xTaskCheckForTimeOut+0x82>
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	69ba      	ldr	r2, [r7, #24]
 801872c:	429a      	cmp	r2, r3
 801872e:	d302      	bcc.n	8018736 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018730:	2301      	movs	r3, #1
 8018732:	61fb      	str	r3, [r7, #28]
 8018734:	e015      	b.n	8018762 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018736:	683b      	ldr	r3, [r7, #0]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	697a      	ldr	r2, [r7, #20]
 801873c:	429a      	cmp	r2, r3
 801873e:	d20b      	bcs.n	8018758 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	681a      	ldr	r2, [r3, #0]
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	1ad2      	subs	r2, r2, r3
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f7ff ff9b 	bl	8018688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018752:	2300      	movs	r3, #0
 8018754:	61fb      	str	r3, [r7, #28]
 8018756:	e004      	b.n	8018762 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2200      	movs	r2, #0
 801875c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801875e:	2301      	movs	r3, #1
 8018760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018762:	f000 fe77 	bl	8019454 <vPortExitCritical>

	return xReturn;
 8018766:	69fb      	ldr	r3, [r7, #28]
}
 8018768:	4618      	mov	r0, r3
 801876a:	3720      	adds	r7, #32
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}
 8018770:	20001c9c 	.word	0x20001c9c
 8018774:	20001cb0 	.word	0x20001cb0

08018778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018778:	b480      	push	{r7}
 801877a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801877c:	4b03      	ldr	r3, [pc, #12]	; (801878c <vTaskMissedYield+0x14>)
 801877e:	2201      	movs	r2, #1
 8018780:	601a      	str	r2, [r3, #0]
}
 8018782:	bf00      	nop
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr
 801878c:	20001cac 	.word	0x20001cac

08018790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018798:	f000 f852 	bl	8018840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801879c:	4b06      	ldr	r3, [pc, #24]	; (80187b8 <prvIdleTask+0x28>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d9f9      	bls.n	8018798 <prvIdleTask+0x8>
			{
				taskYIELD();
 80187a4:	4b05      	ldr	r3, [pc, #20]	; (80187bc <prvIdleTask+0x2c>)
 80187a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187aa:	601a      	str	r2, [r3, #0]
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80187b4:	e7f0      	b.n	8018798 <prvIdleTask+0x8>
 80187b6:	bf00      	nop
 80187b8:	200017c8 	.word	0x200017c8
 80187bc:	e000ed04 	.word	0xe000ed04

080187c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b082      	sub	sp, #8
 80187c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187c6:	2300      	movs	r3, #0
 80187c8:	607b      	str	r3, [r7, #4]
 80187ca:	e00c      	b.n	80187e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80187cc:	687a      	ldr	r2, [r7, #4]
 80187ce:	4613      	mov	r3, r2
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	4413      	add	r3, r2
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	4a12      	ldr	r2, [pc, #72]	; (8018820 <prvInitialiseTaskLists+0x60>)
 80187d8:	4413      	add	r3, r2
 80187da:	4618      	mov	r0, r3
 80187dc:	f7fe fc18 	bl	8017010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	3301      	adds	r3, #1
 80187e4:	607b      	str	r3, [r7, #4]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b37      	cmp	r3, #55	; 0x37
 80187ea:	d9ef      	bls.n	80187cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80187ec:	480d      	ldr	r0, [pc, #52]	; (8018824 <prvInitialiseTaskLists+0x64>)
 80187ee:	f7fe fc0f 	bl	8017010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80187f2:	480d      	ldr	r0, [pc, #52]	; (8018828 <prvInitialiseTaskLists+0x68>)
 80187f4:	f7fe fc0c 	bl	8017010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80187f8:	480c      	ldr	r0, [pc, #48]	; (801882c <prvInitialiseTaskLists+0x6c>)
 80187fa:	f7fe fc09 	bl	8017010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80187fe:	480c      	ldr	r0, [pc, #48]	; (8018830 <prvInitialiseTaskLists+0x70>)
 8018800:	f7fe fc06 	bl	8017010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018804:	480b      	ldr	r0, [pc, #44]	; (8018834 <prvInitialiseTaskLists+0x74>)
 8018806:	f7fe fc03 	bl	8017010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801880a:	4b0b      	ldr	r3, [pc, #44]	; (8018838 <prvInitialiseTaskLists+0x78>)
 801880c:	4a05      	ldr	r2, [pc, #20]	; (8018824 <prvInitialiseTaskLists+0x64>)
 801880e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018810:	4b0a      	ldr	r3, [pc, #40]	; (801883c <prvInitialiseTaskLists+0x7c>)
 8018812:	4a05      	ldr	r2, [pc, #20]	; (8018828 <prvInitialiseTaskLists+0x68>)
 8018814:	601a      	str	r2, [r3, #0]
}
 8018816:	bf00      	nop
 8018818:	3708      	adds	r7, #8
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	200017c8 	.word	0x200017c8
 8018824:	20001c28 	.word	0x20001c28
 8018828:	20001c3c 	.word	0x20001c3c
 801882c:	20001c58 	.word	0x20001c58
 8018830:	20001c6c 	.word	0x20001c6c
 8018834:	20001c84 	.word	0x20001c84
 8018838:	20001c50 	.word	0x20001c50
 801883c:	20001c54 	.word	0x20001c54

08018840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018846:	e019      	b.n	801887c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018848:	f000 fdd4 	bl	80193f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801884c:	4b10      	ldr	r3, [pc, #64]	; (8018890 <prvCheckTasksWaitingTermination+0x50>)
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	68db      	ldr	r3, [r3, #12]
 8018852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	3304      	adds	r3, #4
 8018858:	4618      	mov	r0, r3
 801885a:	f7fe fc63 	bl	8017124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801885e:	4b0d      	ldr	r3, [pc, #52]	; (8018894 <prvCheckTasksWaitingTermination+0x54>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	3b01      	subs	r3, #1
 8018864:	4a0b      	ldr	r2, [pc, #44]	; (8018894 <prvCheckTasksWaitingTermination+0x54>)
 8018866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018868:	4b0b      	ldr	r3, [pc, #44]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	3b01      	subs	r3, #1
 801886e:	4a0a      	ldr	r2, [pc, #40]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 8018870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018872:	f000 fdef 	bl	8019454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f000 f810 	bl	801889c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801887c:	4b06      	ldr	r3, [pc, #24]	; (8018898 <prvCheckTasksWaitingTermination+0x58>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d1e1      	bne.n	8018848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018884:	bf00      	nop
 8018886:	bf00      	nop
 8018888:	3708      	adds	r7, #8
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	20001c6c 	.word	0x20001c6c
 8018894:	20001c98 	.word	0x20001c98
 8018898:	20001c80 	.word	0x20001c80

0801889c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801889c:	b580      	push	{r7, lr}
 801889e:	b084      	sub	sp, #16
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d108      	bne.n	80188c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188b2:	4618      	mov	r0, r3
 80188b4:	f000 ff8c 	bl	80197d0 <vPortFree>
				vPortFree( pxTCB );
 80188b8:	6878      	ldr	r0, [r7, #4]
 80188ba:	f000 ff89 	bl	80197d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80188be:	e018      	b.n	80188f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80188c6:	2b01      	cmp	r3, #1
 80188c8:	d103      	bne.n	80188d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f000 ff80 	bl	80197d0 <vPortFree>
	}
 80188d0:	e00f      	b.n	80188f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80188d8:	2b02      	cmp	r3, #2
 80188da:	d00a      	beq.n	80188f2 <prvDeleteTCB+0x56>
	__asm volatile
 80188dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e0:	f383 8811 	msr	BASEPRI, r3
 80188e4:	f3bf 8f6f 	isb	sy
 80188e8:	f3bf 8f4f 	dsb	sy
 80188ec:	60fb      	str	r3, [r7, #12]
}
 80188ee:	bf00      	nop
 80188f0:	e7fe      	b.n	80188f0 <prvDeleteTCB+0x54>
	}
 80188f2:	bf00      	nop
 80188f4:	3710      	adds	r7, #16
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
	...

080188fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80188fc:	b480      	push	{r7}
 80188fe:	b083      	sub	sp, #12
 8018900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018902:	4b0c      	ldr	r3, [pc, #48]	; (8018934 <prvResetNextTaskUnblockTime+0x38>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d104      	bne.n	8018916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801890c:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <prvResetNextTaskUnblockTime+0x3c>)
 801890e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018914:	e008      	b.n	8018928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018916:	4b07      	ldr	r3, [pc, #28]	; (8018934 <prvResetNextTaskUnblockTime+0x38>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	68db      	ldr	r3, [r3, #12]
 801891e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	685b      	ldr	r3, [r3, #4]
 8018924:	4a04      	ldr	r2, [pc, #16]	; (8018938 <prvResetNextTaskUnblockTime+0x3c>)
 8018926:	6013      	str	r3, [r2, #0]
}
 8018928:	bf00      	nop
 801892a:	370c      	adds	r7, #12
 801892c:	46bd      	mov	sp, r7
 801892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018932:	4770      	bx	lr
 8018934:	20001c50 	.word	0x20001c50
 8018938:	20001cb8 	.word	0x20001cb8

0801893c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801893c:	b480      	push	{r7}
 801893e:	b083      	sub	sp, #12
 8018940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018942:	4b0b      	ldr	r3, [pc, #44]	; (8018970 <xTaskGetSchedulerState+0x34>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d102      	bne.n	8018950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801894a:	2301      	movs	r3, #1
 801894c:	607b      	str	r3, [r7, #4]
 801894e:	e008      	b.n	8018962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018950:	4b08      	ldr	r3, [pc, #32]	; (8018974 <xTaskGetSchedulerState+0x38>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d102      	bne.n	801895e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018958:	2302      	movs	r3, #2
 801895a:	607b      	str	r3, [r7, #4]
 801895c:	e001      	b.n	8018962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801895e:	2300      	movs	r3, #0
 8018960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018962:	687b      	ldr	r3, [r7, #4]
	}
 8018964:	4618      	mov	r0, r3
 8018966:	370c      	adds	r7, #12
 8018968:	46bd      	mov	sp, r7
 801896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896e:	4770      	bx	lr
 8018970:	20001ca4 	.word	0x20001ca4
 8018974:	20001cc0 	.word	0x20001cc0

08018978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018978:	b580      	push	{r7, lr}
 801897a:	b086      	sub	sp, #24
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018984:	2300      	movs	r3, #0
 8018986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d056      	beq.n	8018a3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801898e:	4b2e      	ldr	r3, [pc, #184]	; (8018a48 <xTaskPriorityDisinherit+0xd0>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	693a      	ldr	r2, [r7, #16]
 8018994:	429a      	cmp	r2, r3
 8018996:	d00a      	beq.n	80189ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801899c:	f383 8811 	msr	BASEPRI, r3
 80189a0:	f3bf 8f6f 	isb	sy
 80189a4:	f3bf 8f4f 	dsb	sy
 80189a8:	60fb      	str	r3, [r7, #12]
}
 80189aa:	bf00      	nop
 80189ac:	e7fe      	b.n	80189ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d10a      	bne.n	80189cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80189b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ba:	f383 8811 	msr	BASEPRI, r3
 80189be:	f3bf 8f6f 	isb	sy
 80189c2:	f3bf 8f4f 	dsb	sy
 80189c6:	60bb      	str	r3, [r7, #8]
}
 80189c8:	bf00      	nop
 80189ca:	e7fe      	b.n	80189ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80189cc:	693b      	ldr	r3, [r7, #16]
 80189ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189d0:	1e5a      	subs	r2, r3, #1
 80189d2:	693b      	ldr	r3, [r7, #16]
 80189d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189de:	429a      	cmp	r2, r3
 80189e0:	d02c      	beq.n	8018a3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80189e2:	693b      	ldr	r3, [r7, #16]
 80189e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d128      	bne.n	8018a3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	3304      	adds	r3, #4
 80189ee:	4618      	mov	r0, r3
 80189f0:	f7fe fb98 	bl	8017124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80189f8:	693b      	ldr	r3, [r7, #16]
 80189fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189fc:	693b      	ldr	r3, [r7, #16]
 80189fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a04:	693b      	ldr	r3, [r7, #16]
 8018a06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a08:	693b      	ldr	r3, [r7, #16]
 8018a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a0c:	4b0f      	ldr	r3, [pc, #60]	; (8018a4c <xTaskPriorityDisinherit+0xd4>)
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d903      	bls.n	8018a1c <xTaskPriorityDisinherit+0xa4>
 8018a14:	693b      	ldr	r3, [r7, #16]
 8018a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a18:	4a0c      	ldr	r2, [pc, #48]	; (8018a4c <xTaskPriorityDisinherit+0xd4>)
 8018a1a:	6013      	str	r3, [r2, #0]
 8018a1c:	693b      	ldr	r3, [r7, #16]
 8018a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a20:	4613      	mov	r3, r2
 8018a22:	009b      	lsls	r3, r3, #2
 8018a24:	4413      	add	r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	4a09      	ldr	r2, [pc, #36]	; (8018a50 <xTaskPriorityDisinherit+0xd8>)
 8018a2a:	441a      	add	r2, r3
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	3304      	adds	r3, #4
 8018a30:	4619      	mov	r1, r3
 8018a32:	4610      	mov	r0, r2
 8018a34:	f7fe fb19 	bl	801706a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a38:	2301      	movs	r3, #1
 8018a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a3c:	697b      	ldr	r3, [r7, #20]
	}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}
 8018a46:	bf00      	nop
 8018a48:	200017c4 	.word	0x200017c4
 8018a4c:	20001ca0 	.word	0x20001ca0
 8018a50:	200017c8 	.word	0x200017c8

08018a54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b084      	sub	sp, #16
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018a5e:	4b21      	ldr	r3, [pc, #132]	; (8018ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a64:	4b20      	ldr	r3, [pc, #128]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	3304      	adds	r3, #4
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7fe fb5a 	bl	8017124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a76:	d10a      	bne.n	8018a8e <prvAddCurrentTaskToDelayedList+0x3a>
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d007      	beq.n	8018a8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a7e:	4b1a      	ldr	r3, [pc, #104]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	3304      	adds	r3, #4
 8018a84:	4619      	mov	r1, r3
 8018a86:	4819      	ldr	r0, [pc, #100]	; (8018aec <prvAddCurrentTaskToDelayedList+0x98>)
 8018a88:	f7fe faef 	bl	801706a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018a8c:	e026      	b.n	8018adc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	4413      	add	r3, r2
 8018a94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018a96:	4b14      	ldr	r3, [pc, #80]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	68ba      	ldr	r2, [r7, #8]
 8018a9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018a9e:	68ba      	ldr	r2, [r7, #8]
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d209      	bcs.n	8018aba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018aa6:	4b12      	ldr	r3, [pc, #72]	; (8018af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018aa8:	681a      	ldr	r2, [r3, #0]
 8018aaa:	4b0f      	ldr	r3, [pc, #60]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	3304      	adds	r3, #4
 8018ab0:	4619      	mov	r1, r3
 8018ab2:	4610      	mov	r0, r2
 8018ab4:	f7fe fafd 	bl	80170b2 <vListInsert>
}
 8018ab8:	e010      	b.n	8018adc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018aba:	4b0e      	ldr	r3, [pc, #56]	; (8018af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018abc:	681a      	ldr	r2, [r3, #0]
 8018abe:	4b0a      	ldr	r3, [pc, #40]	; (8018ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	3304      	adds	r3, #4
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4610      	mov	r0, r2
 8018ac8:	f7fe faf3 	bl	80170b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018acc:	4b0a      	ldr	r3, [pc, #40]	; (8018af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	68ba      	ldr	r2, [r7, #8]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d202      	bcs.n	8018adc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018ad6:	4a08      	ldr	r2, [pc, #32]	; (8018af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	6013      	str	r3, [r2, #0]
}
 8018adc:	bf00      	nop
 8018ade:	3710      	adds	r7, #16
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	20001c9c 	.word	0x20001c9c
 8018ae8:	200017c4 	.word	0x200017c4
 8018aec:	20001c84 	.word	0x20001c84
 8018af0:	20001c54 	.word	0x20001c54
 8018af4:	20001c50 	.word	0x20001c50
 8018af8:	20001cb8 	.word	0x20001cb8

08018afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b08a      	sub	sp, #40	; 0x28
 8018b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018b02:	2300      	movs	r3, #0
 8018b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018b06:	f000 fb07 	bl	8019118 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018b0a:	4b1c      	ldr	r3, [pc, #112]	; (8018b7c <xTimerCreateTimerTask+0x80>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d021      	beq.n	8018b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018b12:	2300      	movs	r3, #0
 8018b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018b16:	2300      	movs	r3, #0
 8018b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018b1a:	1d3a      	adds	r2, r7, #4
 8018b1c:	f107 0108 	add.w	r1, r7, #8
 8018b20:	f107 030c 	add.w	r3, r7, #12
 8018b24:	4618      	mov	r0, r3
 8018b26:	f7fe fa59 	bl	8016fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018b2a:	6879      	ldr	r1, [r7, #4]
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	68fa      	ldr	r2, [r7, #12]
 8018b30:	9202      	str	r2, [sp, #8]
 8018b32:	9301      	str	r3, [sp, #4]
 8018b34:	2302      	movs	r3, #2
 8018b36:	9300      	str	r3, [sp, #0]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	460a      	mov	r2, r1
 8018b3c:	4910      	ldr	r1, [pc, #64]	; (8018b80 <xTimerCreateTimerTask+0x84>)
 8018b3e:	4811      	ldr	r0, [pc, #68]	; (8018b84 <xTimerCreateTimerTask+0x88>)
 8018b40:	f7ff f806 	bl	8017b50 <xTaskCreateStatic>
 8018b44:	4603      	mov	r3, r0
 8018b46:	4a10      	ldr	r2, [pc, #64]	; (8018b88 <xTimerCreateTimerTask+0x8c>)
 8018b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018b4a:	4b0f      	ldr	r3, [pc, #60]	; (8018b88 <xTimerCreateTimerTask+0x8c>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d001      	beq.n	8018b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018b52:	2301      	movs	r3, #1
 8018b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018b56:	697b      	ldr	r3, [r7, #20]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d10a      	bne.n	8018b72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b60:	f383 8811 	msr	BASEPRI, r3
 8018b64:	f3bf 8f6f 	isb	sy
 8018b68:	f3bf 8f4f 	dsb	sy
 8018b6c:	613b      	str	r3, [r7, #16]
}
 8018b6e:	bf00      	nop
 8018b70:	e7fe      	b.n	8018b70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018b72:	697b      	ldr	r3, [r7, #20]
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	3718      	adds	r7, #24
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	20001cf4 	.word	0x20001cf4
 8018b80:	08020074 	.word	0x08020074
 8018b84:	08018cc1 	.word	0x08018cc1
 8018b88:	20001cf8 	.word	0x20001cf8

08018b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b08a      	sub	sp, #40	; 0x28
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	607a      	str	r2, [r7, #4]
 8018b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d10a      	bne.n	8018bba <xTimerGenericCommand+0x2e>
	__asm volatile
 8018ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba8:	f383 8811 	msr	BASEPRI, r3
 8018bac:	f3bf 8f6f 	isb	sy
 8018bb0:	f3bf 8f4f 	dsb	sy
 8018bb4:	623b      	str	r3, [r7, #32]
}
 8018bb6:	bf00      	nop
 8018bb8:	e7fe      	b.n	8018bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018bba:	4b1a      	ldr	r3, [pc, #104]	; (8018c24 <xTimerGenericCommand+0x98>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d02a      	beq.n	8018c18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	2b05      	cmp	r3, #5
 8018bd2:	dc18      	bgt.n	8018c06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018bd4:	f7ff feb2 	bl	801893c <xTaskGetSchedulerState>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b02      	cmp	r3, #2
 8018bdc:	d109      	bne.n	8018bf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018bde:	4b11      	ldr	r3, [pc, #68]	; (8018c24 <xTimerGenericCommand+0x98>)
 8018be0:	6818      	ldr	r0, [r3, #0]
 8018be2:	f107 0110 	add.w	r1, r7, #16
 8018be6:	2300      	movs	r3, #0
 8018be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bea:	f7fe fbc9 	bl	8017380 <xQueueGenericSend>
 8018bee:	6278      	str	r0, [r7, #36]	; 0x24
 8018bf0:	e012      	b.n	8018c18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018bf2:	4b0c      	ldr	r3, [pc, #48]	; (8018c24 <xTimerGenericCommand+0x98>)
 8018bf4:	6818      	ldr	r0, [r3, #0]
 8018bf6:	f107 0110 	add.w	r1, r7, #16
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	f7fe fbbf 	bl	8017380 <xQueueGenericSend>
 8018c02:	6278      	str	r0, [r7, #36]	; 0x24
 8018c04:	e008      	b.n	8018c18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018c06:	4b07      	ldr	r3, [pc, #28]	; (8018c24 <xTimerGenericCommand+0x98>)
 8018c08:	6818      	ldr	r0, [r3, #0]
 8018c0a:	f107 0110 	add.w	r1, r7, #16
 8018c0e:	2300      	movs	r3, #0
 8018c10:	683a      	ldr	r2, [r7, #0]
 8018c12:	f7fe fcb3 	bl	801757c <xQueueGenericSendFromISR>
 8018c16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3728      	adds	r7, #40	; 0x28
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	20001cf4 	.word	0x20001cf4

08018c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b088      	sub	sp, #32
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c32:	4b22      	ldr	r3, [pc, #136]	; (8018cbc <prvProcessExpiredTimer+0x94>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	68db      	ldr	r3, [r3, #12]
 8018c38:	68db      	ldr	r3, [r3, #12]
 8018c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	3304      	adds	r3, #4
 8018c40:	4618      	mov	r0, r3
 8018c42:	f7fe fa6f 	bl	8017124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c4c:	f003 0304 	and.w	r3, r3, #4
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d022      	beq.n	8018c9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018c54:	697b      	ldr	r3, [r7, #20]
 8018c56:	699a      	ldr	r2, [r3, #24]
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	18d1      	adds	r1, r2, r3
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	683a      	ldr	r2, [r7, #0]
 8018c60:	6978      	ldr	r0, [r7, #20]
 8018c62:	f000 f8d1 	bl	8018e08 <prvInsertTimerInActiveList>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d01f      	beq.n	8018cac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	9300      	str	r3, [sp, #0]
 8018c70:	2300      	movs	r3, #0
 8018c72:	687a      	ldr	r2, [r7, #4]
 8018c74:	2100      	movs	r1, #0
 8018c76:	6978      	ldr	r0, [r7, #20]
 8018c78:	f7ff ff88 	bl	8018b8c <xTimerGenericCommand>
 8018c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d113      	bne.n	8018cac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c88:	f383 8811 	msr	BASEPRI, r3
 8018c8c:	f3bf 8f6f 	isb	sy
 8018c90:	f3bf 8f4f 	dsb	sy
 8018c94:	60fb      	str	r3, [r7, #12]
}
 8018c96:	bf00      	nop
 8018c98:	e7fe      	b.n	8018c98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ca0:	f023 0301 	bic.w	r3, r3, #1
 8018ca4:	b2da      	uxtb	r2, r3
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	6a1b      	ldr	r3, [r3, #32]
 8018cb0:	6978      	ldr	r0, [r7, #20]
 8018cb2:	4798      	blx	r3
}
 8018cb4:	bf00      	nop
 8018cb6:	3718      	adds	r7, #24
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}
 8018cbc:	20001cec 	.word	0x20001cec

08018cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b084      	sub	sp, #16
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018cc8:	f107 0308 	add.w	r3, r7, #8
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f000 f857 	bl	8018d80 <prvGetNextExpireTime>
 8018cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	68f8      	ldr	r0, [r7, #12]
 8018cda:	f000 f803 	bl	8018ce4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018cde:	f000 f8d5 	bl	8018e8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018ce2:	e7f1      	b.n	8018cc8 <prvTimerTask+0x8>

08018ce4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018cee:	f7ff fa43 	bl	8018178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018cf2:	f107 0308 	add.w	r3, r7, #8
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f000 f866 	bl	8018dc8 <prvSampleTimeNow>
 8018cfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018cfe:	68bb      	ldr	r3, [r7, #8]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d130      	bne.n	8018d66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d10a      	bne.n	8018d20 <prvProcessTimerOrBlockTask+0x3c>
 8018d0a:	687a      	ldr	r2, [r7, #4]
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d806      	bhi.n	8018d20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018d12:	f7ff fa3f 	bl	8018194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018d16:	68f9      	ldr	r1, [r7, #12]
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f7ff ff85 	bl	8018c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018d1e:	e024      	b.n	8018d6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018d20:	683b      	ldr	r3, [r7, #0]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d008      	beq.n	8018d38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018d26:	4b13      	ldr	r3, [pc, #76]	; (8018d74 <prvProcessTimerOrBlockTask+0x90>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d101      	bne.n	8018d34 <prvProcessTimerOrBlockTask+0x50>
 8018d30:	2301      	movs	r3, #1
 8018d32:	e000      	b.n	8018d36 <prvProcessTimerOrBlockTask+0x52>
 8018d34:	2300      	movs	r3, #0
 8018d36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018d38:	4b0f      	ldr	r3, [pc, #60]	; (8018d78 <prvProcessTimerOrBlockTask+0x94>)
 8018d3a:	6818      	ldr	r0, [r3, #0]
 8018d3c:	687a      	ldr	r2, [r7, #4]
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	1ad3      	subs	r3, r2, r3
 8018d42:	683a      	ldr	r2, [r7, #0]
 8018d44:	4619      	mov	r1, r3
 8018d46:	f7fe fecf 	bl	8017ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018d4a:	f7ff fa23 	bl	8018194 <xTaskResumeAll>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d10a      	bne.n	8018d6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018d54:	4b09      	ldr	r3, [pc, #36]	; (8018d7c <prvProcessTimerOrBlockTask+0x98>)
 8018d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d5a:	601a      	str	r2, [r3, #0]
 8018d5c:	f3bf 8f4f 	dsb	sy
 8018d60:	f3bf 8f6f 	isb	sy
}
 8018d64:	e001      	b.n	8018d6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018d66:	f7ff fa15 	bl	8018194 <xTaskResumeAll>
}
 8018d6a:	bf00      	nop
 8018d6c:	3710      	adds	r7, #16
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	bf00      	nop
 8018d74:	20001cf0 	.word	0x20001cf0
 8018d78:	20001cf4 	.word	0x20001cf4
 8018d7c:	e000ed04 	.word	0xe000ed04

08018d80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018d80:	b480      	push	{r7}
 8018d82:	b085      	sub	sp, #20
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018d88:	4b0e      	ldr	r3, [pc, #56]	; (8018dc4 <prvGetNextExpireTime+0x44>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d101      	bne.n	8018d96 <prvGetNextExpireTime+0x16>
 8018d92:	2201      	movs	r2, #1
 8018d94:	e000      	b.n	8018d98 <prvGetNextExpireTime+0x18>
 8018d96:	2200      	movs	r2, #0
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d105      	bne.n	8018db0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018da4:	4b07      	ldr	r3, [pc, #28]	; (8018dc4 <prvGetNextExpireTime+0x44>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	68db      	ldr	r3, [r3, #12]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	60fb      	str	r3, [r7, #12]
 8018dae:	e001      	b.n	8018db4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018db0:	2300      	movs	r3, #0
 8018db2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018db4:	68fb      	ldr	r3, [r7, #12]
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3714      	adds	r7, #20
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc0:	4770      	bx	lr
 8018dc2:	bf00      	nop
 8018dc4:	20001cec 	.word	0x20001cec

08018dc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018dd0:	f7ff fa7e 	bl	80182d0 <xTaskGetTickCount>
 8018dd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018dd6:	4b0b      	ldr	r3, [pc, #44]	; (8018e04 <prvSampleTimeNow+0x3c>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	68fa      	ldr	r2, [r7, #12]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d205      	bcs.n	8018dec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018de0:	f000 f936 	bl	8019050 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2201      	movs	r2, #1
 8018de8:	601a      	str	r2, [r3, #0]
 8018dea:	e002      	b.n	8018df2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2200      	movs	r2, #0
 8018df0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018df2:	4a04      	ldr	r2, [pc, #16]	; (8018e04 <prvSampleTimeNow+0x3c>)
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018df8:	68fb      	ldr	r3, [r7, #12]
}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	3710      	adds	r7, #16
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bd80      	pop	{r7, pc}
 8018e02:	bf00      	nop
 8018e04:	20001cfc 	.word	0x20001cfc

08018e08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b086      	sub	sp, #24
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	607a      	str	r2, [r7, #4]
 8018e14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018e16:	2300      	movs	r3, #0
 8018e18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	68ba      	ldr	r2, [r7, #8]
 8018e1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	68fa      	ldr	r2, [r7, #12]
 8018e24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018e26:	68ba      	ldr	r2, [r7, #8]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d812      	bhi.n	8018e54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e2e:	687a      	ldr	r2, [r7, #4]
 8018e30:	683b      	ldr	r3, [r7, #0]
 8018e32:	1ad2      	subs	r2, r2, r3
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	699b      	ldr	r3, [r3, #24]
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	d302      	bcc.n	8018e42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	617b      	str	r3, [r7, #20]
 8018e40:	e01b      	b.n	8018e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018e42:	4b10      	ldr	r3, [pc, #64]	; (8018e84 <prvInsertTimerInActiveList+0x7c>)
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	4610      	mov	r0, r2
 8018e4e:	f7fe f930 	bl	80170b2 <vListInsert>
 8018e52:	e012      	b.n	8018e7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018e54:	687a      	ldr	r2, [r7, #4]
 8018e56:	683b      	ldr	r3, [r7, #0]
 8018e58:	429a      	cmp	r2, r3
 8018e5a:	d206      	bcs.n	8018e6a <prvInsertTimerInActiveList+0x62>
 8018e5c:	68ba      	ldr	r2, [r7, #8]
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d302      	bcc.n	8018e6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018e64:	2301      	movs	r3, #1
 8018e66:	617b      	str	r3, [r7, #20]
 8018e68:	e007      	b.n	8018e7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018e6a:	4b07      	ldr	r3, [pc, #28]	; (8018e88 <prvInsertTimerInActiveList+0x80>)
 8018e6c:	681a      	ldr	r2, [r3, #0]
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	3304      	adds	r3, #4
 8018e72:	4619      	mov	r1, r3
 8018e74:	4610      	mov	r0, r2
 8018e76:	f7fe f91c 	bl	80170b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018e7a:	697b      	ldr	r3, [r7, #20]
}
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	3718      	adds	r7, #24
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	20001cf0 	.word	0x20001cf0
 8018e88:	20001cec 	.word	0x20001cec

08018e8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b08e      	sub	sp, #56	; 0x38
 8018e90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018e92:	e0ca      	b.n	801902a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	da18      	bge.n	8018ecc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018e9a:	1d3b      	adds	r3, r7, #4
 8018e9c:	3304      	adds	r3, #4
 8018e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d10a      	bne.n	8018ebc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eaa:	f383 8811 	msr	BASEPRI, r3
 8018eae:	f3bf 8f6f 	isb	sy
 8018eb2:	f3bf 8f4f 	dsb	sy
 8018eb6:	61fb      	str	r3, [r7, #28]
}
 8018eb8:	bf00      	nop
 8018eba:	e7fe      	b.n	8018eba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ec2:	6850      	ldr	r0, [r2, #4]
 8018ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ec6:	6892      	ldr	r2, [r2, #8]
 8018ec8:	4611      	mov	r1, r2
 8018eca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	f2c0 80aa 	blt.w	8019028 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eda:	695b      	ldr	r3, [r3, #20]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee2:	3304      	adds	r3, #4
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fe f91d 	bl	8017124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018eea:	463b      	mov	r3, r7
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7ff ff6b 	bl	8018dc8 <prvSampleTimeNow>
 8018ef2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2b09      	cmp	r3, #9
 8018ef8:	f200 8097 	bhi.w	801902a <prvProcessReceivedCommands+0x19e>
 8018efc:	a201      	add	r2, pc, #4	; (adr r2, 8018f04 <prvProcessReceivedCommands+0x78>)
 8018efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f02:	bf00      	nop
 8018f04:	08018f2d 	.word	0x08018f2d
 8018f08:	08018f2d 	.word	0x08018f2d
 8018f0c:	08018f2d 	.word	0x08018f2d
 8018f10:	08018fa1 	.word	0x08018fa1
 8018f14:	08018fb5 	.word	0x08018fb5
 8018f18:	08018fff 	.word	0x08018fff
 8018f1c:	08018f2d 	.word	0x08018f2d
 8018f20:	08018f2d 	.word	0x08018f2d
 8018f24:	08018fa1 	.word	0x08018fa1
 8018f28:	08018fb5 	.word	0x08018fb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f32:	f043 0301 	orr.w	r3, r3, #1
 8018f36:	b2da      	uxtb	r2, r3
 8018f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018f3e:	68ba      	ldr	r2, [r7, #8]
 8018f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f42:	699b      	ldr	r3, [r3, #24]
 8018f44:	18d1      	adds	r1, r2, r3
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f4c:	f7ff ff5c 	bl	8018e08 <prvInsertTimerInActiveList>
 8018f50:	4603      	mov	r3, r0
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d069      	beq.n	801902a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f58:	6a1b      	ldr	r3, [r3, #32]
 8018f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f64:	f003 0304 	and.w	r3, r3, #4
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d05e      	beq.n	801902a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018f6c:	68ba      	ldr	r2, [r7, #8]
 8018f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f70:	699b      	ldr	r3, [r3, #24]
 8018f72:	441a      	add	r2, r3
 8018f74:	2300      	movs	r3, #0
 8018f76:	9300      	str	r3, [sp, #0]
 8018f78:	2300      	movs	r3, #0
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f7e:	f7ff fe05 	bl	8018b8c <xTimerGenericCommand>
 8018f82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018f84:	6a3b      	ldr	r3, [r7, #32]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d14f      	bne.n	801902a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f8e:	f383 8811 	msr	BASEPRI, r3
 8018f92:	f3bf 8f6f 	isb	sy
 8018f96:	f3bf 8f4f 	dsb	sy
 8018f9a:	61bb      	str	r3, [r7, #24]
}
 8018f9c:	bf00      	nop
 8018f9e:	e7fe      	b.n	8018f9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fa6:	f023 0301 	bic.w	r3, r3, #1
 8018faa:	b2da      	uxtb	r2, r3
 8018fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018fb2:	e03a      	b.n	801902a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fba:	f043 0301 	orr.w	r3, r3, #1
 8018fbe:	b2da      	uxtb	r2, r3
 8018fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018fc6:	68ba      	ldr	r2, [r7, #8]
 8018fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fce:	699b      	ldr	r3, [r3, #24]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d10a      	bne.n	8018fea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fd8:	f383 8811 	msr	BASEPRI, r3
 8018fdc:	f3bf 8f6f 	isb	sy
 8018fe0:	f3bf 8f4f 	dsb	sy
 8018fe4:	617b      	str	r3, [r7, #20]
}
 8018fe6:	bf00      	nop
 8018fe8:	e7fe      	b.n	8018fe8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fec:	699a      	ldr	r2, [r3, #24]
 8018fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff0:	18d1      	adds	r1, r2, r3
 8018ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ff8:	f7ff ff06 	bl	8018e08 <prvInsertTimerInActiveList>
					break;
 8018ffc:	e015      	b.n	801902a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019004:	f003 0302 	and.w	r3, r3, #2
 8019008:	2b00      	cmp	r3, #0
 801900a:	d103      	bne.n	8019014 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801900c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801900e:	f000 fbdf 	bl	80197d0 <vPortFree>
 8019012:	e00a      	b.n	801902a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801901a:	f023 0301 	bic.w	r3, r3, #1
 801901e:	b2da      	uxtb	r2, r3
 8019020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019026:	e000      	b.n	801902a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019028:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801902a:	4b08      	ldr	r3, [pc, #32]	; (801904c <prvProcessReceivedCommands+0x1c0>)
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	1d39      	adds	r1, r7, #4
 8019030:	2200      	movs	r2, #0
 8019032:	4618      	mov	r0, r3
 8019034:	f7fe fb3e 	bl	80176b4 <xQueueReceive>
 8019038:	4603      	mov	r3, r0
 801903a:	2b00      	cmp	r3, #0
 801903c:	f47f af2a 	bne.w	8018e94 <prvProcessReceivedCommands+0x8>
	}
}
 8019040:	bf00      	nop
 8019042:	bf00      	nop
 8019044:	3730      	adds	r7, #48	; 0x30
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	20001cf4 	.word	0x20001cf4

08019050 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b088      	sub	sp, #32
 8019054:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019056:	e048      	b.n	80190ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019058:	4b2d      	ldr	r3, [pc, #180]	; (8019110 <prvSwitchTimerLists+0xc0>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	68db      	ldr	r3, [r3, #12]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019062:	4b2b      	ldr	r3, [pc, #172]	; (8019110 <prvSwitchTimerLists+0xc0>)
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	68db      	ldr	r3, [r3, #12]
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	3304      	adds	r3, #4
 8019070:	4618      	mov	r0, r3
 8019072:	f7fe f857 	bl	8017124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	6a1b      	ldr	r3, [r3, #32]
 801907a:	68f8      	ldr	r0, [r7, #12]
 801907c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019084:	f003 0304 	and.w	r3, r3, #4
 8019088:	2b00      	cmp	r3, #0
 801908a:	d02e      	beq.n	80190ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	699b      	ldr	r3, [r3, #24]
 8019090:	693a      	ldr	r2, [r7, #16]
 8019092:	4413      	add	r3, r2
 8019094:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019096:	68ba      	ldr	r2, [r7, #8]
 8019098:	693b      	ldr	r3, [r7, #16]
 801909a:	429a      	cmp	r2, r3
 801909c:	d90e      	bls.n	80190bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	68ba      	ldr	r2, [r7, #8]
 80190a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	68fa      	ldr	r2, [r7, #12]
 80190a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80190aa:	4b19      	ldr	r3, [pc, #100]	; (8019110 <prvSwitchTimerLists+0xc0>)
 80190ac:	681a      	ldr	r2, [r3, #0]
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	3304      	adds	r3, #4
 80190b2:	4619      	mov	r1, r3
 80190b4:	4610      	mov	r0, r2
 80190b6:	f7fd fffc 	bl	80170b2 <vListInsert>
 80190ba:	e016      	b.n	80190ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80190bc:	2300      	movs	r3, #0
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	2300      	movs	r3, #0
 80190c2:	693a      	ldr	r2, [r7, #16]
 80190c4:	2100      	movs	r1, #0
 80190c6:	68f8      	ldr	r0, [r7, #12]
 80190c8:	f7ff fd60 	bl	8018b8c <xTimerGenericCommand>
 80190cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d10a      	bne.n	80190ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80190d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190d8:	f383 8811 	msr	BASEPRI, r3
 80190dc:	f3bf 8f6f 	isb	sy
 80190e0:	f3bf 8f4f 	dsb	sy
 80190e4:	603b      	str	r3, [r7, #0]
}
 80190e6:	bf00      	nop
 80190e8:	e7fe      	b.n	80190e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80190ea:	4b09      	ldr	r3, [pc, #36]	; (8019110 <prvSwitchTimerLists+0xc0>)
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d1b1      	bne.n	8019058 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80190f4:	4b06      	ldr	r3, [pc, #24]	; (8019110 <prvSwitchTimerLists+0xc0>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80190fa:	4b06      	ldr	r3, [pc, #24]	; (8019114 <prvSwitchTimerLists+0xc4>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	4a04      	ldr	r2, [pc, #16]	; (8019110 <prvSwitchTimerLists+0xc0>)
 8019100:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019102:	4a04      	ldr	r2, [pc, #16]	; (8019114 <prvSwitchTimerLists+0xc4>)
 8019104:	697b      	ldr	r3, [r7, #20]
 8019106:	6013      	str	r3, [r2, #0]
}
 8019108:	bf00      	nop
 801910a:	3718      	adds	r7, #24
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}
 8019110:	20001cec 	.word	0x20001cec
 8019114:	20001cf0 	.word	0x20001cf0

08019118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801911e:	f000 f969 	bl	80193f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019122:	4b15      	ldr	r3, [pc, #84]	; (8019178 <prvCheckForValidListAndQueue+0x60>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d120      	bne.n	801916c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801912a:	4814      	ldr	r0, [pc, #80]	; (801917c <prvCheckForValidListAndQueue+0x64>)
 801912c:	f7fd ff70 	bl	8017010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019130:	4813      	ldr	r0, [pc, #76]	; (8019180 <prvCheckForValidListAndQueue+0x68>)
 8019132:	f7fd ff6d 	bl	8017010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019136:	4b13      	ldr	r3, [pc, #76]	; (8019184 <prvCheckForValidListAndQueue+0x6c>)
 8019138:	4a10      	ldr	r2, [pc, #64]	; (801917c <prvCheckForValidListAndQueue+0x64>)
 801913a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801913c:	4b12      	ldr	r3, [pc, #72]	; (8019188 <prvCheckForValidListAndQueue+0x70>)
 801913e:	4a10      	ldr	r2, [pc, #64]	; (8019180 <prvCheckForValidListAndQueue+0x68>)
 8019140:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019142:	2300      	movs	r3, #0
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	4b11      	ldr	r3, [pc, #68]	; (801918c <prvCheckForValidListAndQueue+0x74>)
 8019148:	4a11      	ldr	r2, [pc, #68]	; (8019190 <prvCheckForValidListAndQueue+0x78>)
 801914a:	2110      	movs	r1, #16
 801914c:	200a      	movs	r0, #10
 801914e:	f7fe f87b 	bl	8017248 <xQueueGenericCreateStatic>
 8019152:	4603      	mov	r3, r0
 8019154:	4a08      	ldr	r2, [pc, #32]	; (8019178 <prvCheckForValidListAndQueue+0x60>)
 8019156:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019158:	4b07      	ldr	r3, [pc, #28]	; (8019178 <prvCheckForValidListAndQueue+0x60>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d005      	beq.n	801916c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019160:	4b05      	ldr	r3, [pc, #20]	; (8019178 <prvCheckForValidListAndQueue+0x60>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	490b      	ldr	r1, [pc, #44]	; (8019194 <prvCheckForValidListAndQueue+0x7c>)
 8019166:	4618      	mov	r0, r3
 8019168:	f7fe fc94 	bl	8017a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801916c:	f000 f972 	bl	8019454 <vPortExitCritical>
}
 8019170:	bf00      	nop
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
 8019176:	bf00      	nop
 8019178:	20001cf4 	.word	0x20001cf4
 801917c:	20001cc4 	.word	0x20001cc4
 8019180:	20001cd8 	.word	0x20001cd8
 8019184:	20001cec 	.word	0x20001cec
 8019188:	20001cf0 	.word	0x20001cf0
 801918c:	20001da0 	.word	0x20001da0
 8019190:	20001d00 	.word	0x20001d00
 8019194:	0802007c 	.word	0x0802007c

08019198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019198:	b480      	push	{r7}
 801919a:	b085      	sub	sp, #20
 801919c:	af00      	add	r7, sp, #0
 801919e:	60f8      	str	r0, [r7, #12]
 80191a0:	60b9      	str	r1, [r7, #8]
 80191a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	3b04      	subs	r3, #4
 80191a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80191b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	3b04      	subs	r3, #4
 80191b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80191b8:	68bb      	ldr	r3, [r7, #8]
 80191ba:	f023 0201 	bic.w	r2, r3, #1
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	3b04      	subs	r3, #4
 80191c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80191c8:	4a0c      	ldr	r2, [pc, #48]	; (80191fc <pxPortInitialiseStack+0x64>)
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	3b14      	subs	r3, #20
 80191d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80191d4:	687a      	ldr	r2, [r7, #4]
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	3b04      	subs	r3, #4
 80191de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	f06f 0202 	mvn.w	r2, #2
 80191e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	3b20      	subs	r3, #32
 80191ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80191ee:	68fb      	ldr	r3, [r7, #12]
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3714      	adds	r7, #20
 80191f4:	46bd      	mov	sp, r7
 80191f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fa:	4770      	bx	lr
 80191fc:	08019201 	.word	0x08019201

08019200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019200:	b480      	push	{r7}
 8019202:	b085      	sub	sp, #20
 8019204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019206:	2300      	movs	r3, #0
 8019208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801920a:	4b12      	ldr	r3, [pc, #72]	; (8019254 <prvTaskExitError+0x54>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019212:	d00a      	beq.n	801922a <prvTaskExitError+0x2a>
	__asm volatile
 8019214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019218:	f383 8811 	msr	BASEPRI, r3
 801921c:	f3bf 8f6f 	isb	sy
 8019220:	f3bf 8f4f 	dsb	sy
 8019224:	60fb      	str	r3, [r7, #12]
}
 8019226:	bf00      	nop
 8019228:	e7fe      	b.n	8019228 <prvTaskExitError+0x28>
	__asm volatile
 801922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801922e:	f383 8811 	msr	BASEPRI, r3
 8019232:	f3bf 8f6f 	isb	sy
 8019236:	f3bf 8f4f 	dsb	sy
 801923a:	60bb      	str	r3, [r7, #8]
}
 801923c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801923e:	bf00      	nop
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d0fc      	beq.n	8019240 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019246:	bf00      	nop
 8019248:	bf00      	nop
 801924a:	3714      	adds	r7, #20
 801924c:	46bd      	mov	sp, r7
 801924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019252:	4770      	bx	lr
 8019254:	200000c0 	.word	0x200000c0
	...

08019260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019260:	4b07      	ldr	r3, [pc, #28]	; (8019280 <pxCurrentTCBConst2>)
 8019262:	6819      	ldr	r1, [r3, #0]
 8019264:	6808      	ldr	r0, [r1, #0]
 8019266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801926a:	f380 8809 	msr	PSP, r0
 801926e:	f3bf 8f6f 	isb	sy
 8019272:	f04f 0000 	mov.w	r0, #0
 8019276:	f380 8811 	msr	BASEPRI, r0
 801927a:	4770      	bx	lr
 801927c:	f3af 8000 	nop.w

08019280 <pxCurrentTCBConst2>:
 8019280:	200017c4 	.word	0x200017c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019284:	bf00      	nop
 8019286:	bf00      	nop

08019288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019288:	4808      	ldr	r0, [pc, #32]	; (80192ac <prvPortStartFirstTask+0x24>)
 801928a:	6800      	ldr	r0, [r0, #0]
 801928c:	6800      	ldr	r0, [r0, #0]
 801928e:	f380 8808 	msr	MSP, r0
 8019292:	f04f 0000 	mov.w	r0, #0
 8019296:	f380 8814 	msr	CONTROL, r0
 801929a:	b662      	cpsie	i
 801929c:	b661      	cpsie	f
 801929e:	f3bf 8f4f 	dsb	sy
 80192a2:	f3bf 8f6f 	isb	sy
 80192a6:	df00      	svc	0
 80192a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80192aa:	bf00      	nop
 80192ac:	e000ed08 	.word	0xe000ed08

080192b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b086      	sub	sp, #24
 80192b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80192b6:	4b46      	ldr	r3, [pc, #280]	; (80193d0 <xPortStartScheduler+0x120>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4a46      	ldr	r2, [pc, #280]	; (80193d4 <xPortStartScheduler+0x124>)
 80192bc:	4293      	cmp	r3, r2
 80192be:	d10a      	bne.n	80192d6 <xPortStartScheduler+0x26>
	__asm volatile
 80192c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192c4:	f383 8811 	msr	BASEPRI, r3
 80192c8:	f3bf 8f6f 	isb	sy
 80192cc:	f3bf 8f4f 	dsb	sy
 80192d0:	613b      	str	r3, [r7, #16]
}
 80192d2:	bf00      	nop
 80192d4:	e7fe      	b.n	80192d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80192d6:	4b3e      	ldr	r3, [pc, #248]	; (80193d0 <xPortStartScheduler+0x120>)
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	4a3f      	ldr	r2, [pc, #252]	; (80193d8 <xPortStartScheduler+0x128>)
 80192dc:	4293      	cmp	r3, r2
 80192de:	d10a      	bne.n	80192f6 <xPortStartScheduler+0x46>
	__asm volatile
 80192e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e4:	f383 8811 	msr	BASEPRI, r3
 80192e8:	f3bf 8f6f 	isb	sy
 80192ec:	f3bf 8f4f 	dsb	sy
 80192f0:	60fb      	str	r3, [r7, #12]
}
 80192f2:	bf00      	nop
 80192f4:	e7fe      	b.n	80192f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80192f6:	4b39      	ldr	r3, [pc, #228]	; (80193dc <xPortStartScheduler+0x12c>)
 80192f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	781b      	ldrb	r3, [r3, #0]
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	22ff      	movs	r2, #255	; 0xff
 8019306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	781b      	ldrb	r3, [r3, #0]
 801930c:	b2db      	uxtb	r3, r3
 801930e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019310:	78fb      	ldrb	r3, [r7, #3]
 8019312:	b2db      	uxtb	r3, r3
 8019314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019318:	b2da      	uxtb	r2, r3
 801931a:	4b31      	ldr	r3, [pc, #196]	; (80193e0 <xPortStartScheduler+0x130>)
 801931c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801931e:	4b31      	ldr	r3, [pc, #196]	; (80193e4 <xPortStartScheduler+0x134>)
 8019320:	2207      	movs	r2, #7
 8019322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019324:	e009      	b.n	801933a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019326:	4b2f      	ldr	r3, [pc, #188]	; (80193e4 <xPortStartScheduler+0x134>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	3b01      	subs	r3, #1
 801932c:	4a2d      	ldr	r2, [pc, #180]	; (80193e4 <xPortStartScheduler+0x134>)
 801932e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019330:	78fb      	ldrb	r3, [r7, #3]
 8019332:	b2db      	uxtb	r3, r3
 8019334:	005b      	lsls	r3, r3, #1
 8019336:	b2db      	uxtb	r3, r3
 8019338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801933a:	78fb      	ldrb	r3, [r7, #3]
 801933c:	b2db      	uxtb	r3, r3
 801933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019342:	2b80      	cmp	r3, #128	; 0x80
 8019344:	d0ef      	beq.n	8019326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019346:	4b27      	ldr	r3, [pc, #156]	; (80193e4 <xPortStartScheduler+0x134>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f1c3 0307 	rsb	r3, r3, #7
 801934e:	2b04      	cmp	r3, #4
 8019350:	d00a      	beq.n	8019368 <xPortStartScheduler+0xb8>
	__asm volatile
 8019352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019356:	f383 8811 	msr	BASEPRI, r3
 801935a:	f3bf 8f6f 	isb	sy
 801935e:	f3bf 8f4f 	dsb	sy
 8019362:	60bb      	str	r3, [r7, #8]
}
 8019364:	bf00      	nop
 8019366:	e7fe      	b.n	8019366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019368:	4b1e      	ldr	r3, [pc, #120]	; (80193e4 <xPortStartScheduler+0x134>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	021b      	lsls	r3, r3, #8
 801936e:	4a1d      	ldr	r2, [pc, #116]	; (80193e4 <xPortStartScheduler+0x134>)
 8019370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019372:	4b1c      	ldr	r3, [pc, #112]	; (80193e4 <xPortStartScheduler+0x134>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801937a:	4a1a      	ldr	r2, [pc, #104]	; (80193e4 <xPortStartScheduler+0x134>)
 801937c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	b2da      	uxtb	r2, r3
 8019382:	697b      	ldr	r3, [r7, #20]
 8019384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019386:	4b18      	ldr	r3, [pc, #96]	; (80193e8 <xPortStartScheduler+0x138>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4a17      	ldr	r2, [pc, #92]	; (80193e8 <xPortStartScheduler+0x138>)
 801938c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019392:	4b15      	ldr	r3, [pc, #84]	; (80193e8 <xPortStartScheduler+0x138>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	4a14      	ldr	r2, [pc, #80]	; (80193e8 <xPortStartScheduler+0x138>)
 8019398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801939c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801939e:	f000 f8dd 	bl	801955c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80193a2:	4b12      	ldr	r3, [pc, #72]	; (80193ec <xPortStartScheduler+0x13c>)
 80193a4:	2200      	movs	r2, #0
 80193a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80193a8:	f000 f8fc 	bl	80195a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80193ac:	4b10      	ldr	r3, [pc, #64]	; (80193f0 <xPortStartScheduler+0x140>)
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4a0f      	ldr	r2, [pc, #60]	; (80193f0 <xPortStartScheduler+0x140>)
 80193b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80193b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80193b8:	f7ff ff66 	bl	8019288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80193bc:	f7ff f852 	bl	8018464 <vTaskSwitchContext>
	prvTaskExitError();
 80193c0:	f7ff ff1e 	bl	8019200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80193c4:	2300      	movs	r3, #0
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3718      	adds	r7, #24
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}
 80193ce:	bf00      	nop
 80193d0:	e000ed00 	.word	0xe000ed00
 80193d4:	410fc271 	.word	0x410fc271
 80193d8:	410fc270 	.word	0x410fc270
 80193dc:	e000e400 	.word	0xe000e400
 80193e0:	20001df0 	.word	0x20001df0
 80193e4:	20001df4 	.word	0x20001df4
 80193e8:	e000ed20 	.word	0xe000ed20
 80193ec:	200000c0 	.word	0x200000c0
 80193f0:	e000ef34 	.word	0xe000ef34

080193f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80193f4:	b480      	push	{r7}
 80193f6:	b083      	sub	sp, #12
 80193f8:	af00      	add	r7, sp, #0
	__asm volatile
 80193fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193fe:	f383 8811 	msr	BASEPRI, r3
 8019402:	f3bf 8f6f 	isb	sy
 8019406:	f3bf 8f4f 	dsb	sy
 801940a:	607b      	str	r3, [r7, #4]
}
 801940c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801940e:	4b0f      	ldr	r3, [pc, #60]	; (801944c <vPortEnterCritical+0x58>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	3301      	adds	r3, #1
 8019414:	4a0d      	ldr	r2, [pc, #52]	; (801944c <vPortEnterCritical+0x58>)
 8019416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019418:	4b0c      	ldr	r3, [pc, #48]	; (801944c <vPortEnterCritical+0x58>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	2b01      	cmp	r3, #1
 801941e:	d10f      	bne.n	8019440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019420:	4b0b      	ldr	r3, [pc, #44]	; (8019450 <vPortEnterCritical+0x5c>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	b2db      	uxtb	r3, r3
 8019426:	2b00      	cmp	r3, #0
 8019428:	d00a      	beq.n	8019440 <vPortEnterCritical+0x4c>
	__asm volatile
 801942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801942e:	f383 8811 	msr	BASEPRI, r3
 8019432:	f3bf 8f6f 	isb	sy
 8019436:	f3bf 8f4f 	dsb	sy
 801943a:	603b      	str	r3, [r7, #0]
}
 801943c:	bf00      	nop
 801943e:	e7fe      	b.n	801943e <vPortEnterCritical+0x4a>
	}
}
 8019440:	bf00      	nop
 8019442:	370c      	adds	r7, #12
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr
 801944c:	200000c0 	.word	0x200000c0
 8019450:	e000ed04 	.word	0xe000ed04

08019454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019454:	b480      	push	{r7}
 8019456:	b083      	sub	sp, #12
 8019458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801945a:	4b12      	ldr	r3, [pc, #72]	; (80194a4 <vPortExitCritical+0x50>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d10a      	bne.n	8019478 <vPortExitCritical+0x24>
	__asm volatile
 8019462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019466:	f383 8811 	msr	BASEPRI, r3
 801946a:	f3bf 8f6f 	isb	sy
 801946e:	f3bf 8f4f 	dsb	sy
 8019472:	607b      	str	r3, [r7, #4]
}
 8019474:	bf00      	nop
 8019476:	e7fe      	b.n	8019476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019478:	4b0a      	ldr	r3, [pc, #40]	; (80194a4 <vPortExitCritical+0x50>)
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	3b01      	subs	r3, #1
 801947e:	4a09      	ldr	r2, [pc, #36]	; (80194a4 <vPortExitCritical+0x50>)
 8019480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019482:	4b08      	ldr	r3, [pc, #32]	; (80194a4 <vPortExitCritical+0x50>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d105      	bne.n	8019496 <vPortExitCritical+0x42>
 801948a:	2300      	movs	r3, #0
 801948c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	f383 8811 	msr	BASEPRI, r3
}
 8019494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019496:	bf00      	nop
 8019498:	370c      	adds	r7, #12
 801949a:	46bd      	mov	sp, r7
 801949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a0:	4770      	bx	lr
 80194a2:	bf00      	nop
 80194a4:	200000c0 	.word	0x200000c0
	...

080194b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80194b0:	f3ef 8009 	mrs	r0, PSP
 80194b4:	f3bf 8f6f 	isb	sy
 80194b8:	4b15      	ldr	r3, [pc, #84]	; (8019510 <pxCurrentTCBConst>)
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	f01e 0f10 	tst.w	lr, #16
 80194c0:	bf08      	it	eq
 80194c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80194c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ca:	6010      	str	r0, [r2, #0]
 80194cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80194d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80194d4:	f380 8811 	msr	BASEPRI, r0
 80194d8:	f3bf 8f4f 	dsb	sy
 80194dc:	f3bf 8f6f 	isb	sy
 80194e0:	f7fe ffc0 	bl	8018464 <vTaskSwitchContext>
 80194e4:	f04f 0000 	mov.w	r0, #0
 80194e8:	f380 8811 	msr	BASEPRI, r0
 80194ec:	bc09      	pop	{r0, r3}
 80194ee:	6819      	ldr	r1, [r3, #0]
 80194f0:	6808      	ldr	r0, [r1, #0]
 80194f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f6:	f01e 0f10 	tst.w	lr, #16
 80194fa:	bf08      	it	eq
 80194fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019500:	f380 8809 	msr	PSP, r0
 8019504:	f3bf 8f6f 	isb	sy
 8019508:	4770      	bx	lr
 801950a:	bf00      	nop
 801950c:	f3af 8000 	nop.w

08019510 <pxCurrentTCBConst>:
 8019510:	200017c4 	.word	0x200017c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019514:	bf00      	nop
 8019516:	bf00      	nop

08019518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0
	__asm volatile
 801951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019522:	f383 8811 	msr	BASEPRI, r3
 8019526:	f3bf 8f6f 	isb	sy
 801952a:	f3bf 8f4f 	dsb	sy
 801952e:	607b      	str	r3, [r7, #4]
}
 8019530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019532:	f7fe fedd 	bl	80182f0 <xTaskIncrementTick>
 8019536:	4603      	mov	r3, r0
 8019538:	2b00      	cmp	r3, #0
 801953a:	d003      	beq.n	8019544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801953c:	4b06      	ldr	r3, [pc, #24]	; (8019558 <xPortSysTickHandler+0x40>)
 801953e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019542:	601a      	str	r2, [r3, #0]
 8019544:	2300      	movs	r3, #0
 8019546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	f383 8811 	msr	BASEPRI, r3
}
 801954e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019550:	bf00      	nop
 8019552:	3708      	adds	r7, #8
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	e000ed04 	.word	0xe000ed04

0801955c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801955c:	b480      	push	{r7}
 801955e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019560:	4b0b      	ldr	r3, [pc, #44]	; (8019590 <vPortSetupTimerInterrupt+0x34>)
 8019562:	2200      	movs	r2, #0
 8019564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019566:	4b0b      	ldr	r3, [pc, #44]	; (8019594 <vPortSetupTimerInterrupt+0x38>)
 8019568:	2200      	movs	r2, #0
 801956a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801956c:	4b0a      	ldr	r3, [pc, #40]	; (8019598 <vPortSetupTimerInterrupt+0x3c>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	4a0a      	ldr	r2, [pc, #40]	; (801959c <vPortSetupTimerInterrupt+0x40>)
 8019572:	fba2 2303 	umull	r2, r3, r2, r3
 8019576:	099b      	lsrs	r3, r3, #6
 8019578:	4a09      	ldr	r2, [pc, #36]	; (80195a0 <vPortSetupTimerInterrupt+0x44>)
 801957a:	3b01      	subs	r3, #1
 801957c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801957e:	4b04      	ldr	r3, [pc, #16]	; (8019590 <vPortSetupTimerInterrupt+0x34>)
 8019580:	2207      	movs	r2, #7
 8019582:	601a      	str	r2, [r3, #0]
}
 8019584:	bf00      	nop
 8019586:	46bd      	mov	sp, r7
 8019588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop
 8019590:	e000e010 	.word	0xe000e010
 8019594:	e000e018 	.word	0xe000e018
 8019598:	20000054 	.word	0x20000054
 801959c:	10624dd3 	.word	0x10624dd3
 80195a0:	e000e014 	.word	0xe000e014

080195a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80195a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80195b4 <vPortEnableVFP+0x10>
 80195a8:	6801      	ldr	r1, [r0, #0]
 80195aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80195ae:	6001      	str	r1, [r0, #0]
 80195b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80195b2:	bf00      	nop
 80195b4:	e000ed88 	.word	0xe000ed88

080195b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80195b8:	b480      	push	{r7}
 80195ba:	b085      	sub	sp, #20
 80195bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80195be:	f3ef 8305 	mrs	r3, IPSR
 80195c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	2b0f      	cmp	r3, #15
 80195c8:	d914      	bls.n	80195f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80195ca:	4a17      	ldr	r2, [pc, #92]	; (8019628 <vPortValidateInterruptPriority+0x70>)
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	4413      	add	r3, r2
 80195d0:	781b      	ldrb	r3, [r3, #0]
 80195d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80195d4:	4b15      	ldr	r3, [pc, #84]	; (801962c <vPortValidateInterruptPriority+0x74>)
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	7afa      	ldrb	r2, [r7, #11]
 80195da:	429a      	cmp	r2, r3
 80195dc:	d20a      	bcs.n	80195f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	607b      	str	r3, [r7, #4]
}
 80195f0:	bf00      	nop
 80195f2:	e7fe      	b.n	80195f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80195f4:	4b0e      	ldr	r3, [pc, #56]	; (8019630 <vPortValidateInterruptPriority+0x78>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80195fc:	4b0d      	ldr	r3, [pc, #52]	; (8019634 <vPortValidateInterruptPriority+0x7c>)
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	429a      	cmp	r2, r3
 8019602:	d90a      	bls.n	801961a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019608:	f383 8811 	msr	BASEPRI, r3
 801960c:	f3bf 8f6f 	isb	sy
 8019610:	f3bf 8f4f 	dsb	sy
 8019614:	603b      	str	r3, [r7, #0]
}
 8019616:	bf00      	nop
 8019618:	e7fe      	b.n	8019618 <vPortValidateInterruptPriority+0x60>
	}
 801961a:	bf00      	nop
 801961c:	3714      	adds	r7, #20
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop
 8019628:	e000e3f0 	.word	0xe000e3f0
 801962c:	20001df0 	.word	0x20001df0
 8019630:	e000ed0c 	.word	0xe000ed0c
 8019634:	20001df4 	.word	0x20001df4

08019638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b08a      	sub	sp, #40	; 0x28
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019640:	2300      	movs	r3, #0
 8019642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019644:	f7fe fd98 	bl	8018178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019648:	4b5b      	ldr	r3, [pc, #364]	; (80197b8 <pvPortMalloc+0x180>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d101      	bne.n	8019654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019650:	f000 f920 	bl	8019894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019654:	4b59      	ldr	r3, [pc, #356]	; (80197bc <pvPortMalloc+0x184>)
 8019656:	681a      	ldr	r2, [r3, #0]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	4013      	ands	r3, r2
 801965c:	2b00      	cmp	r3, #0
 801965e:	f040 8093 	bne.w	8019788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d01d      	beq.n	80196a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019668:	2208      	movs	r2, #8
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	4413      	add	r3, r2
 801966e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f003 0307 	and.w	r3, r3, #7
 8019676:	2b00      	cmp	r3, #0
 8019678:	d014      	beq.n	80196a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f023 0307 	bic.w	r3, r3, #7
 8019680:	3308      	adds	r3, #8
 8019682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	f003 0307 	and.w	r3, r3, #7
 801968a:	2b00      	cmp	r3, #0
 801968c:	d00a      	beq.n	80196a4 <pvPortMalloc+0x6c>
	__asm volatile
 801968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019692:	f383 8811 	msr	BASEPRI, r3
 8019696:	f3bf 8f6f 	isb	sy
 801969a:	f3bf 8f4f 	dsb	sy
 801969e:	617b      	str	r3, [r7, #20]
}
 80196a0:	bf00      	nop
 80196a2:	e7fe      	b.n	80196a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d06e      	beq.n	8019788 <pvPortMalloc+0x150>
 80196aa:	4b45      	ldr	r3, [pc, #276]	; (80197c0 <pvPortMalloc+0x188>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d869      	bhi.n	8019788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80196b4:	4b43      	ldr	r3, [pc, #268]	; (80197c4 <pvPortMalloc+0x18c>)
 80196b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80196b8:	4b42      	ldr	r3, [pc, #264]	; (80197c4 <pvPortMalloc+0x18c>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196be:	e004      	b.n	80196ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80196c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80196c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196cc:	685b      	ldr	r3, [r3, #4]
 80196ce:	687a      	ldr	r2, [r7, #4]
 80196d0:	429a      	cmp	r2, r3
 80196d2:	d903      	bls.n	80196dc <pvPortMalloc+0xa4>
 80196d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d1f1      	bne.n	80196c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80196dc:	4b36      	ldr	r3, [pc, #216]	; (80197b8 <pvPortMalloc+0x180>)
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196e2:	429a      	cmp	r2, r3
 80196e4:	d050      	beq.n	8019788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80196e6:	6a3b      	ldr	r3, [r7, #32]
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	2208      	movs	r2, #8
 80196ec:	4413      	add	r3, r2
 80196ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80196f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f2:	681a      	ldr	r2, [r3, #0]
 80196f4:	6a3b      	ldr	r3, [r7, #32]
 80196f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80196f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196fa:	685a      	ldr	r2, [r3, #4]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	1ad2      	subs	r2, r2, r3
 8019700:	2308      	movs	r3, #8
 8019702:	005b      	lsls	r3, r3, #1
 8019704:	429a      	cmp	r2, r3
 8019706:	d91f      	bls.n	8019748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	4413      	add	r3, r2
 801970e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019710:	69bb      	ldr	r3, [r7, #24]
 8019712:	f003 0307 	and.w	r3, r3, #7
 8019716:	2b00      	cmp	r3, #0
 8019718:	d00a      	beq.n	8019730 <pvPortMalloc+0xf8>
	__asm volatile
 801971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801971e:	f383 8811 	msr	BASEPRI, r3
 8019722:	f3bf 8f6f 	isb	sy
 8019726:	f3bf 8f4f 	dsb	sy
 801972a:	613b      	str	r3, [r7, #16]
}
 801972c:	bf00      	nop
 801972e:	e7fe      	b.n	801972e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019732:	685a      	ldr	r2, [r3, #4]
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	1ad2      	subs	r2, r2, r3
 8019738:	69bb      	ldr	r3, [r7, #24]
 801973a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973e:	687a      	ldr	r2, [r7, #4]
 8019740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019742:	69b8      	ldr	r0, [r7, #24]
 8019744:	f000 f908 	bl	8019958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019748:	4b1d      	ldr	r3, [pc, #116]	; (80197c0 <pvPortMalloc+0x188>)
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801974e:	685b      	ldr	r3, [r3, #4]
 8019750:	1ad3      	subs	r3, r2, r3
 8019752:	4a1b      	ldr	r2, [pc, #108]	; (80197c0 <pvPortMalloc+0x188>)
 8019754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019756:	4b1a      	ldr	r3, [pc, #104]	; (80197c0 <pvPortMalloc+0x188>)
 8019758:	681a      	ldr	r2, [r3, #0]
 801975a:	4b1b      	ldr	r3, [pc, #108]	; (80197c8 <pvPortMalloc+0x190>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	429a      	cmp	r2, r3
 8019760:	d203      	bcs.n	801976a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019762:	4b17      	ldr	r3, [pc, #92]	; (80197c0 <pvPortMalloc+0x188>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	4a18      	ldr	r2, [pc, #96]	; (80197c8 <pvPortMalloc+0x190>)
 8019768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976c:	685a      	ldr	r2, [r3, #4]
 801976e:	4b13      	ldr	r3, [pc, #76]	; (80197bc <pvPortMalloc+0x184>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	431a      	orrs	r2, r3
 8019774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801977a:	2200      	movs	r2, #0
 801977c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801977e:	4b13      	ldr	r3, [pc, #76]	; (80197cc <pvPortMalloc+0x194>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	3301      	adds	r3, #1
 8019784:	4a11      	ldr	r2, [pc, #68]	; (80197cc <pvPortMalloc+0x194>)
 8019786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019788:	f7fe fd04 	bl	8018194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801978c:	69fb      	ldr	r3, [r7, #28]
 801978e:	f003 0307 	and.w	r3, r3, #7
 8019792:	2b00      	cmp	r3, #0
 8019794:	d00a      	beq.n	80197ac <pvPortMalloc+0x174>
	__asm volatile
 8019796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801979a:	f383 8811 	msr	BASEPRI, r3
 801979e:	f3bf 8f6f 	isb	sy
 80197a2:	f3bf 8f4f 	dsb	sy
 80197a6:	60fb      	str	r3, [r7, #12]
}
 80197a8:	bf00      	nop
 80197aa:	e7fe      	b.n	80197aa <pvPortMalloc+0x172>
	return pvReturn;
 80197ac:	69fb      	ldr	r3, [r7, #28]
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3728      	adds	r7, #40	; 0x28
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}
 80197b6:	bf00      	nop
 80197b8:	20005a00 	.word	0x20005a00
 80197bc:	20005a14 	.word	0x20005a14
 80197c0:	20005a04 	.word	0x20005a04
 80197c4:	200059f8 	.word	0x200059f8
 80197c8:	20005a08 	.word	0x20005a08
 80197cc:	20005a0c 	.word	0x20005a0c

080197d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b086      	sub	sp, #24
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d04d      	beq.n	801987e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80197e2:	2308      	movs	r3, #8
 80197e4:	425b      	negs	r3, r3
 80197e6:	697a      	ldr	r2, [r7, #20]
 80197e8:	4413      	add	r3, r2
 80197ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	685a      	ldr	r2, [r3, #4]
 80197f4:	4b24      	ldr	r3, [pc, #144]	; (8019888 <vPortFree+0xb8>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	4013      	ands	r3, r2
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d10a      	bne.n	8019814 <vPortFree+0x44>
	__asm volatile
 80197fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019802:	f383 8811 	msr	BASEPRI, r3
 8019806:	f3bf 8f6f 	isb	sy
 801980a:	f3bf 8f4f 	dsb	sy
 801980e:	60fb      	str	r3, [r7, #12]
}
 8019810:	bf00      	nop
 8019812:	e7fe      	b.n	8019812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019814:	693b      	ldr	r3, [r7, #16]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d00a      	beq.n	8019832 <vPortFree+0x62>
	__asm volatile
 801981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019820:	f383 8811 	msr	BASEPRI, r3
 8019824:	f3bf 8f6f 	isb	sy
 8019828:	f3bf 8f4f 	dsb	sy
 801982c:	60bb      	str	r3, [r7, #8]
}
 801982e:	bf00      	nop
 8019830:	e7fe      	b.n	8019830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019832:	693b      	ldr	r3, [r7, #16]
 8019834:	685a      	ldr	r2, [r3, #4]
 8019836:	4b14      	ldr	r3, [pc, #80]	; (8019888 <vPortFree+0xb8>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	4013      	ands	r3, r2
 801983c:	2b00      	cmp	r3, #0
 801983e:	d01e      	beq.n	801987e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d11a      	bne.n	801987e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019848:	693b      	ldr	r3, [r7, #16]
 801984a:	685a      	ldr	r2, [r3, #4]
 801984c:	4b0e      	ldr	r3, [pc, #56]	; (8019888 <vPortFree+0xb8>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	43db      	mvns	r3, r3
 8019852:	401a      	ands	r2, r3
 8019854:	693b      	ldr	r3, [r7, #16]
 8019856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019858:	f7fe fc8e 	bl	8018178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801985c:	693b      	ldr	r3, [r7, #16]
 801985e:	685a      	ldr	r2, [r3, #4]
 8019860:	4b0a      	ldr	r3, [pc, #40]	; (801988c <vPortFree+0xbc>)
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4413      	add	r3, r2
 8019866:	4a09      	ldr	r2, [pc, #36]	; (801988c <vPortFree+0xbc>)
 8019868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801986a:	6938      	ldr	r0, [r7, #16]
 801986c:	f000 f874 	bl	8019958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019870:	4b07      	ldr	r3, [pc, #28]	; (8019890 <vPortFree+0xc0>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	3301      	adds	r3, #1
 8019876:	4a06      	ldr	r2, [pc, #24]	; (8019890 <vPortFree+0xc0>)
 8019878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801987a:	f7fe fc8b 	bl	8018194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801987e:	bf00      	nop
 8019880:	3718      	adds	r7, #24
 8019882:	46bd      	mov	sp, r7
 8019884:	bd80      	pop	{r7, pc}
 8019886:	bf00      	nop
 8019888:	20005a14 	.word	0x20005a14
 801988c:	20005a04 	.word	0x20005a04
 8019890:	20005a10 	.word	0x20005a10

08019894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019894:	b480      	push	{r7}
 8019896:	b085      	sub	sp, #20
 8019898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801989a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801989e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80198a0:	4b27      	ldr	r3, [pc, #156]	; (8019940 <prvHeapInit+0xac>)
 80198a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	f003 0307 	and.w	r3, r3, #7
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d00c      	beq.n	80198c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	3307      	adds	r3, #7
 80198b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	f023 0307 	bic.w	r3, r3, #7
 80198ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80198bc:	68ba      	ldr	r2, [r7, #8]
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	1ad3      	subs	r3, r2, r3
 80198c2:	4a1f      	ldr	r2, [pc, #124]	; (8019940 <prvHeapInit+0xac>)
 80198c4:	4413      	add	r3, r2
 80198c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80198cc:	4a1d      	ldr	r2, [pc, #116]	; (8019944 <prvHeapInit+0xb0>)
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80198d2:	4b1c      	ldr	r3, [pc, #112]	; (8019944 <prvHeapInit+0xb0>)
 80198d4:	2200      	movs	r2, #0
 80198d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	68ba      	ldr	r2, [r7, #8]
 80198dc:	4413      	add	r3, r2
 80198de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80198e0:	2208      	movs	r2, #8
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	1a9b      	subs	r3, r3, r2
 80198e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	f023 0307 	bic.w	r3, r3, #7
 80198ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	4a15      	ldr	r2, [pc, #84]	; (8019948 <prvHeapInit+0xb4>)
 80198f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80198f6:	4b14      	ldr	r3, [pc, #80]	; (8019948 <prvHeapInit+0xb4>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	2200      	movs	r2, #0
 80198fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80198fe:	4b12      	ldr	r3, [pc, #72]	; (8019948 <prvHeapInit+0xb4>)
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	2200      	movs	r2, #0
 8019904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	68fa      	ldr	r2, [r7, #12]
 801990e:	1ad2      	subs	r2, r2, r3
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019914:	4b0c      	ldr	r3, [pc, #48]	; (8019948 <prvHeapInit+0xb4>)
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	4a0a      	ldr	r2, [pc, #40]	; (801994c <prvHeapInit+0xb8>)
 8019922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	685b      	ldr	r3, [r3, #4]
 8019928:	4a09      	ldr	r2, [pc, #36]	; (8019950 <prvHeapInit+0xbc>)
 801992a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801992c:	4b09      	ldr	r3, [pc, #36]	; (8019954 <prvHeapInit+0xc0>)
 801992e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019932:	601a      	str	r2, [r3, #0]
}
 8019934:	bf00      	nop
 8019936:	3714      	adds	r7, #20
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr
 8019940:	20001df8 	.word	0x20001df8
 8019944:	200059f8 	.word	0x200059f8
 8019948:	20005a00 	.word	0x20005a00
 801994c:	20005a08 	.word	0x20005a08
 8019950:	20005a04 	.word	0x20005a04
 8019954:	20005a14 	.word	0x20005a14

08019958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019958:	b480      	push	{r7}
 801995a:	b085      	sub	sp, #20
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019960:	4b28      	ldr	r3, [pc, #160]	; (8019a04 <prvInsertBlockIntoFreeList+0xac>)
 8019962:	60fb      	str	r3, [r7, #12]
 8019964:	e002      	b.n	801996c <prvInsertBlockIntoFreeList+0x14>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	60fb      	str	r3, [r7, #12]
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	687a      	ldr	r2, [r7, #4]
 8019972:	429a      	cmp	r2, r3
 8019974:	d8f7      	bhi.n	8019966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	68ba      	ldr	r2, [r7, #8]
 8019980:	4413      	add	r3, r2
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	429a      	cmp	r2, r3
 8019986:	d108      	bne.n	801999a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	685a      	ldr	r2, [r3, #4]
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	441a      	add	r2, r3
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	685b      	ldr	r3, [r3, #4]
 80199a2:	68ba      	ldr	r2, [r7, #8]
 80199a4:	441a      	add	r2, r3
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d118      	bne.n	80199e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	681a      	ldr	r2, [r3, #0]
 80199b2:	4b15      	ldr	r3, [pc, #84]	; (8019a08 <prvInsertBlockIntoFreeList+0xb0>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	d00d      	beq.n	80199d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	685a      	ldr	r2, [r3, #4]
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	685b      	ldr	r3, [r3, #4]
 80199c4:	441a      	add	r2, r3
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	681a      	ldr	r2, [r3, #0]
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	601a      	str	r2, [r3, #0]
 80199d4:	e008      	b.n	80199e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80199d6:	4b0c      	ldr	r3, [pc, #48]	; (8019a08 <prvInsertBlockIntoFreeList+0xb0>)
 80199d8:	681a      	ldr	r2, [r3, #0]
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	601a      	str	r2, [r3, #0]
 80199de:	e003      	b.n	80199e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80199e8:	68fa      	ldr	r2, [r7, #12]
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d002      	beq.n	80199f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	687a      	ldr	r2, [r7, #4]
 80199f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80199f6:	bf00      	nop
 80199f8:	3714      	adds	r7, #20
 80199fa:	46bd      	mov	sp, r7
 80199fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop
 8019a04:	200059f8 	.word	0x200059f8
 8019a08:	20005a00 	.word	0x20005a00

08019a0c <__errno>:
 8019a0c:	4b01      	ldr	r3, [pc, #4]	; (8019a14 <__errno+0x8>)
 8019a0e:	6818      	ldr	r0, [r3, #0]
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	200000c4 	.word	0x200000c4

08019a18 <__libc_init_array>:
 8019a18:	b570      	push	{r4, r5, r6, lr}
 8019a1a:	4d0d      	ldr	r5, [pc, #52]	; (8019a50 <__libc_init_array+0x38>)
 8019a1c:	4c0d      	ldr	r4, [pc, #52]	; (8019a54 <__libc_init_array+0x3c>)
 8019a1e:	1b64      	subs	r4, r4, r5
 8019a20:	10a4      	asrs	r4, r4, #2
 8019a22:	2600      	movs	r6, #0
 8019a24:	42a6      	cmp	r6, r4
 8019a26:	d109      	bne.n	8019a3c <__libc_init_array+0x24>
 8019a28:	4d0b      	ldr	r5, [pc, #44]	; (8019a58 <__libc_init_array+0x40>)
 8019a2a:	4c0c      	ldr	r4, [pc, #48]	; (8019a5c <__libc_init_array+0x44>)
 8019a2c:	f005 ff40 	bl	801f8b0 <_init>
 8019a30:	1b64      	subs	r4, r4, r5
 8019a32:	10a4      	asrs	r4, r4, #2
 8019a34:	2600      	movs	r6, #0
 8019a36:	42a6      	cmp	r6, r4
 8019a38:	d105      	bne.n	8019a46 <__libc_init_array+0x2e>
 8019a3a:	bd70      	pop	{r4, r5, r6, pc}
 8019a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a40:	4798      	blx	r3
 8019a42:	3601      	adds	r6, #1
 8019a44:	e7ee      	b.n	8019a24 <__libc_init_array+0xc>
 8019a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a4a:	4798      	blx	r3
 8019a4c:	3601      	adds	r6, #1
 8019a4e:	e7f2      	b.n	8019a36 <__libc_init_array+0x1e>
 8019a50:	08020b8c 	.word	0x08020b8c
 8019a54:	08020b8c 	.word	0x08020b8c
 8019a58:	08020b8c 	.word	0x08020b8c
 8019a5c:	08020b90 	.word	0x08020b90

08019a60 <malloc>:
 8019a60:	4b02      	ldr	r3, [pc, #8]	; (8019a6c <malloc+0xc>)
 8019a62:	4601      	mov	r1, r0
 8019a64:	6818      	ldr	r0, [r3, #0]
 8019a66:	f000 b869 	b.w	8019b3c <_malloc_r>
 8019a6a:	bf00      	nop
 8019a6c:	200000c4 	.word	0x200000c4

08019a70 <memcpy>:
 8019a70:	440a      	add	r2, r1
 8019a72:	4291      	cmp	r1, r2
 8019a74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019a78:	d100      	bne.n	8019a7c <memcpy+0xc>
 8019a7a:	4770      	bx	lr
 8019a7c:	b510      	push	{r4, lr}
 8019a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a86:	4291      	cmp	r1, r2
 8019a88:	d1f9      	bne.n	8019a7e <memcpy+0xe>
 8019a8a:	bd10      	pop	{r4, pc}

08019a8c <memset>:
 8019a8c:	4402      	add	r2, r0
 8019a8e:	4603      	mov	r3, r0
 8019a90:	4293      	cmp	r3, r2
 8019a92:	d100      	bne.n	8019a96 <memset+0xa>
 8019a94:	4770      	bx	lr
 8019a96:	f803 1b01 	strb.w	r1, [r3], #1
 8019a9a:	e7f9      	b.n	8019a90 <memset+0x4>

08019a9c <_free_r>:
 8019a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a9e:	2900      	cmp	r1, #0
 8019aa0:	d048      	beq.n	8019b34 <_free_r+0x98>
 8019aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aa6:	9001      	str	r0, [sp, #4]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8019aae:	bfb8      	it	lt
 8019ab0:	18e4      	addlt	r4, r4, r3
 8019ab2:	f003 f8fd 	bl	801ccb0 <__malloc_lock>
 8019ab6:	4a20      	ldr	r2, [pc, #128]	; (8019b38 <_free_r+0x9c>)
 8019ab8:	9801      	ldr	r0, [sp, #4]
 8019aba:	6813      	ldr	r3, [r2, #0]
 8019abc:	4615      	mov	r5, r2
 8019abe:	b933      	cbnz	r3, 8019ace <_free_r+0x32>
 8019ac0:	6063      	str	r3, [r4, #4]
 8019ac2:	6014      	str	r4, [r2, #0]
 8019ac4:	b003      	add	sp, #12
 8019ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aca:	f003 b8f7 	b.w	801ccbc <__malloc_unlock>
 8019ace:	42a3      	cmp	r3, r4
 8019ad0:	d90b      	bls.n	8019aea <_free_r+0x4e>
 8019ad2:	6821      	ldr	r1, [r4, #0]
 8019ad4:	1862      	adds	r2, r4, r1
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	bf04      	itt	eq
 8019ada:	681a      	ldreq	r2, [r3, #0]
 8019adc:	685b      	ldreq	r3, [r3, #4]
 8019ade:	6063      	str	r3, [r4, #4]
 8019ae0:	bf04      	itt	eq
 8019ae2:	1852      	addeq	r2, r2, r1
 8019ae4:	6022      	streq	r2, [r4, #0]
 8019ae6:	602c      	str	r4, [r5, #0]
 8019ae8:	e7ec      	b.n	8019ac4 <_free_r+0x28>
 8019aea:	461a      	mov	r2, r3
 8019aec:	685b      	ldr	r3, [r3, #4]
 8019aee:	b10b      	cbz	r3, 8019af4 <_free_r+0x58>
 8019af0:	42a3      	cmp	r3, r4
 8019af2:	d9fa      	bls.n	8019aea <_free_r+0x4e>
 8019af4:	6811      	ldr	r1, [r2, #0]
 8019af6:	1855      	adds	r5, r2, r1
 8019af8:	42a5      	cmp	r5, r4
 8019afa:	d10b      	bne.n	8019b14 <_free_r+0x78>
 8019afc:	6824      	ldr	r4, [r4, #0]
 8019afe:	4421      	add	r1, r4
 8019b00:	1854      	adds	r4, r2, r1
 8019b02:	42a3      	cmp	r3, r4
 8019b04:	6011      	str	r1, [r2, #0]
 8019b06:	d1dd      	bne.n	8019ac4 <_free_r+0x28>
 8019b08:	681c      	ldr	r4, [r3, #0]
 8019b0a:	685b      	ldr	r3, [r3, #4]
 8019b0c:	6053      	str	r3, [r2, #4]
 8019b0e:	4421      	add	r1, r4
 8019b10:	6011      	str	r1, [r2, #0]
 8019b12:	e7d7      	b.n	8019ac4 <_free_r+0x28>
 8019b14:	d902      	bls.n	8019b1c <_free_r+0x80>
 8019b16:	230c      	movs	r3, #12
 8019b18:	6003      	str	r3, [r0, #0]
 8019b1a:	e7d3      	b.n	8019ac4 <_free_r+0x28>
 8019b1c:	6825      	ldr	r5, [r4, #0]
 8019b1e:	1961      	adds	r1, r4, r5
 8019b20:	428b      	cmp	r3, r1
 8019b22:	bf04      	itt	eq
 8019b24:	6819      	ldreq	r1, [r3, #0]
 8019b26:	685b      	ldreq	r3, [r3, #4]
 8019b28:	6063      	str	r3, [r4, #4]
 8019b2a:	bf04      	itt	eq
 8019b2c:	1949      	addeq	r1, r1, r5
 8019b2e:	6021      	streq	r1, [r4, #0]
 8019b30:	6054      	str	r4, [r2, #4]
 8019b32:	e7c7      	b.n	8019ac4 <_free_r+0x28>
 8019b34:	b003      	add	sp, #12
 8019b36:	bd30      	pop	{r4, r5, pc}
 8019b38:	20005a18 	.word	0x20005a18

08019b3c <_malloc_r>:
 8019b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b3e:	1ccd      	adds	r5, r1, #3
 8019b40:	f025 0503 	bic.w	r5, r5, #3
 8019b44:	3508      	adds	r5, #8
 8019b46:	2d0c      	cmp	r5, #12
 8019b48:	bf38      	it	cc
 8019b4a:	250c      	movcc	r5, #12
 8019b4c:	2d00      	cmp	r5, #0
 8019b4e:	4606      	mov	r6, r0
 8019b50:	db01      	blt.n	8019b56 <_malloc_r+0x1a>
 8019b52:	42a9      	cmp	r1, r5
 8019b54:	d903      	bls.n	8019b5e <_malloc_r+0x22>
 8019b56:	230c      	movs	r3, #12
 8019b58:	6033      	str	r3, [r6, #0]
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b5e:	f003 f8a7 	bl	801ccb0 <__malloc_lock>
 8019b62:	4921      	ldr	r1, [pc, #132]	; (8019be8 <_malloc_r+0xac>)
 8019b64:	680a      	ldr	r2, [r1, #0]
 8019b66:	4614      	mov	r4, r2
 8019b68:	b99c      	cbnz	r4, 8019b92 <_malloc_r+0x56>
 8019b6a:	4f20      	ldr	r7, [pc, #128]	; (8019bec <_malloc_r+0xb0>)
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	b923      	cbnz	r3, 8019b7a <_malloc_r+0x3e>
 8019b70:	4621      	mov	r1, r4
 8019b72:	4630      	mov	r0, r6
 8019b74:	f000 febe 	bl	801a8f4 <_sbrk_r>
 8019b78:	6038      	str	r0, [r7, #0]
 8019b7a:	4629      	mov	r1, r5
 8019b7c:	4630      	mov	r0, r6
 8019b7e:	f000 feb9 	bl	801a8f4 <_sbrk_r>
 8019b82:	1c43      	adds	r3, r0, #1
 8019b84:	d123      	bne.n	8019bce <_malloc_r+0x92>
 8019b86:	230c      	movs	r3, #12
 8019b88:	6033      	str	r3, [r6, #0]
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f003 f896 	bl	801ccbc <__malloc_unlock>
 8019b90:	e7e3      	b.n	8019b5a <_malloc_r+0x1e>
 8019b92:	6823      	ldr	r3, [r4, #0]
 8019b94:	1b5b      	subs	r3, r3, r5
 8019b96:	d417      	bmi.n	8019bc8 <_malloc_r+0x8c>
 8019b98:	2b0b      	cmp	r3, #11
 8019b9a:	d903      	bls.n	8019ba4 <_malloc_r+0x68>
 8019b9c:	6023      	str	r3, [r4, #0]
 8019b9e:	441c      	add	r4, r3
 8019ba0:	6025      	str	r5, [r4, #0]
 8019ba2:	e004      	b.n	8019bae <_malloc_r+0x72>
 8019ba4:	6863      	ldr	r3, [r4, #4]
 8019ba6:	42a2      	cmp	r2, r4
 8019ba8:	bf0c      	ite	eq
 8019baa:	600b      	streq	r3, [r1, #0]
 8019bac:	6053      	strne	r3, [r2, #4]
 8019bae:	4630      	mov	r0, r6
 8019bb0:	f003 f884 	bl	801ccbc <__malloc_unlock>
 8019bb4:	f104 000b 	add.w	r0, r4, #11
 8019bb8:	1d23      	adds	r3, r4, #4
 8019bba:	f020 0007 	bic.w	r0, r0, #7
 8019bbe:	1ac2      	subs	r2, r0, r3
 8019bc0:	d0cc      	beq.n	8019b5c <_malloc_r+0x20>
 8019bc2:	1a1b      	subs	r3, r3, r0
 8019bc4:	50a3      	str	r3, [r4, r2]
 8019bc6:	e7c9      	b.n	8019b5c <_malloc_r+0x20>
 8019bc8:	4622      	mov	r2, r4
 8019bca:	6864      	ldr	r4, [r4, #4]
 8019bcc:	e7cc      	b.n	8019b68 <_malloc_r+0x2c>
 8019bce:	1cc4      	adds	r4, r0, #3
 8019bd0:	f024 0403 	bic.w	r4, r4, #3
 8019bd4:	42a0      	cmp	r0, r4
 8019bd6:	d0e3      	beq.n	8019ba0 <_malloc_r+0x64>
 8019bd8:	1a21      	subs	r1, r4, r0
 8019bda:	4630      	mov	r0, r6
 8019bdc:	f000 fe8a 	bl	801a8f4 <_sbrk_r>
 8019be0:	3001      	adds	r0, #1
 8019be2:	d1dd      	bne.n	8019ba0 <_malloc_r+0x64>
 8019be4:	e7cf      	b.n	8019b86 <_malloc_r+0x4a>
 8019be6:	bf00      	nop
 8019be8:	20005a18 	.word	0x20005a18
 8019bec:	20005a1c 	.word	0x20005a1c

08019bf0 <__cvt>:
 8019bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019bf4:	ec55 4b10 	vmov	r4, r5, d0
 8019bf8:	2d00      	cmp	r5, #0
 8019bfa:	460e      	mov	r6, r1
 8019bfc:	4619      	mov	r1, r3
 8019bfe:	462b      	mov	r3, r5
 8019c00:	bfbb      	ittet	lt
 8019c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019c06:	461d      	movlt	r5, r3
 8019c08:	2300      	movge	r3, #0
 8019c0a:	232d      	movlt	r3, #45	; 0x2d
 8019c0c:	700b      	strb	r3, [r1, #0]
 8019c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019c14:	4691      	mov	r9, r2
 8019c16:	f023 0820 	bic.w	r8, r3, #32
 8019c1a:	bfbc      	itt	lt
 8019c1c:	4622      	movlt	r2, r4
 8019c1e:	4614      	movlt	r4, r2
 8019c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019c24:	d005      	beq.n	8019c32 <__cvt+0x42>
 8019c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019c2a:	d100      	bne.n	8019c2e <__cvt+0x3e>
 8019c2c:	3601      	adds	r6, #1
 8019c2e:	2102      	movs	r1, #2
 8019c30:	e000      	b.n	8019c34 <__cvt+0x44>
 8019c32:	2103      	movs	r1, #3
 8019c34:	ab03      	add	r3, sp, #12
 8019c36:	9301      	str	r3, [sp, #4]
 8019c38:	ab02      	add	r3, sp, #8
 8019c3a:	9300      	str	r3, [sp, #0]
 8019c3c:	ec45 4b10 	vmov	d0, r4, r5
 8019c40:	4653      	mov	r3, sl
 8019c42:	4632      	mov	r2, r6
 8019c44:	f001 feb0 	bl	801b9a8 <_dtoa_r>
 8019c48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019c4c:	4607      	mov	r7, r0
 8019c4e:	d102      	bne.n	8019c56 <__cvt+0x66>
 8019c50:	f019 0f01 	tst.w	r9, #1
 8019c54:	d022      	beq.n	8019c9c <__cvt+0xac>
 8019c56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019c5a:	eb07 0906 	add.w	r9, r7, r6
 8019c5e:	d110      	bne.n	8019c82 <__cvt+0x92>
 8019c60:	783b      	ldrb	r3, [r7, #0]
 8019c62:	2b30      	cmp	r3, #48	; 0x30
 8019c64:	d10a      	bne.n	8019c7c <__cvt+0x8c>
 8019c66:	2200      	movs	r2, #0
 8019c68:	2300      	movs	r3, #0
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	4629      	mov	r1, r5
 8019c6e:	f7e6 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8019c72:	b918      	cbnz	r0, 8019c7c <__cvt+0x8c>
 8019c74:	f1c6 0601 	rsb	r6, r6, #1
 8019c78:	f8ca 6000 	str.w	r6, [sl]
 8019c7c:	f8da 3000 	ldr.w	r3, [sl]
 8019c80:	4499      	add	r9, r3
 8019c82:	2200      	movs	r2, #0
 8019c84:	2300      	movs	r3, #0
 8019c86:	4620      	mov	r0, r4
 8019c88:	4629      	mov	r1, r5
 8019c8a:	f7e6 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8019c8e:	b108      	cbz	r0, 8019c94 <__cvt+0xa4>
 8019c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8019c94:	2230      	movs	r2, #48	; 0x30
 8019c96:	9b03      	ldr	r3, [sp, #12]
 8019c98:	454b      	cmp	r3, r9
 8019c9a:	d307      	bcc.n	8019cac <__cvt+0xbc>
 8019c9c:	9b03      	ldr	r3, [sp, #12]
 8019c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ca0:	1bdb      	subs	r3, r3, r7
 8019ca2:	4638      	mov	r0, r7
 8019ca4:	6013      	str	r3, [r2, #0]
 8019ca6:	b004      	add	sp, #16
 8019ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cac:	1c59      	adds	r1, r3, #1
 8019cae:	9103      	str	r1, [sp, #12]
 8019cb0:	701a      	strb	r2, [r3, #0]
 8019cb2:	e7f0      	b.n	8019c96 <__cvt+0xa6>

08019cb4 <__exponent>:
 8019cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	2900      	cmp	r1, #0
 8019cba:	bfb8      	it	lt
 8019cbc:	4249      	neglt	r1, r1
 8019cbe:	f803 2b02 	strb.w	r2, [r3], #2
 8019cc2:	bfb4      	ite	lt
 8019cc4:	222d      	movlt	r2, #45	; 0x2d
 8019cc6:	222b      	movge	r2, #43	; 0x2b
 8019cc8:	2909      	cmp	r1, #9
 8019cca:	7042      	strb	r2, [r0, #1]
 8019ccc:	dd2a      	ble.n	8019d24 <__exponent+0x70>
 8019cce:	f10d 0407 	add.w	r4, sp, #7
 8019cd2:	46a4      	mov	ip, r4
 8019cd4:	270a      	movs	r7, #10
 8019cd6:	46a6      	mov	lr, r4
 8019cd8:	460a      	mov	r2, r1
 8019cda:	fb91 f6f7 	sdiv	r6, r1, r7
 8019cde:	fb07 1516 	mls	r5, r7, r6, r1
 8019ce2:	3530      	adds	r5, #48	; 0x30
 8019ce4:	2a63      	cmp	r2, #99	; 0x63
 8019ce6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019cee:	4631      	mov	r1, r6
 8019cf0:	dcf1      	bgt.n	8019cd6 <__exponent+0x22>
 8019cf2:	3130      	adds	r1, #48	; 0x30
 8019cf4:	f1ae 0502 	sub.w	r5, lr, #2
 8019cf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019cfc:	1c44      	adds	r4, r0, #1
 8019cfe:	4629      	mov	r1, r5
 8019d00:	4561      	cmp	r1, ip
 8019d02:	d30a      	bcc.n	8019d1a <__exponent+0x66>
 8019d04:	f10d 0209 	add.w	r2, sp, #9
 8019d08:	eba2 020e 	sub.w	r2, r2, lr
 8019d0c:	4565      	cmp	r5, ip
 8019d0e:	bf88      	it	hi
 8019d10:	2200      	movhi	r2, #0
 8019d12:	4413      	add	r3, r2
 8019d14:	1a18      	subs	r0, r3, r0
 8019d16:	b003      	add	sp, #12
 8019d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019d22:	e7ed      	b.n	8019d00 <__exponent+0x4c>
 8019d24:	2330      	movs	r3, #48	; 0x30
 8019d26:	3130      	adds	r1, #48	; 0x30
 8019d28:	7083      	strb	r3, [r0, #2]
 8019d2a:	70c1      	strb	r1, [r0, #3]
 8019d2c:	1d03      	adds	r3, r0, #4
 8019d2e:	e7f1      	b.n	8019d14 <__exponent+0x60>

08019d30 <_printf_float>:
 8019d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d34:	ed2d 8b02 	vpush	{d8}
 8019d38:	b08d      	sub	sp, #52	; 0x34
 8019d3a:	460c      	mov	r4, r1
 8019d3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019d40:	4616      	mov	r6, r2
 8019d42:	461f      	mov	r7, r3
 8019d44:	4605      	mov	r5, r0
 8019d46:	f002 ff8b 	bl	801cc60 <_localeconv_r>
 8019d4a:	f8d0 a000 	ldr.w	sl, [r0]
 8019d4e:	4650      	mov	r0, sl
 8019d50:	f7e6 fa3e 	bl	80001d0 <strlen>
 8019d54:	2300      	movs	r3, #0
 8019d56:	930a      	str	r3, [sp, #40]	; 0x28
 8019d58:	6823      	ldr	r3, [r4, #0]
 8019d5a:	9305      	str	r3, [sp, #20]
 8019d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8019d60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019d64:	3307      	adds	r3, #7
 8019d66:	f023 0307 	bic.w	r3, r3, #7
 8019d6a:	f103 0208 	add.w	r2, r3, #8
 8019d6e:	f8c8 2000 	str.w	r2, [r8]
 8019d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019d7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019d82:	9307      	str	r3, [sp, #28]
 8019d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8019d88:	ee08 0a10 	vmov	s16, r0
 8019d8c:	4b9f      	ldr	r3, [pc, #636]	; (801a00c <_printf_float+0x2dc>)
 8019d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d96:	f7e6 fec9 	bl	8000b2c <__aeabi_dcmpun>
 8019d9a:	bb88      	cbnz	r0, 8019e00 <_printf_float+0xd0>
 8019d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019da0:	4b9a      	ldr	r3, [pc, #616]	; (801a00c <_printf_float+0x2dc>)
 8019da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019da6:	f7e6 fea3 	bl	8000af0 <__aeabi_dcmple>
 8019daa:	bb48      	cbnz	r0, 8019e00 <_printf_float+0xd0>
 8019dac:	2200      	movs	r2, #0
 8019dae:	2300      	movs	r3, #0
 8019db0:	4640      	mov	r0, r8
 8019db2:	4649      	mov	r1, r9
 8019db4:	f7e6 fe92 	bl	8000adc <__aeabi_dcmplt>
 8019db8:	b110      	cbz	r0, 8019dc0 <_printf_float+0x90>
 8019dba:	232d      	movs	r3, #45	; 0x2d
 8019dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019dc0:	4b93      	ldr	r3, [pc, #588]	; (801a010 <_printf_float+0x2e0>)
 8019dc2:	4894      	ldr	r0, [pc, #592]	; (801a014 <_printf_float+0x2e4>)
 8019dc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019dc8:	bf94      	ite	ls
 8019dca:	4698      	movls	r8, r3
 8019dcc:	4680      	movhi	r8, r0
 8019dce:	2303      	movs	r3, #3
 8019dd0:	6123      	str	r3, [r4, #16]
 8019dd2:	9b05      	ldr	r3, [sp, #20]
 8019dd4:	f023 0204 	bic.w	r2, r3, #4
 8019dd8:	6022      	str	r2, [r4, #0]
 8019dda:	f04f 0900 	mov.w	r9, #0
 8019dde:	9700      	str	r7, [sp, #0]
 8019de0:	4633      	mov	r3, r6
 8019de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8019de4:	4621      	mov	r1, r4
 8019de6:	4628      	mov	r0, r5
 8019de8:	f000 f9d8 	bl	801a19c <_printf_common>
 8019dec:	3001      	adds	r0, #1
 8019dee:	f040 8090 	bne.w	8019f12 <_printf_float+0x1e2>
 8019df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019df6:	b00d      	add	sp, #52	; 0x34
 8019df8:	ecbd 8b02 	vpop	{d8}
 8019dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e00:	4642      	mov	r2, r8
 8019e02:	464b      	mov	r3, r9
 8019e04:	4640      	mov	r0, r8
 8019e06:	4649      	mov	r1, r9
 8019e08:	f7e6 fe90 	bl	8000b2c <__aeabi_dcmpun>
 8019e0c:	b140      	cbz	r0, 8019e20 <_printf_float+0xf0>
 8019e0e:	464b      	mov	r3, r9
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	bfbc      	itt	lt
 8019e14:	232d      	movlt	r3, #45	; 0x2d
 8019e16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019e1a:	487f      	ldr	r0, [pc, #508]	; (801a018 <_printf_float+0x2e8>)
 8019e1c:	4b7f      	ldr	r3, [pc, #508]	; (801a01c <_printf_float+0x2ec>)
 8019e1e:	e7d1      	b.n	8019dc4 <_printf_float+0x94>
 8019e20:	6863      	ldr	r3, [r4, #4]
 8019e22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019e26:	9206      	str	r2, [sp, #24]
 8019e28:	1c5a      	adds	r2, r3, #1
 8019e2a:	d13f      	bne.n	8019eac <_printf_float+0x17c>
 8019e2c:	2306      	movs	r3, #6
 8019e2e:	6063      	str	r3, [r4, #4]
 8019e30:	9b05      	ldr	r3, [sp, #20]
 8019e32:	6861      	ldr	r1, [r4, #4]
 8019e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019e38:	2300      	movs	r3, #0
 8019e3a:	9303      	str	r3, [sp, #12]
 8019e3c:	ab0a      	add	r3, sp, #40	; 0x28
 8019e3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019e42:	ab09      	add	r3, sp, #36	; 0x24
 8019e44:	ec49 8b10 	vmov	d0, r8, r9
 8019e48:	9300      	str	r3, [sp, #0]
 8019e4a:	6022      	str	r2, [r4, #0]
 8019e4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019e50:	4628      	mov	r0, r5
 8019e52:	f7ff fecd 	bl	8019bf0 <__cvt>
 8019e56:	9b06      	ldr	r3, [sp, #24]
 8019e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e5a:	2b47      	cmp	r3, #71	; 0x47
 8019e5c:	4680      	mov	r8, r0
 8019e5e:	d108      	bne.n	8019e72 <_printf_float+0x142>
 8019e60:	1cc8      	adds	r0, r1, #3
 8019e62:	db02      	blt.n	8019e6a <_printf_float+0x13a>
 8019e64:	6863      	ldr	r3, [r4, #4]
 8019e66:	4299      	cmp	r1, r3
 8019e68:	dd41      	ble.n	8019eee <_printf_float+0x1be>
 8019e6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019e6e:	fa5f fb8b 	uxtb.w	fp, fp
 8019e72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019e76:	d820      	bhi.n	8019eba <_printf_float+0x18a>
 8019e78:	3901      	subs	r1, #1
 8019e7a:	465a      	mov	r2, fp
 8019e7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019e80:	9109      	str	r1, [sp, #36]	; 0x24
 8019e82:	f7ff ff17 	bl	8019cb4 <__exponent>
 8019e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e88:	1813      	adds	r3, r2, r0
 8019e8a:	2a01      	cmp	r2, #1
 8019e8c:	4681      	mov	r9, r0
 8019e8e:	6123      	str	r3, [r4, #16]
 8019e90:	dc02      	bgt.n	8019e98 <_printf_float+0x168>
 8019e92:	6822      	ldr	r2, [r4, #0]
 8019e94:	07d2      	lsls	r2, r2, #31
 8019e96:	d501      	bpl.n	8019e9c <_printf_float+0x16c>
 8019e98:	3301      	adds	r3, #1
 8019e9a:	6123      	str	r3, [r4, #16]
 8019e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d09c      	beq.n	8019dde <_printf_float+0xae>
 8019ea4:	232d      	movs	r3, #45	; 0x2d
 8019ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019eaa:	e798      	b.n	8019dde <_printf_float+0xae>
 8019eac:	9a06      	ldr	r2, [sp, #24]
 8019eae:	2a47      	cmp	r2, #71	; 0x47
 8019eb0:	d1be      	bne.n	8019e30 <_printf_float+0x100>
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1bc      	bne.n	8019e30 <_printf_float+0x100>
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	e7b9      	b.n	8019e2e <_printf_float+0xfe>
 8019eba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019ebe:	d118      	bne.n	8019ef2 <_printf_float+0x1c2>
 8019ec0:	2900      	cmp	r1, #0
 8019ec2:	6863      	ldr	r3, [r4, #4]
 8019ec4:	dd0b      	ble.n	8019ede <_printf_float+0x1ae>
 8019ec6:	6121      	str	r1, [r4, #16]
 8019ec8:	b913      	cbnz	r3, 8019ed0 <_printf_float+0x1a0>
 8019eca:	6822      	ldr	r2, [r4, #0]
 8019ecc:	07d0      	lsls	r0, r2, #31
 8019ece:	d502      	bpl.n	8019ed6 <_printf_float+0x1a6>
 8019ed0:	3301      	adds	r3, #1
 8019ed2:	440b      	add	r3, r1
 8019ed4:	6123      	str	r3, [r4, #16]
 8019ed6:	65a1      	str	r1, [r4, #88]	; 0x58
 8019ed8:	f04f 0900 	mov.w	r9, #0
 8019edc:	e7de      	b.n	8019e9c <_printf_float+0x16c>
 8019ede:	b913      	cbnz	r3, 8019ee6 <_printf_float+0x1b6>
 8019ee0:	6822      	ldr	r2, [r4, #0]
 8019ee2:	07d2      	lsls	r2, r2, #31
 8019ee4:	d501      	bpl.n	8019eea <_printf_float+0x1ba>
 8019ee6:	3302      	adds	r3, #2
 8019ee8:	e7f4      	b.n	8019ed4 <_printf_float+0x1a4>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e7f2      	b.n	8019ed4 <_printf_float+0x1a4>
 8019eee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ef4:	4299      	cmp	r1, r3
 8019ef6:	db05      	blt.n	8019f04 <_printf_float+0x1d4>
 8019ef8:	6823      	ldr	r3, [r4, #0]
 8019efa:	6121      	str	r1, [r4, #16]
 8019efc:	07d8      	lsls	r0, r3, #31
 8019efe:	d5ea      	bpl.n	8019ed6 <_printf_float+0x1a6>
 8019f00:	1c4b      	adds	r3, r1, #1
 8019f02:	e7e7      	b.n	8019ed4 <_printf_float+0x1a4>
 8019f04:	2900      	cmp	r1, #0
 8019f06:	bfd4      	ite	le
 8019f08:	f1c1 0202 	rsble	r2, r1, #2
 8019f0c:	2201      	movgt	r2, #1
 8019f0e:	4413      	add	r3, r2
 8019f10:	e7e0      	b.n	8019ed4 <_printf_float+0x1a4>
 8019f12:	6823      	ldr	r3, [r4, #0]
 8019f14:	055a      	lsls	r2, r3, #21
 8019f16:	d407      	bmi.n	8019f28 <_printf_float+0x1f8>
 8019f18:	6923      	ldr	r3, [r4, #16]
 8019f1a:	4642      	mov	r2, r8
 8019f1c:	4631      	mov	r1, r6
 8019f1e:	4628      	mov	r0, r5
 8019f20:	47b8      	blx	r7
 8019f22:	3001      	adds	r0, #1
 8019f24:	d12c      	bne.n	8019f80 <_printf_float+0x250>
 8019f26:	e764      	b.n	8019df2 <_printf_float+0xc2>
 8019f28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019f2c:	f240 80e0 	bls.w	801a0f0 <_printf_float+0x3c0>
 8019f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019f34:	2200      	movs	r2, #0
 8019f36:	2300      	movs	r3, #0
 8019f38:	f7e6 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d034      	beq.n	8019faa <_printf_float+0x27a>
 8019f40:	4a37      	ldr	r2, [pc, #220]	; (801a020 <_printf_float+0x2f0>)
 8019f42:	2301      	movs	r3, #1
 8019f44:	4631      	mov	r1, r6
 8019f46:	4628      	mov	r0, r5
 8019f48:	47b8      	blx	r7
 8019f4a:	3001      	adds	r0, #1
 8019f4c:	f43f af51 	beq.w	8019df2 <_printf_float+0xc2>
 8019f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f54:	429a      	cmp	r2, r3
 8019f56:	db02      	blt.n	8019f5e <_printf_float+0x22e>
 8019f58:	6823      	ldr	r3, [r4, #0]
 8019f5a:	07d8      	lsls	r0, r3, #31
 8019f5c:	d510      	bpl.n	8019f80 <_printf_float+0x250>
 8019f5e:	ee18 3a10 	vmov	r3, s16
 8019f62:	4652      	mov	r2, sl
 8019f64:	4631      	mov	r1, r6
 8019f66:	4628      	mov	r0, r5
 8019f68:	47b8      	blx	r7
 8019f6a:	3001      	adds	r0, #1
 8019f6c:	f43f af41 	beq.w	8019df2 <_printf_float+0xc2>
 8019f70:	f04f 0800 	mov.w	r8, #0
 8019f74:	f104 091a 	add.w	r9, r4, #26
 8019f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f7a:	3b01      	subs	r3, #1
 8019f7c:	4543      	cmp	r3, r8
 8019f7e:	dc09      	bgt.n	8019f94 <_printf_float+0x264>
 8019f80:	6823      	ldr	r3, [r4, #0]
 8019f82:	079b      	lsls	r3, r3, #30
 8019f84:	f100 8105 	bmi.w	801a192 <_printf_float+0x462>
 8019f88:	68e0      	ldr	r0, [r4, #12]
 8019f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f8c:	4298      	cmp	r0, r3
 8019f8e:	bfb8      	it	lt
 8019f90:	4618      	movlt	r0, r3
 8019f92:	e730      	b.n	8019df6 <_printf_float+0xc6>
 8019f94:	2301      	movs	r3, #1
 8019f96:	464a      	mov	r2, r9
 8019f98:	4631      	mov	r1, r6
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	47b8      	blx	r7
 8019f9e:	3001      	adds	r0, #1
 8019fa0:	f43f af27 	beq.w	8019df2 <_printf_float+0xc2>
 8019fa4:	f108 0801 	add.w	r8, r8, #1
 8019fa8:	e7e6      	b.n	8019f78 <_printf_float+0x248>
 8019faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	dc39      	bgt.n	801a024 <_printf_float+0x2f4>
 8019fb0:	4a1b      	ldr	r2, [pc, #108]	; (801a020 <_printf_float+0x2f0>)
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	4628      	mov	r0, r5
 8019fb8:	47b8      	blx	r7
 8019fba:	3001      	adds	r0, #1
 8019fbc:	f43f af19 	beq.w	8019df2 <_printf_float+0xc2>
 8019fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019fc4:	4313      	orrs	r3, r2
 8019fc6:	d102      	bne.n	8019fce <_printf_float+0x29e>
 8019fc8:	6823      	ldr	r3, [r4, #0]
 8019fca:	07d9      	lsls	r1, r3, #31
 8019fcc:	d5d8      	bpl.n	8019f80 <_printf_float+0x250>
 8019fce:	ee18 3a10 	vmov	r3, s16
 8019fd2:	4652      	mov	r2, sl
 8019fd4:	4631      	mov	r1, r6
 8019fd6:	4628      	mov	r0, r5
 8019fd8:	47b8      	blx	r7
 8019fda:	3001      	adds	r0, #1
 8019fdc:	f43f af09 	beq.w	8019df2 <_printf_float+0xc2>
 8019fe0:	f04f 0900 	mov.w	r9, #0
 8019fe4:	f104 0a1a 	add.w	sl, r4, #26
 8019fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fea:	425b      	negs	r3, r3
 8019fec:	454b      	cmp	r3, r9
 8019fee:	dc01      	bgt.n	8019ff4 <_printf_float+0x2c4>
 8019ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ff2:	e792      	b.n	8019f1a <_printf_float+0x1ea>
 8019ff4:	2301      	movs	r3, #1
 8019ff6:	4652      	mov	r2, sl
 8019ff8:	4631      	mov	r1, r6
 8019ffa:	4628      	mov	r0, r5
 8019ffc:	47b8      	blx	r7
 8019ffe:	3001      	adds	r0, #1
 801a000:	f43f aef7 	beq.w	8019df2 <_printf_float+0xc2>
 801a004:	f109 0901 	add.w	r9, r9, #1
 801a008:	e7ee      	b.n	8019fe8 <_printf_float+0x2b8>
 801a00a:	bf00      	nop
 801a00c:	7fefffff 	.word	0x7fefffff
 801a010:	080202a8 	.word	0x080202a8
 801a014:	080202ac 	.word	0x080202ac
 801a018:	080202b4 	.word	0x080202b4
 801a01c:	080202b0 	.word	0x080202b0
 801a020:	080202b8 	.word	0x080202b8
 801a024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a028:	429a      	cmp	r2, r3
 801a02a:	bfa8      	it	ge
 801a02c:	461a      	movge	r2, r3
 801a02e:	2a00      	cmp	r2, #0
 801a030:	4691      	mov	r9, r2
 801a032:	dc37      	bgt.n	801a0a4 <_printf_float+0x374>
 801a034:	f04f 0b00 	mov.w	fp, #0
 801a038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a03c:	f104 021a 	add.w	r2, r4, #26
 801a040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a042:	9305      	str	r3, [sp, #20]
 801a044:	eba3 0309 	sub.w	r3, r3, r9
 801a048:	455b      	cmp	r3, fp
 801a04a:	dc33      	bgt.n	801a0b4 <_printf_float+0x384>
 801a04c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a050:	429a      	cmp	r2, r3
 801a052:	db3b      	blt.n	801a0cc <_printf_float+0x39c>
 801a054:	6823      	ldr	r3, [r4, #0]
 801a056:	07da      	lsls	r2, r3, #31
 801a058:	d438      	bmi.n	801a0cc <_printf_float+0x39c>
 801a05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a05c:	9b05      	ldr	r3, [sp, #20]
 801a05e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a060:	1ad3      	subs	r3, r2, r3
 801a062:	eba2 0901 	sub.w	r9, r2, r1
 801a066:	4599      	cmp	r9, r3
 801a068:	bfa8      	it	ge
 801a06a:	4699      	movge	r9, r3
 801a06c:	f1b9 0f00 	cmp.w	r9, #0
 801a070:	dc35      	bgt.n	801a0de <_printf_float+0x3ae>
 801a072:	f04f 0800 	mov.w	r8, #0
 801a076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a07a:	f104 0a1a 	add.w	sl, r4, #26
 801a07e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a082:	1a9b      	subs	r3, r3, r2
 801a084:	eba3 0309 	sub.w	r3, r3, r9
 801a088:	4543      	cmp	r3, r8
 801a08a:	f77f af79 	ble.w	8019f80 <_printf_float+0x250>
 801a08e:	2301      	movs	r3, #1
 801a090:	4652      	mov	r2, sl
 801a092:	4631      	mov	r1, r6
 801a094:	4628      	mov	r0, r5
 801a096:	47b8      	blx	r7
 801a098:	3001      	adds	r0, #1
 801a09a:	f43f aeaa 	beq.w	8019df2 <_printf_float+0xc2>
 801a09e:	f108 0801 	add.w	r8, r8, #1
 801a0a2:	e7ec      	b.n	801a07e <_printf_float+0x34e>
 801a0a4:	4613      	mov	r3, r2
 801a0a6:	4631      	mov	r1, r6
 801a0a8:	4642      	mov	r2, r8
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	47b8      	blx	r7
 801a0ae:	3001      	adds	r0, #1
 801a0b0:	d1c0      	bne.n	801a034 <_printf_float+0x304>
 801a0b2:	e69e      	b.n	8019df2 <_printf_float+0xc2>
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	4631      	mov	r1, r6
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	9205      	str	r2, [sp, #20]
 801a0bc:	47b8      	blx	r7
 801a0be:	3001      	adds	r0, #1
 801a0c0:	f43f ae97 	beq.w	8019df2 <_printf_float+0xc2>
 801a0c4:	9a05      	ldr	r2, [sp, #20]
 801a0c6:	f10b 0b01 	add.w	fp, fp, #1
 801a0ca:	e7b9      	b.n	801a040 <_printf_float+0x310>
 801a0cc:	ee18 3a10 	vmov	r3, s16
 801a0d0:	4652      	mov	r2, sl
 801a0d2:	4631      	mov	r1, r6
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	47b8      	blx	r7
 801a0d8:	3001      	adds	r0, #1
 801a0da:	d1be      	bne.n	801a05a <_printf_float+0x32a>
 801a0dc:	e689      	b.n	8019df2 <_printf_float+0xc2>
 801a0de:	9a05      	ldr	r2, [sp, #20]
 801a0e0:	464b      	mov	r3, r9
 801a0e2:	4442      	add	r2, r8
 801a0e4:	4631      	mov	r1, r6
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	47b8      	blx	r7
 801a0ea:	3001      	adds	r0, #1
 801a0ec:	d1c1      	bne.n	801a072 <_printf_float+0x342>
 801a0ee:	e680      	b.n	8019df2 <_printf_float+0xc2>
 801a0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a0f2:	2a01      	cmp	r2, #1
 801a0f4:	dc01      	bgt.n	801a0fa <_printf_float+0x3ca>
 801a0f6:	07db      	lsls	r3, r3, #31
 801a0f8:	d538      	bpl.n	801a16c <_printf_float+0x43c>
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	4642      	mov	r2, r8
 801a0fe:	4631      	mov	r1, r6
 801a100:	4628      	mov	r0, r5
 801a102:	47b8      	blx	r7
 801a104:	3001      	adds	r0, #1
 801a106:	f43f ae74 	beq.w	8019df2 <_printf_float+0xc2>
 801a10a:	ee18 3a10 	vmov	r3, s16
 801a10e:	4652      	mov	r2, sl
 801a110:	4631      	mov	r1, r6
 801a112:	4628      	mov	r0, r5
 801a114:	47b8      	blx	r7
 801a116:	3001      	adds	r0, #1
 801a118:	f43f ae6b 	beq.w	8019df2 <_printf_float+0xc2>
 801a11c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a120:	2200      	movs	r2, #0
 801a122:	2300      	movs	r3, #0
 801a124:	f7e6 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 801a128:	b9d8      	cbnz	r0, 801a162 <_printf_float+0x432>
 801a12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a12c:	f108 0201 	add.w	r2, r8, #1
 801a130:	3b01      	subs	r3, #1
 801a132:	4631      	mov	r1, r6
 801a134:	4628      	mov	r0, r5
 801a136:	47b8      	blx	r7
 801a138:	3001      	adds	r0, #1
 801a13a:	d10e      	bne.n	801a15a <_printf_float+0x42a>
 801a13c:	e659      	b.n	8019df2 <_printf_float+0xc2>
 801a13e:	2301      	movs	r3, #1
 801a140:	4652      	mov	r2, sl
 801a142:	4631      	mov	r1, r6
 801a144:	4628      	mov	r0, r5
 801a146:	47b8      	blx	r7
 801a148:	3001      	adds	r0, #1
 801a14a:	f43f ae52 	beq.w	8019df2 <_printf_float+0xc2>
 801a14e:	f108 0801 	add.w	r8, r8, #1
 801a152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a154:	3b01      	subs	r3, #1
 801a156:	4543      	cmp	r3, r8
 801a158:	dcf1      	bgt.n	801a13e <_printf_float+0x40e>
 801a15a:	464b      	mov	r3, r9
 801a15c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a160:	e6dc      	b.n	8019f1c <_printf_float+0x1ec>
 801a162:	f04f 0800 	mov.w	r8, #0
 801a166:	f104 0a1a 	add.w	sl, r4, #26
 801a16a:	e7f2      	b.n	801a152 <_printf_float+0x422>
 801a16c:	2301      	movs	r3, #1
 801a16e:	4642      	mov	r2, r8
 801a170:	e7df      	b.n	801a132 <_printf_float+0x402>
 801a172:	2301      	movs	r3, #1
 801a174:	464a      	mov	r2, r9
 801a176:	4631      	mov	r1, r6
 801a178:	4628      	mov	r0, r5
 801a17a:	47b8      	blx	r7
 801a17c:	3001      	adds	r0, #1
 801a17e:	f43f ae38 	beq.w	8019df2 <_printf_float+0xc2>
 801a182:	f108 0801 	add.w	r8, r8, #1
 801a186:	68e3      	ldr	r3, [r4, #12]
 801a188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a18a:	1a5b      	subs	r3, r3, r1
 801a18c:	4543      	cmp	r3, r8
 801a18e:	dcf0      	bgt.n	801a172 <_printf_float+0x442>
 801a190:	e6fa      	b.n	8019f88 <_printf_float+0x258>
 801a192:	f04f 0800 	mov.w	r8, #0
 801a196:	f104 0919 	add.w	r9, r4, #25
 801a19a:	e7f4      	b.n	801a186 <_printf_float+0x456>

0801a19c <_printf_common>:
 801a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1a0:	4616      	mov	r6, r2
 801a1a2:	4699      	mov	r9, r3
 801a1a4:	688a      	ldr	r2, [r1, #8]
 801a1a6:	690b      	ldr	r3, [r1, #16]
 801a1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a1ac:	4293      	cmp	r3, r2
 801a1ae:	bfb8      	it	lt
 801a1b0:	4613      	movlt	r3, r2
 801a1b2:	6033      	str	r3, [r6, #0]
 801a1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a1b8:	4607      	mov	r7, r0
 801a1ba:	460c      	mov	r4, r1
 801a1bc:	b10a      	cbz	r2, 801a1c2 <_printf_common+0x26>
 801a1be:	3301      	adds	r3, #1
 801a1c0:	6033      	str	r3, [r6, #0]
 801a1c2:	6823      	ldr	r3, [r4, #0]
 801a1c4:	0699      	lsls	r1, r3, #26
 801a1c6:	bf42      	ittt	mi
 801a1c8:	6833      	ldrmi	r3, [r6, #0]
 801a1ca:	3302      	addmi	r3, #2
 801a1cc:	6033      	strmi	r3, [r6, #0]
 801a1ce:	6825      	ldr	r5, [r4, #0]
 801a1d0:	f015 0506 	ands.w	r5, r5, #6
 801a1d4:	d106      	bne.n	801a1e4 <_printf_common+0x48>
 801a1d6:	f104 0a19 	add.w	sl, r4, #25
 801a1da:	68e3      	ldr	r3, [r4, #12]
 801a1dc:	6832      	ldr	r2, [r6, #0]
 801a1de:	1a9b      	subs	r3, r3, r2
 801a1e0:	42ab      	cmp	r3, r5
 801a1e2:	dc26      	bgt.n	801a232 <_printf_common+0x96>
 801a1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a1e8:	1e13      	subs	r3, r2, #0
 801a1ea:	6822      	ldr	r2, [r4, #0]
 801a1ec:	bf18      	it	ne
 801a1ee:	2301      	movne	r3, #1
 801a1f0:	0692      	lsls	r2, r2, #26
 801a1f2:	d42b      	bmi.n	801a24c <_printf_common+0xb0>
 801a1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1f8:	4649      	mov	r1, r9
 801a1fa:	4638      	mov	r0, r7
 801a1fc:	47c0      	blx	r8
 801a1fe:	3001      	adds	r0, #1
 801a200:	d01e      	beq.n	801a240 <_printf_common+0xa4>
 801a202:	6823      	ldr	r3, [r4, #0]
 801a204:	68e5      	ldr	r5, [r4, #12]
 801a206:	6832      	ldr	r2, [r6, #0]
 801a208:	f003 0306 	and.w	r3, r3, #6
 801a20c:	2b04      	cmp	r3, #4
 801a20e:	bf08      	it	eq
 801a210:	1aad      	subeq	r5, r5, r2
 801a212:	68a3      	ldr	r3, [r4, #8]
 801a214:	6922      	ldr	r2, [r4, #16]
 801a216:	bf0c      	ite	eq
 801a218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a21c:	2500      	movne	r5, #0
 801a21e:	4293      	cmp	r3, r2
 801a220:	bfc4      	itt	gt
 801a222:	1a9b      	subgt	r3, r3, r2
 801a224:	18ed      	addgt	r5, r5, r3
 801a226:	2600      	movs	r6, #0
 801a228:	341a      	adds	r4, #26
 801a22a:	42b5      	cmp	r5, r6
 801a22c:	d11a      	bne.n	801a264 <_printf_common+0xc8>
 801a22e:	2000      	movs	r0, #0
 801a230:	e008      	b.n	801a244 <_printf_common+0xa8>
 801a232:	2301      	movs	r3, #1
 801a234:	4652      	mov	r2, sl
 801a236:	4649      	mov	r1, r9
 801a238:	4638      	mov	r0, r7
 801a23a:	47c0      	blx	r8
 801a23c:	3001      	adds	r0, #1
 801a23e:	d103      	bne.n	801a248 <_printf_common+0xac>
 801a240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a248:	3501      	adds	r5, #1
 801a24a:	e7c6      	b.n	801a1da <_printf_common+0x3e>
 801a24c:	18e1      	adds	r1, r4, r3
 801a24e:	1c5a      	adds	r2, r3, #1
 801a250:	2030      	movs	r0, #48	; 0x30
 801a252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a256:	4422      	add	r2, r4
 801a258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a260:	3302      	adds	r3, #2
 801a262:	e7c7      	b.n	801a1f4 <_printf_common+0x58>
 801a264:	2301      	movs	r3, #1
 801a266:	4622      	mov	r2, r4
 801a268:	4649      	mov	r1, r9
 801a26a:	4638      	mov	r0, r7
 801a26c:	47c0      	blx	r8
 801a26e:	3001      	adds	r0, #1
 801a270:	d0e6      	beq.n	801a240 <_printf_common+0xa4>
 801a272:	3601      	adds	r6, #1
 801a274:	e7d9      	b.n	801a22a <_printf_common+0x8e>
	...

0801a278 <_printf_i>:
 801a278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a27c:	460c      	mov	r4, r1
 801a27e:	4691      	mov	r9, r2
 801a280:	7e27      	ldrb	r7, [r4, #24]
 801a282:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a284:	2f78      	cmp	r7, #120	; 0x78
 801a286:	4680      	mov	r8, r0
 801a288:	469a      	mov	sl, r3
 801a28a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a28e:	d807      	bhi.n	801a2a0 <_printf_i+0x28>
 801a290:	2f62      	cmp	r7, #98	; 0x62
 801a292:	d80a      	bhi.n	801a2aa <_printf_i+0x32>
 801a294:	2f00      	cmp	r7, #0
 801a296:	f000 80d8 	beq.w	801a44a <_printf_i+0x1d2>
 801a29a:	2f58      	cmp	r7, #88	; 0x58
 801a29c:	f000 80a3 	beq.w	801a3e6 <_printf_i+0x16e>
 801a2a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a2a8:	e03a      	b.n	801a320 <_printf_i+0xa8>
 801a2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a2ae:	2b15      	cmp	r3, #21
 801a2b0:	d8f6      	bhi.n	801a2a0 <_printf_i+0x28>
 801a2b2:	a001      	add	r0, pc, #4	; (adr r0, 801a2b8 <_printf_i+0x40>)
 801a2b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a2b8:	0801a311 	.word	0x0801a311
 801a2bc:	0801a325 	.word	0x0801a325
 801a2c0:	0801a2a1 	.word	0x0801a2a1
 801a2c4:	0801a2a1 	.word	0x0801a2a1
 801a2c8:	0801a2a1 	.word	0x0801a2a1
 801a2cc:	0801a2a1 	.word	0x0801a2a1
 801a2d0:	0801a325 	.word	0x0801a325
 801a2d4:	0801a2a1 	.word	0x0801a2a1
 801a2d8:	0801a2a1 	.word	0x0801a2a1
 801a2dc:	0801a2a1 	.word	0x0801a2a1
 801a2e0:	0801a2a1 	.word	0x0801a2a1
 801a2e4:	0801a431 	.word	0x0801a431
 801a2e8:	0801a355 	.word	0x0801a355
 801a2ec:	0801a413 	.word	0x0801a413
 801a2f0:	0801a2a1 	.word	0x0801a2a1
 801a2f4:	0801a2a1 	.word	0x0801a2a1
 801a2f8:	0801a453 	.word	0x0801a453
 801a2fc:	0801a2a1 	.word	0x0801a2a1
 801a300:	0801a355 	.word	0x0801a355
 801a304:	0801a2a1 	.word	0x0801a2a1
 801a308:	0801a2a1 	.word	0x0801a2a1
 801a30c:	0801a41b 	.word	0x0801a41b
 801a310:	680b      	ldr	r3, [r1, #0]
 801a312:	1d1a      	adds	r2, r3, #4
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	600a      	str	r2, [r1, #0]
 801a318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a320:	2301      	movs	r3, #1
 801a322:	e0a3      	b.n	801a46c <_printf_i+0x1f4>
 801a324:	6825      	ldr	r5, [r4, #0]
 801a326:	6808      	ldr	r0, [r1, #0]
 801a328:	062e      	lsls	r6, r5, #24
 801a32a:	f100 0304 	add.w	r3, r0, #4
 801a32e:	d50a      	bpl.n	801a346 <_printf_i+0xce>
 801a330:	6805      	ldr	r5, [r0, #0]
 801a332:	600b      	str	r3, [r1, #0]
 801a334:	2d00      	cmp	r5, #0
 801a336:	da03      	bge.n	801a340 <_printf_i+0xc8>
 801a338:	232d      	movs	r3, #45	; 0x2d
 801a33a:	426d      	negs	r5, r5
 801a33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a340:	485e      	ldr	r0, [pc, #376]	; (801a4bc <_printf_i+0x244>)
 801a342:	230a      	movs	r3, #10
 801a344:	e019      	b.n	801a37a <_printf_i+0x102>
 801a346:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a34a:	6805      	ldr	r5, [r0, #0]
 801a34c:	600b      	str	r3, [r1, #0]
 801a34e:	bf18      	it	ne
 801a350:	b22d      	sxthne	r5, r5
 801a352:	e7ef      	b.n	801a334 <_printf_i+0xbc>
 801a354:	680b      	ldr	r3, [r1, #0]
 801a356:	6825      	ldr	r5, [r4, #0]
 801a358:	1d18      	adds	r0, r3, #4
 801a35a:	6008      	str	r0, [r1, #0]
 801a35c:	0628      	lsls	r0, r5, #24
 801a35e:	d501      	bpl.n	801a364 <_printf_i+0xec>
 801a360:	681d      	ldr	r5, [r3, #0]
 801a362:	e002      	b.n	801a36a <_printf_i+0xf2>
 801a364:	0669      	lsls	r1, r5, #25
 801a366:	d5fb      	bpl.n	801a360 <_printf_i+0xe8>
 801a368:	881d      	ldrh	r5, [r3, #0]
 801a36a:	4854      	ldr	r0, [pc, #336]	; (801a4bc <_printf_i+0x244>)
 801a36c:	2f6f      	cmp	r7, #111	; 0x6f
 801a36e:	bf0c      	ite	eq
 801a370:	2308      	moveq	r3, #8
 801a372:	230a      	movne	r3, #10
 801a374:	2100      	movs	r1, #0
 801a376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a37a:	6866      	ldr	r6, [r4, #4]
 801a37c:	60a6      	str	r6, [r4, #8]
 801a37e:	2e00      	cmp	r6, #0
 801a380:	bfa2      	ittt	ge
 801a382:	6821      	ldrge	r1, [r4, #0]
 801a384:	f021 0104 	bicge.w	r1, r1, #4
 801a388:	6021      	strge	r1, [r4, #0]
 801a38a:	b90d      	cbnz	r5, 801a390 <_printf_i+0x118>
 801a38c:	2e00      	cmp	r6, #0
 801a38e:	d04d      	beq.n	801a42c <_printf_i+0x1b4>
 801a390:	4616      	mov	r6, r2
 801a392:	fbb5 f1f3 	udiv	r1, r5, r3
 801a396:	fb03 5711 	mls	r7, r3, r1, r5
 801a39a:	5dc7      	ldrb	r7, [r0, r7]
 801a39c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a3a0:	462f      	mov	r7, r5
 801a3a2:	42bb      	cmp	r3, r7
 801a3a4:	460d      	mov	r5, r1
 801a3a6:	d9f4      	bls.n	801a392 <_printf_i+0x11a>
 801a3a8:	2b08      	cmp	r3, #8
 801a3aa:	d10b      	bne.n	801a3c4 <_printf_i+0x14c>
 801a3ac:	6823      	ldr	r3, [r4, #0]
 801a3ae:	07df      	lsls	r7, r3, #31
 801a3b0:	d508      	bpl.n	801a3c4 <_printf_i+0x14c>
 801a3b2:	6923      	ldr	r3, [r4, #16]
 801a3b4:	6861      	ldr	r1, [r4, #4]
 801a3b6:	4299      	cmp	r1, r3
 801a3b8:	bfde      	ittt	le
 801a3ba:	2330      	movle	r3, #48	; 0x30
 801a3bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a3c4:	1b92      	subs	r2, r2, r6
 801a3c6:	6122      	str	r2, [r4, #16]
 801a3c8:	f8cd a000 	str.w	sl, [sp]
 801a3cc:	464b      	mov	r3, r9
 801a3ce:	aa03      	add	r2, sp, #12
 801a3d0:	4621      	mov	r1, r4
 801a3d2:	4640      	mov	r0, r8
 801a3d4:	f7ff fee2 	bl	801a19c <_printf_common>
 801a3d8:	3001      	adds	r0, #1
 801a3da:	d14c      	bne.n	801a476 <_printf_i+0x1fe>
 801a3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3e0:	b004      	add	sp, #16
 801a3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e6:	4835      	ldr	r0, [pc, #212]	; (801a4bc <_printf_i+0x244>)
 801a3e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a3ec:	6823      	ldr	r3, [r4, #0]
 801a3ee:	680e      	ldr	r6, [r1, #0]
 801a3f0:	061f      	lsls	r7, r3, #24
 801a3f2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a3f6:	600e      	str	r6, [r1, #0]
 801a3f8:	d514      	bpl.n	801a424 <_printf_i+0x1ac>
 801a3fa:	07d9      	lsls	r1, r3, #31
 801a3fc:	bf44      	itt	mi
 801a3fe:	f043 0320 	orrmi.w	r3, r3, #32
 801a402:	6023      	strmi	r3, [r4, #0]
 801a404:	b91d      	cbnz	r5, 801a40e <_printf_i+0x196>
 801a406:	6823      	ldr	r3, [r4, #0]
 801a408:	f023 0320 	bic.w	r3, r3, #32
 801a40c:	6023      	str	r3, [r4, #0]
 801a40e:	2310      	movs	r3, #16
 801a410:	e7b0      	b.n	801a374 <_printf_i+0xfc>
 801a412:	6823      	ldr	r3, [r4, #0]
 801a414:	f043 0320 	orr.w	r3, r3, #32
 801a418:	6023      	str	r3, [r4, #0]
 801a41a:	2378      	movs	r3, #120	; 0x78
 801a41c:	4828      	ldr	r0, [pc, #160]	; (801a4c0 <_printf_i+0x248>)
 801a41e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a422:	e7e3      	b.n	801a3ec <_printf_i+0x174>
 801a424:	065e      	lsls	r6, r3, #25
 801a426:	bf48      	it	mi
 801a428:	b2ad      	uxthmi	r5, r5
 801a42a:	e7e6      	b.n	801a3fa <_printf_i+0x182>
 801a42c:	4616      	mov	r6, r2
 801a42e:	e7bb      	b.n	801a3a8 <_printf_i+0x130>
 801a430:	680b      	ldr	r3, [r1, #0]
 801a432:	6826      	ldr	r6, [r4, #0]
 801a434:	6960      	ldr	r0, [r4, #20]
 801a436:	1d1d      	adds	r5, r3, #4
 801a438:	600d      	str	r5, [r1, #0]
 801a43a:	0635      	lsls	r5, r6, #24
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	d501      	bpl.n	801a444 <_printf_i+0x1cc>
 801a440:	6018      	str	r0, [r3, #0]
 801a442:	e002      	b.n	801a44a <_printf_i+0x1d2>
 801a444:	0671      	lsls	r1, r6, #25
 801a446:	d5fb      	bpl.n	801a440 <_printf_i+0x1c8>
 801a448:	8018      	strh	r0, [r3, #0]
 801a44a:	2300      	movs	r3, #0
 801a44c:	6123      	str	r3, [r4, #16]
 801a44e:	4616      	mov	r6, r2
 801a450:	e7ba      	b.n	801a3c8 <_printf_i+0x150>
 801a452:	680b      	ldr	r3, [r1, #0]
 801a454:	1d1a      	adds	r2, r3, #4
 801a456:	600a      	str	r2, [r1, #0]
 801a458:	681e      	ldr	r6, [r3, #0]
 801a45a:	6862      	ldr	r2, [r4, #4]
 801a45c:	2100      	movs	r1, #0
 801a45e:	4630      	mov	r0, r6
 801a460:	f7e5 febe 	bl	80001e0 <memchr>
 801a464:	b108      	cbz	r0, 801a46a <_printf_i+0x1f2>
 801a466:	1b80      	subs	r0, r0, r6
 801a468:	6060      	str	r0, [r4, #4]
 801a46a:	6863      	ldr	r3, [r4, #4]
 801a46c:	6123      	str	r3, [r4, #16]
 801a46e:	2300      	movs	r3, #0
 801a470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a474:	e7a8      	b.n	801a3c8 <_printf_i+0x150>
 801a476:	6923      	ldr	r3, [r4, #16]
 801a478:	4632      	mov	r2, r6
 801a47a:	4649      	mov	r1, r9
 801a47c:	4640      	mov	r0, r8
 801a47e:	47d0      	blx	sl
 801a480:	3001      	adds	r0, #1
 801a482:	d0ab      	beq.n	801a3dc <_printf_i+0x164>
 801a484:	6823      	ldr	r3, [r4, #0]
 801a486:	079b      	lsls	r3, r3, #30
 801a488:	d413      	bmi.n	801a4b2 <_printf_i+0x23a>
 801a48a:	68e0      	ldr	r0, [r4, #12]
 801a48c:	9b03      	ldr	r3, [sp, #12]
 801a48e:	4298      	cmp	r0, r3
 801a490:	bfb8      	it	lt
 801a492:	4618      	movlt	r0, r3
 801a494:	e7a4      	b.n	801a3e0 <_printf_i+0x168>
 801a496:	2301      	movs	r3, #1
 801a498:	4632      	mov	r2, r6
 801a49a:	4649      	mov	r1, r9
 801a49c:	4640      	mov	r0, r8
 801a49e:	47d0      	blx	sl
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d09b      	beq.n	801a3dc <_printf_i+0x164>
 801a4a4:	3501      	adds	r5, #1
 801a4a6:	68e3      	ldr	r3, [r4, #12]
 801a4a8:	9903      	ldr	r1, [sp, #12]
 801a4aa:	1a5b      	subs	r3, r3, r1
 801a4ac:	42ab      	cmp	r3, r5
 801a4ae:	dcf2      	bgt.n	801a496 <_printf_i+0x21e>
 801a4b0:	e7eb      	b.n	801a48a <_printf_i+0x212>
 801a4b2:	2500      	movs	r5, #0
 801a4b4:	f104 0619 	add.w	r6, r4, #25
 801a4b8:	e7f5      	b.n	801a4a6 <_printf_i+0x22e>
 801a4ba:	bf00      	nop
 801a4bc:	080202ba 	.word	0x080202ba
 801a4c0:	080202cb 	.word	0x080202cb

0801a4c4 <_scanf_float>:
 801a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c8:	b087      	sub	sp, #28
 801a4ca:	4617      	mov	r7, r2
 801a4cc:	9303      	str	r3, [sp, #12]
 801a4ce:	688b      	ldr	r3, [r1, #8]
 801a4d0:	1e5a      	subs	r2, r3, #1
 801a4d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a4d6:	bf83      	ittte	hi
 801a4d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a4dc:	195b      	addhi	r3, r3, r5
 801a4de:	9302      	strhi	r3, [sp, #8]
 801a4e0:	2300      	movls	r3, #0
 801a4e2:	bf86      	itte	hi
 801a4e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a4e8:	608b      	strhi	r3, [r1, #8]
 801a4ea:	9302      	strls	r3, [sp, #8]
 801a4ec:	680b      	ldr	r3, [r1, #0]
 801a4ee:	468b      	mov	fp, r1
 801a4f0:	2500      	movs	r5, #0
 801a4f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a4f6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a4fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a4fe:	4680      	mov	r8, r0
 801a500:	460c      	mov	r4, r1
 801a502:	465e      	mov	r6, fp
 801a504:	46aa      	mov	sl, r5
 801a506:	46a9      	mov	r9, r5
 801a508:	9501      	str	r5, [sp, #4]
 801a50a:	68a2      	ldr	r2, [r4, #8]
 801a50c:	b152      	cbz	r2, 801a524 <_scanf_float+0x60>
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	781b      	ldrb	r3, [r3, #0]
 801a512:	2b4e      	cmp	r3, #78	; 0x4e
 801a514:	d864      	bhi.n	801a5e0 <_scanf_float+0x11c>
 801a516:	2b40      	cmp	r3, #64	; 0x40
 801a518:	d83c      	bhi.n	801a594 <_scanf_float+0xd0>
 801a51a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a51e:	b2c8      	uxtb	r0, r1
 801a520:	280e      	cmp	r0, #14
 801a522:	d93a      	bls.n	801a59a <_scanf_float+0xd6>
 801a524:	f1b9 0f00 	cmp.w	r9, #0
 801a528:	d003      	beq.n	801a532 <_scanf_float+0x6e>
 801a52a:	6823      	ldr	r3, [r4, #0]
 801a52c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a530:	6023      	str	r3, [r4, #0]
 801a532:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a536:	f1ba 0f01 	cmp.w	sl, #1
 801a53a:	f200 8113 	bhi.w	801a764 <_scanf_float+0x2a0>
 801a53e:	455e      	cmp	r6, fp
 801a540:	f200 8105 	bhi.w	801a74e <_scanf_float+0x28a>
 801a544:	2501      	movs	r5, #1
 801a546:	4628      	mov	r0, r5
 801a548:	b007      	add	sp, #28
 801a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a54e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a552:	2a0d      	cmp	r2, #13
 801a554:	d8e6      	bhi.n	801a524 <_scanf_float+0x60>
 801a556:	a101      	add	r1, pc, #4	; (adr r1, 801a55c <_scanf_float+0x98>)
 801a558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a55c:	0801a69b 	.word	0x0801a69b
 801a560:	0801a525 	.word	0x0801a525
 801a564:	0801a525 	.word	0x0801a525
 801a568:	0801a525 	.word	0x0801a525
 801a56c:	0801a6fb 	.word	0x0801a6fb
 801a570:	0801a6d3 	.word	0x0801a6d3
 801a574:	0801a525 	.word	0x0801a525
 801a578:	0801a525 	.word	0x0801a525
 801a57c:	0801a6a9 	.word	0x0801a6a9
 801a580:	0801a525 	.word	0x0801a525
 801a584:	0801a525 	.word	0x0801a525
 801a588:	0801a525 	.word	0x0801a525
 801a58c:	0801a525 	.word	0x0801a525
 801a590:	0801a661 	.word	0x0801a661
 801a594:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a598:	e7db      	b.n	801a552 <_scanf_float+0x8e>
 801a59a:	290e      	cmp	r1, #14
 801a59c:	d8c2      	bhi.n	801a524 <_scanf_float+0x60>
 801a59e:	a001      	add	r0, pc, #4	; (adr r0, 801a5a4 <_scanf_float+0xe0>)
 801a5a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a5a4:	0801a653 	.word	0x0801a653
 801a5a8:	0801a525 	.word	0x0801a525
 801a5ac:	0801a653 	.word	0x0801a653
 801a5b0:	0801a6e7 	.word	0x0801a6e7
 801a5b4:	0801a525 	.word	0x0801a525
 801a5b8:	0801a601 	.word	0x0801a601
 801a5bc:	0801a63d 	.word	0x0801a63d
 801a5c0:	0801a63d 	.word	0x0801a63d
 801a5c4:	0801a63d 	.word	0x0801a63d
 801a5c8:	0801a63d 	.word	0x0801a63d
 801a5cc:	0801a63d 	.word	0x0801a63d
 801a5d0:	0801a63d 	.word	0x0801a63d
 801a5d4:	0801a63d 	.word	0x0801a63d
 801a5d8:	0801a63d 	.word	0x0801a63d
 801a5dc:	0801a63d 	.word	0x0801a63d
 801a5e0:	2b6e      	cmp	r3, #110	; 0x6e
 801a5e2:	d809      	bhi.n	801a5f8 <_scanf_float+0x134>
 801a5e4:	2b60      	cmp	r3, #96	; 0x60
 801a5e6:	d8b2      	bhi.n	801a54e <_scanf_float+0x8a>
 801a5e8:	2b54      	cmp	r3, #84	; 0x54
 801a5ea:	d077      	beq.n	801a6dc <_scanf_float+0x218>
 801a5ec:	2b59      	cmp	r3, #89	; 0x59
 801a5ee:	d199      	bne.n	801a524 <_scanf_float+0x60>
 801a5f0:	2d07      	cmp	r5, #7
 801a5f2:	d197      	bne.n	801a524 <_scanf_float+0x60>
 801a5f4:	2508      	movs	r5, #8
 801a5f6:	e029      	b.n	801a64c <_scanf_float+0x188>
 801a5f8:	2b74      	cmp	r3, #116	; 0x74
 801a5fa:	d06f      	beq.n	801a6dc <_scanf_float+0x218>
 801a5fc:	2b79      	cmp	r3, #121	; 0x79
 801a5fe:	e7f6      	b.n	801a5ee <_scanf_float+0x12a>
 801a600:	6821      	ldr	r1, [r4, #0]
 801a602:	05c8      	lsls	r0, r1, #23
 801a604:	d51a      	bpl.n	801a63c <_scanf_float+0x178>
 801a606:	9b02      	ldr	r3, [sp, #8]
 801a608:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a60c:	6021      	str	r1, [r4, #0]
 801a60e:	f109 0901 	add.w	r9, r9, #1
 801a612:	b11b      	cbz	r3, 801a61c <_scanf_float+0x158>
 801a614:	3b01      	subs	r3, #1
 801a616:	3201      	adds	r2, #1
 801a618:	9302      	str	r3, [sp, #8]
 801a61a:	60a2      	str	r2, [r4, #8]
 801a61c:	68a3      	ldr	r3, [r4, #8]
 801a61e:	3b01      	subs	r3, #1
 801a620:	60a3      	str	r3, [r4, #8]
 801a622:	6923      	ldr	r3, [r4, #16]
 801a624:	3301      	adds	r3, #1
 801a626:	6123      	str	r3, [r4, #16]
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	3b01      	subs	r3, #1
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	607b      	str	r3, [r7, #4]
 801a630:	f340 8084 	ble.w	801a73c <_scanf_float+0x278>
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	3301      	adds	r3, #1
 801a638:	603b      	str	r3, [r7, #0]
 801a63a:	e766      	b.n	801a50a <_scanf_float+0x46>
 801a63c:	eb1a 0f05 	cmn.w	sl, r5
 801a640:	f47f af70 	bne.w	801a524 <_scanf_float+0x60>
 801a644:	6822      	ldr	r2, [r4, #0]
 801a646:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a64a:	6022      	str	r2, [r4, #0]
 801a64c:	f806 3b01 	strb.w	r3, [r6], #1
 801a650:	e7e4      	b.n	801a61c <_scanf_float+0x158>
 801a652:	6822      	ldr	r2, [r4, #0]
 801a654:	0610      	lsls	r0, r2, #24
 801a656:	f57f af65 	bpl.w	801a524 <_scanf_float+0x60>
 801a65a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a65e:	e7f4      	b.n	801a64a <_scanf_float+0x186>
 801a660:	f1ba 0f00 	cmp.w	sl, #0
 801a664:	d10e      	bne.n	801a684 <_scanf_float+0x1c0>
 801a666:	f1b9 0f00 	cmp.w	r9, #0
 801a66a:	d10e      	bne.n	801a68a <_scanf_float+0x1c6>
 801a66c:	6822      	ldr	r2, [r4, #0]
 801a66e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a672:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a676:	d108      	bne.n	801a68a <_scanf_float+0x1c6>
 801a678:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a67c:	6022      	str	r2, [r4, #0]
 801a67e:	f04f 0a01 	mov.w	sl, #1
 801a682:	e7e3      	b.n	801a64c <_scanf_float+0x188>
 801a684:	f1ba 0f02 	cmp.w	sl, #2
 801a688:	d055      	beq.n	801a736 <_scanf_float+0x272>
 801a68a:	2d01      	cmp	r5, #1
 801a68c:	d002      	beq.n	801a694 <_scanf_float+0x1d0>
 801a68e:	2d04      	cmp	r5, #4
 801a690:	f47f af48 	bne.w	801a524 <_scanf_float+0x60>
 801a694:	3501      	adds	r5, #1
 801a696:	b2ed      	uxtb	r5, r5
 801a698:	e7d8      	b.n	801a64c <_scanf_float+0x188>
 801a69a:	f1ba 0f01 	cmp.w	sl, #1
 801a69e:	f47f af41 	bne.w	801a524 <_scanf_float+0x60>
 801a6a2:	f04f 0a02 	mov.w	sl, #2
 801a6a6:	e7d1      	b.n	801a64c <_scanf_float+0x188>
 801a6a8:	b97d      	cbnz	r5, 801a6ca <_scanf_float+0x206>
 801a6aa:	f1b9 0f00 	cmp.w	r9, #0
 801a6ae:	f47f af3c 	bne.w	801a52a <_scanf_float+0x66>
 801a6b2:	6822      	ldr	r2, [r4, #0]
 801a6b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a6b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a6bc:	f47f af39 	bne.w	801a532 <_scanf_float+0x6e>
 801a6c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a6c4:	6022      	str	r2, [r4, #0]
 801a6c6:	2501      	movs	r5, #1
 801a6c8:	e7c0      	b.n	801a64c <_scanf_float+0x188>
 801a6ca:	2d03      	cmp	r5, #3
 801a6cc:	d0e2      	beq.n	801a694 <_scanf_float+0x1d0>
 801a6ce:	2d05      	cmp	r5, #5
 801a6d0:	e7de      	b.n	801a690 <_scanf_float+0x1cc>
 801a6d2:	2d02      	cmp	r5, #2
 801a6d4:	f47f af26 	bne.w	801a524 <_scanf_float+0x60>
 801a6d8:	2503      	movs	r5, #3
 801a6da:	e7b7      	b.n	801a64c <_scanf_float+0x188>
 801a6dc:	2d06      	cmp	r5, #6
 801a6de:	f47f af21 	bne.w	801a524 <_scanf_float+0x60>
 801a6e2:	2507      	movs	r5, #7
 801a6e4:	e7b2      	b.n	801a64c <_scanf_float+0x188>
 801a6e6:	6822      	ldr	r2, [r4, #0]
 801a6e8:	0591      	lsls	r1, r2, #22
 801a6ea:	f57f af1b 	bpl.w	801a524 <_scanf_float+0x60>
 801a6ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a6f2:	6022      	str	r2, [r4, #0]
 801a6f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a6f8:	e7a8      	b.n	801a64c <_scanf_float+0x188>
 801a6fa:	6822      	ldr	r2, [r4, #0]
 801a6fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a700:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a704:	d006      	beq.n	801a714 <_scanf_float+0x250>
 801a706:	0550      	lsls	r0, r2, #21
 801a708:	f57f af0c 	bpl.w	801a524 <_scanf_float+0x60>
 801a70c:	f1b9 0f00 	cmp.w	r9, #0
 801a710:	f43f af0f 	beq.w	801a532 <_scanf_float+0x6e>
 801a714:	0591      	lsls	r1, r2, #22
 801a716:	bf58      	it	pl
 801a718:	9901      	ldrpl	r1, [sp, #4]
 801a71a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a71e:	bf58      	it	pl
 801a720:	eba9 0101 	subpl.w	r1, r9, r1
 801a724:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a728:	bf58      	it	pl
 801a72a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a72e:	6022      	str	r2, [r4, #0]
 801a730:	f04f 0900 	mov.w	r9, #0
 801a734:	e78a      	b.n	801a64c <_scanf_float+0x188>
 801a736:	f04f 0a03 	mov.w	sl, #3
 801a73a:	e787      	b.n	801a64c <_scanf_float+0x188>
 801a73c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a740:	4639      	mov	r1, r7
 801a742:	4640      	mov	r0, r8
 801a744:	4798      	blx	r3
 801a746:	2800      	cmp	r0, #0
 801a748:	f43f aedf 	beq.w	801a50a <_scanf_float+0x46>
 801a74c:	e6ea      	b.n	801a524 <_scanf_float+0x60>
 801a74e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a752:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a756:	463a      	mov	r2, r7
 801a758:	4640      	mov	r0, r8
 801a75a:	4798      	blx	r3
 801a75c:	6923      	ldr	r3, [r4, #16]
 801a75e:	3b01      	subs	r3, #1
 801a760:	6123      	str	r3, [r4, #16]
 801a762:	e6ec      	b.n	801a53e <_scanf_float+0x7a>
 801a764:	1e6b      	subs	r3, r5, #1
 801a766:	2b06      	cmp	r3, #6
 801a768:	d825      	bhi.n	801a7b6 <_scanf_float+0x2f2>
 801a76a:	2d02      	cmp	r5, #2
 801a76c:	d836      	bhi.n	801a7dc <_scanf_float+0x318>
 801a76e:	455e      	cmp	r6, fp
 801a770:	f67f aee8 	bls.w	801a544 <_scanf_float+0x80>
 801a774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a778:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a77c:	463a      	mov	r2, r7
 801a77e:	4640      	mov	r0, r8
 801a780:	4798      	blx	r3
 801a782:	6923      	ldr	r3, [r4, #16]
 801a784:	3b01      	subs	r3, #1
 801a786:	6123      	str	r3, [r4, #16]
 801a788:	e7f1      	b.n	801a76e <_scanf_float+0x2aa>
 801a78a:	9802      	ldr	r0, [sp, #8]
 801a78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a790:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a794:	9002      	str	r0, [sp, #8]
 801a796:	463a      	mov	r2, r7
 801a798:	4640      	mov	r0, r8
 801a79a:	4798      	blx	r3
 801a79c:	6923      	ldr	r3, [r4, #16]
 801a79e:	3b01      	subs	r3, #1
 801a7a0:	6123      	str	r3, [r4, #16]
 801a7a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a7a6:	fa5f fa8a 	uxtb.w	sl, sl
 801a7aa:	f1ba 0f02 	cmp.w	sl, #2
 801a7ae:	d1ec      	bne.n	801a78a <_scanf_float+0x2c6>
 801a7b0:	3d03      	subs	r5, #3
 801a7b2:	b2ed      	uxtb	r5, r5
 801a7b4:	1b76      	subs	r6, r6, r5
 801a7b6:	6823      	ldr	r3, [r4, #0]
 801a7b8:	05da      	lsls	r2, r3, #23
 801a7ba:	d52f      	bpl.n	801a81c <_scanf_float+0x358>
 801a7bc:	055b      	lsls	r3, r3, #21
 801a7be:	d510      	bpl.n	801a7e2 <_scanf_float+0x31e>
 801a7c0:	455e      	cmp	r6, fp
 801a7c2:	f67f aebf 	bls.w	801a544 <_scanf_float+0x80>
 801a7c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a7ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a7ce:	463a      	mov	r2, r7
 801a7d0:	4640      	mov	r0, r8
 801a7d2:	4798      	blx	r3
 801a7d4:	6923      	ldr	r3, [r4, #16]
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	6123      	str	r3, [r4, #16]
 801a7da:	e7f1      	b.n	801a7c0 <_scanf_float+0x2fc>
 801a7dc:	46aa      	mov	sl, r5
 801a7de:	9602      	str	r6, [sp, #8]
 801a7e0:	e7df      	b.n	801a7a2 <_scanf_float+0x2de>
 801a7e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a7e6:	6923      	ldr	r3, [r4, #16]
 801a7e8:	2965      	cmp	r1, #101	; 0x65
 801a7ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a7ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a7f2:	6123      	str	r3, [r4, #16]
 801a7f4:	d00c      	beq.n	801a810 <_scanf_float+0x34c>
 801a7f6:	2945      	cmp	r1, #69	; 0x45
 801a7f8:	d00a      	beq.n	801a810 <_scanf_float+0x34c>
 801a7fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a7fe:	463a      	mov	r2, r7
 801a800:	4640      	mov	r0, r8
 801a802:	4798      	blx	r3
 801a804:	6923      	ldr	r3, [r4, #16]
 801a806:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a80a:	3b01      	subs	r3, #1
 801a80c:	1eb5      	subs	r5, r6, #2
 801a80e:	6123      	str	r3, [r4, #16]
 801a810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a814:	463a      	mov	r2, r7
 801a816:	4640      	mov	r0, r8
 801a818:	4798      	blx	r3
 801a81a:	462e      	mov	r6, r5
 801a81c:	6825      	ldr	r5, [r4, #0]
 801a81e:	f015 0510 	ands.w	r5, r5, #16
 801a822:	d158      	bne.n	801a8d6 <_scanf_float+0x412>
 801a824:	7035      	strb	r5, [r6, #0]
 801a826:	6823      	ldr	r3, [r4, #0]
 801a828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a82c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a830:	d11c      	bne.n	801a86c <_scanf_float+0x3a8>
 801a832:	9b01      	ldr	r3, [sp, #4]
 801a834:	454b      	cmp	r3, r9
 801a836:	eba3 0209 	sub.w	r2, r3, r9
 801a83a:	d124      	bne.n	801a886 <_scanf_float+0x3c2>
 801a83c:	2200      	movs	r2, #0
 801a83e:	4659      	mov	r1, fp
 801a840:	4640      	mov	r0, r8
 801a842:	f000 ff77 	bl	801b734 <_strtod_r>
 801a846:	9b03      	ldr	r3, [sp, #12]
 801a848:	6821      	ldr	r1, [r4, #0]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	f011 0f02 	tst.w	r1, #2
 801a850:	ec57 6b10 	vmov	r6, r7, d0
 801a854:	f103 0204 	add.w	r2, r3, #4
 801a858:	d020      	beq.n	801a89c <_scanf_float+0x3d8>
 801a85a:	9903      	ldr	r1, [sp, #12]
 801a85c:	600a      	str	r2, [r1, #0]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	e9c3 6700 	strd	r6, r7, [r3]
 801a864:	68e3      	ldr	r3, [r4, #12]
 801a866:	3301      	adds	r3, #1
 801a868:	60e3      	str	r3, [r4, #12]
 801a86a:	e66c      	b.n	801a546 <_scanf_float+0x82>
 801a86c:	9b04      	ldr	r3, [sp, #16]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d0e4      	beq.n	801a83c <_scanf_float+0x378>
 801a872:	9905      	ldr	r1, [sp, #20]
 801a874:	230a      	movs	r3, #10
 801a876:	462a      	mov	r2, r5
 801a878:	3101      	adds	r1, #1
 801a87a:	4640      	mov	r0, r8
 801a87c:	f000 ffe4 	bl	801b848 <_strtol_r>
 801a880:	9b04      	ldr	r3, [sp, #16]
 801a882:	9e05      	ldr	r6, [sp, #20]
 801a884:	1ac2      	subs	r2, r0, r3
 801a886:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a88a:	429e      	cmp	r6, r3
 801a88c:	bf28      	it	cs
 801a88e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a892:	4912      	ldr	r1, [pc, #72]	; (801a8dc <_scanf_float+0x418>)
 801a894:	4630      	mov	r0, r6
 801a896:	f000 f8b5 	bl	801aa04 <siprintf>
 801a89a:	e7cf      	b.n	801a83c <_scanf_float+0x378>
 801a89c:	f011 0f04 	tst.w	r1, #4
 801a8a0:	9903      	ldr	r1, [sp, #12]
 801a8a2:	600a      	str	r2, [r1, #0]
 801a8a4:	d1db      	bne.n	801a85e <_scanf_float+0x39a>
 801a8a6:	f8d3 8000 	ldr.w	r8, [r3]
 801a8aa:	ee10 2a10 	vmov	r2, s0
 801a8ae:	ee10 0a10 	vmov	r0, s0
 801a8b2:	463b      	mov	r3, r7
 801a8b4:	4639      	mov	r1, r7
 801a8b6:	f7e6 f939 	bl	8000b2c <__aeabi_dcmpun>
 801a8ba:	b128      	cbz	r0, 801a8c8 <_scanf_float+0x404>
 801a8bc:	4808      	ldr	r0, [pc, #32]	; (801a8e0 <_scanf_float+0x41c>)
 801a8be:	f000 f829 	bl	801a914 <nanf>
 801a8c2:	ed88 0a00 	vstr	s0, [r8]
 801a8c6:	e7cd      	b.n	801a864 <_scanf_float+0x3a0>
 801a8c8:	4630      	mov	r0, r6
 801a8ca:	4639      	mov	r1, r7
 801a8cc:	f7e6 f98c 	bl	8000be8 <__aeabi_d2f>
 801a8d0:	f8c8 0000 	str.w	r0, [r8]
 801a8d4:	e7c6      	b.n	801a864 <_scanf_float+0x3a0>
 801a8d6:	2500      	movs	r5, #0
 801a8d8:	e635      	b.n	801a546 <_scanf_float+0x82>
 801a8da:	bf00      	nop
 801a8dc:	080202dc 	.word	0x080202dc
 801a8e0:	080206f8 	.word	0x080206f8

0801a8e4 <realloc>:
 801a8e4:	4b02      	ldr	r3, [pc, #8]	; (801a8f0 <realloc+0xc>)
 801a8e6:	460a      	mov	r2, r1
 801a8e8:	4601      	mov	r1, r0
 801a8ea:	6818      	ldr	r0, [r3, #0]
 801a8ec:	f002 beb6 	b.w	801d65c <_realloc_r>
 801a8f0:	200000c4 	.word	0x200000c4

0801a8f4 <_sbrk_r>:
 801a8f4:	b538      	push	{r3, r4, r5, lr}
 801a8f6:	4d06      	ldr	r5, [pc, #24]	; (801a910 <_sbrk_r+0x1c>)
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	4608      	mov	r0, r1
 801a8fe:	602b      	str	r3, [r5, #0]
 801a900:	f7f2 fb74 	bl	800cfec <_sbrk>
 801a904:	1c43      	adds	r3, r0, #1
 801a906:	d102      	bne.n	801a90e <_sbrk_r+0x1a>
 801a908:	682b      	ldr	r3, [r5, #0]
 801a90a:	b103      	cbz	r3, 801a90e <_sbrk_r+0x1a>
 801a90c:	6023      	str	r3, [r4, #0]
 801a90e:	bd38      	pop	{r3, r4, r5, pc}
 801a910:	2000a6f8 	.word	0x2000a6f8

0801a914 <nanf>:
 801a914:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a91c <nanf+0x8>
 801a918:	4770      	bx	lr
 801a91a:	bf00      	nop
 801a91c:	7fc00000 	.word	0x7fc00000

0801a920 <scalbnf>:
 801a920:	ee10 3a10 	vmov	r3, s0
 801a924:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a928:	d025      	beq.n	801a976 <scalbnf+0x56>
 801a92a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a92e:	d302      	bcc.n	801a936 <scalbnf+0x16>
 801a930:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a934:	4770      	bx	lr
 801a936:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a93a:	d122      	bne.n	801a982 <scalbnf+0x62>
 801a93c:	4b2a      	ldr	r3, [pc, #168]	; (801a9e8 <scalbnf+0xc8>)
 801a93e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a9ec <scalbnf+0xcc>
 801a942:	4298      	cmp	r0, r3
 801a944:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a948:	db16      	blt.n	801a978 <scalbnf+0x58>
 801a94a:	ee10 3a10 	vmov	r3, s0
 801a94e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a952:	3a19      	subs	r2, #25
 801a954:	4402      	add	r2, r0
 801a956:	2afe      	cmp	r2, #254	; 0xfe
 801a958:	dd15      	ble.n	801a986 <scalbnf+0x66>
 801a95a:	ee10 3a10 	vmov	r3, s0
 801a95e:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a9f0 <scalbnf+0xd0>
 801a962:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a9f4 <scalbnf+0xd4>
 801a966:	2b00      	cmp	r3, #0
 801a968:	eeb0 7a67 	vmov.f32	s14, s15
 801a96c:	bfb8      	it	lt
 801a96e:	eef0 7a66 	vmovlt.f32	s15, s13
 801a972:	ee27 0a27 	vmul.f32	s0, s14, s15
 801a976:	4770      	bx	lr
 801a978:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a9f8 <scalbnf+0xd8>
 801a97c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a980:	4770      	bx	lr
 801a982:	0dd2      	lsrs	r2, r2, #23
 801a984:	e7e6      	b.n	801a954 <scalbnf+0x34>
 801a986:	2a00      	cmp	r2, #0
 801a988:	dd06      	ble.n	801a998 <scalbnf+0x78>
 801a98a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a98e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a992:	ee00 3a10 	vmov	s0, r3
 801a996:	4770      	bx	lr
 801a998:	f112 0f16 	cmn.w	r2, #22
 801a99c:	da1a      	bge.n	801a9d4 <scalbnf+0xb4>
 801a99e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a9a2:	4298      	cmp	r0, r3
 801a9a4:	ee10 3a10 	vmov	r3, s0
 801a9a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a9ac:	dd0a      	ble.n	801a9c4 <scalbnf+0xa4>
 801a9ae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a9f0 <scalbnf+0xd0>
 801a9b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a9f4 <scalbnf+0xd4>
 801a9b6:	eef0 7a40 	vmov.f32	s15, s0
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	bf18      	it	ne
 801a9be:	eeb0 0a47 	vmovne.f32	s0, s14
 801a9c2:	e7db      	b.n	801a97c <scalbnf+0x5c>
 801a9c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a9f8 <scalbnf+0xd8>
 801a9c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a9fc <scalbnf+0xdc>
 801a9cc:	eef0 7a40 	vmov.f32	s15, s0
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	e7f3      	b.n	801a9bc <scalbnf+0x9c>
 801a9d4:	3219      	adds	r2, #25
 801a9d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a9da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a9de:	eddf 7a08 	vldr	s15, [pc, #32]	; 801aa00 <scalbnf+0xe0>
 801a9e2:	ee07 3a10 	vmov	s14, r3
 801a9e6:	e7c4      	b.n	801a972 <scalbnf+0x52>
 801a9e8:	ffff3cb0 	.word	0xffff3cb0
 801a9ec:	4c000000 	.word	0x4c000000
 801a9f0:	7149f2ca 	.word	0x7149f2ca
 801a9f4:	f149f2ca 	.word	0xf149f2ca
 801a9f8:	0da24260 	.word	0x0da24260
 801a9fc:	8da24260 	.word	0x8da24260
 801aa00:	33000000 	.word	0x33000000

0801aa04 <siprintf>:
 801aa04:	b40e      	push	{r1, r2, r3}
 801aa06:	b500      	push	{lr}
 801aa08:	b09c      	sub	sp, #112	; 0x70
 801aa0a:	ab1d      	add	r3, sp, #116	; 0x74
 801aa0c:	9002      	str	r0, [sp, #8]
 801aa0e:	9006      	str	r0, [sp, #24]
 801aa10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aa14:	4809      	ldr	r0, [pc, #36]	; (801aa3c <siprintf+0x38>)
 801aa16:	9107      	str	r1, [sp, #28]
 801aa18:	9104      	str	r1, [sp, #16]
 801aa1a:	4909      	ldr	r1, [pc, #36]	; (801aa40 <siprintf+0x3c>)
 801aa1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa20:	9105      	str	r1, [sp, #20]
 801aa22:	6800      	ldr	r0, [r0, #0]
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	a902      	add	r1, sp, #8
 801aa28:	f002 fe9a 	bl	801d760 <_svfiprintf_r>
 801aa2c:	9b02      	ldr	r3, [sp, #8]
 801aa2e:	2200      	movs	r2, #0
 801aa30:	701a      	strb	r2, [r3, #0]
 801aa32:	b01c      	add	sp, #112	; 0x70
 801aa34:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa38:	b003      	add	sp, #12
 801aa3a:	4770      	bx	lr
 801aa3c:	200000c4 	.word	0x200000c4
 801aa40:	ffff0208 	.word	0xffff0208

0801aa44 <__sread>:
 801aa44:	b510      	push	{r4, lr}
 801aa46:	460c      	mov	r4, r1
 801aa48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa4c:	f002 ff88 	bl	801d960 <_read_r>
 801aa50:	2800      	cmp	r0, #0
 801aa52:	bfab      	itete	ge
 801aa54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801aa56:	89a3      	ldrhlt	r3, [r4, #12]
 801aa58:	181b      	addge	r3, r3, r0
 801aa5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801aa5e:	bfac      	ite	ge
 801aa60:	6563      	strge	r3, [r4, #84]	; 0x54
 801aa62:	81a3      	strhlt	r3, [r4, #12]
 801aa64:	bd10      	pop	{r4, pc}

0801aa66 <__swrite>:
 801aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa6a:	461f      	mov	r7, r3
 801aa6c:	898b      	ldrh	r3, [r1, #12]
 801aa6e:	05db      	lsls	r3, r3, #23
 801aa70:	4605      	mov	r5, r0
 801aa72:	460c      	mov	r4, r1
 801aa74:	4616      	mov	r6, r2
 801aa76:	d505      	bpl.n	801aa84 <__swrite+0x1e>
 801aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa7c:	2302      	movs	r3, #2
 801aa7e:	2200      	movs	r2, #0
 801aa80:	f002 f8f2 	bl	801cc68 <_lseek_r>
 801aa84:	89a3      	ldrh	r3, [r4, #12]
 801aa86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa8e:	81a3      	strh	r3, [r4, #12]
 801aa90:	4632      	mov	r2, r6
 801aa92:	463b      	mov	r3, r7
 801aa94:	4628      	mov	r0, r5
 801aa96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa9a:	f000 bed7 	b.w	801b84c <_write_r>

0801aa9e <__sseek>:
 801aa9e:	b510      	push	{r4, lr}
 801aaa0:	460c      	mov	r4, r1
 801aaa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aaa6:	f002 f8df 	bl	801cc68 <_lseek_r>
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	89a3      	ldrh	r3, [r4, #12]
 801aaae:	bf15      	itete	ne
 801aab0:	6560      	strne	r0, [r4, #84]	; 0x54
 801aab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aaba:	81a3      	strheq	r3, [r4, #12]
 801aabc:	bf18      	it	ne
 801aabe:	81a3      	strhne	r3, [r4, #12]
 801aac0:	bd10      	pop	{r4, pc}

0801aac2 <__sclose>:
 801aac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aac6:	f000 bed3 	b.w	801b870 <_close_r>

0801aaca <strcat>:
 801aaca:	b510      	push	{r4, lr}
 801aacc:	4602      	mov	r2, r0
 801aace:	7814      	ldrb	r4, [r2, #0]
 801aad0:	4613      	mov	r3, r2
 801aad2:	3201      	adds	r2, #1
 801aad4:	2c00      	cmp	r4, #0
 801aad6:	d1fa      	bne.n	801aace <strcat+0x4>
 801aad8:	3b01      	subs	r3, #1
 801aada:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aade:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aae2:	2a00      	cmp	r2, #0
 801aae4:	d1f9      	bne.n	801aada <strcat+0x10>
 801aae6:	bd10      	pop	{r4, pc}

0801aae8 <sulp>:
 801aae8:	b570      	push	{r4, r5, r6, lr}
 801aaea:	4604      	mov	r4, r0
 801aaec:	460d      	mov	r5, r1
 801aaee:	ec45 4b10 	vmov	d0, r4, r5
 801aaf2:	4616      	mov	r6, r2
 801aaf4:	f002 fc54 	bl	801d3a0 <__ulp>
 801aaf8:	ec51 0b10 	vmov	r0, r1, d0
 801aafc:	b17e      	cbz	r6, 801ab1e <sulp+0x36>
 801aafe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ab02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	dd09      	ble.n	801ab1e <sulp+0x36>
 801ab0a:	051b      	lsls	r3, r3, #20
 801ab0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ab10:	2400      	movs	r4, #0
 801ab12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ab16:	4622      	mov	r2, r4
 801ab18:	462b      	mov	r3, r5
 801ab1a:	f7e5 fd6d 	bl	80005f8 <__aeabi_dmul>
 801ab1e:	bd70      	pop	{r4, r5, r6, pc}

0801ab20 <_strtod_l>:
 801ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab24:	b0a3      	sub	sp, #140	; 0x8c
 801ab26:	461f      	mov	r7, r3
 801ab28:	2300      	movs	r3, #0
 801ab2a:	931e      	str	r3, [sp, #120]	; 0x78
 801ab2c:	4ba4      	ldr	r3, [pc, #656]	; (801adc0 <_strtod_l+0x2a0>)
 801ab2e:	9219      	str	r2, [sp, #100]	; 0x64
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	9307      	str	r3, [sp, #28]
 801ab34:	4604      	mov	r4, r0
 801ab36:	4618      	mov	r0, r3
 801ab38:	4688      	mov	r8, r1
 801ab3a:	f7e5 fb49 	bl	80001d0 <strlen>
 801ab3e:	f04f 0a00 	mov.w	sl, #0
 801ab42:	4605      	mov	r5, r0
 801ab44:	f04f 0b00 	mov.w	fp, #0
 801ab48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ab4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab4e:	781a      	ldrb	r2, [r3, #0]
 801ab50:	2a2b      	cmp	r2, #43	; 0x2b
 801ab52:	d04c      	beq.n	801abee <_strtod_l+0xce>
 801ab54:	d839      	bhi.n	801abca <_strtod_l+0xaa>
 801ab56:	2a0d      	cmp	r2, #13
 801ab58:	d832      	bhi.n	801abc0 <_strtod_l+0xa0>
 801ab5a:	2a08      	cmp	r2, #8
 801ab5c:	d832      	bhi.n	801abc4 <_strtod_l+0xa4>
 801ab5e:	2a00      	cmp	r2, #0
 801ab60:	d03c      	beq.n	801abdc <_strtod_l+0xbc>
 801ab62:	2300      	movs	r3, #0
 801ab64:	930e      	str	r3, [sp, #56]	; 0x38
 801ab66:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ab68:	7833      	ldrb	r3, [r6, #0]
 801ab6a:	2b30      	cmp	r3, #48	; 0x30
 801ab6c:	f040 80b4 	bne.w	801acd8 <_strtod_l+0x1b8>
 801ab70:	7873      	ldrb	r3, [r6, #1]
 801ab72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ab76:	2b58      	cmp	r3, #88	; 0x58
 801ab78:	d16c      	bne.n	801ac54 <_strtod_l+0x134>
 801ab7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab7c:	9301      	str	r3, [sp, #4]
 801ab7e:	ab1e      	add	r3, sp, #120	; 0x78
 801ab80:	9702      	str	r7, [sp, #8]
 801ab82:	9300      	str	r3, [sp, #0]
 801ab84:	4a8f      	ldr	r2, [pc, #572]	; (801adc4 <_strtod_l+0x2a4>)
 801ab86:	ab1f      	add	r3, sp, #124	; 0x7c
 801ab88:	a91d      	add	r1, sp, #116	; 0x74
 801ab8a:	4620      	mov	r0, r4
 801ab8c:	f001 fd60 	bl	801c650 <__gethex>
 801ab90:	f010 0707 	ands.w	r7, r0, #7
 801ab94:	4605      	mov	r5, r0
 801ab96:	d005      	beq.n	801aba4 <_strtod_l+0x84>
 801ab98:	2f06      	cmp	r7, #6
 801ab9a:	d12a      	bne.n	801abf2 <_strtod_l+0xd2>
 801ab9c:	3601      	adds	r6, #1
 801ab9e:	2300      	movs	r3, #0
 801aba0:	961d      	str	r6, [sp, #116]	; 0x74
 801aba2:	930e      	str	r3, [sp, #56]	; 0x38
 801aba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	f040 8596 	bne.w	801b6d8 <_strtod_l+0xbb8>
 801abac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abae:	b1db      	cbz	r3, 801abe8 <_strtod_l+0xc8>
 801abb0:	4652      	mov	r2, sl
 801abb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801abb6:	ec43 2b10 	vmov	d0, r2, r3
 801abba:	b023      	add	sp, #140	; 0x8c
 801abbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abc0:	2a20      	cmp	r2, #32
 801abc2:	d1ce      	bne.n	801ab62 <_strtod_l+0x42>
 801abc4:	3301      	adds	r3, #1
 801abc6:	931d      	str	r3, [sp, #116]	; 0x74
 801abc8:	e7c0      	b.n	801ab4c <_strtod_l+0x2c>
 801abca:	2a2d      	cmp	r2, #45	; 0x2d
 801abcc:	d1c9      	bne.n	801ab62 <_strtod_l+0x42>
 801abce:	2201      	movs	r2, #1
 801abd0:	920e      	str	r2, [sp, #56]	; 0x38
 801abd2:	1c5a      	adds	r2, r3, #1
 801abd4:	921d      	str	r2, [sp, #116]	; 0x74
 801abd6:	785b      	ldrb	r3, [r3, #1]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d1c4      	bne.n	801ab66 <_strtod_l+0x46>
 801abdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801abde:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	f040 8576 	bne.w	801b6d4 <_strtod_l+0xbb4>
 801abe8:	4652      	mov	r2, sl
 801abea:	465b      	mov	r3, fp
 801abec:	e7e3      	b.n	801abb6 <_strtod_l+0x96>
 801abee:	2200      	movs	r2, #0
 801abf0:	e7ee      	b.n	801abd0 <_strtod_l+0xb0>
 801abf2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801abf4:	b13a      	cbz	r2, 801ac06 <_strtod_l+0xe6>
 801abf6:	2135      	movs	r1, #53	; 0x35
 801abf8:	a820      	add	r0, sp, #128	; 0x80
 801abfa:	f002 fcdc 	bl	801d5b6 <__copybits>
 801abfe:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ac00:	4620      	mov	r0, r4
 801ac02:	f002 f8a1 	bl	801cd48 <_Bfree>
 801ac06:	3f01      	subs	r7, #1
 801ac08:	2f05      	cmp	r7, #5
 801ac0a:	d807      	bhi.n	801ac1c <_strtod_l+0xfc>
 801ac0c:	e8df f007 	tbb	[pc, r7]
 801ac10:	1d180b0e 	.word	0x1d180b0e
 801ac14:	030e      	.short	0x030e
 801ac16:	f04f 0b00 	mov.w	fp, #0
 801ac1a:	46da      	mov	sl, fp
 801ac1c:	0728      	lsls	r0, r5, #28
 801ac1e:	d5c1      	bpl.n	801aba4 <_strtod_l+0x84>
 801ac20:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ac24:	e7be      	b.n	801aba4 <_strtod_l+0x84>
 801ac26:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ac2a:	e7f7      	b.n	801ac1c <_strtod_l+0xfc>
 801ac2c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ac30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ac32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ac36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ac3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ac3e:	e7ed      	b.n	801ac1c <_strtod_l+0xfc>
 801ac40:	f8df b184 	ldr.w	fp, [pc, #388]	; 801adc8 <_strtod_l+0x2a8>
 801ac44:	f04f 0a00 	mov.w	sl, #0
 801ac48:	e7e8      	b.n	801ac1c <_strtod_l+0xfc>
 801ac4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ac4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ac52:	e7e3      	b.n	801ac1c <_strtod_l+0xfc>
 801ac54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ac56:	1c5a      	adds	r2, r3, #1
 801ac58:	921d      	str	r2, [sp, #116]	; 0x74
 801ac5a:	785b      	ldrb	r3, [r3, #1]
 801ac5c:	2b30      	cmp	r3, #48	; 0x30
 801ac5e:	d0f9      	beq.n	801ac54 <_strtod_l+0x134>
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d09f      	beq.n	801aba4 <_strtod_l+0x84>
 801ac64:	2301      	movs	r3, #1
 801ac66:	f04f 0900 	mov.w	r9, #0
 801ac6a:	9304      	str	r3, [sp, #16]
 801ac6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 801ac70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ac74:	464f      	mov	r7, r9
 801ac76:	220a      	movs	r2, #10
 801ac78:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ac7a:	7806      	ldrb	r6, [r0, #0]
 801ac7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ac80:	b2d9      	uxtb	r1, r3
 801ac82:	2909      	cmp	r1, #9
 801ac84:	d92a      	bls.n	801acdc <_strtod_l+0x1bc>
 801ac86:	9907      	ldr	r1, [sp, #28]
 801ac88:	462a      	mov	r2, r5
 801ac8a:	f002 fe92 	bl	801d9b2 <strncmp>
 801ac8e:	b398      	cbz	r0, 801acf8 <_strtod_l+0x1d8>
 801ac90:	2000      	movs	r0, #0
 801ac92:	4633      	mov	r3, r6
 801ac94:	463d      	mov	r5, r7
 801ac96:	9007      	str	r0, [sp, #28]
 801ac98:	4602      	mov	r2, r0
 801ac9a:	2b65      	cmp	r3, #101	; 0x65
 801ac9c:	d001      	beq.n	801aca2 <_strtod_l+0x182>
 801ac9e:	2b45      	cmp	r3, #69	; 0x45
 801aca0:	d118      	bne.n	801acd4 <_strtod_l+0x1b4>
 801aca2:	b91d      	cbnz	r5, 801acac <_strtod_l+0x18c>
 801aca4:	9b04      	ldr	r3, [sp, #16]
 801aca6:	4303      	orrs	r3, r0
 801aca8:	d098      	beq.n	801abdc <_strtod_l+0xbc>
 801acaa:	2500      	movs	r5, #0
 801acac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801acb0:	f108 0301 	add.w	r3, r8, #1
 801acb4:	931d      	str	r3, [sp, #116]	; 0x74
 801acb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801acba:	2b2b      	cmp	r3, #43	; 0x2b
 801acbc:	d075      	beq.n	801adaa <_strtod_l+0x28a>
 801acbe:	2b2d      	cmp	r3, #45	; 0x2d
 801acc0:	d07b      	beq.n	801adba <_strtod_l+0x29a>
 801acc2:	f04f 0c00 	mov.w	ip, #0
 801acc6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801acca:	2909      	cmp	r1, #9
 801accc:	f240 8082 	bls.w	801add4 <_strtod_l+0x2b4>
 801acd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801acd4:	2600      	movs	r6, #0
 801acd6:	e09d      	b.n	801ae14 <_strtod_l+0x2f4>
 801acd8:	2300      	movs	r3, #0
 801acda:	e7c4      	b.n	801ac66 <_strtod_l+0x146>
 801acdc:	2f08      	cmp	r7, #8
 801acde:	bfd8      	it	le
 801ace0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ace2:	f100 0001 	add.w	r0, r0, #1
 801ace6:	bfda      	itte	le
 801ace8:	fb02 3301 	mlale	r3, r2, r1, r3
 801acec:	9309      	strle	r3, [sp, #36]	; 0x24
 801acee:	fb02 3909 	mlagt	r9, r2, r9, r3
 801acf2:	3701      	adds	r7, #1
 801acf4:	901d      	str	r0, [sp, #116]	; 0x74
 801acf6:	e7bf      	b.n	801ac78 <_strtod_l+0x158>
 801acf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801acfa:	195a      	adds	r2, r3, r5
 801acfc:	921d      	str	r2, [sp, #116]	; 0x74
 801acfe:	5d5b      	ldrb	r3, [r3, r5]
 801ad00:	2f00      	cmp	r7, #0
 801ad02:	d037      	beq.n	801ad74 <_strtod_l+0x254>
 801ad04:	9007      	str	r0, [sp, #28]
 801ad06:	463d      	mov	r5, r7
 801ad08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ad0c:	2a09      	cmp	r2, #9
 801ad0e:	d912      	bls.n	801ad36 <_strtod_l+0x216>
 801ad10:	2201      	movs	r2, #1
 801ad12:	e7c2      	b.n	801ac9a <_strtod_l+0x17a>
 801ad14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad16:	1c5a      	adds	r2, r3, #1
 801ad18:	921d      	str	r2, [sp, #116]	; 0x74
 801ad1a:	785b      	ldrb	r3, [r3, #1]
 801ad1c:	3001      	adds	r0, #1
 801ad1e:	2b30      	cmp	r3, #48	; 0x30
 801ad20:	d0f8      	beq.n	801ad14 <_strtod_l+0x1f4>
 801ad22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ad26:	2a08      	cmp	r2, #8
 801ad28:	f200 84db 	bhi.w	801b6e2 <_strtod_l+0xbc2>
 801ad2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ad2e:	9007      	str	r0, [sp, #28]
 801ad30:	2000      	movs	r0, #0
 801ad32:	920a      	str	r2, [sp, #40]	; 0x28
 801ad34:	4605      	mov	r5, r0
 801ad36:	3b30      	subs	r3, #48	; 0x30
 801ad38:	f100 0201 	add.w	r2, r0, #1
 801ad3c:	d014      	beq.n	801ad68 <_strtod_l+0x248>
 801ad3e:	9907      	ldr	r1, [sp, #28]
 801ad40:	4411      	add	r1, r2
 801ad42:	9107      	str	r1, [sp, #28]
 801ad44:	462a      	mov	r2, r5
 801ad46:	eb00 0e05 	add.w	lr, r0, r5
 801ad4a:	210a      	movs	r1, #10
 801ad4c:	4572      	cmp	r2, lr
 801ad4e:	d113      	bne.n	801ad78 <_strtod_l+0x258>
 801ad50:	182a      	adds	r2, r5, r0
 801ad52:	2a08      	cmp	r2, #8
 801ad54:	f105 0501 	add.w	r5, r5, #1
 801ad58:	4405      	add	r5, r0
 801ad5a:	dc1c      	bgt.n	801ad96 <_strtod_l+0x276>
 801ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad5e:	220a      	movs	r2, #10
 801ad60:	fb02 3301 	mla	r3, r2, r1, r3
 801ad64:	9309      	str	r3, [sp, #36]	; 0x24
 801ad66:	2200      	movs	r2, #0
 801ad68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad6a:	1c59      	adds	r1, r3, #1
 801ad6c:	911d      	str	r1, [sp, #116]	; 0x74
 801ad6e:	785b      	ldrb	r3, [r3, #1]
 801ad70:	4610      	mov	r0, r2
 801ad72:	e7c9      	b.n	801ad08 <_strtod_l+0x1e8>
 801ad74:	4638      	mov	r0, r7
 801ad76:	e7d2      	b.n	801ad1e <_strtod_l+0x1fe>
 801ad78:	2a08      	cmp	r2, #8
 801ad7a:	dc04      	bgt.n	801ad86 <_strtod_l+0x266>
 801ad7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ad7e:	434e      	muls	r6, r1
 801ad80:	9609      	str	r6, [sp, #36]	; 0x24
 801ad82:	3201      	adds	r2, #1
 801ad84:	e7e2      	b.n	801ad4c <_strtod_l+0x22c>
 801ad86:	f102 0c01 	add.w	ip, r2, #1
 801ad8a:	f1bc 0f10 	cmp.w	ip, #16
 801ad8e:	bfd8      	it	le
 801ad90:	fb01 f909 	mulle.w	r9, r1, r9
 801ad94:	e7f5      	b.n	801ad82 <_strtod_l+0x262>
 801ad96:	2d10      	cmp	r5, #16
 801ad98:	bfdc      	itt	le
 801ad9a:	220a      	movle	r2, #10
 801ad9c:	fb02 3909 	mlale	r9, r2, r9, r3
 801ada0:	e7e1      	b.n	801ad66 <_strtod_l+0x246>
 801ada2:	2300      	movs	r3, #0
 801ada4:	9307      	str	r3, [sp, #28]
 801ada6:	2201      	movs	r2, #1
 801ada8:	e77c      	b.n	801aca4 <_strtod_l+0x184>
 801adaa:	f04f 0c00 	mov.w	ip, #0
 801adae:	f108 0302 	add.w	r3, r8, #2
 801adb2:	931d      	str	r3, [sp, #116]	; 0x74
 801adb4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801adb8:	e785      	b.n	801acc6 <_strtod_l+0x1a6>
 801adba:	f04f 0c01 	mov.w	ip, #1
 801adbe:	e7f6      	b.n	801adae <_strtod_l+0x28e>
 801adc0:	08020538 	.word	0x08020538
 801adc4:	080202e4 	.word	0x080202e4
 801adc8:	7ff00000 	.word	0x7ff00000
 801adcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adce:	1c59      	adds	r1, r3, #1
 801add0:	911d      	str	r1, [sp, #116]	; 0x74
 801add2:	785b      	ldrb	r3, [r3, #1]
 801add4:	2b30      	cmp	r3, #48	; 0x30
 801add6:	d0f9      	beq.n	801adcc <_strtod_l+0x2ac>
 801add8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801addc:	2908      	cmp	r1, #8
 801adde:	f63f af79 	bhi.w	801acd4 <_strtod_l+0x1b4>
 801ade2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801ade6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ade8:	9308      	str	r3, [sp, #32]
 801adea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adec:	1c59      	adds	r1, r3, #1
 801adee:	911d      	str	r1, [sp, #116]	; 0x74
 801adf0:	785b      	ldrb	r3, [r3, #1]
 801adf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801adf6:	2e09      	cmp	r6, #9
 801adf8:	d937      	bls.n	801ae6a <_strtod_l+0x34a>
 801adfa:	9e08      	ldr	r6, [sp, #32]
 801adfc:	1b89      	subs	r1, r1, r6
 801adfe:	2908      	cmp	r1, #8
 801ae00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801ae04:	dc02      	bgt.n	801ae0c <_strtod_l+0x2ec>
 801ae06:	4576      	cmp	r6, lr
 801ae08:	bfa8      	it	ge
 801ae0a:	4676      	movge	r6, lr
 801ae0c:	f1bc 0f00 	cmp.w	ip, #0
 801ae10:	d000      	beq.n	801ae14 <_strtod_l+0x2f4>
 801ae12:	4276      	negs	r6, r6
 801ae14:	2d00      	cmp	r5, #0
 801ae16:	d14f      	bne.n	801aeb8 <_strtod_l+0x398>
 801ae18:	9904      	ldr	r1, [sp, #16]
 801ae1a:	4301      	orrs	r1, r0
 801ae1c:	f47f aec2 	bne.w	801aba4 <_strtod_l+0x84>
 801ae20:	2a00      	cmp	r2, #0
 801ae22:	f47f aedb 	bne.w	801abdc <_strtod_l+0xbc>
 801ae26:	2b69      	cmp	r3, #105	; 0x69
 801ae28:	d027      	beq.n	801ae7a <_strtod_l+0x35a>
 801ae2a:	dc24      	bgt.n	801ae76 <_strtod_l+0x356>
 801ae2c:	2b49      	cmp	r3, #73	; 0x49
 801ae2e:	d024      	beq.n	801ae7a <_strtod_l+0x35a>
 801ae30:	2b4e      	cmp	r3, #78	; 0x4e
 801ae32:	f47f aed3 	bne.w	801abdc <_strtod_l+0xbc>
 801ae36:	499e      	ldr	r1, [pc, #632]	; (801b0b0 <_strtod_l+0x590>)
 801ae38:	a81d      	add	r0, sp, #116	; 0x74
 801ae3a:	f001 fe61 	bl	801cb00 <__match>
 801ae3e:	2800      	cmp	r0, #0
 801ae40:	f43f aecc 	beq.w	801abdc <_strtod_l+0xbc>
 801ae44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	2b28      	cmp	r3, #40	; 0x28
 801ae4a:	d12d      	bne.n	801aea8 <_strtod_l+0x388>
 801ae4c:	4999      	ldr	r1, [pc, #612]	; (801b0b4 <_strtod_l+0x594>)
 801ae4e:	aa20      	add	r2, sp, #128	; 0x80
 801ae50:	a81d      	add	r0, sp, #116	; 0x74
 801ae52:	f001 fe69 	bl	801cb28 <__hexnan>
 801ae56:	2805      	cmp	r0, #5
 801ae58:	d126      	bne.n	801aea8 <_strtod_l+0x388>
 801ae5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801ae60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ae64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ae68:	e69c      	b.n	801aba4 <_strtod_l+0x84>
 801ae6a:	210a      	movs	r1, #10
 801ae6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ae70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ae74:	e7b9      	b.n	801adea <_strtod_l+0x2ca>
 801ae76:	2b6e      	cmp	r3, #110	; 0x6e
 801ae78:	e7db      	b.n	801ae32 <_strtod_l+0x312>
 801ae7a:	498f      	ldr	r1, [pc, #572]	; (801b0b8 <_strtod_l+0x598>)
 801ae7c:	a81d      	add	r0, sp, #116	; 0x74
 801ae7e:	f001 fe3f 	bl	801cb00 <__match>
 801ae82:	2800      	cmp	r0, #0
 801ae84:	f43f aeaa 	beq.w	801abdc <_strtod_l+0xbc>
 801ae88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae8a:	498c      	ldr	r1, [pc, #560]	; (801b0bc <_strtod_l+0x59c>)
 801ae8c:	3b01      	subs	r3, #1
 801ae8e:	a81d      	add	r0, sp, #116	; 0x74
 801ae90:	931d      	str	r3, [sp, #116]	; 0x74
 801ae92:	f001 fe35 	bl	801cb00 <__match>
 801ae96:	b910      	cbnz	r0, 801ae9e <_strtod_l+0x37e>
 801ae98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae9a:	3301      	adds	r3, #1
 801ae9c:	931d      	str	r3, [sp, #116]	; 0x74
 801ae9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b0cc <_strtod_l+0x5ac>
 801aea2:	f04f 0a00 	mov.w	sl, #0
 801aea6:	e67d      	b.n	801aba4 <_strtod_l+0x84>
 801aea8:	4885      	ldr	r0, [pc, #532]	; (801b0c0 <_strtod_l+0x5a0>)
 801aeaa:	f002 fd6d 	bl	801d988 <nan>
 801aeae:	ed8d 0b04 	vstr	d0, [sp, #16]
 801aeb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801aeb6:	e675      	b.n	801aba4 <_strtod_l+0x84>
 801aeb8:	9b07      	ldr	r3, [sp, #28]
 801aeba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aebc:	1af3      	subs	r3, r6, r3
 801aebe:	2f00      	cmp	r7, #0
 801aec0:	bf08      	it	eq
 801aec2:	462f      	moveq	r7, r5
 801aec4:	2d10      	cmp	r5, #16
 801aec6:	9308      	str	r3, [sp, #32]
 801aec8:	46a8      	mov	r8, r5
 801aeca:	bfa8      	it	ge
 801aecc:	f04f 0810 	movge.w	r8, #16
 801aed0:	f7e5 fb18 	bl	8000504 <__aeabi_ui2d>
 801aed4:	2d09      	cmp	r5, #9
 801aed6:	4682      	mov	sl, r0
 801aed8:	468b      	mov	fp, r1
 801aeda:	dd13      	ble.n	801af04 <_strtod_l+0x3e4>
 801aedc:	4b79      	ldr	r3, [pc, #484]	; (801b0c4 <_strtod_l+0x5a4>)
 801aede:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aee2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aee6:	f7e5 fb87 	bl	80005f8 <__aeabi_dmul>
 801aeea:	4682      	mov	sl, r0
 801aeec:	4648      	mov	r0, r9
 801aeee:	468b      	mov	fp, r1
 801aef0:	f7e5 fb08 	bl	8000504 <__aeabi_ui2d>
 801aef4:	4602      	mov	r2, r0
 801aef6:	460b      	mov	r3, r1
 801aef8:	4650      	mov	r0, sl
 801aefa:	4659      	mov	r1, fp
 801aefc:	f7e5 f9c6 	bl	800028c <__adddf3>
 801af00:	4682      	mov	sl, r0
 801af02:	468b      	mov	fp, r1
 801af04:	2d0f      	cmp	r5, #15
 801af06:	dc38      	bgt.n	801af7a <_strtod_l+0x45a>
 801af08:	9b08      	ldr	r3, [sp, #32]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	f43f ae4a 	beq.w	801aba4 <_strtod_l+0x84>
 801af10:	dd24      	ble.n	801af5c <_strtod_l+0x43c>
 801af12:	2b16      	cmp	r3, #22
 801af14:	dc0b      	bgt.n	801af2e <_strtod_l+0x40e>
 801af16:	4d6b      	ldr	r5, [pc, #428]	; (801b0c4 <_strtod_l+0x5a4>)
 801af18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801af1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801af20:	4652      	mov	r2, sl
 801af22:	465b      	mov	r3, fp
 801af24:	f7e5 fb68 	bl	80005f8 <__aeabi_dmul>
 801af28:	4682      	mov	sl, r0
 801af2a:	468b      	mov	fp, r1
 801af2c:	e63a      	b.n	801aba4 <_strtod_l+0x84>
 801af2e:	9a08      	ldr	r2, [sp, #32]
 801af30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801af34:	4293      	cmp	r3, r2
 801af36:	db20      	blt.n	801af7a <_strtod_l+0x45a>
 801af38:	4c62      	ldr	r4, [pc, #392]	; (801b0c4 <_strtod_l+0x5a4>)
 801af3a:	f1c5 050f 	rsb	r5, r5, #15
 801af3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801af42:	4652      	mov	r2, sl
 801af44:	465b      	mov	r3, fp
 801af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af4a:	f7e5 fb55 	bl	80005f8 <__aeabi_dmul>
 801af4e:	9b08      	ldr	r3, [sp, #32]
 801af50:	1b5d      	subs	r5, r3, r5
 801af52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801af56:	e9d4 2300 	ldrd	r2, r3, [r4]
 801af5a:	e7e3      	b.n	801af24 <_strtod_l+0x404>
 801af5c:	9b08      	ldr	r3, [sp, #32]
 801af5e:	3316      	adds	r3, #22
 801af60:	db0b      	blt.n	801af7a <_strtod_l+0x45a>
 801af62:	9b07      	ldr	r3, [sp, #28]
 801af64:	4a57      	ldr	r2, [pc, #348]	; (801b0c4 <_strtod_l+0x5a4>)
 801af66:	1b9e      	subs	r6, r3, r6
 801af68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801af6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801af70:	4650      	mov	r0, sl
 801af72:	4659      	mov	r1, fp
 801af74:	f7e5 fc6a 	bl	800084c <__aeabi_ddiv>
 801af78:	e7d6      	b.n	801af28 <_strtod_l+0x408>
 801af7a:	9b08      	ldr	r3, [sp, #32]
 801af7c:	eba5 0808 	sub.w	r8, r5, r8
 801af80:	4498      	add	r8, r3
 801af82:	f1b8 0f00 	cmp.w	r8, #0
 801af86:	dd71      	ble.n	801b06c <_strtod_l+0x54c>
 801af88:	f018 030f 	ands.w	r3, r8, #15
 801af8c:	d00a      	beq.n	801afa4 <_strtod_l+0x484>
 801af8e:	494d      	ldr	r1, [pc, #308]	; (801b0c4 <_strtod_l+0x5a4>)
 801af90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801af94:	4652      	mov	r2, sl
 801af96:	465b      	mov	r3, fp
 801af98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af9c:	f7e5 fb2c 	bl	80005f8 <__aeabi_dmul>
 801afa0:	4682      	mov	sl, r0
 801afa2:	468b      	mov	fp, r1
 801afa4:	f038 080f 	bics.w	r8, r8, #15
 801afa8:	d04d      	beq.n	801b046 <_strtod_l+0x526>
 801afaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801afae:	dd22      	ble.n	801aff6 <_strtod_l+0x4d6>
 801afb0:	2500      	movs	r5, #0
 801afb2:	462e      	mov	r6, r5
 801afb4:	9509      	str	r5, [sp, #36]	; 0x24
 801afb6:	9507      	str	r5, [sp, #28]
 801afb8:	2322      	movs	r3, #34	; 0x22
 801afba:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b0cc <_strtod_l+0x5ac>
 801afbe:	6023      	str	r3, [r4, #0]
 801afc0:	f04f 0a00 	mov.w	sl, #0
 801afc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	f43f adec 	beq.w	801aba4 <_strtod_l+0x84>
 801afcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801afce:	4620      	mov	r0, r4
 801afd0:	f001 feba 	bl	801cd48 <_Bfree>
 801afd4:	9907      	ldr	r1, [sp, #28]
 801afd6:	4620      	mov	r0, r4
 801afd8:	f001 feb6 	bl	801cd48 <_Bfree>
 801afdc:	4631      	mov	r1, r6
 801afde:	4620      	mov	r0, r4
 801afe0:	f001 feb2 	bl	801cd48 <_Bfree>
 801afe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801afe6:	4620      	mov	r0, r4
 801afe8:	f001 feae 	bl	801cd48 <_Bfree>
 801afec:	4629      	mov	r1, r5
 801afee:	4620      	mov	r0, r4
 801aff0:	f001 feaa 	bl	801cd48 <_Bfree>
 801aff4:	e5d6      	b.n	801aba4 <_strtod_l+0x84>
 801aff6:	2300      	movs	r3, #0
 801aff8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801affc:	4650      	mov	r0, sl
 801affe:	4659      	mov	r1, fp
 801b000:	4699      	mov	r9, r3
 801b002:	f1b8 0f01 	cmp.w	r8, #1
 801b006:	dc21      	bgt.n	801b04c <_strtod_l+0x52c>
 801b008:	b10b      	cbz	r3, 801b00e <_strtod_l+0x4ee>
 801b00a:	4682      	mov	sl, r0
 801b00c:	468b      	mov	fp, r1
 801b00e:	4b2e      	ldr	r3, [pc, #184]	; (801b0c8 <_strtod_l+0x5a8>)
 801b010:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b014:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b018:	4652      	mov	r2, sl
 801b01a:	465b      	mov	r3, fp
 801b01c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b020:	f7e5 faea 	bl	80005f8 <__aeabi_dmul>
 801b024:	4b29      	ldr	r3, [pc, #164]	; (801b0cc <_strtod_l+0x5ac>)
 801b026:	460a      	mov	r2, r1
 801b028:	400b      	ands	r3, r1
 801b02a:	4929      	ldr	r1, [pc, #164]	; (801b0d0 <_strtod_l+0x5b0>)
 801b02c:	428b      	cmp	r3, r1
 801b02e:	4682      	mov	sl, r0
 801b030:	d8be      	bhi.n	801afb0 <_strtod_l+0x490>
 801b032:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b036:	428b      	cmp	r3, r1
 801b038:	bf86      	itte	hi
 801b03a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b0d4 <_strtod_l+0x5b4>
 801b03e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b042:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b046:	2300      	movs	r3, #0
 801b048:	9304      	str	r3, [sp, #16]
 801b04a:	e081      	b.n	801b150 <_strtod_l+0x630>
 801b04c:	f018 0f01 	tst.w	r8, #1
 801b050:	d007      	beq.n	801b062 <_strtod_l+0x542>
 801b052:	4b1d      	ldr	r3, [pc, #116]	; (801b0c8 <_strtod_l+0x5a8>)
 801b054:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b05c:	f7e5 facc 	bl	80005f8 <__aeabi_dmul>
 801b060:	2301      	movs	r3, #1
 801b062:	f109 0901 	add.w	r9, r9, #1
 801b066:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b06a:	e7ca      	b.n	801b002 <_strtod_l+0x4e2>
 801b06c:	d0eb      	beq.n	801b046 <_strtod_l+0x526>
 801b06e:	f1c8 0800 	rsb	r8, r8, #0
 801b072:	f018 020f 	ands.w	r2, r8, #15
 801b076:	d00a      	beq.n	801b08e <_strtod_l+0x56e>
 801b078:	4b12      	ldr	r3, [pc, #72]	; (801b0c4 <_strtod_l+0x5a4>)
 801b07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b07e:	4650      	mov	r0, sl
 801b080:	4659      	mov	r1, fp
 801b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b086:	f7e5 fbe1 	bl	800084c <__aeabi_ddiv>
 801b08a:	4682      	mov	sl, r0
 801b08c:	468b      	mov	fp, r1
 801b08e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b092:	d0d8      	beq.n	801b046 <_strtod_l+0x526>
 801b094:	f1b8 0f1f 	cmp.w	r8, #31
 801b098:	dd1e      	ble.n	801b0d8 <_strtod_l+0x5b8>
 801b09a:	2500      	movs	r5, #0
 801b09c:	462e      	mov	r6, r5
 801b09e:	9509      	str	r5, [sp, #36]	; 0x24
 801b0a0:	9507      	str	r5, [sp, #28]
 801b0a2:	2322      	movs	r3, #34	; 0x22
 801b0a4:	f04f 0a00 	mov.w	sl, #0
 801b0a8:	f04f 0b00 	mov.w	fp, #0
 801b0ac:	6023      	str	r3, [r4, #0]
 801b0ae:	e789      	b.n	801afc4 <_strtod_l+0x4a4>
 801b0b0:	080202b5 	.word	0x080202b5
 801b0b4:	080202f8 	.word	0x080202f8
 801b0b8:	080202ad 	.word	0x080202ad
 801b0bc:	0802043c 	.word	0x0802043c
 801b0c0:	080206f8 	.word	0x080206f8
 801b0c4:	080205d8 	.word	0x080205d8
 801b0c8:	080205b0 	.word	0x080205b0
 801b0cc:	7ff00000 	.word	0x7ff00000
 801b0d0:	7ca00000 	.word	0x7ca00000
 801b0d4:	7fefffff 	.word	0x7fefffff
 801b0d8:	f018 0310 	ands.w	r3, r8, #16
 801b0dc:	bf18      	it	ne
 801b0de:	236a      	movne	r3, #106	; 0x6a
 801b0e0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b498 <_strtod_l+0x978>
 801b0e4:	9304      	str	r3, [sp, #16]
 801b0e6:	4650      	mov	r0, sl
 801b0e8:	4659      	mov	r1, fp
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	f018 0f01 	tst.w	r8, #1
 801b0f0:	d004      	beq.n	801b0fc <_strtod_l+0x5dc>
 801b0f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b0f6:	f7e5 fa7f 	bl	80005f8 <__aeabi_dmul>
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b100:	f109 0908 	add.w	r9, r9, #8
 801b104:	d1f2      	bne.n	801b0ec <_strtod_l+0x5cc>
 801b106:	b10b      	cbz	r3, 801b10c <_strtod_l+0x5ec>
 801b108:	4682      	mov	sl, r0
 801b10a:	468b      	mov	fp, r1
 801b10c:	9b04      	ldr	r3, [sp, #16]
 801b10e:	b1bb      	cbz	r3, 801b140 <_strtod_l+0x620>
 801b110:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b114:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b118:	2b00      	cmp	r3, #0
 801b11a:	4659      	mov	r1, fp
 801b11c:	dd10      	ble.n	801b140 <_strtod_l+0x620>
 801b11e:	2b1f      	cmp	r3, #31
 801b120:	f340 8128 	ble.w	801b374 <_strtod_l+0x854>
 801b124:	2b34      	cmp	r3, #52	; 0x34
 801b126:	bfde      	ittt	le
 801b128:	3b20      	suble	r3, #32
 801b12a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b12e:	fa02 f303 	lslle.w	r3, r2, r3
 801b132:	f04f 0a00 	mov.w	sl, #0
 801b136:	bfcc      	ite	gt
 801b138:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b13c:	ea03 0b01 	andle.w	fp, r3, r1
 801b140:	2200      	movs	r2, #0
 801b142:	2300      	movs	r3, #0
 801b144:	4650      	mov	r0, sl
 801b146:	4659      	mov	r1, fp
 801b148:	f7e5 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801b14c:	2800      	cmp	r0, #0
 801b14e:	d1a4      	bne.n	801b09a <_strtod_l+0x57a>
 801b150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b152:	9300      	str	r3, [sp, #0]
 801b154:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b156:	462b      	mov	r3, r5
 801b158:	463a      	mov	r2, r7
 801b15a:	4620      	mov	r0, r4
 801b15c:	f001 fe60 	bl	801ce20 <__s2b>
 801b160:	9009      	str	r0, [sp, #36]	; 0x24
 801b162:	2800      	cmp	r0, #0
 801b164:	f43f af24 	beq.w	801afb0 <_strtod_l+0x490>
 801b168:	9b07      	ldr	r3, [sp, #28]
 801b16a:	1b9e      	subs	r6, r3, r6
 801b16c:	9b08      	ldr	r3, [sp, #32]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	bfb4      	ite	lt
 801b172:	4633      	movlt	r3, r6
 801b174:	2300      	movge	r3, #0
 801b176:	9310      	str	r3, [sp, #64]	; 0x40
 801b178:	9b08      	ldr	r3, [sp, #32]
 801b17a:	2500      	movs	r5, #0
 801b17c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b180:	9318      	str	r3, [sp, #96]	; 0x60
 801b182:	462e      	mov	r6, r5
 801b184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b186:	4620      	mov	r0, r4
 801b188:	6859      	ldr	r1, [r3, #4]
 801b18a:	f001 fd9d 	bl	801ccc8 <_Balloc>
 801b18e:	9007      	str	r0, [sp, #28]
 801b190:	2800      	cmp	r0, #0
 801b192:	f43f af11 	beq.w	801afb8 <_strtod_l+0x498>
 801b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b198:	691a      	ldr	r2, [r3, #16]
 801b19a:	3202      	adds	r2, #2
 801b19c:	f103 010c 	add.w	r1, r3, #12
 801b1a0:	0092      	lsls	r2, r2, #2
 801b1a2:	300c      	adds	r0, #12
 801b1a4:	f7fe fc64 	bl	8019a70 <memcpy>
 801b1a8:	ec4b ab10 	vmov	d0, sl, fp
 801b1ac:	aa20      	add	r2, sp, #128	; 0x80
 801b1ae:	a91f      	add	r1, sp, #124	; 0x7c
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b1b6:	f002 f96f 	bl	801d498 <__d2b>
 801b1ba:	901e      	str	r0, [sp, #120]	; 0x78
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	f43f aefb 	beq.w	801afb8 <_strtod_l+0x498>
 801b1c2:	2101      	movs	r1, #1
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f001 fec5 	bl	801cf54 <__i2b>
 801b1ca:	4606      	mov	r6, r0
 801b1cc:	2800      	cmp	r0, #0
 801b1ce:	f43f aef3 	beq.w	801afb8 <_strtod_l+0x498>
 801b1d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b1d4:	9904      	ldr	r1, [sp, #16]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	bfab      	itete	ge
 801b1da:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b1dc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b1de:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b1e0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b1e4:	bfac      	ite	ge
 801b1e6:	eb03 0902 	addge.w	r9, r3, r2
 801b1ea:	1ad7      	sublt	r7, r2, r3
 801b1ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b1ee:	eba3 0801 	sub.w	r8, r3, r1
 801b1f2:	4490      	add	r8, r2
 801b1f4:	4ba3      	ldr	r3, [pc, #652]	; (801b484 <_strtod_l+0x964>)
 801b1f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b1fa:	4598      	cmp	r8, r3
 801b1fc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b200:	f280 80cc 	bge.w	801b39c <_strtod_l+0x87c>
 801b204:	eba3 0308 	sub.w	r3, r3, r8
 801b208:	2b1f      	cmp	r3, #31
 801b20a:	eba2 0203 	sub.w	r2, r2, r3
 801b20e:	f04f 0101 	mov.w	r1, #1
 801b212:	f300 80b6 	bgt.w	801b382 <_strtod_l+0x862>
 801b216:	fa01 f303 	lsl.w	r3, r1, r3
 801b21a:	9311      	str	r3, [sp, #68]	; 0x44
 801b21c:	2300      	movs	r3, #0
 801b21e:	930c      	str	r3, [sp, #48]	; 0x30
 801b220:	eb09 0802 	add.w	r8, r9, r2
 801b224:	9b04      	ldr	r3, [sp, #16]
 801b226:	45c1      	cmp	r9, r8
 801b228:	4417      	add	r7, r2
 801b22a:	441f      	add	r7, r3
 801b22c:	464b      	mov	r3, r9
 801b22e:	bfa8      	it	ge
 801b230:	4643      	movge	r3, r8
 801b232:	42bb      	cmp	r3, r7
 801b234:	bfa8      	it	ge
 801b236:	463b      	movge	r3, r7
 801b238:	2b00      	cmp	r3, #0
 801b23a:	bfc2      	ittt	gt
 801b23c:	eba8 0803 	subgt.w	r8, r8, r3
 801b240:	1aff      	subgt	r7, r7, r3
 801b242:	eba9 0903 	subgt.w	r9, r9, r3
 801b246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b248:	2b00      	cmp	r3, #0
 801b24a:	dd17      	ble.n	801b27c <_strtod_l+0x75c>
 801b24c:	4631      	mov	r1, r6
 801b24e:	461a      	mov	r2, r3
 801b250:	4620      	mov	r0, r4
 801b252:	f001 ff3b 	bl	801d0cc <__pow5mult>
 801b256:	4606      	mov	r6, r0
 801b258:	2800      	cmp	r0, #0
 801b25a:	f43f aead 	beq.w	801afb8 <_strtod_l+0x498>
 801b25e:	4601      	mov	r1, r0
 801b260:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b262:	4620      	mov	r0, r4
 801b264:	f001 fe8c 	bl	801cf80 <__multiply>
 801b268:	900f      	str	r0, [sp, #60]	; 0x3c
 801b26a:	2800      	cmp	r0, #0
 801b26c:	f43f aea4 	beq.w	801afb8 <_strtod_l+0x498>
 801b270:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b272:	4620      	mov	r0, r4
 801b274:	f001 fd68 	bl	801cd48 <_Bfree>
 801b278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b27a:	931e      	str	r3, [sp, #120]	; 0x78
 801b27c:	f1b8 0f00 	cmp.w	r8, #0
 801b280:	f300 8091 	bgt.w	801b3a6 <_strtod_l+0x886>
 801b284:	9b08      	ldr	r3, [sp, #32]
 801b286:	2b00      	cmp	r3, #0
 801b288:	dd08      	ble.n	801b29c <_strtod_l+0x77c>
 801b28a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b28c:	9907      	ldr	r1, [sp, #28]
 801b28e:	4620      	mov	r0, r4
 801b290:	f001 ff1c 	bl	801d0cc <__pow5mult>
 801b294:	9007      	str	r0, [sp, #28]
 801b296:	2800      	cmp	r0, #0
 801b298:	f43f ae8e 	beq.w	801afb8 <_strtod_l+0x498>
 801b29c:	2f00      	cmp	r7, #0
 801b29e:	dd08      	ble.n	801b2b2 <_strtod_l+0x792>
 801b2a0:	9907      	ldr	r1, [sp, #28]
 801b2a2:	463a      	mov	r2, r7
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	f001 ff6b 	bl	801d180 <__lshift>
 801b2aa:	9007      	str	r0, [sp, #28]
 801b2ac:	2800      	cmp	r0, #0
 801b2ae:	f43f ae83 	beq.w	801afb8 <_strtod_l+0x498>
 801b2b2:	f1b9 0f00 	cmp.w	r9, #0
 801b2b6:	dd08      	ble.n	801b2ca <_strtod_l+0x7aa>
 801b2b8:	4631      	mov	r1, r6
 801b2ba:	464a      	mov	r2, r9
 801b2bc:	4620      	mov	r0, r4
 801b2be:	f001 ff5f 	bl	801d180 <__lshift>
 801b2c2:	4606      	mov	r6, r0
 801b2c4:	2800      	cmp	r0, #0
 801b2c6:	f43f ae77 	beq.w	801afb8 <_strtod_l+0x498>
 801b2ca:	9a07      	ldr	r2, [sp, #28]
 801b2cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b2ce:	4620      	mov	r0, r4
 801b2d0:	f001 ffde 	bl	801d290 <__mdiff>
 801b2d4:	4605      	mov	r5, r0
 801b2d6:	2800      	cmp	r0, #0
 801b2d8:	f43f ae6e 	beq.w	801afb8 <_strtod_l+0x498>
 801b2dc:	68c3      	ldr	r3, [r0, #12]
 801b2de:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	60c3      	str	r3, [r0, #12]
 801b2e4:	4631      	mov	r1, r6
 801b2e6:	f001 ffb7 	bl	801d258 <__mcmp>
 801b2ea:	2800      	cmp	r0, #0
 801b2ec:	da65      	bge.n	801b3ba <_strtod_l+0x89a>
 801b2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b2f0:	ea53 030a 	orrs.w	r3, r3, sl
 801b2f4:	f040 8087 	bne.w	801b406 <_strtod_l+0x8e6>
 801b2f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f040 8082 	bne.w	801b406 <_strtod_l+0x8e6>
 801b302:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b306:	0d1b      	lsrs	r3, r3, #20
 801b308:	051b      	lsls	r3, r3, #20
 801b30a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b30e:	d97a      	bls.n	801b406 <_strtod_l+0x8e6>
 801b310:	696b      	ldr	r3, [r5, #20]
 801b312:	b913      	cbnz	r3, 801b31a <_strtod_l+0x7fa>
 801b314:	692b      	ldr	r3, [r5, #16]
 801b316:	2b01      	cmp	r3, #1
 801b318:	dd75      	ble.n	801b406 <_strtod_l+0x8e6>
 801b31a:	4629      	mov	r1, r5
 801b31c:	2201      	movs	r2, #1
 801b31e:	4620      	mov	r0, r4
 801b320:	f001 ff2e 	bl	801d180 <__lshift>
 801b324:	4631      	mov	r1, r6
 801b326:	4605      	mov	r5, r0
 801b328:	f001 ff96 	bl	801d258 <__mcmp>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	dd6a      	ble.n	801b406 <_strtod_l+0x8e6>
 801b330:	9904      	ldr	r1, [sp, #16]
 801b332:	4a55      	ldr	r2, [pc, #340]	; (801b488 <_strtod_l+0x968>)
 801b334:	465b      	mov	r3, fp
 801b336:	2900      	cmp	r1, #0
 801b338:	f000 8085 	beq.w	801b446 <_strtod_l+0x926>
 801b33c:	ea02 010b 	and.w	r1, r2, fp
 801b340:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b344:	dc7f      	bgt.n	801b446 <_strtod_l+0x926>
 801b346:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b34a:	f77f aeaa 	ble.w	801b0a2 <_strtod_l+0x582>
 801b34e:	4a4f      	ldr	r2, [pc, #316]	; (801b48c <_strtod_l+0x96c>)
 801b350:	2300      	movs	r3, #0
 801b352:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b356:	4650      	mov	r0, sl
 801b358:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b35c:	4659      	mov	r1, fp
 801b35e:	f7e5 f94b 	bl	80005f8 <__aeabi_dmul>
 801b362:	460b      	mov	r3, r1
 801b364:	4303      	orrs	r3, r0
 801b366:	bf08      	it	eq
 801b368:	2322      	moveq	r3, #34	; 0x22
 801b36a:	4682      	mov	sl, r0
 801b36c:	468b      	mov	fp, r1
 801b36e:	bf08      	it	eq
 801b370:	6023      	streq	r3, [r4, #0]
 801b372:	e62b      	b.n	801afcc <_strtod_l+0x4ac>
 801b374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b378:	fa02 f303 	lsl.w	r3, r2, r3
 801b37c:	ea03 0a0a 	and.w	sl, r3, sl
 801b380:	e6de      	b.n	801b140 <_strtod_l+0x620>
 801b382:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b386:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b38a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b38e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b392:	fa01 f308 	lsl.w	r3, r1, r8
 801b396:	930c      	str	r3, [sp, #48]	; 0x30
 801b398:	9111      	str	r1, [sp, #68]	; 0x44
 801b39a:	e741      	b.n	801b220 <_strtod_l+0x700>
 801b39c:	2300      	movs	r3, #0
 801b39e:	930c      	str	r3, [sp, #48]	; 0x30
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	9311      	str	r3, [sp, #68]	; 0x44
 801b3a4:	e73c      	b.n	801b220 <_strtod_l+0x700>
 801b3a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b3a8:	4642      	mov	r2, r8
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	f001 fee8 	bl	801d180 <__lshift>
 801b3b0:	901e      	str	r0, [sp, #120]	; 0x78
 801b3b2:	2800      	cmp	r0, #0
 801b3b4:	f47f af66 	bne.w	801b284 <_strtod_l+0x764>
 801b3b8:	e5fe      	b.n	801afb8 <_strtod_l+0x498>
 801b3ba:	465f      	mov	r7, fp
 801b3bc:	d16e      	bne.n	801b49c <_strtod_l+0x97c>
 801b3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b3c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b3c4:	b342      	cbz	r2, 801b418 <_strtod_l+0x8f8>
 801b3c6:	4a32      	ldr	r2, [pc, #200]	; (801b490 <_strtod_l+0x970>)
 801b3c8:	4293      	cmp	r3, r2
 801b3ca:	d128      	bne.n	801b41e <_strtod_l+0x8fe>
 801b3cc:	9b04      	ldr	r3, [sp, #16]
 801b3ce:	4650      	mov	r0, sl
 801b3d0:	b1eb      	cbz	r3, 801b40e <_strtod_l+0x8ee>
 801b3d2:	4a2d      	ldr	r2, [pc, #180]	; (801b488 <_strtod_l+0x968>)
 801b3d4:	403a      	ands	r2, r7
 801b3d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b3da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b3de:	d819      	bhi.n	801b414 <_strtod_l+0x8f4>
 801b3e0:	0d12      	lsrs	r2, r2, #20
 801b3e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b3e6:	fa01 f303 	lsl.w	r3, r1, r3
 801b3ea:	4298      	cmp	r0, r3
 801b3ec:	d117      	bne.n	801b41e <_strtod_l+0x8fe>
 801b3ee:	4b29      	ldr	r3, [pc, #164]	; (801b494 <_strtod_l+0x974>)
 801b3f0:	429f      	cmp	r7, r3
 801b3f2:	d102      	bne.n	801b3fa <_strtod_l+0x8da>
 801b3f4:	3001      	adds	r0, #1
 801b3f6:	f43f addf 	beq.w	801afb8 <_strtod_l+0x498>
 801b3fa:	4b23      	ldr	r3, [pc, #140]	; (801b488 <_strtod_l+0x968>)
 801b3fc:	403b      	ands	r3, r7
 801b3fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b402:	f04f 0a00 	mov.w	sl, #0
 801b406:	9b04      	ldr	r3, [sp, #16]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d1a0      	bne.n	801b34e <_strtod_l+0x82e>
 801b40c:	e5de      	b.n	801afcc <_strtod_l+0x4ac>
 801b40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b412:	e7ea      	b.n	801b3ea <_strtod_l+0x8ca>
 801b414:	460b      	mov	r3, r1
 801b416:	e7e8      	b.n	801b3ea <_strtod_l+0x8ca>
 801b418:	ea53 030a 	orrs.w	r3, r3, sl
 801b41c:	d088      	beq.n	801b330 <_strtod_l+0x810>
 801b41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b420:	b1db      	cbz	r3, 801b45a <_strtod_l+0x93a>
 801b422:	423b      	tst	r3, r7
 801b424:	d0ef      	beq.n	801b406 <_strtod_l+0x8e6>
 801b426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b428:	9a04      	ldr	r2, [sp, #16]
 801b42a:	4650      	mov	r0, sl
 801b42c:	4659      	mov	r1, fp
 801b42e:	b1c3      	cbz	r3, 801b462 <_strtod_l+0x942>
 801b430:	f7ff fb5a 	bl	801aae8 <sulp>
 801b434:	4602      	mov	r2, r0
 801b436:	460b      	mov	r3, r1
 801b438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b43c:	f7e4 ff26 	bl	800028c <__adddf3>
 801b440:	4682      	mov	sl, r0
 801b442:	468b      	mov	fp, r1
 801b444:	e7df      	b.n	801b406 <_strtod_l+0x8e6>
 801b446:	4013      	ands	r3, r2
 801b448:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b44c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b450:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b454:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b458:	e7d5      	b.n	801b406 <_strtod_l+0x8e6>
 801b45a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b45c:	ea13 0f0a 	tst.w	r3, sl
 801b460:	e7e0      	b.n	801b424 <_strtod_l+0x904>
 801b462:	f7ff fb41 	bl	801aae8 <sulp>
 801b466:	4602      	mov	r2, r0
 801b468:	460b      	mov	r3, r1
 801b46a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b46e:	f7e4 ff0b 	bl	8000288 <__aeabi_dsub>
 801b472:	2200      	movs	r2, #0
 801b474:	2300      	movs	r3, #0
 801b476:	4682      	mov	sl, r0
 801b478:	468b      	mov	fp, r1
 801b47a:	f7e5 fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 801b47e:	2800      	cmp	r0, #0
 801b480:	d0c1      	beq.n	801b406 <_strtod_l+0x8e6>
 801b482:	e60e      	b.n	801b0a2 <_strtod_l+0x582>
 801b484:	fffffc02 	.word	0xfffffc02
 801b488:	7ff00000 	.word	0x7ff00000
 801b48c:	39500000 	.word	0x39500000
 801b490:	000fffff 	.word	0x000fffff
 801b494:	7fefffff 	.word	0x7fefffff
 801b498:	08020310 	.word	0x08020310
 801b49c:	4631      	mov	r1, r6
 801b49e:	4628      	mov	r0, r5
 801b4a0:	f002 f856 	bl	801d550 <__ratio>
 801b4a4:	ec59 8b10 	vmov	r8, r9, d0
 801b4a8:	ee10 0a10 	vmov	r0, s0
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b4b2:	4649      	mov	r1, r9
 801b4b4:	f7e5 fb1c 	bl	8000af0 <__aeabi_dcmple>
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	d07c      	beq.n	801b5b6 <_strtod_l+0xa96>
 801b4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d04c      	beq.n	801b55c <_strtod_l+0xa3c>
 801b4c2:	4b95      	ldr	r3, [pc, #596]	; (801b718 <_strtod_l+0xbf8>)
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b4ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b718 <_strtod_l+0xbf8>
 801b4ce:	f04f 0800 	mov.w	r8, #0
 801b4d2:	4b92      	ldr	r3, [pc, #584]	; (801b71c <_strtod_l+0xbfc>)
 801b4d4:	403b      	ands	r3, r7
 801b4d6:	9311      	str	r3, [sp, #68]	; 0x44
 801b4d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b4da:	4b91      	ldr	r3, [pc, #580]	; (801b720 <_strtod_l+0xc00>)
 801b4dc:	429a      	cmp	r2, r3
 801b4de:	f040 80b2 	bne.w	801b646 <_strtod_l+0xb26>
 801b4e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b4e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b4ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b4ee:	ec4b ab10 	vmov	d0, sl, fp
 801b4f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b4f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b4fa:	f001 ff51 	bl	801d3a0 <__ulp>
 801b4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b502:	ec53 2b10 	vmov	r2, r3, d0
 801b506:	f7e5 f877 	bl	80005f8 <__aeabi_dmul>
 801b50a:	4652      	mov	r2, sl
 801b50c:	465b      	mov	r3, fp
 801b50e:	f7e4 febd 	bl	800028c <__adddf3>
 801b512:	460b      	mov	r3, r1
 801b514:	4981      	ldr	r1, [pc, #516]	; (801b71c <_strtod_l+0xbfc>)
 801b516:	4a83      	ldr	r2, [pc, #524]	; (801b724 <_strtod_l+0xc04>)
 801b518:	4019      	ands	r1, r3
 801b51a:	4291      	cmp	r1, r2
 801b51c:	4682      	mov	sl, r0
 801b51e:	d95e      	bls.n	801b5de <_strtod_l+0xabe>
 801b520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b522:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b526:	4293      	cmp	r3, r2
 801b528:	d103      	bne.n	801b532 <_strtod_l+0xa12>
 801b52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b52c:	3301      	adds	r3, #1
 801b52e:	f43f ad43 	beq.w	801afb8 <_strtod_l+0x498>
 801b532:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b730 <_strtod_l+0xc10>
 801b536:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b53a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b53c:	4620      	mov	r0, r4
 801b53e:	f001 fc03 	bl	801cd48 <_Bfree>
 801b542:	9907      	ldr	r1, [sp, #28]
 801b544:	4620      	mov	r0, r4
 801b546:	f001 fbff 	bl	801cd48 <_Bfree>
 801b54a:	4631      	mov	r1, r6
 801b54c:	4620      	mov	r0, r4
 801b54e:	f001 fbfb 	bl	801cd48 <_Bfree>
 801b552:	4629      	mov	r1, r5
 801b554:	4620      	mov	r0, r4
 801b556:	f001 fbf7 	bl	801cd48 <_Bfree>
 801b55a:	e613      	b.n	801b184 <_strtod_l+0x664>
 801b55c:	f1ba 0f00 	cmp.w	sl, #0
 801b560:	d11b      	bne.n	801b59a <_strtod_l+0xa7a>
 801b562:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b566:	b9f3      	cbnz	r3, 801b5a6 <_strtod_l+0xa86>
 801b568:	4b6b      	ldr	r3, [pc, #428]	; (801b718 <_strtod_l+0xbf8>)
 801b56a:	2200      	movs	r2, #0
 801b56c:	4640      	mov	r0, r8
 801b56e:	4649      	mov	r1, r9
 801b570:	f7e5 fab4 	bl	8000adc <__aeabi_dcmplt>
 801b574:	b9d0      	cbnz	r0, 801b5ac <_strtod_l+0xa8c>
 801b576:	4640      	mov	r0, r8
 801b578:	4649      	mov	r1, r9
 801b57a:	4b6b      	ldr	r3, [pc, #428]	; (801b728 <_strtod_l+0xc08>)
 801b57c:	2200      	movs	r2, #0
 801b57e:	f7e5 f83b 	bl	80005f8 <__aeabi_dmul>
 801b582:	4680      	mov	r8, r0
 801b584:	4689      	mov	r9, r1
 801b586:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b58a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b58e:	931b      	str	r3, [sp, #108]	; 0x6c
 801b590:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b594:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b598:	e79b      	b.n	801b4d2 <_strtod_l+0x9b2>
 801b59a:	f1ba 0f01 	cmp.w	sl, #1
 801b59e:	d102      	bne.n	801b5a6 <_strtod_l+0xa86>
 801b5a0:	2f00      	cmp	r7, #0
 801b5a2:	f43f ad7e 	beq.w	801b0a2 <_strtod_l+0x582>
 801b5a6:	4b61      	ldr	r3, [pc, #388]	; (801b72c <_strtod_l+0xc0c>)
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	e78c      	b.n	801b4c6 <_strtod_l+0x9a6>
 801b5ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b728 <_strtod_l+0xc08>
 801b5b0:	f04f 0800 	mov.w	r8, #0
 801b5b4:	e7e7      	b.n	801b586 <_strtod_l+0xa66>
 801b5b6:	4b5c      	ldr	r3, [pc, #368]	; (801b728 <_strtod_l+0xc08>)
 801b5b8:	4640      	mov	r0, r8
 801b5ba:	4649      	mov	r1, r9
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f7e5 f81b 	bl	80005f8 <__aeabi_dmul>
 801b5c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5c4:	4680      	mov	r8, r0
 801b5c6:	4689      	mov	r9, r1
 801b5c8:	b933      	cbnz	r3, 801b5d8 <_strtod_l+0xab8>
 801b5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b5ce:	9012      	str	r0, [sp, #72]	; 0x48
 801b5d0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b5d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b5d6:	e7dd      	b.n	801b594 <_strtod_l+0xa74>
 801b5d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b5dc:	e7f9      	b.n	801b5d2 <_strtod_l+0xab2>
 801b5de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b5e2:	9b04      	ldr	r3, [sp, #16]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d1a8      	bne.n	801b53a <_strtod_l+0xa1a>
 801b5e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b5ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b5ee:	0d1b      	lsrs	r3, r3, #20
 801b5f0:	051b      	lsls	r3, r3, #20
 801b5f2:	429a      	cmp	r2, r3
 801b5f4:	d1a1      	bne.n	801b53a <_strtod_l+0xa1a>
 801b5f6:	4640      	mov	r0, r8
 801b5f8:	4649      	mov	r1, r9
 801b5fa:	f7e5 fb5d 	bl	8000cb8 <__aeabi_d2lz>
 801b5fe:	f7e4 ffcd 	bl	800059c <__aeabi_l2d>
 801b602:	4602      	mov	r2, r0
 801b604:	460b      	mov	r3, r1
 801b606:	4640      	mov	r0, r8
 801b608:	4649      	mov	r1, r9
 801b60a:	f7e4 fe3d 	bl	8000288 <__aeabi_dsub>
 801b60e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b614:	ea43 030a 	orr.w	r3, r3, sl
 801b618:	4313      	orrs	r3, r2
 801b61a:	4680      	mov	r8, r0
 801b61c:	4689      	mov	r9, r1
 801b61e:	d053      	beq.n	801b6c8 <_strtod_l+0xba8>
 801b620:	a335      	add	r3, pc, #212	; (adr r3, 801b6f8 <_strtod_l+0xbd8>)
 801b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b626:	f7e5 fa59 	bl	8000adc <__aeabi_dcmplt>
 801b62a:	2800      	cmp	r0, #0
 801b62c:	f47f acce 	bne.w	801afcc <_strtod_l+0x4ac>
 801b630:	a333      	add	r3, pc, #204	; (adr r3, 801b700 <_strtod_l+0xbe0>)
 801b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b636:	4640      	mov	r0, r8
 801b638:	4649      	mov	r1, r9
 801b63a:	f7e5 fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 801b63e:	2800      	cmp	r0, #0
 801b640:	f43f af7b 	beq.w	801b53a <_strtod_l+0xa1a>
 801b644:	e4c2      	b.n	801afcc <_strtod_l+0x4ac>
 801b646:	9b04      	ldr	r3, [sp, #16]
 801b648:	b333      	cbz	r3, 801b698 <_strtod_l+0xb78>
 801b64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b64c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b650:	d822      	bhi.n	801b698 <_strtod_l+0xb78>
 801b652:	a32d      	add	r3, pc, #180	; (adr r3, 801b708 <_strtod_l+0xbe8>)
 801b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b658:	4640      	mov	r0, r8
 801b65a:	4649      	mov	r1, r9
 801b65c:	f7e5 fa48 	bl	8000af0 <__aeabi_dcmple>
 801b660:	b1a0      	cbz	r0, 801b68c <_strtod_l+0xb6c>
 801b662:	4649      	mov	r1, r9
 801b664:	4640      	mov	r0, r8
 801b666:	f7e5 fa9f 	bl	8000ba8 <__aeabi_d2uiz>
 801b66a:	2801      	cmp	r0, #1
 801b66c:	bf38      	it	cc
 801b66e:	2001      	movcc	r0, #1
 801b670:	f7e4 ff48 	bl	8000504 <__aeabi_ui2d>
 801b674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b676:	4680      	mov	r8, r0
 801b678:	4689      	mov	r9, r1
 801b67a:	bb13      	cbnz	r3, 801b6c2 <_strtod_l+0xba2>
 801b67c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b680:	9014      	str	r0, [sp, #80]	; 0x50
 801b682:	9315      	str	r3, [sp, #84]	; 0x54
 801b684:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b688:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b690:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b694:	1a9b      	subs	r3, r3, r2
 801b696:	930d      	str	r3, [sp, #52]	; 0x34
 801b698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b69c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b6a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b6a4:	f001 fe7c 	bl	801d3a0 <__ulp>
 801b6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b6ac:	ec53 2b10 	vmov	r2, r3, d0
 801b6b0:	f7e4 ffa2 	bl	80005f8 <__aeabi_dmul>
 801b6b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b6b8:	f7e4 fde8 	bl	800028c <__adddf3>
 801b6bc:	4682      	mov	sl, r0
 801b6be:	468b      	mov	fp, r1
 801b6c0:	e78f      	b.n	801b5e2 <_strtod_l+0xac2>
 801b6c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b6c6:	e7dd      	b.n	801b684 <_strtod_l+0xb64>
 801b6c8:	a311      	add	r3, pc, #68	; (adr r3, 801b710 <_strtod_l+0xbf0>)
 801b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ce:	f7e5 fa05 	bl	8000adc <__aeabi_dcmplt>
 801b6d2:	e7b4      	b.n	801b63e <_strtod_l+0xb1e>
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	930e      	str	r3, [sp, #56]	; 0x38
 801b6d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b6da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b6dc:	6013      	str	r3, [r2, #0]
 801b6de:	f7ff ba65 	b.w	801abac <_strtod_l+0x8c>
 801b6e2:	2b65      	cmp	r3, #101	; 0x65
 801b6e4:	f43f ab5d 	beq.w	801ada2 <_strtod_l+0x282>
 801b6e8:	2b45      	cmp	r3, #69	; 0x45
 801b6ea:	f43f ab5a 	beq.w	801ada2 <_strtod_l+0x282>
 801b6ee:	2201      	movs	r2, #1
 801b6f0:	f7ff bb92 	b.w	801ae18 <_strtod_l+0x2f8>
 801b6f4:	f3af 8000 	nop.w
 801b6f8:	94a03595 	.word	0x94a03595
 801b6fc:	3fdfffff 	.word	0x3fdfffff
 801b700:	35afe535 	.word	0x35afe535
 801b704:	3fe00000 	.word	0x3fe00000
 801b708:	ffc00000 	.word	0xffc00000
 801b70c:	41dfffff 	.word	0x41dfffff
 801b710:	94a03595 	.word	0x94a03595
 801b714:	3fcfffff 	.word	0x3fcfffff
 801b718:	3ff00000 	.word	0x3ff00000
 801b71c:	7ff00000 	.word	0x7ff00000
 801b720:	7fe00000 	.word	0x7fe00000
 801b724:	7c9fffff 	.word	0x7c9fffff
 801b728:	3fe00000 	.word	0x3fe00000
 801b72c:	bff00000 	.word	0xbff00000
 801b730:	7fefffff 	.word	0x7fefffff

0801b734 <_strtod_r>:
 801b734:	4b01      	ldr	r3, [pc, #4]	; (801b73c <_strtod_r+0x8>)
 801b736:	f7ff b9f3 	b.w	801ab20 <_strtod_l>
 801b73a:	bf00      	nop
 801b73c:	2000012c 	.word	0x2000012c

0801b740 <_strtol_l.isra.0>:
 801b740:	2b01      	cmp	r3, #1
 801b742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b746:	d001      	beq.n	801b74c <_strtol_l.isra.0+0xc>
 801b748:	2b24      	cmp	r3, #36	; 0x24
 801b74a:	d906      	bls.n	801b75a <_strtol_l.isra.0+0x1a>
 801b74c:	f7fe f95e 	bl	8019a0c <__errno>
 801b750:	2316      	movs	r3, #22
 801b752:	6003      	str	r3, [r0, #0]
 801b754:	2000      	movs	r0, #0
 801b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b75a:	4f3a      	ldr	r7, [pc, #232]	; (801b844 <_strtol_l.isra.0+0x104>)
 801b75c:	468e      	mov	lr, r1
 801b75e:	4676      	mov	r6, lr
 801b760:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b764:	5de5      	ldrb	r5, [r4, r7]
 801b766:	f015 0508 	ands.w	r5, r5, #8
 801b76a:	d1f8      	bne.n	801b75e <_strtol_l.isra.0+0x1e>
 801b76c:	2c2d      	cmp	r4, #45	; 0x2d
 801b76e:	d134      	bne.n	801b7da <_strtol_l.isra.0+0x9a>
 801b770:	f89e 4000 	ldrb.w	r4, [lr]
 801b774:	f04f 0801 	mov.w	r8, #1
 801b778:	f106 0e02 	add.w	lr, r6, #2
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d05c      	beq.n	801b83a <_strtol_l.isra.0+0xfa>
 801b780:	2b10      	cmp	r3, #16
 801b782:	d10c      	bne.n	801b79e <_strtol_l.isra.0+0x5e>
 801b784:	2c30      	cmp	r4, #48	; 0x30
 801b786:	d10a      	bne.n	801b79e <_strtol_l.isra.0+0x5e>
 801b788:	f89e 4000 	ldrb.w	r4, [lr]
 801b78c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b790:	2c58      	cmp	r4, #88	; 0x58
 801b792:	d14d      	bne.n	801b830 <_strtol_l.isra.0+0xf0>
 801b794:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b798:	2310      	movs	r3, #16
 801b79a:	f10e 0e02 	add.w	lr, lr, #2
 801b79e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b7a2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b7a6:	2600      	movs	r6, #0
 801b7a8:	fbbc f9f3 	udiv	r9, ip, r3
 801b7ac:	4635      	mov	r5, r6
 801b7ae:	fb03 ca19 	mls	sl, r3, r9, ip
 801b7b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b7b6:	2f09      	cmp	r7, #9
 801b7b8:	d818      	bhi.n	801b7ec <_strtol_l.isra.0+0xac>
 801b7ba:	463c      	mov	r4, r7
 801b7bc:	42a3      	cmp	r3, r4
 801b7be:	dd24      	ble.n	801b80a <_strtol_l.isra.0+0xca>
 801b7c0:	2e00      	cmp	r6, #0
 801b7c2:	db1f      	blt.n	801b804 <_strtol_l.isra.0+0xc4>
 801b7c4:	45a9      	cmp	r9, r5
 801b7c6:	d31d      	bcc.n	801b804 <_strtol_l.isra.0+0xc4>
 801b7c8:	d101      	bne.n	801b7ce <_strtol_l.isra.0+0x8e>
 801b7ca:	45a2      	cmp	sl, r4
 801b7cc:	db1a      	blt.n	801b804 <_strtol_l.isra.0+0xc4>
 801b7ce:	fb05 4503 	mla	r5, r5, r3, r4
 801b7d2:	2601      	movs	r6, #1
 801b7d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b7d8:	e7eb      	b.n	801b7b2 <_strtol_l.isra.0+0x72>
 801b7da:	2c2b      	cmp	r4, #43	; 0x2b
 801b7dc:	bf08      	it	eq
 801b7de:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b7e2:	46a8      	mov	r8, r5
 801b7e4:	bf08      	it	eq
 801b7e6:	f106 0e02 	addeq.w	lr, r6, #2
 801b7ea:	e7c7      	b.n	801b77c <_strtol_l.isra.0+0x3c>
 801b7ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b7f0:	2f19      	cmp	r7, #25
 801b7f2:	d801      	bhi.n	801b7f8 <_strtol_l.isra.0+0xb8>
 801b7f4:	3c37      	subs	r4, #55	; 0x37
 801b7f6:	e7e1      	b.n	801b7bc <_strtol_l.isra.0+0x7c>
 801b7f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b7fc:	2f19      	cmp	r7, #25
 801b7fe:	d804      	bhi.n	801b80a <_strtol_l.isra.0+0xca>
 801b800:	3c57      	subs	r4, #87	; 0x57
 801b802:	e7db      	b.n	801b7bc <_strtol_l.isra.0+0x7c>
 801b804:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b808:	e7e4      	b.n	801b7d4 <_strtol_l.isra.0+0x94>
 801b80a:	2e00      	cmp	r6, #0
 801b80c:	da05      	bge.n	801b81a <_strtol_l.isra.0+0xda>
 801b80e:	2322      	movs	r3, #34	; 0x22
 801b810:	6003      	str	r3, [r0, #0]
 801b812:	4665      	mov	r5, ip
 801b814:	b942      	cbnz	r2, 801b828 <_strtol_l.isra.0+0xe8>
 801b816:	4628      	mov	r0, r5
 801b818:	e79d      	b.n	801b756 <_strtol_l.isra.0+0x16>
 801b81a:	f1b8 0f00 	cmp.w	r8, #0
 801b81e:	d000      	beq.n	801b822 <_strtol_l.isra.0+0xe2>
 801b820:	426d      	negs	r5, r5
 801b822:	2a00      	cmp	r2, #0
 801b824:	d0f7      	beq.n	801b816 <_strtol_l.isra.0+0xd6>
 801b826:	b10e      	cbz	r6, 801b82c <_strtol_l.isra.0+0xec>
 801b828:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801b82c:	6011      	str	r1, [r2, #0]
 801b82e:	e7f2      	b.n	801b816 <_strtol_l.isra.0+0xd6>
 801b830:	2430      	movs	r4, #48	; 0x30
 801b832:	2b00      	cmp	r3, #0
 801b834:	d1b3      	bne.n	801b79e <_strtol_l.isra.0+0x5e>
 801b836:	2308      	movs	r3, #8
 801b838:	e7b1      	b.n	801b79e <_strtol_l.isra.0+0x5e>
 801b83a:	2c30      	cmp	r4, #48	; 0x30
 801b83c:	d0a4      	beq.n	801b788 <_strtol_l.isra.0+0x48>
 801b83e:	230a      	movs	r3, #10
 801b840:	e7ad      	b.n	801b79e <_strtol_l.isra.0+0x5e>
 801b842:	bf00      	nop
 801b844:	08020339 	.word	0x08020339

0801b848 <_strtol_r>:
 801b848:	f7ff bf7a 	b.w	801b740 <_strtol_l.isra.0>

0801b84c <_write_r>:
 801b84c:	b538      	push	{r3, r4, r5, lr}
 801b84e:	4d07      	ldr	r5, [pc, #28]	; (801b86c <_write_r+0x20>)
 801b850:	4604      	mov	r4, r0
 801b852:	4608      	mov	r0, r1
 801b854:	4611      	mov	r1, r2
 801b856:	2200      	movs	r2, #0
 801b858:	602a      	str	r2, [r5, #0]
 801b85a:	461a      	mov	r2, r3
 801b85c:	f7f1 fb75 	bl	800cf4a <_write>
 801b860:	1c43      	adds	r3, r0, #1
 801b862:	d102      	bne.n	801b86a <_write_r+0x1e>
 801b864:	682b      	ldr	r3, [r5, #0]
 801b866:	b103      	cbz	r3, 801b86a <_write_r+0x1e>
 801b868:	6023      	str	r3, [r4, #0]
 801b86a:	bd38      	pop	{r3, r4, r5, pc}
 801b86c:	2000a6f8 	.word	0x2000a6f8

0801b870 <_close_r>:
 801b870:	b538      	push	{r3, r4, r5, lr}
 801b872:	4d06      	ldr	r5, [pc, #24]	; (801b88c <_close_r+0x1c>)
 801b874:	2300      	movs	r3, #0
 801b876:	4604      	mov	r4, r0
 801b878:	4608      	mov	r0, r1
 801b87a:	602b      	str	r3, [r5, #0]
 801b87c:	f7f1 fb81 	bl	800cf82 <_close>
 801b880:	1c43      	adds	r3, r0, #1
 801b882:	d102      	bne.n	801b88a <_close_r+0x1a>
 801b884:	682b      	ldr	r3, [r5, #0]
 801b886:	b103      	cbz	r3, 801b88a <_close_r+0x1a>
 801b888:	6023      	str	r3, [r4, #0]
 801b88a:	bd38      	pop	{r3, r4, r5, pc}
 801b88c:	2000a6f8 	.word	0x2000a6f8

0801b890 <quorem>:
 801b890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b894:	6903      	ldr	r3, [r0, #16]
 801b896:	690c      	ldr	r4, [r1, #16]
 801b898:	42a3      	cmp	r3, r4
 801b89a:	4607      	mov	r7, r0
 801b89c:	f2c0 8081 	blt.w	801b9a2 <quorem+0x112>
 801b8a0:	3c01      	subs	r4, #1
 801b8a2:	f101 0814 	add.w	r8, r1, #20
 801b8a6:	f100 0514 	add.w	r5, r0, #20
 801b8aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b8ae:	9301      	str	r3, [sp, #4]
 801b8b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b8b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b8b8:	3301      	adds	r3, #1
 801b8ba:	429a      	cmp	r2, r3
 801b8bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b8c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b8c4:	fbb2 f6f3 	udiv	r6, r2, r3
 801b8c8:	d331      	bcc.n	801b92e <quorem+0x9e>
 801b8ca:	f04f 0e00 	mov.w	lr, #0
 801b8ce:	4640      	mov	r0, r8
 801b8d0:	46ac      	mov	ip, r5
 801b8d2:	46f2      	mov	sl, lr
 801b8d4:	f850 2b04 	ldr.w	r2, [r0], #4
 801b8d8:	b293      	uxth	r3, r2
 801b8da:	fb06 e303 	mla	r3, r6, r3, lr
 801b8de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b8e2:	b29b      	uxth	r3, r3
 801b8e4:	ebaa 0303 	sub.w	r3, sl, r3
 801b8e8:	0c12      	lsrs	r2, r2, #16
 801b8ea:	f8dc a000 	ldr.w	sl, [ip]
 801b8ee:	fb06 e202 	mla	r2, r6, r2, lr
 801b8f2:	fa13 f38a 	uxtah	r3, r3, sl
 801b8f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b8fa:	fa1f fa82 	uxth.w	sl, r2
 801b8fe:	f8dc 2000 	ldr.w	r2, [ip]
 801b902:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801b906:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b90a:	b29b      	uxth	r3, r3
 801b90c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b910:	4581      	cmp	r9, r0
 801b912:	f84c 3b04 	str.w	r3, [ip], #4
 801b916:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b91a:	d2db      	bcs.n	801b8d4 <quorem+0x44>
 801b91c:	f855 300b 	ldr.w	r3, [r5, fp]
 801b920:	b92b      	cbnz	r3, 801b92e <quorem+0x9e>
 801b922:	9b01      	ldr	r3, [sp, #4]
 801b924:	3b04      	subs	r3, #4
 801b926:	429d      	cmp	r5, r3
 801b928:	461a      	mov	r2, r3
 801b92a:	d32e      	bcc.n	801b98a <quorem+0xfa>
 801b92c:	613c      	str	r4, [r7, #16]
 801b92e:	4638      	mov	r0, r7
 801b930:	f001 fc92 	bl	801d258 <__mcmp>
 801b934:	2800      	cmp	r0, #0
 801b936:	db24      	blt.n	801b982 <quorem+0xf2>
 801b938:	3601      	adds	r6, #1
 801b93a:	4628      	mov	r0, r5
 801b93c:	f04f 0c00 	mov.w	ip, #0
 801b940:	f858 2b04 	ldr.w	r2, [r8], #4
 801b944:	f8d0 e000 	ldr.w	lr, [r0]
 801b948:	b293      	uxth	r3, r2
 801b94a:	ebac 0303 	sub.w	r3, ip, r3
 801b94e:	0c12      	lsrs	r2, r2, #16
 801b950:	fa13 f38e 	uxtah	r3, r3, lr
 801b954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b95c:	b29b      	uxth	r3, r3
 801b95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b962:	45c1      	cmp	r9, r8
 801b964:	f840 3b04 	str.w	r3, [r0], #4
 801b968:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b96c:	d2e8      	bcs.n	801b940 <quorem+0xb0>
 801b96e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b976:	b922      	cbnz	r2, 801b982 <quorem+0xf2>
 801b978:	3b04      	subs	r3, #4
 801b97a:	429d      	cmp	r5, r3
 801b97c:	461a      	mov	r2, r3
 801b97e:	d30a      	bcc.n	801b996 <quorem+0x106>
 801b980:	613c      	str	r4, [r7, #16]
 801b982:	4630      	mov	r0, r6
 801b984:	b003      	add	sp, #12
 801b986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b98a:	6812      	ldr	r2, [r2, #0]
 801b98c:	3b04      	subs	r3, #4
 801b98e:	2a00      	cmp	r2, #0
 801b990:	d1cc      	bne.n	801b92c <quorem+0x9c>
 801b992:	3c01      	subs	r4, #1
 801b994:	e7c7      	b.n	801b926 <quorem+0x96>
 801b996:	6812      	ldr	r2, [r2, #0]
 801b998:	3b04      	subs	r3, #4
 801b99a:	2a00      	cmp	r2, #0
 801b99c:	d1f0      	bne.n	801b980 <quorem+0xf0>
 801b99e:	3c01      	subs	r4, #1
 801b9a0:	e7eb      	b.n	801b97a <quorem+0xea>
 801b9a2:	2000      	movs	r0, #0
 801b9a4:	e7ee      	b.n	801b984 <quorem+0xf4>
	...

0801b9a8 <_dtoa_r>:
 801b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ac:	ed2d 8b02 	vpush	{d8}
 801b9b0:	ec57 6b10 	vmov	r6, r7, d0
 801b9b4:	b095      	sub	sp, #84	; 0x54
 801b9b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b9b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b9bc:	9105      	str	r1, [sp, #20]
 801b9be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	9209      	str	r2, [sp, #36]	; 0x24
 801b9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9c8:	b975      	cbnz	r5, 801b9e8 <_dtoa_r+0x40>
 801b9ca:	2010      	movs	r0, #16
 801b9cc:	f7fe f848 	bl	8019a60 <malloc>
 801b9d0:	4602      	mov	r2, r0
 801b9d2:	6260      	str	r0, [r4, #36]	; 0x24
 801b9d4:	b920      	cbnz	r0, 801b9e0 <_dtoa_r+0x38>
 801b9d6:	4bb2      	ldr	r3, [pc, #712]	; (801bca0 <_dtoa_r+0x2f8>)
 801b9d8:	21ea      	movs	r1, #234	; 0xea
 801b9da:	48b2      	ldr	r0, [pc, #712]	; (801bca4 <_dtoa_r+0x2fc>)
 801b9dc:	f002 f808 	bl	801d9f0 <__assert_func>
 801b9e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b9e4:	6005      	str	r5, [r0, #0]
 801b9e6:	60c5      	str	r5, [r0, #12]
 801b9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9ea:	6819      	ldr	r1, [r3, #0]
 801b9ec:	b151      	cbz	r1, 801ba04 <_dtoa_r+0x5c>
 801b9ee:	685a      	ldr	r2, [r3, #4]
 801b9f0:	604a      	str	r2, [r1, #4]
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	4093      	lsls	r3, r2
 801b9f6:	608b      	str	r3, [r1, #8]
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	f001 f9a5 	bl	801cd48 <_Bfree>
 801b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ba00:	2200      	movs	r2, #0
 801ba02:	601a      	str	r2, [r3, #0]
 801ba04:	1e3b      	subs	r3, r7, #0
 801ba06:	bfb9      	ittee	lt
 801ba08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ba0c:	9303      	strlt	r3, [sp, #12]
 801ba0e:	2300      	movge	r3, #0
 801ba10:	f8c8 3000 	strge.w	r3, [r8]
 801ba14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ba18:	4ba3      	ldr	r3, [pc, #652]	; (801bca8 <_dtoa_r+0x300>)
 801ba1a:	bfbc      	itt	lt
 801ba1c:	2201      	movlt	r2, #1
 801ba1e:	f8c8 2000 	strlt.w	r2, [r8]
 801ba22:	ea33 0309 	bics.w	r3, r3, r9
 801ba26:	d11b      	bne.n	801ba60 <_dtoa_r+0xb8>
 801ba28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba2a:	f242 730f 	movw	r3, #9999	; 0x270f
 801ba2e:	6013      	str	r3, [r2, #0]
 801ba30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ba34:	4333      	orrs	r3, r6
 801ba36:	f000 857a 	beq.w	801c52e <_dtoa_r+0xb86>
 801ba3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba3c:	b963      	cbnz	r3, 801ba58 <_dtoa_r+0xb0>
 801ba3e:	4b9b      	ldr	r3, [pc, #620]	; (801bcac <_dtoa_r+0x304>)
 801ba40:	e024      	b.n	801ba8c <_dtoa_r+0xe4>
 801ba42:	4b9b      	ldr	r3, [pc, #620]	; (801bcb0 <_dtoa_r+0x308>)
 801ba44:	9300      	str	r3, [sp, #0]
 801ba46:	3308      	adds	r3, #8
 801ba48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ba4a:	6013      	str	r3, [r2, #0]
 801ba4c:	9800      	ldr	r0, [sp, #0]
 801ba4e:	b015      	add	sp, #84	; 0x54
 801ba50:	ecbd 8b02 	vpop	{d8}
 801ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba58:	4b94      	ldr	r3, [pc, #592]	; (801bcac <_dtoa_r+0x304>)
 801ba5a:	9300      	str	r3, [sp, #0]
 801ba5c:	3303      	adds	r3, #3
 801ba5e:	e7f3      	b.n	801ba48 <_dtoa_r+0xa0>
 801ba60:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba64:	2200      	movs	r2, #0
 801ba66:	ec51 0b17 	vmov	r0, r1, d7
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ba70:	f7e5 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 801ba74:	4680      	mov	r8, r0
 801ba76:	b158      	cbz	r0, 801ba90 <_dtoa_r+0xe8>
 801ba78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	6013      	str	r3, [r2, #0]
 801ba7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	f000 8551 	beq.w	801c528 <_dtoa_r+0xb80>
 801ba86:	488b      	ldr	r0, [pc, #556]	; (801bcb4 <_dtoa_r+0x30c>)
 801ba88:	6018      	str	r0, [r3, #0]
 801ba8a:	1e43      	subs	r3, r0, #1
 801ba8c:	9300      	str	r3, [sp, #0]
 801ba8e:	e7dd      	b.n	801ba4c <_dtoa_r+0xa4>
 801ba90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ba94:	aa12      	add	r2, sp, #72	; 0x48
 801ba96:	a913      	add	r1, sp, #76	; 0x4c
 801ba98:	4620      	mov	r0, r4
 801ba9a:	f001 fcfd 	bl	801d498 <__d2b>
 801ba9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801baa2:	4683      	mov	fp, r0
 801baa4:	2d00      	cmp	r5, #0
 801baa6:	d07c      	beq.n	801bba2 <_dtoa_r+0x1fa>
 801baa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801baae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bab2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801bab6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801baba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801babe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bac2:	4b7d      	ldr	r3, [pc, #500]	; (801bcb8 <_dtoa_r+0x310>)
 801bac4:	2200      	movs	r2, #0
 801bac6:	4630      	mov	r0, r6
 801bac8:	4639      	mov	r1, r7
 801baca:	f7e4 fbdd 	bl	8000288 <__aeabi_dsub>
 801bace:	a36e      	add	r3, pc, #440	; (adr r3, 801bc88 <_dtoa_r+0x2e0>)
 801bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad4:	f7e4 fd90 	bl	80005f8 <__aeabi_dmul>
 801bad8:	a36d      	add	r3, pc, #436	; (adr r3, 801bc90 <_dtoa_r+0x2e8>)
 801bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bade:	f7e4 fbd5 	bl	800028c <__adddf3>
 801bae2:	4606      	mov	r6, r0
 801bae4:	4628      	mov	r0, r5
 801bae6:	460f      	mov	r7, r1
 801bae8:	f7e4 fd1c 	bl	8000524 <__aeabi_i2d>
 801baec:	a36a      	add	r3, pc, #424	; (adr r3, 801bc98 <_dtoa_r+0x2f0>)
 801baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf2:	f7e4 fd81 	bl	80005f8 <__aeabi_dmul>
 801baf6:	4602      	mov	r2, r0
 801baf8:	460b      	mov	r3, r1
 801bafa:	4630      	mov	r0, r6
 801bafc:	4639      	mov	r1, r7
 801bafe:	f7e4 fbc5 	bl	800028c <__adddf3>
 801bb02:	4606      	mov	r6, r0
 801bb04:	460f      	mov	r7, r1
 801bb06:	f7e5 f827 	bl	8000b58 <__aeabi_d2iz>
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	4682      	mov	sl, r0
 801bb0e:	2300      	movs	r3, #0
 801bb10:	4630      	mov	r0, r6
 801bb12:	4639      	mov	r1, r7
 801bb14:	f7e4 ffe2 	bl	8000adc <__aeabi_dcmplt>
 801bb18:	b148      	cbz	r0, 801bb2e <_dtoa_r+0x186>
 801bb1a:	4650      	mov	r0, sl
 801bb1c:	f7e4 fd02 	bl	8000524 <__aeabi_i2d>
 801bb20:	4632      	mov	r2, r6
 801bb22:	463b      	mov	r3, r7
 801bb24:	f7e4 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 801bb28:	b908      	cbnz	r0, 801bb2e <_dtoa_r+0x186>
 801bb2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bb2e:	f1ba 0f16 	cmp.w	sl, #22
 801bb32:	d854      	bhi.n	801bbde <_dtoa_r+0x236>
 801bb34:	4b61      	ldr	r3, [pc, #388]	; (801bcbc <_dtoa_r+0x314>)
 801bb36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bb42:	f7e4 ffcb 	bl	8000adc <__aeabi_dcmplt>
 801bb46:	2800      	cmp	r0, #0
 801bb48:	d04b      	beq.n	801bbe2 <_dtoa_r+0x23a>
 801bb4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801bb4e:	2300      	movs	r3, #0
 801bb50:	930e      	str	r3, [sp, #56]	; 0x38
 801bb52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bb54:	1b5d      	subs	r5, r3, r5
 801bb56:	1e6b      	subs	r3, r5, #1
 801bb58:	9304      	str	r3, [sp, #16]
 801bb5a:	bf43      	ittte	mi
 801bb5c:	2300      	movmi	r3, #0
 801bb5e:	f1c5 0801 	rsbmi	r8, r5, #1
 801bb62:	9304      	strmi	r3, [sp, #16]
 801bb64:	f04f 0800 	movpl.w	r8, #0
 801bb68:	f1ba 0f00 	cmp.w	sl, #0
 801bb6c:	db3b      	blt.n	801bbe6 <_dtoa_r+0x23e>
 801bb6e:	9b04      	ldr	r3, [sp, #16]
 801bb70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801bb74:	4453      	add	r3, sl
 801bb76:	9304      	str	r3, [sp, #16]
 801bb78:	2300      	movs	r3, #0
 801bb7a:	9306      	str	r3, [sp, #24]
 801bb7c:	9b05      	ldr	r3, [sp, #20]
 801bb7e:	2b09      	cmp	r3, #9
 801bb80:	d869      	bhi.n	801bc56 <_dtoa_r+0x2ae>
 801bb82:	2b05      	cmp	r3, #5
 801bb84:	bfc4      	itt	gt
 801bb86:	3b04      	subgt	r3, #4
 801bb88:	9305      	strgt	r3, [sp, #20]
 801bb8a:	9b05      	ldr	r3, [sp, #20]
 801bb8c:	f1a3 0302 	sub.w	r3, r3, #2
 801bb90:	bfcc      	ite	gt
 801bb92:	2500      	movgt	r5, #0
 801bb94:	2501      	movle	r5, #1
 801bb96:	2b03      	cmp	r3, #3
 801bb98:	d869      	bhi.n	801bc6e <_dtoa_r+0x2c6>
 801bb9a:	e8df f003 	tbb	[pc, r3]
 801bb9e:	4e2c      	.short	0x4e2c
 801bba0:	5a4c      	.short	0x5a4c
 801bba2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801bba6:	441d      	add	r5, r3
 801bba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bbac:	2b20      	cmp	r3, #32
 801bbae:	bfc1      	itttt	gt
 801bbb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bbb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bbb8:	fa09 f303 	lslgt.w	r3, r9, r3
 801bbbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bbc0:	bfda      	itte	le
 801bbc2:	f1c3 0320 	rsble	r3, r3, #32
 801bbc6:	fa06 f003 	lslle.w	r0, r6, r3
 801bbca:	4318      	orrgt	r0, r3
 801bbcc:	f7e4 fc9a 	bl	8000504 <__aeabi_ui2d>
 801bbd0:	2301      	movs	r3, #1
 801bbd2:	4606      	mov	r6, r0
 801bbd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bbd8:	3d01      	subs	r5, #1
 801bbda:	9310      	str	r3, [sp, #64]	; 0x40
 801bbdc:	e771      	b.n	801bac2 <_dtoa_r+0x11a>
 801bbde:	2301      	movs	r3, #1
 801bbe0:	e7b6      	b.n	801bb50 <_dtoa_r+0x1a8>
 801bbe2:	900e      	str	r0, [sp, #56]	; 0x38
 801bbe4:	e7b5      	b.n	801bb52 <_dtoa_r+0x1aa>
 801bbe6:	f1ca 0300 	rsb	r3, sl, #0
 801bbea:	9306      	str	r3, [sp, #24]
 801bbec:	2300      	movs	r3, #0
 801bbee:	eba8 080a 	sub.w	r8, r8, sl
 801bbf2:	930d      	str	r3, [sp, #52]	; 0x34
 801bbf4:	e7c2      	b.n	801bb7c <_dtoa_r+0x1d4>
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	9308      	str	r3, [sp, #32]
 801bbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	dc39      	bgt.n	801bc74 <_dtoa_r+0x2cc>
 801bc00:	f04f 0901 	mov.w	r9, #1
 801bc04:	f8cd 9004 	str.w	r9, [sp, #4]
 801bc08:	464b      	mov	r3, r9
 801bc0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bc0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bc10:	2200      	movs	r2, #0
 801bc12:	6042      	str	r2, [r0, #4]
 801bc14:	2204      	movs	r2, #4
 801bc16:	f102 0614 	add.w	r6, r2, #20
 801bc1a:	429e      	cmp	r6, r3
 801bc1c:	6841      	ldr	r1, [r0, #4]
 801bc1e:	d92f      	bls.n	801bc80 <_dtoa_r+0x2d8>
 801bc20:	4620      	mov	r0, r4
 801bc22:	f001 f851 	bl	801ccc8 <_Balloc>
 801bc26:	9000      	str	r0, [sp, #0]
 801bc28:	2800      	cmp	r0, #0
 801bc2a:	d14b      	bne.n	801bcc4 <_dtoa_r+0x31c>
 801bc2c:	4b24      	ldr	r3, [pc, #144]	; (801bcc0 <_dtoa_r+0x318>)
 801bc2e:	4602      	mov	r2, r0
 801bc30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bc34:	e6d1      	b.n	801b9da <_dtoa_r+0x32>
 801bc36:	2301      	movs	r3, #1
 801bc38:	e7de      	b.n	801bbf8 <_dtoa_r+0x250>
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	9308      	str	r3, [sp, #32]
 801bc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc40:	eb0a 0903 	add.w	r9, sl, r3
 801bc44:	f109 0301 	add.w	r3, r9, #1
 801bc48:	2b01      	cmp	r3, #1
 801bc4a:	9301      	str	r3, [sp, #4]
 801bc4c:	bfb8      	it	lt
 801bc4e:	2301      	movlt	r3, #1
 801bc50:	e7dd      	b.n	801bc0e <_dtoa_r+0x266>
 801bc52:	2301      	movs	r3, #1
 801bc54:	e7f2      	b.n	801bc3c <_dtoa_r+0x294>
 801bc56:	2501      	movs	r5, #1
 801bc58:	2300      	movs	r3, #0
 801bc5a:	9305      	str	r3, [sp, #20]
 801bc5c:	9508      	str	r5, [sp, #32]
 801bc5e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801bc62:	2200      	movs	r2, #0
 801bc64:	f8cd 9004 	str.w	r9, [sp, #4]
 801bc68:	2312      	movs	r3, #18
 801bc6a:	9209      	str	r2, [sp, #36]	; 0x24
 801bc6c:	e7cf      	b.n	801bc0e <_dtoa_r+0x266>
 801bc6e:	2301      	movs	r3, #1
 801bc70:	9308      	str	r3, [sp, #32]
 801bc72:	e7f4      	b.n	801bc5e <_dtoa_r+0x2b6>
 801bc74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bc78:	f8cd 9004 	str.w	r9, [sp, #4]
 801bc7c:	464b      	mov	r3, r9
 801bc7e:	e7c6      	b.n	801bc0e <_dtoa_r+0x266>
 801bc80:	3101      	adds	r1, #1
 801bc82:	6041      	str	r1, [r0, #4]
 801bc84:	0052      	lsls	r2, r2, #1
 801bc86:	e7c6      	b.n	801bc16 <_dtoa_r+0x26e>
 801bc88:	636f4361 	.word	0x636f4361
 801bc8c:	3fd287a7 	.word	0x3fd287a7
 801bc90:	8b60c8b3 	.word	0x8b60c8b3
 801bc94:	3fc68a28 	.word	0x3fc68a28
 801bc98:	509f79fb 	.word	0x509f79fb
 801bc9c:	3fd34413 	.word	0x3fd34413
 801bca0:	08020446 	.word	0x08020446
 801bca4:	0802045d 	.word	0x0802045d
 801bca8:	7ff00000 	.word	0x7ff00000
 801bcac:	08020442 	.word	0x08020442
 801bcb0:	08020439 	.word	0x08020439
 801bcb4:	080202b9 	.word	0x080202b9
 801bcb8:	3ff80000 	.word	0x3ff80000
 801bcbc:	080205d8 	.word	0x080205d8
 801bcc0:	080204bc 	.word	0x080204bc
 801bcc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bcc6:	9a00      	ldr	r2, [sp, #0]
 801bcc8:	601a      	str	r2, [r3, #0]
 801bcca:	9b01      	ldr	r3, [sp, #4]
 801bccc:	2b0e      	cmp	r3, #14
 801bcce:	f200 80ad 	bhi.w	801be2c <_dtoa_r+0x484>
 801bcd2:	2d00      	cmp	r5, #0
 801bcd4:	f000 80aa 	beq.w	801be2c <_dtoa_r+0x484>
 801bcd8:	f1ba 0f00 	cmp.w	sl, #0
 801bcdc:	dd36      	ble.n	801bd4c <_dtoa_r+0x3a4>
 801bcde:	4ac3      	ldr	r2, [pc, #780]	; (801bfec <_dtoa_r+0x644>)
 801bce0:	f00a 030f 	and.w	r3, sl, #15
 801bce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bce8:	ed93 7b00 	vldr	d7, [r3]
 801bcec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801bcf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 801bcf4:	eeb0 8a47 	vmov.f32	s16, s14
 801bcf8:	eef0 8a67 	vmov.f32	s17, s15
 801bcfc:	d016      	beq.n	801bd2c <_dtoa_r+0x384>
 801bcfe:	4bbc      	ldr	r3, [pc, #752]	; (801bff0 <_dtoa_r+0x648>)
 801bd00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bd08:	f7e4 fda0 	bl	800084c <__aeabi_ddiv>
 801bd0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd10:	f007 070f 	and.w	r7, r7, #15
 801bd14:	2503      	movs	r5, #3
 801bd16:	4eb6      	ldr	r6, [pc, #728]	; (801bff0 <_dtoa_r+0x648>)
 801bd18:	b957      	cbnz	r7, 801bd30 <_dtoa_r+0x388>
 801bd1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd1e:	ec53 2b18 	vmov	r2, r3, d8
 801bd22:	f7e4 fd93 	bl	800084c <__aeabi_ddiv>
 801bd26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd2a:	e029      	b.n	801bd80 <_dtoa_r+0x3d8>
 801bd2c:	2502      	movs	r5, #2
 801bd2e:	e7f2      	b.n	801bd16 <_dtoa_r+0x36e>
 801bd30:	07f9      	lsls	r1, r7, #31
 801bd32:	d508      	bpl.n	801bd46 <_dtoa_r+0x39e>
 801bd34:	ec51 0b18 	vmov	r0, r1, d8
 801bd38:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bd3c:	f7e4 fc5c 	bl	80005f8 <__aeabi_dmul>
 801bd40:	ec41 0b18 	vmov	d8, r0, r1
 801bd44:	3501      	adds	r5, #1
 801bd46:	107f      	asrs	r7, r7, #1
 801bd48:	3608      	adds	r6, #8
 801bd4a:	e7e5      	b.n	801bd18 <_dtoa_r+0x370>
 801bd4c:	f000 80a6 	beq.w	801be9c <_dtoa_r+0x4f4>
 801bd50:	f1ca 0600 	rsb	r6, sl, #0
 801bd54:	4ba5      	ldr	r3, [pc, #660]	; (801bfec <_dtoa_r+0x644>)
 801bd56:	4fa6      	ldr	r7, [pc, #664]	; (801bff0 <_dtoa_r+0x648>)
 801bd58:	f006 020f 	and.w	r2, r6, #15
 801bd5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd68:	f7e4 fc46 	bl	80005f8 <__aeabi_dmul>
 801bd6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd70:	1136      	asrs	r6, r6, #4
 801bd72:	2300      	movs	r3, #0
 801bd74:	2502      	movs	r5, #2
 801bd76:	2e00      	cmp	r6, #0
 801bd78:	f040 8085 	bne.w	801be86 <_dtoa_r+0x4de>
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d1d2      	bne.n	801bd26 <_dtoa_r+0x37e>
 801bd80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	f000 808c 	beq.w	801bea0 <_dtoa_r+0x4f8>
 801bd88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bd8c:	4b99      	ldr	r3, [pc, #612]	; (801bff4 <_dtoa_r+0x64c>)
 801bd8e:	2200      	movs	r2, #0
 801bd90:	4630      	mov	r0, r6
 801bd92:	4639      	mov	r1, r7
 801bd94:	f7e4 fea2 	bl	8000adc <__aeabi_dcmplt>
 801bd98:	2800      	cmp	r0, #0
 801bd9a:	f000 8081 	beq.w	801bea0 <_dtoa_r+0x4f8>
 801bd9e:	9b01      	ldr	r3, [sp, #4]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d07d      	beq.n	801bea0 <_dtoa_r+0x4f8>
 801bda4:	f1b9 0f00 	cmp.w	r9, #0
 801bda8:	dd3c      	ble.n	801be24 <_dtoa_r+0x47c>
 801bdaa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801bdae:	9307      	str	r3, [sp, #28]
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	4b91      	ldr	r3, [pc, #580]	; (801bff8 <_dtoa_r+0x650>)
 801bdb4:	4630      	mov	r0, r6
 801bdb6:	4639      	mov	r1, r7
 801bdb8:	f7e4 fc1e 	bl	80005f8 <__aeabi_dmul>
 801bdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdc0:	3501      	adds	r5, #1
 801bdc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bdc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bdca:	4628      	mov	r0, r5
 801bdcc:	f7e4 fbaa 	bl	8000524 <__aeabi_i2d>
 801bdd0:	4632      	mov	r2, r6
 801bdd2:	463b      	mov	r3, r7
 801bdd4:	f7e4 fc10 	bl	80005f8 <__aeabi_dmul>
 801bdd8:	4b88      	ldr	r3, [pc, #544]	; (801bffc <_dtoa_r+0x654>)
 801bdda:	2200      	movs	r2, #0
 801bddc:	f7e4 fa56 	bl	800028c <__adddf3>
 801bde0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801bde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bde8:	9303      	str	r3, [sp, #12]
 801bdea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d15c      	bne.n	801beaa <_dtoa_r+0x502>
 801bdf0:	4b83      	ldr	r3, [pc, #524]	; (801c000 <_dtoa_r+0x658>)
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	4630      	mov	r0, r6
 801bdf6:	4639      	mov	r1, r7
 801bdf8:	f7e4 fa46 	bl	8000288 <__aeabi_dsub>
 801bdfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be00:	4606      	mov	r6, r0
 801be02:	460f      	mov	r7, r1
 801be04:	f7e4 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 801be08:	2800      	cmp	r0, #0
 801be0a:	f040 8296 	bne.w	801c33a <_dtoa_r+0x992>
 801be0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801be12:	4630      	mov	r0, r6
 801be14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be18:	4639      	mov	r1, r7
 801be1a:	f7e4 fe5f 	bl	8000adc <__aeabi_dcmplt>
 801be1e:	2800      	cmp	r0, #0
 801be20:	f040 8288 	bne.w	801c334 <_dtoa_r+0x98c>
 801be24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801be2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801be2e:	2b00      	cmp	r3, #0
 801be30:	f2c0 8158 	blt.w	801c0e4 <_dtoa_r+0x73c>
 801be34:	f1ba 0f0e 	cmp.w	sl, #14
 801be38:	f300 8154 	bgt.w	801c0e4 <_dtoa_r+0x73c>
 801be3c:	4b6b      	ldr	r3, [pc, #428]	; (801bfec <_dtoa_r+0x644>)
 801be3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801be42:	e9d3 8900 	ldrd	r8, r9, [r3]
 801be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be48:	2b00      	cmp	r3, #0
 801be4a:	f280 80e3 	bge.w	801c014 <_dtoa_r+0x66c>
 801be4e:	9b01      	ldr	r3, [sp, #4]
 801be50:	2b00      	cmp	r3, #0
 801be52:	f300 80df 	bgt.w	801c014 <_dtoa_r+0x66c>
 801be56:	f040 826d 	bne.w	801c334 <_dtoa_r+0x98c>
 801be5a:	4b69      	ldr	r3, [pc, #420]	; (801c000 <_dtoa_r+0x658>)
 801be5c:	2200      	movs	r2, #0
 801be5e:	4640      	mov	r0, r8
 801be60:	4649      	mov	r1, r9
 801be62:	f7e4 fbc9 	bl	80005f8 <__aeabi_dmul>
 801be66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be6a:	f7e4 fe4b 	bl	8000b04 <__aeabi_dcmpge>
 801be6e:	9e01      	ldr	r6, [sp, #4]
 801be70:	4637      	mov	r7, r6
 801be72:	2800      	cmp	r0, #0
 801be74:	f040 8243 	bne.w	801c2fe <_dtoa_r+0x956>
 801be78:	9d00      	ldr	r5, [sp, #0]
 801be7a:	2331      	movs	r3, #49	; 0x31
 801be7c:	f805 3b01 	strb.w	r3, [r5], #1
 801be80:	f10a 0a01 	add.w	sl, sl, #1
 801be84:	e23f      	b.n	801c306 <_dtoa_r+0x95e>
 801be86:	07f2      	lsls	r2, r6, #31
 801be88:	d505      	bpl.n	801be96 <_dtoa_r+0x4ee>
 801be8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801be8e:	f7e4 fbb3 	bl	80005f8 <__aeabi_dmul>
 801be92:	3501      	adds	r5, #1
 801be94:	2301      	movs	r3, #1
 801be96:	1076      	asrs	r6, r6, #1
 801be98:	3708      	adds	r7, #8
 801be9a:	e76c      	b.n	801bd76 <_dtoa_r+0x3ce>
 801be9c:	2502      	movs	r5, #2
 801be9e:	e76f      	b.n	801bd80 <_dtoa_r+0x3d8>
 801bea0:	9b01      	ldr	r3, [sp, #4]
 801bea2:	f8cd a01c 	str.w	sl, [sp, #28]
 801bea6:	930c      	str	r3, [sp, #48]	; 0x30
 801bea8:	e78d      	b.n	801bdc6 <_dtoa_r+0x41e>
 801beaa:	9900      	ldr	r1, [sp, #0]
 801beac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801beae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801beb0:	4b4e      	ldr	r3, [pc, #312]	; (801bfec <_dtoa_r+0x644>)
 801beb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801beb6:	4401      	add	r1, r0
 801beb8:	9102      	str	r1, [sp, #8]
 801beba:	9908      	ldr	r1, [sp, #32]
 801bebc:	eeb0 8a47 	vmov.f32	s16, s14
 801bec0:	eef0 8a67 	vmov.f32	s17, s15
 801bec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801becc:	2900      	cmp	r1, #0
 801bece:	d045      	beq.n	801bf5c <_dtoa_r+0x5b4>
 801bed0:	494c      	ldr	r1, [pc, #304]	; (801c004 <_dtoa_r+0x65c>)
 801bed2:	2000      	movs	r0, #0
 801bed4:	f7e4 fcba 	bl	800084c <__aeabi_ddiv>
 801bed8:	ec53 2b18 	vmov	r2, r3, d8
 801bedc:	f7e4 f9d4 	bl	8000288 <__aeabi_dsub>
 801bee0:	9d00      	ldr	r5, [sp, #0]
 801bee2:	ec41 0b18 	vmov	d8, r0, r1
 801bee6:	4639      	mov	r1, r7
 801bee8:	4630      	mov	r0, r6
 801beea:	f7e4 fe35 	bl	8000b58 <__aeabi_d2iz>
 801beee:	900c      	str	r0, [sp, #48]	; 0x30
 801bef0:	f7e4 fb18 	bl	8000524 <__aeabi_i2d>
 801bef4:	4602      	mov	r2, r0
 801bef6:	460b      	mov	r3, r1
 801bef8:	4630      	mov	r0, r6
 801befa:	4639      	mov	r1, r7
 801befc:	f7e4 f9c4 	bl	8000288 <__aeabi_dsub>
 801bf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf02:	3330      	adds	r3, #48	; 0x30
 801bf04:	f805 3b01 	strb.w	r3, [r5], #1
 801bf08:	ec53 2b18 	vmov	r2, r3, d8
 801bf0c:	4606      	mov	r6, r0
 801bf0e:	460f      	mov	r7, r1
 801bf10:	f7e4 fde4 	bl	8000adc <__aeabi_dcmplt>
 801bf14:	2800      	cmp	r0, #0
 801bf16:	d165      	bne.n	801bfe4 <_dtoa_r+0x63c>
 801bf18:	4632      	mov	r2, r6
 801bf1a:	463b      	mov	r3, r7
 801bf1c:	4935      	ldr	r1, [pc, #212]	; (801bff4 <_dtoa_r+0x64c>)
 801bf1e:	2000      	movs	r0, #0
 801bf20:	f7e4 f9b2 	bl	8000288 <__aeabi_dsub>
 801bf24:	ec53 2b18 	vmov	r2, r3, d8
 801bf28:	f7e4 fdd8 	bl	8000adc <__aeabi_dcmplt>
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	f040 80b9 	bne.w	801c0a4 <_dtoa_r+0x6fc>
 801bf32:	9b02      	ldr	r3, [sp, #8]
 801bf34:	429d      	cmp	r5, r3
 801bf36:	f43f af75 	beq.w	801be24 <_dtoa_r+0x47c>
 801bf3a:	4b2f      	ldr	r3, [pc, #188]	; (801bff8 <_dtoa_r+0x650>)
 801bf3c:	ec51 0b18 	vmov	r0, r1, d8
 801bf40:	2200      	movs	r2, #0
 801bf42:	f7e4 fb59 	bl	80005f8 <__aeabi_dmul>
 801bf46:	4b2c      	ldr	r3, [pc, #176]	; (801bff8 <_dtoa_r+0x650>)
 801bf48:	ec41 0b18 	vmov	d8, r0, r1
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	4630      	mov	r0, r6
 801bf50:	4639      	mov	r1, r7
 801bf52:	f7e4 fb51 	bl	80005f8 <__aeabi_dmul>
 801bf56:	4606      	mov	r6, r0
 801bf58:	460f      	mov	r7, r1
 801bf5a:	e7c4      	b.n	801bee6 <_dtoa_r+0x53e>
 801bf5c:	ec51 0b17 	vmov	r0, r1, d7
 801bf60:	f7e4 fb4a 	bl	80005f8 <__aeabi_dmul>
 801bf64:	9b02      	ldr	r3, [sp, #8]
 801bf66:	9d00      	ldr	r5, [sp, #0]
 801bf68:	930c      	str	r3, [sp, #48]	; 0x30
 801bf6a:	ec41 0b18 	vmov	d8, r0, r1
 801bf6e:	4639      	mov	r1, r7
 801bf70:	4630      	mov	r0, r6
 801bf72:	f7e4 fdf1 	bl	8000b58 <__aeabi_d2iz>
 801bf76:	9011      	str	r0, [sp, #68]	; 0x44
 801bf78:	f7e4 fad4 	bl	8000524 <__aeabi_i2d>
 801bf7c:	4602      	mov	r2, r0
 801bf7e:	460b      	mov	r3, r1
 801bf80:	4630      	mov	r0, r6
 801bf82:	4639      	mov	r1, r7
 801bf84:	f7e4 f980 	bl	8000288 <__aeabi_dsub>
 801bf88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bf8a:	3330      	adds	r3, #48	; 0x30
 801bf8c:	f805 3b01 	strb.w	r3, [r5], #1
 801bf90:	9b02      	ldr	r3, [sp, #8]
 801bf92:	429d      	cmp	r5, r3
 801bf94:	4606      	mov	r6, r0
 801bf96:	460f      	mov	r7, r1
 801bf98:	f04f 0200 	mov.w	r2, #0
 801bf9c:	d134      	bne.n	801c008 <_dtoa_r+0x660>
 801bf9e:	4b19      	ldr	r3, [pc, #100]	; (801c004 <_dtoa_r+0x65c>)
 801bfa0:	ec51 0b18 	vmov	r0, r1, d8
 801bfa4:	f7e4 f972 	bl	800028c <__adddf3>
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	460b      	mov	r3, r1
 801bfac:	4630      	mov	r0, r6
 801bfae:	4639      	mov	r1, r7
 801bfb0:	f7e4 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	d175      	bne.n	801c0a4 <_dtoa_r+0x6fc>
 801bfb8:	ec53 2b18 	vmov	r2, r3, d8
 801bfbc:	4911      	ldr	r1, [pc, #68]	; (801c004 <_dtoa_r+0x65c>)
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	f7e4 f962 	bl	8000288 <__aeabi_dsub>
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	460b      	mov	r3, r1
 801bfc8:	4630      	mov	r0, r6
 801bfca:	4639      	mov	r1, r7
 801bfcc:	f7e4 fd86 	bl	8000adc <__aeabi_dcmplt>
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	f43f af27 	beq.w	801be24 <_dtoa_r+0x47c>
 801bfd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bfd8:	1e6b      	subs	r3, r5, #1
 801bfda:	930c      	str	r3, [sp, #48]	; 0x30
 801bfdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bfe0:	2b30      	cmp	r3, #48	; 0x30
 801bfe2:	d0f8      	beq.n	801bfd6 <_dtoa_r+0x62e>
 801bfe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bfe8:	e04a      	b.n	801c080 <_dtoa_r+0x6d8>
 801bfea:	bf00      	nop
 801bfec:	080205d8 	.word	0x080205d8
 801bff0:	080205b0 	.word	0x080205b0
 801bff4:	3ff00000 	.word	0x3ff00000
 801bff8:	40240000 	.word	0x40240000
 801bffc:	401c0000 	.word	0x401c0000
 801c000:	40140000 	.word	0x40140000
 801c004:	3fe00000 	.word	0x3fe00000
 801c008:	4baf      	ldr	r3, [pc, #700]	; (801c2c8 <_dtoa_r+0x920>)
 801c00a:	f7e4 faf5 	bl	80005f8 <__aeabi_dmul>
 801c00e:	4606      	mov	r6, r0
 801c010:	460f      	mov	r7, r1
 801c012:	e7ac      	b.n	801bf6e <_dtoa_r+0x5c6>
 801c014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c018:	9d00      	ldr	r5, [sp, #0]
 801c01a:	4642      	mov	r2, r8
 801c01c:	464b      	mov	r3, r9
 801c01e:	4630      	mov	r0, r6
 801c020:	4639      	mov	r1, r7
 801c022:	f7e4 fc13 	bl	800084c <__aeabi_ddiv>
 801c026:	f7e4 fd97 	bl	8000b58 <__aeabi_d2iz>
 801c02a:	9002      	str	r0, [sp, #8]
 801c02c:	f7e4 fa7a 	bl	8000524 <__aeabi_i2d>
 801c030:	4642      	mov	r2, r8
 801c032:	464b      	mov	r3, r9
 801c034:	f7e4 fae0 	bl	80005f8 <__aeabi_dmul>
 801c038:	4602      	mov	r2, r0
 801c03a:	460b      	mov	r3, r1
 801c03c:	4630      	mov	r0, r6
 801c03e:	4639      	mov	r1, r7
 801c040:	f7e4 f922 	bl	8000288 <__aeabi_dsub>
 801c044:	9e02      	ldr	r6, [sp, #8]
 801c046:	9f01      	ldr	r7, [sp, #4]
 801c048:	3630      	adds	r6, #48	; 0x30
 801c04a:	f805 6b01 	strb.w	r6, [r5], #1
 801c04e:	9e00      	ldr	r6, [sp, #0]
 801c050:	1bae      	subs	r6, r5, r6
 801c052:	42b7      	cmp	r7, r6
 801c054:	4602      	mov	r2, r0
 801c056:	460b      	mov	r3, r1
 801c058:	d137      	bne.n	801c0ca <_dtoa_r+0x722>
 801c05a:	f7e4 f917 	bl	800028c <__adddf3>
 801c05e:	4642      	mov	r2, r8
 801c060:	464b      	mov	r3, r9
 801c062:	4606      	mov	r6, r0
 801c064:	460f      	mov	r7, r1
 801c066:	f7e4 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 801c06a:	b9c8      	cbnz	r0, 801c0a0 <_dtoa_r+0x6f8>
 801c06c:	4642      	mov	r2, r8
 801c06e:	464b      	mov	r3, r9
 801c070:	4630      	mov	r0, r6
 801c072:	4639      	mov	r1, r7
 801c074:	f7e4 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 801c078:	b110      	cbz	r0, 801c080 <_dtoa_r+0x6d8>
 801c07a:	9b02      	ldr	r3, [sp, #8]
 801c07c:	07d9      	lsls	r1, r3, #31
 801c07e:	d40f      	bmi.n	801c0a0 <_dtoa_r+0x6f8>
 801c080:	4620      	mov	r0, r4
 801c082:	4659      	mov	r1, fp
 801c084:	f000 fe60 	bl	801cd48 <_Bfree>
 801c088:	2300      	movs	r3, #0
 801c08a:	702b      	strb	r3, [r5, #0]
 801c08c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c08e:	f10a 0001 	add.w	r0, sl, #1
 801c092:	6018      	str	r0, [r3, #0]
 801c094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c096:	2b00      	cmp	r3, #0
 801c098:	f43f acd8 	beq.w	801ba4c <_dtoa_r+0xa4>
 801c09c:	601d      	str	r5, [r3, #0]
 801c09e:	e4d5      	b.n	801ba4c <_dtoa_r+0xa4>
 801c0a0:	f8cd a01c 	str.w	sl, [sp, #28]
 801c0a4:	462b      	mov	r3, r5
 801c0a6:	461d      	mov	r5, r3
 801c0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0ac:	2a39      	cmp	r2, #57	; 0x39
 801c0ae:	d108      	bne.n	801c0c2 <_dtoa_r+0x71a>
 801c0b0:	9a00      	ldr	r2, [sp, #0]
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d1f7      	bne.n	801c0a6 <_dtoa_r+0x6fe>
 801c0b6:	9a07      	ldr	r2, [sp, #28]
 801c0b8:	9900      	ldr	r1, [sp, #0]
 801c0ba:	3201      	adds	r2, #1
 801c0bc:	9207      	str	r2, [sp, #28]
 801c0be:	2230      	movs	r2, #48	; 0x30
 801c0c0:	700a      	strb	r2, [r1, #0]
 801c0c2:	781a      	ldrb	r2, [r3, #0]
 801c0c4:	3201      	adds	r2, #1
 801c0c6:	701a      	strb	r2, [r3, #0]
 801c0c8:	e78c      	b.n	801bfe4 <_dtoa_r+0x63c>
 801c0ca:	4b7f      	ldr	r3, [pc, #508]	; (801c2c8 <_dtoa_r+0x920>)
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	f7e4 fa93 	bl	80005f8 <__aeabi_dmul>
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	4606      	mov	r6, r0
 801c0d8:	460f      	mov	r7, r1
 801c0da:	f7e4 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 801c0de:	2800      	cmp	r0, #0
 801c0e0:	d09b      	beq.n	801c01a <_dtoa_r+0x672>
 801c0e2:	e7cd      	b.n	801c080 <_dtoa_r+0x6d8>
 801c0e4:	9a08      	ldr	r2, [sp, #32]
 801c0e6:	2a00      	cmp	r2, #0
 801c0e8:	f000 80c4 	beq.w	801c274 <_dtoa_r+0x8cc>
 801c0ec:	9a05      	ldr	r2, [sp, #20]
 801c0ee:	2a01      	cmp	r2, #1
 801c0f0:	f300 80a8 	bgt.w	801c244 <_dtoa_r+0x89c>
 801c0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c0f6:	2a00      	cmp	r2, #0
 801c0f8:	f000 80a0 	beq.w	801c23c <_dtoa_r+0x894>
 801c0fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c100:	9e06      	ldr	r6, [sp, #24]
 801c102:	4645      	mov	r5, r8
 801c104:	9a04      	ldr	r2, [sp, #16]
 801c106:	2101      	movs	r1, #1
 801c108:	441a      	add	r2, r3
 801c10a:	4620      	mov	r0, r4
 801c10c:	4498      	add	r8, r3
 801c10e:	9204      	str	r2, [sp, #16]
 801c110:	f000 ff20 	bl	801cf54 <__i2b>
 801c114:	4607      	mov	r7, r0
 801c116:	2d00      	cmp	r5, #0
 801c118:	dd0b      	ble.n	801c132 <_dtoa_r+0x78a>
 801c11a:	9b04      	ldr	r3, [sp, #16]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	dd08      	ble.n	801c132 <_dtoa_r+0x78a>
 801c120:	42ab      	cmp	r3, r5
 801c122:	9a04      	ldr	r2, [sp, #16]
 801c124:	bfa8      	it	ge
 801c126:	462b      	movge	r3, r5
 801c128:	eba8 0803 	sub.w	r8, r8, r3
 801c12c:	1aed      	subs	r5, r5, r3
 801c12e:	1ad3      	subs	r3, r2, r3
 801c130:	9304      	str	r3, [sp, #16]
 801c132:	9b06      	ldr	r3, [sp, #24]
 801c134:	b1fb      	cbz	r3, 801c176 <_dtoa_r+0x7ce>
 801c136:	9b08      	ldr	r3, [sp, #32]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	f000 809f 	beq.w	801c27c <_dtoa_r+0x8d4>
 801c13e:	2e00      	cmp	r6, #0
 801c140:	dd11      	ble.n	801c166 <_dtoa_r+0x7be>
 801c142:	4639      	mov	r1, r7
 801c144:	4632      	mov	r2, r6
 801c146:	4620      	mov	r0, r4
 801c148:	f000 ffc0 	bl	801d0cc <__pow5mult>
 801c14c:	465a      	mov	r2, fp
 801c14e:	4601      	mov	r1, r0
 801c150:	4607      	mov	r7, r0
 801c152:	4620      	mov	r0, r4
 801c154:	f000 ff14 	bl	801cf80 <__multiply>
 801c158:	4659      	mov	r1, fp
 801c15a:	9007      	str	r0, [sp, #28]
 801c15c:	4620      	mov	r0, r4
 801c15e:	f000 fdf3 	bl	801cd48 <_Bfree>
 801c162:	9b07      	ldr	r3, [sp, #28]
 801c164:	469b      	mov	fp, r3
 801c166:	9b06      	ldr	r3, [sp, #24]
 801c168:	1b9a      	subs	r2, r3, r6
 801c16a:	d004      	beq.n	801c176 <_dtoa_r+0x7ce>
 801c16c:	4659      	mov	r1, fp
 801c16e:	4620      	mov	r0, r4
 801c170:	f000 ffac 	bl	801d0cc <__pow5mult>
 801c174:	4683      	mov	fp, r0
 801c176:	2101      	movs	r1, #1
 801c178:	4620      	mov	r0, r4
 801c17a:	f000 feeb 	bl	801cf54 <__i2b>
 801c17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c180:	2b00      	cmp	r3, #0
 801c182:	4606      	mov	r6, r0
 801c184:	dd7c      	ble.n	801c280 <_dtoa_r+0x8d8>
 801c186:	461a      	mov	r2, r3
 801c188:	4601      	mov	r1, r0
 801c18a:	4620      	mov	r0, r4
 801c18c:	f000 ff9e 	bl	801d0cc <__pow5mult>
 801c190:	9b05      	ldr	r3, [sp, #20]
 801c192:	2b01      	cmp	r3, #1
 801c194:	4606      	mov	r6, r0
 801c196:	dd76      	ble.n	801c286 <_dtoa_r+0x8de>
 801c198:	2300      	movs	r3, #0
 801c19a:	9306      	str	r3, [sp, #24]
 801c19c:	6933      	ldr	r3, [r6, #16]
 801c19e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c1a2:	6918      	ldr	r0, [r3, #16]
 801c1a4:	f000 fe86 	bl	801ceb4 <__hi0bits>
 801c1a8:	f1c0 0020 	rsb	r0, r0, #32
 801c1ac:	9b04      	ldr	r3, [sp, #16]
 801c1ae:	4418      	add	r0, r3
 801c1b0:	f010 001f 	ands.w	r0, r0, #31
 801c1b4:	f000 8086 	beq.w	801c2c4 <_dtoa_r+0x91c>
 801c1b8:	f1c0 0320 	rsb	r3, r0, #32
 801c1bc:	2b04      	cmp	r3, #4
 801c1be:	dd7f      	ble.n	801c2c0 <_dtoa_r+0x918>
 801c1c0:	f1c0 001c 	rsb	r0, r0, #28
 801c1c4:	9b04      	ldr	r3, [sp, #16]
 801c1c6:	4403      	add	r3, r0
 801c1c8:	4480      	add	r8, r0
 801c1ca:	4405      	add	r5, r0
 801c1cc:	9304      	str	r3, [sp, #16]
 801c1ce:	f1b8 0f00 	cmp.w	r8, #0
 801c1d2:	dd05      	ble.n	801c1e0 <_dtoa_r+0x838>
 801c1d4:	4659      	mov	r1, fp
 801c1d6:	4642      	mov	r2, r8
 801c1d8:	4620      	mov	r0, r4
 801c1da:	f000 ffd1 	bl	801d180 <__lshift>
 801c1de:	4683      	mov	fp, r0
 801c1e0:	9b04      	ldr	r3, [sp, #16]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	dd05      	ble.n	801c1f2 <_dtoa_r+0x84a>
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	461a      	mov	r2, r3
 801c1ea:	4620      	mov	r0, r4
 801c1ec:	f000 ffc8 	bl	801d180 <__lshift>
 801c1f0:	4606      	mov	r6, r0
 801c1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d069      	beq.n	801c2cc <_dtoa_r+0x924>
 801c1f8:	4631      	mov	r1, r6
 801c1fa:	4658      	mov	r0, fp
 801c1fc:	f001 f82c 	bl	801d258 <__mcmp>
 801c200:	2800      	cmp	r0, #0
 801c202:	da63      	bge.n	801c2cc <_dtoa_r+0x924>
 801c204:	2300      	movs	r3, #0
 801c206:	4659      	mov	r1, fp
 801c208:	220a      	movs	r2, #10
 801c20a:	4620      	mov	r0, r4
 801c20c:	f000 fdbe 	bl	801cd8c <__multadd>
 801c210:	9b08      	ldr	r3, [sp, #32]
 801c212:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c216:	4683      	mov	fp, r0
 801c218:	2b00      	cmp	r3, #0
 801c21a:	f000 818f 	beq.w	801c53c <_dtoa_r+0xb94>
 801c21e:	4639      	mov	r1, r7
 801c220:	2300      	movs	r3, #0
 801c222:	220a      	movs	r2, #10
 801c224:	4620      	mov	r0, r4
 801c226:	f000 fdb1 	bl	801cd8c <__multadd>
 801c22a:	f1b9 0f00 	cmp.w	r9, #0
 801c22e:	4607      	mov	r7, r0
 801c230:	f300 808e 	bgt.w	801c350 <_dtoa_r+0x9a8>
 801c234:	9b05      	ldr	r3, [sp, #20]
 801c236:	2b02      	cmp	r3, #2
 801c238:	dc50      	bgt.n	801c2dc <_dtoa_r+0x934>
 801c23a:	e089      	b.n	801c350 <_dtoa_r+0x9a8>
 801c23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c242:	e75d      	b.n	801c100 <_dtoa_r+0x758>
 801c244:	9b01      	ldr	r3, [sp, #4]
 801c246:	1e5e      	subs	r6, r3, #1
 801c248:	9b06      	ldr	r3, [sp, #24]
 801c24a:	42b3      	cmp	r3, r6
 801c24c:	bfbf      	itttt	lt
 801c24e:	9b06      	ldrlt	r3, [sp, #24]
 801c250:	9606      	strlt	r6, [sp, #24]
 801c252:	1af2      	sublt	r2, r6, r3
 801c254:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801c256:	bfb6      	itet	lt
 801c258:	189b      	addlt	r3, r3, r2
 801c25a:	1b9e      	subge	r6, r3, r6
 801c25c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801c25e:	9b01      	ldr	r3, [sp, #4]
 801c260:	bfb8      	it	lt
 801c262:	2600      	movlt	r6, #0
 801c264:	2b00      	cmp	r3, #0
 801c266:	bfb5      	itete	lt
 801c268:	eba8 0503 	sublt.w	r5, r8, r3
 801c26c:	9b01      	ldrge	r3, [sp, #4]
 801c26e:	2300      	movlt	r3, #0
 801c270:	4645      	movge	r5, r8
 801c272:	e747      	b.n	801c104 <_dtoa_r+0x75c>
 801c274:	9e06      	ldr	r6, [sp, #24]
 801c276:	9f08      	ldr	r7, [sp, #32]
 801c278:	4645      	mov	r5, r8
 801c27a:	e74c      	b.n	801c116 <_dtoa_r+0x76e>
 801c27c:	9a06      	ldr	r2, [sp, #24]
 801c27e:	e775      	b.n	801c16c <_dtoa_r+0x7c4>
 801c280:	9b05      	ldr	r3, [sp, #20]
 801c282:	2b01      	cmp	r3, #1
 801c284:	dc18      	bgt.n	801c2b8 <_dtoa_r+0x910>
 801c286:	9b02      	ldr	r3, [sp, #8]
 801c288:	b9b3      	cbnz	r3, 801c2b8 <_dtoa_r+0x910>
 801c28a:	9b03      	ldr	r3, [sp, #12]
 801c28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c290:	b9a3      	cbnz	r3, 801c2bc <_dtoa_r+0x914>
 801c292:	9b03      	ldr	r3, [sp, #12]
 801c294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c298:	0d1b      	lsrs	r3, r3, #20
 801c29a:	051b      	lsls	r3, r3, #20
 801c29c:	b12b      	cbz	r3, 801c2aa <_dtoa_r+0x902>
 801c29e:	9b04      	ldr	r3, [sp, #16]
 801c2a0:	3301      	adds	r3, #1
 801c2a2:	9304      	str	r3, [sp, #16]
 801c2a4:	f108 0801 	add.w	r8, r8, #1
 801c2a8:	2301      	movs	r3, #1
 801c2aa:	9306      	str	r3, [sp, #24]
 801c2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	f47f af74 	bne.w	801c19c <_dtoa_r+0x7f4>
 801c2b4:	2001      	movs	r0, #1
 801c2b6:	e779      	b.n	801c1ac <_dtoa_r+0x804>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	e7f6      	b.n	801c2aa <_dtoa_r+0x902>
 801c2bc:	9b02      	ldr	r3, [sp, #8]
 801c2be:	e7f4      	b.n	801c2aa <_dtoa_r+0x902>
 801c2c0:	d085      	beq.n	801c1ce <_dtoa_r+0x826>
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	301c      	adds	r0, #28
 801c2c6:	e77d      	b.n	801c1c4 <_dtoa_r+0x81c>
 801c2c8:	40240000 	.word	0x40240000
 801c2cc:	9b01      	ldr	r3, [sp, #4]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	dc38      	bgt.n	801c344 <_dtoa_r+0x99c>
 801c2d2:	9b05      	ldr	r3, [sp, #20]
 801c2d4:	2b02      	cmp	r3, #2
 801c2d6:	dd35      	ble.n	801c344 <_dtoa_r+0x99c>
 801c2d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c2dc:	f1b9 0f00 	cmp.w	r9, #0
 801c2e0:	d10d      	bne.n	801c2fe <_dtoa_r+0x956>
 801c2e2:	4631      	mov	r1, r6
 801c2e4:	464b      	mov	r3, r9
 801c2e6:	2205      	movs	r2, #5
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	f000 fd4f 	bl	801cd8c <__multadd>
 801c2ee:	4601      	mov	r1, r0
 801c2f0:	4606      	mov	r6, r0
 801c2f2:	4658      	mov	r0, fp
 801c2f4:	f000 ffb0 	bl	801d258 <__mcmp>
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	f73f adbd 	bgt.w	801be78 <_dtoa_r+0x4d0>
 801c2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c300:	9d00      	ldr	r5, [sp, #0]
 801c302:	ea6f 0a03 	mvn.w	sl, r3
 801c306:	f04f 0800 	mov.w	r8, #0
 801c30a:	4631      	mov	r1, r6
 801c30c:	4620      	mov	r0, r4
 801c30e:	f000 fd1b 	bl	801cd48 <_Bfree>
 801c312:	2f00      	cmp	r7, #0
 801c314:	f43f aeb4 	beq.w	801c080 <_dtoa_r+0x6d8>
 801c318:	f1b8 0f00 	cmp.w	r8, #0
 801c31c:	d005      	beq.n	801c32a <_dtoa_r+0x982>
 801c31e:	45b8      	cmp	r8, r7
 801c320:	d003      	beq.n	801c32a <_dtoa_r+0x982>
 801c322:	4641      	mov	r1, r8
 801c324:	4620      	mov	r0, r4
 801c326:	f000 fd0f 	bl	801cd48 <_Bfree>
 801c32a:	4639      	mov	r1, r7
 801c32c:	4620      	mov	r0, r4
 801c32e:	f000 fd0b 	bl	801cd48 <_Bfree>
 801c332:	e6a5      	b.n	801c080 <_dtoa_r+0x6d8>
 801c334:	2600      	movs	r6, #0
 801c336:	4637      	mov	r7, r6
 801c338:	e7e1      	b.n	801c2fe <_dtoa_r+0x956>
 801c33a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c33c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c340:	4637      	mov	r7, r6
 801c342:	e599      	b.n	801be78 <_dtoa_r+0x4d0>
 801c344:	9b08      	ldr	r3, [sp, #32]
 801c346:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	f000 80fd 	beq.w	801c54a <_dtoa_r+0xba2>
 801c350:	2d00      	cmp	r5, #0
 801c352:	dd05      	ble.n	801c360 <_dtoa_r+0x9b8>
 801c354:	4639      	mov	r1, r7
 801c356:	462a      	mov	r2, r5
 801c358:	4620      	mov	r0, r4
 801c35a:	f000 ff11 	bl	801d180 <__lshift>
 801c35e:	4607      	mov	r7, r0
 801c360:	9b06      	ldr	r3, [sp, #24]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d05c      	beq.n	801c420 <_dtoa_r+0xa78>
 801c366:	6879      	ldr	r1, [r7, #4]
 801c368:	4620      	mov	r0, r4
 801c36a:	f000 fcad 	bl	801ccc8 <_Balloc>
 801c36e:	4605      	mov	r5, r0
 801c370:	b928      	cbnz	r0, 801c37e <_dtoa_r+0x9d6>
 801c372:	4b80      	ldr	r3, [pc, #512]	; (801c574 <_dtoa_r+0xbcc>)
 801c374:	4602      	mov	r2, r0
 801c376:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c37a:	f7ff bb2e 	b.w	801b9da <_dtoa_r+0x32>
 801c37e:	693a      	ldr	r2, [r7, #16]
 801c380:	3202      	adds	r2, #2
 801c382:	0092      	lsls	r2, r2, #2
 801c384:	f107 010c 	add.w	r1, r7, #12
 801c388:	300c      	adds	r0, #12
 801c38a:	f7fd fb71 	bl	8019a70 <memcpy>
 801c38e:	2201      	movs	r2, #1
 801c390:	4629      	mov	r1, r5
 801c392:	4620      	mov	r0, r4
 801c394:	f000 fef4 	bl	801d180 <__lshift>
 801c398:	9b00      	ldr	r3, [sp, #0]
 801c39a:	3301      	adds	r3, #1
 801c39c:	9301      	str	r3, [sp, #4]
 801c39e:	9b00      	ldr	r3, [sp, #0]
 801c3a0:	444b      	add	r3, r9
 801c3a2:	9307      	str	r3, [sp, #28]
 801c3a4:	9b02      	ldr	r3, [sp, #8]
 801c3a6:	f003 0301 	and.w	r3, r3, #1
 801c3aa:	46b8      	mov	r8, r7
 801c3ac:	9306      	str	r3, [sp, #24]
 801c3ae:	4607      	mov	r7, r0
 801c3b0:	9b01      	ldr	r3, [sp, #4]
 801c3b2:	4631      	mov	r1, r6
 801c3b4:	3b01      	subs	r3, #1
 801c3b6:	4658      	mov	r0, fp
 801c3b8:	9302      	str	r3, [sp, #8]
 801c3ba:	f7ff fa69 	bl	801b890 <quorem>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	3330      	adds	r3, #48	; 0x30
 801c3c2:	9004      	str	r0, [sp, #16]
 801c3c4:	4641      	mov	r1, r8
 801c3c6:	4658      	mov	r0, fp
 801c3c8:	9308      	str	r3, [sp, #32]
 801c3ca:	f000 ff45 	bl	801d258 <__mcmp>
 801c3ce:	463a      	mov	r2, r7
 801c3d0:	4681      	mov	r9, r0
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f000 ff5b 	bl	801d290 <__mdiff>
 801c3da:	68c2      	ldr	r2, [r0, #12]
 801c3dc:	9b08      	ldr	r3, [sp, #32]
 801c3de:	4605      	mov	r5, r0
 801c3e0:	bb02      	cbnz	r2, 801c424 <_dtoa_r+0xa7c>
 801c3e2:	4601      	mov	r1, r0
 801c3e4:	4658      	mov	r0, fp
 801c3e6:	f000 ff37 	bl	801d258 <__mcmp>
 801c3ea:	9b08      	ldr	r3, [sp, #32]
 801c3ec:	4602      	mov	r2, r0
 801c3ee:	4629      	mov	r1, r5
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c3f6:	f000 fca7 	bl	801cd48 <_Bfree>
 801c3fa:	9b05      	ldr	r3, [sp, #20]
 801c3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3fe:	9d01      	ldr	r5, [sp, #4]
 801c400:	ea43 0102 	orr.w	r1, r3, r2
 801c404:	9b06      	ldr	r3, [sp, #24]
 801c406:	430b      	orrs	r3, r1
 801c408:	9b08      	ldr	r3, [sp, #32]
 801c40a:	d10d      	bne.n	801c428 <_dtoa_r+0xa80>
 801c40c:	2b39      	cmp	r3, #57	; 0x39
 801c40e:	d029      	beq.n	801c464 <_dtoa_r+0xabc>
 801c410:	f1b9 0f00 	cmp.w	r9, #0
 801c414:	dd01      	ble.n	801c41a <_dtoa_r+0xa72>
 801c416:	9b04      	ldr	r3, [sp, #16]
 801c418:	3331      	adds	r3, #49	; 0x31
 801c41a:	9a02      	ldr	r2, [sp, #8]
 801c41c:	7013      	strb	r3, [r2, #0]
 801c41e:	e774      	b.n	801c30a <_dtoa_r+0x962>
 801c420:	4638      	mov	r0, r7
 801c422:	e7b9      	b.n	801c398 <_dtoa_r+0x9f0>
 801c424:	2201      	movs	r2, #1
 801c426:	e7e2      	b.n	801c3ee <_dtoa_r+0xa46>
 801c428:	f1b9 0f00 	cmp.w	r9, #0
 801c42c:	db06      	blt.n	801c43c <_dtoa_r+0xa94>
 801c42e:	9905      	ldr	r1, [sp, #20]
 801c430:	ea41 0909 	orr.w	r9, r1, r9
 801c434:	9906      	ldr	r1, [sp, #24]
 801c436:	ea59 0101 	orrs.w	r1, r9, r1
 801c43a:	d120      	bne.n	801c47e <_dtoa_r+0xad6>
 801c43c:	2a00      	cmp	r2, #0
 801c43e:	ddec      	ble.n	801c41a <_dtoa_r+0xa72>
 801c440:	4659      	mov	r1, fp
 801c442:	2201      	movs	r2, #1
 801c444:	4620      	mov	r0, r4
 801c446:	9301      	str	r3, [sp, #4]
 801c448:	f000 fe9a 	bl	801d180 <__lshift>
 801c44c:	4631      	mov	r1, r6
 801c44e:	4683      	mov	fp, r0
 801c450:	f000 ff02 	bl	801d258 <__mcmp>
 801c454:	2800      	cmp	r0, #0
 801c456:	9b01      	ldr	r3, [sp, #4]
 801c458:	dc02      	bgt.n	801c460 <_dtoa_r+0xab8>
 801c45a:	d1de      	bne.n	801c41a <_dtoa_r+0xa72>
 801c45c:	07da      	lsls	r2, r3, #31
 801c45e:	d5dc      	bpl.n	801c41a <_dtoa_r+0xa72>
 801c460:	2b39      	cmp	r3, #57	; 0x39
 801c462:	d1d8      	bne.n	801c416 <_dtoa_r+0xa6e>
 801c464:	9a02      	ldr	r2, [sp, #8]
 801c466:	2339      	movs	r3, #57	; 0x39
 801c468:	7013      	strb	r3, [r2, #0]
 801c46a:	462b      	mov	r3, r5
 801c46c:	461d      	mov	r5, r3
 801c46e:	3b01      	subs	r3, #1
 801c470:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c474:	2a39      	cmp	r2, #57	; 0x39
 801c476:	d050      	beq.n	801c51a <_dtoa_r+0xb72>
 801c478:	3201      	adds	r2, #1
 801c47a:	701a      	strb	r2, [r3, #0]
 801c47c:	e745      	b.n	801c30a <_dtoa_r+0x962>
 801c47e:	2a00      	cmp	r2, #0
 801c480:	dd03      	ble.n	801c48a <_dtoa_r+0xae2>
 801c482:	2b39      	cmp	r3, #57	; 0x39
 801c484:	d0ee      	beq.n	801c464 <_dtoa_r+0xabc>
 801c486:	3301      	adds	r3, #1
 801c488:	e7c7      	b.n	801c41a <_dtoa_r+0xa72>
 801c48a:	9a01      	ldr	r2, [sp, #4]
 801c48c:	9907      	ldr	r1, [sp, #28]
 801c48e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c492:	428a      	cmp	r2, r1
 801c494:	d02a      	beq.n	801c4ec <_dtoa_r+0xb44>
 801c496:	4659      	mov	r1, fp
 801c498:	2300      	movs	r3, #0
 801c49a:	220a      	movs	r2, #10
 801c49c:	4620      	mov	r0, r4
 801c49e:	f000 fc75 	bl	801cd8c <__multadd>
 801c4a2:	45b8      	cmp	r8, r7
 801c4a4:	4683      	mov	fp, r0
 801c4a6:	f04f 0300 	mov.w	r3, #0
 801c4aa:	f04f 020a 	mov.w	r2, #10
 801c4ae:	4641      	mov	r1, r8
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	d107      	bne.n	801c4c4 <_dtoa_r+0xb1c>
 801c4b4:	f000 fc6a 	bl	801cd8c <__multadd>
 801c4b8:	4680      	mov	r8, r0
 801c4ba:	4607      	mov	r7, r0
 801c4bc:	9b01      	ldr	r3, [sp, #4]
 801c4be:	3301      	adds	r3, #1
 801c4c0:	9301      	str	r3, [sp, #4]
 801c4c2:	e775      	b.n	801c3b0 <_dtoa_r+0xa08>
 801c4c4:	f000 fc62 	bl	801cd8c <__multadd>
 801c4c8:	4639      	mov	r1, r7
 801c4ca:	4680      	mov	r8, r0
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	220a      	movs	r2, #10
 801c4d0:	4620      	mov	r0, r4
 801c4d2:	f000 fc5b 	bl	801cd8c <__multadd>
 801c4d6:	4607      	mov	r7, r0
 801c4d8:	e7f0      	b.n	801c4bc <_dtoa_r+0xb14>
 801c4da:	f1b9 0f00 	cmp.w	r9, #0
 801c4de:	9a00      	ldr	r2, [sp, #0]
 801c4e0:	bfcc      	ite	gt
 801c4e2:	464d      	movgt	r5, r9
 801c4e4:	2501      	movle	r5, #1
 801c4e6:	4415      	add	r5, r2
 801c4e8:	f04f 0800 	mov.w	r8, #0
 801c4ec:	4659      	mov	r1, fp
 801c4ee:	2201      	movs	r2, #1
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	9301      	str	r3, [sp, #4]
 801c4f4:	f000 fe44 	bl	801d180 <__lshift>
 801c4f8:	4631      	mov	r1, r6
 801c4fa:	4683      	mov	fp, r0
 801c4fc:	f000 feac 	bl	801d258 <__mcmp>
 801c500:	2800      	cmp	r0, #0
 801c502:	dcb2      	bgt.n	801c46a <_dtoa_r+0xac2>
 801c504:	d102      	bne.n	801c50c <_dtoa_r+0xb64>
 801c506:	9b01      	ldr	r3, [sp, #4]
 801c508:	07db      	lsls	r3, r3, #31
 801c50a:	d4ae      	bmi.n	801c46a <_dtoa_r+0xac2>
 801c50c:	462b      	mov	r3, r5
 801c50e:	461d      	mov	r5, r3
 801c510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c514:	2a30      	cmp	r2, #48	; 0x30
 801c516:	d0fa      	beq.n	801c50e <_dtoa_r+0xb66>
 801c518:	e6f7      	b.n	801c30a <_dtoa_r+0x962>
 801c51a:	9a00      	ldr	r2, [sp, #0]
 801c51c:	429a      	cmp	r2, r3
 801c51e:	d1a5      	bne.n	801c46c <_dtoa_r+0xac4>
 801c520:	f10a 0a01 	add.w	sl, sl, #1
 801c524:	2331      	movs	r3, #49	; 0x31
 801c526:	e779      	b.n	801c41c <_dtoa_r+0xa74>
 801c528:	4b13      	ldr	r3, [pc, #76]	; (801c578 <_dtoa_r+0xbd0>)
 801c52a:	f7ff baaf 	b.w	801ba8c <_dtoa_r+0xe4>
 801c52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c530:	2b00      	cmp	r3, #0
 801c532:	f47f aa86 	bne.w	801ba42 <_dtoa_r+0x9a>
 801c536:	4b11      	ldr	r3, [pc, #68]	; (801c57c <_dtoa_r+0xbd4>)
 801c538:	f7ff baa8 	b.w	801ba8c <_dtoa_r+0xe4>
 801c53c:	f1b9 0f00 	cmp.w	r9, #0
 801c540:	dc03      	bgt.n	801c54a <_dtoa_r+0xba2>
 801c542:	9b05      	ldr	r3, [sp, #20]
 801c544:	2b02      	cmp	r3, #2
 801c546:	f73f aec9 	bgt.w	801c2dc <_dtoa_r+0x934>
 801c54a:	9d00      	ldr	r5, [sp, #0]
 801c54c:	4631      	mov	r1, r6
 801c54e:	4658      	mov	r0, fp
 801c550:	f7ff f99e 	bl	801b890 <quorem>
 801c554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c558:	f805 3b01 	strb.w	r3, [r5], #1
 801c55c:	9a00      	ldr	r2, [sp, #0]
 801c55e:	1aaa      	subs	r2, r5, r2
 801c560:	4591      	cmp	r9, r2
 801c562:	ddba      	ble.n	801c4da <_dtoa_r+0xb32>
 801c564:	4659      	mov	r1, fp
 801c566:	2300      	movs	r3, #0
 801c568:	220a      	movs	r2, #10
 801c56a:	4620      	mov	r0, r4
 801c56c:	f000 fc0e 	bl	801cd8c <__multadd>
 801c570:	4683      	mov	fp, r0
 801c572:	e7eb      	b.n	801c54c <_dtoa_r+0xba4>
 801c574:	080204bc 	.word	0x080204bc
 801c578:	080202b8 	.word	0x080202b8
 801c57c:	08020439 	.word	0x08020439

0801c580 <rshift>:
 801c580:	6903      	ldr	r3, [r0, #16]
 801c582:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c58a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c58e:	f100 0414 	add.w	r4, r0, #20
 801c592:	dd45      	ble.n	801c620 <rshift+0xa0>
 801c594:	f011 011f 	ands.w	r1, r1, #31
 801c598:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c59c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c5a0:	d10c      	bne.n	801c5bc <rshift+0x3c>
 801c5a2:	f100 0710 	add.w	r7, r0, #16
 801c5a6:	4629      	mov	r1, r5
 801c5a8:	42b1      	cmp	r1, r6
 801c5aa:	d334      	bcc.n	801c616 <rshift+0x96>
 801c5ac:	1a9b      	subs	r3, r3, r2
 801c5ae:	009b      	lsls	r3, r3, #2
 801c5b0:	1eea      	subs	r2, r5, #3
 801c5b2:	4296      	cmp	r6, r2
 801c5b4:	bf38      	it	cc
 801c5b6:	2300      	movcc	r3, #0
 801c5b8:	4423      	add	r3, r4
 801c5ba:	e015      	b.n	801c5e8 <rshift+0x68>
 801c5bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c5c0:	f1c1 0820 	rsb	r8, r1, #32
 801c5c4:	40cf      	lsrs	r7, r1
 801c5c6:	f105 0e04 	add.w	lr, r5, #4
 801c5ca:	46a1      	mov	r9, r4
 801c5cc:	4576      	cmp	r6, lr
 801c5ce:	46f4      	mov	ip, lr
 801c5d0:	d815      	bhi.n	801c5fe <rshift+0x7e>
 801c5d2:	1a9b      	subs	r3, r3, r2
 801c5d4:	009a      	lsls	r2, r3, #2
 801c5d6:	3a04      	subs	r2, #4
 801c5d8:	3501      	adds	r5, #1
 801c5da:	42ae      	cmp	r6, r5
 801c5dc:	bf38      	it	cc
 801c5de:	2200      	movcc	r2, #0
 801c5e0:	18a3      	adds	r3, r4, r2
 801c5e2:	50a7      	str	r7, [r4, r2]
 801c5e4:	b107      	cbz	r7, 801c5e8 <rshift+0x68>
 801c5e6:	3304      	adds	r3, #4
 801c5e8:	1b1a      	subs	r2, r3, r4
 801c5ea:	42a3      	cmp	r3, r4
 801c5ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c5f0:	bf08      	it	eq
 801c5f2:	2300      	moveq	r3, #0
 801c5f4:	6102      	str	r2, [r0, #16]
 801c5f6:	bf08      	it	eq
 801c5f8:	6143      	streq	r3, [r0, #20]
 801c5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5fe:	f8dc c000 	ldr.w	ip, [ip]
 801c602:	fa0c fc08 	lsl.w	ip, ip, r8
 801c606:	ea4c 0707 	orr.w	r7, ip, r7
 801c60a:	f849 7b04 	str.w	r7, [r9], #4
 801c60e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c612:	40cf      	lsrs	r7, r1
 801c614:	e7da      	b.n	801c5cc <rshift+0x4c>
 801c616:	f851 cb04 	ldr.w	ip, [r1], #4
 801c61a:	f847 cf04 	str.w	ip, [r7, #4]!
 801c61e:	e7c3      	b.n	801c5a8 <rshift+0x28>
 801c620:	4623      	mov	r3, r4
 801c622:	e7e1      	b.n	801c5e8 <rshift+0x68>

0801c624 <__hexdig_fun>:
 801c624:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c628:	2b09      	cmp	r3, #9
 801c62a:	d802      	bhi.n	801c632 <__hexdig_fun+0xe>
 801c62c:	3820      	subs	r0, #32
 801c62e:	b2c0      	uxtb	r0, r0
 801c630:	4770      	bx	lr
 801c632:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c636:	2b05      	cmp	r3, #5
 801c638:	d801      	bhi.n	801c63e <__hexdig_fun+0x1a>
 801c63a:	3847      	subs	r0, #71	; 0x47
 801c63c:	e7f7      	b.n	801c62e <__hexdig_fun+0xa>
 801c63e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c642:	2b05      	cmp	r3, #5
 801c644:	d801      	bhi.n	801c64a <__hexdig_fun+0x26>
 801c646:	3827      	subs	r0, #39	; 0x27
 801c648:	e7f1      	b.n	801c62e <__hexdig_fun+0xa>
 801c64a:	2000      	movs	r0, #0
 801c64c:	4770      	bx	lr
	...

0801c650 <__gethex>:
 801c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c654:	ed2d 8b02 	vpush	{d8}
 801c658:	b089      	sub	sp, #36	; 0x24
 801c65a:	ee08 0a10 	vmov	s16, r0
 801c65e:	9304      	str	r3, [sp, #16]
 801c660:	4bbc      	ldr	r3, [pc, #752]	; (801c954 <__gethex+0x304>)
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	9301      	str	r3, [sp, #4]
 801c666:	4618      	mov	r0, r3
 801c668:	468b      	mov	fp, r1
 801c66a:	4690      	mov	r8, r2
 801c66c:	f7e3 fdb0 	bl	80001d0 <strlen>
 801c670:	9b01      	ldr	r3, [sp, #4]
 801c672:	f8db 2000 	ldr.w	r2, [fp]
 801c676:	4403      	add	r3, r0
 801c678:	4682      	mov	sl, r0
 801c67a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c67e:	9305      	str	r3, [sp, #20]
 801c680:	1c93      	adds	r3, r2, #2
 801c682:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c686:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c68a:	32fe      	adds	r2, #254	; 0xfe
 801c68c:	18d1      	adds	r1, r2, r3
 801c68e:	461f      	mov	r7, r3
 801c690:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c694:	9100      	str	r1, [sp, #0]
 801c696:	2830      	cmp	r0, #48	; 0x30
 801c698:	d0f8      	beq.n	801c68c <__gethex+0x3c>
 801c69a:	f7ff ffc3 	bl	801c624 <__hexdig_fun>
 801c69e:	4604      	mov	r4, r0
 801c6a0:	2800      	cmp	r0, #0
 801c6a2:	d13a      	bne.n	801c71a <__gethex+0xca>
 801c6a4:	9901      	ldr	r1, [sp, #4]
 801c6a6:	4652      	mov	r2, sl
 801c6a8:	4638      	mov	r0, r7
 801c6aa:	f001 f982 	bl	801d9b2 <strncmp>
 801c6ae:	4605      	mov	r5, r0
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	d168      	bne.n	801c786 <__gethex+0x136>
 801c6b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c6b8:	eb07 060a 	add.w	r6, r7, sl
 801c6bc:	f7ff ffb2 	bl	801c624 <__hexdig_fun>
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	d062      	beq.n	801c78a <__gethex+0x13a>
 801c6c4:	4633      	mov	r3, r6
 801c6c6:	7818      	ldrb	r0, [r3, #0]
 801c6c8:	2830      	cmp	r0, #48	; 0x30
 801c6ca:	461f      	mov	r7, r3
 801c6cc:	f103 0301 	add.w	r3, r3, #1
 801c6d0:	d0f9      	beq.n	801c6c6 <__gethex+0x76>
 801c6d2:	f7ff ffa7 	bl	801c624 <__hexdig_fun>
 801c6d6:	2301      	movs	r3, #1
 801c6d8:	fab0 f480 	clz	r4, r0
 801c6dc:	0964      	lsrs	r4, r4, #5
 801c6de:	4635      	mov	r5, r6
 801c6e0:	9300      	str	r3, [sp, #0]
 801c6e2:	463a      	mov	r2, r7
 801c6e4:	4616      	mov	r6, r2
 801c6e6:	3201      	adds	r2, #1
 801c6e8:	7830      	ldrb	r0, [r6, #0]
 801c6ea:	f7ff ff9b 	bl	801c624 <__hexdig_fun>
 801c6ee:	2800      	cmp	r0, #0
 801c6f0:	d1f8      	bne.n	801c6e4 <__gethex+0x94>
 801c6f2:	9901      	ldr	r1, [sp, #4]
 801c6f4:	4652      	mov	r2, sl
 801c6f6:	4630      	mov	r0, r6
 801c6f8:	f001 f95b 	bl	801d9b2 <strncmp>
 801c6fc:	b980      	cbnz	r0, 801c720 <__gethex+0xd0>
 801c6fe:	b94d      	cbnz	r5, 801c714 <__gethex+0xc4>
 801c700:	eb06 050a 	add.w	r5, r6, sl
 801c704:	462a      	mov	r2, r5
 801c706:	4616      	mov	r6, r2
 801c708:	3201      	adds	r2, #1
 801c70a:	7830      	ldrb	r0, [r6, #0]
 801c70c:	f7ff ff8a 	bl	801c624 <__hexdig_fun>
 801c710:	2800      	cmp	r0, #0
 801c712:	d1f8      	bne.n	801c706 <__gethex+0xb6>
 801c714:	1bad      	subs	r5, r5, r6
 801c716:	00ad      	lsls	r5, r5, #2
 801c718:	e004      	b.n	801c724 <__gethex+0xd4>
 801c71a:	2400      	movs	r4, #0
 801c71c:	4625      	mov	r5, r4
 801c71e:	e7e0      	b.n	801c6e2 <__gethex+0x92>
 801c720:	2d00      	cmp	r5, #0
 801c722:	d1f7      	bne.n	801c714 <__gethex+0xc4>
 801c724:	7833      	ldrb	r3, [r6, #0]
 801c726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c72a:	2b50      	cmp	r3, #80	; 0x50
 801c72c:	d13b      	bne.n	801c7a6 <__gethex+0x156>
 801c72e:	7873      	ldrb	r3, [r6, #1]
 801c730:	2b2b      	cmp	r3, #43	; 0x2b
 801c732:	d02c      	beq.n	801c78e <__gethex+0x13e>
 801c734:	2b2d      	cmp	r3, #45	; 0x2d
 801c736:	d02e      	beq.n	801c796 <__gethex+0x146>
 801c738:	1c71      	adds	r1, r6, #1
 801c73a:	f04f 0900 	mov.w	r9, #0
 801c73e:	7808      	ldrb	r0, [r1, #0]
 801c740:	f7ff ff70 	bl	801c624 <__hexdig_fun>
 801c744:	1e43      	subs	r3, r0, #1
 801c746:	b2db      	uxtb	r3, r3
 801c748:	2b18      	cmp	r3, #24
 801c74a:	d82c      	bhi.n	801c7a6 <__gethex+0x156>
 801c74c:	f1a0 0210 	sub.w	r2, r0, #16
 801c750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c754:	f7ff ff66 	bl	801c624 <__hexdig_fun>
 801c758:	1e43      	subs	r3, r0, #1
 801c75a:	b2db      	uxtb	r3, r3
 801c75c:	2b18      	cmp	r3, #24
 801c75e:	d91d      	bls.n	801c79c <__gethex+0x14c>
 801c760:	f1b9 0f00 	cmp.w	r9, #0
 801c764:	d000      	beq.n	801c768 <__gethex+0x118>
 801c766:	4252      	negs	r2, r2
 801c768:	4415      	add	r5, r2
 801c76a:	f8cb 1000 	str.w	r1, [fp]
 801c76e:	b1e4      	cbz	r4, 801c7aa <__gethex+0x15a>
 801c770:	9b00      	ldr	r3, [sp, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	bf14      	ite	ne
 801c776:	2700      	movne	r7, #0
 801c778:	2706      	moveq	r7, #6
 801c77a:	4638      	mov	r0, r7
 801c77c:	b009      	add	sp, #36	; 0x24
 801c77e:	ecbd 8b02 	vpop	{d8}
 801c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c786:	463e      	mov	r6, r7
 801c788:	4625      	mov	r5, r4
 801c78a:	2401      	movs	r4, #1
 801c78c:	e7ca      	b.n	801c724 <__gethex+0xd4>
 801c78e:	f04f 0900 	mov.w	r9, #0
 801c792:	1cb1      	adds	r1, r6, #2
 801c794:	e7d3      	b.n	801c73e <__gethex+0xee>
 801c796:	f04f 0901 	mov.w	r9, #1
 801c79a:	e7fa      	b.n	801c792 <__gethex+0x142>
 801c79c:	230a      	movs	r3, #10
 801c79e:	fb03 0202 	mla	r2, r3, r2, r0
 801c7a2:	3a10      	subs	r2, #16
 801c7a4:	e7d4      	b.n	801c750 <__gethex+0x100>
 801c7a6:	4631      	mov	r1, r6
 801c7a8:	e7df      	b.n	801c76a <__gethex+0x11a>
 801c7aa:	1bf3      	subs	r3, r6, r7
 801c7ac:	3b01      	subs	r3, #1
 801c7ae:	4621      	mov	r1, r4
 801c7b0:	2b07      	cmp	r3, #7
 801c7b2:	dc0b      	bgt.n	801c7cc <__gethex+0x17c>
 801c7b4:	ee18 0a10 	vmov	r0, s16
 801c7b8:	f000 fa86 	bl	801ccc8 <_Balloc>
 801c7bc:	4604      	mov	r4, r0
 801c7be:	b940      	cbnz	r0, 801c7d2 <__gethex+0x182>
 801c7c0:	4b65      	ldr	r3, [pc, #404]	; (801c958 <__gethex+0x308>)
 801c7c2:	4602      	mov	r2, r0
 801c7c4:	21de      	movs	r1, #222	; 0xde
 801c7c6:	4865      	ldr	r0, [pc, #404]	; (801c95c <__gethex+0x30c>)
 801c7c8:	f001 f912 	bl	801d9f0 <__assert_func>
 801c7cc:	3101      	adds	r1, #1
 801c7ce:	105b      	asrs	r3, r3, #1
 801c7d0:	e7ee      	b.n	801c7b0 <__gethex+0x160>
 801c7d2:	f100 0914 	add.w	r9, r0, #20
 801c7d6:	f04f 0b00 	mov.w	fp, #0
 801c7da:	f1ca 0301 	rsb	r3, sl, #1
 801c7de:	f8cd 9008 	str.w	r9, [sp, #8]
 801c7e2:	f8cd b000 	str.w	fp, [sp]
 801c7e6:	9306      	str	r3, [sp, #24]
 801c7e8:	42b7      	cmp	r7, r6
 801c7ea:	d340      	bcc.n	801c86e <__gethex+0x21e>
 801c7ec:	9802      	ldr	r0, [sp, #8]
 801c7ee:	9b00      	ldr	r3, [sp, #0]
 801c7f0:	f840 3b04 	str.w	r3, [r0], #4
 801c7f4:	eba0 0009 	sub.w	r0, r0, r9
 801c7f8:	1080      	asrs	r0, r0, #2
 801c7fa:	0146      	lsls	r6, r0, #5
 801c7fc:	6120      	str	r0, [r4, #16]
 801c7fe:	4618      	mov	r0, r3
 801c800:	f000 fb58 	bl	801ceb4 <__hi0bits>
 801c804:	1a30      	subs	r0, r6, r0
 801c806:	f8d8 6000 	ldr.w	r6, [r8]
 801c80a:	42b0      	cmp	r0, r6
 801c80c:	dd63      	ble.n	801c8d6 <__gethex+0x286>
 801c80e:	1b87      	subs	r7, r0, r6
 801c810:	4639      	mov	r1, r7
 801c812:	4620      	mov	r0, r4
 801c814:	f000 fef2 	bl	801d5fc <__any_on>
 801c818:	4682      	mov	sl, r0
 801c81a:	b1a8      	cbz	r0, 801c848 <__gethex+0x1f8>
 801c81c:	1e7b      	subs	r3, r7, #1
 801c81e:	1159      	asrs	r1, r3, #5
 801c820:	f003 021f 	and.w	r2, r3, #31
 801c824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c828:	f04f 0a01 	mov.w	sl, #1
 801c82c:	fa0a f202 	lsl.w	r2, sl, r2
 801c830:	420a      	tst	r2, r1
 801c832:	d009      	beq.n	801c848 <__gethex+0x1f8>
 801c834:	4553      	cmp	r3, sl
 801c836:	dd05      	ble.n	801c844 <__gethex+0x1f4>
 801c838:	1eb9      	subs	r1, r7, #2
 801c83a:	4620      	mov	r0, r4
 801c83c:	f000 fede 	bl	801d5fc <__any_on>
 801c840:	2800      	cmp	r0, #0
 801c842:	d145      	bne.n	801c8d0 <__gethex+0x280>
 801c844:	f04f 0a02 	mov.w	sl, #2
 801c848:	4639      	mov	r1, r7
 801c84a:	4620      	mov	r0, r4
 801c84c:	f7ff fe98 	bl	801c580 <rshift>
 801c850:	443d      	add	r5, r7
 801c852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c856:	42ab      	cmp	r3, r5
 801c858:	da4c      	bge.n	801c8f4 <__gethex+0x2a4>
 801c85a:	ee18 0a10 	vmov	r0, s16
 801c85e:	4621      	mov	r1, r4
 801c860:	f000 fa72 	bl	801cd48 <_Bfree>
 801c864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c866:	2300      	movs	r3, #0
 801c868:	6013      	str	r3, [r2, #0]
 801c86a:	27a3      	movs	r7, #163	; 0xa3
 801c86c:	e785      	b.n	801c77a <__gethex+0x12a>
 801c86e:	1e73      	subs	r3, r6, #1
 801c870:	9a05      	ldr	r2, [sp, #20]
 801c872:	9303      	str	r3, [sp, #12]
 801c874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c878:	4293      	cmp	r3, r2
 801c87a:	d019      	beq.n	801c8b0 <__gethex+0x260>
 801c87c:	f1bb 0f20 	cmp.w	fp, #32
 801c880:	d107      	bne.n	801c892 <__gethex+0x242>
 801c882:	9b02      	ldr	r3, [sp, #8]
 801c884:	9a00      	ldr	r2, [sp, #0]
 801c886:	f843 2b04 	str.w	r2, [r3], #4
 801c88a:	9302      	str	r3, [sp, #8]
 801c88c:	2300      	movs	r3, #0
 801c88e:	9300      	str	r3, [sp, #0]
 801c890:	469b      	mov	fp, r3
 801c892:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c896:	f7ff fec5 	bl	801c624 <__hexdig_fun>
 801c89a:	9b00      	ldr	r3, [sp, #0]
 801c89c:	f000 000f 	and.w	r0, r0, #15
 801c8a0:	fa00 f00b 	lsl.w	r0, r0, fp
 801c8a4:	4303      	orrs	r3, r0
 801c8a6:	9300      	str	r3, [sp, #0]
 801c8a8:	f10b 0b04 	add.w	fp, fp, #4
 801c8ac:	9b03      	ldr	r3, [sp, #12]
 801c8ae:	e00d      	b.n	801c8cc <__gethex+0x27c>
 801c8b0:	9b03      	ldr	r3, [sp, #12]
 801c8b2:	9a06      	ldr	r2, [sp, #24]
 801c8b4:	4413      	add	r3, r2
 801c8b6:	42bb      	cmp	r3, r7
 801c8b8:	d3e0      	bcc.n	801c87c <__gethex+0x22c>
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	9901      	ldr	r1, [sp, #4]
 801c8be:	9307      	str	r3, [sp, #28]
 801c8c0:	4652      	mov	r2, sl
 801c8c2:	f001 f876 	bl	801d9b2 <strncmp>
 801c8c6:	9b07      	ldr	r3, [sp, #28]
 801c8c8:	2800      	cmp	r0, #0
 801c8ca:	d1d7      	bne.n	801c87c <__gethex+0x22c>
 801c8cc:	461e      	mov	r6, r3
 801c8ce:	e78b      	b.n	801c7e8 <__gethex+0x198>
 801c8d0:	f04f 0a03 	mov.w	sl, #3
 801c8d4:	e7b8      	b.n	801c848 <__gethex+0x1f8>
 801c8d6:	da0a      	bge.n	801c8ee <__gethex+0x29e>
 801c8d8:	1a37      	subs	r7, r6, r0
 801c8da:	4621      	mov	r1, r4
 801c8dc:	ee18 0a10 	vmov	r0, s16
 801c8e0:	463a      	mov	r2, r7
 801c8e2:	f000 fc4d 	bl	801d180 <__lshift>
 801c8e6:	1bed      	subs	r5, r5, r7
 801c8e8:	4604      	mov	r4, r0
 801c8ea:	f100 0914 	add.w	r9, r0, #20
 801c8ee:	f04f 0a00 	mov.w	sl, #0
 801c8f2:	e7ae      	b.n	801c852 <__gethex+0x202>
 801c8f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c8f8:	42a8      	cmp	r0, r5
 801c8fa:	dd72      	ble.n	801c9e2 <__gethex+0x392>
 801c8fc:	1b45      	subs	r5, r0, r5
 801c8fe:	42ae      	cmp	r6, r5
 801c900:	dc36      	bgt.n	801c970 <__gethex+0x320>
 801c902:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c906:	2b02      	cmp	r3, #2
 801c908:	d02a      	beq.n	801c960 <__gethex+0x310>
 801c90a:	2b03      	cmp	r3, #3
 801c90c:	d02c      	beq.n	801c968 <__gethex+0x318>
 801c90e:	2b01      	cmp	r3, #1
 801c910:	d115      	bne.n	801c93e <__gethex+0x2ee>
 801c912:	42ae      	cmp	r6, r5
 801c914:	d113      	bne.n	801c93e <__gethex+0x2ee>
 801c916:	2e01      	cmp	r6, #1
 801c918:	d10b      	bne.n	801c932 <__gethex+0x2e2>
 801c91a:	9a04      	ldr	r2, [sp, #16]
 801c91c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c920:	6013      	str	r3, [r2, #0]
 801c922:	2301      	movs	r3, #1
 801c924:	6123      	str	r3, [r4, #16]
 801c926:	f8c9 3000 	str.w	r3, [r9]
 801c92a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c92c:	2762      	movs	r7, #98	; 0x62
 801c92e:	601c      	str	r4, [r3, #0]
 801c930:	e723      	b.n	801c77a <__gethex+0x12a>
 801c932:	1e71      	subs	r1, r6, #1
 801c934:	4620      	mov	r0, r4
 801c936:	f000 fe61 	bl	801d5fc <__any_on>
 801c93a:	2800      	cmp	r0, #0
 801c93c:	d1ed      	bne.n	801c91a <__gethex+0x2ca>
 801c93e:	ee18 0a10 	vmov	r0, s16
 801c942:	4621      	mov	r1, r4
 801c944:	f000 fa00 	bl	801cd48 <_Bfree>
 801c948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c94a:	2300      	movs	r3, #0
 801c94c:	6013      	str	r3, [r2, #0]
 801c94e:	2750      	movs	r7, #80	; 0x50
 801c950:	e713      	b.n	801c77a <__gethex+0x12a>
 801c952:	bf00      	nop
 801c954:	08020538 	.word	0x08020538
 801c958:	080204bc 	.word	0x080204bc
 801c95c:	080204cd 	.word	0x080204cd
 801c960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c962:	2b00      	cmp	r3, #0
 801c964:	d1eb      	bne.n	801c93e <__gethex+0x2ee>
 801c966:	e7d8      	b.n	801c91a <__gethex+0x2ca>
 801c968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d1d5      	bne.n	801c91a <__gethex+0x2ca>
 801c96e:	e7e6      	b.n	801c93e <__gethex+0x2ee>
 801c970:	1e6f      	subs	r7, r5, #1
 801c972:	f1ba 0f00 	cmp.w	sl, #0
 801c976:	d131      	bne.n	801c9dc <__gethex+0x38c>
 801c978:	b127      	cbz	r7, 801c984 <__gethex+0x334>
 801c97a:	4639      	mov	r1, r7
 801c97c:	4620      	mov	r0, r4
 801c97e:	f000 fe3d 	bl	801d5fc <__any_on>
 801c982:	4682      	mov	sl, r0
 801c984:	117b      	asrs	r3, r7, #5
 801c986:	2101      	movs	r1, #1
 801c988:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c98c:	f007 071f 	and.w	r7, r7, #31
 801c990:	fa01 f707 	lsl.w	r7, r1, r7
 801c994:	421f      	tst	r7, r3
 801c996:	4629      	mov	r1, r5
 801c998:	4620      	mov	r0, r4
 801c99a:	bf18      	it	ne
 801c99c:	f04a 0a02 	orrne.w	sl, sl, #2
 801c9a0:	1b76      	subs	r6, r6, r5
 801c9a2:	f7ff fded 	bl	801c580 <rshift>
 801c9a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c9aa:	2702      	movs	r7, #2
 801c9ac:	f1ba 0f00 	cmp.w	sl, #0
 801c9b0:	d048      	beq.n	801ca44 <__gethex+0x3f4>
 801c9b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c9b6:	2b02      	cmp	r3, #2
 801c9b8:	d015      	beq.n	801c9e6 <__gethex+0x396>
 801c9ba:	2b03      	cmp	r3, #3
 801c9bc:	d017      	beq.n	801c9ee <__gethex+0x39e>
 801c9be:	2b01      	cmp	r3, #1
 801c9c0:	d109      	bne.n	801c9d6 <__gethex+0x386>
 801c9c2:	f01a 0f02 	tst.w	sl, #2
 801c9c6:	d006      	beq.n	801c9d6 <__gethex+0x386>
 801c9c8:	f8d9 0000 	ldr.w	r0, [r9]
 801c9cc:	ea4a 0a00 	orr.w	sl, sl, r0
 801c9d0:	f01a 0f01 	tst.w	sl, #1
 801c9d4:	d10e      	bne.n	801c9f4 <__gethex+0x3a4>
 801c9d6:	f047 0710 	orr.w	r7, r7, #16
 801c9da:	e033      	b.n	801ca44 <__gethex+0x3f4>
 801c9dc:	f04f 0a01 	mov.w	sl, #1
 801c9e0:	e7d0      	b.n	801c984 <__gethex+0x334>
 801c9e2:	2701      	movs	r7, #1
 801c9e4:	e7e2      	b.n	801c9ac <__gethex+0x35c>
 801c9e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c9e8:	f1c3 0301 	rsb	r3, r3, #1
 801c9ec:	9315      	str	r3, [sp, #84]	; 0x54
 801c9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d0f0      	beq.n	801c9d6 <__gethex+0x386>
 801c9f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c9f8:	f104 0314 	add.w	r3, r4, #20
 801c9fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ca00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ca04:	f04f 0c00 	mov.w	ip, #0
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801ca12:	d01c      	beq.n	801ca4e <__gethex+0x3fe>
 801ca14:	3201      	adds	r2, #1
 801ca16:	6002      	str	r2, [r0, #0]
 801ca18:	2f02      	cmp	r7, #2
 801ca1a:	f104 0314 	add.w	r3, r4, #20
 801ca1e:	d13f      	bne.n	801caa0 <__gethex+0x450>
 801ca20:	f8d8 2000 	ldr.w	r2, [r8]
 801ca24:	3a01      	subs	r2, #1
 801ca26:	42b2      	cmp	r2, r6
 801ca28:	d10a      	bne.n	801ca40 <__gethex+0x3f0>
 801ca2a:	1171      	asrs	r1, r6, #5
 801ca2c:	2201      	movs	r2, #1
 801ca2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ca32:	f006 061f 	and.w	r6, r6, #31
 801ca36:	fa02 f606 	lsl.w	r6, r2, r6
 801ca3a:	421e      	tst	r6, r3
 801ca3c:	bf18      	it	ne
 801ca3e:	4617      	movne	r7, r2
 801ca40:	f047 0720 	orr.w	r7, r7, #32
 801ca44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ca46:	601c      	str	r4, [r3, #0]
 801ca48:	9b04      	ldr	r3, [sp, #16]
 801ca4a:	601d      	str	r5, [r3, #0]
 801ca4c:	e695      	b.n	801c77a <__gethex+0x12a>
 801ca4e:	4299      	cmp	r1, r3
 801ca50:	f843 cc04 	str.w	ip, [r3, #-4]
 801ca54:	d8d8      	bhi.n	801ca08 <__gethex+0x3b8>
 801ca56:	68a3      	ldr	r3, [r4, #8]
 801ca58:	459b      	cmp	fp, r3
 801ca5a:	db19      	blt.n	801ca90 <__gethex+0x440>
 801ca5c:	6861      	ldr	r1, [r4, #4]
 801ca5e:	ee18 0a10 	vmov	r0, s16
 801ca62:	3101      	adds	r1, #1
 801ca64:	f000 f930 	bl	801ccc8 <_Balloc>
 801ca68:	4681      	mov	r9, r0
 801ca6a:	b918      	cbnz	r0, 801ca74 <__gethex+0x424>
 801ca6c:	4b1a      	ldr	r3, [pc, #104]	; (801cad8 <__gethex+0x488>)
 801ca6e:	4602      	mov	r2, r0
 801ca70:	2184      	movs	r1, #132	; 0x84
 801ca72:	e6a8      	b.n	801c7c6 <__gethex+0x176>
 801ca74:	6922      	ldr	r2, [r4, #16]
 801ca76:	3202      	adds	r2, #2
 801ca78:	f104 010c 	add.w	r1, r4, #12
 801ca7c:	0092      	lsls	r2, r2, #2
 801ca7e:	300c      	adds	r0, #12
 801ca80:	f7fc fff6 	bl	8019a70 <memcpy>
 801ca84:	4621      	mov	r1, r4
 801ca86:	ee18 0a10 	vmov	r0, s16
 801ca8a:	f000 f95d 	bl	801cd48 <_Bfree>
 801ca8e:	464c      	mov	r4, r9
 801ca90:	6923      	ldr	r3, [r4, #16]
 801ca92:	1c5a      	adds	r2, r3, #1
 801ca94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ca98:	6122      	str	r2, [r4, #16]
 801ca9a:	2201      	movs	r2, #1
 801ca9c:	615a      	str	r2, [r3, #20]
 801ca9e:	e7bb      	b.n	801ca18 <__gethex+0x3c8>
 801caa0:	6922      	ldr	r2, [r4, #16]
 801caa2:	455a      	cmp	r2, fp
 801caa4:	dd0b      	ble.n	801cabe <__gethex+0x46e>
 801caa6:	2101      	movs	r1, #1
 801caa8:	4620      	mov	r0, r4
 801caaa:	f7ff fd69 	bl	801c580 <rshift>
 801caae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cab2:	3501      	adds	r5, #1
 801cab4:	42ab      	cmp	r3, r5
 801cab6:	f6ff aed0 	blt.w	801c85a <__gethex+0x20a>
 801caba:	2701      	movs	r7, #1
 801cabc:	e7c0      	b.n	801ca40 <__gethex+0x3f0>
 801cabe:	f016 061f 	ands.w	r6, r6, #31
 801cac2:	d0fa      	beq.n	801caba <__gethex+0x46a>
 801cac4:	449a      	add	sl, r3
 801cac6:	f1c6 0620 	rsb	r6, r6, #32
 801caca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cace:	f000 f9f1 	bl	801ceb4 <__hi0bits>
 801cad2:	42b0      	cmp	r0, r6
 801cad4:	dbe7      	blt.n	801caa6 <__gethex+0x456>
 801cad6:	e7f0      	b.n	801caba <__gethex+0x46a>
 801cad8:	080204bc 	.word	0x080204bc

0801cadc <L_shift>:
 801cadc:	f1c2 0208 	rsb	r2, r2, #8
 801cae0:	0092      	lsls	r2, r2, #2
 801cae2:	b570      	push	{r4, r5, r6, lr}
 801cae4:	f1c2 0620 	rsb	r6, r2, #32
 801cae8:	6843      	ldr	r3, [r0, #4]
 801caea:	6804      	ldr	r4, [r0, #0]
 801caec:	fa03 f506 	lsl.w	r5, r3, r6
 801caf0:	432c      	orrs	r4, r5
 801caf2:	40d3      	lsrs	r3, r2
 801caf4:	6004      	str	r4, [r0, #0]
 801caf6:	f840 3f04 	str.w	r3, [r0, #4]!
 801cafa:	4288      	cmp	r0, r1
 801cafc:	d3f4      	bcc.n	801cae8 <L_shift+0xc>
 801cafe:	bd70      	pop	{r4, r5, r6, pc}

0801cb00 <__match>:
 801cb00:	b530      	push	{r4, r5, lr}
 801cb02:	6803      	ldr	r3, [r0, #0]
 801cb04:	3301      	adds	r3, #1
 801cb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb0a:	b914      	cbnz	r4, 801cb12 <__match+0x12>
 801cb0c:	6003      	str	r3, [r0, #0]
 801cb0e:	2001      	movs	r0, #1
 801cb10:	bd30      	pop	{r4, r5, pc}
 801cb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cb1a:	2d19      	cmp	r5, #25
 801cb1c:	bf98      	it	ls
 801cb1e:	3220      	addls	r2, #32
 801cb20:	42a2      	cmp	r2, r4
 801cb22:	d0f0      	beq.n	801cb06 <__match+0x6>
 801cb24:	2000      	movs	r0, #0
 801cb26:	e7f3      	b.n	801cb10 <__match+0x10>

0801cb28 <__hexnan>:
 801cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb2c:	680b      	ldr	r3, [r1, #0]
 801cb2e:	6801      	ldr	r1, [r0, #0]
 801cb30:	115e      	asrs	r6, r3, #5
 801cb32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cb36:	f013 031f 	ands.w	r3, r3, #31
 801cb3a:	b087      	sub	sp, #28
 801cb3c:	bf18      	it	ne
 801cb3e:	3604      	addne	r6, #4
 801cb40:	2500      	movs	r5, #0
 801cb42:	1f37      	subs	r7, r6, #4
 801cb44:	4682      	mov	sl, r0
 801cb46:	4690      	mov	r8, r2
 801cb48:	9301      	str	r3, [sp, #4]
 801cb4a:	f846 5c04 	str.w	r5, [r6, #-4]
 801cb4e:	46b9      	mov	r9, r7
 801cb50:	463c      	mov	r4, r7
 801cb52:	9502      	str	r5, [sp, #8]
 801cb54:	46ab      	mov	fp, r5
 801cb56:	784a      	ldrb	r2, [r1, #1]
 801cb58:	1c4b      	adds	r3, r1, #1
 801cb5a:	9303      	str	r3, [sp, #12]
 801cb5c:	b342      	cbz	r2, 801cbb0 <__hexnan+0x88>
 801cb5e:	4610      	mov	r0, r2
 801cb60:	9105      	str	r1, [sp, #20]
 801cb62:	9204      	str	r2, [sp, #16]
 801cb64:	f7ff fd5e 	bl	801c624 <__hexdig_fun>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	d14f      	bne.n	801cc0c <__hexnan+0xe4>
 801cb6c:	9a04      	ldr	r2, [sp, #16]
 801cb6e:	9905      	ldr	r1, [sp, #20]
 801cb70:	2a20      	cmp	r2, #32
 801cb72:	d818      	bhi.n	801cba6 <__hexnan+0x7e>
 801cb74:	9b02      	ldr	r3, [sp, #8]
 801cb76:	459b      	cmp	fp, r3
 801cb78:	dd13      	ble.n	801cba2 <__hexnan+0x7a>
 801cb7a:	454c      	cmp	r4, r9
 801cb7c:	d206      	bcs.n	801cb8c <__hexnan+0x64>
 801cb7e:	2d07      	cmp	r5, #7
 801cb80:	dc04      	bgt.n	801cb8c <__hexnan+0x64>
 801cb82:	462a      	mov	r2, r5
 801cb84:	4649      	mov	r1, r9
 801cb86:	4620      	mov	r0, r4
 801cb88:	f7ff ffa8 	bl	801cadc <L_shift>
 801cb8c:	4544      	cmp	r4, r8
 801cb8e:	d950      	bls.n	801cc32 <__hexnan+0x10a>
 801cb90:	2300      	movs	r3, #0
 801cb92:	f1a4 0904 	sub.w	r9, r4, #4
 801cb96:	f844 3c04 	str.w	r3, [r4, #-4]
 801cb9a:	f8cd b008 	str.w	fp, [sp, #8]
 801cb9e:	464c      	mov	r4, r9
 801cba0:	461d      	mov	r5, r3
 801cba2:	9903      	ldr	r1, [sp, #12]
 801cba4:	e7d7      	b.n	801cb56 <__hexnan+0x2e>
 801cba6:	2a29      	cmp	r2, #41	; 0x29
 801cba8:	d156      	bne.n	801cc58 <__hexnan+0x130>
 801cbaa:	3102      	adds	r1, #2
 801cbac:	f8ca 1000 	str.w	r1, [sl]
 801cbb0:	f1bb 0f00 	cmp.w	fp, #0
 801cbb4:	d050      	beq.n	801cc58 <__hexnan+0x130>
 801cbb6:	454c      	cmp	r4, r9
 801cbb8:	d206      	bcs.n	801cbc8 <__hexnan+0xa0>
 801cbba:	2d07      	cmp	r5, #7
 801cbbc:	dc04      	bgt.n	801cbc8 <__hexnan+0xa0>
 801cbbe:	462a      	mov	r2, r5
 801cbc0:	4649      	mov	r1, r9
 801cbc2:	4620      	mov	r0, r4
 801cbc4:	f7ff ff8a 	bl	801cadc <L_shift>
 801cbc8:	4544      	cmp	r4, r8
 801cbca:	d934      	bls.n	801cc36 <__hexnan+0x10e>
 801cbcc:	f1a8 0204 	sub.w	r2, r8, #4
 801cbd0:	4623      	mov	r3, r4
 801cbd2:	f853 1b04 	ldr.w	r1, [r3], #4
 801cbd6:	f842 1f04 	str.w	r1, [r2, #4]!
 801cbda:	429f      	cmp	r7, r3
 801cbdc:	d2f9      	bcs.n	801cbd2 <__hexnan+0xaa>
 801cbde:	1b3b      	subs	r3, r7, r4
 801cbe0:	f023 0303 	bic.w	r3, r3, #3
 801cbe4:	3304      	adds	r3, #4
 801cbe6:	3401      	adds	r4, #1
 801cbe8:	3e03      	subs	r6, #3
 801cbea:	42b4      	cmp	r4, r6
 801cbec:	bf88      	it	hi
 801cbee:	2304      	movhi	r3, #4
 801cbf0:	4443      	add	r3, r8
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	f843 2b04 	str.w	r2, [r3], #4
 801cbf8:	429f      	cmp	r7, r3
 801cbfa:	d2fb      	bcs.n	801cbf4 <__hexnan+0xcc>
 801cbfc:	683b      	ldr	r3, [r7, #0]
 801cbfe:	b91b      	cbnz	r3, 801cc08 <__hexnan+0xe0>
 801cc00:	4547      	cmp	r7, r8
 801cc02:	d127      	bne.n	801cc54 <__hexnan+0x12c>
 801cc04:	2301      	movs	r3, #1
 801cc06:	603b      	str	r3, [r7, #0]
 801cc08:	2005      	movs	r0, #5
 801cc0a:	e026      	b.n	801cc5a <__hexnan+0x132>
 801cc0c:	3501      	adds	r5, #1
 801cc0e:	2d08      	cmp	r5, #8
 801cc10:	f10b 0b01 	add.w	fp, fp, #1
 801cc14:	dd06      	ble.n	801cc24 <__hexnan+0xfc>
 801cc16:	4544      	cmp	r4, r8
 801cc18:	d9c3      	bls.n	801cba2 <__hexnan+0x7a>
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	f844 3c04 	str.w	r3, [r4, #-4]
 801cc20:	2501      	movs	r5, #1
 801cc22:	3c04      	subs	r4, #4
 801cc24:	6822      	ldr	r2, [r4, #0]
 801cc26:	f000 000f 	and.w	r0, r0, #15
 801cc2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801cc2e:	6022      	str	r2, [r4, #0]
 801cc30:	e7b7      	b.n	801cba2 <__hexnan+0x7a>
 801cc32:	2508      	movs	r5, #8
 801cc34:	e7b5      	b.n	801cba2 <__hexnan+0x7a>
 801cc36:	9b01      	ldr	r3, [sp, #4]
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d0df      	beq.n	801cbfc <__hexnan+0xd4>
 801cc3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cc40:	f1c3 0320 	rsb	r3, r3, #32
 801cc44:	fa22 f303 	lsr.w	r3, r2, r3
 801cc48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cc4c:	401a      	ands	r2, r3
 801cc4e:	f846 2c04 	str.w	r2, [r6, #-4]
 801cc52:	e7d3      	b.n	801cbfc <__hexnan+0xd4>
 801cc54:	3f04      	subs	r7, #4
 801cc56:	e7d1      	b.n	801cbfc <__hexnan+0xd4>
 801cc58:	2004      	movs	r0, #4
 801cc5a:	b007      	add	sp, #28
 801cc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc60 <_localeconv_r>:
 801cc60:	4800      	ldr	r0, [pc, #0]	; (801cc64 <_localeconv_r+0x4>)
 801cc62:	4770      	bx	lr
 801cc64:	2000021c 	.word	0x2000021c

0801cc68 <_lseek_r>:
 801cc68:	b538      	push	{r3, r4, r5, lr}
 801cc6a:	4d07      	ldr	r5, [pc, #28]	; (801cc88 <_lseek_r+0x20>)
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	4608      	mov	r0, r1
 801cc70:	4611      	mov	r1, r2
 801cc72:	2200      	movs	r2, #0
 801cc74:	602a      	str	r2, [r5, #0]
 801cc76:	461a      	mov	r2, r3
 801cc78:	f7f0 f9aa 	bl	800cfd0 <_lseek>
 801cc7c:	1c43      	adds	r3, r0, #1
 801cc7e:	d102      	bne.n	801cc86 <_lseek_r+0x1e>
 801cc80:	682b      	ldr	r3, [r5, #0]
 801cc82:	b103      	cbz	r3, 801cc86 <_lseek_r+0x1e>
 801cc84:	6023      	str	r3, [r4, #0]
 801cc86:	bd38      	pop	{r3, r4, r5, pc}
 801cc88:	2000a6f8 	.word	0x2000a6f8

0801cc8c <__ascii_mbtowc>:
 801cc8c:	b082      	sub	sp, #8
 801cc8e:	b901      	cbnz	r1, 801cc92 <__ascii_mbtowc+0x6>
 801cc90:	a901      	add	r1, sp, #4
 801cc92:	b142      	cbz	r2, 801cca6 <__ascii_mbtowc+0x1a>
 801cc94:	b14b      	cbz	r3, 801ccaa <__ascii_mbtowc+0x1e>
 801cc96:	7813      	ldrb	r3, [r2, #0]
 801cc98:	600b      	str	r3, [r1, #0]
 801cc9a:	7812      	ldrb	r2, [r2, #0]
 801cc9c:	1e10      	subs	r0, r2, #0
 801cc9e:	bf18      	it	ne
 801cca0:	2001      	movne	r0, #1
 801cca2:	b002      	add	sp, #8
 801cca4:	4770      	bx	lr
 801cca6:	4610      	mov	r0, r2
 801cca8:	e7fb      	b.n	801cca2 <__ascii_mbtowc+0x16>
 801ccaa:	f06f 0001 	mvn.w	r0, #1
 801ccae:	e7f8      	b.n	801cca2 <__ascii_mbtowc+0x16>

0801ccb0 <__malloc_lock>:
 801ccb0:	4801      	ldr	r0, [pc, #4]	; (801ccb8 <__malloc_lock+0x8>)
 801ccb2:	f001 b885 	b.w	801ddc0 <__retarget_lock_acquire_recursive>
 801ccb6:	bf00      	nop
 801ccb8:	2000a700 	.word	0x2000a700

0801ccbc <__malloc_unlock>:
 801ccbc:	4801      	ldr	r0, [pc, #4]	; (801ccc4 <__malloc_unlock+0x8>)
 801ccbe:	f001 b880 	b.w	801ddc2 <__retarget_lock_release_recursive>
 801ccc2:	bf00      	nop
 801ccc4:	2000a700 	.word	0x2000a700

0801ccc8 <_Balloc>:
 801ccc8:	b570      	push	{r4, r5, r6, lr}
 801ccca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cccc:	4604      	mov	r4, r0
 801ccce:	460d      	mov	r5, r1
 801ccd0:	b976      	cbnz	r6, 801ccf0 <_Balloc+0x28>
 801ccd2:	2010      	movs	r0, #16
 801ccd4:	f7fc fec4 	bl	8019a60 <malloc>
 801ccd8:	4602      	mov	r2, r0
 801ccda:	6260      	str	r0, [r4, #36]	; 0x24
 801ccdc:	b920      	cbnz	r0, 801cce8 <_Balloc+0x20>
 801ccde:	4b18      	ldr	r3, [pc, #96]	; (801cd40 <_Balloc+0x78>)
 801cce0:	4818      	ldr	r0, [pc, #96]	; (801cd44 <_Balloc+0x7c>)
 801cce2:	2166      	movs	r1, #102	; 0x66
 801cce4:	f000 fe84 	bl	801d9f0 <__assert_func>
 801cce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ccec:	6006      	str	r6, [r0, #0]
 801ccee:	60c6      	str	r6, [r0, #12]
 801ccf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ccf2:	68f3      	ldr	r3, [r6, #12]
 801ccf4:	b183      	cbz	r3, 801cd18 <_Balloc+0x50>
 801ccf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ccf8:	68db      	ldr	r3, [r3, #12]
 801ccfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ccfe:	b9b8      	cbnz	r0, 801cd30 <_Balloc+0x68>
 801cd00:	2101      	movs	r1, #1
 801cd02:	fa01 f605 	lsl.w	r6, r1, r5
 801cd06:	1d72      	adds	r2, r6, #5
 801cd08:	0092      	lsls	r2, r2, #2
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f000 fc97 	bl	801d63e <_calloc_r>
 801cd10:	b160      	cbz	r0, 801cd2c <_Balloc+0x64>
 801cd12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cd16:	e00e      	b.n	801cd36 <_Balloc+0x6e>
 801cd18:	2221      	movs	r2, #33	; 0x21
 801cd1a:	2104      	movs	r1, #4
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	f000 fc8e 	bl	801d63e <_calloc_r>
 801cd22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cd24:	60f0      	str	r0, [r6, #12]
 801cd26:	68db      	ldr	r3, [r3, #12]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d1e4      	bne.n	801ccf6 <_Balloc+0x2e>
 801cd2c:	2000      	movs	r0, #0
 801cd2e:	bd70      	pop	{r4, r5, r6, pc}
 801cd30:	6802      	ldr	r2, [r0, #0]
 801cd32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd36:	2300      	movs	r3, #0
 801cd38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cd3c:	e7f7      	b.n	801cd2e <_Balloc+0x66>
 801cd3e:	bf00      	nop
 801cd40:	08020446 	.word	0x08020446
 801cd44:	0802054c 	.word	0x0802054c

0801cd48 <_Bfree>:
 801cd48:	b570      	push	{r4, r5, r6, lr}
 801cd4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cd4c:	4605      	mov	r5, r0
 801cd4e:	460c      	mov	r4, r1
 801cd50:	b976      	cbnz	r6, 801cd70 <_Bfree+0x28>
 801cd52:	2010      	movs	r0, #16
 801cd54:	f7fc fe84 	bl	8019a60 <malloc>
 801cd58:	4602      	mov	r2, r0
 801cd5a:	6268      	str	r0, [r5, #36]	; 0x24
 801cd5c:	b920      	cbnz	r0, 801cd68 <_Bfree+0x20>
 801cd5e:	4b09      	ldr	r3, [pc, #36]	; (801cd84 <_Bfree+0x3c>)
 801cd60:	4809      	ldr	r0, [pc, #36]	; (801cd88 <_Bfree+0x40>)
 801cd62:	218a      	movs	r1, #138	; 0x8a
 801cd64:	f000 fe44 	bl	801d9f0 <__assert_func>
 801cd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd6c:	6006      	str	r6, [r0, #0]
 801cd6e:	60c6      	str	r6, [r0, #12]
 801cd70:	b13c      	cbz	r4, 801cd82 <_Bfree+0x3a>
 801cd72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cd74:	6862      	ldr	r2, [r4, #4]
 801cd76:	68db      	ldr	r3, [r3, #12]
 801cd78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cd7c:	6021      	str	r1, [r4, #0]
 801cd7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cd82:	bd70      	pop	{r4, r5, r6, pc}
 801cd84:	08020446 	.word	0x08020446
 801cd88:	0802054c 	.word	0x0802054c

0801cd8c <__multadd>:
 801cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd90:	690e      	ldr	r6, [r1, #16]
 801cd92:	4607      	mov	r7, r0
 801cd94:	4698      	mov	r8, r3
 801cd96:	460c      	mov	r4, r1
 801cd98:	f101 0014 	add.w	r0, r1, #20
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	6805      	ldr	r5, [r0, #0]
 801cda0:	b2a9      	uxth	r1, r5
 801cda2:	fb02 8101 	mla	r1, r2, r1, r8
 801cda6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cdaa:	0c2d      	lsrs	r5, r5, #16
 801cdac:	fb02 c505 	mla	r5, r2, r5, ip
 801cdb0:	b289      	uxth	r1, r1
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cdb8:	429e      	cmp	r6, r3
 801cdba:	f840 1b04 	str.w	r1, [r0], #4
 801cdbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cdc2:	dcec      	bgt.n	801cd9e <__multadd+0x12>
 801cdc4:	f1b8 0f00 	cmp.w	r8, #0
 801cdc8:	d022      	beq.n	801ce10 <__multadd+0x84>
 801cdca:	68a3      	ldr	r3, [r4, #8]
 801cdcc:	42b3      	cmp	r3, r6
 801cdce:	dc19      	bgt.n	801ce04 <__multadd+0x78>
 801cdd0:	6861      	ldr	r1, [r4, #4]
 801cdd2:	4638      	mov	r0, r7
 801cdd4:	3101      	adds	r1, #1
 801cdd6:	f7ff ff77 	bl	801ccc8 <_Balloc>
 801cdda:	4605      	mov	r5, r0
 801cddc:	b928      	cbnz	r0, 801cdea <__multadd+0x5e>
 801cdde:	4602      	mov	r2, r0
 801cde0:	4b0d      	ldr	r3, [pc, #52]	; (801ce18 <__multadd+0x8c>)
 801cde2:	480e      	ldr	r0, [pc, #56]	; (801ce1c <__multadd+0x90>)
 801cde4:	21b5      	movs	r1, #181	; 0xb5
 801cde6:	f000 fe03 	bl	801d9f0 <__assert_func>
 801cdea:	6922      	ldr	r2, [r4, #16]
 801cdec:	3202      	adds	r2, #2
 801cdee:	f104 010c 	add.w	r1, r4, #12
 801cdf2:	0092      	lsls	r2, r2, #2
 801cdf4:	300c      	adds	r0, #12
 801cdf6:	f7fc fe3b 	bl	8019a70 <memcpy>
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	4638      	mov	r0, r7
 801cdfe:	f7ff ffa3 	bl	801cd48 <_Bfree>
 801ce02:	462c      	mov	r4, r5
 801ce04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ce08:	3601      	adds	r6, #1
 801ce0a:	f8c3 8014 	str.w	r8, [r3, #20]
 801ce0e:	6126      	str	r6, [r4, #16]
 801ce10:	4620      	mov	r0, r4
 801ce12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce16:	bf00      	nop
 801ce18:	080204bc 	.word	0x080204bc
 801ce1c:	0802054c 	.word	0x0802054c

0801ce20 <__s2b>:
 801ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce24:	460c      	mov	r4, r1
 801ce26:	4615      	mov	r5, r2
 801ce28:	461f      	mov	r7, r3
 801ce2a:	2209      	movs	r2, #9
 801ce2c:	3308      	adds	r3, #8
 801ce2e:	4606      	mov	r6, r0
 801ce30:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce34:	2100      	movs	r1, #0
 801ce36:	2201      	movs	r2, #1
 801ce38:	429a      	cmp	r2, r3
 801ce3a:	db09      	blt.n	801ce50 <__s2b+0x30>
 801ce3c:	4630      	mov	r0, r6
 801ce3e:	f7ff ff43 	bl	801ccc8 <_Balloc>
 801ce42:	b940      	cbnz	r0, 801ce56 <__s2b+0x36>
 801ce44:	4602      	mov	r2, r0
 801ce46:	4b19      	ldr	r3, [pc, #100]	; (801ceac <__s2b+0x8c>)
 801ce48:	4819      	ldr	r0, [pc, #100]	; (801ceb0 <__s2b+0x90>)
 801ce4a:	21ce      	movs	r1, #206	; 0xce
 801ce4c:	f000 fdd0 	bl	801d9f0 <__assert_func>
 801ce50:	0052      	lsls	r2, r2, #1
 801ce52:	3101      	adds	r1, #1
 801ce54:	e7f0      	b.n	801ce38 <__s2b+0x18>
 801ce56:	9b08      	ldr	r3, [sp, #32]
 801ce58:	6143      	str	r3, [r0, #20]
 801ce5a:	2d09      	cmp	r5, #9
 801ce5c:	f04f 0301 	mov.w	r3, #1
 801ce60:	6103      	str	r3, [r0, #16]
 801ce62:	dd16      	ble.n	801ce92 <__s2b+0x72>
 801ce64:	f104 0909 	add.w	r9, r4, #9
 801ce68:	46c8      	mov	r8, r9
 801ce6a:	442c      	add	r4, r5
 801ce6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ce70:	4601      	mov	r1, r0
 801ce72:	3b30      	subs	r3, #48	; 0x30
 801ce74:	220a      	movs	r2, #10
 801ce76:	4630      	mov	r0, r6
 801ce78:	f7ff ff88 	bl	801cd8c <__multadd>
 801ce7c:	45a0      	cmp	r8, r4
 801ce7e:	d1f5      	bne.n	801ce6c <__s2b+0x4c>
 801ce80:	f1a5 0408 	sub.w	r4, r5, #8
 801ce84:	444c      	add	r4, r9
 801ce86:	1b2d      	subs	r5, r5, r4
 801ce88:	1963      	adds	r3, r4, r5
 801ce8a:	42bb      	cmp	r3, r7
 801ce8c:	db04      	blt.n	801ce98 <__s2b+0x78>
 801ce8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce92:	340a      	adds	r4, #10
 801ce94:	2509      	movs	r5, #9
 801ce96:	e7f6      	b.n	801ce86 <__s2b+0x66>
 801ce98:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ce9c:	4601      	mov	r1, r0
 801ce9e:	3b30      	subs	r3, #48	; 0x30
 801cea0:	220a      	movs	r2, #10
 801cea2:	4630      	mov	r0, r6
 801cea4:	f7ff ff72 	bl	801cd8c <__multadd>
 801cea8:	e7ee      	b.n	801ce88 <__s2b+0x68>
 801ceaa:	bf00      	nop
 801ceac:	080204bc 	.word	0x080204bc
 801ceb0:	0802054c 	.word	0x0802054c

0801ceb4 <__hi0bits>:
 801ceb4:	0c03      	lsrs	r3, r0, #16
 801ceb6:	041b      	lsls	r3, r3, #16
 801ceb8:	b9d3      	cbnz	r3, 801cef0 <__hi0bits+0x3c>
 801ceba:	0400      	lsls	r0, r0, #16
 801cebc:	2310      	movs	r3, #16
 801cebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cec2:	bf04      	itt	eq
 801cec4:	0200      	lsleq	r0, r0, #8
 801cec6:	3308      	addeq	r3, #8
 801cec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cecc:	bf04      	itt	eq
 801cece:	0100      	lsleq	r0, r0, #4
 801ced0:	3304      	addeq	r3, #4
 801ced2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ced6:	bf04      	itt	eq
 801ced8:	0080      	lsleq	r0, r0, #2
 801ceda:	3302      	addeq	r3, #2
 801cedc:	2800      	cmp	r0, #0
 801cede:	db05      	blt.n	801ceec <__hi0bits+0x38>
 801cee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cee4:	f103 0301 	add.w	r3, r3, #1
 801cee8:	bf08      	it	eq
 801ceea:	2320      	moveq	r3, #32
 801ceec:	4618      	mov	r0, r3
 801ceee:	4770      	bx	lr
 801cef0:	2300      	movs	r3, #0
 801cef2:	e7e4      	b.n	801cebe <__hi0bits+0xa>

0801cef4 <__lo0bits>:
 801cef4:	6803      	ldr	r3, [r0, #0]
 801cef6:	f013 0207 	ands.w	r2, r3, #7
 801cefa:	4601      	mov	r1, r0
 801cefc:	d00b      	beq.n	801cf16 <__lo0bits+0x22>
 801cefe:	07da      	lsls	r2, r3, #31
 801cf00:	d424      	bmi.n	801cf4c <__lo0bits+0x58>
 801cf02:	0798      	lsls	r0, r3, #30
 801cf04:	bf49      	itett	mi
 801cf06:	085b      	lsrmi	r3, r3, #1
 801cf08:	089b      	lsrpl	r3, r3, #2
 801cf0a:	2001      	movmi	r0, #1
 801cf0c:	600b      	strmi	r3, [r1, #0]
 801cf0e:	bf5c      	itt	pl
 801cf10:	600b      	strpl	r3, [r1, #0]
 801cf12:	2002      	movpl	r0, #2
 801cf14:	4770      	bx	lr
 801cf16:	b298      	uxth	r0, r3
 801cf18:	b9b0      	cbnz	r0, 801cf48 <__lo0bits+0x54>
 801cf1a:	0c1b      	lsrs	r3, r3, #16
 801cf1c:	2010      	movs	r0, #16
 801cf1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801cf22:	bf04      	itt	eq
 801cf24:	0a1b      	lsreq	r3, r3, #8
 801cf26:	3008      	addeq	r0, #8
 801cf28:	071a      	lsls	r2, r3, #28
 801cf2a:	bf04      	itt	eq
 801cf2c:	091b      	lsreq	r3, r3, #4
 801cf2e:	3004      	addeq	r0, #4
 801cf30:	079a      	lsls	r2, r3, #30
 801cf32:	bf04      	itt	eq
 801cf34:	089b      	lsreq	r3, r3, #2
 801cf36:	3002      	addeq	r0, #2
 801cf38:	07da      	lsls	r2, r3, #31
 801cf3a:	d403      	bmi.n	801cf44 <__lo0bits+0x50>
 801cf3c:	085b      	lsrs	r3, r3, #1
 801cf3e:	f100 0001 	add.w	r0, r0, #1
 801cf42:	d005      	beq.n	801cf50 <__lo0bits+0x5c>
 801cf44:	600b      	str	r3, [r1, #0]
 801cf46:	4770      	bx	lr
 801cf48:	4610      	mov	r0, r2
 801cf4a:	e7e8      	b.n	801cf1e <__lo0bits+0x2a>
 801cf4c:	2000      	movs	r0, #0
 801cf4e:	4770      	bx	lr
 801cf50:	2020      	movs	r0, #32
 801cf52:	4770      	bx	lr

0801cf54 <__i2b>:
 801cf54:	b510      	push	{r4, lr}
 801cf56:	460c      	mov	r4, r1
 801cf58:	2101      	movs	r1, #1
 801cf5a:	f7ff feb5 	bl	801ccc8 <_Balloc>
 801cf5e:	4602      	mov	r2, r0
 801cf60:	b928      	cbnz	r0, 801cf6e <__i2b+0x1a>
 801cf62:	4b05      	ldr	r3, [pc, #20]	; (801cf78 <__i2b+0x24>)
 801cf64:	4805      	ldr	r0, [pc, #20]	; (801cf7c <__i2b+0x28>)
 801cf66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cf6a:	f000 fd41 	bl	801d9f0 <__assert_func>
 801cf6e:	2301      	movs	r3, #1
 801cf70:	6144      	str	r4, [r0, #20]
 801cf72:	6103      	str	r3, [r0, #16]
 801cf74:	bd10      	pop	{r4, pc}
 801cf76:	bf00      	nop
 801cf78:	080204bc 	.word	0x080204bc
 801cf7c:	0802054c 	.word	0x0802054c

0801cf80 <__multiply>:
 801cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf84:	4614      	mov	r4, r2
 801cf86:	690a      	ldr	r2, [r1, #16]
 801cf88:	6923      	ldr	r3, [r4, #16]
 801cf8a:	429a      	cmp	r2, r3
 801cf8c:	bfb8      	it	lt
 801cf8e:	460b      	movlt	r3, r1
 801cf90:	460d      	mov	r5, r1
 801cf92:	bfbc      	itt	lt
 801cf94:	4625      	movlt	r5, r4
 801cf96:	461c      	movlt	r4, r3
 801cf98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801cf9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cfa0:	68ab      	ldr	r3, [r5, #8]
 801cfa2:	6869      	ldr	r1, [r5, #4]
 801cfa4:	eb0a 0709 	add.w	r7, sl, r9
 801cfa8:	42bb      	cmp	r3, r7
 801cfaa:	b085      	sub	sp, #20
 801cfac:	bfb8      	it	lt
 801cfae:	3101      	addlt	r1, #1
 801cfb0:	f7ff fe8a 	bl	801ccc8 <_Balloc>
 801cfb4:	b930      	cbnz	r0, 801cfc4 <__multiply+0x44>
 801cfb6:	4602      	mov	r2, r0
 801cfb8:	4b42      	ldr	r3, [pc, #264]	; (801d0c4 <__multiply+0x144>)
 801cfba:	4843      	ldr	r0, [pc, #268]	; (801d0c8 <__multiply+0x148>)
 801cfbc:	f240 115d 	movw	r1, #349	; 0x15d
 801cfc0:	f000 fd16 	bl	801d9f0 <__assert_func>
 801cfc4:	f100 0614 	add.w	r6, r0, #20
 801cfc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801cfcc:	4633      	mov	r3, r6
 801cfce:	2200      	movs	r2, #0
 801cfd0:	4543      	cmp	r3, r8
 801cfd2:	d31e      	bcc.n	801d012 <__multiply+0x92>
 801cfd4:	f105 0c14 	add.w	ip, r5, #20
 801cfd8:	f104 0314 	add.w	r3, r4, #20
 801cfdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801cfe0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801cfe4:	9202      	str	r2, [sp, #8]
 801cfe6:	ebac 0205 	sub.w	r2, ip, r5
 801cfea:	3a15      	subs	r2, #21
 801cfec:	f022 0203 	bic.w	r2, r2, #3
 801cff0:	3204      	adds	r2, #4
 801cff2:	f105 0115 	add.w	r1, r5, #21
 801cff6:	458c      	cmp	ip, r1
 801cff8:	bf38      	it	cc
 801cffa:	2204      	movcc	r2, #4
 801cffc:	9201      	str	r2, [sp, #4]
 801cffe:	9a02      	ldr	r2, [sp, #8]
 801d000:	9303      	str	r3, [sp, #12]
 801d002:	429a      	cmp	r2, r3
 801d004:	d808      	bhi.n	801d018 <__multiply+0x98>
 801d006:	2f00      	cmp	r7, #0
 801d008:	dc55      	bgt.n	801d0b6 <__multiply+0x136>
 801d00a:	6107      	str	r7, [r0, #16]
 801d00c:	b005      	add	sp, #20
 801d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d012:	f843 2b04 	str.w	r2, [r3], #4
 801d016:	e7db      	b.n	801cfd0 <__multiply+0x50>
 801d018:	f8b3 a000 	ldrh.w	sl, [r3]
 801d01c:	f1ba 0f00 	cmp.w	sl, #0
 801d020:	d020      	beq.n	801d064 <__multiply+0xe4>
 801d022:	f105 0e14 	add.w	lr, r5, #20
 801d026:	46b1      	mov	r9, r6
 801d028:	2200      	movs	r2, #0
 801d02a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d02e:	f8d9 b000 	ldr.w	fp, [r9]
 801d032:	b2a1      	uxth	r1, r4
 801d034:	fa1f fb8b 	uxth.w	fp, fp
 801d038:	fb0a b101 	mla	r1, sl, r1, fp
 801d03c:	4411      	add	r1, r2
 801d03e:	f8d9 2000 	ldr.w	r2, [r9]
 801d042:	0c24      	lsrs	r4, r4, #16
 801d044:	0c12      	lsrs	r2, r2, #16
 801d046:	fb0a 2404 	mla	r4, sl, r4, r2
 801d04a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d04e:	b289      	uxth	r1, r1
 801d050:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d054:	45f4      	cmp	ip, lr
 801d056:	f849 1b04 	str.w	r1, [r9], #4
 801d05a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d05e:	d8e4      	bhi.n	801d02a <__multiply+0xaa>
 801d060:	9901      	ldr	r1, [sp, #4]
 801d062:	5072      	str	r2, [r6, r1]
 801d064:	9a03      	ldr	r2, [sp, #12]
 801d066:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d06a:	3304      	adds	r3, #4
 801d06c:	f1b9 0f00 	cmp.w	r9, #0
 801d070:	d01f      	beq.n	801d0b2 <__multiply+0x132>
 801d072:	6834      	ldr	r4, [r6, #0]
 801d074:	f105 0114 	add.w	r1, r5, #20
 801d078:	46b6      	mov	lr, r6
 801d07a:	f04f 0a00 	mov.w	sl, #0
 801d07e:	880a      	ldrh	r2, [r1, #0]
 801d080:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d084:	fb09 b202 	mla	r2, r9, r2, fp
 801d088:	4492      	add	sl, r2
 801d08a:	b2a4      	uxth	r4, r4
 801d08c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d090:	f84e 4b04 	str.w	r4, [lr], #4
 801d094:	f851 4b04 	ldr.w	r4, [r1], #4
 801d098:	f8be 2000 	ldrh.w	r2, [lr]
 801d09c:	0c24      	lsrs	r4, r4, #16
 801d09e:	fb09 2404 	mla	r4, r9, r4, r2
 801d0a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d0a6:	458c      	cmp	ip, r1
 801d0a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d0ac:	d8e7      	bhi.n	801d07e <__multiply+0xfe>
 801d0ae:	9a01      	ldr	r2, [sp, #4]
 801d0b0:	50b4      	str	r4, [r6, r2]
 801d0b2:	3604      	adds	r6, #4
 801d0b4:	e7a3      	b.n	801cffe <__multiply+0x7e>
 801d0b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d1a5      	bne.n	801d00a <__multiply+0x8a>
 801d0be:	3f01      	subs	r7, #1
 801d0c0:	e7a1      	b.n	801d006 <__multiply+0x86>
 801d0c2:	bf00      	nop
 801d0c4:	080204bc 	.word	0x080204bc
 801d0c8:	0802054c 	.word	0x0802054c

0801d0cc <__pow5mult>:
 801d0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0d0:	4615      	mov	r5, r2
 801d0d2:	f012 0203 	ands.w	r2, r2, #3
 801d0d6:	4606      	mov	r6, r0
 801d0d8:	460f      	mov	r7, r1
 801d0da:	d007      	beq.n	801d0ec <__pow5mult+0x20>
 801d0dc:	4c25      	ldr	r4, [pc, #148]	; (801d174 <__pow5mult+0xa8>)
 801d0de:	3a01      	subs	r2, #1
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d0e6:	f7ff fe51 	bl	801cd8c <__multadd>
 801d0ea:	4607      	mov	r7, r0
 801d0ec:	10ad      	asrs	r5, r5, #2
 801d0ee:	d03d      	beq.n	801d16c <__pow5mult+0xa0>
 801d0f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d0f2:	b97c      	cbnz	r4, 801d114 <__pow5mult+0x48>
 801d0f4:	2010      	movs	r0, #16
 801d0f6:	f7fc fcb3 	bl	8019a60 <malloc>
 801d0fa:	4602      	mov	r2, r0
 801d0fc:	6270      	str	r0, [r6, #36]	; 0x24
 801d0fe:	b928      	cbnz	r0, 801d10c <__pow5mult+0x40>
 801d100:	4b1d      	ldr	r3, [pc, #116]	; (801d178 <__pow5mult+0xac>)
 801d102:	481e      	ldr	r0, [pc, #120]	; (801d17c <__pow5mult+0xb0>)
 801d104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d108:	f000 fc72 	bl	801d9f0 <__assert_func>
 801d10c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d110:	6004      	str	r4, [r0, #0]
 801d112:	60c4      	str	r4, [r0, #12]
 801d114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d11c:	b94c      	cbnz	r4, 801d132 <__pow5mult+0x66>
 801d11e:	f240 2171 	movw	r1, #625	; 0x271
 801d122:	4630      	mov	r0, r6
 801d124:	f7ff ff16 	bl	801cf54 <__i2b>
 801d128:	2300      	movs	r3, #0
 801d12a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d12e:	4604      	mov	r4, r0
 801d130:	6003      	str	r3, [r0, #0]
 801d132:	f04f 0900 	mov.w	r9, #0
 801d136:	07eb      	lsls	r3, r5, #31
 801d138:	d50a      	bpl.n	801d150 <__pow5mult+0x84>
 801d13a:	4639      	mov	r1, r7
 801d13c:	4622      	mov	r2, r4
 801d13e:	4630      	mov	r0, r6
 801d140:	f7ff ff1e 	bl	801cf80 <__multiply>
 801d144:	4639      	mov	r1, r7
 801d146:	4680      	mov	r8, r0
 801d148:	4630      	mov	r0, r6
 801d14a:	f7ff fdfd 	bl	801cd48 <_Bfree>
 801d14e:	4647      	mov	r7, r8
 801d150:	106d      	asrs	r5, r5, #1
 801d152:	d00b      	beq.n	801d16c <__pow5mult+0xa0>
 801d154:	6820      	ldr	r0, [r4, #0]
 801d156:	b938      	cbnz	r0, 801d168 <__pow5mult+0x9c>
 801d158:	4622      	mov	r2, r4
 801d15a:	4621      	mov	r1, r4
 801d15c:	4630      	mov	r0, r6
 801d15e:	f7ff ff0f 	bl	801cf80 <__multiply>
 801d162:	6020      	str	r0, [r4, #0]
 801d164:	f8c0 9000 	str.w	r9, [r0]
 801d168:	4604      	mov	r4, r0
 801d16a:	e7e4      	b.n	801d136 <__pow5mult+0x6a>
 801d16c:	4638      	mov	r0, r7
 801d16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d172:	bf00      	nop
 801d174:	080206a0 	.word	0x080206a0
 801d178:	08020446 	.word	0x08020446
 801d17c:	0802054c 	.word	0x0802054c

0801d180 <__lshift>:
 801d180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d184:	460c      	mov	r4, r1
 801d186:	6849      	ldr	r1, [r1, #4]
 801d188:	6923      	ldr	r3, [r4, #16]
 801d18a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d18e:	68a3      	ldr	r3, [r4, #8]
 801d190:	4607      	mov	r7, r0
 801d192:	4691      	mov	r9, r2
 801d194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d198:	f108 0601 	add.w	r6, r8, #1
 801d19c:	42b3      	cmp	r3, r6
 801d19e:	db0b      	blt.n	801d1b8 <__lshift+0x38>
 801d1a0:	4638      	mov	r0, r7
 801d1a2:	f7ff fd91 	bl	801ccc8 <_Balloc>
 801d1a6:	4605      	mov	r5, r0
 801d1a8:	b948      	cbnz	r0, 801d1be <__lshift+0x3e>
 801d1aa:	4602      	mov	r2, r0
 801d1ac:	4b28      	ldr	r3, [pc, #160]	; (801d250 <__lshift+0xd0>)
 801d1ae:	4829      	ldr	r0, [pc, #164]	; (801d254 <__lshift+0xd4>)
 801d1b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d1b4:	f000 fc1c 	bl	801d9f0 <__assert_func>
 801d1b8:	3101      	adds	r1, #1
 801d1ba:	005b      	lsls	r3, r3, #1
 801d1bc:	e7ee      	b.n	801d19c <__lshift+0x1c>
 801d1be:	2300      	movs	r3, #0
 801d1c0:	f100 0114 	add.w	r1, r0, #20
 801d1c4:	f100 0210 	add.w	r2, r0, #16
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	4553      	cmp	r3, sl
 801d1cc:	db33      	blt.n	801d236 <__lshift+0xb6>
 801d1ce:	6920      	ldr	r0, [r4, #16]
 801d1d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d1d4:	f104 0314 	add.w	r3, r4, #20
 801d1d8:	f019 091f 	ands.w	r9, r9, #31
 801d1dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d1e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d1e4:	d02b      	beq.n	801d23e <__lshift+0xbe>
 801d1e6:	f1c9 0e20 	rsb	lr, r9, #32
 801d1ea:	468a      	mov	sl, r1
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	6818      	ldr	r0, [r3, #0]
 801d1f0:	fa00 f009 	lsl.w	r0, r0, r9
 801d1f4:	4302      	orrs	r2, r0
 801d1f6:	f84a 2b04 	str.w	r2, [sl], #4
 801d1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1fe:	459c      	cmp	ip, r3
 801d200:	fa22 f20e 	lsr.w	r2, r2, lr
 801d204:	d8f3      	bhi.n	801d1ee <__lshift+0x6e>
 801d206:	ebac 0304 	sub.w	r3, ip, r4
 801d20a:	3b15      	subs	r3, #21
 801d20c:	f023 0303 	bic.w	r3, r3, #3
 801d210:	3304      	adds	r3, #4
 801d212:	f104 0015 	add.w	r0, r4, #21
 801d216:	4584      	cmp	ip, r0
 801d218:	bf38      	it	cc
 801d21a:	2304      	movcc	r3, #4
 801d21c:	50ca      	str	r2, [r1, r3]
 801d21e:	b10a      	cbz	r2, 801d224 <__lshift+0xa4>
 801d220:	f108 0602 	add.w	r6, r8, #2
 801d224:	3e01      	subs	r6, #1
 801d226:	4638      	mov	r0, r7
 801d228:	612e      	str	r6, [r5, #16]
 801d22a:	4621      	mov	r1, r4
 801d22c:	f7ff fd8c 	bl	801cd48 <_Bfree>
 801d230:	4628      	mov	r0, r5
 801d232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d236:	f842 0f04 	str.w	r0, [r2, #4]!
 801d23a:	3301      	adds	r3, #1
 801d23c:	e7c5      	b.n	801d1ca <__lshift+0x4a>
 801d23e:	3904      	subs	r1, #4
 801d240:	f853 2b04 	ldr.w	r2, [r3], #4
 801d244:	f841 2f04 	str.w	r2, [r1, #4]!
 801d248:	459c      	cmp	ip, r3
 801d24a:	d8f9      	bhi.n	801d240 <__lshift+0xc0>
 801d24c:	e7ea      	b.n	801d224 <__lshift+0xa4>
 801d24e:	bf00      	nop
 801d250:	080204bc 	.word	0x080204bc
 801d254:	0802054c 	.word	0x0802054c

0801d258 <__mcmp>:
 801d258:	b530      	push	{r4, r5, lr}
 801d25a:	6902      	ldr	r2, [r0, #16]
 801d25c:	690c      	ldr	r4, [r1, #16]
 801d25e:	1b12      	subs	r2, r2, r4
 801d260:	d10e      	bne.n	801d280 <__mcmp+0x28>
 801d262:	f100 0314 	add.w	r3, r0, #20
 801d266:	3114      	adds	r1, #20
 801d268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d26c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d278:	42a5      	cmp	r5, r4
 801d27a:	d003      	beq.n	801d284 <__mcmp+0x2c>
 801d27c:	d305      	bcc.n	801d28a <__mcmp+0x32>
 801d27e:	2201      	movs	r2, #1
 801d280:	4610      	mov	r0, r2
 801d282:	bd30      	pop	{r4, r5, pc}
 801d284:	4283      	cmp	r3, r0
 801d286:	d3f3      	bcc.n	801d270 <__mcmp+0x18>
 801d288:	e7fa      	b.n	801d280 <__mcmp+0x28>
 801d28a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d28e:	e7f7      	b.n	801d280 <__mcmp+0x28>

0801d290 <__mdiff>:
 801d290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d294:	460c      	mov	r4, r1
 801d296:	4606      	mov	r6, r0
 801d298:	4611      	mov	r1, r2
 801d29a:	4620      	mov	r0, r4
 801d29c:	4617      	mov	r7, r2
 801d29e:	f7ff ffdb 	bl	801d258 <__mcmp>
 801d2a2:	1e05      	subs	r5, r0, #0
 801d2a4:	d110      	bne.n	801d2c8 <__mdiff+0x38>
 801d2a6:	4629      	mov	r1, r5
 801d2a8:	4630      	mov	r0, r6
 801d2aa:	f7ff fd0d 	bl	801ccc8 <_Balloc>
 801d2ae:	b930      	cbnz	r0, 801d2be <__mdiff+0x2e>
 801d2b0:	4b39      	ldr	r3, [pc, #228]	; (801d398 <__mdiff+0x108>)
 801d2b2:	4602      	mov	r2, r0
 801d2b4:	f240 2132 	movw	r1, #562	; 0x232
 801d2b8:	4838      	ldr	r0, [pc, #224]	; (801d39c <__mdiff+0x10c>)
 801d2ba:	f000 fb99 	bl	801d9f0 <__assert_func>
 801d2be:	2301      	movs	r3, #1
 801d2c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d2c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2c8:	bfa4      	itt	ge
 801d2ca:	463b      	movge	r3, r7
 801d2cc:	4627      	movge	r7, r4
 801d2ce:	4630      	mov	r0, r6
 801d2d0:	6879      	ldr	r1, [r7, #4]
 801d2d2:	bfa6      	itte	ge
 801d2d4:	461c      	movge	r4, r3
 801d2d6:	2500      	movge	r5, #0
 801d2d8:	2501      	movlt	r5, #1
 801d2da:	f7ff fcf5 	bl	801ccc8 <_Balloc>
 801d2de:	b920      	cbnz	r0, 801d2ea <__mdiff+0x5a>
 801d2e0:	4b2d      	ldr	r3, [pc, #180]	; (801d398 <__mdiff+0x108>)
 801d2e2:	4602      	mov	r2, r0
 801d2e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d2e8:	e7e6      	b.n	801d2b8 <__mdiff+0x28>
 801d2ea:	693e      	ldr	r6, [r7, #16]
 801d2ec:	60c5      	str	r5, [r0, #12]
 801d2ee:	6925      	ldr	r5, [r4, #16]
 801d2f0:	f107 0114 	add.w	r1, r7, #20
 801d2f4:	f104 0914 	add.w	r9, r4, #20
 801d2f8:	f100 0e14 	add.w	lr, r0, #20
 801d2fc:	f107 0210 	add.w	r2, r7, #16
 801d300:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d304:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d308:	46f2      	mov	sl, lr
 801d30a:	2700      	movs	r7, #0
 801d30c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d314:	fa1f f883 	uxth.w	r8, r3
 801d318:	fa17 f78b 	uxtah	r7, r7, fp
 801d31c:	0c1b      	lsrs	r3, r3, #16
 801d31e:	eba7 0808 	sub.w	r8, r7, r8
 801d322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d326:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d32a:	fa1f f888 	uxth.w	r8, r8
 801d32e:	141f      	asrs	r7, r3, #16
 801d330:	454d      	cmp	r5, r9
 801d332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d336:	f84a 3b04 	str.w	r3, [sl], #4
 801d33a:	d8e7      	bhi.n	801d30c <__mdiff+0x7c>
 801d33c:	1b2b      	subs	r3, r5, r4
 801d33e:	3b15      	subs	r3, #21
 801d340:	f023 0303 	bic.w	r3, r3, #3
 801d344:	3304      	adds	r3, #4
 801d346:	3415      	adds	r4, #21
 801d348:	42a5      	cmp	r5, r4
 801d34a:	bf38      	it	cc
 801d34c:	2304      	movcc	r3, #4
 801d34e:	4419      	add	r1, r3
 801d350:	4473      	add	r3, lr
 801d352:	469e      	mov	lr, r3
 801d354:	460d      	mov	r5, r1
 801d356:	4565      	cmp	r5, ip
 801d358:	d30e      	bcc.n	801d378 <__mdiff+0xe8>
 801d35a:	f10c 0203 	add.w	r2, ip, #3
 801d35e:	1a52      	subs	r2, r2, r1
 801d360:	f022 0203 	bic.w	r2, r2, #3
 801d364:	3903      	subs	r1, #3
 801d366:	458c      	cmp	ip, r1
 801d368:	bf38      	it	cc
 801d36a:	2200      	movcc	r2, #0
 801d36c:	441a      	add	r2, r3
 801d36e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d372:	b17b      	cbz	r3, 801d394 <__mdiff+0x104>
 801d374:	6106      	str	r6, [r0, #16]
 801d376:	e7a5      	b.n	801d2c4 <__mdiff+0x34>
 801d378:	f855 8b04 	ldr.w	r8, [r5], #4
 801d37c:	fa17 f488 	uxtah	r4, r7, r8
 801d380:	1422      	asrs	r2, r4, #16
 801d382:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d386:	b2a4      	uxth	r4, r4
 801d388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d38c:	f84e 4b04 	str.w	r4, [lr], #4
 801d390:	1417      	asrs	r7, r2, #16
 801d392:	e7e0      	b.n	801d356 <__mdiff+0xc6>
 801d394:	3e01      	subs	r6, #1
 801d396:	e7ea      	b.n	801d36e <__mdiff+0xde>
 801d398:	080204bc 	.word	0x080204bc
 801d39c:	0802054c 	.word	0x0802054c

0801d3a0 <__ulp>:
 801d3a0:	b082      	sub	sp, #8
 801d3a2:	ed8d 0b00 	vstr	d0, [sp]
 801d3a6:	9b01      	ldr	r3, [sp, #4]
 801d3a8:	4912      	ldr	r1, [pc, #72]	; (801d3f4 <__ulp+0x54>)
 801d3aa:	4019      	ands	r1, r3
 801d3ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d3b0:	2900      	cmp	r1, #0
 801d3b2:	dd05      	ble.n	801d3c0 <__ulp+0x20>
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	460b      	mov	r3, r1
 801d3b8:	ec43 2b10 	vmov	d0, r2, r3
 801d3bc:	b002      	add	sp, #8
 801d3be:	4770      	bx	lr
 801d3c0:	4249      	negs	r1, r1
 801d3c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d3c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d3ca:	f04f 0200 	mov.w	r2, #0
 801d3ce:	f04f 0300 	mov.w	r3, #0
 801d3d2:	da04      	bge.n	801d3de <__ulp+0x3e>
 801d3d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d3d8:	fa41 f300 	asr.w	r3, r1, r0
 801d3dc:	e7ec      	b.n	801d3b8 <__ulp+0x18>
 801d3de:	f1a0 0114 	sub.w	r1, r0, #20
 801d3e2:	291e      	cmp	r1, #30
 801d3e4:	bfda      	itte	le
 801d3e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d3ea:	fa20 f101 	lsrle.w	r1, r0, r1
 801d3ee:	2101      	movgt	r1, #1
 801d3f0:	460a      	mov	r2, r1
 801d3f2:	e7e1      	b.n	801d3b8 <__ulp+0x18>
 801d3f4:	7ff00000 	.word	0x7ff00000

0801d3f8 <__b2d>:
 801d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3fa:	6905      	ldr	r5, [r0, #16]
 801d3fc:	f100 0714 	add.w	r7, r0, #20
 801d400:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d404:	1f2e      	subs	r6, r5, #4
 801d406:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d40a:	4620      	mov	r0, r4
 801d40c:	f7ff fd52 	bl	801ceb4 <__hi0bits>
 801d410:	f1c0 0320 	rsb	r3, r0, #32
 801d414:	280a      	cmp	r0, #10
 801d416:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d494 <__b2d+0x9c>
 801d41a:	600b      	str	r3, [r1, #0]
 801d41c:	dc14      	bgt.n	801d448 <__b2d+0x50>
 801d41e:	f1c0 0e0b 	rsb	lr, r0, #11
 801d422:	fa24 f10e 	lsr.w	r1, r4, lr
 801d426:	42b7      	cmp	r7, r6
 801d428:	ea41 030c 	orr.w	r3, r1, ip
 801d42c:	bf34      	ite	cc
 801d42e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d432:	2100      	movcs	r1, #0
 801d434:	3015      	adds	r0, #21
 801d436:	fa04 f000 	lsl.w	r0, r4, r0
 801d43a:	fa21 f10e 	lsr.w	r1, r1, lr
 801d43e:	ea40 0201 	orr.w	r2, r0, r1
 801d442:	ec43 2b10 	vmov	d0, r2, r3
 801d446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d448:	42b7      	cmp	r7, r6
 801d44a:	bf3a      	itte	cc
 801d44c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d450:	f1a5 0608 	subcc.w	r6, r5, #8
 801d454:	2100      	movcs	r1, #0
 801d456:	380b      	subs	r0, #11
 801d458:	d017      	beq.n	801d48a <__b2d+0x92>
 801d45a:	f1c0 0c20 	rsb	ip, r0, #32
 801d45e:	fa04 f500 	lsl.w	r5, r4, r0
 801d462:	42be      	cmp	r6, r7
 801d464:	fa21 f40c 	lsr.w	r4, r1, ip
 801d468:	ea45 0504 	orr.w	r5, r5, r4
 801d46c:	bf8c      	ite	hi
 801d46e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d472:	2400      	movls	r4, #0
 801d474:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d478:	fa01 f000 	lsl.w	r0, r1, r0
 801d47c:	fa24 f40c 	lsr.w	r4, r4, ip
 801d480:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d484:	ea40 0204 	orr.w	r2, r0, r4
 801d488:	e7db      	b.n	801d442 <__b2d+0x4a>
 801d48a:	ea44 030c 	orr.w	r3, r4, ip
 801d48e:	460a      	mov	r2, r1
 801d490:	e7d7      	b.n	801d442 <__b2d+0x4a>
 801d492:	bf00      	nop
 801d494:	3ff00000 	.word	0x3ff00000

0801d498 <__d2b>:
 801d498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d49c:	4689      	mov	r9, r1
 801d49e:	2101      	movs	r1, #1
 801d4a0:	ec57 6b10 	vmov	r6, r7, d0
 801d4a4:	4690      	mov	r8, r2
 801d4a6:	f7ff fc0f 	bl	801ccc8 <_Balloc>
 801d4aa:	4604      	mov	r4, r0
 801d4ac:	b930      	cbnz	r0, 801d4bc <__d2b+0x24>
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	4b25      	ldr	r3, [pc, #148]	; (801d548 <__d2b+0xb0>)
 801d4b2:	4826      	ldr	r0, [pc, #152]	; (801d54c <__d2b+0xb4>)
 801d4b4:	f240 310a 	movw	r1, #778	; 0x30a
 801d4b8:	f000 fa9a 	bl	801d9f0 <__assert_func>
 801d4bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d4c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d4c4:	bb35      	cbnz	r5, 801d514 <__d2b+0x7c>
 801d4c6:	2e00      	cmp	r6, #0
 801d4c8:	9301      	str	r3, [sp, #4]
 801d4ca:	d028      	beq.n	801d51e <__d2b+0x86>
 801d4cc:	4668      	mov	r0, sp
 801d4ce:	9600      	str	r6, [sp, #0]
 801d4d0:	f7ff fd10 	bl	801cef4 <__lo0bits>
 801d4d4:	9900      	ldr	r1, [sp, #0]
 801d4d6:	b300      	cbz	r0, 801d51a <__d2b+0x82>
 801d4d8:	9a01      	ldr	r2, [sp, #4]
 801d4da:	f1c0 0320 	rsb	r3, r0, #32
 801d4de:	fa02 f303 	lsl.w	r3, r2, r3
 801d4e2:	430b      	orrs	r3, r1
 801d4e4:	40c2      	lsrs	r2, r0
 801d4e6:	6163      	str	r3, [r4, #20]
 801d4e8:	9201      	str	r2, [sp, #4]
 801d4ea:	9b01      	ldr	r3, [sp, #4]
 801d4ec:	61a3      	str	r3, [r4, #24]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	bf14      	ite	ne
 801d4f2:	2202      	movne	r2, #2
 801d4f4:	2201      	moveq	r2, #1
 801d4f6:	6122      	str	r2, [r4, #16]
 801d4f8:	b1d5      	cbz	r5, 801d530 <__d2b+0x98>
 801d4fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d4fe:	4405      	add	r5, r0
 801d500:	f8c9 5000 	str.w	r5, [r9]
 801d504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d508:	f8c8 0000 	str.w	r0, [r8]
 801d50c:	4620      	mov	r0, r4
 801d50e:	b003      	add	sp, #12
 801d510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d518:	e7d5      	b.n	801d4c6 <__d2b+0x2e>
 801d51a:	6161      	str	r1, [r4, #20]
 801d51c:	e7e5      	b.n	801d4ea <__d2b+0x52>
 801d51e:	a801      	add	r0, sp, #4
 801d520:	f7ff fce8 	bl	801cef4 <__lo0bits>
 801d524:	9b01      	ldr	r3, [sp, #4]
 801d526:	6163      	str	r3, [r4, #20]
 801d528:	2201      	movs	r2, #1
 801d52a:	6122      	str	r2, [r4, #16]
 801d52c:	3020      	adds	r0, #32
 801d52e:	e7e3      	b.n	801d4f8 <__d2b+0x60>
 801d530:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d534:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d538:	f8c9 0000 	str.w	r0, [r9]
 801d53c:	6918      	ldr	r0, [r3, #16]
 801d53e:	f7ff fcb9 	bl	801ceb4 <__hi0bits>
 801d542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d546:	e7df      	b.n	801d508 <__d2b+0x70>
 801d548:	080204bc 	.word	0x080204bc
 801d54c:	0802054c 	.word	0x0802054c

0801d550 <__ratio>:
 801d550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d554:	4688      	mov	r8, r1
 801d556:	4669      	mov	r1, sp
 801d558:	4681      	mov	r9, r0
 801d55a:	f7ff ff4d 	bl	801d3f8 <__b2d>
 801d55e:	a901      	add	r1, sp, #4
 801d560:	4640      	mov	r0, r8
 801d562:	ec55 4b10 	vmov	r4, r5, d0
 801d566:	f7ff ff47 	bl	801d3f8 <__b2d>
 801d56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d56e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d572:	eba3 0c02 	sub.w	ip, r3, r2
 801d576:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d57a:	1a9b      	subs	r3, r3, r2
 801d57c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d580:	ec51 0b10 	vmov	r0, r1, d0
 801d584:	2b00      	cmp	r3, #0
 801d586:	bfd6      	itet	le
 801d588:	460a      	movle	r2, r1
 801d58a:	462a      	movgt	r2, r5
 801d58c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d590:	468b      	mov	fp, r1
 801d592:	462f      	mov	r7, r5
 801d594:	bfd4      	ite	le
 801d596:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d59a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d59e:	4620      	mov	r0, r4
 801d5a0:	ee10 2a10 	vmov	r2, s0
 801d5a4:	465b      	mov	r3, fp
 801d5a6:	4639      	mov	r1, r7
 801d5a8:	f7e3 f950 	bl	800084c <__aeabi_ddiv>
 801d5ac:	ec41 0b10 	vmov	d0, r0, r1
 801d5b0:	b003      	add	sp, #12
 801d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5b6 <__copybits>:
 801d5b6:	3901      	subs	r1, #1
 801d5b8:	b570      	push	{r4, r5, r6, lr}
 801d5ba:	1149      	asrs	r1, r1, #5
 801d5bc:	6914      	ldr	r4, [r2, #16]
 801d5be:	3101      	adds	r1, #1
 801d5c0:	f102 0314 	add.w	r3, r2, #20
 801d5c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d5c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d5cc:	1f05      	subs	r5, r0, #4
 801d5ce:	42a3      	cmp	r3, r4
 801d5d0:	d30c      	bcc.n	801d5ec <__copybits+0x36>
 801d5d2:	1aa3      	subs	r3, r4, r2
 801d5d4:	3b11      	subs	r3, #17
 801d5d6:	f023 0303 	bic.w	r3, r3, #3
 801d5da:	3211      	adds	r2, #17
 801d5dc:	42a2      	cmp	r2, r4
 801d5de:	bf88      	it	hi
 801d5e0:	2300      	movhi	r3, #0
 801d5e2:	4418      	add	r0, r3
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	4288      	cmp	r0, r1
 801d5e8:	d305      	bcc.n	801d5f6 <__copybits+0x40>
 801d5ea:	bd70      	pop	{r4, r5, r6, pc}
 801d5ec:	f853 6b04 	ldr.w	r6, [r3], #4
 801d5f0:	f845 6f04 	str.w	r6, [r5, #4]!
 801d5f4:	e7eb      	b.n	801d5ce <__copybits+0x18>
 801d5f6:	f840 3b04 	str.w	r3, [r0], #4
 801d5fa:	e7f4      	b.n	801d5e6 <__copybits+0x30>

0801d5fc <__any_on>:
 801d5fc:	f100 0214 	add.w	r2, r0, #20
 801d600:	6900      	ldr	r0, [r0, #16]
 801d602:	114b      	asrs	r3, r1, #5
 801d604:	4298      	cmp	r0, r3
 801d606:	b510      	push	{r4, lr}
 801d608:	db11      	blt.n	801d62e <__any_on+0x32>
 801d60a:	dd0a      	ble.n	801d622 <__any_on+0x26>
 801d60c:	f011 011f 	ands.w	r1, r1, #31
 801d610:	d007      	beq.n	801d622 <__any_on+0x26>
 801d612:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d616:	fa24 f001 	lsr.w	r0, r4, r1
 801d61a:	fa00 f101 	lsl.w	r1, r0, r1
 801d61e:	428c      	cmp	r4, r1
 801d620:	d10b      	bne.n	801d63a <__any_on+0x3e>
 801d622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d626:	4293      	cmp	r3, r2
 801d628:	d803      	bhi.n	801d632 <__any_on+0x36>
 801d62a:	2000      	movs	r0, #0
 801d62c:	bd10      	pop	{r4, pc}
 801d62e:	4603      	mov	r3, r0
 801d630:	e7f7      	b.n	801d622 <__any_on+0x26>
 801d632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d636:	2900      	cmp	r1, #0
 801d638:	d0f5      	beq.n	801d626 <__any_on+0x2a>
 801d63a:	2001      	movs	r0, #1
 801d63c:	e7f6      	b.n	801d62c <__any_on+0x30>

0801d63e <_calloc_r>:
 801d63e:	b513      	push	{r0, r1, r4, lr}
 801d640:	434a      	muls	r2, r1
 801d642:	4611      	mov	r1, r2
 801d644:	9201      	str	r2, [sp, #4]
 801d646:	f7fc fa79 	bl	8019b3c <_malloc_r>
 801d64a:	4604      	mov	r4, r0
 801d64c:	b118      	cbz	r0, 801d656 <_calloc_r+0x18>
 801d64e:	9a01      	ldr	r2, [sp, #4]
 801d650:	2100      	movs	r1, #0
 801d652:	f7fc fa1b 	bl	8019a8c <memset>
 801d656:	4620      	mov	r0, r4
 801d658:	b002      	add	sp, #8
 801d65a:	bd10      	pop	{r4, pc}

0801d65c <_realloc_r>:
 801d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d65e:	4607      	mov	r7, r0
 801d660:	4614      	mov	r4, r2
 801d662:	460e      	mov	r6, r1
 801d664:	b921      	cbnz	r1, 801d670 <_realloc_r+0x14>
 801d666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d66a:	4611      	mov	r1, r2
 801d66c:	f7fc ba66 	b.w	8019b3c <_malloc_r>
 801d670:	b922      	cbnz	r2, 801d67c <_realloc_r+0x20>
 801d672:	f7fc fa13 	bl	8019a9c <_free_r>
 801d676:	4625      	mov	r5, r4
 801d678:	4628      	mov	r0, r5
 801d67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d67c:	f000 fbbc 	bl	801ddf8 <_malloc_usable_size_r>
 801d680:	42a0      	cmp	r0, r4
 801d682:	d20f      	bcs.n	801d6a4 <_realloc_r+0x48>
 801d684:	4621      	mov	r1, r4
 801d686:	4638      	mov	r0, r7
 801d688:	f7fc fa58 	bl	8019b3c <_malloc_r>
 801d68c:	4605      	mov	r5, r0
 801d68e:	2800      	cmp	r0, #0
 801d690:	d0f2      	beq.n	801d678 <_realloc_r+0x1c>
 801d692:	4631      	mov	r1, r6
 801d694:	4622      	mov	r2, r4
 801d696:	f7fc f9eb 	bl	8019a70 <memcpy>
 801d69a:	4631      	mov	r1, r6
 801d69c:	4638      	mov	r0, r7
 801d69e:	f7fc f9fd 	bl	8019a9c <_free_r>
 801d6a2:	e7e9      	b.n	801d678 <_realloc_r+0x1c>
 801d6a4:	4635      	mov	r5, r6
 801d6a6:	e7e7      	b.n	801d678 <_realloc_r+0x1c>

0801d6a8 <__ssputs_r>:
 801d6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6ac:	688e      	ldr	r6, [r1, #8]
 801d6ae:	429e      	cmp	r6, r3
 801d6b0:	4682      	mov	sl, r0
 801d6b2:	460c      	mov	r4, r1
 801d6b4:	4690      	mov	r8, r2
 801d6b6:	461f      	mov	r7, r3
 801d6b8:	d838      	bhi.n	801d72c <__ssputs_r+0x84>
 801d6ba:	898a      	ldrh	r2, [r1, #12]
 801d6bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d6c0:	d032      	beq.n	801d728 <__ssputs_r+0x80>
 801d6c2:	6825      	ldr	r5, [r4, #0]
 801d6c4:	6909      	ldr	r1, [r1, #16]
 801d6c6:	eba5 0901 	sub.w	r9, r5, r1
 801d6ca:	6965      	ldr	r5, [r4, #20]
 801d6cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d6d4:	3301      	adds	r3, #1
 801d6d6:	444b      	add	r3, r9
 801d6d8:	106d      	asrs	r5, r5, #1
 801d6da:	429d      	cmp	r5, r3
 801d6dc:	bf38      	it	cc
 801d6de:	461d      	movcc	r5, r3
 801d6e0:	0553      	lsls	r3, r2, #21
 801d6e2:	d531      	bpl.n	801d748 <__ssputs_r+0xa0>
 801d6e4:	4629      	mov	r1, r5
 801d6e6:	f7fc fa29 	bl	8019b3c <_malloc_r>
 801d6ea:	4606      	mov	r6, r0
 801d6ec:	b950      	cbnz	r0, 801d704 <__ssputs_r+0x5c>
 801d6ee:	230c      	movs	r3, #12
 801d6f0:	f8ca 3000 	str.w	r3, [sl]
 801d6f4:	89a3      	ldrh	r3, [r4, #12]
 801d6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6fa:	81a3      	strh	r3, [r4, #12]
 801d6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d704:	6921      	ldr	r1, [r4, #16]
 801d706:	464a      	mov	r2, r9
 801d708:	f7fc f9b2 	bl	8019a70 <memcpy>
 801d70c:	89a3      	ldrh	r3, [r4, #12]
 801d70e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d716:	81a3      	strh	r3, [r4, #12]
 801d718:	6126      	str	r6, [r4, #16]
 801d71a:	6165      	str	r5, [r4, #20]
 801d71c:	444e      	add	r6, r9
 801d71e:	eba5 0509 	sub.w	r5, r5, r9
 801d722:	6026      	str	r6, [r4, #0]
 801d724:	60a5      	str	r5, [r4, #8]
 801d726:	463e      	mov	r6, r7
 801d728:	42be      	cmp	r6, r7
 801d72a:	d900      	bls.n	801d72e <__ssputs_r+0x86>
 801d72c:	463e      	mov	r6, r7
 801d72e:	4632      	mov	r2, r6
 801d730:	6820      	ldr	r0, [r4, #0]
 801d732:	4641      	mov	r1, r8
 801d734:	f000 fb46 	bl	801ddc4 <memmove>
 801d738:	68a3      	ldr	r3, [r4, #8]
 801d73a:	6822      	ldr	r2, [r4, #0]
 801d73c:	1b9b      	subs	r3, r3, r6
 801d73e:	4432      	add	r2, r6
 801d740:	60a3      	str	r3, [r4, #8]
 801d742:	6022      	str	r2, [r4, #0]
 801d744:	2000      	movs	r0, #0
 801d746:	e7db      	b.n	801d700 <__ssputs_r+0x58>
 801d748:	462a      	mov	r2, r5
 801d74a:	f7ff ff87 	bl	801d65c <_realloc_r>
 801d74e:	4606      	mov	r6, r0
 801d750:	2800      	cmp	r0, #0
 801d752:	d1e1      	bne.n	801d718 <__ssputs_r+0x70>
 801d754:	6921      	ldr	r1, [r4, #16]
 801d756:	4650      	mov	r0, sl
 801d758:	f7fc f9a0 	bl	8019a9c <_free_r>
 801d75c:	e7c7      	b.n	801d6ee <__ssputs_r+0x46>
	...

0801d760 <_svfiprintf_r>:
 801d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d764:	4698      	mov	r8, r3
 801d766:	898b      	ldrh	r3, [r1, #12]
 801d768:	061b      	lsls	r3, r3, #24
 801d76a:	b09d      	sub	sp, #116	; 0x74
 801d76c:	4607      	mov	r7, r0
 801d76e:	460d      	mov	r5, r1
 801d770:	4614      	mov	r4, r2
 801d772:	d50e      	bpl.n	801d792 <_svfiprintf_r+0x32>
 801d774:	690b      	ldr	r3, [r1, #16]
 801d776:	b963      	cbnz	r3, 801d792 <_svfiprintf_r+0x32>
 801d778:	2140      	movs	r1, #64	; 0x40
 801d77a:	f7fc f9df 	bl	8019b3c <_malloc_r>
 801d77e:	6028      	str	r0, [r5, #0]
 801d780:	6128      	str	r0, [r5, #16]
 801d782:	b920      	cbnz	r0, 801d78e <_svfiprintf_r+0x2e>
 801d784:	230c      	movs	r3, #12
 801d786:	603b      	str	r3, [r7, #0]
 801d788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d78c:	e0d1      	b.n	801d932 <_svfiprintf_r+0x1d2>
 801d78e:	2340      	movs	r3, #64	; 0x40
 801d790:	616b      	str	r3, [r5, #20]
 801d792:	2300      	movs	r3, #0
 801d794:	9309      	str	r3, [sp, #36]	; 0x24
 801d796:	2320      	movs	r3, #32
 801d798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d79c:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7a0:	2330      	movs	r3, #48	; 0x30
 801d7a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d94c <_svfiprintf_r+0x1ec>
 801d7a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d7aa:	f04f 0901 	mov.w	r9, #1
 801d7ae:	4623      	mov	r3, r4
 801d7b0:	469a      	mov	sl, r3
 801d7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7b6:	b10a      	cbz	r2, 801d7bc <_svfiprintf_r+0x5c>
 801d7b8:	2a25      	cmp	r2, #37	; 0x25
 801d7ba:	d1f9      	bne.n	801d7b0 <_svfiprintf_r+0x50>
 801d7bc:	ebba 0b04 	subs.w	fp, sl, r4
 801d7c0:	d00b      	beq.n	801d7da <_svfiprintf_r+0x7a>
 801d7c2:	465b      	mov	r3, fp
 801d7c4:	4622      	mov	r2, r4
 801d7c6:	4629      	mov	r1, r5
 801d7c8:	4638      	mov	r0, r7
 801d7ca:	f7ff ff6d 	bl	801d6a8 <__ssputs_r>
 801d7ce:	3001      	adds	r0, #1
 801d7d0:	f000 80aa 	beq.w	801d928 <_svfiprintf_r+0x1c8>
 801d7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d7d6:	445a      	add	r2, fp
 801d7d8:	9209      	str	r2, [sp, #36]	; 0x24
 801d7da:	f89a 3000 	ldrb.w	r3, [sl]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	f000 80a2 	beq.w	801d928 <_svfiprintf_r+0x1c8>
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d7ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7ee:	f10a 0a01 	add.w	sl, sl, #1
 801d7f2:	9304      	str	r3, [sp, #16]
 801d7f4:	9307      	str	r3, [sp, #28]
 801d7f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d7fa:	931a      	str	r3, [sp, #104]	; 0x68
 801d7fc:	4654      	mov	r4, sl
 801d7fe:	2205      	movs	r2, #5
 801d800:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d804:	4851      	ldr	r0, [pc, #324]	; (801d94c <_svfiprintf_r+0x1ec>)
 801d806:	f7e2 fceb 	bl	80001e0 <memchr>
 801d80a:	9a04      	ldr	r2, [sp, #16]
 801d80c:	b9d8      	cbnz	r0, 801d846 <_svfiprintf_r+0xe6>
 801d80e:	06d0      	lsls	r0, r2, #27
 801d810:	bf44      	itt	mi
 801d812:	2320      	movmi	r3, #32
 801d814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d818:	0711      	lsls	r1, r2, #28
 801d81a:	bf44      	itt	mi
 801d81c:	232b      	movmi	r3, #43	; 0x2b
 801d81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d822:	f89a 3000 	ldrb.w	r3, [sl]
 801d826:	2b2a      	cmp	r3, #42	; 0x2a
 801d828:	d015      	beq.n	801d856 <_svfiprintf_r+0xf6>
 801d82a:	9a07      	ldr	r2, [sp, #28]
 801d82c:	4654      	mov	r4, sl
 801d82e:	2000      	movs	r0, #0
 801d830:	f04f 0c0a 	mov.w	ip, #10
 801d834:	4621      	mov	r1, r4
 801d836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d83a:	3b30      	subs	r3, #48	; 0x30
 801d83c:	2b09      	cmp	r3, #9
 801d83e:	d94e      	bls.n	801d8de <_svfiprintf_r+0x17e>
 801d840:	b1b0      	cbz	r0, 801d870 <_svfiprintf_r+0x110>
 801d842:	9207      	str	r2, [sp, #28]
 801d844:	e014      	b.n	801d870 <_svfiprintf_r+0x110>
 801d846:	eba0 0308 	sub.w	r3, r0, r8
 801d84a:	fa09 f303 	lsl.w	r3, r9, r3
 801d84e:	4313      	orrs	r3, r2
 801d850:	9304      	str	r3, [sp, #16]
 801d852:	46a2      	mov	sl, r4
 801d854:	e7d2      	b.n	801d7fc <_svfiprintf_r+0x9c>
 801d856:	9b03      	ldr	r3, [sp, #12]
 801d858:	1d19      	adds	r1, r3, #4
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	9103      	str	r1, [sp, #12]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	bfbb      	ittet	lt
 801d862:	425b      	neglt	r3, r3
 801d864:	f042 0202 	orrlt.w	r2, r2, #2
 801d868:	9307      	strge	r3, [sp, #28]
 801d86a:	9307      	strlt	r3, [sp, #28]
 801d86c:	bfb8      	it	lt
 801d86e:	9204      	strlt	r2, [sp, #16]
 801d870:	7823      	ldrb	r3, [r4, #0]
 801d872:	2b2e      	cmp	r3, #46	; 0x2e
 801d874:	d10c      	bne.n	801d890 <_svfiprintf_r+0x130>
 801d876:	7863      	ldrb	r3, [r4, #1]
 801d878:	2b2a      	cmp	r3, #42	; 0x2a
 801d87a:	d135      	bne.n	801d8e8 <_svfiprintf_r+0x188>
 801d87c:	9b03      	ldr	r3, [sp, #12]
 801d87e:	1d1a      	adds	r2, r3, #4
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	9203      	str	r2, [sp, #12]
 801d884:	2b00      	cmp	r3, #0
 801d886:	bfb8      	it	lt
 801d888:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d88c:	3402      	adds	r4, #2
 801d88e:	9305      	str	r3, [sp, #20]
 801d890:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d95c <_svfiprintf_r+0x1fc>
 801d894:	7821      	ldrb	r1, [r4, #0]
 801d896:	2203      	movs	r2, #3
 801d898:	4650      	mov	r0, sl
 801d89a:	f7e2 fca1 	bl	80001e0 <memchr>
 801d89e:	b140      	cbz	r0, 801d8b2 <_svfiprintf_r+0x152>
 801d8a0:	2340      	movs	r3, #64	; 0x40
 801d8a2:	eba0 000a 	sub.w	r0, r0, sl
 801d8a6:	fa03 f000 	lsl.w	r0, r3, r0
 801d8aa:	9b04      	ldr	r3, [sp, #16]
 801d8ac:	4303      	orrs	r3, r0
 801d8ae:	3401      	adds	r4, #1
 801d8b0:	9304      	str	r3, [sp, #16]
 801d8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8b6:	4826      	ldr	r0, [pc, #152]	; (801d950 <_svfiprintf_r+0x1f0>)
 801d8b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d8bc:	2206      	movs	r2, #6
 801d8be:	f7e2 fc8f 	bl	80001e0 <memchr>
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	d038      	beq.n	801d938 <_svfiprintf_r+0x1d8>
 801d8c6:	4b23      	ldr	r3, [pc, #140]	; (801d954 <_svfiprintf_r+0x1f4>)
 801d8c8:	bb1b      	cbnz	r3, 801d912 <_svfiprintf_r+0x1b2>
 801d8ca:	9b03      	ldr	r3, [sp, #12]
 801d8cc:	3307      	adds	r3, #7
 801d8ce:	f023 0307 	bic.w	r3, r3, #7
 801d8d2:	3308      	adds	r3, #8
 801d8d4:	9303      	str	r3, [sp, #12]
 801d8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8d8:	4433      	add	r3, r6
 801d8da:	9309      	str	r3, [sp, #36]	; 0x24
 801d8dc:	e767      	b.n	801d7ae <_svfiprintf_r+0x4e>
 801d8de:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8e2:	460c      	mov	r4, r1
 801d8e4:	2001      	movs	r0, #1
 801d8e6:	e7a5      	b.n	801d834 <_svfiprintf_r+0xd4>
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	3401      	adds	r4, #1
 801d8ec:	9305      	str	r3, [sp, #20]
 801d8ee:	4619      	mov	r1, r3
 801d8f0:	f04f 0c0a 	mov.w	ip, #10
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8fa:	3a30      	subs	r2, #48	; 0x30
 801d8fc:	2a09      	cmp	r2, #9
 801d8fe:	d903      	bls.n	801d908 <_svfiprintf_r+0x1a8>
 801d900:	2b00      	cmp	r3, #0
 801d902:	d0c5      	beq.n	801d890 <_svfiprintf_r+0x130>
 801d904:	9105      	str	r1, [sp, #20]
 801d906:	e7c3      	b.n	801d890 <_svfiprintf_r+0x130>
 801d908:	fb0c 2101 	mla	r1, ip, r1, r2
 801d90c:	4604      	mov	r4, r0
 801d90e:	2301      	movs	r3, #1
 801d910:	e7f0      	b.n	801d8f4 <_svfiprintf_r+0x194>
 801d912:	ab03      	add	r3, sp, #12
 801d914:	9300      	str	r3, [sp, #0]
 801d916:	462a      	mov	r2, r5
 801d918:	4b0f      	ldr	r3, [pc, #60]	; (801d958 <_svfiprintf_r+0x1f8>)
 801d91a:	a904      	add	r1, sp, #16
 801d91c:	4638      	mov	r0, r7
 801d91e:	f7fc fa07 	bl	8019d30 <_printf_float>
 801d922:	1c42      	adds	r2, r0, #1
 801d924:	4606      	mov	r6, r0
 801d926:	d1d6      	bne.n	801d8d6 <_svfiprintf_r+0x176>
 801d928:	89ab      	ldrh	r3, [r5, #12]
 801d92a:	065b      	lsls	r3, r3, #25
 801d92c:	f53f af2c 	bmi.w	801d788 <_svfiprintf_r+0x28>
 801d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d932:	b01d      	add	sp, #116	; 0x74
 801d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d938:	ab03      	add	r3, sp, #12
 801d93a:	9300      	str	r3, [sp, #0]
 801d93c:	462a      	mov	r2, r5
 801d93e:	4b06      	ldr	r3, [pc, #24]	; (801d958 <_svfiprintf_r+0x1f8>)
 801d940:	a904      	add	r1, sp, #16
 801d942:	4638      	mov	r0, r7
 801d944:	f7fc fc98 	bl	801a278 <_printf_i>
 801d948:	e7eb      	b.n	801d922 <_svfiprintf_r+0x1c2>
 801d94a:	bf00      	nop
 801d94c:	080206ac 	.word	0x080206ac
 801d950:	080206b6 	.word	0x080206b6
 801d954:	08019d31 	.word	0x08019d31
 801d958:	0801d6a9 	.word	0x0801d6a9
 801d95c:	080206b2 	.word	0x080206b2

0801d960 <_read_r>:
 801d960:	b538      	push	{r3, r4, r5, lr}
 801d962:	4d07      	ldr	r5, [pc, #28]	; (801d980 <_read_r+0x20>)
 801d964:	4604      	mov	r4, r0
 801d966:	4608      	mov	r0, r1
 801d968:	4611      	mov	r1, r2
 801d96a:	2200      	movs	r2, #0
 801d96c:	602a      	str	r2, [r5, #0]
 801d96e:	461a      	mov	r2, r3
 801d970:	f7ef face 	bl	800cf10 <_read>
 801d974:	1c43      	adds	r3, r0, #1
 801d976:	d102      	bne.n	801d97e <_read_r+0x1e>
 801d978:	682b      	ldr	r3, [r5, #0]
 801d97a:	b103      	cbz	r3, 801d97e <_read_r+0x1e>
 801d97c:	6023      	str	r3, [r4, #0]
 801d97e:	bd38      	pop	{r3, r4, r5, pc}
 801d980:	2000a6f8 	.word	0x2000a6f8
 801d984:	00000000 	.word	0x00000000

0801d988 <nan>:
 801d988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d990 <nan+0x8>
 801d98c:	4770      	bx	lr
 801d98e:	bf00      	nop
 801d990:	00000000 	.word	0x00000000
 801d994:	7ff80000 	.word	0x7ff80000

0801d998 <finitef>:
 801d998:	b082      	sub	sp, #8
 801d99a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d99e:	9801      	ldr	r0, [sp, #4]
 801d9a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d9a4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801d9a8:	bfac      	ite	ge
 801d9aa:	2000      	movge	r0, #0
 801d9ac:	2001      	movlt	r0, #1
 801d9ae:	b002      	add	sp, #8
 801d9b0:	4770      	bx	lr

0801d9b2 <strncmp>:
 801d9b2:	b510      	push	{r4, lr}
 801d9b4:	b16a      	cbz	r2, 801d9d2 <strncmp+0x20>
 801d9b6:	3901      	subs	r1, #1
 801d9b8:	1884      	adds	r4, r0, r2
 801d9ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d9be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d9c2:	4293      	cmp	r3, r2
 801d9c4:	d103      	bne.n	801d9ce <strncmp+0x1c>
 801d9c6:	42a0      	cmp	r0, r4
 801d9c8:	d001      	beq.n	801d9ce <strncmp+0x1c>
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d1f5      	bne.n	801d9ba <strncmp+0x8>
 801d9ce:	1a98      	subs	r0, r3, r2
 801d9d0:	bd10      	pop	{r4, pc}
 801d9d2:	4610      	mov	r0, r2
 801d9d4:	e7fc      	b.n	801d9d0 <strncmp+0x1e>

0801d9d6 <__ascii_wctomb>:
 801d9d6:	b149      	cbz	r1, 801d9ec <__ascii_wctomb+0x16>
 801d9d8:	2aff      	cmp	r2, #255	; 0xff
 801d9da:	bf85      	ittet	hi
 801d9dc:	238a      	movhi	r3, #138	; 0x8a
 801d9de:	6003      	strhi	r3, [r0, #0]
 801d9e0:	700a      	strbls	r2, [r1, #0]
 801d9e2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d9e6:	bf98      	it	ls
 801d9e8:	2001      	movls	r0, #1
 801d9ea:	4770      	bx	lr
 801d9ec:	4608      	mov	r0, r1
 801d9ee:	4770      	bx	lr

0801d9f0 <__assert_func>:
 801d9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d9f2:	4614      	mov	r4, r2
 801d9f4:	461a      	mov	r2, r3
 801d9f6:	4b09      	ldr	r3, [pc, #36]	; (801da1c <__assert_func+0x2c>)
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	4605      	mov	r5, r0
 801d9fc:	68d8      	ldr	r0, [r3, #12]
 801d9fe:	b14c      	cbz	r4, 801da14 <__assert_func+0x24>
 801da00:	4b07      	ldr	r3, [pc, #28]	; (801da20 <__assert_func+0x30>)
 801da02:	9100      	str	r1, [sp, #0]
 801da04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da08:	4906      	ldr	r1, [pc, #24]	; (801da24 <__assert_func+0x34>)
 801da0a:	462b      	mov	r3, r5
 801da0c:	f000 f9a6 	bl	801dd5c <fiprintf>
 801da10:	f000 fc14 	bl	801e23c <abort>
 801da14:	4b04      	ldr	r3, [pc, #16]	; (801da28 <__assert_func+0x38>)
 801da16:	461c      	mov	r4, r3
 801da18:	e7f3      	b.n	801da02 <__assert_func+0x12>
 801da1a:	bf00      	nop
 801da1c:	200000c4 	.word	0x200000c4
 801da20:	080206bd 	.word	0x080206bd
 801da24:	080206ca 	.word	0x080206ca
 801da28:	080206f8 	.word	0x080206f8

0801da2c <__sflush_r>:
 801da2c:	898a      	ldrh	r2, [r1, #12]
 801da2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da32:	4605      	mov	r5, r0
 801da34:	0710      	lsls	r0, r2, #28
 801da36:	460c      	mov	r4, r1
 801da38:	d458      	bmi.n	801daec <__sflush_r+0xc0>
 801da3a:	684b      	ldr	r3, [r1, #4]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	dc05      	bgt.n	801da4c <__sflush_r+0x20>
 801da40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801da42:	2b00      	cmp	r3, #0
 801da44:	dc02      	bgt.n	801da4c <__sflush_r+0x20>
 801da46:	2000      	movs	r0, #0
 801da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da4e:	2e00      	cmp	r6, #0
 801da50:	d0f9      	beq.n	801da46 <__sflush_r+0x1a>
 801da52:	2300      	movs	r3, #0
 801da54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da58:	682f      	ldr	r7, [r5, #0]
 801da5a:	602b      	str	r3, [r5, #0]
 801da5c:	d032      	beq.n	801dac4 <__sflush_r+0x98>
 801da5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da60:	89a3      	ldrh	r3, [r4, #12]
 801da62:	075a      	lsls	r2, r3, #29
 801da64:	d505      	bpl.n	801da72 <__sflush_r+0x46>
 801da66:	6863      	ldr	r3, [r4, #4]
 801da68:	1ac0      	subs	r0, r0, r3
 801da6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da6c:	b10b      	cbz	r3, 801da72 <__sflush_r+0x46>
 801da6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da70:	1ac0      	subs	r0, r0, r3
 801da72:	2300      	movs	r3, #0
 801da74:	4602      	mov	r2, r0
 801da76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da78:	6a21      	ldr	r1, [r4, #32]
 801da7a:	4628      	mov	r0, r5
 801da7c:	47b0      	blx	r6
 801da7e:	1c43      	adds	r3, r0, #1
 801da80:	89a3      	ldrh	r3, [r4, #12]
 801da82:	d106      	bne.n	801da92 <__sflush_r+0x66>
 801da84:	6829      	ldr	r1, [r5, #0]
 801da86:	291d      	cmp	r1, #29
 801da88:	d82c      	bhi.n	801dae4 <__sflush_r+0xb8>
 801da8a:	4a2a      	ldr	r2, [pc, #168]	; (801db34 <__sflush_r+0x108>)
 801da8c:	40ca      	lsrs	r2, r1
 801da8e:	07d6      	lsls	r6, r2, #31
 801da90:	d528      	bpl.n	801dae4 <__sflush_r+0xb8>
 801da92:	2200      	movs	r2, #0
 801da94:	6062      	str	r2, [r4, #4]
 801da96:	04d9      	lsls	r1, r3, #19
 801da98:	6922      	ldr	r2, [r4, #16]
 801da9a:	6022      	str	r2, [r4, #0]
 801da9c:	d504      	bpl.n	801daa8 <__sflush_r+0x7c>
 801da9e:	1c42      	adds	r2, r0, #1
 801daa0:	d101      	bne.n	801daa6 <__sflush_r+0x7a>
 801daa2:	682b      	ldr	r3, [r5, #0]
 801daa4:	b903      	cbnz	r3, 801daa8 <__sflush_r+0x7c>
 801daa6:	6560      	str	r0, [r4, #84]	; 0x54
 801daa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801daaa:	602f      	str	r7, [r5, #0]
 801daac:	2900      	cmp	r1, #0
 801daae:	d0ca      	beq.n	801da46 <__sflush_r+0x1a>
 801dab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dab4:	4299      	cmp	r1, r3
 801dab6:	d002      	beq.n	801dabe <__sflush_r+0x92>
 801dab8:	4628      	mov	r0, r5
 801daba:	f7fb ffef 	bl	8019a9c <_free_r>
 801dabe:	2000      	movs	r0, #0
 801dac0:	6360      	str	r0, [r4, #52]	; 0x34
 801dac2:	e7c1      	b.n	801da48 <__sflush_r+0x1c>
 801dac4:	6a21      	ldr	r1, [r4, #32]
 801dac6:	2301      	movs	r3, #1
 801dac8:	4628      	mov	r0, r5
 801daca:	47b0      	blx	r6
 801dacc:	1c41      	adds	r1, r0, #1
 801dace:	d1c7      	bne.n	801da60 <__sflush_r+0x34>
 801dad0:	682b      	ldr	r3, [r5, #0]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d0c4      	beq.n	801da60 <__sflush_r+0x34>
 801dad6:	2b1d      	cmp	r3, #29
 801dad8:	d001      	beq.n	801dade <__sflush_r+0xb2>
 801dada:	2b16      	cmp	r3, #22
 801dadc:	d101      	bne.n	801dae2 <__sflush_r+0xb6>
 801dade:	602f      	str	r7, [r5, #0]
 801dae0:	e7b1      	b.n	801da46 <__sflush_r+0x1a>
 801dae2:	89a3      	ldrh	r3, [r4, #12]
 801dae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dae8:	81a3      	strh	r3, [r4, #12]
 801daea:	e7ad      	b.n	801da48 <__sflush_r+0x1c>
 801daec:	690f      	ldr	r7, [r1, #16]
 801daee:	2f00      	cmp	r7, #0
 801daf0:	d0a9      	beq.n	801da46 <__sflush_r+0x1a>
 801daf2:	0793      	lsls	r3, r2, #30
 801daf4:	680e      	ldr	r6, [r1, #0]
 801daf6:	bf08      	it	eq
 801daf8:	694b      	ldreq	r3, [r1, #20]
 801dafa:	600f      	str	r7, [r1, #0]
 801dafc:	bf18      	it	ne
 801dafe:	2300      	movne	r3, #0
 801db00:	eba6 0807 	sub.w	r8, r6, r7
 801db04:	608b      	str	r3, [r1, #8]
 801db06:	f1b8 0f00 	cmp.w	r8, #0
 801db0a:	dd9c      	ble.n	801da46 <__sflush_r+0x1a>
 801db0c:	6a21      	ldr	r1, [r4, #32]
 801db0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801db10:	4643      	mov	r3, r8
 801db12:	463a      	mov	r2, r7
 801db14:	4628      	mov	r0, r5
 801db16:	47b0      	blx	r6
 801db18:	2800      	cmp	r0, #0
 801db1a:	dc06      	bgt.n	801db2a <__sflush_r+0xfe>
 801db1c:	89a3      	ldrh	r3, [r4, #12]
 801db1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db22:	81a3      	strh	r3, [r4, #12]
 801db24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db28:	e78e      	b.n	801da48 <__sflush_r+0x1c>
 801db2a:	4407      	add	r7, r0
 801db2c:	eba8 0800 	sub.w	r8, r8, r0
 801db30:	e7e9      	b.n	801db06 <__sflush_r+0xda>
 801db32:	bf00      	nop
 801db34:	20400001 	.word	0x20400001

0801db38 <_fflush_r>:
 801db38:	b538      	push	{r3, r4, r5, lr}
 801db3a:	690b      	ldr	r3, [r1, #16]
 801db3c:	4605      	mov	r5, r0
 801db3e:	460c      	mov	r4, r1
 801db40:	b913      	cbnz	r3, 801db48 <_fflush_r+0x10>
 801db42:	2500      	movs	r5, #0
 801db44:	4628      	mov	r0, r5
 801db46:	bd38      	pop	{r3, r4, r5, pc}
 801db48:	b118      	cbz	r0, 801db52 <_fflush_r+0x1a>
 801db4a:	6983      	ldr	r3, [r0, #24]
 801db4c:	b90b      	cbnz	r3, 801db52 <_fflush_r+0x1a>
 801db4e:	f000 f887 	bl	801dc60 <__sinit>
 801db52:	4b14      	ldr	r3, [pc, #80]	; (801dba4 <_fflush_r+0x6c>)
 801db54:	429c      	cmp	r4, r3
 801db56:	d11b      	bne.n	801db90 <_fflush_r+0x58>
 801db58:	686c      	ldr	r4, [r5, #4]
 801db5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d0ef      	beq.n	801db42 <_fflush_r+0xa>
 801db62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801db64:	07d0      	lsls	r0, r2, #31
 801db66:	d404      	bmi.n	801db72 <_fflush_r+0x3a>
 801db68:	0599      	lsls	r1, r3, #22
 801db6a:	d402      	bmi.n	801db72 <_fflush_r+0x3a>
 801db6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db6e:	f000 f927 	bl	801ddc0 <__retarget_lock_acquire_recursive>
 801db72:	4628      	mov	r0, r5
 801db74:	4621      	mov	r1, r4
 801db76:	f7ff ff59 	bl	801da2c <__sflush_r>
 801db7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db7c:	07da      	lsls	r2, r3, #31
 801db7e:	4605      	mov	r5, r0
 801db80:	d4e0      	bmi.n	801db44 <_fflush_r+0xc>
 801db82:	89a3      	ldrh	r3, [r4, #12]
 801db84:	059b      	lsls	r3, r3, #22
 801db86:	d4dd      	bmi.n	801db44 <_fflush_r+0xc>
 801db88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db8a:	f000 f91a 	bl	801ddc2 <__retarget_lock_release_recursive>
 801db8e:	e7d9      	b.n	801db44 <_fflush_r+0xc>
 801db90:	4b05      	ldr	r3, [pc, #20]	; (801dba8 <_fflush_r+0x70>)
 801db92:	429c      	cmp	r4, r3
 801db94:	d101      	bne.n	801db9a <_fflush_r+0x62>
 801db96:	68ac      	ldr	r4, [r5, #8]
 801db98:	e7df      	b.n	801db5a <_fflush_r+0x22>
 801db9a:	4b04      	ldr	r3, [pc, #16]	; (801dbac <_fflush_r+0x74>)
 801db9c:	429c      	cmp	r4, r3
 801db9e:	bf08      	it	eq
 801dba0:	68ec      	ldreq	r4, [r5, #12]
 801dba2:	e7da      	b.n	801db5a <_fflush_r+0x22>
 801dba4:	0802071c 	.word	0x0802071c
 801dba8:	0802073c 	.word	0x0802073c
 801dbac:	080206fc 	.word	0x080206fc

0801dbb0 <std>:
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	b510      	push	{r4, lr}
 801dbb4:	4604      	mov	r4, r0
 801dbb6:	e9c0 3300 	strd	r3, r3, [r0]
 801dbba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbbe:	6083      	str	r3, [r0, #8]
 801dbc0:	8181      	strh	r1, [r0, #12]
 801dbc2:	6643      	str	r3, [r0, #100]	; 0x64
 801dbc4:	81c2      	strh	r2, [r0, #14]
 801dbc6:	6183      	str	r3, [r0, #24]
 801dbc8:	4619      	mov	r1, r3
 801dbca:	2208      	movs	r2, #8
 801dbcc:	305c      	adds	r0, #92	; 0x5c
 801dbce:	f7fb ff5d 	bl	8019a8c <memset>
 801dbd2:	4b05      	ldr	r3, [pc, #20]	; (801dbe8 <std+0x38>)
 801dbd4:	6263      	str	r3, [r4, #36]	; 0x24
 801dbd6:	4b05      	ldr	r3, [pc, #20]	; (801dbec <std+0x3c>)
 801dbd8:	62a3      	str	r3, [r4, #40]	; 0x28
 801dbda:	4b05      	ldr	r3, [pc, #20]	; (801dbf0 <std+0x40>)
 801dbdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dbde:	4b05      	ldr	r3, [pc, #20]	; (801dbf4 <std+0x44>)
 801dbe0:	6224      	str	r4, [r4, #32]
 801dbe2:	6323      	str	r3, [r4, #48]	; 0x30
 801dbe4:	bd10      	pop	{r4, pc}
 801dbe6:	bf00      	nop
 801dbe8:	0801aa45 	.word	0x0801aa45
 801dbec:	0801aa67 	.word	0x0801aa67
 801dbf0:	0801aa9f 	.word	0x0801aa9f
 801dbf4:	0801aac3 	.word	0x0801aac3

0801dbf8 <_cleanup_r>:
 801dbf8:	4901      	ldr	r1, [pc, #4]	; (801dc00 <_cleanup_r+0x8>)
 801dbfa:	f000 b8c1 	b.w	801dd80 <_fwalk_reent>
 801dbfe:	bf00      	nop
 801dc00:	0801db39 	.word	0x0801db39

0801dc04 <__sfmoreglue>:
 801dc04:	b570      	push	{r4, r5, r6, lr}
 801dc06:	1e4a      	subs	r2, r1, #1
 801dc08:	2568      	movs	r5, #104	; 0x68
 801dc0a:	4355      	muls	r5, r2
 801dc0c:	460e      	mov	r6, r1
 801dc0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dc12:	f7fb ff93 	bl	8019b3c <_malloc_r>
 801dc16:	4604      	mov	r4, r0
 801dc18:	b140      	cbz	r0, 801dc2c <__sfmoreglue+0x28>
 801dc1a:	2100      	movs	r1, #0
 801dc1c:	e9c0 1600 	strd	r1, r6, [r0]
 801dc20:	300c      	adds	r0, #12
 801dc22:	60a0      	str	r0, [r4, #8]
 801dc24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc28:	f7fb ff30 	bl	8019a8c <memset>
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	bd70      	pop	{r4, r5, r6, pc}

0801dc30 <__sfp_lock_acquire>:
 801dc30:	4801      	ldr	r0, [pc, #4]	; (801dc38 <__sfp_lock_acquire+0x8>)
 801dc32:	f000 b8c5 	b.w	801ddc0 <__retarget_lock_acquire_recursive>
 801dc36:	bf00      	nop
 801dc38:	2000a704 	.word	0x2000a704

0801dc3c <__sfp_lock_release>:
 801dc3c:	4801      	ldr	r0, [pc, #4]	; (801dc44 <__sfp_lock_release+0x8>)
 801dc3e:	f000 b8c0 	b.w	801ddc2 <__retarget_lock_release_recursive>
 801dc42:	bf00      	nop
 801dc44:	2000a704 	.word	0x2000a704

0801dc48 <__sinit_lock_acquire>:
 801dc48:	4801      	ldr	r0, [pc, #4]	; (801dc50 <__sinit_lock_acquire+0x8>)
 801dc4a:	f000 b8b9 	b.w	801ddc0 <__retarget_lock_acquire_recursive>
 801dc4e:	bf00      	nop
 801dc50:	2000a6ff 	.word	0x2000a6ff

0801dc54 <__sinit_lock_release>:
 801dc54:	4801      	ldr	r0, [pc, #4]	; (801dc5c <__sinit_lock_release+0x8>)
 801dc56:	f000 b8b4 	b.w	801ddc2 <__retarget_lock_release_recursive>
 801dc5a:	bf00      	nop
 801dc5c:	2000a6ff 	.word	0x2000a6ff

0801dc60 <__sinit>:
 801dc60:	b510      	push	{r4, lr}
 801dc62:	4604      	mov	r4, r0
 801dc64:	f7ff fff0 	bl	801dc48 <__sinit_lock_acquire>
 801dc68:	69a3      	ldr	r3, [r4, #24]
 801dc6a:	b11b      	cbz	r3, 801dc74 <__sinit+0x14>
 801dc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc70:	f7ff bff0 	b.w	801dc54 <__sinit_lock_release>
 801dc74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dc78:	6523      	str	r3, [r4, #80]	; 0x50
 801dc7a:	4b13      	ldr	r3, [pc, #76]	; (801dcc8 <__sinit+0x68>)
 801dc7c:	4a13      	ldr	r2, [pc, #76]	; (801dccc <__sinit+0x6c>)
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	62a2      	str	r2, [r4, #40]	; 0x28
 801dc82:	42a3      	cmp	r3, r4
 801dc84:	bf04      	itt	eq
 801dc86:	2301      	moveq	r3, #1
 801dc88:	61a3      	streq	r3, [r4, #24]
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	f000 f820 	bl	801dcd0 <__sfp>
 801dc90:	6060      	str	r0, [r4, #4]
 801dc92:	4620      	mov	r0, r4
 801dc94:	f000 f81c 	bl	801dcd0 <__sfp>
 801dc98:	60a0      	str	r0, [r4, #8]
 801dc9a:	4620      	mov	r0, r4
 801dc9c:	f000 f818 	bl	801dcd0 <__sfp>
 801dca0:	2200      	movs	r2, #0
 801dca2:	60e0      	str	r0, [r4, #12]
 801dca4:	2104      	movs	r1, #4
 801dca6:	6860      	ldr	r0, [r4, #4]
 801dca8:	f7ff ff82 	bl	801dbb0 <std>
 801dcac:	68a0      	ldr	r0, [r4, #8]
 801dcae:	2201      	movs	r2, #1
 801dcb0:	2109      	movs	r1, #9
 801dcb2:	f7ff ff7d 	bl	801dbb0 <std>
 801dcb6:	68e0      	ldr	r0, [r4, #12]
 801dcb8:	2202      	movs	r2, #2
 801dcba:	2112      	movs	r1, #18
 801dcbc:	f7ff ff78 	bl	801dbb0 <std>
 801dcc0:	2301      	movs	r3, #1
 801dcc2:	61a3      	str	r3, [r4, #24]
 801dcc4:	e7d2      	b.n	801dc6c <__sinit+0xc>
 801dcc6:	bf00      	nop
 801dcc8:	080202a4 	.word	0x080202a4
 801dccc:	0801dbf9 	.word	0x0801dbf9

0801dcd0 <__sfp>:
 801dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcd2:	4607      	mov	r7, r0
 801dcd4:	f7ff ffac 	bl	801dc30 <__sfp_lock_acquire>
 801dcd8:	4b1e      	ldr	r3, [pc, #120]	; (801dd54 <__sfp+0x84>)
 801dcda:	681e      	ldr	r6, [r3, #0]
 801dcdc:	69b3      	ldr	r3, [r6, #24]
 801dcde:	b913      	cbnz	r3, 801dce6 <__sfp+0x16>
 801dce0:	4630      	mov	r0, r6
 801dce2:	f7ff ffbd 	bl	801dc60 <__sinit>
 801dce6:	3648      	adds	r6, #72	; 0x48
 801dce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dcec:	3b01      	subs	r3, #1
 801dcee:	d503      	bpl.n	801dcf8 <__sfp+0x28>
 801dcf0:	6833      	ldr	r3, [r6, #0]
 801dcf2:	b30b      	cbz	r3, 801dd38 <__sfp+0x68>
 801dcf4:	6836      	ldr	r6, [r6, #0]
 801dcf6:	e7f7      	b.n	801dce8 <__sfp+0x18>
 801dcf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dcfc:	b9d5      	cbnz	r5, 801dd34 <__sfp+0x64>
 801dcfe:	4b16      	ldr	r3, [pc, #88]	; (801dd58 <__sfp+0x88>)
 801dd00:	60e3      	str	r3, [r4, #12]
 801dd02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dd06:	6665      	str	r5, [r4, #100]	; 0x64
 801dd08:	f000 f859 	bl	801ddbe <__retarget_lock_init_recursive>
 801dd0c:	f7ff ff96 	bl	801dc3c <__sfp_lock_release>
 801dd10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dd14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dd18:	6025      	str	r5, [r4, #0]
 801dd1a:	61a5      	str	r5, [r4, #24]
 801dd1c:	2208      	movs	r2, #8
 801dd1e:	4629      	mov	r1, r5
 801dd20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd24:	f7fb feb2 	bl	8019a8c <memset>
 801dd28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd30:	4620      	mov	r0, r4
 801dd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd34:	3468      	adds	r4, #104	; 0x68
 801dd36:	e7d9      	b.n	801dcec <__sfp+0x1c>
 801dd38:	2104      	movs	r1, #4
 801dd3a:	4638      	mov	r0, r7
 801dd3c:	f7ff ff62 	bl	801dc04 <__sfmoreglue>
 801dd40:	4604      	mov	r4, r0
 801dd42:	6030      	str	r0, [r6, #0]
 801dd44:	2800      	cmp	r0, #0
 801dd46:	d1d5      	bne.n	801dcf4 <__sfp+0x24>
 801dd48:	f7ff ff78 	bl	801dc3c <__sfp_lock_release>
 801dd4c:	230c      	movs	r3, #12
 801dd4e:	603b      	str	r3, [r7, #0]
 801dd50:	e7ee      	b.n	801dd30 <__sfp+0x60>
 801dd52:	bf00      	nop
 801dd54:	080202a4 	.word	0x080202a4
 801dd58:	ffff0001 	.word	0xffff0001

0801dd5c <fiprintf>:
 801dd5c:	b40e      	push	{r1, r2, r3}
 801dd5e:	b503      	push	{r0, r1, lr}
 801dd60:	4601      	mov	r1, r0
 801dd62:	ab03      	add	r3, sp, #12
 801dd64:	4805      	ldr	r0, [pc, #20]	; (801dd7c <fiprintf+0x20>)
 801dd66:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd6a:	6800      	ldr	r0, [r0, #0]
 801dd6c:	9301      	str	r3, [sp, #4]
 801dd6e:	f000 f875 	bl	801de5c <_vfiprintf_r>
 801dd72:	b002      	add	sp, #8
 801dd74:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd78:	b003      	add	sp, #12
 801dd7a:	4770      	bx	lr
 801dd7c:	200000c4 	.word	0x200000c4

0801dd80 <_fwalk_reent>:
 801dd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd84:	4606      	mov	r6, r0
 801dd86:	4688      	mov	r8, r1
 801dd88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dd8c:	2700      	movs	r7, #0
 801dd8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd92:	f1b9 0901 	subs.w	r9, r9, #1
 801dd96:	d505      	bpl.n	801dda4 <_fwalk_reent+0x24>
 801dd98:	6824      	ldr	r4, [r4, #0]
 801dd9a:	2c00      	cmp	r4, #0
 801dd9c:	d1f7      	bne.n	801dd8e <_fwalk_reent+0xe>
 801dd9e:	4638      	mov	r0, r7
 801dda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dda4:	89ab      	ldrh	r3, [r5, #12]
 801dda6:	2b01      	cmp	r3, #1
 801dda8:	d907      	bls.n	801ddba <_fwalk_reent+0x3a>
 801ddaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ddae:	3301      	adds	r3, #1
 801ddb0:	d003      	beq.n	801ddba <_fwalk_reent+0x3a>
 801ddb2:	4629      	mov	r1, r5
 801ddb4:	4630      	mov	r0, r6
 801ddb6:	47c0      	blx	r8
 801ddb8:	4307      	orrs	r7, r0
 801ddba:	3568      	adds	r5, #104	; 0x68
 801ddbc:	e7e9      	b.n	801dd92 <_fwalk_reent+0x12>

0801ddbe <__retarget_lock_init_recursive>:
 801ddbe:	4770      	bx	lr

0801ddc0 <__retarget_lock_acquire_recursive>:
 801ddc0:	4770      	bx	lr

0801ddc2 <__retarget_lock_release_recursive>:
 801ddc2:	4770      	bx	lr

0801ddc4 <memmove>:
 801ddc4:	4288      	cmp	r0, r1
 801ddc6:	b510      	push	{r4, lr}
 801ddc8:	eb01 0402 	add.w	r4, r1, r2
 801ddcc:	d902      	bls.n	801ddd4 <memmove+0x10>
 801ddce:	4284      	cmp	r4, r0
 801ddd0:	4623      	mov	r3, r4
 801ddd2:	d807      	bhi.n	801dde4 <memmove+0x20>
 801ddd4:	1e43      	subs	r3, r0, #1
 801ddd6:	42a1      	cmp	r1, r4
 801ddd8:	d008      	beq.n	801ddec <memmove+0x28>
 801ddda:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ddde:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dde2:	e7f8      	b.n	801ddd6 <memmove+0x12>
 801dde4:	4402      	add	r2, r0
 801dde6:	4601      	mov	r1, r0
 801dde8:	428a      	cmp	r2, r1
 801ddea:	d100      	bne.n	801ddee <memmove+0x2a>
 801ddec:	bd10      	pop	{r4, pc}
 801ddee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ddf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ddf6:	e7f7      	b.n	801dde8 <memmove+0x24>

0801ddf8 <_malloc_usable_size_r>:
 801ddf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddfc:	1f18      	subs	r0, r3, #4
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	bfbc      	itt	lt
 801de02:	580b      	ldrlt	r3, [r1, r0]
 801de04:	18c0      	addlt	r0, r0, r3
 801de06:	4770      	bx	lr

0801de08 <__sfputc_r>:
 801de08:	6893      	ldr	r3, [r2, #8]
 801de0a:	3b01      	subs	r3, #1
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	b410      	push	{r4}
 801de10:	6093      	str	r3, [r2, #8]
 801de12:	da08      	bge.n	801de26 <__sfputc_r+0x1e>
 801de14:	6994      	ldr	r4, [r2, #24]
 801de16:	42a3      	cmp	r3, r4
 801de18:	db01      	blt.n	801de1e <__sfputc_r+0x16>
 801de1a:	290a      	cmp	r1, #10
 801de1c:	d103      	bne.n	801de26 <__sfputc_r+0x1e>
 801de1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de22:	f000 b94b 	b.w	801e0bc <__swbuf_r>
 801de26:	6813      	ldr	r3, [r2, #0]
 801de28:	1c58      	adds	r0, r3, #1
 801de2a:	6010      	str	r0, [r2, #0]
 801de2c:	7019      	strb	r1, [r3, #0]
 801de2e:	4608      	mov	r0, r1
 801de30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de34:	4770      	bx	lr

0801de36 <__sfputs_r>:
 801de36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de38:	4606      	mov	r6, r0
 801de3a:	460f      	mov	r7, r1
 801de3c:	4614      	mov	r4, r2
 801de3e:	18d5      	adds	r5, r2, r3
 801de40:	42ac      	cmp	r4, r5
 801de42:	d101      	bne.n	801de48 <__sfputs_r+0x12>
 801de44:	2000      	movs	r0, #0
 801de46:	e007      	b.n	801de58 <__sfputs_r+0x22>
 801de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de4c:	463a      	mov	r2, r7
 801de4e:	4630      	mov	r0, r6
 801de50:	f7ff ffda 	bl	801de08 <__sfputc_r>
 801de54:	1c43      	adds	r3, r0, #1
 801de56:	d1f3      	bne.n	801de40 <__sfputs_r+0xa>
 801de58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801de5c <_vfiprintf_r>:
 801de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de60:	460d      	mov	r5, r1
 801de62:	b09d      	sub	sp, #116	; 0x74
 801de64:	4614      	mov	r4, r2
 801de66:	4698      	mov	r8, r3
 801de68:	4606      	mov	r6, r0
 801de6a:	b118      	cbz	r0, 801de74 <_vfiprintf_r+0x18>
 801de6c:	6983      	ldr	r3, [r0, #24]
 801de6e:	b90b      	cbnz	r3, 801de74 <_vfiprintf_r+0x18>
 801de70:	f7ff fef6 	bl	801dc60 <__sinit>
 801de74:	4b89      	ldr	r3, [pc, #548]	; (801e09c <_vfiprintf_r+0x240>)
 801de76:	429d      	cmp	r5, r3
 801de78:	d11b      	bne.n	801deb2 <_vfiprintf_r+0x56>
 801de7a:	6875      	ldr	r5, [r6, #4]
 801de7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de7e:	07d9      	lsls	r1, r3, #31
 801de80:	d405      	bmi.n	801de8e <_vfiprintf_r+0x32>
 801de82:	89ab      	ldrh	r3, [r5, #12]
 801de84:	059a      	lsls	r2, r3, #22
 801de86:	d402      	bmi.n	801de8e <_vfiprintf_r+0x32>
 801de88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de8a:	f7ff ff99 	bl	801ddc0 <__retarget_lock_acquire_recursive>
 801de8e:	89ab      	ldrh	r3, [r5, #12]
 801de90:	071b      	lsls	r3, r3, #28
 801de92:	d501      	bpl.n	801de98 <_vfiprintf_r+0x3c>
 801de94:	692b      	ldr	r3, [r5, #16]
 801de96:	b9eb      	cbnz	r3, 801ded4 <_vfiprintf_r+0x78>
 801de98:	4629      	mov	r1, r5
 801de9a:	4630      	mov	r0, r6
 801de9c:	f000 f960 	bl	801e160 <__swsetup_r>
 801dea0:	b1c0      	cbz	r0, 801ded4 <_vfiprintf_r+0x78>
 801dea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dea4:	07dc      	lsls	r4, r3, #31
 801dea6:	d50e      	bpl.n	801dec6 <_vfiprintf_r+0x6a>
 801dea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801deac:	b01d      	add	sp, #116	; 0x74
 801deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deb2:	4b7b      	ldr	r3, [pc, #492]	; (801e0a0 <_vfiprintf_r+0x244>)
 801deb4:	429d      	cmp	r5, r3
 801deb6:	d101      	bne.n	801debc <_vfiprintf_r+0x60>
 801deb8:	68b5      	ldr	r5, [r6, #8]
 801deba:	e7df      	b.n	801de7c <_vfiprintf_r+0x20>
 801debc:	4b79      	ldr	r3, [pc, #484]	; (801e0a4 <_vfiprintf_r+0x248>)
 801debe:	429d      	cmp	r5, r3
 801dec0:	bf08      	it	eq
 801dec2:	68f5      	ldreq	r5, [r6, #12]
 801dec4:	e7da      	b.n	801de7c <_vfiprintf_r+0x20>
 801dec6:	89ab      	ldrh	r3, [r5, #12]
 801dec8:	0598      	lsls	r0, r3, #22
 801deca:	d4ed      	bmi.n	801dea8 <_vfiprintf_r+0x4c>
 801decc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dece:	f7ff ff78 	bl	801ddc2 <__retarget_lock_release_recursive>
 801ded2:	e7e9      	b.n	801dea8 <_vfiprintf_r+0x4c>
 801ded4:	2300      	movs	r3, #0
 801ded6:	9309      	str	r3, [sp, #36]	; 0x24
 801ded8:	2320      	movs	r3, #32
 801deda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dede:	f8cd 800c 	str.w	r8, [sp, #12]
 801dee2:	2330      	movs	r3, #48	; 0x30
 801dee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e0a8 <_vfiprintf_r+0x24c>
 801dee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801deec:	f04f 0901 	mov.w	r9, #1
 801def0:	4623      	mov	r3, r4
 801def2:	469a      	mov	sl, r3
 801def4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801def8:	b10a      	cbz	r2, 801defe <_vfiprintf_r+0xa2>
 801defa:	2a25      	cmp	r2, #37	; 0x25
 801defc:	d1f9      	bne.n	801def2 <_vfiprintf_r+0x96>
 801defe:	ebba 0b04 	subs.w	fp, sl, r4
 801df02:	d00b      	beq.n	801df1c <_vfiprintf_r+0xc0>
 801df04:	465b      	mov	r3, fp
 801df06:	4622      	mov	r2, r4
 801df08:	4629      	mov	r1, r5
 801df0a:	4630      	mov	r0, r6
 801df0c:	f7ff ff93 	bl	801de36 <__sfputs_r>
 801df10:	3001      	adds	r0, #1
 801df12:	f000 80aa 	beq.w	801e06a <_vfiprintf_r+0x20e>
 801df16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df18:	445a      	add	r2, fp
 801df1a:	9209      	str	r2, [sp, #36]	; 0x24
 801df1c:	f89a 3000 	ldrb.w	r3, [sl]
 801df20:	2b00      	cmp	r3, #0
 801df22:	f000 80a2 	beq.w	801e06a <_vfiprintf_r+0x20e>
 801df26:	2300      	movs	r3, #0
 801df28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801df2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df30:	f10a 0a01 	add.w	sl, sl, #1
 801df34:	9304      	str	r3, [sp, #16]
 801df36:	9307      	str	r3, [sp, #28]
 801df38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801df3c:	931a      	str	r3, [sp, #104]	; 0x68
 801df3e:	4654      	mov	r4, sl
 801df40:	2205      	movs	r2, #5
 801df42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df46:	4858      	ldr	r0, [pc, #352]	; (801e0a8 <_vfiprintf_r+0x24c>)
 801df48:	f7e2 f94a 	bl	80001e0 <memchr>
 801df4c:	9a04      	ldr	r2, [sp, #16]
 801df4e:	b9d8      	cbnz	r0, 801df88 <_vfiprintf_r+0x12c>
 801df50:	06d1      	lsls	r1, r2, #27
 801df52:	bf44      	itt	mi
 801df54:	2320      	movmi	r3, #32
 801df56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df5a:	0713      	lsls	r3, r2, #28
 801df5c:	bf44      	itt	mi
 801df5e:	232b      	movmi	r3, #43	; 0x2b
 801df60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df64:	f89a 3000 	ldrb.w	r3, [sl]
 801df68:	2b2a      	cmp	r3, #42	; 0x2a
 801df6a:	d015      	beq.n	801df98 <_vfiprintf_r+0x13c>
 801df6c:	9a07      	ldr	r2, [sp, #28]
 801df6e:	4654      	mov	r4, sl
 801df70:	2000      	movs	r0, #0
 801df72:	f04f 0c0a 	mov.w	ip, #10
 801df76:	4621      	mov	r1, r4
 801df78:	f811 3b01 	ldrb.w	r3, [r1], #1
 801df7c:	3b30      	subs	r3, #48	; 0x30
 801df7e:	2b09      	cmp	r3, #9
 801df80:	d94e      	bls.n	801e020 <_vfiprintf_r+0x1c4>
 801df82:	b1b0      	cbz	r0, 801dfb2 <_vfiprintf_r+0x156>
 801df84:	9207      	str	r2, [sp, #28]
 801df86:	e014      	b.n	801dfb2 <_vfiprintf_r+0x156>
 801df88:	eba0 0308 	sub.w	r3, r0, r8
 801df8c:	fa09 f303 	lsl.w	r3, r9, r3
 801df90:	4313      	orrs	r3, r2
 801df92:	9304      	str	r3, [sp, #16]
 801df94:	46a2      	mov	sl, r4
 801df96:	e7d2      	b.n	801df3e <_vfiprintf_r+0xe2>
 801df98:	9b03      	ldr	r3, [sp, #12]
 801df9a:	1d19      	adds	r1, r3, #4
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	9103      	str	r1, [sp, #12]
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	bfbb      	ittet	lt
 801dfa4:	425b      	neglt	r3, r3
 801dfa6:	f042 0202 	orrlt.w	r2, r2, #2
 801dfaa:	9307      	strge	r3, [sp, #28]
 801dfac:	9307      	strlt	r3, [sp, #28]
 801dfae:	bfb8      	it	lt
 801dfb0:	9204      	strlt	r2, [sp, #16]
 801dfb2:	7823      	ldrb	r3, [r4, #0]
 801dfb4:	2b2e      	cmp	r3, #46	; 0x2e
 801dfb6:	d10c      	bne.n	801dfd2 <_vfiprintf_r+0x176>
 801dfb8:	7863      	ldrb	r3, [r4, #1]
 801dfba:	2b2a      	cmp	r3, #42	; 0x2a
 801dfbc:	d135      	bne.n	801e02a <_vfiprintf_r+0x1ce>
 801dfbe:	9b03      	ldr	r3, [sp, #12]
 801dfc0:	1d1a      	adds	r2, r3, #4
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	9203      	str	r2, [sp, #12]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	bfb8      	it	lt
 801dfca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801dfce:	3402      	adds	r4, #2
 801dfd0:	9305      	str	r3, [sp, #20]
 801dfd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e0b8 <_vfiprintf_r+0x25c>
 801dfd6:	7821      	ldrb	r1, [r4, #0]
 801dfd8:	2203      	movs	r2, #3
 801dfda:	4650      	mov	r0, sl
 801dfdc:	f7e2 f900 	bl	80001e0 <memchr>
 801dfe0:	b140      	cbz	r0, 801dff4 <_vfiprintf_r+0x198>
 801dfe2:	2340      	movs	r3, #64	; 0x40
 801dfe4:	eba0 000a 	sub.w	r0, r0, sl
 801dfe8:	fa03 f000 	lsl.w	r0, r3, r0
 801dfec:	9b04      	ldr	r3, [sp, #16]
 801dfee:	4303      	orrs	r3, r0
 801dff0:	3401      	adds	r4, #1
 801dff2:	9304      	str	r3, [sp, #16]
 801dff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dff8:	482c      	ldr	r0, [pc, #176]	; (801e0ac <_vfiprintf_r+0x250>)
 801dffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dffe:	2206      	movs	r2, #6
 801e000:	f7e2 f8ee 	bl	80001e0 <memchr>
 801e004:	2800      	cmp	r0, #0
 801e006:	d03f      	beq.n	801e088 <_vfiprintf_r+0x22c>
 801e008:	4b29      	ldr	r3, [pc, #164]	; (801e0b0 <_vfiprintf_r+0x254>)
 801e00a:	bb1b      	cbnz	r3, 801e054 <_vfiprintf_r+0x1f8>
 801e00c:	9b03      	ldr	r3, [sp, #12]
 801e00e:	3307      	adds	r3, #7
 801e010:	f023 0307 	bic.w	r3, r3, #7
 801e014:	3308      	adds	r3, #8
 801e016:	9303      	str	r3, [sp, #12]
 801e018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e01a:	443b      	add	r3, r7
 801e01c:	9309      	str	r3, [sp, #36]	; 0x24
 801e01e:	e767      	b.n	801def0 <_vfiprintf_r+0x94>
 801e020:	fb0c 3202 	mla	r2, ip, r2, r3
 801e024:	460c      	mov	r4, r1
 801e026:	2001      	movs	r0, #1
 801e028:	e7a5      	b.n	801df76 <_vfiprintf_r+0x11a>
 801e02a:	2300      	movs	r3, #0
 801e02c:	3401      	adds	r4, #1
 801e02e:	9305      	str	r3, [sp, #20]
 801e030:	4619      	mov	r1, r3
 801e032:	f04f 0c0a 	mov.w	ip, #10
 801e036:	4620      	mov	r0, r4
 801e038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e03c:	3a30      	subs	r2, #48	; 0x30
 801e03e:	2a09      	cmp	r2, #9
 801e040:	d903      	bls.n	801e04a <_vfiprintf_r+0x1ee>
 801e042:	2b00      	cmp	r3, #0
 801e044:	d0c5      	beq.n	801dfd2 <_vfiprintf_r+0x176>
 801e046:	9105      	str	r1, [sp, #20]
 801e048:	e7c3      	b.n	801dfd2 <_vfiprintf_r+0x176>
 801e04a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e04e:	4604      	mov	r4, r0
 801e050:	2301      	movs	r3, #1
 801e052:	e7f0      	b.n	801e036 <_vfiprintf_r+0x1da>
 801e054:	ab03      	add	r3, sp, #12
 801e056:	9300      	str	r3, [sp, #0]
 801e058:	462a      	mov	r2, r5
 801e05a:	4b16      	ldr	r3, [pc, #88]	; (801e0b4 <_vfiprintf_r+0x258>)
 801e05c:	a904      	add	r1, sp, #16
 801e05e:	4630      	mov	r0, r6
 801e060:	f7fb fe66 	bl	8019d30 <_printf_float>
 801e064:	4607      	mov	r7, r0
 801e066:	1c78      	adds	r0, r7, #1
 801e068:	d1d6      	bne.n	801e018 <_vfiprintf_r+0x1bc>
 801e06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e06c:	07d9      	lsls	r1, r3, #31
 801e06e:	d405      	bmi.n	801e07c <_vfiprintf_r+0x220>
 801e070:	89ab      	ldrh	r3, [r5, #12]
 801e072:	059a      	lsls	r2, r3, #22
 801e074:	d402      	bmi.n	801e07c <_vfiprintf_r+0x220>
 801e076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e078:	f7ff fea3 	bl	801ddc2 <__retarget_lock_release_recursive>
 801e07c:	89ab      	ldrh	r3, [r5, #12]
 801e07e:	065b      	lsls	r3, r3, #25
 801e080:	f53f af12 	bmi.w	801dea8 <_vfiprintf_r+0x4c>
 801e084:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e086:	e711      	b.n	801deac <_vfiprintf_r+0x50>
 801e088:	ab03      	add	r3, sp, #12
 801e08a:	9300      	str	r3, [sp, #0]
 801e08c:	462a      	mov	r2, r5
 801e08e:	4b09      	ldr	r3, [pc, #36]	; (801e0b4 <_vfiprintf_r+0x258>)
 801e090:	a904      	add	r1, sp, #16
 801e092:	4630      	mov	r0, r6
 801e094:	f7fc f8f0 	bl	801a278 <_printf_i>
 801e098:	e7e4      	b.n	801e064 <_vfiprintf_r+0x208>
 801e09a:	bf00      	nop
 801e09c:	0802071c 	.word	0x0802071c
 801e0a0:	0802073c 	.word	0x0802073c
 801e0a4:	080206fc 	.word	0x080206fc
 801e0a8:	080206ac 	.word	0x080206ac
 801e0ac:	080206b6 	.word	0x080206b6
 801e0b0:	08019d31 	.word	0x08019d31
 801e0b4:	0801de37 	.word	0x0801de37
 801e0b8:	080206b2 	.word	0x080206b2

0801e0bc <__swbuf_r>:
 801e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0be:	460e      	mov	r6, r1
 801e0c0:	4614      	mov	r4, r2
 801e0c2:	4605      	mov	r5, r0
 801e0c4:	b118      	cbz	r0, 801e0ce <__swbuf_r+0x12>
 801e0c6:	6983      	ldr	r3, [r0, #24]
 801e0c8:	b90b      	cbnz	r3, 801e0ce <__swbuf_r+0x12>
 801e0ca:	f7ff fdc9 	bl	801dc60 <__sinit>
 801e0ce:	4b21      	ldr	r3, [pc, #132]	; (801e154 <__swbuf_r+0x98>)
 801e0d0:	429c      	cmp	r4, r3
 801e0d2:	d12b      	bne.n	801e12c <__swbuf_r+0x70>
 801e0d4:	686c      	ldr	r4, [r5, #4]
 801e0d6:	69a3      	ldr	r3, [r4, #24]
 801e0d8:	60a3      	str	r3, [r4, #8]
 801e0da:	89a3      	ldrh	r3, [r4, #12]
 801e0dc:	071a      	lsls	r2, r3, #28
 801e0de:	d52f      	bpl.n	801e140 <__swbuf_r+0x84>
 801e0e0:	6923      	ldr	r3, [r4, #16]
 801e0e2:	b36b      	cbz	r3, 801e140 <__swbuf_r+0x84>
 801e0e4:	6923      	ldr	r3, [r4, #16]
 801e0e6:	6820      	ldr	r0, [r4, #0]
 801e0e8:	1ac0      	subs	r0, r0, r3
 801e0ea:	6963      	ldr	r3, [r4, #20]
 801e0ec:	b2f6      	uxtb	r6, r6
 801e0ee:	4283      	cmp	r3, r0
 801e0f0:	4637      	mov	r7, r6
 801e0f2:	dc04      	bgt.n	801e0fe <__swbuf_r+0x42>
 801e0f4:	4621      	mov	r1, r4
 801e0f6:	4628      	mov	r0, r5
 801e0f8:	f7ff fd1e 	bl	801db38 <_fflush_r>
 801e0fc:	bb30      	cbnz	r0, 801e14c <__swbuf_r+0x90>
 801e0fe:	68a3      	ldr	r3, [r4, #8]
 801e100:	3b01      	subs	r3, #1
 801e102:	60a3      	str	r3, [r4, #8]
 801e104:	6823      	ldr	r3, [r4, #0]
 801e106:	1c5a      	adds	r2, r3, #1
 801e108:	6022      	str	r2, [r4, #0]
 801e10a:	701e      	strb	r6, [r3, #0]
 801e10c:	6963      	ldr	r3, [r4, #20]
 801e10e:	3001      	adds	r0, #1
 801e110:	4283      	cmp	r3, r0
 801e112:	d004      	beq.n	801e11e <__swbuf_r+0x62>
 801e114:	89a3      	ldrh	r3, [r4, #12]
 801e116:	07db      	lsls	r3, r3, #31
 801e118:	d506      	bpl.n	801e128 <__swbuf_r+0x6c>
 801e11a:	2e0a      	cmp	r6, #10
 801e11c:	d104      	bne.n	801e128 <__swbuf_r+0x6c>
 801e11e:	4621      	mov	r1, r4
 801e120:	4628      	mov	r0, r5
 801e122:	f7ff fd09 	bl	801db38 <_fflush_r>
 801e126:	b988      	cbnz	r0, 801e14c <__swbuf_r+0x90>
 801e128:	4638      	mov	r0, r7
 801e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e12c:	4b0a      	ldr	r3, [pc, #40]	; (801e158 <__swbuf_r+0x9c>)
 801e12e:	429c      	cmp	r4, r3
 801e130:	d101      	bne.n	801e136 <__swbuf_r+0x7a>
 801e132:	68ac      	ldr	r4, [r5, #8]
 801e134:	e7cf      	b.n	801e0d6 <__swbuf_r+0x1a>
 801e136:	4b09      	ldr	r3, [pc, #36]	; (801e15c <__swbuf_r+0xa0>)
 801e138:	429c      	cmp	r4, r3
 801e13a:	bf08      	it	eq
 801e13c:	68ec      	ldreq	r4, [r5, #12]
 801e13e:	e7ca      	b.n	801e0d6 <__swbuf_r+0x1a>
 801e140:	4621      	mov	r1, r4
 801e142:	4628      	mov	r0, r5
 801e144:	f000 f80c 	bl	801e160 <__swsetup_r>
 801e148:	2800      	cmp	r0, #0
 801e14a:	d0cb      	beq.n	801e0e4 <__swbuf_r+0x28>
 801e14c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e150:	e7ea      	b.n	801e128 <__swbuf_r+0x6c>
 801e152:	bf00      	nop
 801e154:	0802071c 	.word	0x0802071c
 801e158:	0802073c 	.word	0x0802073c
 801e15c:	080206fc 	.word	0x080206fc

0801e160 <__swsetup_r>:
 801e160:	4b32      	ldr	r3, [pc, #200]	; (801e22c <__swsetup_r+0xcc>)
 801e162:	b570      	push	{r4, r5, r6, lr}
 801e164:	681d      	ldr	r5, [r3, #0]
 801e166:	4606      	mov	r6, r0
 801e168:	460c      	mov	r4, r1
 801e16a:	b125      	cbz	r5, 801e176 <__swsetup_r+0x16>
 801e16c:	69ab      	ldr	r3, [r5, #24]
 801e16e:	b913      	cbnz	r3, 801e176 <__swsetup_r+0x16>
 801e170:	4628      	mov	r0, r5
 801e172:	f7ff fd75 	bl	801dc60 <__sinit>
 801e176:	4b2e      	ldr	r3, [pc, #184]	; (801e230 <__swsetup_r+0xd0>)
 801e178:	429c      	cmp	r4, r3
 801e17a:	d10f      	bne.n	801e19c <__swsetup_r+0x3c>
 801e17c:	686c      	ldr	r4, [r5, #4]
 801e17e:	89a3      	ldrh	r3, [r4, #12]
 801e180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e184:	0719      	lsls	r1, r3, #28
 801e186:	d42c      	bmi.n	801e1e2 <__swsetup_r+0x82>
 801e188:	06dd      	lsls	r5, r3, #27
 801e18a:	d411      	bmi.n	801e1b0 <__swsetup_r+0x50>
 801e18c:	2309      	movs	r3, #9
 801e18e:	6033      	str	r3, [r6, #0]
 801e190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e194:	81a3      	strh	r3, [r4, #12]
 801e196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e19a:	e03e      	b.n	801e21a <__swsetup_r+0xba>
 801e19c:	4b25      	ldr	r3, [pc, #148]	; (801e234 <__swsetup_r+0xd4>)
 801e19e:	429c      	cmp	r4, r3
 801e1a0:	d101      	bne.n	801e1a6 <__swsetup_r+0x46>
 801e1a2:	68ac      	ldr	r4, [r5, #8]
 801e1a4:	e7eb      	b.n	801e17e <__swsetup_r+0x1e>
 801e1a6:	4b24      	ldr	r3, [pc, #144]	; (801e238 <__swsetup_r+0xd8>)
 801e1a8:	429c      	cmp	r4, r3
 801e1aa:	bf08      	it	eq
 801e1ac:	68ec      	ldreq	r4, [r5, #12]
 801e1ae:	e7e6      	b.n	801e17e <__swsetup_r+0x1e>
 801e1b0:	0758      	lsls	r0, r3, #29
 801e1b2:	d512      	bpl.n	801e1da <__swsetup_r+0x7a>
 801e1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1b6:	b141      	cbz	r1, 801e1ca <__swsetup_r+0x6a>
 801e1b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1bc:	4299      	cmp	r1, r3
 801e1be:	d002      	beq.n	801e1c6 <__swsetup_r+0x66>
 801e1c0:	4630      	mov	r0, r6
 801e1c2:	f7fb fc6b 	bl	8019a9c <_free_r>
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	6363      	str	r3, [r4, #52]	; 0x34
 801e1ca:	89a3      	ldrh	r3, [r4, #12]
 801e1cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e1d0:	81a3      	strh	r3, [r4, #12]
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	6063      	str	r3, [r4, #4]
 801e1d6:	6923      	ldr	r3, [r4, #16]
 801e1d8:	6023      	str	r3, [r4, #0]
 801e1da:	89a3      	ldrh	r3, [r4, #12]
 801e1dc:	f043 0308 	orr.w	r3, r3, #8
 801e1e0:	81a3      	strh	r3, [r4, #12]
 801e1e2:	6923      	ldr	r3, [r4, #16]
 801e1e4:	b94b      	cbnz	r3, 801e1fa <__swsetup_r+0x9a>
 801e1e6:	89a3      	ldrh	r3, [r4, #12]
 801e1e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e1f0:	d003      	beq.n	801e1fa <__swsetup_r+0x9a>
 801e1f2:	4621      	mov	r1, r4
 801e1f4:	4630      	mov	r0, r6
 801e1f6:	f000 f84d 	bl	801e294 <__smakebuf_r>
 801e1fa:	89a0      	ldrh	r0, [r4, #12]
 801e1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e200:	f010 0301 	ands.w	r3, r0, #1
 801e204:	d00a      	beq.n	801e21c <__swsetup_r+0xbc>
 801e206:	2300      	movs	r3, #0
 801e208:	60a3      	str	r3, [r4, #8]
 801e20a:	6963      	ldr	r3, [r4, #20]
 801e20c:	425b      	negs	r3, r3
 801e20e:	61a3      	str	r3, [r4, #24]
 801e210:	6923      	ldr	r3, [r4, #16]
 801e212:	b943      	cbnz	r3, 801e226 <__swsetup_r+0xc6>
 801e214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e218:	d1ba      	bne.n	801e190 <__swsetup_r+0x30>
 801e21a:	bd70      	pop	{r4, r5, r6, pc}
 801e21c:	0781      	lsls	r1, r0, #30
 801e21e:	bf58      	it	pl
 801e220:	6963      	ldrpl	r3, [r4, #20]
 801e222:	60a3      	str	r3, [r4, #8]
 801e224:	e7f4      	b.n	801e210 <__swsetup_r+0xb0>
 801e226:	2000      	movs	r0, #0
 801e228:	e7f7      	b.n	801e21a <__swsetup_r+0xba>
 801e22a:	bf00      	nop
 801e22c:	200000c4 	.word	0x200000c4
 801e230:	0802071c 	.word	0x0802071c
 801e234:	0802073c 	.word	0x0802073c
 801e238:	080206fc 	.word	0x080206fc

0801e23c <abort>:
 801e23c:	b508      	push	{r3, lr}
 801e23e:	2006      	movs	r0, #6
 801e240:	f000 f890 	bl	801e364 <raise>
 801e244:	2001      	movs	r0, #1
 801e246:	f7ee fe59 	bl	800cefc <_exit>

0801e24a <__swhatbuf_r>:
 801e24a:	b570      	push	{r4, r5, r6, lr}
 801e24c:	460e      	mov	r6, r1
 801e24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e252:	2900      	cmp	r1, #0
 801e254:	b096      	sub	sp, #88	; 0x58
 801e256:	4614      	mov	r4, r2
 801e258:	461d      	mov	r5, r3
 801e25a:	da07      	bge.n	801e26c <__swhatbuf_r+0x22>
 801e25c:	2300      	movs	r3, #0
 801e25e:	602b      	str	r3, [r5, #0]
 801e260:	89b3      	ldrh	r3, [r6, #12]
 801e262:	061a      	lsls	r2, r3, #24
 801e264:	d410      	bmi.n	801e288 <__swhatbuf_r+0x3e>
 801e266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e26a:	e00e      	b.n	801e28a <__swhatbuf_r+0x40>
 801e26c:	466a      	mov	r2, sp
 801e26e:	f000 f895 	bl	801e39c <_fstat_r>
 801e272:	2800      	cmp	r0, #0
 801e274:	dbf2      	blt.n	801e25c <__swhatbuf_r+0x12>
 801e276:	9a01      	ldr	r2, [sp, #4]
 801e278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e27c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e280:	425a      	negs	r2, r3
 801e282:	415a      	adcs	r2, r3
 801e284:	602a      	str	r2, [r5, #0]
 801e286:	e7ee      	b.n	801e266 <__swhatbuf_r+0x1c>
 801e288:	2340      	movs	r3, #64	; 0x40
 801e28a:	2000      	movs	r0, #0
 801e28c:	6023      	str	r3, [r4, #0]
 801e28e:	b016      	add	sp, #88	; 0x58
 801e290:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e294 <__smakebuf_r>:
 801e294:	898b      	ldrh	r3, [r1, #12]
 801e296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e298:	079d      	lsls	r5, r3, #30
 801e29a:	4606      	mov	r6, r0
 801e29c:	460c      	mov	r4, r1
 801e29e:	d507      	bpl.n	801e2b0 <__smakebuf_r+0x1c>
 801e2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e2a4:	6023      	str	r3, [r4, #0]
 801e2a6:	6123      	str	r3, [r4, #16]
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	6163      	str	r3, [r4, #20]
 801e2ac:	b002      	add	sp, #8
 801e2ae:	bd70      	pop	{r4, r5, r6, pc}
 801e2b0:	ab01      	add	r3, sp, #4
 801e2b2:	466a      	mov	r2, sp
 801e2b4:	f7ff ffc9 	bl	801e24a <__swhatbuf_r>
 801e2b8:	9900      	ldr	r1, [sp, #0]
 801e2ba:	4605      	mov	r5, r0
 801e2bc:	4630      	mov	r0, r6
 801e2be:	f7fb fc3d 	bl	8019b3c <_malloc_r>
 801e2c2:	b948      	cbnz	r0, 801e2d8 <__smakebuf_r+0x44>
 801e2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2c8:	059a      	lsls	r2, r3, #22
 801e2ca:	d4ef      	bmi.n	801e2ac <__smakebuf_r+0x18>
 801e2cc:	f023 0303 	bic.w	r3, r3, #3
 801e2d0:	f043 0302 	orr.w	r3, r3, #2
 801e2d4:	81a3      	strh	r3, [r4, #12]
 801e2d6:	e7e3      	b.n	801e2a0 <__smakebuf_r+0xc>
 801e2d8:	4b0d      	ldr	r3, [pc, #52]	; (801e310 <__smakebuf_r+0x7c>)
 801e2da:	62b3      	str	r3, [r6, #40]	; 0x28
 801e2dc:	89a3      	ldrh	r3, [r4, #12]
 801e2de:	6020      	str	r0, [r4, #0]
 801e2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e2e4:	81a3      	strh	r3, [r4, #12]
 801e2e6:	9b00      	ldr	r3, [sp, #0]
 801e2e8:	6163      	str	r3, [r4, #20]
 801e2ea:	9b01      	ldr	r3, [sp, #4]
 801e2ec:	6120      	str	r0, [r4, #16]
 801e2ee:	b15b      	cbz	r3, 801e308 <__smakebuf_r+0x74>
 801e2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e2f4:	4630      	mov	r0, r6
 801e2f6:	f000 f863 	bl	801e3c0 <_isatty_r>
 801e2fa:	b128      	cbz	r0, 801e308 <__smakebuf_r+0x74>
 801e2fc:	89a3      	ldrh	r3, [r4, #12]
 801e2fe:	f023 0303 	bic.w	r3, r3, #3
 801e302:	f043 0301 	orr.w	r3, r3, #1
 801e306:	81a3      	strh	r3, [r4, #12]
 801e308:	89a0      	ldrh	r0, [r4, #12]
 801e30a:	4305      	orrs	r5, r0
 801e30c:	81a5      	strh	r5, [r4, #12]
 801e30e:	e7cd      	b.n	801e2ac <__smakebuf_r+0x18>
 801e310:	0801dbf9 	.word	0x0801dbf9

0801e314 <_raise_r>:
 801e314:	291f      	cmp	r1, #31
 801e316:	b538      	push	{r3, r4, r5, lr}
 801e318:	4604      	mov	r4, r0
 801e31a:	460d      	mov	r5, r1
 801e31c:	d904      	bls.n	801e328 <_raise_r+0x14>
 801e31e:	2316      	movs	r3, #22
 801e320:	6003      	str	r3, [r0, #0]
 801e322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e326:	bd38      	pop	{r3, r4, r5, pc}
 801e328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e32a:	b112      	cbz	r2, 801e332 <_raise_r+0x1e>
 801e32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e330:	b94b      	cbnz	r3, 801e346 <_raise_r+0x32>
 801e332:	4620      	mov	r0, r4
 801e334:	f000 f830 	bl	801e398 <_getpid_r>
 801e338:	462a      	mov	r2, r5
 801e33a:	4601      	mov	r1, r0
 801e33c:	4620      	mov	r0, r4
 801e33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e342:	f000 b817 	b.w	801e374 <_kill_r>
 801e346:	2b01      	cmp	r3, #1
 801e348:	d00a      	beq.n	801e360 <_raise_r+0x4c>
 801e34a:	1c59      	adds	r1, r3, #1
 801e34c:	d103      	bne.n	801e356 <_raise_r+0x42>
 801e34e:	2316      	movs	r3, #22
 801e350:	6003      	str	r3, [r0, #0]
 801e352:	2001      	movs	r0, #1
 801e354:	e7e7      	b.n	801e326 <_raise_r+0x12>
 801e356:	2400      	movs	r4, #0
 801e358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e35c:	4628      	mov	r0, r5
 801e35e:	4798      	blx	r3
 801e360:	2000      	movs	r0, #0
 801e362:	e7e0      	b.n	801e326 <_raise_r+0x12>

0801e364 <raise>:
 801e364:	4b02      	ldr	r3, [pc, #8]	; (801e370 <raise+0xc>)
 801e366:	4601      	mov	r1, r0
 801e368:	6818      	ldr	r0, [r3, #0]
 801e36a:	f7ff bfd3 	b.w	801e314 <_raise_r>
 801e36e:	bf00      	nop
 801e370:	200000c4 	.word	0x200000c4

0801e374 <_kill_r>:
 801e374:	b538      	push	{r3, r4, r5, lr}
 801e376:	4d07      	ldr	r5, [pc, #28]	; (801e394 <_kill_r+0x20>)
 801e378:	2300      	movs	r3, #0
 801e37a:	4604      	mov	r4, r0
 801e37c:	4608      	mov	r0, r1
 801e37e:	4611      	mov	r1, r2
 801e380:	602b      	str	r3, [r5, #0]
 801e382:	f7ee fdab 	bl	800cedc <_kill>
 801e386:	1c43      	adds	r3, r0, #1
 801e388:	d102      	bne.n	801e390 <_kill_r+0x1c>
 801e38a:	682b      	ldr	r3, [r5, #0]
 801e38c:	b103      	cbz	r3, 801e390 <_kill_r+0x1c>
 801e38e:	6023      	str	r3, [r4, #0]
 801e390:	bd38      	pop	{r3, r4, r5, pc}
 801e392:	bf00      	nop
 801e394:	2000a6f8 	.word	0x2000a6f8

0801e398 <_getpid_r>:
 801e398:	f7ee bd98 	b.w	800cecc <_getpid>

0801e39c <_fstat_r>:
 801e39c:	b538      	push	{r3, r4, r5, lr}
 801e39e:	4d07      	ldr	r5, [pc, #28]	; (801e3bc <_fstat_r+0x20>)
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	4604      	mov	r4, r0
 801e3a4:	4608      	mov	r0, r1
 801e3a6:	4611      	mov	r1, r2
 801e3a8:	602b      	str	r3, [r5, #0]
 801e3aa:	f7ee fdf6 	bl	800cf9a <_fstat>
 801e3ae:	1c43      	adds	r3, r0, #1
 801e3b0:	d102      	bne.n	801e3b8 <_fstat_r+0x1c>
 801e3b2:	682b      	ldr	r3, [r5, #0]
 801e3b4:	b103      	cbz	r3, 801e3b8 <_fstat_r+0x1c>
 801e3b6:	6023      	str	r3, [r4, #0]
 801e3b8:	bd38      	pop	{r3, r4, r5, pc}
 801e3ba:	bf00      	nop
 801e3bc:	2000a6f8 	.word	0x2000a6f8

0801e3c0 <_isatty_r>:
 801e3c0:	b538      	push	{r3, r4, r5, lr}
 801e3c2:	4d06      	ldr	r5, [pc, #24]	; (801e3dc <_isatty_r+0x1c>)
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	4604      	mov	r4, r0
 801e3c8:	4608      	mov	r0, r1
 801e3ca:	602b      	str	r3, [r5, #0]
 801e3cc:	f7ee fdf5 	bl	800cfba <_isatty>
 801e3d0:	1c43      	adds	r3, r0, #1
 801e3d2:	d102      	bne.n	801e3da <_isatty_r+0x1a>
 801e3d4:	682b      	ldr	r3, [r5, #0]
 801e3d6:	b103      	cbz	r3, 801e3da <_isatty_r+0x1a>
 801e3d8:	6023      	str	r3, [r4, #0]
 801e3da:	bd38      	pop	{r3, r4, r5, pc}
 801e3dc:	2000a6f8 	.word	0x2000a6f8

0801e3e0 <atanf>:
 801e3e0:	b538      	push	{r3, r4, r5, lr}
 801e3e2:	ee10 5a10 	vmov	r5, s0
 801e3e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e3ea:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e3ee:	eef0 7a40 	vmov.f32	s15, s0
 801e3f2:	db10      	blt.n	801e416 <atanf+0x36>
 801e3f4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e3f8:	dd04      	ble.n	801e404 <atanf+0x24>
 801e3fa:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e3fe:	eeb0 0a67 	vmov.f32	s0, s15
 801e402:	bd38      	pop	{r3, r4, r5, pc}
 801e404:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e53c <atanf+0x15c>
 801e408:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801e540 <atanf+0x160>
 801e40c:	2d00      	cmp	r5, #0
 801e40e:	bfd8      	it	le
 801e410:	eef0 7a40 	vmovle.f32	s15, s0
 801e414:	e7f3      	b.n	801e3fe <atanf+0x1e>
 801e416:	4b4b      	ldr	r3, [pc, #300]	; (801e544 <atanf+0x164>)
 801e418:	429c      	cmp	r4, r3
 801e41a:	dc10      	bgt.n	801e43e <atanf+0x5e>
 801e41c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e420:	da0a      	bge.n	801e438 <atanf+0x58>
 801e422:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e548 <atanf+0x168>
 801e426:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e42e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e436:	dce2      	bgt.n	801e3fe <atanf+0x1e>
 801e438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e43c:	e013      	b.n	801e466 <atanf+0x86>
 801e43e:	f000 f8e3 	bl	801e608 <fabsf>
 801e442:	4b42      	ldr	r3, [pc, #264]	; (801e54c <atanf+0x16c>)
 801e444:	429c      	cmp	r4, r3
 801e446:	dc4f      	bgt.n	801e4e8 <atanf+0x108>
 801e448:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e44c:	429c      	cmp	r4, r3
 801e44e:	dc41      	bgt.n	801e4d4 <atanf+0xf4>
 801e450:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e454:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e458:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e45c:	2300      	movs	r3, #0
 801e45e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e462:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e466:	1c5a      	adds	r2, r3, #1
 801e468:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e46c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e550 <atanf+0x170>
 801e470:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801e554 <atanf+0x174>
 801e474:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e558 <atanf+0x178>
 801e478:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801e55c <atanf+0x17c>
 801e47c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e480:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e484:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e560 <atanf+0x180>
 801e488:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e48c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801e564 <atanf+0x184>
 801e490:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e494:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e568 <atanf+0x188>
 801e498:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e49c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801e56c <atanf+0x18c>
 801e4a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e4a4:	eddf 5a32 	vldr	s11, [pc, #200]	; 801e570 <atanf+0x190>
 801e4a8:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e4ac:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e574 <atanf+0x194>
 801e4b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e4b4:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e578 <atanf+0x198>
 801e4b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e4bc:	eea5 0a87 	vfma.f32	s0, s11, s14
 801e4c0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e4c4:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e4c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e4cc:	d121      	bne.n	801e512 <atanf+0x132>
 801e4ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e4d2:	e794      	b.n	801e3fe <atanf+0x1e>
 801e4d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e4d8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e4dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e4e0:	2301      	movs	r3, #1
 801e4e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4e6:	e7be      	b.n	801e466 <atanf+0x86>
 801e4e8:	4b24      	ldr	r3, [pc, #144]	; (801e57c <atanf+0x19c>)
 801e4ea:	429c      	cmp	r4, r3
 801e4ec:	dc0b      	bgt.n	801e506 <atanf+0x126>
 801e4ee:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e4f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4f6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e4fa:	2302      	movs	r3, #2
 801e4fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e504:	e7af      	b.n	801e466 <atanf+0x86>
 801e506:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e50a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e50e:	2303      	movs	r3, #3
 801e510:	e7a9      	b.n	801e466 <atanf+0x86>
 801e512:	4a1b      	ldr	r2, [pc, #108]	; (801e580 <atanf+0x1a0>)
 801e514:	491b      	ldr	r1, [pc, #108]	; (801e584 <atanf+0x1a4>)
 801e516:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e51a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e51e:	ed93 7a00 	vldr	s14, [r3]
 801e522:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e526:	2d00      	cmp	r5, #0
 801e528:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e52c:	ed92 0a00 	vldr	s0, [r2]
 801e530:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e534:	bfb8      	it	lt
 801e536:	eef1 7a67 	vneglt.f32	s15, s15
 801e53a:	e760      	b.n	801e3fe <atanf+0x1e>
 801e53c:	3fc90fdb 	.word	0x3fc90fdb
 801e540:	bfc90fdb 	.word	0xbfc90fdb
 801e544:	3edfffff 	.word	0x3edfffff
 801e548:	7149f2ca 	.word	0x7149f2ca
 801e54c:	3f97ffff 	.word	0x3f97ffff
 801e550:	3c8569d7 	.word	0x3c8569d7
 801e554:	3d4bda59 	.word	0x3d4bda59
 801e558:	bd15a221 	.word	0xbd15a221
 801e55c:	be4ccccd 	.word	0xbe4ccccd
 801e560:	3d886b35 	.word	0x3d886b35
 801e564:	3dba2e6e 	.word	0x3dba2e6e
 801e568:	3e124925 	.word	0x3e124925
 801e56c:	3eaaaaab 	.word	0x3eaaaaab
 801e570:	bd6ef16b 	.word	0xbd6ef16b
 801e574:	bd9d8795 	.word	0xbd9d8795
 801e578:	bde38e38 	.word	0xbde38e38
 801e57c:	401bffff 	.word	0x401bffff
 801e580:	0802075c 	.word	0x0802075c
 801e584:	0802076c 	.word	0x0802076c

0801e588 <cosf>:
 801e588:	ee10 3a10 	vmov	r3, s0
 801e58c:	b507      	push	{r0, r1, r2, lr}
 801e58e:	4a1c      	ldr	r2, [pc, #112]	; (801e600 <cosf+0x78>)
 801e590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e594:	4293      	cmp	r3, r2
 801e596:	dc04      	bgt.n	801e5a2 <cosf+0x1a>
 801e598:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801e604 <cosf+0x7c>
 801e59c:	f000 fdb8 	bl	801f110 <__kernel_cosf>
 801e5a0:	e004      	b.n	801e5ac <cosf+0x24>
 801e5a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e5a6:	db04      	blt.n	801e5b2 <cosf+0x2a>
 801e5a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e5ac:	b003      	add	sp, #12
 801e5ae:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5b2:	4668      	mov	r0, sp
 801e5b4:	f000 fc6c 	bl	801ee90 <__ieee754_rem_pio2f>
 801e5b8:	f000 0003 	and.w	r0, r0, #3
 801e5bc:	2801      	cmp	r0, #1
 801e5be:	d007      	beq.n	801e5d0 <cosf+0x48>
 801e5c0:	2802      	cmp	r0, #2
 801e5c2:	d00e      	beq.n	801e5e2 <cosf+0x5a>
 801e5c4:	b9a0      	cbnz	r0, 801e5f0 <cosf+0x68>
 801e5c6:	eddd 0a01 	vldr	s1, [sp, #4]
 801e5ca:	ed9d 0a00 	vldr	s0, [sp]
 801e5ce:	e7e5      	b.n	801e59c <cosf+0x14>
 801e5d0:	eddd 0a01 	vldr	s1, [sp, #4]
 801e5d4:	ed9d 0a00 	vldr	s0, [sp]
 801e5d8:	f001 f884 	bl	801f6e4 <__kernel_sinf>
 801e5dc:	eeb1 0a40 	vneg.f32	s0, s0
 801e5e0:	e7e4      	b.n	801e5ac <cosf+0x24>
 801e5e2:	eddd 0a01 	vldr	s1, [sp, #4]
 801e5e6:	ed9d 0a00 	vldr	s0, [sp]
 801e5ea:	f000 fd91 	bl	801f110 <__kernel_cosf>
 801e5ee:	e7f5      	b.n	801e5dc <cosf+0x54>
 801e5f0:	eddd 0a01 	vldr	s1, [sp, #4]
 801e5f4:	ed9d 0a00 	vldr	s0, [sp]
 801e5f8:	2001      	movs	r0, #1
 801e5fa:	f001 f873 	bl	801f6e4 <__kernel_sinf>
 801e5fe:	e7d5      	b.n	801e5ac <cosf+0x24>
 801e600:	3f490fd8 	.word	0x3f490fd8
 801e604:	00000000 	.word	0x00000000

0801e608 <fabsf>:
 801e608:	ee10 3a10 	vmov	r3, s0
 801e60c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e610:	ee00 3a10 	vmov	s0, r3
 801e614:	4770      	bx	lr
	...

0801e618 <sinf>:
 801e618:	ee10 3a10 	vmov	r3, s0
 801e61c:	b507      	push	{r0, r1, r2, lr}
 801e61e:	4a1d      	ldr	r2, [pc, #116]	; (801e694 <sinf+0x7c>)
 801e620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e624:	4293      	cmp	r3, r2
 801e626:	dc05      	bgt.n	801e634 <sinf+0x1c>
 801e628:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801e698 <sinf+0x80>
 801e62c:	2000      	movs	r0, #0
 801e62e:	f001 f859 	bl	801f6e4 <__kernel_sinf>
 801e632:	e004      	b.n	801e63e <sinf+0x26>
 801e634:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e638:	db04      	blt.n	801e644 <sinf+0x2c>
 801e63a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e63e:	b003      	add	sp, #12
 801e640:	f85d fb04 	ldr.w	pc, [sp], #4
 801e644:	4668      	mov	r0, sp
 801e646:	f000 fc23 	bl	801ee90 <__ieee754_rem_pio2f>
 801e64a:	f000 0003 	and.w	r0, r0, #3
 801e64e:	2801      	cmp	r0, #1
 801e650:	d008      	beq.n	801e664 <sinf+0x4c>
 801e652:	2802      	cmp	r0, #2
 801e654:	d00d      	beq.n	801e672 <sinf+0x5a>
 801e656:	b9b0      	cbnz	r0, 801e686 <sinf+0x6e>
 801e658:	eddd 0a01 	vldr	s1, [sp, #4]
 801e65c:	ed9d 0a00 	vldr	s0, [sp]
 801e660:	2001      	movs	r0, #1
 801e662:	e7e4      	b.n	801e62e <sinf+0x16>
 801e664:	eddd 0a01 	vldr	s1, [sp, #4]
 801e668:	ed9d 0a00 	vldr	s0, [sp]
 801e66c:	f000 fd50 	bl	801f110 <__kernel_cosf>
 801e670:	e7e5      	b.n	801e63e <sinf+0x26>
 801e672:	eddd 0a01 	vldr	s1, [sp, #4]
 801e676:	ed9d 0a00 	vldr	s0, [sp]
 801e67a:	2001      	movs	r0, #1
 801e67c:	f001 f832 	bl	801f6e4 <__kernel_sinf>
 801e680:	eeb1 0a40 	vneg.f32	s0, s0
 801e684:	e7db      	b.n	801e63e <sinf+0x26>
 801e686:	eddd 0a01 	vldr	s1, [sp, #4]
 801e68a:	ed9d 0a00 	vldr	s0, [sp]
 801e68e:	f000 fd3f 	bl	801f110 <__kernel_cosf>
 801e692:	e7f5      	b.n	801e680 <sinf+0x68>
 801e694:	3f490fd8 	.word	0x3f490fd8
 801e698:	00000000 	.word	0x00000000

0801e69c <atan2f>:
 801e69c:	f000 b898 	b.w	801e7d0 <__ieee754_atan2f>

0801e6a0 <powf>:
 801e6a0:	b508      	push	{r3, lr}
 801e6a2:	ed2d 8b04 	vpush	{d8-d9}
 801e6a6:	eeb0 9a40 	vmov.f32	s18, s0
 801e6aa:	eef0 8a60 	vmov.f32	s17, s1
 801e6ae:	f000 f92f 	bl	801e910 <__ieee754_powf>
 801e6b2:	4b43      	ldr	r3, [pc, #268]	; (801e7c0 <powf+0x120>)
 801e6b4:	f993 3000 	ldrsb.w	r3, [r3]
 801e6b8:	3301      	adds	r3, #1
 801e6ba:	eeb0 8a40 	vmov.f32	s16, s0
 801e6be:	d012      	beq.n	801e6e6 <powf+0x46>
 801e6c0:	eef4 8a68 	vcmp.f32	s17, s17
 801e6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6c8:	d60d      	bvs.n	801e6e6 <powf+0x46>
 801e6ca:	eeb4 9a49 	vcmp.f32	s18, s18
 801e6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d2:	d70d      	bvc.n	801e6f0 <powf+0x50>
 801e6d4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801e6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e6e0:	bf08      	it	eq
 801e6e2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801e6e6:	eeb0 0a48 	vmov.f32	s0, s16
 801e6ea:	ecbd 8b04 	vpop	{d8-d9}
 801e6ee:	bd08      	pop	{r3, pc}
 801e6f0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801e7c4 <powf+0x124>
 801e6f4:	eeb4 9a69 	vcmp.f32	s18, s19
 801e6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6fc:	d116      	bne.n	801e72c <powf+0x8c>
 801e6fe:	eef4 8a69 	vcmp.f32	s17, s19
 801e702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e706:	d057      	beq.n	801e7b8 <powf+0x118>
 801e708:	eeb0 0a68 	vmov.f32	s0, s17
 801e70c:	f7ff f944 	bl	801d998 <finitef>
 801e710:	2800      	cmp	r0, #0
 801e712:	d0e8      	beq.n	801e6e6 <powf+0x46>
 801e714:	eef4 8ae9 	vcmpe.f32	s17, s19
 801e718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e71c:	d5e3      	bpl.n	801e6e6 <powf+0x46>
 801e71e:	f7fb f975 	bl	8019a0c <__errno>
 801e722:	2321      	movs	r3, #33	; 0x21
 801e724:	6003      	str	r3, [r0, #0]
 801e726:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801e7c8 <powf+0x128>
 801e72a:	e7dc      	b.n	801e6e6 <powf+0x46>
 801e72c:	f7ff f934 	bl	801d998 <finitef>
 801e730:	bb50      	cbnz	r0, 801e788 <powf+0xe8>
 801e732:	eeb0 0a49 	vmov.f32	s0, s18
 801e736:	f7ff f92f 	bl	801d998 <finitef>
 801e73a:	b328      	cbz	r0, 801e788 <powf+0xe8>
 801e73c:	eeb0 0a68 	vmov.f32	s0, s17
 801e740:	f7ff f92a 	bl	801d998 <finitef>
 801e744:	b300      	cbz	r0, 801e788 <powf+0xe8>
 801e746:	eeb4 8a48 	vcmp.f32	s16, s16
 801e74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e74e:	d706      	bvc.n	801e75e <powf+0xbe>
 801e750:	f7fb f95c 	bl	8019a0c <__errno>
 801e754:	2321      	movs	r3, #33	; 0x21
 801e756:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801e75a:	6003      	str	r3, [r0, #0]
 801e75c:	e7c3      	b.n	801e6e6 <powf+0x46>
 801e75e:	f7fb f955 	bl	8019a0c <__errno>
 801e762:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801e766:	2322      	movs	r3, #34	; 0x22
 801e768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e76c:	6003      	str	r3, [r0, #0]
 801e76e:	d508      	bpl.n	801e782 <powf+0xe2>
 801e770:	eeb0 0a68 	vmov.f32	s0, s17
 801e774:	f001 f840 	bl	801f7f8 <rintf>
 801e778:	eeb4 0a68 	vcmp.f32	s0, s17
 801e77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e780:	d1d1      	bne.n	801e726 <powf+0x86>
 801e782:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801e7cc <powf+0x12c>
 801e786:	e7ae      	b.n	801e6e6 <powf+0x46>
 801e788:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e790:	d1a9      	bne.n	801e6e6 <powf+0x46>
 801e792:	eeb0 0a49 	vmov.f32	s0, s18
 801e796:	f7ff f8ff 	bl	801d998 <finitef>
 801e79a:	2800      	cmp	r0, #0
 801e79c:	d0a3      	beq.n	801e6e6 <powf+0x46>
 801e79e:	eeb0 0a68 	vmov.f32	s0, s17
 801e7a2:	f7ff f8f9 	bl	801d998 <finitef>
 801e7a6:	2800      	cmp	r0, #0
 801e7a8:	d09d      	beq.n	801e6e6 <powf+0x46>
 801e7aa:	f7fb f92f 	bl	8019a0c <__errno>
 801e7ae:	2322      	movs	r3, #34	; 0x22
 801e7b0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e7c4 <powf+0x124>
 801e7b4:	6003      	str	r3, [r0, #0]
 801e7b6:	e796      	b.n	801e6e6 <powf+0x46>
 801e7b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e7bc:	e793      	b.n	801e6e6 <powf+0x46>
 801e7be:	bf00      	nop
 801e7c0:	20000298 	.word	0x20000298
 801e7c4:	00000000 	.word	0x00000000
 801e7c8:	ff800000 	.word	0xff800000
 801e7cc:	7f800000 	.word	0x7f800000

0801e7d0 <__ieee754_atan2f>:
 801e7d0:	ee10 2a90 	vmov	r2, s1
 801e7d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e7d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e7dc:	b510      	push	{r4, lr}
 801e7de:	eef0 7a40 	vmov.f32	s15, s0
 801e7e2:	dc06      	bgt.n	801e7f2 <__ieee754_atan2f+0x22>
 801e7e4:	ee10 0a10 	vmov	r0, s0
 801e7e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801e7ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e7f0:	dd04      	ble.n	801e7fc <__ieee754_atan2f+0x2c>
 801e7f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e7f6:	eeb0 0a67 	vmov.f32	s0, s15
 801e7fa:	bd10      	pop	{r4, pc}
 801e7fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e800:	d103      	bne.n	801e80a <__ieee754_atan2f+0x3a>
 801e802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e806:	f7ff bdeb 	b.w	801e3e0 <atanf>
 801e80a:	1794      	asrs	r4, r2, #30
 801e80c:	f004 0402 	and.w	r4, r4, #2
 801e810:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e814:	b943      	cbnz	r3, 801e828 <__ieee754_atan2f+0x58>
 801e816:	2c02      	cmp	r4, #2
 801e818:	d05e      	beq.n	801e8d8 <__ieee754_atan2f+0x108>
 801e81a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e8ec <__ieee754_atan2f+0x11c>
 801e81e:	2c03      	cmp	r4, #3
 801e820:	bf08      	it	eq
 801e822:	eef0 7a47 	vmoveq.f32	s15, s14
 801e826:	e7e6      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e828:	b941      	cbnz	r1, 801e83c <__ieee754_atan2f+0x6c>
 801e82a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801e8f0 <__ieee754_atan2f+0x120>
 801e82e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801e8f4 <__ieee754_atan2f+0x124>
 801e832:	2800      	cmp	r0, #0
 801e834:	bfb8      	it	lt
 801e836:	eef0 7a40 	vmovlt.f32	s15, s0
 801e83a:	e7dc      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e83c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e840:	d110      	bne.n	801e864 <__ieee754_atan2f+0x94>
 801e842:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e846:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e84a:	d107      	bne.n	801e85c <__ieee754_atan2f+0x8c>
 801e84c:	2c02      	cmp	r4, #2
 801e84e:	d846      	bhi.n	801e8de <__ieee754_atan2f+0x10e>
 801e850:	4b29      	ldr	r3, [pc, #164]	; (801e8f8 <__ieee754_atan2f+0x128>)
 801e852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e856:	edd4 7a00 	vldr	s15, [r4]
 801e85a:	e7cc      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e85c:	2c02      	cmp	r4, #2
 801e85e:	d841      	bhi.n	801e8e4 <__ieee754_atan2f+0x114>
 801e860:	4b26      	ldr	r3, [pc, #152]	; (801e8fc <__ieee754_atan2f+0x12c>)
 801e862:	e7f6      	b.n	801e852 <__ieee754_atan2f+0x82>
 801e864:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e868:	d0df      	beq.n	801e82a <__ieee754_atan2f+0x5a>
 801e86a:	1a5b      	subs	r3, r3, r1
 801e86c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801e870:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801e874:	da1a      	bge.n	801e8ac <__ieee754_atan2f+0xdc>
 801e876:	2a00      	cmp	r2, #0
 801e878:	da01      	bge.n	801e87e <__ieee754_atan2f+0xae>
 801e87a:	313c      	adds	r1, #60	; 0x3c
 801e87c:	db19      	blt.n	801e8b2 <__ieee754_atan2f+0xe2>
 801e87e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801e882:	f7ff fec1 	bl	801e608 <fabsf>
 801e886:	f7ff fdab 	bl	801e3e0 <atanf>
 801e88a:	eef0 7a40 	vmov.f32	s15, s0
 801e88e:	2c01      	cmp	r4, #1
 801e890:	d012      	beq.n	801e8b8 <__ieee754_atan2f+0xe8>
 801e892:	2c02      	cmp	r4, #2
 801e894:	d017      	beq.n	801e8c6 <__ieee754_atan2f+0xf6>
 801e896:	2c00      	cmp	r4, #0
 801e898:	d0ad      	beq.n	801e7f6 <__ieee754_atan2f+0x26>
 801e89a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801e900 <__ieee754_atan2f+0x130>
 801e89e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e8a2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801e904 <__ieee754_atan2f+0x134>
 801e8a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e8aa:	e7a4      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8ac:	eddf 7a10 	vldr	s15, [pc, #64]	; 801e8f0 <__ieee754_atan2f+0x120>
 801e8b0:	e7ed      	b.n	801e88e <__ieee754_atan2f+0xbe>
 801e8b2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e908 <__ieee754_atan2f+0x138>
 801e8b6:	e7ea      	b.n	801e88e <__ieee754_atan2f+0xbe>
 801e8b8:	ee17 3a90 	vmov	r3, s15
 801e8bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e8c0:	ee07 3a90 	vmov	s15, r3
 801e8c4:	e797      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801e900 <__ieee754_atan2f+0x130>
 801e8ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e8ce:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801e904 <__ieee754_atan2f+0x134>
 801e8d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e8d6:	e78e      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8d8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801e904 <__ieee754_atan2f+0x134>
 801e8dc:	e78b      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8de:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e90c <__ieee754_atan2f+0x13c>
 801e8e2:	e788      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e908 <__ieee754_atan2f+0x138>
 801e8e8:	e785      	b.n	801e7f6 <__ieee754_atan2f+0x26>
 801e8ea:	bf00      	nop
 801e8ec:	c0490fdb 	.word	0xc0490fdb
 801e8f0:	3fc90fdb 	.word	0x3fc90fdb
 801e8f4:	bfc90fdb 	.word	0xbfc90fdb
 801e8f8:	0802077c 	.word	0x0802077c
 801e8fc:	08020788 	.word	0x08020788
 801e900:	33bbbd2e 	.word	0x33bbbd2e
 801e904:	40490fdb 	.word	0x40490fdb
 801e908:	00000000 	.word	0x00000000
 801e90c:	3f490fdb 	.word	0x3f490fdb

0801e910 <__ieee754_powf>:
 801e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e914:	ee10 5a90 	vmov	r5, s1
 801e918:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801e91c:	ed2d 8b02 	vpush	{d8}
 801e920:	eeb0 8a40 	vmov.f32	s16, s0
 801e924:	eef0 8a60 	vmov.f32	s17, s1
 801e928:	f000 8291 	beq.w	801ee4e <__ieee754_powf+0x53e>
 801e92c:	ee10 8a10 	vmov	r8, s0
 801e930:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801e934:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e938:	dc06      	bgt.n	801e948 <__ieee754_powf+0x38>
 801e93a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801e93e:	dd0a      	ble.n	801e956 <__ieee754_powf+0x46>
 801e940:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801e944:	f000 8283 	beq.w	801ee4e <__ieee754_powf+0x53e>
 801e948:	ecbd 8b02 	vpop	{d8}
 801e94c:	48d8      	ldr	r0, [pc, #864]	; (801ecb0 <__ieee754_powf+0x3a0>)
 801e94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e952:	f7fb bfdf 	b.w	801a914 <nanf>
 801e956:	f1b8 0f00 	cmp.w	r8, #0
 801e95a:	da1f      	bge.n	801e99c <__ieee754_powf+0x8c>
 801e95c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801e960:	da2e      	bge.n	801e9c0 <__ieee754_powf+0xb0>
 801e962:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801e966:	f2c0 827b 	blt.w	801ee60 <__ieee754_powf+0x550>
 801e96a:	15fb      	asrs	r3, r7, #23
 801e96c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801e970:	fa47 f603 	asr.w	r6, r7, r3
 801e974:	fa06 f303 	lsl.w	r3, r6, r3
 801e978:	42bb      	cmp	r3, r7
 801e97a:	f040 8271 	bne.w	801ee60 <__ieee754_powf+0x550>
 801e97e:	f006 0601 	and.w	r6, r6, #1
 801e982:	f1c6 0602 	rsb	r6, r6, #2
 801e986:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801e98a:	d120      	bne.n	801e9ce <__ieee754_powf+0xbe>
 801e98c:	2d00      	cmp	r5, #0
 801e98e:	f280 8264 	bge.w	801ee5a <__ieee754_powf+0x54a>
 801e992:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e996:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801e99a:	e00d      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801e99c:	2600      	movs	r6, #0
 801e99e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801e9a2:	d1f0      	bne.n	801e986 <__ieee754_powf+0x76>
 801e9a4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801e9a8:	f000 8251 	beq.w	801ee4e <__ieee754_powf+0x53e>
 801e9ac:	dd0a      	ble.n	801e9c4 <__ieee754_powf+0xb4>
 801e9ae:	2d00      	cmp	r5, #0
 801e9b0:	f280 8250 	bge.w	801ee54 <__ieee754_powf+0x544>
 801e9b4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801ecb4 <__ieee754_powf+0x3a4>
 801e9b8:	ecbd 8b02 	vpop	{d8}
 801e9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9c0:	2602      	movs	r6, #2
 801e9c2:	e7ec      	b.n	801e99e <__ieee754_powf+0x8e>
 801e9c4:	2d00      	cmp	r5, #0
 801e9c6:	daf5      	bge.n	801e9b4 <__ieee754_powf+0xa4>
 801e9c8:	eeb1 0a68 	vneg.f32	s0, s17
 801e9cc:	e7f4      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801e9ce:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801e9d2:	d102      	bne.n	801e9da <__ieee754_powf+0xca>
 801e9d4:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e9d8:	e7ee      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801e9da:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801e9de:	eeb0 0a48 	vmov.f32	s0, s16
 801e9e2:	d108      	bne.n	801e9f6 <__ieee754_powf+0xe6>
 801e9e4:	f1b8 0f00 	cmp.w	r8, #0
 801e9e8:	db05      	blt.n	801e9f6 <__ieee754_powf+0xe6>
 801e9ea:	ecbd 8b02 	vpop	{d8}
 801e9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e9f2:	f000 bb89 	b.w	801f108 <__ieee754_sqrtf>
 801e9f6:	f7ff fe07 	bl	801e608 <fabsf>
 801e9fa:	b124      	cbz	r4, 801ea06 <__ieee754_powf+0xf6>
 801e9fc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801ea00:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801ea04:	d117      	bne.n	801ea36 <__ieee754_powf+0x126>
 801ea06:	2d00      	cmp	r5, #0
 801ea08:	bfbc      	itt	lt
 801ea0a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801ea0e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801ea12:	f1b8 0f00 	cmp.w	r8, #0
 801ea16:	dacf      	bge.n	801e9b8 <__ieee754_powf+0xa8>
 801ea18:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801ea1c:	ea54 0306 	orrs.w	r3, r4, r6
 801ea20:	d104      	bne.n	801ea2c <__ieee754_powf+0x11c>
 801ea22:	ee70 7a40 	vsub.f32	s15, s0, s0
 801ea26:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801ea2a:	e7c5      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ea2c:	2e01      	cmp	r6, #1
 801ea2e:	d1c3      	bne.n	801e9b8 <__ieee754_powf+0xa8>
 801ea30:	eeb1 0a40 	vneg.f32	s0, s0
 801ea34:	e7c0      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ea36:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801ea3a:	3801      	subs	r0, #1
 801ea3c:	ea56 0300 	orrs.w	r3, r6, r0
 801ea40:	d104      	bne.n	801ea4c <__ieee754_powf+0x13c>
 801ea42:	ee38 8a48 	vsub.f32	s16, s16, s16
 801ea46:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801ea4a:	e7b5      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ea4c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801ea50:	dd6b      	ble.n	801eb2a <__ieee754_powf+0x21a>
 801ea52:	4b99      	ldr	r3, [pc, #612]	; (801ecb8 <__ieee754_powf+0x3a8>)
 801ea54:	429c      	cmp	r4, r3
 801ea56:	dc06      	bgt.n	801ea66 <__ieee754_powf+0x156>
 801ea58:	2d00      	cmp	r5, #0
 801ea5a:	daab      	bge.n	801e9b4 <__ieee754_powf+0xa4>
 801ea5c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801ecbc <__ieee754_powf+0x3ac>
 801ea60:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ea64:	e7a8      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ea66:	4b96      	ldr	r3, [pc, #600]	; (801ecc0 <__ieee754_powf+0x3b0>)
 801ea68:	429c      	cmp	r4, r3
 801ea6a:	dd02      	ble.n	801ea72 <__ieee754_powf+0x162>
 801ea6c:	2d00      	cmp	r5, #0
 801ea6e:	dcf5      	bgt.n	801ea5c <__ieee754_powf+0x14c>
 801ea70:	e7a0      	b.n	801e9b4 <__ieee754_powf+0xa4>
 801ea72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ea76:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ea7a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801ecc4 <__ieee754_powf+0x3b4>
 801ea7e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801ea82:	eee0 6a67 	vfms.f32	s13, s0, s15
 801ea86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ea8a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801ea8e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ea92:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea96:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801ecc8 <__ieee754_powf+0x3b8>
 801ea9a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801ea9e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801eccc <__ieee754_powf+0x3bc>
 801eaa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801eaa6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801ecd0 <__ieee754_powf+0x3c0>
 801eaaa:	eef0 6a67 	vmov.f32	s13, s15
 801eaae:	eee0 6a07 	vfma.f32	s13, s0, s14
 801eab2:	ee16 3a90 	vmov	r3, s13
 801eab6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801eaba:	f023 030f 	bic.w	r3, r3, #15
 801eabe:	ee00 3a90 	vmov	s1, r3
 801eac2:	eee0 0a47 	vfms.f32	s1, s0, s14
 801eac6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801eaca:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801eace:	f025 050f 	bic.w	r5, r5, #15
 801ead2:	ee07 5a10 	vmov	s14, r5
 801ead6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801eada:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801eade:	ee07 3a90 	vmov	s15, r3
 801eae2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801eae6:	3e01      	subs	r6, #1
 801eae8:	ea56 0200 	orrs.w	r2, r6, r0
 801eaec:	ee07 5a10 	vmov	s14, r5
 801eaf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eaf4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801eaf8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801eafc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801eb00:	ee17 4a10 	vmov	r4, s14
 801eb04:	bf08      	it	eq
 801eb06:	eeb0 8a40 	vmoveq.f32	s16, s0
 801eb0a:	2c00      	cmp	r4, #0
 801eb0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801eb10:	f340 8184 	ble.w	801ee1c <__ieee754_powf+0x50c>
 801eb14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801eb18:	f340 80fc 	ble.w	801ed14 <__ieee754_powf+0x404>
 801eb1c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801ecbc <__ieee754_powf+0x3ac>
 801eb20:	ee28 0a27 	vmul.f32	s0, s16, s15
 801eb24:	ee20 0a27 	vmul.f32	s0, s0, s15
 801eb28:	e746      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801eb2a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801eb2e:	bf01      	itttt	eq
 801eb30:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801ecd4 <__ieee754_powf+0x3c4>
 801eb34:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801eb38:	f06f 0217 	mvneq.w	r2, #23
 801eb3c:	ee17 4a90 	vmoveq	r4, s15
 801eb40:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801eb44:	bf18      	it	ne
 801eb46:	2200      	movne	r2, #0
 801eb48:	3b7f      	subs	r3, #127	; 0x7f
 801eb4a:	4413      	add	r3, r2
 801eb4c:	4a62      	ldr	r2, [pc, #392]	; (801ecd8 <__ieee754_powf+0x3c8>)
 801eb4e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801eb52:	4294      	cmp	r4, r2
 801eb54:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801eb58:	dd06      	ble.n	801eb68 <__ieee754_powf+0x258>
 801eb5a:	4a60      	ldr	r2, [pc, #384]	; (801ecdc <__ieee754_powf+0x3cc>)
 801eb5c:	4294      	cmp	r4, r2
 801eb5e:	f340 80a4 	ble.w	801ecaa <__ieee754_powf+0x39a>
 801eb62:	3301      	adds	r3, #1
 801eb64:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801eb68:	2400      	movs	r4, #0
 801eb6a:	4a5d      	ldr	r2, [pc, #372]	; (801ece0 <__ieee754_powf+0x3d0>)
 801eb6c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801eb70:	ee07 1a90 	vmov	s15, r1
 801eb74:	ed92 7a00 	vldr	s14, [r2]
 801eb78:	4a5a      	ldr	r2, [pc, #360]	; (801ece4 <__ieee754_powf+0x3d4>)
 801eb7a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801eb7e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801eb82:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801eb86:	1049      	asrs	r1, r1, #1
 801eb88:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801eb8c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801eb90:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801eb94:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801eb98:	ee06 1a10 	vmov	s12, r1
 801eb9c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801eba0:	ee36 7a47 	vsub.f32	s14, s12, s14
 801eba4:	ee14 7a90 	vmov	r7, s9
 801eba8:	4017      	ands	r7, r2
 801ebaa:	ee05 7a90 	vmov	s11, r7
 801ebae:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801ebb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ebb6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801ece8 <__ieee754_powf+0x3d8>
 801ebba:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801ebbe:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801ebc2:	ee25 6a26 	vmul.f32	s12, s10, s13
 801ebc6:	eddf 6a49 	vldr	s13, [pc, #292]	; 801ecec <__ieee754_powf+0x3dc>
 801ebca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ebce:	eddf 6a48 	vldr	s13, [pc, #288]	; 801ecf0 <__ieee754_powf+0x3e0>
 801ebd2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ebd6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801ecc4 <__ieee754_powf+0x3b4>
 801ebda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ebde:	eddf 6a45 	vldr	s13, [pc, #276]	; 801ecf4 <__ieee754_powf+0x3e4>
 801ebe2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ebe6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801ecf8 <__ieee754_powf+0x3e8>
 801ebea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ebee:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801ebf2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801ebf6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ebfa:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ebfe:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801ec02:	eef0 7a45 	vmov.f32	s15, s10
 801ec06:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801ec0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec0e:	ee17 1a90 	vmov	r1, s15
 801ec12:	4011      	ands	r1, r2
 801ec14:	ee07 1a90 	vmov	s15, r1
 801ec18:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801ec1c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801ec20:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ec24:	ee27 7a24 	vmul.f32	s14, s14, s9
 801ec28:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ec2c:	eeb0 6a47 	vmov.f32	s12, s14
 801ec30:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ec34:	ee16 1a10 	vmov	r1, s12
 801ec38:	4011      	ands	r1, r2
 801ec3a:	ee06 1a90 	vmov	s13, r1
 801ec3e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801ec42:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801ecfc <__ieee754_powf+0x3ec>
 801ec46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801ed00 <__ieee754_powf+0x3f0>
 801ec4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ec4e:	ee06 1a10 	vmov	s12, r1
 801ec52:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ec56:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801ed04 <__ieee754_powf+0x3f4>
 801ec5a:	492b      	ldr	r1, [pc, #172]	; (801ed08 <__ieee754_powf+0x3f8>)
 801ec5c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ec60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ec64:	edd1 7a00 	vldr	s15, [r1]
 801ec68:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ec6c:	ee07 3a90 	vmov	s15, r3
 801ec70:	4b26      	ldr	r3, [pc, #152]	; (801ed0c <__ieee754_powf+0x3fc>)
 801ec72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ec76:	eef0 7a47 	vmov.f32	s15, s14
 801ec7a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ec7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ec82:	edd4 0a00 	vldr	s1, [r4]
 801ec86:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ec8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec8e:	ee17 3a90 	vmov	r3, s15
 801ec92:	4013      	ands	r3, r2
 801ec94:	ee07 3a90 	vmov	s15, r3
 801ec98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ec9c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801eca0:	eee6 6a65 	vfms.f32	s13, s12, s11
 801eca4:	ee77 7a66 	vsub.f32	s15, s14, s13
 801eca8:	e70f      	b.n	801eaca <__ieee754_powf+0x1ba>
 801ecaa:	2401      	movs	r4, #1
 801ecac:	e75d      	b.n	801eb6a <__ieee754_powf+0x25a>
 801ecae:	bf00      	nop
 801ecb0:	080206f8 	.word	0x080206f8
 801ecb4:	00000000 	.word	0x00000000
 801ecb8:	3f7ffff7 	.word	0x3f7ffff7
 801ecbc:	7149f2ca 	.word	0x7149f2ca
 801ecc0:	3f800007 	.word	0x3f800007
 801ecc4:	3eaaaaab 	.word	0x3eaaaaab
 801ecc8:	3fb8aa3b 	.word	0x3fb8aa3b
 801eccc:	36eca570 	.word	0x36eca570
 801ecd0:	3fb8aa00 	.word	0x3fb8aa00
 801ecd4:	4b800000 	.word	0x4b800000
 801ecd8:	001cc471 	.word	0x001cc471
 801ecdc:	005db3d6 	.word	0x005db3d6
 801ece0:	08020794 	.word	0x08020794
 801ece4:	fffff000 	.word	0xfffff000
 801ece8:	3e6c3255 	.word	0x3e6c3255
 801ecec:	3e53f142 	.word	0x3e53f142
 801ecf0:	3e8ba305 	.word	0x3e8ba305
 801ecf4:	3edb6db7 	.word	0x3edb6db7
 801ecf8:	3f19999a 	.word	0x3f19999a
 801ecfc:	3f76384f 	.word	0x3f76384f
 801ed00:	3f763800 	.word	0x3f763800
 801ed04:	369dc3a0 	.word	0x369dc3a0
 801ed08:	080207a4 	.word	0x080207a4
 801ed0c:	0802079c 	.word	0x0802079c
 801ed10:	3338aa3c 	.word	0x3338aa3c
 801ed14:	f040 8092 	bne.w	801ee3c <__ieee754_powf+0x52c>
 801ed18:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ed10 <__ieee754_powf+0x400>
 801ed1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ed20:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ed24:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed2c:	f73f aef6 	bgt.w	801eb1c <__ieee754_powf+0x20c>
 801ed30:	15db      	asrs	r3, r3, #23
 801ed32:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801ed36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801ed3a:	4103      	asrs	r3, r0
 801ed3c:	4423      	add	r3, r4
 801ed3e:	4949      	ldr	r1, [pc, #292]	; (801ee64 <__ieee754_powf+0x554>)
 801ed40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ed44:	3a7f      	subs	r2, #127	; 0x7f
 801ed46:	4111      	asrs	r1, r2
 801ed48:	ea23 0101 	bic.w	r1, r3, r1
 801ed4c:	ee07 1a10 	vmov	s14, r1
 801ed50:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801ed54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ed58:	f1c2 0217 	rsb	r2, r2, #23
 801ed5c:	4110      	asrs	r0, r2
 801ed5e:	2c00      	cmp	r4, #0
 801ed60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ed64:	bfb8      	it	lt
 801ed66:	4240      	neglt	r0, r0
 801ed68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ed6c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801ee68 <__ieee754_powf+0x558>
 801ed70:	ee17 3a10 	vmov	r3, s14
 801ed74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ed78:	f023 030f 	bic.w	r3, r3, #15
 801ed7c:	ee07 3a10 	vmov	s14, r3
 801ed80:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed84:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ed88:	eddf 7a38 	vldr	s15, [pc, #224]	; 801ee6c <__ieee754_powf+0x55c>
 801ed8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed90:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ed94:	eddf 6a36 	vldr	s13, [pc, #216]	; 801ee70 <__ieee754_powf+0x560>
 801ed98:	eeb0 0a67 	vmov.f32	s0, s15
 801ed9c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801eda0:	eeb0 6a40 	vmov.f32	s12, s0
 801eda4:	eea7 6a66 	vfms.f32	s12, s14, s13
 801eda8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801edac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801edb0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801ee74 <__ieee754_powf+0x564>
 801edb4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801ee78 <__ieee754_powf+0x568>
 801edb8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801edbc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801ee7c <__ieee754_powf+0x56c>
 801edc0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801edc4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801ee80 <__ieee754_powf+0x570>
 801edc8:	eea6 6a87 	vfma.f32	s12, s13, s14
 801edcc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801ee84 <__ieee754_powf+0x574>
 801edd0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801edd4:	eeb0 6a40 	vmov.f32	s12, s0
 801edd8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801eddc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ede0:	eeb0 7a46 	vmov.f32	s14, s12
 801ede4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801ede8:	ee20 6a06 	vmul.f32	s12, s0, s12
 801edec:	eee0 7a27 	vfma.f32	s15, s0, s15
 801edf0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801edf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801edf8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801edfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ee00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ee04:	ee10 3a10 	vmov	r3, s0
 801ee08:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801ee0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ee10:	da1a      	bge.n	801ee48 <__ieee754_powf+0x538>
 801ee12:	f7fb fd85 	bl	801a920 <scalbnf>
 801ee16:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ee1a:	e5cd      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ee1c:	4a1a      	ldr	r2, [pc, #104]	; (801ee88 <__ieee754_powf+0x578>)
 801ee1e:	4293      	cmp	r3, r2
 801ee20:	dd02      	ble.n	801ee28 <__ieee754_powf+0x518>
 801ee22:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801ee8c <__ieee754_powf+0x57c>
 801ee26:	e67b      	b.n	801eb20 <__ieee754_powf+0x210>
 801ee28:	d108      	bne.n	801ee3c <__ieee754_powf+0x52c>
 801ee2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ee2e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801ee32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee36:	f6ff af7b 	blt.w	801ed30 <__ieee754_powf+0x420>
 801ee3a:	e7f2      	b.n	801ee22 <__ieee754_powf+0x512>
 801ee3c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801ee40:	f73f af76 	bgt.w	801ed30 <__ieee754_powf+0x420>
 801ee44:	2000      	movs	r0, #0
 801ee46:	e78f      	b.n	801ed68 <__ieee754_powf+0x458>
 801ee48:	ee00 3a10 	vmov	s0, r3
 801ee4c:	e7e3      	b.n	801ee16 <__ieee754_powf+0x506>
 801ee4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ee52:	e5b1      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ee54:	eeb0 0a68 	vmov.f32	s0, s17
 801ee58:	e5ae      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ee5a:	eeb0 0a48 	vmov.f32	s0, s16
 801ee5e:	e5ab      	b.n	801e9b8 <__ieee754_powf+0xa8>
 801ee60:	2600      	movs	r6, #0
 801ee62:	e590      	b.n	801e986 <__ieee754_powf+0x76>
 801ee64:	007fffff 	.word	0x007fffff
 801ee68:	3f317218 	.word	0x3f317218
 801ee6c:	35bfbe8c 	.word	0x35bfbe8c
 801ee70:	3f317200 	.word	0x3f317200
 801ee74:	3331bb4c 	.word	0x3331bb4c
 801ee78:	b5ddea0e 	.word	0xb5ddea0e
 801ee7c:	388ab355 	.word	0x388ab355
 801ee80:	bb360b61 	.word	0xbb360b61
 801ee84:	3e2aaaab 	.word	0x3e2aaaab
 801ee88:	43160000 	.word	0x43160000
 801ee8c:	0da24260 	.word	0x0da24260

0801ee90 <__ieee754_rem_pio2f>:
 801ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee92:	ee10 6a10 	vmov	r6, s0
 801ee96:	4b8e      	ldr	r3, [pc, #568]	; (801f0d0 <__ieee754_rem_pio2f+0x240>)
 801ee98:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ee9c:	429d      	cmp	r5, r3
 801ee9e:	b087      	sub	sp, #28
 801eea0:	eef0 7a40 	vmov.f32	s15, s0
 801eea4:	4604      	mov	r4, r0
 801eea6:	dc05      	bgt.n	801eeb4 <__ieee754_rem_pio2f+0x24>
 801eea8:	2300      	movs	r3, #0
 801eeaa:	ed80 0a00 	vstr	s0, [r0]
 801eeae:	6043      	str	r3, [r0, #4]
 801eeb0:	2000      	movs	r0, #0
 801eeb2:	e01a      	b.n	801eeea <__ieee754_rem_pio2f+0x5a>
 801eeb4:	4b87      	ldr	r3, [pc, #540]	; (801f0d4 <__ieee754_rem_pio2f+0x244>)
 801eeb6:	429d      	cmp	r5, r3
 801eeb8:	dc46      	bgt.n	801ef48 <__ieee754_rem_pio2f+0xb8>
 801eeba:	2e00      	cmp	r6, #0
 801eebc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801f0d8 <__ieee754_rem_pio2f+0x248>
 801eec0:	4b86      	ldr	r3, [pc, #536]	; (801f0dc <__ieee754_rem_pio2f+0x24c>)
 801eec2:	f025 050f 	bic.w	r5, r5, #15
 801eec6:	dd1f      	ble.n	801ef08 <__ieee754_rem_pio2f+0x78>
 801eec8:	429d      	cmp	r5, r3
 801eeca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eece:	d00e      	beq.n	801eeee <__ieee754_rem_pio2f+0x5e>
 801eed0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801f0e0 <__ieee754_rem_pio2f+0x250>
 801eed4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801eed8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eedc:	ed80 0a00 	vstr	s0, [r0]
 801eee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eee4:	2001      	movs	r0, #1
 801eee6:	edc4 7a01 	vstr	s15, [r4, #4]
 801eeea:	b007      	add	sp, #28
 801eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeee:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801f0e4 <__ieee754_rem_pio2f+0x254>
 801eef2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801f0e8 <__ieee754_rem_pio2f+0x258>
 801eef6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eefa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801eefe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ef02:	edc0 6a00 	vstr	s13, [r0]
 801ef06:	e7eb      	b.n	801eee0 <__ieee754_rem_pio2f+0x50>
 801ef08:	429d      	cmp	r5, r3
 801ef0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ef0e:	d00e      	beq.n	801ef2e <__ieee754_rem_pio2f+0x9e>
 801ef10:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f0e0 <__ieee754_rem_pio2f+0x250>
 801ef14:	ee37 0a87 	vadd.f32	s0, s15, s14
 801ef18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ef1c:	ed80 0a00 	vstr	s0, [r0]
 801ef20:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ef24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef28:	edc4 7a01 	vstr	s15, [r4, #4]
 801ef2c:	e7dd      	b.n	801eeea <__ieee754_rem_pio2f+0x5a>
 801ef2e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801f0e4 <__ieee754_rem_pio2f+0x254>
 801ef32:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801f0e8 <__ieee754_rem_pio2f+0x258>
 801ef36:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ef3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ef3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ef42:	edc0 6a00 	vstr	s13, [r0]
 801ef46:	e7eb      	b.n	801ef20 <__ieee754_rem_pio2f+0x90>
 801ef48:	4b68      	ldr	r3, [pc, #416]	; (801f0ec <__ieee754_rem_pio2f+0x25c>)
 801ef4a:	429d      	cmp	r5, r3
 801ef4c:	dc72      	bgt.n	801f034 <__ieee754_rem_pio2f+0x1a4>
 801ef4e:	f7ff fb5b 	bl	801e608 <fabsf>
 801ef52:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f0f0 <__ieee754_rem_pio2f+0x260>
 801ef56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ef5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ef5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ef66:	ee17 0a90 	vmov	r0, s15
 801ef6a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f0d8 <__ieee754_rem_pio2f+0x248>
 801ef6e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ef72:	281f      	cmp	r0, #31
 801ef74:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801f0e0 <__ieee754_rem_pio2f+0x250>
 801ef78:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef7c:	eeb1 6a47 	vneg.f32	s12, s14
 801ef80:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ef84:	ee16 2a90 	vmov	r2, s13
 801ef88:	dc1c      	bgt.n	801efc4 <__ieee754_rem_pio2f+0x134>
 801ef8a:	495a      	ldr	r1, [pc, #360]	; (801f0f4 <__ieee754_rem_pio2f+0x264>)
 801ef8c:	1e47      	subs	r7, r0, #1
 801ef8e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801ef92:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801ef96:	428b      	cmp	r3, r1
 801ef98:	d014      	beq.n	801efc4 <__ieee754_rem_pio2f+0x134>
 801ef9a:	6022      	str	r2, [r4, #0]
 801ef9c:	ed94 7a00 	vldr	s14, [r4]
 801efa0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801efa4:	2e00      	cmp	r6, #0
 801efa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801efaa:	ed84 0a01 	vstr	s0, [r4, #4]
 801efae:	da9c      	bge.n	801eeea <__ieee754_rem_pio2f+0x5a>
 801efb0:	eeb1 7a47 	vneg.f32	s14, s14
 801efb4:	eeb1 0a40 	vneg.f32	s0, s0
 801efb8:	ed84 7a00 	vstr	s14, [r4]
 801efbc:	ed84 0a01 	vstr	s0, [r4, #4]
 801efc0:	4240      	negs	r0, r0
 801efc2:	e792      	b.n	801eeea <__ieee754_rem_pio2f+0x5a>
 801efc4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801efc8:	15eb      	asrs	r3, r5, #23
 801efca:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801efce:	2d08      	cmp	r5, #8
 801efd0:	dde3      	ble.n	801ef9a <__ieee754_rem_pio2f+0x10a>
 801efd2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801f0e4 <__ieee754_rem_pio2f+0x254>
 801efd6:	eef0 6a40 	vmov.f32	s13, s0
 801efda:	eee6 6a27 	vfma.f32	s13, s12, s15
 801efde:	ee30 0a66 	vsub.f32	s0, s0, s13
 801efe2:	eea6 0a27 	vfma.f32	s0, s12, s15
 801efe6:	eddf 7a40 	vldr	s15, [pc, #256]	; 801f0e8 <__ieee754_rem_pio2f+0x258>
 801efea:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801efee:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801eff2:	eef0 7a40 	vmov.f32	s15, s0
 801eff6:	ee15 2a90 	vmov	r2, s11
 801effa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801effe:	1a5b      	subs	r3, r3, r1
 801f000:	2b19      	cmp	r3, #25
 801f002:	dc04      	bgt.n	801f00e <__ieee754_rem_pio2f+0x17e>
 801f004:	edc4 5a00 	vstr	s11, [r4]
 801f008:	eeb0 0a66 	vmov.f32	s0, s13
 801f00c:	e7c6      	b.n	801ef9c <__ieee754_rem_pio2f+0x10c>
 801f00e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f0f8 <__ieee754_rem_pio2f+0x268>
 801f012:	eeb0 0a66 	vmov.f32	s0, s13
 801f016:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f01a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f01e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f0fc <__ieee754_rem_pio2f+0x26c>
 801f022:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f026:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f02a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f02e:	ed84 7a00 	vstr	s14, [r4]
 801f032:	e7b3      	b.n	801ef9c <__ieee754_rem_pio2f+0x10c>
 801f034:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f038:	db06      	blt.n	801f048 <__ieee754_rem_pio2f+0x1b8>
 801f03a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f03e:	edc0 7a01 	vstr	s15, [r0, #4]
 801f042:	edc0 7a00 	vstr	s15, [r0]
 801f046:	e733      	b.n	801eeb0 <__ieee754_rem_pio2f+0x20>
 801f048:	15ea      	asrs	r2, r5, #23
 801f04a:	3a86      	subs	r2, #134	; 0x86
 801f04c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f050:	ee07 3a90 	vmov	s15, r3
 801f054:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f058:	eddf 6a29 	vldr	s13, [pc, #164]	; 801f100 <__ieee754_rem_pio2f+0x270>
 801f05c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f064:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f06c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f070:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f078:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f07c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f080:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f088:	edcd 7a05 	vstr	s15, [sp, #20]
 801f08c:	d11e      	bne.n	801f0cc <__ieee754_rem_pio2f+0x23c>
 801f08e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f096:	bf14      	ite	ne
 801f098:	2302      	movne	r3, #2
 801f09a:	2301      	moveq	r3, #1
 801f09c:	4919      	ldr	r1, [pc, #100]	; (801f104 <__ieee754_rem_pio2f+0x274>)
 801f09e:	9101      	str	r1, [sp, #4]
 801f0a0:	2102      	movs	r1, #2
 801f0a2:	9100      	str	r1, [sp, #0]
 801f0a4:	a803      	add	r0, sp, #12
 801f0a6:	4621      	mov	r1, r4
 801f0a8:	f000 f892 	bl	801f1d0 <__kernel_rem_pio2f>
 801f0ac:	2e00      	cmp	r6, #0
 801f0ae:	f6bf af1c 	bge.w	801eeea <__ieee754_rem_pio2f+0x5a>
 801f0b2:	edd4 7a00 	vldr	s15, [r4]
 801f0b6:	eef1 7a67 	vneg.f32	s15, s15
 801f0ba:	edc4 7a00 	vstr	s15, [r4]
 801f0be:	edd4 7a01 	vldr	s15, [r4, #4]
 801f0c2:	eef1 7a67 	vneg.f32	s15, s15
 801f0c6:	edc4 7a01 	vstr	s15, [r4, #4]
 801f0ca:	e779      	b.n	801efc0 <__ieee754_rem_pio2f+0x130>
 801f0cc:	2303      	movs	r3, #3
 801f0ce:	e7e5      	b.n	801f09c <__ieee754_rem_pio2f+0x20c>
 801f0d0:	3f490fd8 	.word	0x3f490fd8
 801f0d4:	4016cbe3 	.word	0x4016cbe3
 801f0d8:	3fc90f80 	.word	0x3fc90f80
 801f0dc:	3fc90fd0 	.word	0x3fc90fd0
 801f0e0:	37354443 	.word	0x37354443
 801f0e4:	37354400 	.word	0x37354400
 801f0e8:	2e85a308 	.word	0x2e85a308
 801f0ec:	43490f80 	.word	0x43490f80
 801f0f0:	3f22f984 	.word	0x3f22f984
 801f0f4:	080207ac 	.word	0x080207ac
 801f0f8:	2e85a300 	.word	0x2e85a300
 801f0fc:	248d3132 	.word	0x248d3132
 801f100:	43800000 	.word	0x43800000
 801f104:	0802082c 	.word	0x0802082c

0801f108 <__ieee754_sqrtf>:
 801f108:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f10c:	4770      	bx	lr
	...

0801f110 <__kernel_cosf>:
 801f110:	ee10 3a10 	vmov	r3, s0
 801f114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f118:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f11c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f120:	da05      	bge.n	801f12e <__kernel_cosf+0x1e>
 801f122:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f126:	ee17 2a90 	vmov	r2, s15
 801f12a:	2a00      	cmp	r2, #0
 801f12c:	d03d      	beq.n	801f1aa <__kernel_cosf+0x9a>
 801f12e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801f132:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f1b0 <__kernel_cosf+0xa0>
 801f136:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801f1b4 <__kernel_cosf+0xa4>
 801f13a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801f1b8 <__kernel_cosf+0xa8>
 801f13e:	4a1f      	ldr	r2, [pc, #124]	; (801f1bc <__kernel_cosf+0xac>)
 801f140:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f144:	4293      	cmp	r3, r2
 801f146:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f1c0 <__kernel_cosf+0xb0>
 801f14a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f14e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801f1c4 <__kernel_cosf+0xb4>
 801f152:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f156:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f1c8 <__kernel_cosf+0xb8>
 801f15a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801f15e:	eeb0 7a66 	vmov.f32	s14, s13
 801f162:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f166:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f16a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801f16e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801f172:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801f176:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f17a:	dc04      	bgt.n	801f186 <__kernel_cosf+0x76>
 801f17c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801f180:	ee36 0a47 	vsub.f32	s0, s12, s14
 801f184:	4770      	bx	lr
 801f186:	4a11      	ldr	r2, [pc, #68]	; (801f1cc <__kernel_cosf+0xbc>)
 801f188:	4293      	cmp	r3, r2
 801f18a:	bfda      	itte	le
 801f18c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f190:	ee06 3a90 	vmovle	s13, r3
 801f194:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801f198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f19c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801f1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f1a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f1a8:	4770      	bx	lr
 801f1aa:	eeb0 0a46 	vmov.f32	s0, s12
 801f1ae:	4770      	bx	lr
 801f1b0:	ad47d74e 	.word	0xad47d74e
 801f1b4:	310f74f6 	.word	0x310f74f6
 801f1b8:	3d2aaaab 	.word	0x3d2aaaab
 801f1bc:	3e999999 	.word	0x3e999999
 801f1c0:	b493f27c 	.word	0xb493f27c
 801f1c4:	37d00d01 	.word	0x37d00d01
 801f1c8:	bab60b61 	.word	0xbab60b61
 801f1cc:	3f480000 	.word	0x3f480000

0801f1d0 <__kernel_rem_pio2f>:
 801f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d4:	ed2d 8b04 	vpush	{d8-d9}
 801f1d8:	b0d7      	sub	sp, #348	; 0x15c
 801f1da:	4616      	mov	r6, r2
 801f1dc:	4698      	mov	r8, r3
 801f1de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f1e0:	4bbb      	ldr	r3, [pc, #748]	; (801f4d0 <__kernel_rem_pio2f+0x300>)
 801f1e2:	9001      	str	r0, [sp, #4]
 801f1e4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801f1e8:	1d33      	adds	r3, r6, #4
 801f1ea:	460d      	mov	r5, r1
 801f1ec:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801f1f0:	db29      	blt.n	801f246 <__kernel_rem_pio2f+0x76>
 801f1f2:	1ef1      	subs	r1, r6, #3
 801f1f4:	bf48      	it	mi
 801f1f6:	1d31      	addmi	r1, r6, #4
 801f1f8:	10c9      	asrs	r1, r1, #3
 801f1fa:	1c4c      	adds	r4, r1, #1
 801f1fc:	00e3      	lsls	r3, r4, #3
 801f1fe:	9302      	str	r3, [sp, #8]
 801f200:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f202:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f206:	eba1 0009 	sub.w	r0, r1, r9
 801f20a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801f20e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801f212:	eb07 0c09 	add.w	ip, r7, r9
 801f216:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801f21a:	2300      	movs	r3, #0
 801f21c:	4563      	cmp	r3, ip
 801f21e:	dd14      	ble.n	801f24a <__kernel_rem_pio2f+0x7a>
 801f220:	ab1a      	add	r3, sp, #104	; 0x68
 801f222:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801f226:	46cc      	mov	ip, r9
 801f228:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801f22c:	f1c8 0b01 	rsb	fp, r8, #1
 801f230:	eb0b 020c 	add.w	r2, fp, ip
 801f234:	4297      	cmp	r7, r2
 801f236:	db27      	blt.n	801f288 <__kernel_rem_pio2f+0xb8>
 801f238:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f23c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f240:	4618      	mov	r0, r3
 801f242:	2200      	movs	r2, #0
 801f244:	e016      	b.n	801f274 <__kernel_rem_pio2f+0xa4>
 801f246:	2100      	movs	r1, #0
 801f248:	e7d7      	b.n	801f1fa <__kernel_rem_pio2f+0x2a>
 801f24a:	42d8      	cmn	r0, r3
 801f24c:	bf5d      	ittte	pl
 801f24e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801f252:	ee07 2a90 	vmovpl	s15, r2
 801f256:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f25a:	eef0 7a47 	vmovmi.f32	s15, s14
 801f25e:	ecea 7a01 	vstmia	sl!, {s15}
 801f262:	3301      	adds	r3, #1
 801f264:	e7da      	b.n	801f21c <__kernel_rem_pio2f+0x4c>
 801f266:	ecfe 6a01 	vldmia	lr!, {s13}
 801f26a:	ed90 7a00 	vldr	s14, [r0]
 801f26e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f272:	3201      	adds	r2, #1
 801f274:	454a      	cmp	r2, r9
 801f276:	f1a0 0004 	sub.w	r0, r0, #4
 801f27a:	ddf4      	ble.n	801f266 <__kernel_rem_pio2f+0x96>
 801f27c:	ecea 7a01 	vstmia	sl!, {s15}
 801f280:	3304      	adds	r3, #4
 801f282:	f10c 0c01 	add.w	ip, ip, #1
 801f286:	e7d3      	b.n	801f230 <__kernel_rem_pio2f+0x60>
 801f288:	ab06      	add	r3, sp, #24
 801f28a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801f28e:	9304      	str	r3, [sp, #16]
 801f290:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f292:	eddf 8a92 	vldr	s17, [pc, #584]	; 801f4dc <__kernel_rem_pio2f+0x30c>
 801f296:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801f4d8 <__kernel_rem_pio2f+0x308>
 801f29a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f29e:	9303      	str	r3, [sp, #12]
 801f2a0:	46ba      	mov	sl, r7
 801f2a2:	ab56      	add	r3, sp, #344	; 0x158
 801f2a4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f2a8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801f2ac:	ab06      	add	r3, sp, #24
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	4652      	mov	r2, sl
 801f2b2:	2a00      	cmp	r2, #0
 801f2b4:	dc51      	bgt.n	801f35a <__kernel_rem_pio2f+0x18a>
 801f2b6:	4620      	mov	r0, r4
 801f2b8:	9305      	str	r3, [sp, #20]
 801f2ba:	f7fb fb31 	bl	801a920 <scalbnf>
 801f2be:	eeb0 8a40 	vmov.f32	s16, s0
 801f2c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f2c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f2ca:	f000 fa53 	bl	801f774 <floorf>
 801f2ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f2d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f2d6:	2c00      	cmp	r4, #0
 801f2d8:	9b05      	ldr	r3, [sp, #20]
 801f2da:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f2de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f2e2:	edcd 7a00 	vstr	s15, [sp]
 801f2e6:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f2ea:	dd4b      	ble.n	801f384 <__kernel_rem_pio2f+0x1b4>
 801f2ec:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f2f0:	aa06      	add	r2, sp, #24
 801f2f2:	f1c4 0e08 	rsb	lr, r4, #8
 801f2f6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f2fa:	ee17 1a90 	vmov	r1, s15
 801f2fe:	fa42 f00e 	asr.w	r0, r2, lr
 801f302:	4401      	add	r1, r0
 801f304:	9100      	str	r1, [sp, #0]
 801f306:	fa00 f00e 	lsl.w	r0, r0, lr
 801f30a:	a906      	add	r1, sp, #24
 801f30c:	1a12      	subs	r2, r2, r0
 801f30e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f312:	f1c4 0007 	rsb	r0, r4, #7
 801f316:	fa42 fb00 	asr.w	fp, r2, r0
 801f31a:	f1bb 0f00 	cmp.w	fp, #0
 801f31e:	dd43      	ble.n	801f3a8 <__kernel_rem_pio2f+0x1d8>
 801f320:	9a00      	ldr	r2, [sp, #0]
 801f322:	f04f 0e00 	mov.w	lr, #0
 801f326:	3201      	adds	r2, #1
 801f328:	9200      	str	r2, [sp, #0]
 801f32a:	4670      	mov	r0, lr
 801f32c:	45f2      	cmp	sl, lr
 801f32e:	dc6c      	bgt.n	801f40a <__kernel_rem_pio2f+0x23a>
 801f330:	2c00      	cmp	r4, #0
 801f332:	dd04      	ble.n	801f33e <__kernel_rem_pio2f+0x16e>
 801f334:	2c01      	cmp	r4, #1
 801f336:	d079      	beq.n	801f42c <__kernel_rem_pio2f+0x25c>
 801f338:	2c02      	cmp	r4, #2
 801f33a:	f000 8082 	beq.w	801f442 <__kernel_rem_pio2f+0x272>
 801f33e:	f1bb 0f02 	cmp.w	fp, #2
 801f342:	d131      	bne.n	801f3a8 <__kernel_rem_pio2f+0x1d8>
 801f344:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f348:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f34c:	b360      	cbz	r0, 801f3a8 <__kernel_rem_pio2f+0x1d8>
 801f34e:	4620      	mov	r0, r4
 801f350:	f7fb fae6 	bl	801a920 <scalbnf>
 801f354:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f358:	e026      	b.n	801f3a8 <__kernel_rem_pio2f+0x1d8>
 801f35a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f35e:	3a01      	subs	r2, #1
 801f360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f364:	a942      	add	r1, sp, #264	; 0x108
 801f366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f36a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801f36e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f372:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f376:	eca0 0a01 	vstmia	r0!, {s0}
 801f37a:	ed9c 0a00 	vldr	s0, [ip]
 801f37e:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f382:	e796      	b.n	801f2b2 <__kernel_rem_pio2f+0xe2>
 801f384:	d107      	bne.n	801f396 <__kernel_rem_pio2f+0x1c6>
 801f386:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801f38a:	a906      	add	r1, sp, #24
 801f38c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f390:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801f394:	e7c1      	b.n	801f31a <__kernel_rem_pio2f+0x14a>
 801f396:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f39a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3a2:	da2f      	bge.n	801f404 <__kernel_rem_pio2f+0x234>
 801f3a4:	f04f 0b00 	mov.w	fp, #0
 801f3a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3b0:	f040 8098 	bne.w	801f4e4 <__kernel_rem_pio2f+0x314>
 801f3b4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f3b8:	469c      	mov	ip, r3
 801f3ba:	2200      	movs	r2, #0
 801f3bc:	45bc      	cmp	ip, r7
 801f3be:	da48      	bge.n	801f452 <__kernel_rem_pio2f+0x282>
 801f3c0:	2a00      	cmp	r2, #0
 801f3c2:	d05f      	beq.n	801f484 <__kernel_rem_pio2f+0x2b4>
 801f3c4:	aa06      	add	r2, sp, #24
 801f3c6:	3c08      	subs	r4, #8
 801f3c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f3cc:	2900      	cmp	r1, #0
 801f3ce:	d07d      	beq.n	801f4cc <__kernel_rem_pio2f+0x2fc>
 801f3d0:	4620      	mov	r0, r4
 801f3d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f3d6:	9301      	str	r3, [sp, #4]
 801f3d8:	f7fb faa2 	bl	801a920 <scalbnf>
 801f3dc:	9b01      	ldr	r3, [sp, #4]
 801f3de:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801f4dc <__kernel_rem_pio2f+0x30c>
 801f3e2:	4619      	mov	r1, r3
 801f3e4:	2900      	cmp	r1, #0
 801f3e6:	f280 80af 	bge.w	801f548 <__kernel_rem_pio2f+0x378>
 801f3ea:	4618      	mov	r0, r3
 801f3ec:	2400      	movs	r4, #0
 801f3ee:	2800      	cmp	r0, #0
 801f3f0:	f2c0 80d0 	blt.w	801f594 <__kernel_rem_pio2f+0x3c4>
 801f3f4:	a942      	add	r1, sp, #264	; 0x108
 801f3f6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801f3fa:	4a36      	ldr	r2, [pc, #216]	; (801f4d4 <__kernel_rem_pio2f+0x304>)
 801f3fc:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f400:	2100      	movs	r1, #0
 801f402:	e0bb      	b.n	801f57c <__kernel_rem_pio2f+0x3ac>
 801f404:	f04f 0b02 	mov.w	fp, #2
 801f408:	e78a      	b.n	801f320 <__kernel_rem_pio2f+0x150>
 801f40a:	681a      	ldr	r2, [r3, #0]
 801f40c:	b948      	cbnz	r0, 801f422 <__kernel_rem_pio2f+0x252>
 801f40e:	b11a      	cbz	r2, 801f418 <__kernel_rem_pio2f+0x248>
 801f410:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f414:	601a      	str	r2, [r3, #0]
 801f416:	2201      	movs	r2, #1
 801f418:	f10e 0e01 	add.w	lr, lr, #1
 801f41c:	3304      	adds	r3, #4
 801f41e:	4610      	mov	r0, r2
 801f420:	e784      	b.n	801f32c <__kernel_rem_pio2f+0x15c>
 801f422:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f426:	601a      	str	r2, [r3, #0]
 801f428:	4602      	mov	r2, r0
 801f42a:	e7f5      	b.n	801f418 <__kernel_rem_pio2f+0x248>
 801f42c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f430:	ab06      	add	r3, sp, #24
 801f432:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f43a:	aa06      	add	r2, sp, #24
 801f43c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801f440:	e77d      	b.n	801f33e <__kernel_rem_pio2f+0x16e>
 801f442:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f446:	ab06      	add	r3, sp, #24
 801f448:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f450:	e7f3      	b.n	801f43a <__kernel_rem_pio2f+0x26a>
 801f452:	a906      	add	r1, sp, #24
 801f454:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801f458:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f45c:	4302      	orrs	r2, r0
 801f45e:	e7ad      	b.n	801f3bc <__kernel_rem_pio2f+0x1ec>
 801f460:	3001      	adds	r0, #1
 801f462:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f466:	2a00      	cmp	r2, #0
 801f468:	d0fa      	beq.n	801f460 <__kernel_rem_pio2f+0x290>
 801f46a:	a91a      	add	r1, sp, #104	; 0x68
 801f46c:	eb0a 0208 	add.w	r2, sl, r8
 801f470:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f474:	f10a 0301 	add.w	r3, sl, #1
 801f478:	eb0a 0100 	add.w	r1, sl, r0
 801f47c:	4299      	cmp	r1, r3
 801f47e:	da04      	bge.n	801f48a <__kernel_rem_pio2f+0x2ba>
 801f480:	468a      	mov	sl, r1
 801f482:	e70e      	b.n	801f2a2 <__kernel_rem_pio2f+0xd2>
 801f484:	9b04      	ldr	r3, [sp, #16]
 801f486:	2001      	movs	r0, #1
 801f488:	e7eb      	b.n	801f462 <__kernel_rem_pio2f+0x292>
 801f48a:	9803      	ldr	r0, [sp, #12]
 801f48c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f490:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f494:	9000      	str	r0, [sp, #0]
 801f496:	ee07 0a90 	vmov	s15, r0
 801f49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f49e:	2000      	movs	r0, #0
 801f4a0:	ece2 7a01 	vstmia	r2!, {s15}
 801f4a4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f4a8:	4696      	mov	lr, r2
 801f4aa:	4548      	cmp	r0, r9
 801f4ac:	dd06      	ble.n	801f4bc <__kernel_rem_pio2f+0x2ec>
 801f4ae:	a842      	add	r0, sp, #264	; 0x108
 801f4b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f4b4:	edc0 7a00 	vstr	s15, [r0]
 801f4b8:	3301      	adds	r3, #1
 801f4ba:	e7df      	b.n	801f47c <__kernel_rem_pio2f+0x2ac>
 801f4bc:	ecfc 6a01 	vldmia	ip!, {s13}
 801f4c0:	ed3e 7a01 	vldmdb	lr!, {s14}
 801f4c4:	3001      	adds	r0, #1
 801f4c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f4ca:	e7ee      	b.n	801f4aa <__kernel_rem_pio2f+0x2da>
 801f4cc:	3b01      	subs	r3, #1
 801f4ce:	e779      	b.n	801f3c4 <__kernel_rem_pio2f+0x1f4>
 801f4d0:	08020b70 	.word	0x08020b70
 801f4d4:	08020b44 	.word	0x08020b44
 801f4d8:	43800000 	.word	0x43800000
 801f4dc:	3b800000 	.word	0x3b800000
 801f4e0:	00000000 	.word	0x00000000
 801f4e4:	9b02      	ldr	r3, [sp, #8]
 801f4e6:	eeb0 0a48 	vmov.f32	s0, s16
 801f4ea:	1b98      	subs	r0, r3, r6
 801f4ec:	f7fb fa18 	bl	801a920 <scalbnf>
 801f4f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f4d8 <__kernel_rem_pio2f+0x308>
 801f4f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4fc:	db1b      	blt.n	801f536 <__kernel_rem_pio2f+0x366>
 801f4fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f4dc <__kernel_rem_pio2f+0x30c>
 801f502:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f506:	aa06      	add	r2, sp, #24
 801f508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f50c:	a906      	add	r1, sp, #24
 801f50e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f512:	3408      	adds	r4, #8
 801f514:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f51c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f520:	ee10 3a10 	vmov	r3, s0
 801f524:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f528:	ee17 2a90 	vmov	r2, s15
 801f52c:	f10a 0301 	add.w	r3, sl, #1
 801f530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f534:	e74c      	b.n	801f3d0 <__kernel_rem_pio2f+0x200>
 801f536:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f53a:	aa06      	add	r2, sp, #24
 801f53c:	ee10 3a10 	vmov	r3, s0
 801f540:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f544:	4653      	mov	r3, sl
 801f546:	e743      	b.n	801f3d0 <__kernel_rem_pio2f+0x200>
 801f548:	aa42      	add	r2, sp, #264	; 0x108
 801f54a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f54e:	aa06      	add	r2, sp, #24
 801f550:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801f554:	9201      	str	r2, [sp, #4]
 801f556:	ee07 2a90 	vmov	s15, r2
 801f55a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f55e:	3901      	subs	r1, #1
 801f560:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f564:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f568:	edc0 7a00 	vstr	s15, [r0]
 801f56c:	e73a      	b.n	801f3e4 <__kernel_rem_pio2f+0x214>
 801f56e:	ecf2 6a01 	vldmia	r2!, {s13}
 801f572:	ecb6 7a01 	vldmia	r6!, {s14}
 801f576:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f57a:	3101      	adds	r1, #1
 801f57c:	42b9      	cmp	r1, r7
 801f57e:	dc01      	bgt.n	801f584 <__kernel_rem_pio2f+0x3b4>
 801f580:	428c      	cmp	r4, r1
 801f582:	daf4      	bge.n	801f56e <__kernel_rem_pio2f+0x39e>
 801f584:	aa56      	add	r2, sp, #344	; 0x158
 801f586:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801f58a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f58e:	3801      	subs	r0, #1
 801f590:	3401      	adds	r4, #1
 801f592:	e72c      	b.n	801f3ee <__kernel_rem_pio2f+0x21e>
 801f594:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f596:	2a02      	cmp	r2, #2
 801f598:	dc0a      	bgt.n	801f5b0 <__kernel_rem_pio2f+0x3e0>
 801f59a:	2a00      	cmp	r2, #0
 801f59c:	dc61      	bgt.n	801f662 <__kernel_rem_pio2f+0x492>
 801f59e:	d03c      	beq.n	801f61a <__kernel_rem_pio2f+0x44a>
 801f5a0:	9b00      	ldr	r3, [sp, #0]
 801f5a2:	f003 0007 	and.w	r0, r3, #7
 801f5a6:	b057      	add	sp, #348	; 0x15c
 801f5a8:	ecbd 8b04 	vpop	{d8-d9}
 801f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5b0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f5b2:	2a03      	cmp	r2, #3
 801f5b4:	d1f4      	bne.n	801f5a0 <__kernel_rem_pio2f+0x3d0>
 801f5b6:	aa2e      	add	r2, sp, #184	; 0xb8
 801f5b8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f5bc:	4608      	mov	r0, r1
 801f5be:	461c      	mov	r4, r3
 801f5c0:	2c00      	cmp	r4, #0
 801f5c2:	f1a0 0004 	sub.w	r0, r0, #4
 801f5c6:	dc59      	bgt.n	801f67c <__kernel_rem_pio2f+0x4ac>
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	2801      	cmp	r0, #1
 801f5cc:	f1a1 0104 	sub.w	r1, r1, #4
 801f5d0:	dc64      	bgt.n	801f69c <__kernel_rem_pio2f+0x4cc>
 801f5d2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f5d6:	2b01      	cmp	r3, #1
 801f5d8:	dc70      	bgt.n	801f6bc <__kernel_rem_pio2f+0x4ec>
 801f5da:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801f5de:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801f5e2:	f1bb 0f00 	cmp.w	fp, #0
 801f5e6:	d172      	bne.n	801f6ce <__kernel_rem_pio2f+0x4fe>
 801f5e8:	edc5 6a00 	vstr	s13, [r5]
 801f5ec:	ed85 7a01 	vstr	s14, [r5, #4]
 801f5f0:	edc5 7a02 	vstr	s15, [r5, #8]
 801f5f4:	e7d4      	b.n	801f5a0 <__kernel_rem_pio2f+0x3d0>
 801f5f6:	aa2e      	add	r2, sp, #184	; 0xb8
 801f5f8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f5fc:	ed91 7a00 	vldr	s14, [r1]
 801f600:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f604:	3b01      	subs	r3, #1
 801f606:	2b00      	cmp	r3, #0
 801f608:	daf5      	bge.n	801f5f6 <__kernel_rem_pio2f+0x426>
 801f60a:	f1bb 0f00 	cmp.w	fp, #0
 801f60e:	d001      	beq.n	801f614 <__kernel_rem_pio2f+0x444>
 801f610:	eef1 7a67 	vneg.f32	s15, s15
 801f614:	edc5 7a00 	vstr	s15, [r5]
 801f618:	e7c2      	b.n	801f5a0 <__kernel_rem_pio2f+0x3d0>
 801f61a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f61e:	e7f2      	b.n	801f606 <__kernel_rem_pio2f+0x436>
 801f620:	aa2e      	add	r2, sp, #184	; 0xb8
 801f622:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f626:	edd0 7a00 	vldr	s15, [r0]
 801f62a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f62e:	3901      	subs	r1, #1
 801f630:	2900      	cmp	r1, #0
 801f632:	daf5      	bge.n	801f620 <__kernel_rem_pio2f+0x450>
 801f634:	f1bb 0f00 	cmp.w	fp, #0
 801f638:	d017      	beq.n	801f66a <__kernel_rem_pio2f+0x49a>
 801f63a:	eef1 7a47 	vneg.f32	s15, s14
 801f63e:	edc5 7a00 	vstr	s15, [r5]
 801f642:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801f646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f64a:	a82f      	add	r0, sp, #188	; 0xbc
 801f64c:	2101      	movs	r1, #1
 801f64e:	428b      	cmp	r3, r1
 801f650:	da0e      	bge.n	801f670 <__kernel_rem_pio2f+0x4a0>
 801f652:	f1bb 0f00 	cmp.w	fp, #0
 801f656:	d001      	beq.n	801f65c <__kernel_rem_pio2f+0x48c>
 801f658:	eef1 7a67 	vneg.f32	s15, s15
 801f65c:	edc5 7a01 	vstr	s15, [r5, #4]
 801f660:	e79e      	b.n	801f5a0 <__kernel_rem_pio2f+0x3d0>
 801f662:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801f4e0 <__kernel_rem_pio2f+0x310>
 801f666:	4619      	mov	r1, r3
 801f668:	e7e2      	b.n	801f630 <__kernel_rem_pio2f+0x460>
 801f66a:	eef0 7a47 	vmov.f32	s15, s14
 801f66e:	e7e6      	b.n	801f63e <__kernel_rem_pio2f+0x46e>
 801f670:	ecb0 7a01 	vldmia	r0!, {s14}
 801f674:	3101      	adds	r1, #1
 801f676:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f67a:	e7e8      	b.n	801f64e <__kernel_rem_pio2f+0x47e>
 801f67c:	edd0 7a00 	vldr	s15, [r0]
 801f680:	edd0 6a01 	vldr	s13, [r0, #4]
 801f684:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f688:	3c01      	subs	r4, #1
 801f68a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f68e:	ed80 7a00 	vstr	s14, [r0]
 801f692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f696:	edc0 7a01 	vstr	s15, [r0, #4]
 801f69a:	e791      	b.n	801f5c0 <__kernel_rem_pio2f+0x3f0>
 801f69c:	edd1 7a00 	vldr	s15, [r1]
 801f6a0:	edd1 6a01 	vldr	s13, [r1, #4]
 801f6a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f6a8:	3801      	subs	r0, #1
 801f6aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f6ae:	ed81 7a00 	vstr	s14, [r1]
 801f6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f6b6:	edc1 7a01 	vstr	s15, [r1, #4]
 801f6ba:	e786      	b.n	801f5ca <__kernel_rem_pio2f+0x3fa>
 801f6bc:	aa2e      	add	r2, sp, #184	; 0xb8
 801f6be:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f6c2:	ed91 7a00 	vldr	s14, [r1]
 801f6c6:	3b01      	subs	r3, #1
 801f6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f6cc:	e783      	b.n	801f5d6 <__kernel_rem_pio2f+0x406>
 801f6ce:	eef1 6a66 	vneg.f32	s13, s13
 801f6d2:	eeb1 7a47 	vneg.f32	s14, s14
 801f6d6:	edc5 6a00 	vstr	s13, [r5]
 801f6da:	ed85 7a01 	vstr	s14, [r5, #4]
 801f6de:	eef1 7a67 	vneg.f32	s15, s15
 801f6e2:	e785      	b.n	801f5f0 <__kernel_rem_pio2f+0x420>

0801f6e4 <__kernel_sinf>:
 801f6e4:	ee10 3a10 	vmov	r3, s0
 801f6e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f6ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f6f0:	da04      	bge.n	801f6fc <__kernel_sinf+0x18>
 801f6f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f6f6:	ee17 3a90 	vmov	r3, s15
 801f6fa:	b35b      	cbz	r3, 801f754 <__kernel_sinf+0x70>
 801f6fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f700:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f758 <__kernel_sinf+0x74>
 801f704:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f75c <__kernel_sinf+0x78>
 801f708:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f70c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f760 <__kernel_sinf+0x7c>
 801f710:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f714:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f764 <__kernel_sinf+0x80>
 801f718:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f71c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f768 <__kernel_sinf+0x84>
 801f720:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f724:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f728:	b930      	cbnz	r0, 801f738 <__kernel_sinf+0x54>
 801f72a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f76c <__kernel_sinf+0x88>
 801f72e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f732:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f736:	4770      	bx	lr
 801f738:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f73c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f740:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f744:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f748:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f770 <__kernel_sinf+0x8c>
 801f74c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f750:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f754:	4770      	bx	lr
 801f756:	bf00      	nop
 801f758:	2f2ec9d3 	.word	0x2f2ec9d3
 801f75c:	b2d72f34 	.word	0xb2d72f34
 801f760:	3638ef1b 	.word	0x3638ef1b
 801f764:	b9500d01 	.word	0xb9500d01
 801f768:	3c088889 	.word	0x3c088889
 801f76c:	be2aaaab 	.word	0xbe2aaaab
 801f770:	3e2aaaab 	.word	0x3e2aaaab

0801f774 <floorf>:
 801f774:	ee10 3a10 	vmov	r3, s0
 801f778:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f77c:	3a7f      	subs	r2, #127	; 0x7f
 801f77e:	2a16      	cmp	r2, #22
 801f780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f784:	dc2a      	bgt.n	801f7dc <floorf+0x68>
 801f786:	2a00      	cmp	r2, #0
 801f788:	da11      	bge.n	801f7ae <floorf+0x3a>
 801f78a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f7ec <floorf+0x78>
 801f78e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f792:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f79a:	dd05      	ble.n	801f7a8 <floorf+0x34>
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	da23      	bge.n	801f7e8 <floorf+0x74>
 801f7a0:	4a13      	ldr	r2, [pc, #76]	; (801f7f0 <floorf+0x7c>)
 801f7a2:	2900      	cmp	r1, #0
 801f7a4:	bf18      	it	ne
 801f7a6:	4613      	movne	r3, r2
 801f7a8:	ee00 3a10 	vmov	s0, r3
 801f7ac:	4770      	bx	lr
 801f7ae:	4911      	ldr	r1, [pc, #68]	; (801f7f4 <floorf+0x80>)
 801f7b0:	4111      	asrs	r1, r2
 801f7b2:	420b      	tst	r3, r1
 801f7b4:	d0fa      	beq.n	801f7ac <floorf+0x38>
 801f7b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f7ec <floorf+0x78>
 801f7ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f7be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7c6:	ddef      	ble.n	801f7a8 <floorf+0x34>
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	bfbe      	ittt	lt
 801f7cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f7d0:	fa40 f202 	asrlt.w	r2, r0, r2
 801f7d4:	189b      	addlt	r3, r3, r2
 801f7d6:	ea23 0301 	bic.w	r3, r3, r1
 801f7da:	e7e5      	b.n	801f7a8 <floorf+0x34>
 801f7dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f7e0:	d3e4      	bcc.n	801f7ac <floorf+0x38>
 801f7e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f7e6:	4770      	bx	lr
 801f7e8:	2300      	movs	r3, #0
 801f7ea:	e7dd      	b.n	801f7a8 <floorf+0x34>
 801f7ec:	7149f2ca 	.word	0x7149f2ca
 801f7f0:	bf800000 	.word	0xbf800000
 801f7f4:	007fffff 	.word	0x007fffff

0801f7f8 <rintf>:
 801f7f8:	ee10 2a10 	vmov	r2, s0
 801f7fc:	b513      	push	{r0, r1, r4, lr}
 801f7fe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f802:	397f      	subs	r1, #127	; 0x7f
 801f804:	2916      	cmp	r1, #22
 801f806:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f80a:	dc47      	bgt.n	801f89c <rintf+0xa4>
 801f80c:	b32b      	cbz	r3, 801f85a <rintf+0x62>
 801f80e:	2900      	cmp	r1, #0
 801f810:	ee10 3a10 	vmov	r3, s0
 801f814:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801f818:	da21      	bge.n	801f85e <rintf+0x66>
 801f81a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801f81e:	425b      	negs	r3, r3
 801f820:	4921      	ldr	r1, [pc, #132]	; (801f8a8 <rintf+0xb0>)
 801f822:	0a5b      	lsrs	r3, r3, #9
 801f824:	0d12      	lsrs	r2, r2, #20
 801f826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f82a:	0512      	lsls	r2, r2, #20
 801f82c:	4313      	orrs	r3, r2
 801f82e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801f832:	ee07 3a90 	vmov	s15, r3
 801f836:	edd1 6a00 	vldr	s13, [r1]
 801f83a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801f83e:	ed8d 7a01 	vstr	s14, [sp, #4]
 801f842:	eddd 7a01 	vldr	s15, [sp, #4]
 801f846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f84a:	ee17 3a90 	vmov	r3, s15
 801f84e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f852:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801f856:	ee00 3a10 	vmov	s0, r3
 801f85a:	b002      	add	sp, #8
 801f85c:	bd10      	pop	{r4, pc}
 801f85e:	4a13      	ldr	r2, [pc, #76]	; (801f8ac <rintf+0xb4>)
 801f860:	410a      	asrs	r2, r1
 801f862:	4213      	tst	r3, r2
 801f864:	d0f9      	beq.n	801f85a <rintf+0x62>
 801f866:	0854      	lsrs	r4, r2, #1
 801f868:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801f86c:	d006      	beq.n	801f87c <rintf+0x84>
 801f86e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f872:	ea23 0304 	bic.w	r3, r3, r4
 801f876:	fa42 f101 	asr.w	r1, r2, r1
 801f87a:	430b      	orrs	r3, r1
 801f87c:	4a0a      	ldr	r2, [pc, #40]	; (801f8a8 <rintf+0xb0>)
 801f87e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f882:	ed90 7a00 	vldr	s14, [r0]
 801f886:	ee07 3a90 	vmov	s15, r3
 801f88a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f88e:	edcd 7a01 	vstr	s15, [sp, #4]
 801f892:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f896:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f89a:	e7de      	b.n	801f85a <rintf+0x62>
 801f89c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f8a0:	d3db      	bcc.n	801f85a <rintf+0x62>
 801f8a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f8a6:	e7d8      	b.n	801f85a <rintf+0x62>
 801f8a8:	08020b7c 	.word	0x08020b7c
 801f8ac:	007fffff 	.word	0x007fffff

0801f8b0 <_init>:
 801f8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8b2:	bf00      	nop
 801f8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8b6:	bc08      	pop	{r3}
 801f8b8:	469e      	mov	lr, r3
 801f8ba:	4770      	bx	lr

0801f8bc <_fini>:
 801f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8be:	bf00      	nop
 801f8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f8c2:	bc08      	pop	{r3}
 801f8c4:	469e      	mov	lr, r3
 801f8c6:	4770      	bx	lr
