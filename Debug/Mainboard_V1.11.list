
Mainboard_V1.11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000109c  0801ef18  0801ef18  0002ef18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ffb4  0801ffb4  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801ffb4  0801ffb4  0002ffb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ffbc  0801ffbc  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ffbc  0801ffbc  0002ffbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ffc0  0801ffc0  0002ffc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801ffc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a7ac  20000220  080201e4  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a9cc  080201e4  0003a9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009be72  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009e84  00000000  00000000  000cc0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002790  00000000  00000000  000d5f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e8  00000000  00000000  000d86d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ec2  00000000  00000000  000dabc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043fdd  00000000  00000000  0010ba82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa68  00000000  00000000  0014fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023a4c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd24  00000000  00000000  0023a51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ef00 	.word	0x0801ef00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0801ef00 	.word	0x0801ef00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <ABT>:

void ABT(ABT_t *filt)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <ABT+0x1a4>)
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4690      	mov	r8, r2
 80010d4:	4699      	mov	r9, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4640      	mov	r0, r8
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd71 	bl	8000be8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a01 	vldr	s14, [r3, #4]
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 6a02 	vldr	s13, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <ABT+0x1a4>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69dc      	ldr	r4, [r3, #28]
 8001208:	f7ff fcee 	bl	8000be8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	3fe00000 	.word	0x3fe00000

08001220 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001220:	b408      	push	{r3}
 8001222:	b580      	push	{r7, lr}
 8001224:	b089      	sub	sp, #36	; 0x24
 8001226:	af02      	add	r7, sp, #8
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001240:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12e      	bne.n	80012ae <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	617a      	str	r2, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	617a      	str	r2, [r7, #20]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1d1a      	adds	r2, r3, #4
 800126e:	617a      	str	r2, [r7, #20]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	1d1a      	adds	r2, r3, #4
 800127a:	617a      	str	r2, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6858      	ldr	r0, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8919      	ldrh	r1, [r3, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	2201      	movs	r2, #1
 8001294:	f000 f908 	bl	80014a8 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68d8      	ldr	r0, [r3, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8a19      	ldrh	r1, [r3, #16]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	2201      	movs	r2, #1
 80012a8:	f000 f8fe 	bl	80014a8 <GPIOPinsInit>
 80012ac:	e017      	b.n	80012de <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d113      	bne.n	80012de <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	617a      	str	r2, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1d1a      	adds	r2, r3, #4
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	617a      	str	r2, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <BDCInit+0xd2>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f0:	e018      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d105      	bne.n	8001306 <BDCInit+0xe6>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001304:	e00e      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d105      	bne.n	800131a <BDCInit+0xfa>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001318:	e004      	b.n	8001324 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800132e:	b001      	add	sp, #4
 8001330:	4770      	bx	lr

08001332 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db52      	blt.n	80013e8 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <WriteBDC+0x24>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
 8001354:	e018      	b.n	8001388 <WriteBDC+0x56>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d105      	bne.n	800136a <WriteBDC+0x38>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	6393      	str	r3, [r2, #56]	; 0x38
 8001368:	e00e      	b.n	8001388 <WriteBDC+0x56>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b08      	cmp	r3, #8
 8001370:	d105      	bne.n	800137e <WriteBDC+0x4c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800137c:	e004      	b.n	8001388 <WriteBDC+0x56>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d110      	bne.n	80013b2 <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6858      	ldr	r0, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	891b      	ldrh	r3, [r3, #8]
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	f010 fa1e 	bl	80117dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68d8      	ldr	r0, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8a1b      	ldrh	r3, [r3, #16]
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	f010 fa16 	bl	80117dc <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 80013b0:	e076      	b.n	80014a0 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d172      	bne.n	80014a0 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	7819      	ldrb	r1, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1a      	ldrb	r2, [r3, #24]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	7819      	ldrb	r1, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e5b      	ldrb	r3, [r3, #25]
 80013d8:	43db      	mvns	r3, r3
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	400a      	ands	r2, r1
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	e05b      	b.n	80014a0 <WriteBDC+0x16e>
	}else if (pwm < 0){
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da58      	bge.n	80014a0 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <WriteBDC+0xd2>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	425a      	negs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
 8001402:	e01e      	b.n	8001442 <WriteBDC+0x110>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d107      	bne.n	800141c <WriteBDC+0xea>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4259      	negs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	460b      	mov	r3, r1
 8001418:	6393      	str	r3, [r2, #56]	; 0x38
 800141a:	e012      	b.n	8001442 <WriteBDC+0x110>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d107      	bne.n	8001434 <WriteBDC+0x102>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4259      	negs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	460b      	mov	r3, r1
 8001430:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001432:	e006      	b.n	8001442 <WriteBDC+0x110>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4259      	negs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	460b      	mov	r3, r1
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d110      	bne.n	800146c <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6858      	ldr	r0, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	891b      	ldrh	r3, [r3, #8]
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	f010 f9c1 	bl	80117dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68d8      	ldr	r0, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a1b      	ldrh	r3, [r3, #16]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f010 f9b9 	bl	80117dc <HAL_GPIO_WritePin>
}
 800146a:	e019      	b.n	80014a0 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d115      	bne.n	80014a0 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	7819      	ldrb	r1, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
 800147e:	43db      	mvns	r3, r3
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	400a      	ands	r2, r1
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	7819      	ldrb	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e5a      	ldrb	r2, [r3, #25]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	430a      	orrs	r2, r1
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b092      	sub	sp, #72	; 0x48
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	460b      	mov	r3, r1
 80014b6:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a6a      	ldr	r2, [pc, #424]	; (8001674 <GPIOPinsInit+0x1cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f000 80af 	beq.w	8001630 <GPIOPinsInit+0x188>
 80014d2:	4a68      	ldr	r2, [pc, #416]	; (8001674 <GPIOPinsInit+0x1cc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f200 80ba 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 80014da:	4a67      	ldr	r2, [pc, #412]	; (8001678 <GPIOPinsInit+0x1d0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	f000 8098 	beq.w	8001612 <GPIOPinsInit+0x16a>
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <GPIOPinsInit+0x1d0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f200 80b2 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <GPIOPinsInit+0x1d4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f000 8081 	beq.w	80015f4 <GPIOPinsInit+0x14c>
 80014f2:	4a62      	ldr	r2, [pc, #392]	; (800167c <GPIOPinsInit+0x1d4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	f200 80aa 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 80014fa:	4a61      	ldr	r2, [pc, #388]	; (8001680 <GPIOPinsInit+0x1d8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d06a      	beq.n	80015d6 <GPIOPinsInit+0x12e>
 8001500:	4a5f      	ldr	r2, [pc, #380]	; (8001680 <GPIOPinsInit+0x1d8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	f200 80a3 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 8001508:	4a5e      	ldr	r2, [pc, #376]	; (8001684 <GPIOPinsInit+0x1dc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d054      	beq.n	80015b8 <GPIOPinsInit+0x110>
 800150e:	4a5d      	ldr	r2, [pc, #372]	; (8001684 <GPIOPinsInit+0x1dc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	f200 809c 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 8001516:	4a5c      	ldr	r2, [pc, #368]	; (8001688 <GPIOPinsInit+0x1e0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d03e      	beq.n	800159a <GPIOPinsInit+0xf2>
 800151c:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <GPIOPinsInit+0x1e0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	f200 8095 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 8001524:	4a59      	ldr	r2, [pc, #356]	; (800168c <GPIOPinsInit+0x1e4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d028      	beq.n	800157c <GPIOPinsInit+0xd4>
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <GPIOPinsInit+0x1e4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f200 808e 	bhi.w	800164e <GPIOPinsInit+0x1a6>
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <GPIOPinsInit+0x1e8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d003      	beq.n	8001540 <GPIOPinsInit+0x98>
 8001538:	4a56      	ldr	r2, [pc, #344]	; (8001694 <GPIOPinsInit+0x1ec>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00f      	beq.n	800155e <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 800153e:	e086      	b.n	800164e <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a53      	ldr	r2, [pc, #332]	; (8001698 <GPIOPinsInit+0x1f0>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 800155c:	e078      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 800157a:	e069      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001580:	4b45      	ldr	r3, [pc, #276]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a44      	ldr	r2, [pc, #272]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <GPIOPinsInit+0x1f0>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 8001598:	e05a      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 80015b6:	e04b      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a35      	ldr	r2, [pc, #212]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	623b      	str	r3, [r7, #32]
 80015d2:	6a3b      	ldr	r3, [r7, #32]
	break;
 80015d4:	e03c      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
	break;
 80015f2:	e02d      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <GPIOPinsInit+0x1f0>)
 80015fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001602:	6313      	str	r3, [r2, #48]	; 0x30
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]
	break;
 8001610:	e01e      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <GPIOPinsInit+0x1f0>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
	break;
 800162e:	e00f      	b.n	8001650 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a17      	ldr	r2, [pc, #92]	; (8001698 <GPIOPinsInit+0x1f0>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <GPIOPinsInit+0x1f0>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
	break;
 800164c:	e000      	b.n	8001650 <GPIOPinsInit+0x1a8>
	default: break;
 800164e:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 8001650:	897b      	ldrh	r3, [r7, #10]
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 8001658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001664:	4619      	mov	r1, r3
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f00f fe20 	bl	80112ac <HAL_GPIO_Init>

}
 800166c:	bf00      	nop
 800166e:	3748      	adds	r7, #72	; 0x48
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40022000 	.word	0x40022000
 8001678:	40021c00 	.word	0x40021c00
 800167c:	40021800 	.word	0x40021800
 8001680:	40021400 	.word	0x40021400
 8001684:	40021000 	.word	0x40021000
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40020800 	.word	0x40020800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40023800 	.word	0x40023800

0800169c <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <PWMTimeBaseInit+0x170>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d103      	bne.n	80016d0 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a51      	ldr	r2, [pc, #324]	; (8001810 <PWMTimeBaseInit+0x174>)
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e057      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a50      	ldr	r2, [pc, #320]	; (8001814 <PWMTimeBaseInit+0x178>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d104      	bne.n	80016e2 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e04e      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <PWMTimeBaseInit+0x17c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d103      	bne.n	80016f2 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <PWMTimeBaseInit+0x180>)
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e046      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <PWMTimeBaseInit+0x184>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d103      	bne.n	8001702 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a49      	ldr	r2, [pc, #292]	; (8001824 <PWMTimeBaseInit+0x188>)
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e03e      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a48      	ldr	r2, [pc, #288]	; (8001828 <PWMTimeBaseInit+0x18c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d103      	bne.n	8001712 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a47      	ldr	r2, [pc, #284]	; (800182c <PWMTimeBaseInit+0x190>)
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e036      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a46      	ldr	r2, [pc, #280]	; (8001830 <PWMTimeBaseInit+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <PWMTimeBaseInit+0x198>)
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e02e      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a44      	ldr	r2, [pc, #272]	; (8001838 <PWMTimeBaseInit+0x19c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d103      	bne.n	8001732 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4a43      	ldr	r2, [pc, #268]	; (800183c <PWMTimeBaseInit+0x1a0>)
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e026      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a42      	ldr	r2, [pc, #264]	; (8001840 <PWMTimeBaseInit+0x1a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d103      	bne.n	8001742 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <PWMTimeBaseInit+0x1a8>)
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e01e      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <PWMTimeBaseInit+0x1ac>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d103      	bne.n	8001752 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a3f      	ldr	r2, [pc, #252]	; (800184c <PWMTimeBaseInit+0x1b0>)
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e016      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <PWMTimeBaseInit+0x1b4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d103      	bne.n	8001762 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <PWMTimeBaseInit+0x1b8>)
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e00e      	b.n	8001780 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <PWMTimeBaseInit+0x1bc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d103      	bne.n	8001772 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a3b      	ldr	r2, [pc, #236]	; (800185c <PWMTimeBaseInit+0x1c0>)
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e006      	b.n	8001780 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <PWMTimeBaseInit+0x1c4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d102      	bne.n	8001780 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a39      	ldr	r2, [pc, #228]	; (8001864 <PWMTimeBaseInit+0x1c8>)
 800177e:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1e5a      	subs	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f012 fe44 	bl	8014430 <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 80017ae:	f003 fbd7 	bl	8004f60 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4619      	mov	r1, r3
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f013 f9aa 	bl	8014b18 <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 80017ca:	f003 fbc9 	bl	8004f60 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f012 fea1 	bl	8014516 <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 80017da:	f003 fbc1 	bl	8004f60 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f013 fd8f 	bl	8015310 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 80017f8:	f003 fbb2 	bl	8004f60 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f012 fe42 	bl	8014486 <HAL_TIM_Base_Start>

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200063e8 	.word	0x200063e8
 8001810:	40010000 	.word	0x40010000
 8001814:	200064ec 	.word	0x200064ec
 8001818:	2000619c 	.word	0x2000619c
 800181c:	40000400 	.word	0x40000400
 8001820:	20005fd8 	.word	0x20005fd8
 8001824:	40000800 	.word	0x40000800
 8001828:	2000615c 	.word	0x2000615c
 800182c:	40000c00 	.word	0x40000c00
 8001830:	20005f98 	.word	0x20005f98
 8001834:	40010400 	.word	0x40010400
 8001838:	20006428 	.word	0x20006428
 800183c:	40014000 	.word	0x40014000
 8001840:	200060b8 	.word	0x200060b8
 8001844:	40014400 	.word	0x40014400
 8001848:	20006300 	.word	0x20006300
 800184c:	40014800 	.word	0x40014800
 8001850:	2000660c 	.word	0x2000660c
 8001854:	40001800 	.word	0x40001800
 8001858:	20006280 	.word	0x20006280
 800185c:	40001c00 	.word	0x40001c00
 8001860:	200065cc 	.word	0x200065cc
 8001864:	40002000 	.word	0x40002000

08001868 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 8001868:	b580      	push	{r7, lr}
 800186a:	b09a      	sub	sp, #104	; 0x68
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800189a:	2370      	movs	r3, #112	; 0x70
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018a2:	2302      	movs	r3, #2
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018a6:	2308      	movs	r3, #8
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 80018b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4619      	mov	r1, r3
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f013 f864 	bl	801498c <HAL_TIM_PWM_ConfigChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <PWMChannelConfig+0x66>
	{
		Error_Handler();
 80018ca:	f003 fb49 	bl	8004f60 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a95      	ldr	r2, [pc, #596]	; (8001b28 <PWMChannelConfig+0x2c0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f000 80af 	beq.w	8001a36 <PWMChannelConfig+0x1ce>
 80018d8:	4a93      	ldr	r2, [pc, #588]	; (8001b28 <PWMChannelConfig+0x2c0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	f200 80ba 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 80018e0:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <PWMChannelConfig+0x2c4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f000 8098 	beq.w	8001a18 <PWMChannelConfig+0x1b0>
 80018e8:	4a90      	ldr	r2, [pc, #576]	; (8001b2c <PWMChannelConfig+0x2c4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f200 80b2 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 80018f0:	4a8f      	ldr	r2, [pc, #572]	; (8001b30 <PWMChannelConfig+0x2c8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	f000 8081 	beq.w	80019fa <PWMChannelConfig+0x192>
 80018f8:	4a8d      	ldr	r2, [pc, #564]	; (8001b30 <PWMChannelConfig+0x2c8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f200 80aa 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 8001900:	4a8c      	ldr	r2, [pc, #560]	; (8001b34 <PWMChannelConfig+0x2cc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d06a      	beq.n	80019dc <PWMChannelConfig+0x174>
 8001906:	4a8b      	ldr	r2, [pc, #556]	; (8001b34 <PWMChannelConfig+0x2cc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	f200 80a3 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 800190e:	4a8a      	ldr	r2, [pc, #552]	; (8001b38 <PWMChannelConfig+0x2d0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d054      	beq.n	80019be <PWMChannelConfig+0x156>
 8001914:	4a88      	ldr	r2, [pc, #544]	; (8001b38 <PWMChannelConfig+0x2d0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f200 809c 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 800191c:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <PWMChannelConfig+0x2d4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d03e      	beq.n	80019a0 <PWMChannelConfig+0x138>
 8001922:	4a86      	ldr	r2, [pc, #536]	; (8001b3c <PWMChannelConfig+0x2d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	f200 8095 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 800192a:	4a85      	ldr	r2, [pc, #532]	; (8001b40 <PWMChannelConfig+0x2d8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d028      	beq.n	8001982 <PWMChannelConfig+0x11a>
 8001930:	4a83      	ldr	r2, [pc, #524]	; (8001b40 <PWMChannelConfig+0x2d8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	f200 808e 	bhi.w	8001a54 <PWMChannelConfig+0x1ec>
 8001938:	4a82      	ldr	r2, [pc, #520]	; (8001b44 <PWMChannelConfig+0x2dc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d003      	beq.n	8001946 <PWMChannelConfig+0xde>
 800193e:	4a82      	ldr	r2, [pc, #520]	; (8001b48 <PWMChannelConfig+0x2e0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00f      	beq.n	8001964 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001944:	e086      	b.n	8001a54 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <PWMChannelConfig+0x2e4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 8001962:	e078      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <PWMChannelConfig+0x2e4>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <PWMChannelConfig+0x2e4>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 8001980:	e069      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001986:	4b71      	ldr	r3, [pc, #452]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a70      	ldr	r2, [pc, #448]	; (8001b4c <PWMChannelConfig+0x2e4>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b6e      	ldr	r3, [pc, #440]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 800199e:	e05a      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a4:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a68      	ldr	r2, [pc, #416]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 80019bc:	e04b      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a61      	ldr	r2, [pc, #388]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 80019da:	e03c      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4a59      	ldr	r2, [pc, #356]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
 80019ec:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <PWMChannelConfig+0x2e4>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	6a3b      	ldr	r3, [r7, #32]
		break;
 80019f8:	e02d      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
		break;
 8001a16:	e01e      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
		break;
 8001a34:	e00f      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a43      	ldr	r2, [pc, #268]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <PWMChannelConfig+0x2e4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
		break;
 8001a52:	e000      	b.n	8001a56 <PWMChannelConfig+0x1ee>
		default: break;
 8001a54:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a39      	ldr	r2, [pc, #228]	; (8001b50 <PWMChannelConfig+0x2e8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d102      	bne.n	8001a74 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a72:	e04b      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <PWMChannelConfig+0x2ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a80:	e044      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <PWMChannelConfig+0x2f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d102      	bne.n	8001a90 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a8e:	e03d      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <PWMChannelConfig+0x2f4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d102      	bne.n	8001a9e <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9c:	e036      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <PWMChannelConfig+0x2f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d102      	bne.n	8001aac <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aaa:	e02f      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <PWMChannelConfig+0x2fc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d102      	bne.n	8001aba <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ab8:	e028      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a2a      	ldr	r2, [pc, #168]	; (8001b68 <PWMChannelConfig+0x300>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d102      	bne.n	8001ac8 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac6:	e021      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <PWMChannelConfig+0x304>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d102      	bne.n	8001ad6 <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	e01a      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <PWMChannelConfig+0x308>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d102      	bne.n	8001ae4 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ae2:	e013      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <PWMChannelConfig+0x30c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001aec:	2309      	movs	r3, #9
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af0:	e00c      	b.n	8001b0c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <PWMChannelConfig+0x310>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d102      	bne.n	8001b00 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001afa:	2309      	movs	r3, #9
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001afe:	e005      	b.n	8001b0c <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <PWMChannelConfig+0x314>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f00f fbca 	bl	80112ac <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f012 fd26 	bl	801456c <HAL_TIM_PWM_Start>

}
 8001b20:	bf00      	nop
 8001b22:	3768      	adds	r7, #104	; 0x68
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021400 	.word	0x40021400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	200063e8 	.word	0x200063e8
 8001b54:	200064ec 	.word	0x200064ec
 8001b58:	2000619c 	.word	0x2000619c
 8001b5c:	20005fd8 	.word	0x20005fd8
 8001b60:	2000615c 	.word	0x2000615c
 8001b64:	20005f98 	.word	0x20005f98
 8001b68:	20006428 	.word	0x20006428
 8001b6c:	200060b8 	.word	0x200060b8
 8001b70:	20006300 	.word	0x20006300
 8001b74:	2000660c 	.word	0x2000660c
 8001b78:	20006280 	.word	0x20006280
 8001b7c:	200065cc 	.word	0x200065cc

08001b80 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	2224      	movs	r2, #36	; 0x24
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f017 fa7b 	bl	801908c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a6b      	ldr	r2, [pc, #428]	; (8001d50 <QEIInit+0x1d0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d106      	bne.n	8001bb6 <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <QEIInit+0x1d4>)
 8001bac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001bae:	2319      	movs	r3, #25
 8001bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bb4:	e036      	b.n	8001c24 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <QEIInit+0x1d8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d107      	bne.n	8001bce <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc4:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001bc6:	231c      	movs	r3, #28
 8001bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bcc:	e02a      	b.n	8001c24 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a62      	ldr	r2, [pc, #392]	; (8001d5c <QEIInit+0x1dc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d106      	bne.n	8001be4 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <QEIInit+0x1e0>)
 8001bda:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001bdc:	231d      	movs	r3, #29
 8001bde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001be2:	e01f      	b.n	8001c24 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a5f      	ldr	r2, [pc, #380]	; (8001d64 <QEIInit+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d106      	bne.n	8001bfa <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a5e      	ldr	r2, [pc, #376]	; (8001d68 <QEIInit+0x1e8>)
 8001bf0:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001bf2:	231e      	movs	r3, #30
 8001bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bf8:	e014      	b.n	8001c24 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a5b      	ldr	r2, [pc, #364]	; (8001d6c <QEIInit+0x1ec>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a5a      	ldr	r2, [pc, #360]	; (8001d70 <QEIInit+0x1f0>)
 8001c06:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001c08:	2332      	movs	r3, #50	; 0x32
 8001c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c0e:	e009      	b.n	8001c24 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <QEIInit+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d105      	bne.n	8001c24 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <QEIInit+0x1f8>)
 8001c1c:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001c1e:	232c      	movs	r3, #44	; 0x2c
 8001c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c36:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f012 fcb7 	bl	80145e8 <HAL_TIM_Encoder_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <QEIInit+0x104>
	{
		Error_Handler();
 8001c80:	f003 f96e 	bl	8004f60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f013 fb3c 	bl	8015310 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <QEIInit+0x122>
	{
		Error_Handler();
 8001c9e:	f003 f95f 	bl	8004f60 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0201 	mvn.w	r2, #1
 8001caa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <QEIInit+0x1d0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	2200      	movs	r2, #0
 8001cca:	210e      	movs	r1, #14
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00e fe9d 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001cd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f00e fed0 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001cdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00e feaf 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8001ce6:	e02a      	b.n	8001d3e <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <QEIInit+0x1e4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001cf0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	210e      	movs	r1, #14
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00e fe87 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001cfe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00e feba 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00e fe99 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8001d12:	e014      	b.n	8001d3e <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <QEIInit+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d110      	bne.n	8001d3e <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001d1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d20:	2200      	movs	r2, #0
 8001d22:	210e      	movs	r1, #14
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00e fe71 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00e fea4 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00e fe83 	bl	8010a44 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001d3e:	213c      	movs	r1, #60	; 0x3c
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f012 fce3 	bl	801470c <HAL_TIM_Encoder_Start>
}
 8001d46:	bf00      	nop
 8001d48:	3738      	adds	r7, #56	; 0x38
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200063e8 	.word	0x200063e8
 8001d54:	40010000 	.word	0x40010000
 8001d58:	200064ec 	.word	0x200064ec
 8001d5c:	2000619c 	.word	0x2000619c
 8001d60:	40000400 	.word	0x40000400
 8001d64:	20005fd8 	.word	0x20005fd8
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	2000615c 	.word	0x2000615c
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	20005f98 	.word	0x20005f98
 8001d78:	40010400 	.word	0x40010400

08001d7c <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d839      	bhi.n	8001e02 <QEIReset+0x86>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <QEIReset+0x18>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dad 	.word	0x08001dad
 8001d98:	08001dbb 	.word	0x08001dbb
 8001d9c:	08001dcb 	.word	0x08001dcb
 8001da0:	08001dd9 	.word	0x08001dd9
 8001da4:	08001de7 	.word	0x08001de7
 8001da8:	08001df5 	.word	0x08001df5

	case QEI1:	TIM1->CNT = 0;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <QEIReset+0x94>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <QEIReset+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
	break;
 8001db8:	e023      	b.n	8001e02 <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <QEIReset+0x9c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	break;
 8001dc8:	e01b      	b.n	8001e02 <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <QEIReset+0xa0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <QEIReset+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	break;
 8001dd6:	e014      	b.n	8001e02 <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <QEIReset+0xa8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <QEIReset+0xac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	break;
 8001de4:	e00d      	b.n	8001e02 <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <QEIReset+0xb0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <QEIReset+0xb4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
	break;
 8001df2:	e006      	b.n	8001e02 <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <QEIReset+0xb8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <QEIReset+0xbc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
	break;
 8001e00:	bf00      	nop

	}
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	20006948 	.word	0x20006948
 8001e18:	2000694c 	.word	0x2000694c
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	20006944 	.word	0x20006944
 8001e24:	40000800 	.word	0x40000800
 8001e28:	2000696c 	.word	0x2000696c
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	20006968 	.word	0x20006968
 8001e34:	40010400 	.word	0x40010400
 8001e38:	20006970 	.word	0x20006970

08001e3c <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001e52:	e002      	b.n	8001e5a <QEIDelay+0x1e>
	{
		currentvalues++;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3f8      	bcc.n	8001e54 <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d845      	bhi.n	8001f12 <QEIRead+0x9e>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <QEIRead+0x18>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb7 	.word	0x08001eb7
 8001e94:	08001ecb 	.word	0x08001ecb
 8001e98:	08001edd 	.word	0x08001edd
 8001e9c:	08001eef 	.word	0x08001eef
 8001ea0:	08001f01 	.word	0x08001f01

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <QEIRead+0xb0>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <QEIRead+0xb4>)
 8001eac:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <QEIRead+0xb4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
	break;
 8001eb4:	e02e      	b.n	8001f14 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <QEIRead+0xb8>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <QEIRead+0xb8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]
	break;
 8001ec8:	e024      	b.n	8001f14 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <QEIRead+0xbc>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <QEIRead+0xc0>)
 8001ed2:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <QEIRead+0xc0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
	break;
 8001eda:	e01b      	b.n	8001f14 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <QEIRead+0xc4>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <QEIRead+0xc8>)
 8001ee4:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <QEIRead+0xc8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
	break;
 8001eec:	e012      	b.n	8001f14 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <QEIRead+0xcc>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <QEIRead+0xd0>)
 8001ef6:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <QEIRead+0xd0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
	break;
 8001efe:	e009      	b.n	8001f14 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <QEIRead+0xd4>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <QEIRead+0xd8>)
 8001f08:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <QEIRead+0xd8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
	break;
 8001f10:	e000      	b.n	8001f14 <QEIRead+0xa0>

	default: break;
 8001f12:	bf00      	nop
	}

	return value;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	20006948 	.word	0x20006948
 8001f2c:	2000694c 	.word	0x2000694c
 8001f30:	40000400 	.word	0x40000400
 8001f34:	20006944 	.word	0x20006944
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	2000696c 	.word	0x2000696c
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	20006968 	.word	0x20006968
 8001f48:	40010400 	.word	0x40010400
 8001f4c:	20006970 	.word	0x20006970

08001f50 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	72fb      	strb	r3, [r7, #11]
 8001f60:	4613      	mov	r3, r2
 8001f62:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7afa      	ldrb	r2, [r7, #11]
 8001f68:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	893a      	ldrh	r2, [r7, #8]
 8001f74:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8bba      	ldrh	r2, [r7, #28]
 8001f80:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f8c:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8899      	ldrh	r1, [r3, #4]
 8001f96:	2301      	movs	r3, #1
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f7ff fa83 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6898      	ldr	r0, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8999      	ldrh	r1, [r3, #12]
 8001faa:	2301      	movs	r3, #1
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2302      	movs	r3, #2
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f7ff fa79 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6918      	ldr	r0, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8a99      	ldrh	r1, [r3, #20]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f7ff fa6f 	bl	80014a8 <GPIOPinsInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7d9b      	ldrb	r3, [r3, #22]
 8001fde:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4619      	mov	r1, r3
 8001fec:	f00f fbf6 	bl	80117dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6898      	ldr	r0, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	899b      	ldrh	r3, [r3, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f00f fbee 	bl	80117dc <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8002000:	7bba      	ldrb	r2, [r7, #14]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3206      	adds	r2, #6
 8002006:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800200a:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 800200c:	2308      	movs	r3, #8
 800200e:	737b      	strb	r3, [r7, #13]
 8002010:	e02a      	b.n	8002068 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da08      	bge.n	800202c <SHIFTREGShift+0x5a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6918      	ldr	r0, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8a9b      	ldrh	r3, [r3, #20]
 8002022:	2201      	movs	r2, #1
 8002024:	4619      	mov	r1, r3
 8002026:	f00f fbd9 	bl	80117dc <HAL_GPIO_WritePin>
 800202a:	e007      	b.n	800203c <SHIFTREGShift+0x6a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6918      	ldr	r0, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8a9b      	ldrh	r3, [r3, #20]
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	f00f fbd0 	bl	80117dc <HAL_GPIO_WritePin>
			out <<= 1;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	889b      	ldrh	r3, [r3, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f00f fbc5 	bl	80117dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	889b      	ldrh	r3, [r3, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	f00f fbbd 	bl	80117dc <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8002062:	7b7b      	ldrb	r3, [r7, #13]
 8002064:	3b01      	subs	r3, #1
 8002066:	737b      	strb	r3, [r7, #13]
 8002068:	7b7b      	ldrb	r3, [r7, #13]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1d1      	bne.n	8002012 <SHIFTREGShift+0x40>
		}
	}while(i--);
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	73ba      	strb	r2, [r7, #14]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1c3      	bne.n	8002000 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	899b      	ldrh	r3, [r3, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	4619      	mov	r1, r3
 8002084:	f00f fbaa 	bl	80117dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	899b      	ldrh	r3, [r3, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	f00f fba2 	bl	80117dc <HAL_GPIO_WritePin>

}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_MspInit+0x54>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_MspInit+0x54>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x54>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_MspInit+0x54>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_MspInit+0x54>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_MspInit+0x54>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	210f      	movs	r1, #15
 80020e2:	f06f 0001 	mvn.w	r0, #1
 80020e6:	f00e fc91 	bl	8010a0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	; (8002220 <HAL_CAN_MspInit+0x128>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d135      	bne.n	8002186 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 8002122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10d      	bne.n	8002148 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_CAN_MspInit+0x130>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <HAL_CAN_MspInit+0x130>)
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_CAN_MspInit+0x130>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_CAN_MspInit+0x130>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a35      	ldr	r2, [pc, #212]	; (8002228 <HAL_CAN_MspInit+0x130>)
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_CAN_MspInit+0x130>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002164:	2303      	movs	r3, #3
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002174:	2309      	movs	r3, #9
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	482b      	ldr	r0, [pc, #172]	; (800222c <HAL_CAN_MspInit+0x134>)
 8002180:	f00f f894 	bl	80112ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002184:	e048      	b.n	8002218 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a29      	ldr	r2, [pc, #164]	; (8002230 <HAL_CAN_MspInit+0x138>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d143      	bne.n	8002218 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_CAN_MspInit+0x130>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <HAL_CAN_MspInit+0x130>)
 800219a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 80021b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_CAN_MspInit+0x12c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10d      	bne.n	80021da <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_CAN_MspInit+0x130>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002208:	2309      	movs	r3, #9
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <HAL_CAN_MspInit+0x13c>)
 8002214:	f00f f84a 	bl	80112ac <HAL_GPIO_Init>
}
 8002218:	bf00      	nop
 800221a:	3730      	adds	r7, #48	; 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40006400 	.word	0x40006400
 8002224:	2000023c 	.word	0x2000023c
 8002228:	40023800 	.word	0x40023800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40006800 	.word	0x40006800
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	; 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5c      	ldr	r2, [pc, #368]	; (80023c8 <HAL_I2C_MspInit+0x190>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12d      	bne.n	80022b6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a5a      	ldr	r2, [pc, #360]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b58      	ldr	r3, [pc, #352]	; (80023cc <HAL_I2C_MspInit+0x194>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227c:	2312      	movs	r3, #18
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002280:	2301      	movs	r3, #1
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002288:	2304      	movs	r3, #4
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	484f      	ldr	r0, [pc, #316]	; (80023d0 <HAL_I2C_MspInit+0x198>)
 8002294:	f00f f80a 	bl	80112ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_I2C_MspInit+0x194>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80022a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022b4:	e083      	b.n	80023be <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_I2C_MspInit+0x19c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12d      	bne.n	800231c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4a40      	ldr	r2, [pc, #256]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	6313      	str	r3, [r2, #48]	; 0x30
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e2:	2312      	movs	r3, #18
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022ee:	2304      	movs	r3, #4
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4835      	ldr	r0, [pc, #212]	; (80023d0 <HAL_I2C_MspInit+0x198>)
 80022fa:	f00e ffd7 	bl	80112ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a31      	ldr	r2, [pc, #196]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
}
 800231a:	e050      	b.n	80023be <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_I2C_MspInit+0x1a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d14b      	bne.n	80023be <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_I2C_MspInit+0x194>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <HAL_I2C_MspInit+0x194>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_I2C_MspInit+0x194>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800235e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002364:	2312      	movs	r3, #18
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002368:	2301      	movs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002370:	2304      	movs	r3, #4
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <HAL_I2C_MspInit+0x1a4>)
 800237c:	f00e ff96 	bl	80112ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002386:	2312      	movs	r3, #18
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238a:	2301      	movs	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002392:	2304      	movs	r3, #4
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	4619      	mov	r1, r3
 800239c:	4810      	ldr	r0, [pc, #64]	; (80023e0 <HAL_I2C_MspInit+0x1a8>)
 800239e:	f00e ff85 	bl	80112ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80023ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_I2C_MspInit+0x194>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
}
 80023be:	bf00      	nop
 80023c0:	3738      	adds	r7, #56	; 0x38
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40005400 	.word	0x40005400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40005800 	.word	0x40005800
 80023d8:	40005c00 	.word	0x40005c00
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2a      	ldr	r2, [pc, #168]	; (800249c <HAL_I2C_MspDeInit+0xb8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d116      	bne.n	8002424 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 80023fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002406:	4827      	ldr	r0, [pc, #156]	; (80024a4 <HAL_I2C_MspDeInit+0xc0>)
 8002408:	f00f f8ec 	bl	80115e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800240c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002410:	4824      	ldr	r0, [pc, #144]	; (80024a4 <HAL_I2C_MspDeInit+0xc0>)
 8002412:	f00f f8e7 	bl	80115e4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002416:	201f      	movs	r0, #31
 8002418:	f00e fb22 	bl	8010a60 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800241c:	2020      	movs	r0, #32
 800241e:	f00e fb1f 	bl	8010a60 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002422:	e036      	b.n	8002492 <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_I2C_MspDeInit+0xc4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d116      	bne.n	800245c <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 8002434:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800243a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800243e:	4819      	ldr	r0, [pc, #100]	; (80024a4 <HAL_I2C_MspDeInit+0xc0>)
 8002440:	f00f f8d0 	bl	80115e4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002448:	4816      	ldr	r0, [pc, #88]	; (80024a4 <HAL_I2C_MspDeInit+0xc0>)
 800244a:	f00f f8cb 	bl	80115e4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800244e:	2021      	movs	r0, #33	; 0x21
 8002450:	f00e fb06 	bl	8010a60 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002454:	2022      	movs	r0, #34	; 0x22
 8002456:	f00e fb03 	bl	8010a60 <HAL_NVIC_DisableIRQ>
}
 800245a:	e01a      	b.n	8002492 <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_I2C_MspDeInit+0xc8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d115      	bne.n	8002492 <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_I2C_MspDeInit+0xbc>)
 800246c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002476:	480e      	ldr	r0, [pc, #56]	; (80024b0 <HAL_I2C_MspDeInit+0xcc>)
 8002478:	f00f f8b4 	bl	80115e4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800247c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <HAL_I2C_MspDeInit+0xd0>)
 8002482:	f00f f8af 	bl	80115e4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002486:	2048      	movs	r0, #72	; 0x48
 8002488:	f00e faea 	bl	8010a60 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800248c:	2049      	movs	r0, #73	; 0x49
 800248e:	f00e fae7 	bl	8010a60 <HAL_NVIC_DisableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40005400 	.word	0x40005400
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40005800 	.word	0x40005800
 80024ac:	40005c00 	.word	0x40005c00
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020000 	.word	0x40020000

080024b8 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b091      	sub	sp, #68	; 0x44
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a8d      	ldr	r2, [pc, #564]	; (80026fc <HAL_TIM_PWM_MspInit+0x244>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ce:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a8b      	ldr	r2, [pc, #556]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 80024e6:	e102      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f6:	4b82      	ldr	r3, [pc, #520]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a81      	ldr	r2, [pc, #516]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b7f      	ldr	r3, [pc, #508]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800250e:	e0ee      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7b      	ldr	r2, [pc, #492]	; (8002704 <HAL_TIM_PWM_MspInit+0x24c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
 800251e:	4b78      	ldr	r3, [pc, #480]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a77      	ldr	r2, [pc, #476]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002536:	e0da      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_TIM_PWM_MspInit+0x250>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10e      	bne.n	8002560 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a6d      	ldr	r2, [pc, #436]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800255e:	e0c6      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_TIM_PWM_MspInit+0x254>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256e:	4b64      	ldr	r3, [pc, #400]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002586:	e0b2      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a60      	ldr	r2, [pc, #384]	; (8002710 <HAL_TIM_PWM_MspInit+0x258>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
 8002596:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a59      	ldr	r2, [pc, #356]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800259c:	f043 0310 	orr.w	r3, r3, #16
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80025ae:	e09e      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_TIM_PWM_MspInit+0x25c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025d6:	e08a      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_TIM_PWM_MspInit+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a45      	ldr	r2, [pc, #276]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
}
 80025fe:	e076      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_TIM_PWM_MspInit+0x264>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
}
 8002626:	e062      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_TIM_PWM_MspInit+0x268>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a31      	ldr	r2, [pc, #196]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
}
 800264e:	e04e      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a33      	ldr	r2, [pc, #204]	; (8002724 <HAL_TIM_PWM_MspInit+0x26c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a27      	ldr	r2, [pc, #156]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
}
 8002676:	e03a      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <HAL_TIM_PWM_MspInit+0x270>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 800268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
}
 800269e:	e026      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_TIM_PWM_MspInit+0x274>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	e012      	b.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_TIM_PWM_MspInit+0x278>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10d      	bne.n	80026ee <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_TIM_PWM_MspInit+0x248>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
}
 80026ee:	bf00      	nop
 80026f0:	3744      	adds	r7, #68	; 0x44
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000
 8002700:	40023800 	.word	0x40023800
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800
 800270c:	40000c00 	.word	0x40000c00
 8002710:	40001000 	.word	0x40001000
 8002714:	40001400 	.word	0x40001400
 8002718:	40010400 	.word	0x40010400
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800
 8002728:	40001800 	.word	0x40001800
 800272c:	40001c00 	.word	0x40001c00
 8002730:	40002000 	.word	0x40002000

08002734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002734:	b480      	push	{r7}
 8002736:	b091      	sub	sp, #68	; 0x44
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a8d      	ldr	r2, [pc, #564]	; (8002978 <HAL_TIM_Base_MspInit+0x244>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274a:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a8b      	ldr	r2, [pc, #556]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b89      	ldr	r3, [pc, #548]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8002762:	e102      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d10e      	bne.n	800278c <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a81      	ldr	r2, [pc, #516]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800278a:	e0ee      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a7b      	ldr	r2, [pc, #492]	; (8002980 <HAL_TIM_Base_MspInit+0x24c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a77      	ldr	r2, [pc, #476]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b75      	ldr	r3, [pc, #468]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027b2:	e0da      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_TIM_Base_MspInit+0x250>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
 80027c2:	4b6e      	ldr	r3, [pc, #440]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a6d      	ldr	r2, [pc, #436]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027da:	e0c6      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a69      	ldr	r2, [pc, #420]	; (8002988 <HAL_TIM_Base_MspInit+0x254>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	4b64      	ldr	r3, [pc, #400]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a63      	ldr	r2, [pc, #396]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027f0:	f043 0308 	orr.w	r3, r3, #8
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002802:	e0b2      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a60      	ldr	r2, [pc, #384]	; (800298c <HAL_TIM_Base_MspInit+0x258>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10e      	bne.n	800282c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	4b5a      	ldr	r3, [pc, #360]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a59      	ldr	r2, [pc, #356]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002818:	f043 0310 	orr.w	r3, r3, #16
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800282a:	e09e      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_TIM_Base_MspInit+0x25c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a4f      	ldr	r2, [pc, #316]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002840:	f043 0320 	orr.w	r3, r3, #32
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002852:	e08a      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <HAL_TIM_Base_MspInit+0x260>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10e      	bne.n	800287c <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	6a3b      	ldr	r3, [r7, #32]
}
 800287a:	e076      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_TIM_Base_MspInit+0x264>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10e      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a3b      	ldr	r2, [pc, #236]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	69fb      	ldr	r3, [r7, #28]
}
 80028a2:	e062      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_TIM_Base_MspInit+0x268>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69bb      	ldr	r3, [r7, #24]
}
 80028ca:	e04e      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a33      	ldr	r2, [pc, #204]	; (80029a0 <HAL_TIM_Base_MspInit+0x26c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a27      	ldr	r2, [pc, #156]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
}
 80028f2:	e03a      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_TIM_Base_MspInit+0x270>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
}
 800291a:	e026      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <HAL_TIM_Base_MspInit+0x274>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	e012      	b.n	800296a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_TIM_Base_MspInit+0x278>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10d      	bne.n	800296a <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_TIM_Base_MspInit+0x248>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
}
 800296a:	bf00      	nop
 800296c:	3744      	adds	r7, #68	; 0x44
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	40023800 	.word	0x40023800
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40001000 	.word	0x40001000
 8002990:	40001400 	.word	0x40001400
 8002994:	40010400 	.word	0x40010400
 8002998:	40014000 	.word	0x40014000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800
 80029a4:	40001800 	.word	0x40001800
 80029a8:	40001c00 	.word	0x40001c00
 80029ac:	40002000 	.word	0x40002000

080029b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a8c      	ldr	r2, [pc, #560]	; (8002c00 <HAL_UART_MspInit+0x250>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d12d      	bne.n	8002a2e <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d6:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_UART_MspInit+0x254>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4a8a      	ldr	r2, [pc, #552]	; (8002c04 <HAL_UART_MspInit+0x254>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6453      	str	r3, [r2, #68]	; 0x44
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_UART_MspInit+0x254>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_UART_MspInit+0x254>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a83      	ldr	r2, [pc, #524]	; (8002c04 <HAL_UART_MspInit+0x254>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a24:	4619      	mov	r1, r3
 8002a26:	4878      	ldr	r0, [pc, #480]	; (8002c08 <HAL_UART_MspInit+0x258>)
 8002a28:	f00e fc40 	bl	80112ac <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002a2c:	e12b      	b.n	8002c86 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a76      	ldr	r2, [pc, #472]	; (8002c0c <HAL_UART_MspInit+0x25c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d12c      	bne.n	8002a92 <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a70      	ldr	r2, [pc, #448]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
 8002a48:	4b6e      	ldr	r3, [pc, #440]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a69      	ldr	r2, [pc, #420]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a70:	2360      	movs	r3, #96	; 0x60
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a80:	2307      	movs	r3, #7
 8002a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4861      	ldr	r0, [pc, #388]	; (8002c10 <HAL_UART_MspInit+0x260>)
 8002a8c:	f00e fc0e 	bl	80112ac <HAL_GPIO_Init>
}
 8002a90:	e0f9      	b.n	8002c86 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5f      	ldr	r2, [pc, #380]	; (8002c14 <HAL_UART_MspInit+0x264>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d12d      	bne.n	8002af8 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa0:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a57      	ldr	r2, [pc, #348]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4a50      	ldr	r2, [pc, #320]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aee:	4619      	mov	r1, r3
 8002af0:	4847      	ldr	r0, [pc, #284]	; (8002c10 <HAL_UART_MspInit+0x260>)
 8002af2:	f00e fbdb 	bl	80112ac <HAL_GPIO_Init>
}
 8002af6:	e0c6      	b.n	8002c86 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <HAL_UART_MspInit+0x268>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12d      	bne.n	8002b5e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a3e      	ldr	r2, [pc, #248]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a37      	ldr	r2, [pc, #220]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b54:	4619      	mov	r1, r3
 8002b56:	4831      	ldr	r0, [pc, #196]	; (8002c1c <HAL_UART_MspInit+0x26c>)
 8002b58:	f00e fba8 	bl	80112ac <HAL_GPIO_Init>
}
 8002b5c:	e093      	b.n	8002c86 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_UART_MspInit+0x270>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d15d      	bne.n	8002c24 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_UART_MspInit+0x254>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4810      	ldr	r0, [pc, #64]	; (8002c1c <HAL_UART_MspInit+0x26c>)
 8002bda:	f00e fb67 	bl	80112ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bde:	2304      	movs	r3, #4
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bee:	2308      	movs	r3, #8
 8002bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_UART_MspInit+0x260>)
 8002bfa:	f00e fb57 	bl	80112ac <HAL_GPIO_Init>
}
 8002bfe:	e042      	b.n	8002c86 <HAL_UART_MspInit+0x2d6>
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40004400 	.word	0x40004400
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40004800 	.word	0x40004800
 8002c18:	40004c00 	.word	0x40004c00
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_UART_MspInit+0x2e0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d12b      	bne.n	8002c86 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c38:	f043 0320 	orr.w	r3, r3, #32
 8002c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_UART_MspInit+0x2e4>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c76:	2308      	movs	r3, #8
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <HAL_UART_MspInit+0x2e8>)
 8002c82:	f00e fb13 	bl	80112ac <HAL_GPIO_Init>
}
 8002c86:	bf00      	nop
 8002c88:	3750      	adds	r7, #80	; 0x50
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40011400 	.word	0x40011400
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020800 	.word	0x40020800

08002c9c <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b094      	sub	sp, #80	; 0x50
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8c      	ldr	r2, [pc, #560]	; (8002eec <HAL_TIM_Encoder_MspInit+0x250>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12d      	bne.n	8002d1a <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cde:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a83      	ldr	r2, [pc, #524]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b81      	ldr	r3, [pc, #516]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002cf6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d10:	4619      	mov	r1, r3
 8002d12:	4878      	ldr	r0, [pc, #480]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x258>)
 8002d14:	f00e faca 	bl	80112ac <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002d18:	e12b      	b.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d14b      	bne.n	8002dbc <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
 8002d28:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	4a70      	ldr	r2, [pc, #448]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6413      	str	r3, [r2, #64]	; 0x40
 8002d34:	4b6e      	ldr	r3, [pc, #440]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d44:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a62      	ldr	r2, [pc, #392]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b60      	ldr	r3, [pc, #384]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d92:	4619      	mov	r1, r3
 8002d94:	4858      	ldr	r0, [pc, #352]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d96:	f00e fa89 	bl	80112ac <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002daa:	2301      	movs	r3, #1
 8002dac:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002db2:	4619      	mov	r1, r3
 8002db4:	4851      	ldr	r0, [pc, #324]	; (8002efc <HAL_TIM_Encoder_MspInit+0x260>)
 8002db6:	f00e fa79 	bl	80112ac <HAL_GPIO_Init>
}
 8002dba:	e0da      	b.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x264>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d12c      	bne.n	8002e20 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dfe:	23c0      	movs	r3, #192	; 0xc0
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e16:	4619      	mov	r1, r3
 8002e18:	4837      	ldr	r0, [pc, #220]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e1a:	f00e fa47 	bl	80112ac <HAL_GPIO_Init>
}
 8002e1e:	e0a8      	b.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x268>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12d      	bne.n	8002e86 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e66:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e74:	2302      	movs	r3, #2
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4822      	ldr	r0, [pc, #136]	; (8002f08 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002e80:	f00e fa14 	bl	80112ac <HAL_GPIO_Init>
}
 8002e84:	e075      	b.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <HAL_TIM_Encoder_MspInit+0x270>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d13f      	bne.n	8002f10 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e9a:	f043 0308 	orr.w	r3, r3, #8
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ee4:	f00e f9e2 	bl	80112ac <HAL_GPIO_Init>
}
 8002ee8:	e043      	b.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020400 	.word	0x40020400
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12b      	bne.n	8002f72 <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f52:	23c0      	movs	r3, #192	; 0xc0
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f62:	2303      	movs	r3, #3
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002f6e:	f00e f99d 	bl	80112ac <HAL_GPIO_Init>
}
 8002f72:	bf00      	nop
 8002f74:	3750      	adds	r7, #80	; 0x50
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020800 	.word	0x40020800

08002f88 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b094      	sub	sp, #80	; 0x50
 8002f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f8e:	f107 0320 	add.w	r3, r7, #32
 8002f92:	2230      	movs	r2, #48	; 0x30
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f016 f878 	bl	801908c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <SystemClock_Config+0xd0>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <SystemClock_Config+0xd0>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <SystemClock_Config+0xd0>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <SystemClock_Config+0xd4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <SystemClock_Config+0xd4>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <SystemClock_Config+0xd4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ffc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003002:	2302      	movs	r3, #2
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003006:	2304      	movs	r3, #4
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800300a:	f107 0320 	add.w	r3, r7, #32
 800300e:	4618      	mov	r0, r3
 8003010:	f010 fc46 	bl	80138a0 <HAL_RCC_OscConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800301a:	f001 ffa1 	bl	8004f60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301e:	230f      	movs	r3, #15
 8003020:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003022:	2302      	movs	r3, #2
 8003024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800302a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800302e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003034:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	2105      	movs	r1, #5
 800303c:	4618      	mov	r0, r3
 800303e:	f010 fe9f 	bl	8013d80 <HAL_RCC_ClockConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003048:	f001 ff8a 	bl	8004f60 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800304c:	f010 ff7e 	bl	8013f4c <HAL_RCC_EnableCSS>
}
 8003050:	bf00      	nop
 8003052:	3750      	adds	r7, #80	; 0x50
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000

08003060 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a9b      	ldr	r2, [pc, #620]	; (80032f0 <TIMxInit+0x290>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d105      	bne.n	8003092 <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a9a      	ldr	r2, [pc, #616]	; (80032f4 <TIMxInit+0x294>)
 800308a:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 800308c:	2319      	movs	r3, #25
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e081      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a98      	ldr	r2, [pc, #608]	; (80032f8 <TIMxInit+0x298>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d106      	bne.n	80030a8 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030a0:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 80030a2:	231c      	movs	r3, #28
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e076      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a94      	ldr	r2, [pc, #592]	; (80032fc <TIMxInit+0x29c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d105      	bne.n	80030bc <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a93      	ldr	r2, [pc, #588]	; (8003300 <TIMxInit+0x2a0>)
 80030b4:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 80030b6:	231d      	movs	r3, #29
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e06c      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a91      	ldr	r2, [pc, #580]	; (8003304 <TIMxInit+0x2a4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d105      	bne.n	80030d0 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a90      	ldr	r2, [pc, #576]	; (8003308 <TIMxInit+0x2a8>)
 80030c8:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 80030ca:	231e      	movs	r3, #30
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	e062      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a8e      	ldr	r2, [pc, #568]	; (800330c <TIMxInit+0x2ac>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d105      	bne.n	80030e4 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a8d      	ldr	r2, [pc, #564]	; (8003310 <TIMxInit+0x2b0>)
 80030dc:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 80030de:	2332      	movs	r3, #50	; 0x32
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e058      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a8b      	ldr	r2, [pc, #556]	; (8003314 <TIMxInit+0x2b4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d105      	bne.n	80030f8 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a8a      	ldr	r2, [pc, #552]	; (8003318 <TIMxInit+0x2b8>)
 80030f0:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 80030f2:	2336      	movs	r3, #54	; 0x36
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e04e      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a88      	ldr	r2, [pc, #544]	; (800331c <TIMxInit+0x2bc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d105      	bne.n	800310c <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a87      	ldr	r2, [pc, #540]	; (8003320 <TIMxInit+0x2c0>)
 8003104:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8003106:	2337      	movs	r3, #55	; 0x37
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e044      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a85      	ldr	r2, [pc, #532]	; (8003324 <TIMxInit+0x2c4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d105      	bne.n	8003120 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a84      	ldr	r2, [pc, #528]	; (8003328 <TIMxInit+0x2c8>)
 8003118:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 800311a:	232e      	movs	r3, #46	; 0x2e
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e03a      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a82      	ldr	r2, [pc, #520]	; (800332c <TIMxInit+0x2cc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d105      	bne.n	8003134 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a81      	ldr	r2, [pc, #516]	; (8003330 <TIMxInit+0x2d0>)
 800312c:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 800312e:	2318      	movs	r3, #24
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e030      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a7f      	ldr	r2, [pc, #508]	; (8003334 <TIMxInit+0x2d4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d105      	bne.n	8003148 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <TIMxInit+0x2d8>)
 8003140:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8003142:	2319      	movs	r3, #25
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e026      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a7c      	ldr	r2, [pc, #496]	; (800333c <TIMxInit+0x2dc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d105      	bne.n	800315c <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a7b      	ldr	r2, [pc, #492]	; (8003340 <TIMxInit+0x2e0>)
 8003154:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8003156:	231a      	movs	r3, #26
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e01c      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a79      	ldr	r2, [pc, #484]	; (8003344 <TIMxInit+0x2e4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d105      	bne.n	8003170 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a78      	ldr	r2, [pc, #480]	; (8003348 <TIMxInit+0x2e8>)
 8003168:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 800316a:	232b      	movs	r3, #43	; 0x2b
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e012      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a76      	ldr	r2, [pc, #472]	; (800334c <TIMxInit+0x2ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d105      	bne.n	8003184 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a75      	ldr	r2, [pc, #468]	; (8003350 <TIMxInit+0x2f0>)
 800317c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 800317e:	232c      	movs	r3, #44	; 0x2c
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e008      	b.n	8003196 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a73      	ldr	r2, [pc, #460]	; (8003354 <TIMxInit+0x2f4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d104      	bne.n	8003196 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a72      	ldr	r2, [pc, #456]	; (8003358 <TIMxInit+0x2f8>)
 8003190:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8003192:	232d      	movs	r3, #45	; 0x2d
 8003194:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8003196:	883a      	ldrh	r2, [r7, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f011 f93e 	bl	8014430 <HAL_TIM_Base_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <TIMxInit+0x15e>
	{
		Error_Handler();
 80031ba:	f001 fed1 	bl	8004f60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f012 f89f 	bl	8015310 <HAL_TIMEx_MasterConfigSynchronization>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <TIMxInit+0x17c>
	{
		Error_Handler();
 80031d8:	f001 fec2 	bl	8004f60 <Error_Handler>
	}

	if(htimx == &htim1){
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <TIMxInit+0x290>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f000 80cb 	beq.w	800337c <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <TIMxInit+0x298>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	f000 80c6 	beq.w	800337c <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a42      	ldr	r2, [pc, #264]	; (80032fc <TIMxInit+0x29c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f000 80c1 	beq.w	800337c <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a41      	ldr	r2, [pc, #260]	; (8003304 <TIMxInit+0x2a4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	f000 80bc 	beq.w	800337c <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a41      	ldr	r2, [pc, #260]	; (800330c <TIMxInit+0x2ac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	f000 80b7 	beq.w	800337c <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a40      	ldr	r2, [pc, #256]	; (8003314 <TIMxInit+0x2b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10c      	bne.n	8003230 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	b25b      	sxtb	r3, r3
 800321a:	2200      	movs	r2, #0
 800321c:	2107      	movs	r1, #7
 800321e:	4618      	mov	r0, r3
 8003220:	f00d fbf4 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	b25b      	sxtb	r3, r3
 8003228:	4618      	mov	r0, r3
 800322a:	f00d fc0b 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 800322e:	e0a5      	b.n	800337c <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <TIMxInit+0x2bc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10c      	bne.n	8003252 <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	b25b      	sxtb	r3, r3
 800323c:	2200      	movs	r2, #0
 800323e:	210e      	movs	r1, #14
 8003240:	4618      	mov	r0, r3
 8003242:	f00d fbe3 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	b25b      	sxtb	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f00d fbfa 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8003250:	e094      	b.n	800337c <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <TIMxInit+0x2c4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f000 8090 	beq.w	800337c <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a33      	ldr	r2, [pc, #204]	; (800332c <TIMxInit+0x2cc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	f000 808b 	beq.w	800337c <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a32      	ldr	r2, [pc, #200]	; (8003334 <TIMxInit+0x2d4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	b25b      	sxtb	r3, r3
 8003272:	2200      	movs	r2, #0
 8003274:	210e      	movs	r1, #14
 8003276:	4618      	mov	r0, r3
 8003278:	f00d fbc8 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	b25b      	sxtb	r3, r3
 8003280:	4618      	mov	r0, r3
 8003282:	f00d fbdf 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8003286:	e079      	b.n	800337c <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <TIMxInit+0x2dc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10c      	bne.n	80032aa <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	b25b      	sxtb	r3, r3
 8003294:	2200      	movs	r2, #0
 8003296:	210e      	movs	r1, #14
 8003298:	4618      	mov	r0, r3
 800329a:	f00d fbb7 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f00d fbce 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 80032a8:	e068      	b.n	800337c <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <TIMxInit+0x2e4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	210e      	movs	r1, #14
 80032ba:	4618      	mov	r0, r3
 80032bc:	f00d fba6 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00d fbbd 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 80032ca:	e057      	b.n	800337c <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a1f      	ldr	r2, [pc, #124]	; (800334c <TIMxInit+0x2ec>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d143      	bne.n	800335c <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	210e      	movs	r1, #14
 80032dc:	4618      	mov	r0, r3
 80032de:	f00d fb95 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f00d fbac 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 80032ec:	e046      	b.n	800337c <TIMxInit+0x31c>
 80032ee:	bf00      	nop
 80032f0:	200063e8 	.word	0x200063e8
 80032f4:	40010000 	.word	0x40010000
 80032f8:	200064ec 	.word	0x200064ec
 80032fc:	2000619c 	.word	0x2000619c
 8003300:	40000400 	.word	0x40000400
 8003304:	20005fd8 	.word	0x20005fd8
 8003308:	40000800 	.word	0x40000800
 800330c:	2000615c 	.word	0x2000615c
 8003310:	40000c00 	.word	0x40000c00
 8003314:	200063a8 	.word	0x200063a8
 8003318:	40001000 	.word	0x40001000
 800331c:	2000664c 	.word	0x2000664c
 8003320:	40001400 	.word	0x40001400
 8003324:	20005f98 	.word	0x20005f98
 8003328:	40010400 	.word	0x40010400
 800332c:	20006428 	.word	0x20006428
 8003330:	40014000 	.word	0x40014000
 8003334:	200060b8 	.word	0x200060b8
 8003338:	40014400 	.word	0x40014400
 800333c:	20006300 	.word	0x20006300
 8003340:	40014800 	.word	0x40014800
 8003344:	2000660c 	.word	0x2000660c
 8003348:	40001800 	.word	0x40001800
 800334c:	20006280 	.word	0x20006280
 8003350:	40001c00 	.word	0x40001c00
 8003354:	200065cc 	.word	0x200065cc
 8003358:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <TIMxInit+0x330>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10b      	bne.n	800337c <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	b25b      	sxtb	r3, r3
 8003368:	2200      	movs	r2, #0
 800336a:	210e      	movs	r1, #14
 800336c:	4618      	mov	r0, r3
 800336e:	f00d fb4d 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	b25b      	sxtb	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f00d fb64 	bl	8010a44 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f011 f882 	bl	8014486 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f011 f8a3 	bl	80144ce <HAL_TIM_Base_Start_IT>

}
 8003388:	bf00      	nop
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200065cc 	.word	0x200065cc

08003394 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <UARTInit+0x1cc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d107      	bne.n	80033ba <UARTInit+0x26>
		huartx->Instance = USART1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a6d      	ldr	r2, [pc, #436]	; (8003564 <UARTInit+0x1d0>)
 80033ae:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 80033b0:	2325      	movs	r3, #37	; 0x25
 80033b2:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <UARTInit+0x1d4>)
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e036      	b.n	8003428 <UARTInit+0x94>
	}else if(huartx == &huart2){
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a6b      	ldr	r2, [pc, #428]	; (800356c <UARTInit+0x1d8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d107      	bne.n	80033d2 <UARTInit+0x3e>
		huartx->Instance = USART2;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a6a      	ldr	r2, [pc, #424]	; (8003570 <UARTInit+0x1dc>)
 80033c6:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 80033c8:	2326      	movs	r3, #38	; 0x26
 80033ca:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <UARTInit+0x1e0>)
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e02a      	b.n	8003428 <UARTInit+0x94>
	}else if(huartx == &huart3){
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <UARTInit+0x1e4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d107      	bne.n	80033ea <UARTInit+0x56>
		huartx->Instance = USART3;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a67      	ldr	r2, [pc, #412]	; (800357c <UARTInit+0x1e8>)
 80033de:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 80033e0:	2327      	movs	r3, #39	; 0x27
 80033e2:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 80033e4:	4b66      	ldr	r3, [pc, #408]	; (8003580 <UARTInit+0x1ec>)
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e01e      	b.n	8003428 <UARTInit+0x94>
	}else if(huartx == &huart4){
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a65      	ldr	r2, [pc, #404]	; (8003584 <UARTInit+0x1f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d107      	bne.n	8003402 <UARTInit+0x6e>
		huartx->Instance = UART4;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a64      	ldr	r2, [pc, #400]	; (8003588 <UARTInit+0x1f4>)
 80033f6:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 80033f8:	2334      	movs	r3, #52	; 0x34
 80033fa:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 80033fc:	4b63      	ldr	r3, [pc, #396]	; (800358c <UARTInit+0x1f8>)
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e012      	b.n	8003428 <UARTInit+0x94>
	}else if(huartx == &huart5){
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a62      	ldr	r2, [pc, #392]	; (8003590 <UARTInit+0x1fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d107      	bne.n	800341a <UARTInit+0x86>
		huartx->Instance = UART5;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a61      	ldr	r2, [pc, #388]	; (8003594 <UARTInit+0x200>)
 800340e:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003410:	2335      	movs	r3, #53	; 0x35
 8003412:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8003414:	4b60      	ldr	r3, [pc, #384]	; (8003598 <UARTInit+0x204>)
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e006      	b.n	8003428 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a5f      	ldr	r2, [pc, #380]	; (800359c <UARTInit+0x208>)
 800341e:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003420:	2347      	movs	r3, #71	; 0x47
 8003422:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <UARTInit+0x20c>)
 8003426:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	220c      	movs	r2, #12
 8003444:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f011 ffec 	bl	8015430 <HAL_UART_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <UARTInit+0xce>
	{
		Error_Handler();
 800345e:	f001 fd7f 	bl	8004f60 <Error_Handler>
	}

	if(rxstate == ENABLE){
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d176      	bne.n	8003556 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <UARTInit+0x1d8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d119      	bne.n	80034a4 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8003470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003474:	2200      	movs	r2, #0
 8003476:	2105      	movs	r1, #5
 8003478:	4618      	mov	r0, r3
 800347a:	f00d fac7 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800347e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003482:	4618      	mov	r0, r3
 8003484:	f00d fafa 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800348c:	4618      	mov	r0, r3
 800348e:	f00d fad9 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80034a2:	e058      	b.n	8003556 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a34      	ldr	r2, [pc, #208]	; (8003578 <UARTInit+0x1e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d119      	bne.n	80034e0 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 80034ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2104      	movs	r1, #4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f00d faa9 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80034ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034be:	4618      	mov	r0, r3
 80034c0:	f00d fadc 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80034c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00d fabb 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0220 	orr.w	r2, r2, #32
 80034dc:	60da      	str	r2, [r3, #12]
}
 80034de:	e03a      	b.n	8003556 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a28      	ldr	r2, [pc, #160]	; (8003584 <UARTInit+0x1f0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d119      	bne.n	800351c <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00d fa8b 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80034f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f00d fabe 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003504:	4618      	mov	r0, r3
 8003506:	f00d fa9d 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	60da      	str	r2, [r3, #12]
}
 800351a:	e01c      	b.n	8003556 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <UARTInit+0x1fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d118      	bne.n	8003556 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8003524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003528:	2200      	movs	r2, #0
 800352a:	210e      	movs	r1, #14
 800352c:	4618      	mov	r0, r3
 800352e:	f00d fa6d 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003536:	4618      	mov	r0, r3
 8003538:	f00d faa0 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800353c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003540:	4618      	mov	r0, r3
 8003542:	f00d fa7f 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	60da      	str	r2, [r3, #12]
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200062c0 	.word	0x200062c0
 8003564:	40011000 	.word	0x40011000
 8003568:	20005f94 	.word	0x20005f94
 800356c:	2000652c 	.word	0x2000652c
 8003570:	40004400 	.word	0x40004400
 8003574:	20006340 	.word	0x20006340
 8003578:	20006078 	.word	0x20006078
 800357c:	40004800 	.word	0x40004800
 8003580:	200061dd 	.word	0x200061dd
 8003584:	200064ac 	.word	0x200064ac
 8003588:	40004c00 	.word	0x40004c00
 800358c:	200064a8 	.word	0x200064a8
 8003590:	200061e0 	.word	0x200061e0
 8003594:	40005000 	.word	0x40005000
 8003598:	20006158 	.word	0x20006158
 800359c:	40011400 	.word	0x40011400
 80035a0:	200061dc 	.word	0x200061dc

080035a4 <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <UARTx_DMA_Rx_Init+0x17c>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4a59      	ldr	r2, [pc, #356]	; (8003720 <UARTx_DMA_Rx_Init+0x17c>)
 80035ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	4b57      	ldr	r3, [pc, #348]	; (8003720 <UARTx_DMA_Rx_Init+0x17c>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4a55      	ldr	r2, [pc, #340]	; (8003724 <UARTx_DMA_Rx_Init+0x180>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d119      	bne.n	8003608 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 80035d4:	2310      	movs	r3, #16
 80035d6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a53      	ldr	r2, [pc, #332]	; (8003728 <UARTx_DMA_Rx_Init+0x184>)
 80035dc:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80035de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035e2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80035e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2105      	movs	r1, #5
 80035ec:	4618      	mov	r0, r3
 80035ee:	f00d fa0d 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80035f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f00d fa40 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80035fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003600:	4618      	mov	r0, r3
 8003602:	f00d fa1f 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8003606:	e058      	b.n	80036ba <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a48      	ldr	r2, [pc, #288]	; (800372c <UARTx_DMA_Rx_Init+0x188>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d119      	bne.n	8003644 <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003610:	230c      	movs	r3, #12
 8003612:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a46      	ldr	r2, [pc, #280]	; (8003730 <UARTx_DMA_Rx_Init+0x18c>)
 8003618:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 800361a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800361e:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003620:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003624:	2200      	movs	r2, #0
 8003626:	2104      	movs	r1, #4
 8003628:	4618      	mov	r0, r3
 800362a:	f00d f9ef 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800362e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003632:	4618      	mov	r0, r3
 8003634:	f00d fa22 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003638:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800363c:	4618      	mov	r0, r3
 800363e:	f00d fa01 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8003642:	e03a      	b.n	80036ba <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <UARTx_DMA_Rx_Init+0x190>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d119      	bne.n	8003680 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 800364c:	230d      	movs	r3, #13
 800364e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4a39      	ldr	r2, [pc, #228]	; (8003738 <UARTx_DMA_Rx_Init+0x194>)
 8003654:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800365a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 800365c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003660:	2200      	movs	r2, #0
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f00d f9d1 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800366a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800366e:	4618      	mov	r0, r3
 8003670:	f00d fa04 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003674:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003678:	4618      	mov	r0, r3
 800367a:	f00d f9e3 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 800367e:	e01c      	b.n	80036ba <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a2e      	ldr	r2, [pc, #184]	; (800373c <UARTx_DMA_Rx_Init+0x198>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d118      	bne.n	80036ba <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 8003688:	230b      	movs	r3, #11
 800368a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <UARTx_DMA_Rx_Init+0x19c>)
 8003690:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003696:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8003698:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800369c:	2200      	movs	r2, #0
 800369e:	210e      	movs	r1, #14
 80036a0:	4618      	mov	r0, r3
 80036a2:	f00d f9b3 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80036a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f00d f9e6 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80036b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00d f9c5 	bl	8010a44 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 80036ba:	2200      	movs	r2, #0
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fe68 	bl	8003394 <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2200      	movs	r2, #0
 80036d4:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036dc:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f00d f9cb 	bl	8010a98 <HAL_DMA_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003708:	f001 fc2a 	bl	8004f60 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	20005f34 	.word	0x20005f34
 8003728:	40026088 	.word	0x40026088
 800372c:	20006018 	.word	0x20006018
 8003730:	40026028 	.word	0x40026028
 8003734:	20005ed4 	.word	0x20005ed4
 8003738:	40026040 	.word	0x40026040
 800373c:	2000656c 	.word	0x2000656c
 8003740:	40026010 	.word	0x40026010

08003744 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <USART1_IRQHandler+0x10>)
 800374a:	f011 ffad 	bl	80156a8 <HAL_UART_IRQHandler>
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200062c0 	.word	0x200062c0

08003758 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <USART2_IRQHandler+0x10>)
 800375e:	f011 ffa3 	bl	80156a8 <HAL_UART_IRQHandler>
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000652c 	.word	0x2000652c

0800376c <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <USART3_IRQHandler+0x10>)
 8003772:	f011 ff99 	bl	80156a8 <HAL_UART_IRQHandler>
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20006078 	.word	0x20006078

08003780 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <UART4_IRQHandler+0x10>)
 8003786:	f011 ff8f 	bl	80156a8 <HAL_UART_IRQHandler>
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200064ac 	.word	0x200064ac

08003794 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <UART5_IRQHandler+0x10>)
 800379a:	f011 ff85 	bl	80156a8 <HAL_UART_IRQHandler>
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200061e0 	.word	0x200061e0

080037a8 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <USART6_IRQHandler+0x10>)
 80037ae:	f011 ff7b 	bl	80156a8 <HAL_UART_IRQHandler>
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20006468 	.word	0x20006468

080037bc <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	460b      	mov	r3, r1
 80037ca:	817b      	strh	r3, [r7, #10]
 80037cc:	4613      	mov	r3, r2
 80037ce:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	2228      	movs	r2, #40	; 0x28
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f015 fc57 	bl	801908c <memset>

	if(hcanx == &hcan1){
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a53      	ldr	r2, [pc, #332]	; (8003930 <CANxInit+0x174>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d103      	bne.n	80037ee <CANxInit+0x32>
		hcanx->Instance = CAN1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <CANxInit+0x178>)
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e002      	b.n	80037f4 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a51      	ldr	r2, [pc, #324]	; (8003938 <CANxInit+0x17c>)
 80037f2:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 80037f4:	897a      	ldrh	r2, [r7, #10]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8003806:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003814:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800381c:	615a      	str	r2, [r3, #20]
 800381e:	e00b      	b.n	8003838 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003820:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800382e:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8003836:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f00c f94d 	bl	800fafc <HAL_CAN_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <CANxInit+0xb0>
	{
		Error_Handler();
 8003868:	f001 fb7a 	bl	8004f60 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 800386c:	230e      	movs	r3, #14
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003870:	2301      	movs	r3, #1
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 8003886:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8003892:	2301      	movs	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003896:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800389a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4619      	mov	r1, r3
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f00c fa26 	bl	800fcf4 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <CANxInit+0x174>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d11c      	bne.n	80038ea <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2101      	movs	r1, #1
 80038ba:	2014      	movs	r0, #20
 80038bc:	f00d f8a6 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80038c0:	2014      	movs	r0, #20
 80038c2:	f00d f8bf 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80038c6:	2102      	movs	r1, #2
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f00c fd59 	bl	8010380 <HAL_CAN_ActivateNotification>
 80038ce:	e028      	b.n	8003922 <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2101      	movs	r1, #1
 80038d4:	2015      	movs	r0, #21
 80038d6:	f00d f899 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80038da:	2015      	movs	r0, #21
 80038dc:	f00d f8b2 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 80038e0:	2110      	movs	r1, #16
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f00c fd4c 	bl	8010380 <HAL_CAN_ActivateNotification>
 80038e8:	e01b      	b.n	8003922 <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10c      	bne.n	800390a <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 80038f0:	2200      	movs	r2, #0
 80038f2:	2101      	movs	r1, #1
 80038f4:	2040      	movs	r0, #64	; 0x40
 80038f6:	f00d f889 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80038fa:	2040      	movs	r0, #64	; 0x40
 80038fc:	f00d f8a2 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003900:	2102      	movs	r1, #2
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f00c fd3c 	bl	8010380 <HAL_CAN_ActivateNotification>
 8003908:	e00b      	b.n	8003922 <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2102      	movs	r1, #2
 800390e:	2041      	movs	r0, #65	; 0x41
 8003910:	f00d f87c 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003914:	2041      	movs	r0, #65	; 0x41
 8003916:	f00d f895 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 800391a:	2110      	movs	r1, #16
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f00c fd2f 	bl	8010380 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f00c fac6 	bl	800feb4 <HAL_CAN_Start>

}
 8003928:	bf00      	nop
 800392a:	3738      	adds	r7, #56	; 0x38
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000a274 	.word	0x2000a274
 8003934:	40006400 	.word	0x40006400
 8003938:	40006800 	.word	0x40006800

0800393c <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b090      	sub	sp, #64	; 0x40
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 800394a:	bf00      	nop
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f00c fbd0 	bl	80100f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f9      	beq.n	800394c <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 800395c:	2300      	movs	r3, #0
 800395e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003970:	2300      	movs	r3, #0
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 800397a:	e00c      	b.n	8003996 <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 800397c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003982:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003984:	1c51      	adds	r1, r2, #1
 8003986:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003988:	4611      	mov	r1, r2
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003990:	440b      	add	r3, r1
 8003992:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003996:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	873a      	strh	r2, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ed      	bne.n	800397c <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80039a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00f      	beq.n	80039c6 <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80039a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	f107 0214 	add.w	r2, r7, #20
 80039b2:	f107 0120 	add.w	r1, r7, #32
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f00c fac0 	bl	800ff3c <HAL_CAN_AddTxMessage>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <CAN_TxMsg+0x8a>
			Error_Handler();
 80039c2:	f001 facd 	bl	8004f60 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 80039c6:	69fb      	ldr	r3, [r7, #28]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3740      	adds	r7, #64	; 0x40
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <CAN_OPEN_TxMsg>:

	return(canMailbox);
}

uint32_t CAN_OPEN_TxMsg(CAN_HandleTypeDef* hcanx, uint8_t FunctionCode, uint8_t NodeID, uint8_t *Msg,uint8_t len)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b090      	sub	sp, #64	; 0x40
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	72fb      	strb	r3, [r7, #11]
 80039de:	4613      	mov	r3, r2
 80039e0:	72bb      	strb	r3, [r7, #10]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80039e2:	bf00      	nop
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f00c fb84 	bl	80100f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f9      	beq.n	80039e4 <CAN_OPEN_TxMsg+0x14>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80039f4:	2300      	movs	r3, #0
 80039f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80039f8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039fc:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId= ( (FunctionCode & 0x0F) << 7 ) | ( NodeID & 0x7F );// standard identifier=0
 80039fe:	7afb      	ldrb	r3, [r7, #11]
 8003a00:	01db      	lsls	r3, r3, #7
 8003a02:	f403 62f0 	and.w	r2, r3, #1920	; 0x780
 8003a06:	7abb      	ldrb	r3, [r7, #10]
 8003a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003a14:	2300      	movs	r3, #0
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003a22:	e00c      	b.n	8003a3e <CAN_OPEN_TxMsg+0x6e>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003a2c:	1c51      	adds	r1, r2, #1
 8003a2e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003a30:	4611      	mov	r1, r2
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a38:	440b      	add	r3, r1
 8003a3a:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003a3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	873a      	strh	r2, [r7, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ed      	bne.n	8003a24 <CAN_OPEN_TxMsg+0x54>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 8003a48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00f      	beq.n	8003a6e <CAN_OPEN_TxMsg+0x9e>
		TxMessage.DLC = i;
 8003a4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	f107 0214 	add.w	r2, r7, #20
 8003a5a:	f107 0120 	add.w	r1, r7, #32
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f00c fa6c 	bl	800ff3c <HAL_CAN_AddTxMessage>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <CAN_OPEN_TxMsg+0x9e>
			Error_Handler();
 8003a6a:	f001 fa79 	bl	8004f60 <Error_Handler>
		}

	}

	return(canMailbox);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3740      	adds	r7, #64	; 0x40
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <CAN_TxRTR>:

uint32_t CAN_TxRTR(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003a82:	bf00      	nop
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f00c fb34 	bl	80100f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f9      	beq.n	8003a84 <CAN_TxRTR+0xc>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	613b      	str	r3, [r7, #16]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
	TxMessage.RTR=CAN_RTR_REMOTE;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	61fb      	str	r3, [r7, #28]
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	TxMessage.DLC = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, NULL, &canMailbox) != HAL_OK) {
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	f107 0110 	add.w	r1, r7, #16
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f00c fa41 	bl	800ff3c <HAL_CAN_AddTxMessage>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <CAN_TxRTR+0x4c>
		Error_Handler();
 8003ac0:	f001 fa4e 	bl	8004f60 <Error_Handler>
	}


	return(canMailbox);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3728      	adds	r7, #40	; 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <FHInit>:
 * 							maxP	, max position of absolute encoder (only when in PP mode)
 * 							minP	, min position of absolute encoder (only when in PP mode)
 * Function Return		: 	None
 * Function Example		: 	FHInit(&fh1, &hcan1, 1, 0, 3000, 2147483647, -2147483647);
 */
void FHInit(FaulHaber_t *fh, CAN_HandleTypeDef* hcanx, uint8_t ID, int of, uint32_t vel, int maxP, int minP){
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]

	static uint8_t mtrCnt=0;
	fh->nodeID=ID;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	79fa      	ldrb	r2, [r7, #7]
 8003ae4:	711a      	strb	r2, [r3, #4]
	fh->hcanx=hcanx;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
	fh->mode=CNA;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	731a      	strb	r2, [r3, #12]
	fh->offset=of;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	611a      	str	r2, [r3, #16]
	fh->brake=1;
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	fh->maxV=vel;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	615a      	str	r2, [r3, #20]
	fh->maxPos=maxP;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	619a      	str	r2, [r3, #24]
	fh->minPos=minP;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a3a      	ldr	r2, [r7, #32]
 8003b16:	61da      	str	r2, [r3, #28]
	pfh[mtrCnt++]=fh;
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <FHInit+0x6c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	b2d1      	uxtb	r1, r2
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <FHInit+0x6c>)
 8003b22:	7011      	strb	r1, [r2, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <FHInit+0x70>)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000240 	.word	0x20000240
 8003b40:	20006ec4 	.word	0x20006ec4

08003b44 <FH_WaitInit>:
 * 							better call it after all initialization
 * Function Arguments	: 	None
 * Function Return		: 	None
 * Function Example		: 	FH_WaitInit();
 */
void FH_WaitInit(){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
	while(!PB1);
 8003b4a:	bf00      	nop
 8003b4c:	4b97      	ldr	r3, [pc, #604]	; (8003dac <FH_WaitInit+0x268>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f8      	beq.n	8003b4c <FH_WaitInit+0x8>
	uint8_t i=0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[8]={ 0x01, 0, 0x60, 0, 0x06, 0, 0, 0};
 8003b5e:	4a94      	ldr	r2, [pc, #592]	; (8003db0 <FH_WaitInit+0x26c>)
 8003b60:	463b      	mov	r3, r7
 8003b62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b66:	e883 0003 	stmia.w	r3, {r0, r1}
//	}
//	HAL_Delay(1000);
//	temp[1]=pfh[i]->nodeID;
//	CAN_TxMsg(pfh[i]->hcanx, 0x00, temp, 2);	//activate PDO
//	i=1;
	while(pfh[i]!=0){		//have to wait for driver to enable PDO transmission first
 8003b6a:	e05f      	b.n	8003c2c <FH_WaitInit+0xe8>
		temp[1]=pfh[i]->nodeID;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	4a91      	ldr	r2, [pc, #580]	; (8003db4 <FH_WaitInit+0x270>)
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	791b      	ldrb	r3, [r3, #4]
 8003b76:	707b      	strb	r3, [r7, #1]
		pfh[i]->PDOInit=0;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	4a8e      	ldr	r2, [pc, #568]	; (8003db4 <FH_WaitInit+0x270>)
 8003b7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b80:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003b84:	f36f 0382 	bfc	r3, #2, #1
 8003b88:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		timbuf=HAL_GetTick();
 8003b8c:	f00b ffaa 	bl	800fae4 <HAL_GetTick>
 8003b90:	60b8      	str	r0, [r7, #8]
		CAN_TxMsg(pfh[i]->hcanx, 0x00, temp, 2);
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <FH_WaitInit+0x270>)
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	6898      	ldr	r0, [r3, #8]
 8003b9c:	463a      	mov	r2, r7
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f7ff fecb 	bl	800393c <CAN_TxMsg>
		CAN_TxRTR(pfh[i]->hcanx, (PDO1Tx<<7) + pfh[i]->nodeID);
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	4a82      	ldr	r2, [pc, #520]	; (8003db4 <FH_WaitInit+0x270>)
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	4980      	ldr	r1, [pc, #512]	; (8003db4 <FH_WaitInit+0x270>)
 8003bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7ff ff59 	bl	8003a78 <CAN_TxRTR>
		while(!pfh[i]->PDOInit){
 8003bc6:	e023      	b.n	8003c10 <FH_WaitInit+0xcc>
			if(HAL_GetTick()-timbuf>=5){
 8003bc8:	f00b ff8c 	bl	800fae4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d91c      	bls.n	8003c10 <FH_WaitInit+0xcc>
				CAN_TxMsg(pfh[i]->hcanx, 0x00, temp, 2);	//activate PDO
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	4a76      	ldr	r2, [pc, #472]	; (8003db4 <FH_WaitInit+0x270>)
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	6898      	ldr	r0, [r3, #8]
 8003be0:	463a      	mov	r2, r7
 8003be2:	2302      	movs	r3, #2
 8003be4:	2100      	movs	r1, #0
 8003be6:	f7ff fea9 	bl	800393c <CAN_TxMsg>
				CAN_TxRTR(pfh[i]->hcanx, (PDO1Tx<<7) + pfh[i]->nodeID);
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <FH_WaitInit+0x270>)
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	496f      	ldr	r1, [pc, #444]	; (8003db4 <FH_WaitInit+0x270>)
 8003bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bfc:	791b      	ldrb	r3, [r3, #4]
 8003bfe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff ff37 	bl	8003a78 <CAN_TxRTR>
				timbuf=HAL_GetTick();
 8003c0a:	f00b ff6b 	bl	800fae4 <HAL_GetTick>
 8003c0e:	60b8      	str	r0, [r7, #8]
		while(!pfh[i]->PDOInit){
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <FH_WaitInit+0x270>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0d0      	beq.n	8003bc8 <FH_WaitInit+0x84>
			}
		}
		i++;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
	while(pfh[i]!=0){		//have to wait for driver to enable PDO transmission first
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	4a61      	ldr	r2, [pc, #388]	; (8003db4 <FH_WaitInit+0x270>)
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d199      	bne.n	8003b6c <FH_WaitInit+0x28>
	}

	while(i>0){
 8003c38:	e0ae      	b.n	8003d98 <FH_WaitInit+0x254>
		i--;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
		FH_Start(pfh[i]);	//operation enable state
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <FH_WaitInit+0x270>)
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f917 	bl	8003e7c <FH_Start>
		FH_Config(pfh[i]);
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <FH_WaitInit+0x270>)
 8003c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f8b0 	bl	8003dbc <FH_Config>
		FH_Pvel(pfh[i], pfh[i]->maxV);	//set profile velocity
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4a55      	ldr	r2, [pc, #340]	; (8003db4 <FH_WaitInit+0x270>)
 8003c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	4953      	ldr	r1, [pc, #332]	; (8003db4 <FH_WaitInit+0x270>)
 8003c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f000 f999 	bl	8003fa8 <FH_Pvel>
		pfh[i]->start=0;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	4a4e      	ldr	r2, [pc, #312]	; (8003db4 <FH_WaitInit+0x270>)
 8003c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c7e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003c82:	f36f 1345 	bfc	r3, #5, #1
 8003c86:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		timbuf=HAL_GetTick();
 8003c8a:	f00b ff2b 	bl	800fae4 <HAL_GetTick>
 8003c8e:	60b8      	str	r0, [r7, #8]
		while(HAL_GetTick()-timbuf<3);
 8003c90:	bf00      	nop
 8003c92:	f00b ff27 	bl	800fae4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d9f8      	bls.n	8003c92 <FH_WaitInit+0x14e>
		pfh[i]->waiting=1;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	4a44      	ldr	r2, [pc, #272]	; (8003db4 <FH_WaitInit+0x270>)
 8003ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ca8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		CAN_TxRTR(pfh[i]->hcanx, (PDO1Tx<<7) + pfh[i]->nodeID);
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <FH_WaitInit+0x270>)
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	493c      	ldr	r1, [pc, #240]	; (8003db4 <FH_WaitInit+0x270>)
 8003cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cc6:	791b      	ldrb	r3, [r3, #4]
 8003cc8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7ff fed2 	bl	8003a78 <CAN_TxRTR>
		while(pfh[i]->waiting);
 8003cd4:	bf00      	nop
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	4a36      	ldr	r2, [pc, #216]	; (8003db4 <FH_WaitInit+0x270>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f4      	bne.n	8003cd6 <FH_WaitInit+0x192>
		timbuf=HAL_GetTick();
 8003cec:	f00b fefa 	bl	800fae4 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]
		while(!pfh[i]->start){
 8003cf2:	e046      	b.n	8003d82 <FH_WaitInit+0x23e>
			FH_Start(pfh[i]);
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <FH_WaitInit+0x270>)
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f8bd 	bl	8003e7c <FH_Start>
			while(HAL_GetTick()-timbuf<3);
 8003d02:	bf00      	nop
 8003d04:	f00b feee 	bl	800fae4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d9f8      	bls.n	8003d04 <FH_WaitInit+0x1c0>
			led2 = !led2;
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <FH_WaitInit+0x274>)
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <FH_WaitInit+0x274>)
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2d9      	uxtb	r1, r3
 8003d28:	7853      	ldrb	r3, [r2, #1]
 8003d2a:	f361 1386 	bfi	r3, r1, #6, #1
 8003d2e:	7053      	strb	r3, [r2, #1]
			pfh[i]->waiting=1;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <FH_WaitInit+0x270>)
 8003d34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d38:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			CAN_TxRTR(pfh[i]->hcanx, (PDO1Tx<<7) + pfh[i]->nodeID);
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <FH_WaitInit+0x270>)
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	4918      	ldr	r1, [pc, #96]	; (8003db4 <FH_WaitInit+0x270>)
 8003d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d56:	791b      	ldrb	r3, [r3, #4]
 8003d58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7ff fe8a 	bl	8003a78 <CAN_TxRTR>
			while(pfh[i]->waiting);
 8003d64:	bf00      	nop
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <FH_WaitInit+0x270>)
 8003d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f4      	bne.n	8003d66 <FH_WaitInit+0x222>
			timbuf=HAL_GetTick();
 8003d7c:	f00b feb2 	bl	800fae4 <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]
		while(!pfh[i]->start){
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <FH_WaitInit+0x270>)
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ad      	beq.n	8003cf4 <FH_WaitInit+0x1b0>
	while(i>0){
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f47f af4d 	bne.w	8003c3a <FH_WaitInit+0xf6>
		}

	}


}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40020410 	.word	0x40020410
 8003db0:	0801ef18 	.word	0x0801ef18
 8003db4:	20006ec4 	.word	0x20006ec4
 8003db8:	40020814 	.word	0x40020814

08003dbc <FH_Config>:
 * Function Remarks		: 	-
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * Function Return		: 	None
 * Function Example		: 	FH_Config(&fh1);
 */
void FH_Config(FaulHaber_t *fh){
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	uint8_t temp[8]={0x2b, 0x5a, 0x60, 0x00, 0x06, 0, 0, 0};
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <FH_Config+0xbc>)
 8003dc6:	f107 0310 	add.w	r3, r7, #16
 8003dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dce:	e883 0003 	stmia.w	r3, {r0, r1}
	int num=2147483647;
 8003dd2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003dd6:	60fb      	str	r3, [r7, #12]
	FH_SDO(fh, temp);	//quickStop uses Quicktop ramp
 8003dd8:	f107 0310 	add.w	r3, r7, #16
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f95b 	bl	800409a <FH_SDO>
	temp[1]=0x3f;
 8003de4:	233f      	movs	r3, #63	; 0x3f
 8003de6:	747b      	strb	r3, [r7, #17]
	temp[2]=0x23;
 8003de8:	2323      	movs	r3, #35	; 0x23
 8003dea:	74bb      	strb	r3, [r7, #18]
	temp[4]=0x31;
 8003dec:	2331      	movs	r3, #49	; 0x31
 8003dee:	753b      	strb	r3, [r7, #20]
	FH_SDO(fh, temp);	//PV mode not limited by position limit
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f94f 	bl	800409a <FH_SDO>
	temp[0]=0x23;
 8003dfc:	2323      	movs	r3, #35	; 0x23
 8003dfe:	743b      	strb	r3, [r7, #16]
	temp[1]=0x7b;
 8003e00:	237b      	movs	r3, #123	; 0x7b
 8003e02:	747b      	strb	r3, [r7, #17]
	temp[2]=0x60;
 8003e04:	2360      	movs	r3, #96	; 0x60
 8003e06:	74bb      	strb	r3, [r7, #18]
	temp[3]=0x02;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	74fb      	strb	r3, [r7, #19]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
	memcpy(&temp[4], &num, 4);
 8003e0e:	617b      	str	r3, [r7, #20]
	FH_SDO(fh, temp);	//max position limit
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f93f 	bl	800409a <FH_SDO>
	temp[3]=0x01;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	74fb      	strb	r3, [r7, #19]
	num=-num;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	425b      	negs	r3, r3
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
	memcpy(&temp[4], &num, 4);
 8003e28:	617b      	str	r3, [r7, #20]
	FH_SDO(fh, temp);	//min position limit
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f932 	bl	800409a <FH_SDO>
	FH_Pos_Limit(fh, fh->maxPos, fh->minPos);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6999      	ldr	r1, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8cf 	bl	8003fe4 <FH_Pos_Limit>
	temp[0]=0x23;
 8003e46:	2323      	movs	r3, #35	; 0x23
 8003e48:	743b      	strb	r3, [r7, #16]
	temp[1]=0x65;
 8003e4a:	2365      	movs	r3, #101	; 0x65
 8003e4c:	747b      	strb	r3, [r7, #17]
	temp[3]=0x00;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	74fb      	strb	r3, [r7, #19]
	temp[4]=temp[5]=temp[6]=temp[7]=0xff;
 8003e52:	23ff      	movs	r3, #255	; 0xff
 8003e54:	75fb      	strb	r3, [r7, #23]
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	75bb      	strb	r3, [r7, #22]
 8003e5a:	7dbb      	ldrb	r3, [r7, #22]
 8003e5c:	757b      	strb	r3, [r7, #21]
 8003e5e:	7d7b      	ldrb	r3, [r7, #21]
 8003e60:	753b      	strb	r3, [r7, #20]
	FH_SDO(fh, temp);	//max following error
 8003e62:	f107 0310 	add.w	r3, r7, #16
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f916 	bl	800409a <FH_SDO>

}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	0801ef20 	.word	0x0801ef20

08003e7c <FH_Start>:
 * 							call this function to set it back into Operational Enable State
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * Function Return		: 	None
 * Function Example		: 	FH_Start(&fh1);
 */
void FH_Start(FaulHaber_t *fh){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
	uint8_t temp[2]={0x06, 0x00};
 8003e84:	2306      	movs	r3, #6
 8003e86:	81bb      	strh	r3, [r7, #12]
	CAN_OPEN_TxMsg(fh->hcanx, PDO1Rx, fh->nodeID, temp, 2);		//shut down
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6898      	ldr	r0, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	791a      	ldrb	r2, [r3, #4]
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	2102      	movs	r1, #2
 8003e96:	9100      	str	r1, [sp, #0]
 8003e98:	2104      	movs	r1, #4
 8003e9a:	f7ff fd99 	bl	80039d0 <CAN_OPEN_TxMsg>
	temp[0]=0x07;
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	733b      	strb	r3, [r7, #12]
	CAN_OPEN_TxMsg(fh->hcanx, PDO1Rx, fh->nodeID, temp, 2);		//switch on
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6898      	ldr	r0, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	791a      	ldrb	r2, [r3, #4]
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	2102      	movs	r1, #2
 8003eb0:	9100      	str	r1, [sp, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	f7ff fd8c 	bl	80039d0 <CAN_OPEN_TxMsg>
	temp[0]=0x0f;
 8003eb8:	230f      	movs	r3, #15
 8003eba:	733b      	strb	r3, [r7, #12]
	CAN_OPEN_TxMsg(fh->hcanx, PDO1Rx, fh->nodeID, temp, 2);		//enable operation
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6898      	ldr	r0, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	791a      	ldrb	r2, [r3, #4]
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2102      	movs	r1, #2
 8003eca:	9100      	str	r1, [sp, #0]
 8003ecc:	2104      	movs	r1, #4
 8003ece:	f7ff fd7f 	bl	80039d0 <CAN_OPEN_TxMsg>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <FH_PosRel>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							pos	, value of relative target position
 * Function Return		: 	None
 * Function Example		: 	FH_PosRel(&fh1, 20000);
 */
void FH_PosRel(FaulHaber_t *fh, int pos){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	fh1.start_pos = 1;
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <FH_PosRel+0x70>)
 8003ee8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	FHmode(fh, PP);
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8aa 	bl	8004050 <FHmode>
	uint8_t temp[6]={0x0f, 0x00, 0, 0, 0, 0};
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <FH_PosRel+0x74>)
 8003efe:	f107 0308 	add.w	r3, r7, #8
 8003f02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f06:	6018      	str	r0, [r3, #0]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	8019      	strh	r1, [r3, #0]
	CAN_OPEN_TxMsg(fh->hcanx, PDO1Rx, fh->nodeID, temp, 2);		//set bit 4 to LOW
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6898      	ldr	r0, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	791a      	ldrb	r2, [r3, #4]
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	2102      	movs	r1, #2
 8003f1a:	9100      	str	r1, [sp, #0]
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	f7ff fd57 	bl	80039d0 <CAN_OPEN_TxMsg>
	temp[0]=0x7f;
 8003f22:	237f      	movs	r3, #127	; 0x7f
 8003f24:	723b      	strb	r3, [r7, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
	memcpy(&temp[2], &pos, 4);
 8003f28:	f8c7 300a 	str.w	r3, [r7, #10]
	CAN_OPEN_TxMsg(fh->hcanx, PDO2Rx, fh->nodeID, temp, 6);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6898      	ldr	r0, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	791a      	ldrb	r2, [r3, #4]
 8003f34:	f107 0308 	add.w	r3, r7, #8
 8003f38:	2106      	movs	r1, #6
 8003f3a:	9100      	str	r1, [sp, #0]
 8003f3c:	2106      	movs	r1, #6
 8003f3e:	f7ff fd47 	bl	80039d0 <CAN_OPEN_TxMsg>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000a598 	.word	0x2000a598
 8003f50:	0801ef28 	.word	0x0801ef28

08003f54 <FH_Vel>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							vel	, value of target velocity
 * Function Return		: 	None
 * Function Example		: 	FH_Vel(&fh1, 2000);
 */
void FH_Vel(FaulHaber_t *fh, int vel){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	FHmode(fh, PV);
 8003f5e:	2103      	movs	r1, #3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f875 	bl	8004050 <FHmode>
	uint8_t temp[8]={0x0f, 0x00, 0, 0, 0, 0};
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <FH_Vel+0x50>)
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f70:	6018      	str	r0, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	8019      	strh	r1, [r3, #0]
 8003f76:	3302      	adds	r3, #2
 8003f78:	0c0a      	lsrs	r2, r1, #16
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	683b      	ldr	r3, [r7, #0]
	memcpy(&temp[2], &vel, 4);
 8003f82:	f8c7 300a 	str.w	r3, [r7, #10]
	CAN_OPEN_TxMsg(fh->hcanx, PDO3Rx, fh->nodeID, temp, 6);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6898      	ldr	r0, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	791a      	ldrb	r2, [r3, #4]
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	2106      	movs	r1, #6
 8003f94:	9100      	str	r1, [sp, #0]
 8003f96:	2108      	movs	r1, #8
 8003f98:	f7ff fd1a 	bl	80039d0 <CAN_OPEN_TxMsg>
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	0801ef30 	.word	0x0801ef30

08003fa8 <FH_Pvel>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							vel	, value of Profile Velocity
 * Function Return		: 	None
 * Function Example		: 	FH_Pvel(&fh1, 3000);
 */
void FH_Pvel(FaulHaber_t *fh, uint32_t vel){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
	fh->maxV=vel;
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	615a      	str	r2, [r3, #20]
	uint8_t temp[8]={ 0x23, 0x81, 0x60, 0x00, 0, 0, 0, 0 };
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <FH_Pvel+0x38>)
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8003fc6:	683b      	ldr	r3, [r7, #0]
	memcpy(&temp[4], &vel, 4);
 8003fc8:	60fb      	str	r3, [r7, #12]
	FH_SDO(fh, temp);
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f862 	bl	800409a <FH_SDO>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	0801ef40 	.word	0x0801ef40

08003fe4 <FH_Pos_Limit>:
 * 							max	, value of maximum Software Position Limit
 * 							min	, value of minimum Software Position Limit
 * Function Return		: 	None
 * Function Example		: 	FH_Pos_Limit(&fh1, 200000000, -200000000);
 */
void FH_Pos_Limit(FaulHaber_t *fh, int max, int min){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	fh->maxPos=max;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	619a      	str	r2, [r3, #24]
	fh->minPos=min;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	61da      	str	r2, [r3, #28]
	uint8_t temp[8]={0x23, 0x7d, 0x60, 0x02, 0, 0, 0, 0};
 8003ffc:	4a13      	ldr	r2, [pc, #76]	; (800404c <FH_Pos_Limit+0x68>)
 8003ffe:	f107 0318 	add.w	r3, r7, #24
 8004002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004006:	e883 0003 	stmia.w	r3, {r0, r1}
	int set = max + fh->offset;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
	memcpy(&temp[4], &set, 4);
 8004016:	61fb      	str	r3, [r7, #28]
	FH_SDO(fh, temp);
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	4619      	mov	r1, r3
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f83b 	bl	800409a <FH_SDO>
	temp[3]=0x01;
 8004024:	2301      	movs	r3, #1
 8004026:	76fb      	strb	r3, [r7, #27]
	set = min + fh->offset;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
	memcpy(&temp[4], &set, 4);
 8004034:	61fb      	str	r3, [r7, #28]
	FH_SDO(fh, temp);
 8004036:	f107 0318 	add.w	r3, r7, #24
 800403a:	4619      	mov	r1, r3
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f82c 	bl	800409a <FH_SDO>
}
 8004042:	bf00      	nop
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	0801ef50 	.word	0x0801ef50

08004050 <FHmode>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							mode, mode of motion controller
 * Function Return		: 	None
 * Function Example		: 	FHmode(&fh1, PV);
 */
void FHmode(FaulHaber_t *fh, FH_OPmode mode){
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
	if(fh->mode != mode){
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7b1b      	ldrb	r3, [r3, #12]
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	429a      	cmp	r2, r3
 8004064:	d015      	beq.n	8004092 <FHmode+0x42>
		uint8_t temp[8]={ 0x2f, 0x60, 0x60, 0x00, mode, 0x00, 0x00, 0x00 };
 8004066:	232f      	movs	r3, #47	; 0x2f
 8004068:	723b      	strb	r3, [r7, #8]
 800406a:	2360      	movs	r3, #96	; 0x60
 800406c:	727b      	strb	r3, [r7, #9]
 800406e:	2360      	movs	r3, #96	; 0x60
 8004070:	72bb      	strb	r3, [r7, #10]
 8004072:	2300      	movs	r3, #0
 8004074:	72fb      	strb	r3, [r7, #11]
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	733b      	strb	r3, [r7, #12]
 800407a:	2300      	movs	r3, #0
 800407c:	737b      	strb	r3, [r7, #13]
 800407e:	2300      	movs	r3, #0
 8004080:	73bb      	strb	r3, [r7, #14]
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
		FH_SDO(fh, temp);
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f804 	bl	800409a <FH_SDO>
	}

}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <FH_SDO>:
 * Function Arguments	: 	*fh		, pointer to structure FaulHaber_t
 * 							buff	, data to be written
 * Function Return		: 	None
 * Function Example		: 	FH_SDO(&fh1, temp);
 */
void FH_SDO(FaulHaber_t *fh, uint8_t buff[8]){
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af02      	add	r7, sp, #8
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
	fh->waiting=1;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	memcpy(fh->conf, &buff[1], 3);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f103 0020 	add.w	r0, r3, #32
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	4619      	mov	r1, r3
 80040c0:	f014 ffd6 	bl	8019070 <memcpy>
	CAN_OPEN_TxMsg(fh->hcanx, SDORx, fh->nodeID, buff, 8);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6898      	ldr	r0, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	791a      	ldrb	r2, [r3, #4]
 80040cc:	2308      	movs	r3, #8
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	210c      	movs	r1, #12
 80040d4:	f7ff fc7c 	bl	80039d0 <CAN_OPEN_TxMsg>
	uint32_t ti=HAL_GetTick();
 80040d8:	f00b fd04 	bl	800fae4 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]
	while(fh->waiting){
 80040de:	e013      	b.n	8004108 <FH_SDO+0x6e>
		if(HAL_GetTick()-ti >= 25){
 80040e0:	f00b fd00 	bl	800fae4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b18      	cmp	r3, #24
 80040ec:	d90c      	bls.n	8004108 <FH_SDO+0x6e>
			CAN_OPEN_TxMsg(fh->hcanx, SDORx, fh->nodeID, buff, 8);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6898      	ldr	r0, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	791a      	ldrb	r2, [r3, #4]
 80040f6:	2308      	movs	r3, #8
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	210c      	movs	r1, #12
 80040fe:	f7ff fc67 	bl	80039d0 <CAN_OPEN_TxMsg>
			ti=HAL_GetTick();
 8004102:	f00b fcef 	bl	800fae4 <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]
	while(fh->waiting){
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e3      	bne.n	80040e0 <FH_SDO+0x46>
		}
	}
	fh->conf[0]=fh->conf[1]=fh->conf[2]=0;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a6a      	ldr	r2, [pc, #424]	; (80042f8 <FH_CheckCAN+0x1b8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 8004154:	4b69      	ldr	r3, [pc, #420]	; (80042fc <FH_CheckCAN+0x1bc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e002      	b.n	8004162 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 800415c:	4b68      	ldr	r3, [pc, #416]	; (8004300 <FH_CheckCAN+0x1c0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <FH_CheckCAN+0x38>
		return 1;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	09db      	lsrs	r3, r3, #7
 800417c:	2b0e      	cmp	r3, #14
 800417e:	d821      	bhi.n	80041c4 <FH_CheckCAN+0x84>
 8004180:	2b03      	cmp	r3, #3
 8004182:	f0c0 80b1 	bcc.w	80042e8 <FH_CheckCAN+0x1a8>
 8004186:	3b03      	subs	r3, #3
 8004188:	2b0b      	cmp	r3, #11
 800418a:	f200 80ad 	bhi.w	80042e8 <FH_CheckCAN+0x1a8>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <FH_CheckCAN+0x54>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041d3 	.word	0x080041d3
 8004198:	080042e9 	.word	0x080042e9
 800419c:	08004239 	.word	0x08004239
 80041a0:	080042e9 	.word	0x080042e9
 80041a4:	08004265 	.word	0x08004265
 80041a8:	080042e9 	.word	0x080042e9
 80041ac:	08004283 	.word	0x08004283
 80041b0:	080042e9 	.word	0x080042e9
 80041b4:	080042a1 	.word	0x080042a1
 80041b8:	080042e9 	.word	0x080042e9
 80041bc:	080042e9 	.word	0x080042e9
 80041c0:	080041cb 	.word	0x080041cb
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d002      	beq.n	80041ce <FH_CheckCAN+0x8e>
 80041c8:	e08e      	b.n	80042e8 <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e08d      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e08b      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	b2d9      	uxtb	r1, r3
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80041e8:	f361 1304 	bfi	r3, r1, #4, #1
 80041ec:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004202:	f043 0304 	orr.w	r3, r3, #4
 8004206:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800420a:	e00c      	b.n	8004226 <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <FH_CheckCAN+0xe6>
				fh->start=1;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800421e:	f043 0320 	orr.w	r3, r3, #32
 8004222:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800422c:	f36f 0341 	bfc	r3, #1, #1
 8004230:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8004234:	2300      	movs	r3, #0
 8004236:	e058      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3324      	adds	r3, #36	; 0x24
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	3202      	adds	r2, #2
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	1ad2      	subs	r2, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004258:	f36f 0341 	bfc	r3, #1, #1
 800425c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8004260:	2300      	movs	r3, #0
 8004262:	e042      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3324      	adds	r3, #36	; 0x24
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	3202      	adds	r2, #2
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004276:	f36f 0341 	bfc	r3, #1, #1
 800427a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 800427e:	2300      	movs	r3, #0
 8004280:	e033      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3324      	adds	r3, #36	; 0x24
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	3202      	adds	r2, #2
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004294:	f36f 0341 	bfc	r3, #1, #1
 8004298:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 800429c:	2300      	movs	r3, #0
 800429e:	e024      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2260      	movs	r2, #96	; 0x60
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d116      	bne.n	80042e4 <FH_CheckCAN+0x1a4>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3302      	adds	r3, #2
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d10e      	bne.n	80042e4 <FH_CheckCAN+0x1a4>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	3303      	adds	r3, #3
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d106      	bne.n	80042e4 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80042dc:	f36f 0341 	bfc	r3, #1, #1
 80042e0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 80042e8:	2301      	movs	r3, #1
			break;
	}
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	2000a274 	.word	0x2000a274
 80042fc:	2000a7e0 	.word	0x2000a7e0
 8004300:	20006f58 	.word	0x20006f58

08004304 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	led2 = 1;
 800430c:	4a11      	ldr	r2, [pc, #68]	; (8004354 <FaulHaber_Handler+0x50>)
 800430e:	7853      	ldrb	r3, [r2, #1]
 8004310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004314:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	2300      	movs	r3, #0
 800431c:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 800431e:	e00c      	b.n	800433a <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8004320:	7bbb      	ldrb	r3, [r7, #14]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	73ba      	strb	r2, [r7, #14]
 8004326:	461a      	mov	r2, r3
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <FaulHaber_Handler+0x54>)
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff05 	bl	8004140 <FH_CheckCAN>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <FaulHaber_Handler+0x48>
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	4a05      	ldr	r2, [pc, #20]	; (8004358 <FaulHaber_Handler+0x54>)
 8004344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e9      	bne.n	8004320 <FaulHaber_Handler+0x1c>

}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40020814 	.word	0x40020814
 8004358:	20006ec4 	.word	0x20006ec4

0800435c <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	460b      	mov	r3, r1
 800436a:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a4d      	ldr	r2, [pc, #308]	; (80044ac <I2CxInit+0x150>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d107      	bne.n	800438c <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a4c      	ldr	r2, [pc, #304]	; (80044b0 <I2CxInit+0x154>)
 8004380:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8004382:	2320      	movs	r3, #32
 8004384:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8004386:	231f      	movs	r3, #31
 8004388:	75bb      	strb	r3, [r7, #22]
 800438a:	e012      	b.n	80043b2 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a49      	ldr	r2, [pc, #292]	; (80044b4 <I2CxInit+0x158>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d107      	bne.n	80043a4 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a48      	ldr	r2, [pc, #288]	; (80044b8 <I2CxInit+0x15c>)
 8004398:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 800439a:	2322      	movs	r3, #34	; 0x22
 800439c:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 800439e:	2321      	movs	r3, #33	; 0x21
 80043a0:	75bb      	strb	r3, [r7, #22]
 80043a2:	e006      	b.n	80043b2 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a45      	ldr	r2, [pc, #276]	; (80044bc <I2CxInit+0x160>)
 80043a8:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 80043aa:	2349      	movs	r3, #73	; 0x49
 80043ac:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 80043ae:	2348      	movs	r3, #72	; 0x48
 80043b0:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 80043be:	7afb      	ldrb	r3, [r7, #11]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ce:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d051      	beq.n	8004492 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a2e      	ldr	r2, [pc, #184]	; (80044ac <I2CxInit+0x150>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d118      	bne.n	8004428 <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 80043f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f00c fb04 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8004404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004408:	4618      	mov	r0, r3
 800440a:	f00c fb1b 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 800440e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004412:	2200      	movs	r2, #0
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f00c faf8 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 800441c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004420:	4618      	mov	r0, r3
 8004422:	f00c fb0f 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8004426:	e034      	b.n	8004492 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <I2CxInit+0x158>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d118      	bne.n	8004462 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8004430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004434:	2200      	movs	r2, #0
 8004436:	210e      	movs	r1, #14
 8004438:	4618      	mov	r0, r3
 800443a:	f00c fae7 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 800443e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004442:	4618      	mov	r0, r3
 8004444:	f00c fafe 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8004448:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800444c:	2200      	movs	r2, #0
 800444e:	210e      	movs	r1, #14
 8004450:	4618      	mov	r0, r3
 8004452:	f00c fadb 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8004456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800445a:	4618      	mov	r0, r3
 800445c:	f00c faf2 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8004460:	e017      	b.n	8004492 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8004462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004466:	2200      	movs	r2, #0
 8004468:	210e      	movs	r1, #14
 800446a:	4618      	mov	r0, r3
 800446c:	f00c face 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8004470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004474:	4618      	mov	r0, r3
 8004476:	f00c fae5 	bl	8010a44 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 800447a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800447e:	2200      	movs	r2, #0
 8004480:	210e      	movs	r1, #14
 8004482:	4618      	mov	r0, r3
 8004484:	f00c fac2 	bl	8010a0c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8004488:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800448c:	4618      	mov	r0, r3
 800448e:	f00c fad9 	bl	8010a44 <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f00d f9bc 	bl	8011810 <HAL_I2C_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2CxInit+0x146>
	{
		Error_Handler();
 800449e:	f000 fd5f 	bl	8004f60 <Error_Handler>
	}

}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20007010 	.word	0x20007010
 80044b0:	40005400 	.word	0x40005400
 80044b4:	20007068 	.word	0x20007068
 80044b8:	40005800 	.word	0x40005800
 80044bc:	40005c00 	.word	0x40005c00

080044c0 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	4b9e      	ldr	r3, [pc, #632]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a9d      	ldr	r2, [pc, #628]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 80044da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a99      	ldr	r2, [pc, #612]	; (8004754 <I2CX_DMA_RX_Init+0x294>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d11d      	bne.n	8004530 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a98      	ldr	r2, [pc, #608]	; (8004758 <I2CX_DMA_RX_Init+0x298>)
 80044f8:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a97      	ldr	r2, [pc, #604]	; (800475c <I2CX_DMA_RX_Init+0x29c>)
 80044fe:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8004500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004504:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8004506:	230b      	movs	r3, #11
 8004508:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 800450a:	2320      	movs	r3, #32
 800450c:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 800450e:	231f      	movs	r3, #31
 8004510:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	4b8e      	ldr	r3, [pc, #568]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	4a8d      	ldr	r2, [pc, #564]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 800451c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004520:	6313      	str	r3, [r2, #48]	; 0x30
 8004522:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <I2CX_DMA_RX_Init+0x290>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	e022      	b.n	8004576 <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a8b      	ldr	r2, [pc, #556]	; (8004760 <I2CX_DMA_RX_Init+0x2a0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10f      	bne.n	8004558 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a8a      	ldr	r2, [pc, #552]	; (8004764 <I2CX_DMA_RX_Init+0x2a4>)
 800453c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a89      	ldr	r2, [pc, #548]	; (8004768 <I2CX_DMA_RX_Init+0x2a8>)
 8004542:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8004544:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8004548:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 800454a:	230e      	movs	r3, #14
 800454c:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 800454e:	2322      	movs	r3, #34	; 0x22
 8004550:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8004552:	2321      	movs	r3, #33	; 0x21
 8004554:	777b      	strb	r3, [r7, #29]
 8004556:	e00e      	b.n	8004576 <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a84      	ldr	r2, [pc, #528]	; (800476c <I2CX_DMA_RX_Init+0x2ac>)
 800455c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4a83      	ldr	r2, [pc, #524]	; (8004770 <I2CX_DMA_RX_Init+0x2b0>)
 8004562:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8004564:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8004568:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 800456a:	230d      	movs	r3, #13
 800456c:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 800456e:	2349      	movs	r3, #73	; 0x49
 8004570:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8004572:	2348      	movs	r3, #72	; 0x48
 8004574:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800458e:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045a8:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2203      	movs	r2, #3
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f00c fa66 	bl	8010a98 <HAL_DMA_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 80045d2:	f000 fcc5 	bl	8004f60 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a5b      	ldr	r2, [pc, #364]	; (8004754 <I2CX_DMA_RX_Init+0x294>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 80045ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045ee:	2200      	movs	r2, #0
 80045f0:	210a      	movs	r1, #10
 80045f2:	4618      	mov	r0, r3
 80045f4:	f00c fa0a 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80045f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f00c fa3d 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8004602:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004606:	4618      	mov	r0, r3
 8004608:	f00c fa1c 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 800460c:	e026      	b.n	800465c <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a53      	ldr	r2, [pc, #332]	; (8004760 <I2CX_DMA_RX_Init+0x2a0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8004616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800461a:	2200      	movs	r2, #0
 800461c:	210e      	movs	r1, #14
 800461e:	4618      	mov	r0, r3
 8004620:	f00c f9f4 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8004624:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004628:	4618      	mov	r0, r3
 800462a:	f00c fa27 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800462e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004632:	4618      	mov	r0, r3
 8004634:	f00c fa06 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8004638:	e010      	b.n	800465c <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 800463a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800463e:	2200      	movs	r2, #0
 8004640:	210e      	movs	r1, #14
 8004642:	4618      	mov	r0, r3
 8004644:	f00c f9e2 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8004648:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800464c:	4618      	mov	r0, r3
 800464e:	f00c fa15 	bl	8010a7c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8004652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004656:	4618      	mov	r0, r3
 8004658:	f00c f9f4 	bl	8010a44 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	461a      	mov	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004678:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <I2CX_DMA_RX_Init+0x294>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d118      	bne.n	80046cc <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 800469a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f00c f9b2 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 80046a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00c f9c9 	bl	8010a44 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 80046b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80046b6:	2200      	movs	r2, #0
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f00c f9a6 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 80046c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f00c f9bd 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 80046ca:	e034      	b.n	8004736 <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a24      	ldr	r2, [pc, #144]	; (8004760 <I2CX_DMA_RX_Init+0x2a0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d118      	bne.n	8004706 <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 80046d4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046d8:	2200      	movs	r2, #0
 80046da:	210e      	movs	r1, #14
 80046dc:	4618      	mov	r0, r3
 80046de:	f00c f995 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 80046e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f00c f9ac 	bl	8010a44 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 80046ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80046f0:	2200      	movs	r2, #0
 80046f2:	210e      	movs	r1, #14
 80046f4:	4618      	mov	r0, r3
 80046f6:	f00c f989 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 80046fa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80046fe:	4618      	mov	r0, r3
 8004700:	f00c f9a0 	bl	8010a44 <HAL_NVIC_EnableIRQ>
 8004704:	e017      	b.n	8004736 <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8004706:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800470a:	2200      	movs	r2, #0
 800470c:	210e      	movs	r1, #14
 800470e:	4618      	mov	r0, r3
 8004710:	f00c f97c 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8004714:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004718:	4618      	mov	r0, r3
 800471a:	f00c f993 	bl	8010a44 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 800471e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004722:	2200      	movs	r2, #0
 8004724:	210e      	movs	r1, #14
 8004726:	4618      	mov	r0, r3
 8004728:	f00c f970 	bl	8010a0c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 800472c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004730:	4618      	mov	r0, r3
 8004732:	f00c f987 	bl	8010a44 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f00d f86a 	bl	8011810 <HAL_I2C_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8004742:	f000 fc0d 	bl	8004f60 <Error_Handler>
	}
}
 8004746:	bf00      	nop
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	20007010 	.word	0x20007010
 8004758:	40005400 	.word	0x40005400
 800475c:	40026010 	.word	0x40026010
 8004760:	20007068 	.word	0x20007068
 8004764:	40005800 	.word	0x40005800
 8004768:	40026058 	.word	0x40026058
 800476c:	40005c00 	.word	0x40005c00
 8004770:	40026040 	.word	0x40026040

08004774 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <I2C2_EV_IRQHandler+0x10>)
 800477a:	f00d fad3 	bl	8011d24 <HAL_I2C_EV_IRQHandler>


}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20007068 	.word	0x20007068

08004788 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 800478c:	4802      	ldr	r0, [pc, #8]	; (8004798 <I2C2_ER_IRQHandler+0x10>)
 800478e:	f00d fc36 	bl	8011ffe <HAL_I2C_ER_IRQHandler>


}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20007068 	.word	0x20007068

0800479c <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <I2C3_EV_IRQHandler+0x10>)
 80047a2:	f00d fabf 	bl	8011d24 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20006c80 	.word	0x20006c80

080047b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0a4      	sub	sp, #144	; 0x90
 80047b4:	af00      	add	r7, sp, #0
	set();
 80047b6:	f006 ff03 	bl	800b5c0 <set>
	const osThreadAttr_t MainTask_attributes =
 80047ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f014 fc62 	bl	801908c <memset>
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <main+0xe0>)
 80047ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d4:	2318      	movs	r3, #24
 80047d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 80047da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f014 fc52 	bl	801908c <memset>
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <main+0xe4>)
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f2:	2318      	movs	r3, #24
 80047f4:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 80047f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f014 fc44 	bl	801908c <memset>
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <main+0xe8>)
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
 800480e:	2318      	movs	r3, #24
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 8004812:	463b      	mov	r3, r7
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f014 fc37 	bl	801908c <memset>
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <main+0xec>)
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	2318      	movs	r3, #24
 800482a:	61bb      	str	r3, [r7, #24]

//	const osThreadAttr_t PitchTask_attributes =
//			{ .name = "PitchTask", .stack_size = 256 * 4, .priority =
//					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 800482c:	f011 fd9c 	bl	8016368 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004830:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004834:	461a      	mov	r2, r3
 8004836:	2100      	movs	r1, #0
 8004838:	4819      	ldr	r0, [pc, #100]	; (80048a0 <main+0xf0>)
 800483a:	f011 fddf 	bl	80163fc <osThreadNew>
 800483e:	4603      	mov	r3, r0
 8004840:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <main+0xf4>)
 8004842:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 8004844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004848:	461a      	mov	r2, r3
 800484a:	2100      	movs	r1, #0
 800484c:	4816      	ldr	r0, [pc, #88]	; (80048a8 <main+0xf8>)
 800484e:	f011 fdd5 	bl	80163fc <osThreadNew>
 8004852:	4603      	mov	r3, r0
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <main+0xfc>)
 8004856:	6013      	str	r3, [r2, #0]
//	PitchTaskHandle = osThreadNew(PitchTask, NULL, &PitchTask_attributes);
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8004858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800485c:	461a      	mov	r2, r3
 800485e:	2100      	movs	r1, #0
 8004860:	4813      	ldr	r0, [pc, #76]	; (80048b0 <main+0x100>)
 8004862:	f011 fdcb 	bl	80163fc <osThreadNew>
 8004866:	4603      	mov	r3, r0
 8004868:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <main+0x104>)
 800486a:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 800486c:	463b      	mov	r3, r7
 800486e:	461a      	mov	r2, r3
 8004870:	2100      	movs	r1, #0
 8004872:	4811      	ldr	r0, [pc, #68]	; (80048b8 <main+0x108>)
 8004874:	f011 fdc2 	bl	80163fc <osThreadNew>
 8004878:	4603      	mov	r3, r0
 800487a:	4a10      	ldr	r2, [pc, #64]	; (80048bc <main+0x10c>)
 800487c:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <main+0x110>)
 8004880:	7853      	ldrb	r3, [r2, #1]
 8004882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004886:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 8004888:	f011 fd92 	bl	80163b0 <osKernelStart>

	while (1) {
 800488c:	e7fe      	b.n	800488c <main+0xdc>
 800488e:	bf00      	nop
 8004890:	0801ef58 	.word	0x0801ef58
 8004894:	0801ef64 	.word	0x0801ef64
 8004898:	0801ef74 	.word	0x0801ef74
 800489c:	0801ef80 	.word	0x0801ef80
 80048a0:	08004a99 	.word	0x08004a99
 80048a4:	20007cf0 	.word	0x20007cf0
 80048a8:	08004b6d 	.word	0x08004b6d
 80048ac:	2000772c 	.word	0x2000772c
 80048b0:	08004c81 	.word	0x08004c81
 80048b4:	2000a208 	.word	0x2000a208
 80048b8:	08004e81 	.word	0x08004e81
 80048bc:	2000a0fc 	.word	0x2000a0fc
 80048c0:	40020814 	.word	0x40020814
 80048c4:	00000000 	.word	0x00000000

080048c8 <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b092      	sub	sp, #72	; 0x48
 80048ce:	af0c      	add	r7, sp, #48	; 0x30

	static int counter = 0;
	counter++;
 80048d0:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <TIM6_DAC_IRQHandler+0x198>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a62      	ldr	r2, [pc, #392]	; (8004a60 <TIM6_DAC_IRQHandler+0x198>)
 80048d8:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 80048da:	4b61      	ldr	r3, [pc, #388]	; (8004a60 <TIM6_DAC_IRQHandler+0x198>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d15d      	bne.n	80049a2 <TIM6_DAC_IRQHandler+0xda>
	{
		led1 = !led1;
 80048e6:	4b5f      	ldr	r3, [pc, #380]	; (8004a64 <TIM6_DAC_IRQHandler+0x19c>)
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	4a5c      	ldr	r2, [pc, #368]	; (8004a64 <TIM6_DAC_IRQHandler+0x19c>)
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2d9      	uxtb	r1, r3
 80048fc:	7853      	ldrb	r3, [r2, #1]
 80048fe:	f361 1345 	bfi	r3, r1, #5, #1
 8004902:	7053      	strb	r3, [r2, #1]
		counter = 0;
 8004904:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <TIM6_DAC_IRQHandler+0x198>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]

//		sprintf((char*) debug, "vX: %.2f vY: %.2f vrX: %.2f vrY: %.2f rz: %.2f\n", pp.vx, pp.vy, pp.rvx, pp.rvy, pp.real_z_rad);
//		sprintf((char*) debug, "v1: %.2f v2: %.2f v3: %.2f v4: %.2f\n", pp.v1, pp.v2, pp.v3, pp.v4);
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f LX: %.2lf LY: %.2lf LAx: %.2f LAy: %.2f\n", pp.real_x, pp.real_y, pp.real_z, lidar.pole.x, lidar.pole.y, lidar.adj_x, lidar.adj_y);
 800490a:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <TIM6_DAC_IRQHandler+0x1a0>)
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe1a 	bl	8000548 <__aeabi_f2d>
 8004914:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <TIM6_DAC_IRQHandler+0x1a0>)
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fe13 	bl	8000548 <__aeabi_f2d>
 8004922:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004926:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <TIM6_DAC_IRQHandler+0x1a0>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fb fe0c 	bl	8000548 <__aeabi_f2d>
 8004930:	e9c7 0100 	strd	r0, r1, [r7]
 8004934:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <TIM6_DAC_IRQHandler+0x1a4>)
 8004936:	e9d3 896a 	ldrd	r8, r9, [r3, #424]	; 0x1a8
 800493a:	4b4c      	ldr	r3, [pc, #304]	; (8004a6c <TIM6_DAC_IRQHandler+0x1a4>)
 800493c:	e9d3 ab6c 	ldrd	sl, fp, [r3, #432]	; 0x1b0
 8004940:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <TIM6_DAC_IRQHandler+0x1a4>)
 8004942:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004946:	4618      	mov	r0, r3
 8004948:	f7fb fdfe 	bl	8000548 <__aeabi_f2d>
 800494c:	4604      	mov	r4, r0
 800494e:	460d      	mov	r5, r1
 8004950:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <TIM6_DAC_IRQHandler+0x1a4>)
 8004952:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fdf6 	bl	8000548 <__aeabi_f2d>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004964:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004968:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800496c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004970:	ed97 7b00 	vldr	d7, [r7]
 8004974:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004978:	ed97 7b02 	vldr	d7, [r7, #8]
 800497c:	ed8d 7b00 	vstr	d7, [sp]
 8004980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004984:	493a      	ldr	r1, [pc, #232]	; (8004a70 <TIM6_DAC_IRQHandler+0x1a8>)
 8004986:	483b      	ldr	r0, [pc, #236]	; (8004a74 <TIM6_DAC_IRQHandler+0x1ac>)
 8004988:	f015 fb62 	bl	801a050 <siprintf>
//		sprintf((char*) debug, "PR: %d PC: %d Pitch: %.2f SP: %.2f RP: %.2f\n", pitch_ready, pitch_cali, pitch, pitch_rel, pitch - pitch_rel);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 800498c:	4839      	ldr	r0, [pc, #228]	; (8004a74 <TIM6_DAC_IRQHandler+0x1ac>)
 800498e:	f7fb fc1f 	bl	80001d0 <strlen>
 8004992:	4603      	mov	r3, r0
 8004994:	b29a      	uxth	r2, r3
 8004996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800499a:	4936      	ldr	r1, [pc, #216]	; (8004a74 <TIM6_DAC_IRQHandler+0x1ac>)
 800499c:	4836      	ldr	r0, [pc, #216]	; (8004a78 <TIM6_DAC_IRQHandler+0x1b0>)
 800499e:	f010 fd94 	bl	80154ca <HAL_UART_Transmit>
	}

	fXEncData = (0.05 / 4000.0 * 3.142) * QEIRead(QEI1);
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7fd fa66 	bl	8001e74 <QEIRead>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fdba 	bl	8000524 <__aeabi_i2d>
 80049b0:	a329      	add	r3, pc, #164	; (adr r3, 8004a58 <TIM6_DAC_IRQHandler+0x190>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fe1f 	bl	80005f8 <__aeabi_dmul>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	f7fc f911 	bl	8000be8 <__aeabi_d2f>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <TIM6_DAC_IRQHandler+0x1b4>)
 80049ca:	6013      	str	r3, [r2, #0]
	fYEncData = (0.05 / 4000.0 * 3.142) * -QEIRead(QEI4);
 80049cc:	2004      	movs	r0, #4
 80049ce:	f7fd fa51 	bl	8001e74 <QEIRead>
 80049d2:	4603      	mov	r3, r0
 80049d4:	425b      	negs	r3, r3
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fb fda4 	bl	8000524 <__aeabi_i2d>
 80049dc:	a31e      	add	r3, pc, #120	; (adr r3, 8004a58 <TIM6_DAC_IRQHandler+0x190>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fe09 	bl	80005f8 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f7fc f8fb 	bl	8000be8 <__aeabi_d2f>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <TIM6_DAC_IRQHandler+0x1b8>)
 80049f6:	6013      	str	r3, [r2, #0]

	ABT(&x_data);
 80049f8:	4822      	ldr	r0, [pc, #136]	; (8004a84 <TIM6_DAC_IRQHandler+0x1bc>)
 80049fa:	f7fc fb3d 	bl	8001078 <ABT>
	ABT(&y_data);
 80049fe:	4822      	ldr	r0, [pc, #136]	; (8004a88 <TIM6_DAC_IRQHandler+0x1c0>)
 8004a00:	f7fc fb3a 	bl	8001078 <ABT>

	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <TIM6_DAC_IRQHandler+0x1c4>)
 8004a06:	edd3 7a00 	vldr	s15, [r3]
 8004a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	db02      	blt.n	8004a1a <TIM6_DAC_IRQHandler+0x152>
 8004a14:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <TIM6_DAC_IRQHandler+0x1c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	e010      	b.n	8004a3c <TIM6_DAC_IRQHandler+0x174>
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <TIM6_DAC_IRQHandler+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fb fd92 	bl	8000548 <__aeabi_f2d>
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <TIM6_DAC_IRQHandler+0x1c8>)
 8004a2a:	f7fb fc2f 	bl	800028c <__adddf3>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	f7fc f8d7 	bl	8000be8 <__aeabi_d2f>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <TIM6_DAC_IRQHandler+0x1c4>)
 8004a3e:	6013      	str	r3, [r2, #0]

	PathPlan(&pp);
 8004a40:	4809      	ldr	r0, [pc, #36]	; (8004a68 <TIM6_DAC_IRQHandler+0x1a0>)
 8004a42:	f002 f8c9 	bl	8006bd8 <PathPlan>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 8004a46:	4813      	ldr	r0, [pc, #76]	; (8004a94 <TIM6_DAC_IRQHandler+0x1cc>)
 8004a48:	f00f fe98 	bl	801477c <HAL_TIM_IRQHandler>

}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a56:	bf00      	nop
 8004a58:	b9727cf5 	.word	0xb9727cf5
 8004a5c:	3f049766 	.word	0x3f049766
 8004a60:	20000244 	.word	0x20000244
 8004a64:	40020814 	.word	0x40020814
 8004a68:	20007150 	.word	0x20007150
 8004a6c:	20009438 	.word	0x20009438
 8004a70:	0801ef90 	.word	0x0801ef90
 8004a74:	2000791c 	.word	0x2000791c
 8004a78:	200061e0 	.word	0x200061e0
 8004a7c:	20006db8 	.word	0x20006db8
 8004a80:	2000a618 	.word	0x2000a618
 8004a84:	2000a5f4 	.word	0x2000a5f4
 8004a88:	20007c64 	.word	0x20007c64
 8004a8c:	20009cc4 	.word	0x20009cc4
 8004a90:	40768000 	.word	0x40768000
 8004a94:	200063a8 	.word	0x200063a8

08004a98 <MainTask>:


void MainTask(void *argument) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004aa0:	f006 fffa 	bl	800ba98 <RobotStart>
//	RNSStop(&rns);
	while (1) {
//		enq();
//		Checking();

		switch (mode) {
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <MainTask+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <MainTask+0x1a>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d04b      	beq.n	8004b48 <MainTask+0xb0>
 8004ab0:	e7f8      	b.n	8004aa4 <MainTask+0xc>
		case NORMAL:
//			NormalControl();

			if(ps4.button == CIRCLE)
 8004ab2:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <MainTask+0xc0>)
 8004ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aba:	d109      	bne.n	8004ad0 <MainTask+0x38>
			{
				while(ps4.button == CIRCLE);
 8004abc:	bf00      	nop
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <MainTask+0xc0>)
 8004ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d0fa      	beq.n	8004abe <MainTask+0x26>
				LidarSendIns(NEAR, &lidar);
 8004ac8:	4924      	ldr	r1, [pc, #144]	; (8004b5c <MainTask+0xc4>)
 8004aca:	2001      	movs	r0, #1
 8004acc:	f00a fd6c 	bl	800f5a8 <LidarSendIns>
			}

			if(ps4.button == OPTION)
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <MainTask+0xc0>)
 8004ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d107      	bne.n	8004aea <MainTask+0x52>
			{
				while(ps4.button == OPTION);
 8004ada:	bf00      	nop
 8004adc:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <MainTask+0xc0>)
 8004ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d0fa      	beq.n	8004adc <MainTask+0x44>
				ResetCoordinate();
 8004ae6:	f007 fc51 	bl	800c38c <ResetCoordinate>
			}

			LidarControl(&lidar);
 8004aea:	481c      	ldr	r0, [pc, #112]	; (8004b5c <MainTask+0xc4>)
 8004aec:	f00a fcea 	bl	800f4c4 <LidarControl>

			if(lidar.start == 1)
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <MainTask+0xc4>)
 8004af2:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <MainTask+0x72>
				led7_on;
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <MainTask+0xc8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

			if (HAL_GetTick() - before >= NormalMode) {
 8004b0a:	f00a ffeb 	bl	800fae4 <HAL_GetTick>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <MainTask+0xcc>)
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b1a:	d318      	bcc.n	8004b4e <MainTask+0xb6>
					led9= !led9;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <MainTask+0xd0>)
 8004b1e:	7e1b      	ldrb	r3, [r3, #24]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2d9      	uxtb	r1, r3
 8004b30:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <MainTask+0xd0>)
 8004b32:	7e13      	ldrb	r3, [r2, #24]
 8004b34:	f361 0300 	bfi	r3, r1, #0, #1
 8004b38:	7613      	strb	r3, [r2, #24]
					before = HAL_GetTick();
 8004b3a:	f00a ffd3 	bl	800fae4 <HAL_GetTick>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <MainTask+0xcc>)
 8004b44:	601a      	str	r2, [r3, #0]
			}

			break;
 8004b46:	e002      	b.n	8004b4e <MainTask+0xb6>

		case AUTO:
			Auto();
 8004b48:	f007 f84a 	bl	800bbe0 <Auto>
			break;
 8004b4c:	e000      	b.n	8004b50 <MainTask+0xb8>
			break;
 8004b4e:	bf00      	nop
		switch (mode) {
 8004b50:	e7a8      	b.n	8004aa4 <MainTask+0xc>
 8004b52:	bf00      	nop
 8004b54:	20009684 	.word	0x20009684
 8004b58:	2000a300 	.word	0x2000a300
 8004b5c:	20009438 	.word	0x20009438
 8004b60:	2000615c 	.word	0x2000615c
 8004b64:	20007724 	.word	0x20007724
 8004b68:	20009948 	.word	0x20009948

08004b6c <NaviTask>:
////			set_pitch = 0;
////		}
////	}
//}

void NaviTask(void *argument) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	while (1) {
		if (!fh1.start_pos && !fh_vel)
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <NaviTask+0xf8>)
 8004b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <NaviTask+0x3c>
 8004b84:	4b38      	ldr	r3, [pc, #224]	; (8004c68 <NaviTask+0xfc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <NaviTask+0x3c>
			FH_Vel(&fh1, (int) (ps4.joyR_y * 500));
 8004b8c:	4b37      	ldr	r3, [pc, #220]	; (8004c6c <NaviTask+0x100>)
 8004b8e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004b92:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004c70 <NaviTask+0x104>
 8004b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b9e:	ee17 1a90 	vmov	r1, s15
 8004ba2:	4830      	ldr	r0, [pc, #192]	; (8004c64 <NaviTask+0xf8>)
 8004ba4:	f7ff f9d6 	bl	8003f54 <FH_Vel>

		if(!pp.pp_start)
 8004ba8:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <NaviTask+0x108>)
 8004baa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d13c      	bne.n	8004c32 <NaviTask+0xc6>
		{
			if (ps4.button == L1) {
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <NaviTask+0x100>)
 8004bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d116      	bne.n	8004bf0 <NaviTask+0x84>
				while (ps4.button == L1)
 8004bc2:	bf00      	nop
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <NaviTask+0x100>)
 8004bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d0fa      	beq.n	8004bc4 <NaviTask+0x58>
					;
				moveSpeed++;
 8004bce:	4b2a      	ldr	r3, [pc, #168]	; (8004c78 <NaviTask+0x10c>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bdc:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <NaviTask+0x10c>)
 8004bde:	edc3 7a00 	vstr	s15, [r3]
				setSpeedMODN(moveSpeed);
 8004be2:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <NaviTask+0x10c>)
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bec:	f000 fca0 	bl	8005530 <setSpeedMODN>
			}

			if (ps4.button == R1) {
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <NaviTask+0x100>)
 8004bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf8:	d116      	bne.n	8004c28 <NaviTask+0xbc>
				while (ps4.button == R1)
 8004bfa:	bf00      	nop
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <NaviTask+0x100>)
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d0fa      	beq.n	8004bfc <NaviTask+0x90>
					;
				moveSpeed--;
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <NaviTask+0x10c>)
 8004c08:	edd3 7a00 	vldr	s15, [r3]
 8004c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <NaviTask+0x10c>)
 8004c16:	edc3 7a00 	vstr	s15, [r3]
				setSpeedMODN(moveSpeed);
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <NaviTask+0x10c>)
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	eeb0 0a67 	vmov.f32	s0, s15
 8004c24:	f000 fc84 	bl	8005530 <setSpeedMODN>
			}
			realMODN(&ps4, &rns);
 8004c28:	4914      	ldr	r1, [pc, #80]	; (8004c7c <NaviTask+0x110>)
 8004c2a:	4810      	ldr	r0, [pc, #64]	; (8004c6c <NaviTask+0x100>)
 8004c2c:	f000 f9fc 	bl	8005028 <realMODN>
 8004c30:	e7a0      	b.n	8004b74 <NaviTask+0x8>
		}
		else
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <NaviTask+0x108>)
 8004c34:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <NaviTask+0x108>)
 8004c3a:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <NaviTask+0x108>)
 8004c40:	edd3 6abc 	vldr	s13, [r3, #752]	; 0x2f0
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <NaviTask+0x108>)
 8004c46:	ed93 6abd 	vldr	s12, [r3, #756]	; 0x2f4
 8004c4a:	480c      	ldr	r0, [pc, #48]	; (8004c7c <NaviTask+0x110>)
 8004c4c:	eef0 1a46 	vmov.f32	s3, s12
 8004c50:	eeb0 1a66 	vmov.f32	s2, s13
 8004c54:	eef0 0a47 	vmov.f32	s1, s14
 8004c58:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5c:	f005 fb18 	bl	800a290 <RNSVelocity>
		if (!fh1.start_pos && !fh_vel)
 8004c60:	e788      	b.n	8004b74 <NaviTask+0x8>
 8004c62:	bf00      	nop
 8004c64:	2000a598 	.word	0x2000a598
 8004c68:	20009cec 	.word	0x20009cec
 8004c6c:	2000a300 	.word	0x2000a300
 8004c70:	43fa0000 	.word	0x43fa0000
 8004c74:	20007150 	.word	0x20007150
 8004c78:	20009ce4 	.word	0x20009ce4
 8004c7c:	20009314 	.word	0x20009314

08004c80 <CheckingTask>:
	}
}

void CheckingTask(void *argument) {
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b09e      	sub	sp, #120	; 0x78
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (ps4.button == SELECT)
 8004c88:	4b71      	ldr	r3, [pc, #452]	; (8004e50 <CheckingTask+0x1d0>)
 8004c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d110      	bne.n	8004cb2 <CheckingTask+0x32>
		{
			while (ps4.button == SELECT);
 8004c90:	bf00      	nop
 8004c92:	4b6f      	ldr	r3, [pc, #444]	; (8004e50 <CheckingTask+0x1d0>)
 8004c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d0fb      	beq.n	8004c92 <CheckingTask+0x12>
			mode++;
 8004c9a:	4b6e      	ldr	r3, [pc, #440]	; (8004e54 <CheckingTask+0x1d4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	4a6c      	ldr	r2, [pc, #432]	; (8004e54 <CheckingTask+0x1d4>)
 8004ca2:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 8004ca4:	4b6b      	ldr	r3, [pc, #428]	; (8004e54 <CheckingTask+0x1d4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	dd02      	ble.n	8004cb2 <CheckingTask+0x32>
				mode = 0;
 8004cac:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <CheckingTask+0x1d4>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
		}

		if(pp_from_right)
 8004cb2:	4b69      	ldr	r3, [pc, #420]	; (8004e58 <CheckingTask+0x1d8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d032      	beq.n	8004d20 <CheckingTask+0xa0>
		{
			pp_from_right = 0;
 8004cba:	4b67      	ldr	r3, [pc, #412]	; (8004e58 <CheckingTask+0x1d8>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
			ResetCoordinate();
 8004cc0:	f007 fb64 	bl	800c38c <ResetCoordinate>
			float shoot_point_right[1][7] = { { 1.0, 0.44, 3.0, 0.0, 0, 1, 0 } };
 8004cc4:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <CheckingTask+0x1dc>)
 8004cc6:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8004cca:	461d      	mov	r5, r3
 8004ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(shoot_point_right, 1, &pp);
 8004cd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cdc:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <CheckingTask+0x1e0>)
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 fcac 	bl	800663e <PP_start>
			while(pp.pp_start == 1)
 8004ce6:	e00d      	b.n	8004d04 <CheckingTask+0x84>
			{
				if(ps4.button == SQUARE)
 8004ce8:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <CheckingTask+0x1d0>)
 8004cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d108      	bne.n	8004d04 <CheckingTask+0x84>
				{
					while(ps4.button == SQUARE);
 8004cf2:	bf00      	nop
 8004cf4:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <CheckingTask+0x1d0>)
 8004cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d0fa      	beq.n	8004cf4 <CheckingTask+0x74>
					StopAutoPP();
 8004cfe:	f007 fb07 	bl	800c310 <StopAutoPP>
					break;
 8004d02:	e007      	b.n	8004d14 <CheckingTask+0x94>
			while(pp.pp_start == 1)
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <CheckingTask+0x1e0>)
 8004d06:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e9      	bne.n	8004ce8 <CheckingTask+0x68>
				}
			}
			PP_SetZ(-90, &pp);
 8004d14:	4852      	ldr	r0, [pc, #328]	; (8004e60 <CheckingTask+0x1e0>)
 8004d16:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8004e64 <CheckingTask+0x1e4>
 8004d1a:	f001 ff34 	bl	8006b86 <PP_SetZ>
 8004d1e:	e7b3      	b.n	8004c88 <CheckingTask+0x8>
		}
		else if(pp_from_left)
 8004d20:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <CheckingTask+0x1e8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0af      	beq.n	8004c88 <CheckingTask+0x8>
		{
			pp_from_left = 0;
 8004d28:	4b4f      	ldr	r3, [pc, #316]	; (8004e68 <CheckingTask+0x1e8>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
			ResetCoordinate();
 8004d2e:	f007 fb2d 	bl	800c38c <ResetCoordinate>
			float shoot_point_left[1][7] = { { 1.0, 0.65, 0.25, 0.0, 0, 1, 0 } };
 8004d32:	4b4e      	ldr	r3, [pc, #312]	; (8004e6c <CheckingTask+0x1ec>)
 8004d34:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004d38:	461d      	mov	r5, r3
 8004d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(shoot_point_left, 1, &pp);
 8004d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d4a:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <CheckingTask+0x1e0>)
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fc75 	bl	800663e <PP_start>
			while(pp.pp_start == 1)
 8004d54:	e00d      	b.n	8004d72 <CheckingTask+0xf2>
			{
				if(ps4.button == SQUARE)
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <CheckingTask+0x1d0>)
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5e:	d108      	bne.n	8004d72 <CheckingTask+0xf2>
				{
					while(ps4.button == SQUARE);
 8004d60:	bf00      	nop
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <CheckingTask+0x1d0>)
 8004d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6a:	d0fa      	beq.n	8004d62 <CheckingTask+0xe2>
					StopAutoPP();
 8004d6c:	f007 fad0 	bl	800c310 <StopAutoPP>
					break;
 8004d70:	e007      	b.n	8004d82 <CheckingTask+0x102>
			while(pp.pp_start == 1)
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <CheckingTask+0x1e0>)
 8004d74:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e9      	bne.n	8004d56 <CheckingTask+0xd6>
				}
			}

			PP_PIDZSet(0.5, 0.05, 0.2, 1.5, &pp);
 8004d82:	4837      	ldr	r0, [pc, #220]	; (8004e60 <CheckingTask+0x1e0>)
 8004d84:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 8004d88:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8004e70 <CheckingTask+0x1f0>
 8004d8c:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004e74 <CheckingTask+0x1f4>
 8004d90:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004d94:	f001 fbfe 	bl	8006594 <PP_PIDZSet>
			float shoot_point_1_turn[1][7] = {{1.0, 0, 0, -90, 0, 0, 0}};
 8004d98:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <CheckingTask+0x1f8>)
 8004d9a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004d9e:	461d      	mov	r5, r3
 8004da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(shoot_point_1_turn, 1, &pp);
 8004dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db0:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <CheckingTask+0x1e0>)
 8004db2:	2101      	movs	r1, #1
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fc42 	bl	800663e <PP_start>
			while(pp.pp_start == 1)
 8004dba:	e00d      	b.n	8004dd8 <CheckingTask+0x158>
			{
				if(ps4.button == SQUARE)
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <CheckingTask+0x1d0>)
 8004dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d108      	bne.n	8004dd8 <CheckingTask+0x158>
				{
					while(ps4.button == SQUARE);
 8004dc6:	bf00      	nop
 8004dc8:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <CheckingTask+0x1d0>)
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd0:	d0fa      	beq.n	8004dc8 <CheckingTask+0x148>
					StopAutoPP();
 8004dd2:	f007 fa9d 	bl	800c310 <StopAutoPP>
					break;
 8004dd6:	e007      	b.n	8004de8 <CheckingTask+0x168>
			while(pp.pp_start == 1)
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <CheckingTask+0x1e0>)
 8004dda:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e9      	bne.n	8004dbc <CheckingTask+0x13c>
				}
			}
			PP_PIDZSet(0.5, 0.05, 0.2, 5.5, &pp);
 8004de8:	481d      	ldr	r0, [pc, #116]	; (8004e60 <CheckingTask+0x1e0>)
 8004dea:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8004dee:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8004e70 <CheckingTask+0x1f0>
 8004df2:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004e74 <CheckingTask+0x1f4>
 8004df6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004dfa:	f001 fbcb 	bl	8006594 <PP_PIDZSet>

			float shoot_point_left_2[1][7] = {{1.0, 0.66, 0.28, 0, 0, 1, 0}};
 8004dfe:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <CheckingTask+0x1fc>)
 8004e00:	f107 0408 	add.w	r4, r7, #8
 8004e04:	461d      	mov	r5, r3
 8004e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(shoot_point_left_2, 1, &pp);
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <CheckingTask+0x1e0>)
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fc0f 	bl	800663e <PP_start>
			while(pp.pp_start == 1)
 8004e20:	e00d      	b.n	8004e3e <CheckingTask+0x1be>
			{
				if(ps4.button == SQUARE)
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <CheckingTask+0x1d0>)
 8004e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d108      	bne.n	8004e3e <CheckingTask+0x1be>
				{
					while(ps4.button == SQUARE);
 8004e2c:	bf00      	nop
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <CheckingTask+0x1d0>)
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e36:	d0fa      	beq.n	8004e2e <CheckingTask+0x1ae>
					StopAutoPP();
 8004e38:	f007 fa6a 	bl	800c310 <StopAutoPP>
					break;
 8004e3c:	e007      	b.n	8004e4e <CheckingTask+0x1ce>
			while(pp.pp_start == 1)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <CheckingTask+0x1e0>)
 8004e40:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e9      	bne.n	8004e22 <CheckingTask+0x1a2>
		if (ps4.button == SELECT)
 8004e4e:	e71b      	b.n	8004c88 <CheckingTask+0x8>
 8004e50:	2000a300 	.word	0x2000a300
 8004e54:	20009684 	.word	0x20009684
 8004e58:	2000a904 	.word	0x2000a904
 8004e5c:	0801efd4 	.word	0x0801efd4
 8004e60:	20007150 	.word	0x20007150
 8004e64:	c2b40000 	.word	0xc2b40000
 8004e68:	20009bbc 	.word	0x20009bbc
 8004e6c:	0801eff0 	.word	0x0801eff0
 8004e70:	3e4ccccd 	.word	0x3e4ccccd
 8004e74:	3d4ccccd 	.word	0x3d4ccccd
 8004e78:	0801f00c 	.word	0x0801f00c
 8004e7c:	0801f028 	.word	0x0801f028

08004e80 <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	while (1) {

		if (ps4.button == TOUCH) {
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <EmergencyTask+0x68>)
 8004e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e90:	d1fa      	bne.n	8004e88 <EmergencyTask+0x8>
//			led3 = 1;
			RNSStop(&rns);
 8004e92:	4816      	ldr	r0, [pc, #88]	; (8004eec <EmergencyTask+0x6c>)
 8004e94:	f005 f978 	bl	800a188 <RNSStop>
			PP_stop(&pp);
 8004e98:	4815      	ldr	r0, [pc, #84]	; (8004ef0 <EmergencyTask+0x70>)
 8004e9a:	f001 fe11 	bl	8006ac0 <PP_stop>
			pitch_stop;
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4814      	ldr	r0, [pc, #80]	; (8004ef4 <EmergencyTask+0x74>)
 8004ea2:	f7fc fa46 	bl	8001332 <WriteBDC>
			osThreadTerminate(MainTaskHandle);
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <EmergencyTask+0x78>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f011 fb38 	bl	8016520 <osThreadTerminate>
			osDelay(5);
 8004eb0:	2005      	movs	r0, #5
 8004eb2:	f011 fb62 	bl	801657a <osDelay>

			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	2224      	movs	r2, #36	; 0x24
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f014 f8e4 	bl	801908c <memset>
 8004ec4:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <EmergencyTask+0x7c>)
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	2318      	movs	r3, #24
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
					.stack_size = 256 * 4, .priority =
							(osPriority_t) osPriorityNormal, };

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004ed2:	f107 030c 	add.w	r3, r7, #12
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4809      	ldr	r0, [pc, #36]	; (8004f00 <EmergencyTask+0x80>)
 8004edc:	f011 fa8e 	bl	80163fc <osThreadNew>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <EmergencyTask+0x78>)
 8004ee4:	6013      	str	r3, [r2, #0]
		if (ps4.button == TOUCH) {
 8004ee6:	e7cf      	b.n	8004e88 <EmergencyTask+0x8>
 8004ee8:	2000a300 	.word	0x2000a300
 8004eec:	20009314 	.word	0x20009314
 8004ef0:	20007150 	.word	0x20007150
 8004ef4:	20009aa8 	.word	0x20009aa8
 8004ef8:	20007cf0 	.word	0x20007cf0
 8004efc:	0801ef58 	.word	0x0801ef58
 8004f00:	08004a99 	.word	0x08004a99

08004f04 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_UART_RxCpltCallback+0x50>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d111      	bne.n	8004f3a <HAL_UART_RxCpltCallback+0x36>
		R6091U_Handler(&IMU);
 8004f16:	480f      	ldr	r0, [pc, #60]	; (8004f54 <HAL_UART_RxCpltCallback+0x50>)
 8004f18:	f005 f80c 	bl	8009f34 <R6091U_Handler>
		led2 = !led2;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <HAL_UART_RxCpltCallback+0x54>)
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <HAL_UART_RxCpltCallback+0x54>)
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2d9      	uxtb	r1, r3
 8004f32:	7853      	ldrb	r3, [r2, #1]
 8004f34:	f361 1386 	bfi	r3, r1, #6, #1
 8004f38:	7053      	strb	r3, [r2, #1]
	}

	if(huart == lidar.lidar_UART)
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_UART_RxCpltCallback+0x58>)
 8004f3c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d102      	bne.n	8004f4c <HAL_UART_RxCpltCallback+0x48>
	{
		ObstacleHandler(&lidar);
 8004f46:	4805      	ldr	r0, [pc, #20]	; (8004f5c <HAL_UART_RxCpltCallback+0x58>)
 8004f48:	f00a fb64 	bl	800f614 <ObstacleHandler>
	}
//	if (huart == PITCH_IMU.huartx) {
//			R6091U_Handler(&PITCH_IMU);
//			led2 = !led2;
//	}
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200070ec 	.word	0x200070ec
 8004f58:	40020814 	.word	0x40020814
 8004f5c:	20009438 	.word	0x20009438

08004f60 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0

}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	ed87 0a04 	vstr	s0, [r7, #16]
 8004f7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004f80:	ed87 1a02 	vstr	s2, [r7, #8]
 8004f84:	edc7 1a01 	vstr	s3, [r7, #4]
 8004f88:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004f8a:	4a23      	ldr	r2, [pc, #140]	; (8005018 <MODNInit+0xa8>)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 8004f92:	4a21      	ldr	r2, [pc, #132]	; (8005018 <MODNInit+0xa8>)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <MODNInit+0xa8>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f7fb fad2 	bl	8000548 <__aeabi_f2d>
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <MODNInit+0xac>)
 8004faa:	f7fb fc4f 	bl	800084c <__aeabi_ddiv>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	a316      	add	r3, pc, #88	; (adr r3, 8005010 <MODNInit+0xa0>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fb1c 	bl	80005f8 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f7fb fe0e 	bl	8000be8 <__aeabi_d2f>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <MODNInit+0xa8>)
 8004fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004fd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fda:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004fde:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <MODNInit+0xa8>)
 8004fe0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <MODNInit+0xa8>)
 8004fea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <MODNInit+0xa8>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <MODNInit+0xa8>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <MODNInit+0xa8>)
 8004ffe:	4a06      	ldr	r2, [pc, #24]	; (8005018 <MODNInit+0xa8>)
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <MODNInit+0xa8>)
 8005004:	4a06      	ldr	r2, [pc, #24]	; (8005020 <MODNInit+0xb0>)
 8005006:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005008:	bf00      	nop
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	54442eea 	.word	0x54442eea
 8005014:	400921fb 	.word	0x400921fb
 8005018:	20006f0c 	.word	0x20006f0c
 800501c:	40668000 	.word	0x40668000
 8005020:	20006f10 	.word	0x20006f10
 8005024:	00000000 	.word	0x00000000

08005028 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	ed2d 8b02 	vpush	{d8}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800503c:	eeb1 7a67 	vneg.f32	s14, s15
 8005040:	4bc5      	ldr	r3, [pc, #788]	; (8005358 <realMODN+0x330>)
 8005042:	edd3 7a07 	vldr	s15, [r3, #28]
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	4bc3      	ldr	r3, [pc, #780]	; (8005358 <realMODN+0x330>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005056:	4bc0      	ldr	r3, [pc, #768]	; (8005358 <realMODN+0x330>)
 8005058:	edd3 7a07 	vldr	s15, [r3, #28]
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	4bbd      	ldr	r3, [pc, #756]	; (8005358 <realMODN+0x330>)
 8005062:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005076:	4bb8      	ldr	r3, [pc, #736]	; (8005358 <realMODN+0x330>)
 8005078:	edd3 7a07 	vldr	s15, [r3, #28]
 800507c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005080:	4bb5      	ldr	r3, [pc, #724]	; (8005358 <realMODN+0x330>)
 8005082:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8005086:	4bb4      	ldr	r3, [pc, #720]	; (8005358 <realMODN+0x330>)
 8005088:	edd3 7a00 	vldr	s15, [r3]
 800508c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005094:	d119      	bne.n	80050ca <realMODN+0xa2>
 8005096:	4bb0      	ldr	r3, [pc, #704]	; (8005358 <realMODN+0x330>)
 8005098:	edd3 7a01 	vldr	s15, [r3, #4]
 800509c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	d111      	bne.n	80050ca <realMODN+0xa2>
 80050a6:	4bac      	ldr	r3, [pc, #688]	; (8005358 <realMODN+0x330>)
 80050a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80050ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b4:	d109      	bne.n	80050ca <realMODN+0xa2>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f000 8225 	beq.w	800550c <realMODN+0x4e4>
			RNSStop(rns);
 80050c2:	6838      	ldr	r0, [r7, #0]
 80050c4:	f005 f860 	bl	800a188 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80050c8:	e220      	b.n	800550c <realMODN+0x4e4>
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 80050ca:	4ba4      	ldr	r3, [pc, #656]	; (800535c <realMODN+0x334>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 80050d0:	4ba1      	ldr	r3, [pc, #644]	; (8005358 <realMODN+0x330>)
 80050d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8142 	bne.w	8005360 <realMODN+0x338>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 80050dc:	4b9e      	ldr	r3, [pc, #632]	; (8005358 <realMODN+0x330>)
 80050de:	ed93 8a00 	vldr	s16, [r3]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7fb fa30 	bl	8000548 <__aeabi_f2d>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	a196      	add	r1, pc, #600	; (adr r1, 8005348 <realMODN+0x320>)
 80050ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f2:	f7fb f8c9 	bl	8000288 <__aeabi_dsub>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7fb fd73 	bl	8000be8 <__aeabi_d2f>
 8005102:	4603      	mov	r3, r0
 8005104:	ee00 3a10 	vmov	s0, r3
 8005108:	f018 fd66 	bl	801dbd8 <cosf>
 800510c:	eef0 7a40 	vmov.f32	s15, s0
 8005110:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005114:	4b90      	ldr	r3, [pc, #576]	; (8005358 <realMODN+0x330>)
 8005116:	edd3 8a01 	vldr	s17, [r3, #4]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7fb fa14 	bl	8000548 <__aeabi_f2d>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	a188      	add	r1, pc, #544	; (adr r1, 8005348 <realMODN+0x320>)
 8005126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800512a:	f7fb f8ad 	bl	8000288 <__aeabi_dsub>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	f7fb fd57 	bl	8000be8 <__aeabi_d2f>
 800513a:	4603      	mov	r3, r0
 800513c:	ee00 3a10 	vmov	s0, r3
 8005140:	f018 fd92 	bl	801dc68 <sinf>
 8005144:	eef0 7a40 	vmov.f32	s15, s0
 8005148:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800514c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005150:	4b81      	ldr	r3, [pc, #516]	; (8005358 <realMODN+0x330>)
 8005152:	edd3 6a02 	vldr	s13, [r3, #8]
 8005156:	4b80      	ldr	r3, [pc, #512]	; (8005358 <realMODN+0x330>)
 8005158:	edd3 7a08 	vldr	s15, [r3, #32]
 800515c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005164:	4b7c      	ldr	r3, [pc, #496]	; (8005358 <realMODN+0x330>)
 8005166:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800516a:	4b7b      	ldr	r3, [pc, #492]	; (8005358 <realMODN+0x330>)
 800516c:	ed93 8a00 	vldr	s16, [r3]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7fb f9e9 	bl	8000548 <__aeabi_f2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	a175      	add	r1, pc, #468	; (adr r1, 8005350 <realMODN+0x328>)
 800517c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005180:	f7fb f882 	bl	8000288 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4610      	mov	r0, r2
 800518a:	4619      	mov	r1, r3
 800518c:	f7fb fd2c 	bl	8000be8 <__aeabi_d2f>
 8005190:	4603      	mov	r3, r0
 8005192:	ee00 3a10 	vmov	s0, r3
 8005196:	f018 fd1f 	bl	801dbd8 <cosf>
 800519a:	eef0 7a40 	vmov.f32	s15, s0
 800519e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80051a2:	4b6d      	ldr	r3, [pc, #436]	; (8005358 <realMODN+0x330>)
 80051a4:	edd3 8a01 	vldr	s17, [r3, #4]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7fb f9cd 	bl	8000548 <__aeabi_f2d>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	a167      	add	r1, pc, #412	; (adr r1, 8005350 <realMODN+0x328>)
 80051b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051b8:	f7fb f866 	bl	8000288 <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fb fd10 	bl	8000be8 <__aeabi_d2f>
 80051c8:	4603      	mov	r3, r0
 80051ca:	ee00 3a10 	vmov	s0, r3
 80051ce:	f018 fd4b 	bl	801dc68 <sinf>
 80051d2:	eef0 7a40 	vmov.f32	s15, s0
 80051d6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80051da:	ee38 7a27 	vadd.f32	s14, s16, s15
 80051de:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <realMODN+0x330>)
 80051e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80051e4:	4b5c      	ldr	r3, [pc, #368]	; (8005358 <realMODN+0x330>)
 80051e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80051ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f2:	4b59      	ldr	r3, [pc, #356]	; (8005358 <realMODN+0x330>)
 80051f4:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 80051f8:	4b57      	ldr	r3, [pc, #348]	; (8005358 <realMODN+0x330>)
 80051fa:	ed93 8a00 	vldr	s16, [r3]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7fb f9a2 	bl	8000548 <__aeabi_f2d>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	a151      	add	r1, pc, #324	; (adr r1, 8005350 <realMODN+0x328>)
 800520a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520e:	f7fb f83b 	bl	8000288 <__aeabi_dsub>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	f7fb fce5 	bl	8000be8 <__aeabi_d2f>
 800521e:	4603      	mov	r3, r0
 8005220:	ee00 3a10 	vmov	s0, r3
 8005224:	f018 fcd8 	bl	801dbd8 <cosf>
 8005228:	eef0 7a40 	vmov.f32	s15, s0
 800522c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <realMODN+0x330>)
 8005232:	edd3 8a01 	vldr	s17, [r3, #4]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7fb f986 	bl	8000548 <__aeabi_f2d>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	a143      	add	r1, pc, #268	; (adr r1, 8005350 <realMODN+0x328>)
 8005242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005246:	f7fb f81f 	bl	8000288 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	f7fb fcc9 	bl	8000be8 <__aeabi_d2f>
 8005256:	4603      	mov	r3, r0
 8005258:	ee00 3a10 	vmov	s0, r3
 800525c:	f018 fd04 	bl	801dc68 <sinf>
 8005260:	eef0 7a40 	vmov.f32	s15, s0
 8005264:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005268:	ee38 7a27 	vadd.f32	s14, s16, s15
 800526c:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <realMODN+0x330>)
 800526e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005272:	4b39      	ldr	r3, [pc, #228]	; (8005358 <realMODN+0x330>)
 8005274:	edd3 7a08 	vldr	s15, [r3, #32]
 8005278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800527c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <realMODN+0x330>)
 8005282:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <realMODN+0x330>)
 8005288:	ed93 8a00 	vldr	s16, [r3]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7fb f95b 	bl	8000548 <__aeabi_f2d>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	a12c      	add	r1, pc, #176	; (adr r1, 8005348 <realMODN+0x320>)
 8005298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800529c:	f7fa fff4 	bl	8000288 <__aeabi_dsub>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7fb fc9e 	bl	8000be8 <__aeabi_d2f>
 80052ac:	4603      	mov	r3, r0
 80052ae:	ee00 3a10 	vmov	s0, r3
 80052b2:	f018 fc91 	bl	801dbd8 <cosf>
 80052b6:	eef0 7a40 	vmov.f32	s15, s0
 80052ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <realMODN+0x330>)
 80052c0:	edd3 8a01 	vldr	s17, [r3, #4]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7fb f93f 	bl	8000548 <__aeabi_f2d>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	a11e      	add	r1, pc, #120	; (adr r1, 8005348 <realMODN+0x320>)
 80052d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d4:	f7fa ffd8 	bl	8000288 <__aeabi_dsub>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fb fc82 	bl	8000be8 <__aeabi_d2f>
 80052e4:	4603      	mov	r3, r0
 80052e6:	ee00 3a10 	vmov	s0, r3
 80052ea:	f018 fcbd 	bl	801dc68 <sinf>
 80052ee:	eef0 7a40 	vmov.f32	s15, s0
 80052f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80052f6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80052fa:	4b17      	ldr	r3, [pc, #92]	; (8005358 <realMODN+0x330>)
 80052fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <realMODN+0x330>)
 8005302:	edd3 7a08 	vldr	s15, [r3, #32]
 8005306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800530a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <realMODN+0x330>)
 8005310:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8005314:	4b10      	ldr	r3, [pc, #64]	; (8005358 <realMODN+0x330>)
 8005316:	edd3 7a03 	vldr	s15, [r3, #12]
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <realMODN+0x330>)
 800531c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <realMODN+0x330>)
 8005322:	edd3 6a05 	vldr	s13, [r3, #20]
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <realMODN+0x330>)
 8005328:	ed93 6a06 	vldr	s12, [r3, #24]
 800532c:	6838      	ldr	r0, [r7, #0]
 800532e:	eef0 1a46 	vmov.f32	s3, s12
 8005332:	eeb0 1a66 	vmov.f32	s2, s13
 8005336:	eef0 0a47 	vmov.f32	s1, s14
 800533a:	eeb0 0a67 	vmov.f32	s0, s15
 800533e:	f004 ffa7 	bl	800a290 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8005342:	e0e3      	b.n	800550c <realMODN+0x4e4>
 8005344:	f3af 8000 	nop.w
 8005348:	2e48e8a7 	.word	0x2e48e8a7
 800534c:	3fe921ff 	.word	0x3fe921ff
 8005350:	62b6ae7d 	.word	0x62b6ae7d
 8005354:	4002d97f 	.word	0x4002d97f
 8005358:	20006f0c 	.word	0x20006f0c
 800535c:	20007150 	.word	0x20007150
		else if (MODN.base == MODN_TRI_OMNI){
 8005360:	4b71      	ldr	r3, [pc, #452]	; (8005528 <realMODN+0x500>)
 8005362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	f040 80d0 	bne.w	800550c <realMODN+0x4e4>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 800536c:	4b6e      	ldr	r3, [pc, #440]	; (8005528 <realMODN+0x500>)
 800536e:	ed93 8a01 	vldr	s16, [r3, #4]
 8005372:	edd7 7a03 	vldr	s15, [r7, #12]
 8005376:	eef1 7a67 	vneg.f32	s15, s15
 800537a:	eeb0 0a67 	vmov.f32	s0, s15
 800537e:	f018 fc73 	bl	801dc68 <sinf>
 8005382:	eef0 7a40 	vmov.f32	s15, s0
 8005386:	ee28 8a27 	vmul.f32	s16, s16, s15
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <realMODN+0x500>)
 800538c:	edd3 8a00 	vldr	s17, [r3]
 8005390:	edd7 7a03 	vldr	s15, [r7, #12]
 8005394:	eef1 7a67 	vneg.f32	s15, s15
 8005398:	eeb0 0a67 	vmov.f32	s0, s15
 800539c:	f018 fc1c 	bl	801dbd8 <cosf>
 80053a0:	eef0 7a40 	vmov.f32	s15, s0
 80053a4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80053a8:	ee38 7a27 	vadd.f32	s14, s16, s15
 80053ac:	4b5e      	ldr	r3, [pc, #376]	; (8005528 <realMODN+0x500>)
 80053ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80053b2:	4b5d      	ldr	r3, [pc, #372]	; (8005528 <realMODN+0x500>)
 80053b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80053b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c0:	4b59      	ldr	r3, [pc, #356]	; (8005528 <realMODN+0x500>)
 80053c2:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80053c6:	4b58      	ldr	r3, [pc, #352]	; (8005528 <realMODN+0x500>)
 80053c8:	ed93 8a01 	vldr	s16, [r3, #4]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7fb f8bb 	bl	8000548 <__aeabi_f2d>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	a150      	add	r1, pc, #320	; (adr r1, 8005518 <realMODN+0x4f0>)
 80053d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053dc:	f7fa ff54 	bl	8000288 <__aeabi_dsub>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f7fb fbfe 	bl	8000be8 <__aeabi_d2f>
 80053ec:	4603      	mov	r3, r0
 80053ee:	ee00 3a10 	vmov	s0, r3
 80053f2:	f018 fc39 	bl	801dc68 <sinf>
 80053f6:	eef0 7a40 	vmov.f32	s15, s0
 80053fa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80053fe:	4b4a      	ldr	r3, [pc, #296]	; (8005528 <realMODN+0x500>)
 8005400:	edd3 8a00 	vldr	s17, [r3]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7fb f89f 	bl	8000548 <__aeabi_f2d>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	a142      	add	r1, pc, #264	; (adr r1, 8005518 <realMODN+0x4f0>)
 8005410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005414:	f7fa ff38 	bl	8000288 <__aeabi_dsub>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	f7fb fbe2 	bl	8000be8 <__aeabi_d2f>
 8005424:	4603      	mov	r3, r0
 8005426:	ee00 3a10 	vmov	s0, r3
 800542a:	f018 fbd5 	bl	801dbd8 <cosf>
 800542e:	eef0 7a40 	vmov.f32	s15, s0
 8005432:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005436:	ee38 7a27 	vadd.f32	s14, s16, s15
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <realMODN+0x500>)
 800543c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <realMODN+0x500>)
 8005442:	edd3 7a08 	vldr	s15, [r3, #32]
 8005446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <realMODN+0x500>)
 8005450:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8005454:	4b34      	ldr	r3, [pc, #208]	; (8005528 <realMODN+0x500>)
 8005456:	ed93 8a01 	vldr	s16, [r3, #4]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7fb f874 	bl	8000548 <__aeabi_f2d>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	a12e      	add	r1, pc, #184	; (adr r1, 8005520 <realMODN+0x4f8>)
 8005466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546a:	f7fa ff0d 	bl	8000288 <__aeabi_dsub>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	f7fb fbb7 	bl	8000be8 <__aeabi_d2f>
 800547a:	4603      	mov	r3, r0
 800547c:	ee00 3a10 	vmov	s0, r3
 8005480:	f018 fbf2 	bl	801dc68 <sinf>
 8005484:	eef0 7a40 	vmov.f32	s15, s0
 8005488:	ee28 8a27 	vmul.f32	s16, s16, s15
 800548c:	4b26      	ldr	r3, [pc, #152]	; (8005528 <realMODN+0x500>)
 800548e:	edd3 8a00 	vldr	s17, [r3]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7fb f858 	bl	8000548 <__aeabi_f2d>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	a120      	add	r1, pc, #128	; (adr r1, 8005520 <realMODN+0x4f8>)
 800549e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a2:	f7fa fef1 	bl	8000288 <__aeabi_dsub>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fb fb9b 	bl	8000be8 <__aeabi_d2f>
 80054b2:	4603      	mov	r3, r0
 80054b4:	ee00 3a10 	vmov	s0, r3
 80054b8:	f018 fb8e 	bl	801dbd8 <cosf>
 80054bc:	eef0 7a40 	vmov.f32	s15, s0
 80054c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80054c4:	ee38 7a27 	vadd.f32	s14, s16, s15
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <realMODN+0x500>)
 80054ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <realMODN+0x500>)
 80054d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80054d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <realMODN+0x500>)
 80054de:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <realMODN+0x500>)
 80054e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <realMODN+0x500>)
 80054ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <realMODN+0x500>)
 80054f0:	edd3 6a05 	vldr	s13, [r3, #20]
 80054f4:	6838      	ldr	r0, [r7, #0]
 80054f6:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800552c <realMODN+0x504>
 80054fa:	eeb0 1a66 	vmov.f32	s2, s13
 80054fe:	eef0 0a47 	vmov.f32	s1, s14
 8005502:	eeb0 0a67 	vmov.f32	s0, s15
 8005506:	f004 fec3 	bl	800a290 <RNSVelocity>
}
 800550a:	e7ff      	b.n	800550c <realMODN+0x4e4>
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	ecbd 8b02 	vpop	{d8}
 8005516:	bd80      	pop	{r7, pc}
 8005518:	c985f06f 	.word	0xc985f06f
 800551c:	4000c154 	.word	0x4000c154
 8005520:	c985f06f 	.word	0xc985f06f
 8005524:	3ff0c154 	.word	0x3ff0c154
 8005528:	20006f0c 	.word	0x20006f0c
 800552c:	00000000 	.word	0x00000000

08005530 <setSpeedMODN>:
void setOrientationMODN(OrientationMODN_t orientation)
{
	MODN.orientation = orientation;
}

void setSpeedMODN(float speed){
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 800553a:	4a0c      	ldr	r2, [pc, #48]	; (800556c <setSpeedMODN+0x3c>)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <setSpeedMODN+0x3c>)
 8005542:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005546:	edd7 7a01 	vldr	s15, [r7, #4]
 800554a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <setSpeedMODN+0x3c>)
 8005550:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <setSpeedMODN+0x3c>)
 800555a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20006f0c 	.word	0x20006f0c

08005570 <OdriveInit>:
 * 						  axis_id, can id, restricted to 6 bits,max 0x3F
 * Function Return		: None
 * Function Example		: 	OdriveInit(&Odrv1,&hcan1,ODRIVE1,15.0,10.0,0.0,VEL_RAMP,VELOCITY_CONTROL);
 */
void OdriveInit(Odrv_t* odrive, CAN_HandleTypeDef* hcanx, Odrive_Type type, uint16_t axis_id,ControlMode control_mode,InputMode input_mode)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4611      	mov	r1, r2
 800557c:	461a      	mov	r2, r3
 800557e:	460b      	mov	r3, r1
 8005580:	71fb      	strb	r3, [r7, #7]
 8005582:	4613      	mov	r3, r2
 8005584:	80bb      	strh	r3, [r7, #4]

	if(number_of_odrive==0)
 8005586:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <OdriveInit+0xc8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10e      	bne.n	80055ac <OdriveInit+0x3c>
	{
		Odrv_ID = (uint8_t*)malloc(sizeof(uint8_t));
 800558e:	2001      	movs	r0, #1
 8005590:	f013 fd66 	bl	8019060 <malloc>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <OdriveInit+0xcc>)
 800559a:	601a      	str	r2, [r3, #0]
		P_to_Odrive =  (Odrv_t **)malloc(sizeof(Odrv_t*));
 800559c:	2004      	movs	r0, #4
 800559e:	f013 fd5f 	bl	8019060 <malloc>
 80055a2:	4603      	mov	r3, r0
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <OdriveInit+0xd0>)
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e018      	b.n	80055de <OdriveInit+0x6e>
	}

	else
	{
		Odrv_ID = realloc(Odrv_ID,(number_of_odrive+1)*sizeof(uint8_t));
 80055ac:	4b23      	ldr	r3, [pc, #140]	; (800563c <OdriveInit+0xcc>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b21      	ldr	r3, [pc, #132]	; (8005638 <OdriveInit+0xc8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f014 fc93 	bl	8019ee4 <realloc>
 80055be:	4603      	mov	r3, r0
 80055c0:	4a1e      	ldr	r2, [pc, #120]	; (800563c <OdriveInit+0xcc>)
 80055c2:	6013      	str	r3, [r2, #0]
		P_to_Odrive = realloc(P_to_Odrive,(number_of_odrive+1) * sizeof(Odrv_t*));
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <OdriveInit+0xd0>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <OdriveInit+0xc8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f014 fc86 	bl	8019ee4 <realloc>
 80055d8:	4603      	mov	r3, r0
 80055da:	4a19      	ldr	r2, [pc, #100]	; (8005640 <OdriveInit+0xd0>)
 80055dc:	6013      	str	r3, [r2, #0]
	}

	Odrv_ID[number_of_odrive] = axis_id;
 80055de:	4b17      	ldr	r3, [pc, #92]	; (800563c <OdriveInit+0xcc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <OdriveInit+0xc8>)
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	88ba      	ldrh	r2, [r7, #4]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

	P_to_Odrive[number_of_odrive] = odrive;
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <OdriveInit+0xd0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <OdriveInit+0xc8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]

	odrive->Instance = axis_id;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88ba      	ldrh	r2, [r7, #4]
 8005602:	831a      	strh	r2, [r3, #24]

	odrive->hcanx=hcanx;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	601a      	str	r2, [r3, #0]

	odrive->type=type;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	OdriveSetControlInputMode(odrive,control_mode,input_mode);
 8005612:	7f3a      	ldrb	r2, [r7, #28]
 8005614:	7e3b      	ldrb	r3, [r7, #24]
 8005616:	4619      	mov	r1, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f813 	bl	8005644 <OdriveSetControlInputMode>

	odrive->stop=true;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	759a      	strb	r2, [r3, #22]


	number_of_odrive++;
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <OdriveInit+0xc8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a03      	ldr	r2, [pc, #12]	; (8005638 <OdriveInit+0xc8>)
 800562c:	6013      	str	r3, [r2, #0]


}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000248 	.word	0x20000248
 800563c:	20007a54 	.word	0x20007a54
 8005640:	2000a8fc 	.word	0x2000a8fc

08005644 <OdriveSetControlInputMode>:
 * Function Return		: None
 * Function Example		:	OdriveSetControlInputMode(&odrive,VELOCITY_CONTROL,PASSTHROUGH);
 */

void OdriveSetControlInputMode(Odrv_t* odrive,ControlMode requested_control_mode,InputMode requested_input_mode)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
 8005650:	4613      	mov	r3, r2
 8005652:	70bb      	strb	r3, [r7, #2]

	uint8_t TxBuffer[8]={0};
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

	if(odrive->control_mode==requested_control_mode&&odrive->input_mode==requested_input_mode)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	429a      	cmp	r2, r3
 8005666:	d105      	bne.n	8005674 <OdriveSetControlInputMode+0x30>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800566e:	78ba      	ldrb	r2, [r7, #2]
 8005670:	429a      	cmp	r2, r3
 8005672:	d013      	beq.n	800569c <OdriveSetControlInputMode+0x58>
		return;

	TxBuffer[0]  = requested_control_mode;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	723b      	strb	r3, [r7, #8]

	TxBuffer[4]  = requested_input_mode;
 8005678:	78bb      	ldrb	r3, [r7, #2]
 800567a:	733b      	strb	r3, [r7, #12]

	odrive->control_mode=requested_control_mode;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	odrive->input_mode=requested_input_mode;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	78ba      	ldrb	r2, [r7, #2]
 8005688:	f883 2020 	strb.w	r2, [r3, #32]

	OdriveSendCAN(odrive,SET_CONTROLLER_MODES,TxBuffer);
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	461a      	mov	r2, r3
 8005692:	210b      	movs	r1, #11
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f9af 	bl	80059f8 <OdriveSendCAN>
 800569a:	e000      	b.n	800569e <OdriveSetControlInputMode+0x5a>
		return;
 800569c:	bf00      	nop

}
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <OdriveEnquire>:
 *                        feedback, the feedback required
 * Function Return		: None
 * Function Example		:OdriveEnquire(&odrive,TURN_COUNT_AND_VELOCITY);
 */
void OdriveEnquire(Odrv_t* odrive,Feedback feedback)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]

	if(feedback==BUS_VOLTAGE)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <OdriveEnquire+0x20>
	{
		OdriveGetBusVoltage(odrive);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9f9 	bl	8005aae <OdriveGetBusVoltage>
		odrive->busy[BUS_VOLTAGE]=1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	745a      	strb	r2, [r3, #17]
	{
		OdriveGetShadowCount(odrive);
		odrive->busy[SHADOW_COUNT]=1;
	}

}
 80056c2:	e026      	b.n	8005712 <OdriveEnquire+0x6e>
	else if(feedback==TURN_COUNT_AND_VELOCITY)
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d106      	bne.n	80056d8 <OdriveEnquire+0x34>
		OdriveGetEncoderFeedback(odrive);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9bf 	bl	8005a4e <OdriveGetEncoderFeedback>
		odrive->busy[TURN_COUNT_AND_VELOCITY]=1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	749a      	strb	r2, [r3, #18]
}
 80056d6:	e01c      	b.n	8005712 <OdriveEnquire+0x6e>
	else if(feedback==SENSORLESS_ESTIMATE)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d106      	bne.n	80056ec <OdriveEnquire+0x48>
		OdriveGetSensorlessEstimates(odrive);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f9c1 	bl	8005a66 <OdriveGetSensorlessEstimates>
		odrive->busy[SENSORLESS_ESTIMATE]=1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	75da      	strb	r2, [r3, #23]
}
 80056ea:	e012      	b.n	8005712 <OdriveEnquire+0x6e>
	else if(feedback==IQ_VALUE)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d106      	bne.n	8005700 <OdriveEnquire+0x5c>
		OdriveGetIQValue(odrive);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9cf 	bl	8005a96 <OdriveGetIQValue>
		odrive->busy[IQ_VALUE]=1;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	755a      	strb	r2, [r3, #21]
}
 80056fe:	e008      	b.n	8005712 <OdriveEnquire+0x6e>
	else if(feedback==SHADOW_COUNT)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d105      	bne.n	8005712 <OdriveEnquire+0x6e>
		OdriveGetShadowCount(odrive);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9b9 	bl	8005a7e <OdriveGetShadowCount>
		odrive->busy[SHADOW_COUNT]=1;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	751a      	strb	r2, [r3, #20]
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	0000      	movs	r0, r0
 800571c:	0000      	movs	r0, r0
	...

08005720 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	float data=0;
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 800572e:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <decode_Odrive+0x1d8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8005734:	231f      	movs	r3, #31
 8005736:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8005738:	8afa      	ldrh	r2, [r7, #22]
 800573a:	8abb      	ldrh	r3, [r7, #20]
 800573c:	4013      	ands	r3, r2
 800573e:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8005740:	8a7b      	ldrh	r3, [r7, #18]
 8005742:	2b09      	cmp	r3, #9
 8005744:	d136      	bne.n	80057b4 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	749a      	strb	r2, [r3, #18]
 8005756:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <decode_Odrive+0x1d8>)
 8005758:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 800575a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <decode_Odrive+0x1d8>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8005766:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	4618      	mov	r0, r3
 8005774:	f7fa fee8 	bl	8000548 <__aeabi_f2d>
 8005778:	a35d      	add	r3, pc, #372	; (adr r3, 80058f0 <decode_Odrive+0x1d0>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa ff3b 	bl	80005f8 <__aeabi_dmul>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4614      	mov	r4, r2
 8005788:	461d      	mov	r5, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fa feda 	bl	8000548 <__aeabi_f2d>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4620      	mov	r0, r4
 800579a:	4629      	mov	r1, r5
 800579c:	f7fa ff2c 	bl	80005f8 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7fb fa1e 	bl	8000be8 <__aeabi_d2f>
 80057ac:	4602      	mov	r2, r0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 80057b2:	e097      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 80057b4:	8a7b      	ldrh	r3, [r7, #18]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d123      	bne.n	8005802 <decode_Odrive+0xe2>
 80057ba:	4b4f      	ldr	r3, [pc, #316]	; (80058f8 <decode_Odrive+0x1d8>)
 80057bc:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 80057be:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 80057c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80057c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c8:	ee17 2a90 	vmov	r2, s15
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <decode_Odrive+0x1d8>)
 80057d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <decode_Odrive+0x1d8>)
 80057de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d178      	bne.n	80058e4 <decode_Odrive+0x1c4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7c1b      	ldrb	r3, [r3, #16]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d174      	bne.n	80058e4 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	741a      	strb	r2, [r3, #16]
}
 8005800:	e070      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8005802:	8a7b      	ldrh	r3, [r7, #18]
 8005804:	2b17      	cmp	r3, #23
 8005806:	d109      	bne.n	800581c <decode_Odrive+0xfc>
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <decode_Odrive+0x1d8>)
 800580a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 800580c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	745a      	strb	r2, [r3, #17]
}
 800581a:	e063      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 800581c:	8a7b      	ldrh	r3, [r7, #18]
 800581e:	2b15      	cmp	r3, #21
 8005820:	d10f      	bne.n	8005842 <decode_Odrive+0x122>
 8005822:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <decode_Odrive+0x1d8>)
 8005824:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8005826:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	65da      	str	r2, [r3, #92]	; 0x5c
 800582e:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <decode_Odrive+0x1d8>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8005832:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	75da      	strb	r2, [r3, #23]
}
 8005840:	e050      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8005842:	8a7b      	ldrh	r3, [r7, #18]
 8005844:	2b14      	cmp	r3, #20
 8005846:	d10f      	bne.n	8005868 <decode_Odrive+0x148>
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <decode_Odrive+0x1d8>)
 800584a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 800584c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	665a      	str	r2, [r3, #100]	; 0x64
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <decode_Odrive+0x1d8>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8005858:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	755a      	strb	r2, [r3, #21]
}
 8005866:	e03d      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8005868:	8a7b      	ldrh	r3, [r7, #18]
 800586a:	2b03      	cmp	r3, #3
 800586c:	d128      	bne.n	80058c0 <decode_Odrive+0x1a0>
 800586e:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <decode_Odrive+0x1d8>)
 8005870:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8005872:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8005874:	edd7 7a03 	vldr	s15, [r7, #12]
 8005878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800587c:	ee17 2a90 	vmov	r2, s15
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f91a 	bl	8005ac8 <Odrive_Error_To_String>
 8005894:	4603      	mov	r3, r0
 8005896:	4619      	mov	r1, r3
 8005898:	4620      	mov	r0, r4
 800589a:	f014 fc3c 	bl	801a116 <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7fa fc93 	bl	80001d0 <strlen>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4423      	add	r3, r4
 80058ae:	4913      	ldr	r1, [pc, #76]	; (80058fc <decode_Odrive+0x1dc>)
 80058b0:	461a      	mov	r2, r3
 80058b2:	460b      	mov	r3, r1
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	759a      	strb	r2, [r3, #22]
}
 80058be:	e011      	b.n	80058e4 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 80058c0:	8a7b      	ldrh	r3, [r7, #18]
 80058c2:	2b0a      	cmp	r3, #10
 80058c4:	d10e      	bne.n	80058e4 <decode_Odrive+0x1c4>
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <decode_Odrive+0x1d8>)
 80058c8:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 80058ca:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <decode_Odrive+0x1d8>)
 80058d4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 80058d6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	751a      	strb	r2, [r3, #20]
}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bdb0      	pop	{r4, r5, r7, pc}
 80058ec:	f3af 8000 	nop.w
 80058f0:	54442d18 	.word	0x54442d18
 80058f4:	400921fb 	.word	0x400921fb
 80058f8:	20006d2c 	.word	0x20006d2c
 80058fc:	0801f12c 	.word	0x0801f12c

08005900 <OdriveBlockingTurn>:

void OdriveBlockingTurn(Odrv_t* odrive,float turn_count)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	ed87 0a00 	vstr	s0, [r7]

	uint8_t TxBuffer[8]={0};
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
	if(odrive->type==DENG_FOC){
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <OdriveBlockingTurn+0x4c>
		OdriveEnquire(odrive,TURN_COUNT_AND_VELOCITY);
 800591e:	2101      	movs	r1, #1
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff febf 	bl	80056a4 <OdriveEnquire>
		int start_2 = HAL_GetTick();
 8005926:	f00a f8dd 	bl	800fae4 <HAL_GetTick>
 800592a:	4603      	mov	r3, r0
 800592c:	617b      	str	r3, [r7, #20]
		while(odrive->busy[TURN_COUNT_AND_VELOCITY])
 800592e:	e007      	b.n	8005940 <OdriveBlockingTurn+0x40>
		{
			if(HAL_GetTick()-start_2>500)
 8005930:	f00a f8d8 	bl	800fae4 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800593e:	d804      	bhi.n	800594a <OdriveBlockingTurn+0x4a>
		while(odrive->busy[TURN_COUNT_AND_VELOCITY])
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7c9b      	ldrb	r3, [r3, #18]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f3      	bne.n	8005930 <OdriveBlockingTurn+0x30>
 8005948:	e000      	b.n	800594c <OdriveBlockingTurn+0x4c>
				break;
 800594a:	bf00      	nop
		}
	}

	float target = odrive->feedback.encoder + turn_count;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005952:	edd7 7a00 	vldr	s15, [r7]
 8005956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800595a:	edc7 7a02 	vstr	s15, [r7, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]

	memcpy(&TxBuffer[0],&target,4);
 8005960:	60fb      	str	r3, [r7, #12]
	OdriveSetControlInputMode(odrive,POSITION_CONTROL,TRAPEZOIDAL_TRAJECTORY);
 8005962:	2205      	movs	r2, #5
 8005964:	2103      	movs	r1, #3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff fe6c 	bl	8005644 <OdriveSetControlInputMode>
	OdriveSendCAN(odrive,SET_INPUT_POS,TxBuffer);
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	461a      	mov	r2, r3
 8005972:	210c      	movs	r1, #12
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f83f 	bl	80059f8 <OdriveSendCAN>

	if(odrive->feedback.traj_state==TRAJECTORY)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005980:	2b00      	cmp	r3, #0
 8005982:	d11e      	bne.n	80059c2 <OdriveBlockingTurn+0xc2>
	{
		while(odrive->feedback.traj_state==TRAJECTORY)
 8005984:	e00b      	b.n	800599e <OdriveBlockingTurn+0x9e>
		{
			OdriveSetControlInputMode(odrive,POSITION_CONTROL,TRAPEZOIDAL_TRAJECTORY);
 8005986:	2205      	movs	r2, #5
 8005988:	2103      	movs	r1, #3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fe5a 	bl	8005644 <OdriveSetControlInputMode>
			OdriveSendCAN(odrive,SET_INPUT_POS,TxBuffer);
 8005990:	f107 030c 	add.w	r3, r7, #12
 8005994:	461a      	mov	r2, r3
 8005996:	210c      	movs	r1, #12
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f82d 	bl	80059f8 <OdriveSendCAN>
		while(odrive->feedback.traj_state==TRAJECTORY)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <OdriveBlockingTurn+0x86>
	//		sprintf((char*) debug, "Stuck second loop\n");
	//		HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	//		if(HAL_GetTick()-start>500)
	//			break;
	//	}
}
 80059a8:	e022      	b.n	80059f0 <OdriveBlockingTurn+0xf0>
			OdriveSetControlInputMode(odrive,POSITION_CONTROL,TRAPEZOIDAL_TRAJECTORY);
 80059aa:	2205      	movs	r2, #5
 80059ac:	2103      	movs	r1, #3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fe48 	bl	8005644 <OdriveSetControlInputMode>
			OdriveSendCAN(odrive,SET_INPUT_POS,TxBuffer);
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	461a      	mov	r2, r3
 80059ba:	210c      	movs	r1, #12
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f81b 	bl	80059f8 <OdriveSendCAN>
		while(odrive->feedback.traj_state==TRAJECTORY_DONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d0ee      	beq.n	80059aa <OdriveBlockingTurn+0xaa>
		while(odrive->feedback.traj_state==TRAJECTORY)
 80059cc:	e00b      	b.n	80059e6 <OdriveBlockingTurn+0xe6>
			OdriveSetControlInputMode(odrive,POSITION_CONTROL,TRAPEZOIDAL_TRAJECTORY);
 80059ce:	2205      	movs	r2, #5
 80059d0:	2103      	movs	r1, #3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fe36 	bl	8005644 <OdriveSetControlInputMode>
			OdriveSendCAN(odrive,SET_INPUT_POS,TxBuffer);
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	461a      	mov	r2, r3
 80059de:	210c      	movs	r1, #12
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f809 	bl	80059f8 <OdriveSendCAN>
		while(odrive->feedback.traj_state==TRAJECTORY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ee      	beq.n	80059ce <OdriveBlockingTurn+0xce>
}
 80059f0:	bf00      	nop
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <OdriveSendCAN>:
	odrive->trap_traj_param.accel=accel_limit;
	odrive->trap_traj_param.decel=decel_limit;

}

void OdriveSendCAN(Odrv_t* odrive,uint8_t command,uint8_t* buffer){
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	460b      	mov	r3, r1
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	72fb      	strb	r3, [r7, #11]

	CAN_TxMsg(odrive->hcanx,odrive->Instance<<5 | ((uint16_t)command),buffer,8);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8b1b      	ldrh	r3, [r3, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	2308      	movs	r3, #8
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	f7fd ff8f 	bl	800393c <CAN_TxMsg>

}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <OdriveSendRTRCAN>:

void OdriveSendRTRCAN(Odrv_t* odrive,uint8_t command){
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
	CAN_TxRTR(odrive->hcanx, odrive->Instance<<5 |((uint16_t)command));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8b1b      	ldrh	r3, [r3, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	4619      	mov	r1, r3
 8005a42:	f7fe f819 	bl	8003a78 <CAN_TxRTR>
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <OdriveGetEncoderFeedback>:

void OdriveGetEncoderFeedback(Odrv_t* odrive)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
	OdriveSendRTRCAN(odrive,GET_ENCODER_ESTIMATE);
 8005a56:	2109      	movs	r1, #9
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ffe4 	bl	8005a26 <OdriveSendRTRCAN>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <OdriveGetSensorlessEstimates>:

void OdriveGetSensorlessEstimates(Odrv_t* odrive)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
	OdriveSendRTRCAN(odrive,GET_SENSORLESS_ESTIMATES);
 8005a6e:	2115      	movs	r1, #21
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ffd8 	bl	8005a26 <OdriveSendRTRCAN>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <OdriveGetShadowCount>:

void OdriveGetShadowCount(Odrv_t* odrive)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
	OdriveSendRTRCAN(odrive,GET_SHADOW_COUNT);
 8005a86:	210a      	movs	r1, #10
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff ffcc 	bl	8005a26 <OdriveSendRTRCAN>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <OdriveGetIQValue>:

void OdriveGetIQValue(Odrv_t* odrive)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
	OdriveSendRTRCAN(odrive,GET_IQ);
 8005a9e:	2114      	movs	r1, #20
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ffc0 	bl	8005a26 <OdriveSendRTRCAN>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <OdriveGetBusVoltage>:

void OdriveGetBusVoltage(Odrv_t* odrive)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
	OdriveSendRTRCAN(odrive,GET_BUS_VOLTAGE);
 8005ab6:	2117      	movs	r1, #23
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff ffb4 	bl	8005a26 <OdriveSendRTRCAN>
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	f000 80fd 	beq.w	8005cd4 <Odrive_Error_To_String+0x20c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	f200 80fa 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aea:	f000 80f1 	beq.w	8005cd0 <Odrive_Error_To_String+0x208>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af4:	f200 80f0 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005afe:	f000 80e5 	beq.w	8005ccc <Odrive_Error_To_String+0x204>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b08:	f200 80e6 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b12:	f000 80d9 	beq.w	8005cc8 <Odrive_Error_To_String+0x200>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1c:	f200 80dc 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b26:	f000 80cd 	beq.w	8005cc4 <Odrive_Error_To_String+0x1fc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b30:	f200 80d2 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3a:	f000 80c1 	beq.w	8005cc0 <Odrive_Error_To_String+0x1f8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	f200 80c8 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	f000 80b5 	beq.w	8005cbc <Odrive_Error_To_String+0x1f4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b58:	f200 80be 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b62:	f000 80a9 	beq.w	8005cb8 <Odrive_Error_To_String+0x1f0>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6c:	f200 80b4 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b76:	f000 809d 	beq.w	8005cb4 <Odrive_Error_To_String+0x1ec>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	f200 80aa 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	f000 8091 	beq.w	8005cb0 <Odrive_Error_To_String+0x1e8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b94:	f200 80a0 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	f000 8085 	beq.w	8005cac <Odrive_Error_To_String+0x1e4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba8:	f200 8096 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d079      	beq.n	8005ca8 <Odrive_Error_To_String+0x1e0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	f200 808d 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc4:	d06e      	beq.n	8005ca4 <Odrive_Error_To_String+0x1dc>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	f200 8084 	bhi.w	8005cd8 <Odrive_Error_To_String+0x210>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	d063      	beq.n	8005ca0 <Odrive_Error_To_String+0x1d8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bde:	d87b      	bhi.n	8005cd8 <Odrive_Error_To_String+0x210>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d848      	bhi.n	8005c78 <Odrive_Error_To_String+0x1b0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d875      	bhi.n	8005cd8 <Odrive_Error_To_String+0x210>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <Odrive_Error_To_String+0x12c>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c81 	.word	0x08005c81
 8005bf8:	08005c85 	.word	0x08005c85
 8005bfc:	08005c89 	.word	0x08005c89
 8005c00:	08005cd9 	.word	0x08005cd9
 8005c04:	08005c8d 	.word	0x08005c8d
 8005c08:	08005cd9 	.word	0x08005cd9
 8005c0c:	08005cd9 	.word	0x08005cd9
 8005c10:	08005cd9 	.word	0x08005cd9
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005cd9 	.word	0x08005cd9
 8005c1c:	08005cd9 	.word	0x08005cd9
 8005c20:	08005cd9 	.word	0x08005cd9
 8005c24:	08005cd9 	.word	0x08005cd9
 8005c28:	08005cd9 	.word	0x08005cd9
 8005c2c:	08005cd9 	.word	0x08005cd9
 8005c30:	08005cd9 	.word	0x08005cd9
 8005c34:	08005c95 	.word	0x08005c95
 8005c38:	08005cd9 	.word	0x08005cd9
 8005c3c:	08005cd9 	.word	0x08005cd9
 8005c40:	08005cd9 	.word	0x08005cd9
 8005c44:	08005cd9 	.word	0x08005cd9
 8005c48:	08005cd9 	.word	0x08005cd9
 8005c4c:	08005cd9 	.word	0x08005cd9
 8005c50:	08005cd9 	.word	0x08005cd9
 8005c54:	08005cd9 	.word	0x08005cd9
 8005c58:	08005cd9 	.word	0x08005cd9
 8005c5c:	08005cd9 	.word	0x08005cd9
 8005c60:	08005cd9 	.word	0x08005cd9
 8005c64:	08005cd9 	.word	0x08005cd9
 8005c68:	08005cd9 	.word	0x08005cd9
 8005c6c:	08005cd9 	.word	0x08005cd9
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d00e      	beq.n	8005c9c <Odrive_Error_To_String+0x1d4>
 8005c7e:	e02b      	b.n	8005cd8 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8005c80:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <Odrive_Error_To_String+0x220>)
 8005c82:	e02a      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 8005c84:	4b19      	ldr	r3, [pc, #100]	; (8005cec <Odrive_Error_To_String+0x224>)
 8005c86:	e028      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <Odrive_Error_To_String+0x228>)
 8005c8a:	e026      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8005c8c:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <Odrive_Error_To_String+0x22c>)
 8005c8e:	e024      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <Odrive_Error_To_String+0x230>)
 8005c92:	e022      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <Odrive_Error_To_String+0x234>)
 8005c96:	e020      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <Odrive_Error_To_String+0x238>)
 8005c9a:	e01e      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <Odrive_Error_To_String+0x23c>)
 8005c9e:	e01c      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8005ca0:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <Odrive_Error_To_String+0x240>)
 8005ca2:	e01a      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 8005ca4:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <Odrive_Error_To_String+0x244>)
 8005ca6:	e018      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <Odrive_Error_To_String+0x248>)
 8005caa:	e016      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <Odrive_Error_To_String+0x24c>)
 8005cae:	e014      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <Odrive_Error_To_String+0x250>)
 8005cb2:	e012      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <Odrive_Error_To_String+0x254>)
 8005cb6:	e010      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <Odrive_Error_To_String+0x258>)
 8005cba:	e00e      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <Odrive_Error_To_String+0x25c>)
 8005cbe:	e00c      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <Odrive_Error_To_String+0x260>)
 8005cc2:	e00a      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <Odrive_Error_To_String+0x264>)
 8005cc6:	e008      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8005cc8:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <Odrive_Error_To_String+0x268>)
 8005cca:	e006      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <Odrive_Error_To_String+0x26c>)
 8005cce:	e004      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <Odrive_Error_To_String+0x270>)
 8005cd2:	e002      	b.n	8005cda <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <Odrive_Error_To_String+0x274>)
 8005cd6:	e000      	b.n	8005cda <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8005cd8:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <Odrive_Error_To_String+0x278>)
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	0801f130 	.word	0x0801f130
 8005cec:	0801f13c 	.word	0x0801f13c
 8005cf0:	0801f14c 	.word	0x0801f14c
 8005cf4:	0801f15c 	.word	0x0801f15c
 8005cf8:	0801f16c 	.word	0x0801f16c
 8005cfc:	0801f180 	.word	0x0801f180
 8005d00:	0801f18c 	.word	0x0801f18c
 8005d04:	0801f198 	.word	0x0801f198
 8005d08:	0801f1a8 	.word	0x0801f1a8
 8005d0c:	0801f1bc 	.word	0x0801f1bc
 8005d10:	0801f1d4 	.word	0x0801f1d4
 8005d14:	0801f1e8 	.word	0x0801f1e8
 8005d18:	0801f204 	.word	0x0801f204
 8005d1c:	0801f21c 	.word	0x0801f21c
 8005d20:	0801f22c 	.word	0x0801f22c
 8005d24:	0801f240 	.word	0x0801f240
 8005d28:	0801f25c 	.word	0x0801f25c
 8005d2c:	0801f278 	.word	0x0801f278
 8005d30:	0801f290 	.word	0x0801f290
 8005d34:	0801f2a0 	.word	0x0801f2a0
 8005d38:	0801f2b4 	.word	0x0801f2b4
 8005d3c:	0801f2c8 	.word	0x0801f2c8
 8005d40:	0801f2dc 	.word	0x0801f2dc

08005d44 <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8005d4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005d4e:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005d50:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <OdriveCAN_Handler+0xcc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 8005d5c:	883b      	ldrh	r3, [r7, #0]
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	803b      	strh	r3, [r7, #0]
	int i=0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e01f      	b.n	8005dac <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <OdriveCAN_Handler+0xd0>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	8b1b      	ldrh	r3, [r3, #24]
 8005d7a:	883a      	ldrh	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d112      	bne.n	8005da6 <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 8005d80:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <OdriveCAN_Handler+0xd0>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fcc7 	bl	8005720 <decode_Odrive>
			c[i]++;
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	491e      	ldr	r1, [pc, #120]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8005da4:	e007      	b.n	8005db6 <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3301      	adds	r3, #1
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <OdriveCAN_Handler+0xd8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	dbda      	blt.n	8005d6c <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d111      	bne.n	8005de2 <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 8005dc4:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <OdriveCAN_Handler+0xdc>)
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <OdriveCAN_Handler+0xdc>)
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2d9      	uxtb	r1, r3
 8005dda:	7853      	ldrb	r3, [r2, #1]
 8005ddc:	f361 1386 	bfi	r3, r1, #6, #1
 8005de0:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d10e      	bne.n	8005e08 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <OdriveCAN_Handler+0xd4>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <OdriveCAN_Handler+0xdc>)
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <OdriveCAN_Handler+0xdc>)
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	09db      	lsrs	r3, r3, #7
 8005dfe:	b2d9      	uxtb	r1, r3
 8005e00:	7853      	ldrb	r3, [r2, #1]
 8005e02:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e06:	7053      	strb	r3, [r2, #1]
	}

}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2000a7e0 	.word	0x2000a7e0
 8005e14:	2000a8fc 	.word	0x2000a8fc
 8005e18:	2000024c 	.word	0x2000024c
 8005e1c:	20000248 	.word	0x20000248
 8005e20:	40020814 	.word	0x40020814

08005e24 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8005e52:	edc7 0a08 	vstr	s1, [r7, #32]
 8005e56:	ed87 1a07 	vstr	s2, [r7, #28]
 8005e5a:	edc7 1a06 	vstr	s3, [r7, #24]
 8005e5e:	ed87 2a05 	vstr	s4, [r7, #20]
 8005e62:	edc7 2a04 	vstr	s5, [r7, #16]
 8005e66:	ed87 3a03 	vstr	s6, [r7, #12]
 8005e6a:	edc7 3a02 	vstr	s7, [r7, #8]
 8005e6e:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f81b 	bl	8005edc <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005ea6:	bf00      	nop
 8005ea8:	3728      	adds	r7, #40	; 0x28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	ed87 0a02 	vstr	s0, [r7, #8]
 8005eba:	6079      	str	r1, [r7, #4]
 8005ebc:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f804 	bl	8005edc <PIDCoeffCalc>
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005edc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	edd3 7a08 	vldr	s15, [r3, #32]
 8005eec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	d013      	beq.n	8005f1e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	ed93 7a03 	vldr	s14, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f1c:	e007      	b.n	8005f2e <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	edd3 7a07 	vldr	s15, [r3, #28]
 8005f34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	d108      	bne.n	8005f50 <PIDCoeffCalc+0x74>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005f44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4c:	f000 80ef 	beq.w	800612e <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f60:	ee17 0a90 	vmov	r0, s15
 8005f64:	f7fa faf0 	bl	8000548 <__aeabi_f2d>
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f70:	f7fa f98a 	bl	8000288 <__aeabi_dsub>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	ee17 0a90 	vmov	r0, s15
 8005f90:	f7fa fada 	bl	8000548 <__aeabi_f2d>
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f9c:	f7fa f976 	bl	800028c <__adddf3>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa fc50 	bl	800084c <__aeabi_ddiv>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f7fa fe18 	bl	8000be8 <__aeabi_d2f>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef1 7a67 	vneg.f32	s15, s15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fabb 	bl	8000548 <__aeabi_f2d>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa fab4 	bl	8000548 <__aeabi_f2d>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	f7fa f952 	bl	800028c <__adddf3>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa faa7 	bl	8000548 <__aeabi_f2d>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4690      	mov	r8, r2
 800600c:	4699      	mov	r9, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	edd3 7a03 	vldr	s15, [r3, #12]
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	ee17 0a90 	vmov	r0, s15
 8006022:	f7fa fa91 	bl	8000548 <__aeabi_f2d>
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800602e:	f7fa f92d 	bl	800028c <__adddf3>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f7fa fc07 	bl	800084c <__aeabi_ddiv>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa f921 	bl	800028c <__adddf3>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	f7fa fdc9 	bl	8000be8 <__aeabi_d2f>
 8006056:	4602      	mov	r2, r0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	edd3 7a03 	vldr	s15, [r3, #12]
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	ee17 0a90 	vmov	r0, s15
 8006070:	f7fa fa6a 	bl	8000548 <__aeabi_f2d>
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800607c:	f7fa f904 	bl	8000288 <__aeabi_dsub>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4614      	mov	r4, r2
 8006086:	461d      	mov	r5, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa5b 	bl	8000548 <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa faad 	bl	80005f8 <__aeabi_dmul>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4614      	mov	r4, r2
 80060a4:	461d      	mov	r5, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fa fa4c 	bl	8000548 <__aeabi_f2d>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	f7fa f8ea 	bl	800028c <__adddf3>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4690      	mov	r8, r2
 80060be:	4699      	mov	r9, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fa fa3f 	bl	8000548 <__aeabi_f2d>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa fa91 	bl	80005f8 <__aeabi_dmul>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4620      	mov	r0, r4
 80060dc:	4629      	mov	r1, r5
 80060de:	f7fa f8d3 	bl	8000288 <__aeabi_dsub>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4614      	mov	r4, r2
 80060e8:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80060f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fa:	ee17 0a90 	vmov	r0, s15
 80060fe:	f7fa fa23 	bl	8000548 <__aeabi_f2d>
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800610a:	f7fa f8bf 	bl	800028c <__adddf3>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fb99 	bl	800084c <__aeabi_ddiv>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f7fa fd61 	bl	8000be8 <__aeabi_d2f>
 8006126:	4602      	mov	r2, r0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	63da      	str	r2, [r3, #60]	; 0x3c
 800612c:	e00c      	b.n	8006148 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	63da      	str	r2, [r3, #60]	; 0x3c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006152 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80061a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80061a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ac:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80061be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	d033      	beq.n	8006230 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80061dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80061e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80061ea:	e003      	b.n	80061f4 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800620a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800621a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800621e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	edd3 7a07 	vldr	s15, [r3, #28]
 8006236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	d107      	bne.n	8006250 <PID+0xc2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006246:	eef5 7a40 	vcmp.f32	s15, #0.0
 800624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624e:	d02c      	beq.n	80062aa <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800625c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006260:	edd7 7a03 	vldr	s15, [r7, #12]
 8006264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006284:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006298:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80062b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80062ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	dd0f      	ble.n	80062e4 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80062d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d4:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7813      	ldrb	r3, [r2, #0]
 80062dc:	f36f 0300 	bfc	r3, #0, #1
 80062e0:	7013      	strb	r3, [r2, #0]
 80062e2:	e02b      	b.n	800633c <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ea:	eef1 7a67 	vneg.f32	s15, s15
 80062ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80062f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fa:	d511      	bpl.n	8006320 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	edd3 7a06 	vldr	s15, [r3, #24]
 8006308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630c:	eef1 7a67 	vneg.f32	s15, s15
 8006310:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	7813      	ldrb	r3, [r2, #0]
 8006318:	f36f 0300 	bfc	r3, #0, #1
 800631c:	7013      	strb	r3, [r2, #0]
 800631e:	e00d      	b.n	800633c <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	edd3 7a06 	vldr	s15, [r3, #24]
 8006326:	ed97 7a02 	vldr	s14, [r7, #8]
 800632a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	7813      	ldrb	r3, [r2, #0]
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	601a      	str	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <PPInit>:
#include "../adapter.h"

void PPInit(uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
	pp->base_shape=base;
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	7bfa      	ldrb	r2, [r7, #15]
 8006364:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006380:	f043 0302 	orr.w	r3, r3, #2
 8006384:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800639a:	461a      	mov	r2, r3
 800639c:	f7ff fd42 	bl	8005e24 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80063a6:	4618      	mov	r0, r3
 80063a8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80063ac:	ed9f 3a49 	vldr	s6, [pc, #292]	; 80064d4 <PPInit+0x184>
 80063b0:	eddf 2a49 	vldr	s5, [pc, #292]	; 80064d8 <PPInit+0x188>
 80063b4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80063b8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80063bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80063c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80063c4:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80064dc <PPInit+0x18c>
 80063c8:	f7ff fd3e 	bl	8005e48 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff febd 	bl	8006152 <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7ff fd1a 	bl	8005e24 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80063f6:	4618      	mov	r0, r3
 80063f8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80063fc:	ed9f 3a35 	vldr	s6, [pc, #212]	; 80064d4 <PPInit+0x184>
 8006400:	eddf 2a35 	vldr	s5, [pc, #212]	; 80064d8 <PPInit+0x188>
 8006404:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8006408:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800640c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006410:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006414:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80064dc <PPInit+0x18c>
 8006418:	f7ff fd16 	bl	8005e48 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fe95 	bl	8006152 <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800643a:	461a      	mov	r2, r3
 800643c:	f7ff fcf2 	bl	8005e24 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006446:	4618      	mov	r0, r3
 8006448:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800644c:	ed9f 3a24 	vldr	s6, [pc, #144]	; 80064e0 <PPInit+0x190>
 8006450:	eddf 2a23 	vldr	s5, [pc, #140]	; 80064e0 <PPInit+0x190>
 8006454:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8006458:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800645c:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80064e4 <PPInit+0x194>
 8006460:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006464:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80064dc <PPInit+0x18c>
 8006468:	f7ff fcee 	bl	8005e48 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fe6d 	bl	8006152 <PIDDelayInit>

	pp->tol_xy=0.20;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <PPInit+0x198>)
 800647c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006486:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <PPInit+0x19c>)
 800648e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <PPInit+0x1a0>)
 8006496:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80064a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
	pp->rotate_only = 0;
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80064c4:	f36f 1304 	bfc	r3, #4, #1
 80064c8:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	3ecccccd 	.word	0x3ecccccd
 80064d8:	00000000 	.word	0x00000000
 80064dc:	3ba3d70a 	.word	0x3ba3d70a
 80064e0:	3e4ccccd 	.word	0x3e4ccccd
 80064e4:	3d088889 	.word	0x3d088889
 80064e8:	3e4ccccd 	.word	0x3e4ccccd
 80064ec:	3f19999a 	.word	0x3f19999a
 80064f0:	3d75c28f 	.word	0x3d75c28f

080064f4 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80064fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8006502:	ed87 1a01 	vstr	s2, [r7, #4]
 8006506:	6038      	str	r0, [r7, #0]
	pp->kp[0]=kp;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006526:	4619      	mov	r1, r3
 8006528:	ed97 0a03 	vldr	s0, [r7, #12]
 800652c:	2004      	movs	r0, #4
 800652e:	f7ff fcbe 	bl	8005eae <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006538:	4619      	mov	r1, r3
 800653a:	ed97 0a02 	vldr	s0, [r7, #8]
 800653e:	2005      	movs	r0, #5
 8006540:	f7ff fcb5 	bl	8005eae <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800654a:	4619      	mov	r1, r3
 800654c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006550:	2006      	movs	r0, #6
 8006552:	f7ff fcac 	bl	8005eae <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800655c:	4619      	mov	r1, r3
 800655e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006562:	2004      	movs	r0, #4
 8006564:	f7ff fca3 	bl	8005eae <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800656e:	4619      	mov	r1, r3
 8006570:	ed97 0a02 	vldr	s0, [r7, #8]
 8006574:	2005      	movs	r0, #5
 8006576:	f7ff fc9a 	bl	8005eae <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006580:	4619      	mov	r1, r3
 8006582:	ed97 0a01 	vldr	s0, [r7, #4]
 8006586:	2006      	movs	r0, #6
 8006588:	f7ff fc91 	bl	8005eae <PIDGainSet>
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	ed87 0a05 	vstr	s0, [r7, #20]
 800659e:	edc7 0a04 	vstr	s1, [r7, #16]
 80065a2:	ed87 1a03 	vstr	s2, [r7, #12]
 80065a6:	edc7 1a02 	vstr	s3, [r7, #8]
 80065aa:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80065b2:	4619      	mov	r1, r3
 80065b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80065b8:	2004      	movs	r0, #4
 80065ba:	f7ff fc78 	bl	8005eae <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80065c4:	4619      	mov	r1, r3
 80065c6:	ed97 0a04 	vldr	s0, [r7, #16]
 80065ca:	2005      	movs	r0, #5
 80065cc:	f7ff fc6f 	bl	8005eae <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80065d6:	4619      	mov	r1, r3
 80065d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80065dc:	2006      	movs	r0, #6
 80065de:	f7ff fc66 	bl	8005eae <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80065e8:	4619      	mov	r1, r3
 80065ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80065ee:	2003      	movs	r0, #3
 80065f0:	f7ff fc5d 	bl	8005eae <PIDGainSet>
	pp->pp_orgz_kp = kp;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <PP_PIDEndSet>:

void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	ed87 0a03 	vstr	s0, [r7, #12]
 8006610:	edc7 0a02 	vstr	s1, [r7, #8]
 8006614:	ed87 1a01 	vstr	s2, [r7, #4]
 8006618:	6038      	str	r0, [r7, #0]
	pp->kp[1]=kp;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	ed2d 8b02 	vpush	{d8}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
	int i;
	for(i=0;i<no_point;i++)
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e11b      	b.n	800688c <PP_start+0x24e>
	{
		pp->target_vel[i] = point[i][0];
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4613      	mov	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3374      	adds	r3, #116	; 0x74
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1] + pp->real_x;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	461a      	mov	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	ed93 7a01 	vldr	s14, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800668c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	331a      	adds	r3, #26
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	edc3 7a00 	vstr	s15, [r3]
		pp->target_y[i] = point[i][2] + pp->real_y;
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	461a      	mov	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80066b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3328      	adds	r3, #40	; 0x28
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	edc3 7a00 	vstr	s15, [r3]
		pp->target_accurate[i] = point[i][5]; // point_lock
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3346      	adds	r3, #70	; 0x46
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3304      	adds	r3, #4
 80066ea:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	3304      	adds	r3, #4
 800670c:	601a      	str	r2, [r3, #0]
		if(i == 0)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11f      	bne.n	8006754 <PP_start+0x116>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	ed93 7a02 	vldr	s14, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006724:	eeb0 7ae7 	vabs.f32	s14, s15
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	edd3 6a01 	vldr	s13, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006734:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006738:	eef0 7ae7 	vabs.f32	s15, s15
 800673c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006740:	eeb0 0a66 	vmov.f32	s0, s13
 8006744:	f017 f974 	bl	801da30 <atanf>
 8006748:	eef0 7a40 	vmov.f32	s15, s0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 8006752:	e03f      	b.n	80067d4 <PP_start+0x196>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	ed93 7a02 	vldr	s14, [r3, #8]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4613      	mov	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	3b1c      	subs	r3, #28
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	edd3 7a02 	vldr	s15, [r3, #8]
 800677c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006780:	eeb0 7ae7 	vabs.f32	s14, s15
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	edd3 6a01 	vldr	s13, [r3, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	3b1c      	subs	r3, #28
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80067ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067b0:	eef0 7ae7 	vabs.f32	s15, s15
 80067b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80067b8:	eeb0 0a66 	vmov.f32	s0, s13
 80067bc:	f017 f938 	bl	801da30 <atanf>
 80067c0:	eef0 7a40 	vmov.f32	s15, s0
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3364      	adds	r3, #100	; 0x64
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3] + pp->real_z;
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	461a      	mov	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80067ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	3338      	adds	r3, #56	; 0x38
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);  // xy-pid
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	ed93 8a04 	vldr	s16, [r3, #16]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3364      	adds	r3, #100	; 0x64
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	3304      	adds	r3, #4
 8006820:	edd3 7a00 	vldr	s15, [r3]
 8006824:	eeb0 0a67 	vmov.f32	s0, s15
 8006828:	f017 f9d6 	bl	801dbd8 <cosf>
 800682c:	eef0 7a40 	vmov.f32	s15, s0
 8006830:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	3384      	adds	r3, #132	; 0x84
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	3304      	adds	r3, #4
 8006840:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	ed93 8a04 	vldr	s16, [r3, #16]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	3364      	adds	r3, #100	; 0x64
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	3304      	adds	r3, #4
 8006864:	edd3 7a00 	vldr	s15, [r3]
 8006868:	eeb0 0a67 	vmov.f32	s0, s15
 800686c:	f017 f9fc 	bl	801dc68 <sinf>
 8006870:	eef0 7a40 	vmov.f32	s15, s0
 8006874:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	3394      	adds	r3, #148	; 0x94
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	3301      	adds	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	f6ff aedf 	blt.w	8006654 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	if(pp->target_point == 1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d166      	bne.n	8006976 <PP_start+0x338>
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->f_tol_xy)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80068b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b8:	eeb0 7ae7 	vabs.f32	s14, s15
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80068c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	db17      	blt.n	80068fc <PP_start+0x2be>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80068d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068dc:	eef0 7ae7 	vabs.f32	s15, s15
 80068e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80068ee:	4619      	mov	r1, r3
 80068f0:	eeb0 0a47 	vmov.f32	s0, s14
 80068f4:	2002      	movs	r0, #2
 80068f6:	f7ff fada 	bl	8005eae <PIDGainSet>
 80068fa:	e008      	b.n	800690e <PP_start+0x2d0>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006902:	4619      	mov	r1, r3
 8006904:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006908:	2002      	movs	r0, #2
 800690a:	f7ff fad0 	bl	8005eae <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->f_tol_xy)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800691a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800691e:	eeb0 7ae7 	vabs.f32	s14, s15
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8006928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	db17      	blt.n	8006962 <PP_start+0x324>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800693e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006942:	eef0 7ae7 	vabs.f32	s15, s15
 8006946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006954:	4619      	mov	r1, r3
 8006956:	eeb0 0a47 	vmov.f32	s0, s14
 800695a:	2002      	movs	r0, #2
 800695c:	f7ff faa7 	bl	8005eae <PIDGainSet>
 8006960:	e06f      	b.n	8006a42 <PP_start+0x404>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006968:	4619      	mov	r1, r3
 800696a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800696e:	2002      	movs	r0, #2
 8006970:	f7ff fa9d 	bl	8005eae <PIDGainSet>
 8006974:	e065      	b.n	8006a42 <PP_start+0x404>
	}
	else
	{
		if(fabs(pp->real_x - pp->target_x[0]) >= pp->tol_xy)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8006982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006986:	eeb0 7ae7 	vabs.f32	s14, s15
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8006990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006998:	db17      	blt.n	80069ca <PP_start+0x38c>
			PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80069a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069aa:	eef0 7ae7 	vabs.f32	s15, s15
 80069ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069bc:	4619      	mov	r1, r3
 80069be:	eeb0 0a47 	vmov.f32	s0, s14
 80069c2:	2002      	movs	r0, #2
 80069c4:	f7ff fa73 	bl	8005eae <PIDGainSet>
 80069c8:	e008      	b.n	80069dc <PP_start+0x39e>
		else
			PIDGainSet(KE,1.0,&(pp->x));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80069d0:	4619      	mov	r1, r3
 80069d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80069d6:	2002      	movs	r0, #2
 80069d8:	f7ff fa69 	bl	8005eae <PIDGainSet>

		if(fabs(pp->real_y - pp->target_y[0]) >= pp->tol_xy)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80069e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 80069f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	db17      	blt.n	8006a30 <PP_start+0x3f2>
			PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8006a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a10:	eef0 7ae7 	vabs.f32	s15, s15
 8006a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a22:	4619      	mov	r1, r3
 8006a24:	eeb0 0a47 	vmov.f32	s0, s14
 8006a28:	2002      	movs	r0, #2
 8006a2a:	f7ff fa40 	bl	8005eae <PIDGainSet>
 8006a2e:	e008      	b.n	8006a42 <PP_start+0x404>

		else
			PIDGainSet(KE,1.0,&(pp->y));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a36:	4619      	mov	r1, r3
 8006a38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a3c:	2002      	movs	r0, #2
 8006a3e:	f7ff fa36 	bl	8005eae <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006a4e:	4619      	mov	r1, r3
 8006a50:	eeb0 0a67 	vmov.f32	s0, s15
 8006a54:	2003      	movs	r0, #3
 8006a56:	f7ff fa2a 	bl	8005eae <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006a66:	4619      	mov	r1, r3
 8006a68:	eeb0 0a67 	vmov.f32	s0, s15
 8006a6c:	2003      	movs	r0, #3
 8006a6e:	f7ff fa1e 	bl	8005eae <PIDGainSet>

	pp->point_count=0;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
//	sys.navi_vel = 1;
	pp->final_f=0;
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006a9e:	f36f 0382 	bfc	r3, #2, #1
 8006aa2:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006aac:	f36f 03c3 	bfc	r3, #3, #1
 8006ab0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	ecbd 8b02 	vpop	{d8}
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <PP_stop>:
	pp->final_f=0;
	pp->rotate=0;
}

void PP_stop (PathPlan_t *pp)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	pp->pp_start=0;
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006ace:	f36f 0300 	bfc	r3, #0, #1
 8006ad2:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fb38 	bl	8006152 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fb32 	bl	8006152 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fb2c 	bl	8006152 <PIDDelayInit>

}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <PP_reset>:

void PP_reset (PathPlan_t *pp)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	651a      	str	r2, [r3, #80]	; 0x50
//		pp->yaw_constant = 0.0;
//		pp->yaw_offset = *(pp->yaw);
//		pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff faf6 	bl	8006152 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff faf0 	bl	8006152 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff faea 	bl	8006152 <PIDDelayInit>
//		pp->real_z=0.0;
//	PP_SetZ(0, pp);
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006b90:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	60da      	str	r2, [r3, #12]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
	pp->pp_no_crv_pts = z;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	0000      	movs	r0, r0
	...

08006bd8 <PathPlan>:



void PathPlan (PathPlan_t *pp)
{
 8006bd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006bdc:	ed2d 8b02 	vpush	{d8}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
	// Called every 5ms
	if(pp->point_start) // The start of program
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 8134 	beq.w	8006e60 <PathPlan+0x288>
	{
		pp->pos_x=*(pp->qeix);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 30.0){
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	edd3 7a00 	vldr	s15, [r3]
 8006c14:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d516      	bpl.n	8006c50 <PathPlan+0x78>
			if(pp->prev_yaw > 330.0){
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c28:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006c4c <PathPlan+0x74>
 8006c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c34:	dd2b      	ble.n	8006c8e <PathPlan+0xb6>
				pp->yaw_constant++;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8006c4a:	e020      	b.n	8006c8e <PathPlan+0xb6>
 8006c4c:	43a50000 	.word	0x43a50000
			}
		}else if(*(pp->yaw) > 330.0){
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	edd3 7a00 	vldr	s15, [r3]
 8006c58:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8006c4c <PathPlan+0x74>
 8006c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c64:	dd13      	ble.n	8006c8e <PathPlan+0xb6>
			if(pp->prev_yaw < 30.0){
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c6c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8006c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c78:	d509      	bpl.n	8006c8e <PathPlan+0xb6>
				pp->yaw_constant--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7f9 fc52 	bl	8000548 <__aeabi_f2d>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	460d      	mov	r5, r1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7f9 fc4b 	bl	8000548 <__aeabi_f2d>
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	4b68      	ldr	r3, [pc, #416]	; (8006e58 <PathPlan+0x280>)
 8006cb8:	f7f9 fc9e 	bl	80005f8 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	f7f9 fae2 	bl	800028c <__adddf3>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7f9 fc37 	bl	8000548 <__aeabi_f2d>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fad1 	bl	8000288 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4614      	mov	r4, r2
 8006cec:	461d      	mov	r5, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7f9 fc28 	bl	8000548 <__aeabi_f2d>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fac4 	bl	800028c <__adddf3>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f7f9 ff6c 	bl	8000be8 <__aeabi_d2f>
 8006d10:	4602      	mov	r2, r0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * M_PI;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 fc14 	bl	8000548 <__aeabi_f2d>
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	4b4d      	ldr	r3, [pc, #308]	; (8006e5c <PathPlan+0x284>)
 8006d26:	f7f9 fd91 	bl	800084c <__aeabi_ddiv>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4610      	mov	r0, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	a347      	add	r3, pc, #284	; (adr r3, 8006e50 <PathPlan+0x278>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fc5e 	bl	80005f8 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	f7f9 ff50 	bl	8000be8 <__aeabi_d2f>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	619a      	str	r2, [r3, #24]

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d5a:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d64:	eeb0 0a67 	vmov.f32	s0, s15
 8006d68:	f016 ff36 	bl	801dbd8 <cosf>
 8006d6c:	eef0 7a40 	vmov.f32	s15, s0
 8006d70:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006d80:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8e:	f016 ff6b 	bl	801dc68 <sinf>
 8006d92:	eef0 7a40 	vmov.f32	s15, s0
 8006d96:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006d9a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006db4:	eeb1 8a67 	vneg.f32	s16, s15
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	edd3 7a06 	vldr	s15, [r3, #24]
 8006dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc2:	f016 ff51 	bl	801dc68 <sinf>
 8006dc6:	eef0 7a40 	vmov.f32	s15, s0
 8006dca:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006dda:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	edd3 7a06 	vldr	s15, [r3, #24]
 8006de4:	eeb0 0a67 	vmov.f32	s0, s15
 8006de8:	f016 fef6 	bl	801dbd8 <cosf>
 8006dec:	eef0 7a40 	vmov.f32	s15, s0
 8006df0:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8006df4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40

		pp->prev_real_x = pp->real_x;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	649a      	str	r2, [r3, #72]	; 0x48
 8006e4a:	e009      	b.n	8006e60 <PathPlan+0x288>
 8006e4c:	f3af 8000 	nop.w
 8006e50:	54442d18 	.word	0x54442d18
 8006e54:	400921fb 	.word	0x400921fb
 8006e58:	40768000 	.word	0x40768000
 8006e5c:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f002 8513 	beq.w	8009898 <PathPlan+0x2cc0>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f002 850a 	beq.w	8009898 <PathPlan+0x2cc0>

		if(pp->pp_crv_radius[pp->point_count]){
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	3304      	adds	r3, #4
 8006e96:	edd3 7a00 	vldr	s15, [r3]
 8006e9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea2:	f001 8389 	beq.w	80085b8 <PathPlan+0x19e0>


			if(!pp->pp_crv_calc){
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 8208 	bne.w	80072c2 <PathPlan+0x6ea>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	331a      	adds	r3, #26
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	ed93 7a00 	vldr	s14, [r3]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ece:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ed2:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	edd3 8a00 	vldr	s17, [r3]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	3328      	adds	r3, #40	; 0x28
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	3304      	adds	r3, #4
 8006efc:	ed93 7a00 	vldr	s14, [r3]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	331a      	adds	r3, #26
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	ed93 7a00 	vldr	s14, [r3]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f26:	eef0 0a67 	vmov.f32	s1, s15
 8006f2a:	eeb0 0a66 	vmov.f32	s0, s13
 8006f2e:	f016 fedd 	bl	801dcec <atan2f>
 8006f32:	eef0 7a40 	vmov.f32	s15, s0
 8006f36:	eeb0 0a67 	vmov.f32	s0, s15
 8006f3a:	f016 fe95 	bl	801dc68 <sinf>
 8006f3e:	eef0 7a40 	vmov.f32	s15, s0
 8006f42:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006f46:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8006f50:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	3328      	adds	r3, #40	; 0x28
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	3304      	adds	r3, #4
 8006f64:	ed93 7a00 	vldr	s14, [r3]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f72:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f76:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	edd3 8a00 	vldr	s17, [r3]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	3328      	adds	r3, #40	; 0x28
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	ed93 7a00 	vldr	s14, [r3]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006faa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	331a      	adds	r3, #26
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	ed93 7a00 	vldr	s14, [r3]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fca:	eef0 0a67 	vmov.f32	s1, s15
 8006fce:	eeb0 0a66 	vmov.f32	s0, s13
 8006fd2:	f016 fe8b 	bl	801dcec <atan2f>
 8006fd6:	eef0 7a40 	vmov.f32	s15, s0
 8006fda:	eeb0 0a67 	vmov.f32	s0, s15
 8006fde:	f016 fdfb 	bl	801dbd8 <cosf>
 8006fe2:	eef0 7a40 	vmov.f32	s15, s0
 8006fe6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006fea:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8006ff4:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	3338      	adds	r3, #56	; 0x38
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	edd3 6a00 	vldr	s13, [r3]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800701e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007046:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]
 800704e:	e12d      	b.n	80072ac <PathPlan+0x6d4>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8007050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007054:	edd7 7a03 	vldr	s15, [r7, #12]
 8007058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800705c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007060:	eeb0 0a67 	vmov.f32	s0, s15
 8007064:	f016 fe44 	bl	801dcf0 <powf>
 8007068:	eeb0 7a40 	vmov.f32	s14, s0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	ee17 0a90 	vmov	r0, s15
 800707a:	f7f9 fa65 	bl	8000548 <__aeabi_f2d>
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007086:	edd7 7a03 	vldr	s15, [r7, #12]
 800708a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800708e:	ee17 0a90 	vmov	r0, s15
 8007092:	f7f9 fa59 	bl	8000548 <__aeabi_f2d>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	f7f9 f8f7 	bl	800028c <__adddf3>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4690      	mov	r8, r2
 80070a4:	4699      	mov	r9, r3
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7f9 fa4e 	bl	8000548 <__aeabi_f2d>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 faa0 	bl	80005f8 <__aeabi_dmul>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4690      	mov	r8, r2
 80070be:	4699      	mov	r9, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7f9 fa3d 	bl	8000548 <__aeabi_f2d>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 fa8f 	bl	80005f8 <__aeabi_dmul>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4620      	mov	r0, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	f7f9 f8d3 	bl	800028c <__adddf3>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4614      	mov	r4, r2
 80070ec:	461d      	mov	r5, r3
 80070ee:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80070f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80070f6:	f016 fdfb 	bl	801dcf0 <powf>
 80070fa:	eeb0 7a40 	vmov.f32	s14, s0
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	331a      	adds	r3, #26
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	edd3 7a00 	vldr	s15, [r3]
 8007110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007114:	ee17 0a90 	vmov	r0, s15
 8007118:	f7f9 fa16 	bl	8000548 <__aeabi_f2d>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4620      	mov	r0, r4
 8007122:	4629      	mov	r1, r5
 8007124:	f7f9 f8b2 	bl	800028c <__adddf3>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4610      	mov	r0, r2
 800712e:	4619      	mov	r1, r3
 8007130:	f7f9 fd5a 	bl	8000be8 <__aeabi_d2f>
 8007134:	4601      	mov	r1, r0
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 8007144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007148:	edd7 7a03 	vldr	s15, [r7, #12]
 800714c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007150:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8007154:	eeb0 0a67 	vmov.f32	s0, s15
 8007158:	f016 fdca 	bl	801dcf0 <powf>
 800715c:	eeb0 7a40 	vmov.f32	s14, s0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	ee17 0a90 	vmov	r0, s15
 800716e:	f7f9 f9eb 	bl	8000548 <__aeabi_f2d>
 8007172:	4604      	mov	r4, r0
 8007174:	460d      	mov	r5, r1
 8007176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800717a:	edd7 7a03 	vldr	s15, [r7, #12]
 800717e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007182:	ee17 0a90 	vmov	r0, s15
 8007186:	f7f9 f9df 	bl	8000548 <__aeabi_f2d>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	f7f9 f87d 	bl	800028c <__adddf3>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4690      	mov	r8, r2
 8007198:	4699      	mov	r9, r3
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7f9 f9d4 	bl	8000548 <__aeabi_f2d>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4640      	mov	r0, r8
 80071a6:	4649      	mov	r1, r9
 80071a8:	f7f9 fa26 	bl	80005f8 <__aeabi_dmul>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4690      	mov	r8, r2
 80071b2:	4699      	mov	r9, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f9c3 	bl	8000548 <__aeabi_f2d>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4620      	mov	r0, r4
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7f9 f859 	bl	800028c <__adddf3>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4614      	mov	r4, r2
 80071e0:	461d      	mov	r5, r3
 80071e2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80071e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80071ea:	f016 fd81 	bl	801dcf0 <powf>
 80071ee:	eeb0 7a40 	vmov.f32	s14, s0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	3328      	adds	r3, #40	; 0x28
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	3304      	adds	r3, #4
 8007202:	edd3 7a00 	vldr	s15, [r3]
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	ee17 0a90 	vmov	r0, s15
 800720e:	f7f9 f99b 	bl	8000548 <__aeabi_f2d>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 f837 	bl	800028c <__adddf3>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4610      	mov	r0, r2
 8007224:	4619      	mov	r1, r3
 8007226:	f7f9 fcdf 	bl	8000be8 <__aeabi_d2f>
 800722a:	4601      	mov	r1, r0
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	ed93 7a00 	vldr	s14, [r3]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	edd3 6a00 	vldr	s13, [r3]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800726c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729a:	ed97 7a03 	vldr	s14, [r7, #12]
 800729e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072a2:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60bb      	str	r3, [r7, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f6ff aecb 	blt.w	8007050 <PathPlan+0x478>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	ed93 7a00 	vldr	s14, [r3]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80072dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	ed93 7a00 	vldr	s14, [r3]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	ed93 7a00 	vldr	s14, [r3]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	edd3 7a04 	vldr	s15, [r3, #16]
 8007324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800733a:	3b01      	subs	r3, #1
 800733c:	429a      	cmp	r2, r3
 800733e:	d14a      	bne.n	80073d6 <PathPlan+0x7fe>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007346:	eef0 7ae7 	vabs.f32	s15, s15
 800734a:	ee17 0a90 	vmov	r0, s15
 800734e:	f7f9 f8fb 	bl	8000548 <__aeabi_f2d>
 8007352:	4604      	mov	r4, r0
 8007354:	460d      	mov	r5, r1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800735c:	eef0 7ae7 	vabs.f32	s15, s15
 8007360:	ee17 0a90 	vmov	r0, s15
 8007364:	f7f9 f8f0 	bl	8000548 <__aeabi_f2d>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f8 ff8c 	bl	800028c <__adddf3>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007384:	f7f9 fa62 	bl	800084c <__aeabi_ddiv>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007396:	4618      	mov	r0, r3
 8007398:	f7f9 f8d6 	bl	8000548 <__aeabi_f2d>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f9 fb9a 	bl	8000adc <__aeabi_dcmplt>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d013      	beq.n	80073d6 <PathPlan+0x7fe>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80073b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80073be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c6:	d506      	bpl.n	80073d6 <PathPlan+0x7fe>
				pp->pp_lck = 1.0;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80073ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	e005      	b.n	80073e2 <PathPlan+0x80a>
			else
				pp->pp_lck = 0.0;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80073e8:	edd3 7a00 	vldr	s15, [r3]
 80073ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80073fa:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007404:	edd3 7a00 	vldr	s15, [r3]
 8007408:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80076a0 <PathPlan+0xac8>
 800740c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	d811      	bhi.n	800743a <PathPlan+0x862>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800741c:	ed93 7a00 	vldr	s14, [r3]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007426:	edd3 7a00 	vldr	s15, [r3]
 800742a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007434:	edc3 7a00 	vstr	s15, [r3]
 8007438:	e034      	b.n	80074a4 <PathPlan+0x8cc>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007440:	edd3 6a00 	vldr	s13, [r3]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800744a:	ed93 7a00 	vldr	s14, [r3]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007458:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f7f9 f86f 	bl	8000548 <__aeabi_f2d>
 800746a:	a38b      	add	r3, pc, #556	; (adr r3, 8007698 <PathPlan+0xac0>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f9 fb48 	bl	8000b04 <__aeabi_dcmpge>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <PathPlan+0x8ac>
					pp->pp_lck_enb = 1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007482:	e003      	b.n	800748c <PathPlan+0x8b4>
				else
					pp->pp_lck_enb = 0;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80074aa:	eef0 7ae7 	vabs.f32	s15, s15
 80074ae:	ee17 0a90 	vmov	r0, s15
 80074b2:	f7f9 f849 	bl	8000548 <__aeabi_f2d>
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80074c0:	eef0 7ae7 	vabs.f32	s15, s15
 80074c4:	ee17 0a90 	vmov	r0, s15
 80074c8:	f7f9 f83e 	bl	8000548 <__aeabi_f2d>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4620      	mov	r0, r4
 80074d2:	4629      	mov	r1, r5
 80074d4:	f7f8 feda 	bl	800028c <__adddf3>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074e8:	f7f9 f9b0 	bl	800084c <__aeabi_ddiv>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	461d      	mov	r5, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f9 f824 	bl	8000548 <__aeabi_f2d>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f9 fae8 	bl	8000adc <__aeabi_dcmplt>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8462 	beq.w	8007dd8 <PathPlan+0x1200>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8007520:	3b01      	subs	r3, #1
 8007522:	429a      	cmp	r2, r3
 8007524:	f280 8135 	bge.w	8007792 <PathPlan+0xbba>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800752e:	edd3 7a00 	vldr	s15, [r3]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007538:	4619      	mov	r1, r3
 800753a:	eeb0 0a67 	vmov.f32	s0, s15
 800753e:	2004      	movs	r0, #4
 8007540:	f7fe fcb5 	bl	8005eae <PIDGainSet>
					pp->crnt_crv_pt++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	ed93 7a00 	vldr	s14, [r3]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800756c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	ed93 7a00 	vldr	s14, [r3]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	ed93 7a00 	vldr	s14, [r3]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80075b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	331a      	adds	r3, #26
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	ed93 7a00 	vldr	s14, [r3]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80075d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	d01d      	beq.n	8007620 <PathPlan+0xa48>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	331a      	adds	r3, #26
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	ed93 7a00 	vldr	s14, [r3]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80075fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007600:	eef0 7ae7 	vabs.f32	s15, s15
 8007604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007612:	4619      	mov	r1, r3
 8007614:	eeb0 0a47 	vmov.f32	s0, s14
 8007618:	2002      	movs	r0, #2
 800761a:	f7fe fc48 	bl	8005eae <PIDGainSet>
 800761e:	e008      	b.n	8007632 <PathPlan+0xa5a>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007626:	4619      	mov	r1, r3
 8007628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800762c:	2002      	movs	r0, #2
 800762e:	f7fe fc3e 	bl	8005eae <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	3328      	adds	r3, #40	; 0x28
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	3304      	adds	r3, #4
 8007642:	ed93 7a00 	vldr	s14, [r3]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800764c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007650:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	d024      	beq.n	80076a4 <PathPlan+0xacc>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	3328      	adds	r3, #40	; 0x28
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	3304      	adds	r3, #4
 800766a:	ed93 7a00 	vldr	s14, [r3]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007678:	eef0 7ae7 	vabs.f32	s15, s15
 800767c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800768a:	4619      	mov	r1, r3
 800768c:	eeb0 0a47 	vmov.f32	s0, s14
 8007690:	2002      	movs	r0, #2
 8007692:	f7fe fc0c 	bl	8005eae <PIDGainSet>
 8007696:	e00e      	b.n	80076b6 <PathPlan+0xade>
 8007698:	66666666 	.word	0x66666666
 800769c:	3fee6666 	.word	0x3fee6666
 80076a0:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80076aa:	4619      	mov	r1, r3
 80076ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076b0:	2002      	movs	r0, #2
 80076b2:	f7fe fbfc 	bl	8005eae <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80076c2:	4619      	mov	r1, r3
 80076c4:	eeb0 0a67 	vmov.f32	s0, s15
 80076c8:	2004      	movs	r0, #4
 80076ca:	f7fe fbf0 	bl	8005eae <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80076da:	4619      	mov	r1, r3
 80076dc:	eeb0 0a67 	vmov.f32	s0, s15
 80076e0:	2004      	movs	r0, #4
 80076e2:	f7fe fbe4 	bl	8005eae <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80076f2:	4619      	mov	r1, r3
 80076f4:	eeb0 0a67 	vmov.f32	s0, s15
 80076f8:	2005      	movs	r0, #5
 80076fa:	f7fe fbd8 	bl	8005eae <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800770a:	4619      	mov	r1, r3
 800770c:	eeb0 0a67 	vmov.f32	s0, s15
 8007710:	2005      	movs	r0, #5
 8007712:	f7fe fbcc 	bl	8005eae <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007722:	4619      	mov	r1, r3
 8007724:	eeb0 0a67 	vmov.f32	s0, s15
 8007728:	2006      	movs	r0, #6
 800772a:	f7fe fbc0 	bl	8005eae <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800773a:	4619      	mov	r1, r3
 800773c:	eeb0 0a67 	vmov.f32	s0, s15
 8007740:	2006      	movs	r0, #6
 8007742:	f7fe fbb4 	bl	8005eae <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	3384      	adds	r3, #132	; 0x84
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	3304      	adds	r3, #4
 8007756:	edd3 7a00 	vldr	s15, [r3]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007760:	4619      	mov	r1, r3
 8007762:	eeb0 0a67 	vmov.f32	s0, s15
 8007766:	2003      	movs	r0, #3
 8007768:	f7fe fba1 	bl	8005eae <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	3394      	adds	r3, #148	; 0x94
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007784:	4619      	mov	r1, r3
 8007786:	eeb0 0a67 	vmov.f32	s0, s15
 800778a:	2003      	movs	r0, #3
 800778c:	f7fe fb8f 	bl	8005eae <PIDGainSet>
 8007790:	e322      	b.n	8007dd8 <PathPlan+0x1200>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 800779e:	3b01      	subs	r3, #1
 80077a0:	429a      	cmp	r2, r3
 80077a2:	f040 8252 	bne.w	8007c4a <PathPlan+0x1072>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80077b2:	3b01      	subs	r3, #1
 80077b4:	429a      	cmp	r2, r3
 80077b6:	f280 8248 	bge.w	8007c4a <PathPlan+0x1072>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80077c0:	eef0 7ae7 	vabs.f32	s15, s15
 80077c4:	ee17 0a90 	vmov	r0, s15
 80077c8:	f7f8 febe 	bl	8000548 <__aeabi_f2d>
 80077cc:	4604      	mov	r4, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80077d6:	eef0 7ae7 	vabs.f32	s15, s15
 80077da:	ee17 0a90 	vmov	r0, s15
 80077de:	f7f8 feb3 	bl	8000548 <__aeabi_f2d>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 fd4f 	bl	800028c <__adddf3>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077fe:	f7f9 f825 	bl	800084c <__aeabi_ddiv>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4614      	mov	r4, r2
 8007808:	461d      	mov	r5, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007810:	4618      	mov	r0, r3
 8007812:	f7f8 fe99 	bl	8000548 <__aeabi_f2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f9 f95d 	bl	8000adc <__aeabi_dcmplt>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 82d6 	beq.w	8007dd6 <PathPlan+0x11fe>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007830:	eeb0 7ae7 	vabs.f32	s14, s15
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800783a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007842:	d400      	bmi.n	8007846 <PathPlan+0xc6e>
 8007844:	e2c7      	b.n	8007dd6 <PathPlan+0x11fe>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	3346      	adds	r3, #70	; 0x46
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	3304      	adds	r3, #4
 8007856:	edd3 7a00 	vldr	s15, [r3]
 800785a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800785e:	eef4 7a47 	vcmp.f32	s15, s14
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	f040 80fd 	bne.w	8007a64 <PathPlan+0xe8c>
							if(pp->pp_lck_enb == 1){
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007870:	2b01      	cmp	r3, #1
 8007872:	f040 82b0 	bne.w	8007dd6 <PathPlan+0x11fe>

								pp->point_count++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	331a      	adds	r3, #26
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	ed93 7a00 	vldr	s14, [r3]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800789c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a8:	d01d      	beq.n	80078e6 <PathPlan+0xd0e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	331a      	adds	r3, #26
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	ed93 7a00 	vldr	s14, [r3]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80078c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c6:	eef0 7ae7 	vabs.f32	s15, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80078d8:	4619      	mov	r1, r3
 80078da:	eeb0 0a47 	vmov.f32	s0, s14
 80078de:	2002      	movs	r0, #2
 80078e0:	f7fe fae5 	bl	8005eae <PIDGainSet>
 80078e4:	e008      	b.n	80078f8 <PathPlan+0xd20>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80078ec:	4619      	mov	r1, r3
 80078ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078f2:	2002      	movs	r0, #2
 80078f4:	f7fe fadb 	bl	8005eae <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	3328      	adds	r3, #40	; 0x28
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	3304      	adds	r3, #4
 8007908:	ed93 7a00 	vldr	s14, [r3]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007916:	eef5 7a40 	vcmp.f32	s15, #0.0
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d01e      	beq.n	800795e <PathPlan+0xd86>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	3328      	adds	r3, #40	; 0x28
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	ed93 7a00 	vldr	s14, [r3]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800793a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800793e:	eef0 7ae7 	vabs.f32	s15, s15
 8007942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007950:	4619      	mov	r1, r3
 8007952:	eeb0 0a47 	vmov.f32	s0, s14
 8007956:	2002      	movs	r0, #2
 8007958:	f7fe faa9 	bl	8005eae <PIDGainSet>
 800795c:	e008      	b.n	8007970 <PathPlan+0xd98>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007964:	4619      	mov	r1, r3
 8007966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800796a:	2002      	movs	r0, #2
 800796c:	f7fe fa9f 	bl	8005eae <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800797c:	4619      	mov	r1, r3
 800797e:	eeb0 0a67 	vmov.f32	s0, s15
 8007982:	2004      	movs	r0, #4
 8007984:	f7fe fa93 	bl	8005eae <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007994:	4619      	mov	r1, r3
 8007996:	eeb0 0a67 	vmov.f32	s0, s15
 800799a:	2004      	movs	r0, #4
 800799c:	f7fe fa87 	bl	8005eae <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80079ac:	4619      	mov	r1, r3
 80079ae:	eeb0 0a67 	vmov.f32	s0, s15
 80079b2:	2005      	movs	r0, #5
 80079b4:	f7fe fa7b 	bl	8005eae <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80079c4:	4619      	mov	r1, r3
 80079c6:	eeb0 0a67 	vmov.f32	s0, s15
 80079ca:	2005      	movs	r0, #5
 80079cc:	f7fe fa6f 	bl	8005eae <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80079dc:	4619      	mov	r1, r3
 80079de:	eeb0 0a67 	vmov.f32	s0, s15
 80079e2:	2006      	movs	r0, #6
 80079e4:	f7fe fa63 	bl	8005eae <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80079f4:	4619      	mov	r1, r3
 80079f6:	eeb0 0a67 	vmov.f32	s0, s15
 80079fa:	2006      	movs	r0, #6
 80079fc:	f7fe fa57 	bl	8005eae <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	3384      	adds	r3, #132	; 0x84
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	edd3 7a00 	vldr	s15, [r3]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a20:	2003      	movs	r0, #3
 8007a22:	f7fe fa44 	bl	8005eae <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	3394      	adds	r3, #148	; 0x94
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	edd3 7a00 	vldr	s15, [r3]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007a3e:	4619      	mov	r1, r3
 8007a40:	eeb0 0a67 	vmov.f32	s0, s15
 8007a44:	2003      	movs	r0, #3
 8007a46:	f7fe fa32 	bl	8005eae <PIDGainSet>
								pp->crnt_crv_pt=0;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007a62:	e1b8      	b.n	8007dd6 <PathPlan+0x11fe>

							}
						}else{
							pp->point_count++;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	331a      	adds	r3, #26
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	ed93 7a00 	vldr	s14, [r3]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a96:	d01d      	beq.n	8007ad4 <PathPlan+0xefc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	331a      	adds	r3, #26
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	ed93 7a00 	vldr	s14, [r3]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8007ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8007acc:	2002      	movs	r0, #2
 8007ace:	f7fe f9ee 	bl	8005eae <PIDGainSet>
 8007ad2:	e008      	b.n	8007ae6 <PathPlan+0xf0e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007ada:	4619      	mov	r1, r3
 8007adc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ae0:	2002      	movs	r0, #2
 8007ae2:	f7fe f9e4 	bl	8005eae <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	3328      	adds	r3, #40	; 0x28
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	3304      	adds	r3, #4
 8007af6:	ed93 7a00 	vldr	s14, [r3]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0c:	d01e      	beq.n	8007b4c <PathPlan+0xf74>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	3328      	adds	r3, #40	; 0x28
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	ed93 7a00 	vldr	s14, [r3]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8007b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b3e:	4619      	mov	r1, r3
 8007b40:	eeb0 0a47 	vmov.f32	s0, s14
 8007b44:	2002      	movs	r0, #2
 8007b46:	f7fe f9b2 	bl	8005eae <PIDGainSet>
 8007b4a:	e008      	b.n	8007b5e <PathPlan+0xf86>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b52:	4619      	mov	r1, r3
 8007b54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b58:	2002      	movs	r0, #2
 8007b5a:	f7fe f9a8 	bl	8005eae <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b70:	2004      	movs	r0, #4
 8007b72:	f7fe f99c 	bl	8005eae <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b82:	4619      	mov	r1, r3
 8007b84:	eeb0 0a67 	vmov.f32	s0, s15
 8007b88:	2004      	movs	r0, #4
 8007b8a:	f7fe f990 	bl	8005eae <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba0:	2005      	movs	r0, #5
 8007ba2:	f7fe f984 	bl	8005eae <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb8:	2005      	movs	r0, #5
 8007bba:	f7fe f978 	bl	8005eae <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007bca:	4619      	mov	r1, r3
 8007bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd0:	2006      	movs	r0, #6
 8007bd2:	f7fe f96c 	bl	8005eae <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007be2:	4619      	mov	r1, r3
 8007be4:	eeb0 0a67 	vmov.f32	s0, s15
 8007be8:	2006      	movs	r0, #6
 8007bea:	f7fe f960 	bl	8005eae <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	3384      	adds	r3, #132	; 0x84
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	edd3 7a00 	vldr	s15, [r3]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c08:	4619      	mov	r1, r3
 8007c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0e:	2003      	movs	r0, #3
 8007c10:	f7fe f94d 	bl	8005eae <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	3394      	adds	r3, #148	; 0x94
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	edd3 7a00 	vldr	s15, [r3]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c32:	2003      	movs	r0, #3
 8007c34:	f7fe f93b 	bl	8005eae <PIDGainSet>
							pp->crnt_crv_pt=0;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007c48:	e0c5      	b.n	8007dd6 <PathPlan+0x11fe>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8007c56:	3b01      	subs	r3, #1
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	f040 80bd 	bne.w	8007dd8 <PathPlan+0x1200>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f040 80b3 	bne.w	8007dd8 <PathPlan+0x1200>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007c78:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8a:	f140 80a5 	bpl.w	8007dd8 <PathPlan+0x1200>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007c94:	eeb0 7ae7 	vabs.f32	s14, s15
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	f140 8097 	bpl.w	8007dd8 <PathPlan+0x1200>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8007cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc6:	f200 8087 	bhi.w	8007dd8 <PathPlan+0x1200>

						if(pp->target_accurate[pp->point_count] == 1.0){
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	3346      	adds	r3, #70	; 0x46
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	edd3 7a00 	vldr	s15, [r3]
 8007cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ce2:	eef4 7a47 	vcmp.f32	s15, s14
 8007ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cea:	d13e      	bne.n	8007d6a <PathPlan+0x1192>
							if(pp->pp_lck_enb == 1){
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d170      	bne.n	8007dd8 <PathPlan+0x1200>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007d06:	4619      	mov	r1, r3
 8007d08:	eeb0 0a67 	vmov.f32	s0, s15
 8007d0c:	2004      	movs	r0, #4
 8007d0e:	f7fe f8ce 	bl	8005eae <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007d12:	2201      	movs	r2, #1
 8007d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d18:	487e      	ldr	r0, [pc, #504]	; (8007f14 <PathPlan+0x133c>)
 8007d1a:	f009 fd5f 	bl	80117dc <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fa14 	bl	8006152 <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fa0e 	bl	8006152 <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe fa08 	bl	8006152 <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007d58:	f36f 0300 	bfc	r3, #0, #1
 8007d5c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007d68:	e036      	b.n	8007dd8 <PathPlan+0x1200>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007d70:	edd3 7a00 	vldr	s15, [r3]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d80:	2004      	movs	r0, #4
 8007d82:	f7fe f894 	bl	8005eae <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007d86:	2201      	movs	r2, #1
 8007d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d8c:	4861      	ldr	r0, [pc, #388]	; (8007f14 <PathPlan+0x133c>)
 8007d8e:	f009 fd25 	bl	80117dc <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe f9da 	bl	8006152 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe f9d4 	bl	8006152 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe f9ce 	bl	8006152 <PIDDelayInit>
							pp->crnt_crv_pt=0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007dcc:	f36f 0300 	bfc	r3, #0, #1
 8007dd0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 8007dd4:	e000      	b.n	8007dd8 <PathPlan+0x1200>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007dd6:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f001 8557 	beq.w	8009898 <PathPlan+0x2cc0>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	ed93 7a00 	vldr	s14, [r3]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	ed93 7a00 	vldr	s14, [r3]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007e38:	f36f 03c3 	bfc	r3, #3, #1
 8007e3c:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007e46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	d107      	bne.n	8007e60 <PathPlan+0x1288>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007e56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5e:	d021      	beq.n	8007ea4 <PathPlan+0x12cc>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6e:	d107      	bne.n	8007e80 <PathPlan+0x12a8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007e76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	d011      	beq.n	8007ea4 <PathPlan+0x12cc>
					pp->heading = atan2f(pp->dy, pp->dx);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007e8c:	eef0 0a47 	vmov.f32	s1, s14
 8007e90:	eeb0 0a67 	vmov.f32	s0, s15
 8007e94:	f015 ff2a 	bl	801dcec <atan2f>
 8007e98:	eef0 7a40 	vmov.f32	s15, s0
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8007ea2:	e048      	b.n	8007f36 <PathPlan+0x135e>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb2:	d007      	beq.n	8007ec4 <PathPlan+0x12ec>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007eba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec2:	d10b      	bne.n	8007edc <PathPlan+0x1304>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007eca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed2:	d503      	bpl.n	8007edc <PathPlan+0x1304>
						pp->heading = 1.5708;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a10      	ldr	r2, [pc, #64]	; (8007f18 <PathPlan+0x1340>)
 8007ed8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007eda:	e02c      	b.n	8007f36 <PathPlan+0x135e>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eea:	d007      	beq.n	8007efc <PathPlan+0x1324>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007ef2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efa:	d111      	bne.n	8007f20 <PathPlan+0x1348>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0a:	dd09      	ble.n	8007f20 <PathPlan+0x1348>
						pp->heading = -1.5708;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a03      	ldr	r2, [pc, #12]	; (8007f1c <PathPlan+0x1344>)
 8007f10:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f12:	e010      	b.n	8007f36 <PathPlan+0x135e>
 8007f14:	40020800 	.word	0x40020800
 8007f18:	3fc90ff9 	.word	0x3fc90ff9
 8007f1c:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007f2e:	f043 0308 	orr.w	r3, r3, #8
 8007f32:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	3374      	adds	r3, #116	; 0x74
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	ed93 8a00 	vldr	s16, [r3]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f52:	f015 fe41 	bl	801dbd8 <cosf>
 8007f56:	eef0 7a40 	vmov.f32	s15, s0
 8007f5a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	3374      	adds	r3, #116	; 0x74
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	ed93 8a00 	vldr	s16, [r3]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f80:	f015 fe72 	bl	801dc68 <sinf>
 8007f84:	eef0 7a40 	vmov.f32	s15, s0
 8007f88:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <PathPlan+0x13da>
					pp->vx = pp->vy = 0.0;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	665a      	str	r2, [r3, #100]	; 0x64
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe f8e8 	bl	800618e <PID>
				PID(&(pp->y));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe f8e2 	bl	800618e <PID>
				PID(&(pp->z));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe f8dc 	bl	800618e <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	edd3 7a06 	vldr	s15, [r3, #24]
 8007fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe6:	f015 fdf7 	bl	801dbd8 <cosf>
 8007fea:	eef0 7a40 	vmov.f32	s15, s0
 8007fee:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	edd3 7a06 	vldr	s15, [r3, #24]
 8007ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8008002:	f015 fe31 	bl	801dc68 <sinf>
 8008006:	eef0 7a40 	vmov.f32	s15, s0
 800800a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800800e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	edd3 7a06 	vldr	s15, [r3, #24]
 8008024:	eeb0 0a67 	vmov.f32	s0, s15
 8008028:	f015 fe1e 	bl	801dc68 <sinf>
 800802c:	eef0 7a40 	vmov.f32	s15, s0
 8008030:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008040:	eeb0 0a67 	vmov.f32	s0, s15
 8008044:	f015 fdc8 	bl	801dbd8 <cosf>
 8008048:	eef0 7a40 	vmov.f32	s15, s0
 800804c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008050:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	edd3 7a06 	vldr	s15, [r3, #24]
 8008066:	eeb0 0a67 	vmov.f32	s0, s15
 800806a:	f015 fdb5 	bl	801dbd8 <cosf>
 800806e:	eef0 7a40 	vmov.f32	s15, s0
 8008072:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008082:	eeb0 0a67 	vmov.f32	s0, s15
 8008086:	f015 fdef 	bl	801dc68 <sinf>
 800808a:	eef0 7a40 	vmov.f32	s15, s0
 800808e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008092:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80080a8:	eeb0 0a67 	vmov.f32	s0, s15
 80080ac:	f015 fddc 	bl	801dc68 <sinf>
 80080b0:	eef0 7a40 	vmov.f32	s15, s0
 80080b4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80080c4:	eeb0 0a67 	vmov.f32	s0, s15
 80080c8:	f015 fd86 	bl	801dbd8 <cosf>
 80080cc:	eef0 7a40 	vmov.f32	s15, s0
 80080d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80080d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== 0){
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8161 	bne.w	80083ac <PathPlan+0x17d4>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80080f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fa:	ee17 0a90 	vmov	r0, s15
 80080fe:	f7f8 fa23 	bl	8000548 <__aeabi_f2d>
 8008102:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f7f8 fa75 	bl	80005f8 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4614      	mov	r4, r2
 8008114:	461d      	mov	r5, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800811c:	4618      	mov	r0, r3
 800811e:	f7f8 fa13 	bl	8000548 <__aeabi_f2d>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8ad 	bl	8000288 <__aeabi_dsub>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	f7f8 fd57 	bl	8000be8 <__aeabi_d2f>
 800813a:	4602      	mov	r2, r0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800814e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008152:	ee17 0a90 	vmov	r0, s15
 8008156:	f7f8 f9f7 	bl	8000548 <__aeabi_f2d>
 800815a:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 fa49 	bl	80005f8 <__aeabi_dmul>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4614      	mov	r4, r2
 800816c:	461d      	mov	r5, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008174:	4618      	mov	r0, r3
 8008176:	f7f8 f9e7 	bl	8000548 <__aeabi_f2d>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f883 	bl	800028c <__adddf3>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	f7f8 fd2b 	bl	8000be8 <__aeabi_d2f>
 8008192:	4602      	mov	r2, r0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80081a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081aa:	ee17 0a90 	vmov	r0, s15
 80081ae:	f7f8 f9cb 	bl	8000548 <__aeabi_f2d>
 80081b2:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 fa1d 	bl	80005f8 <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4614      	mov	r4, r2
 80081c4:	461d      	mov	r5, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7f8 f9bb 	bl	8000548 <__aeabi_f2d>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 f857 	bl	800028c <__adddf3>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	4610      	mov	r0, r2
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7f8 fcff 	bl	8000be8 <__aeabi_d2f>
 80081ea:	4602      	mov	r2, r0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80081fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008202:	ee17 0a90 	vmov	r0, s15
 8008206:	f7f8 f99f 	bl	8000548 <__aeabi_f2d>
 800820a:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f9f1 	bl	80005f8 <__aeabi_dmul>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4614      	mov	r4, r2
 800821c:	461d      	mov	r5, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008224:	4618      	mov	r0, r3
 8008226:	f7f8 f98f 	bl	8000548 <__aeabi_f2d>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 f829 	bl	8000288 <__aeabi_dsub>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f7f8 fcd3 	bl	8000be8 <__aeabi_d2f>
 8008242:	4602      	mov	r2, r0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800825a:	ee17 0a90 	vmov	r0, s15
 800825e:	f7f8 f973 	bl	8000548 <__aeabi_f2d>
 8008262:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f9c5 	bl	80005f8 <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4614      	mov	r4, r2
 8008274:	461d      	mov	r5, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800827c:	4618      	mov	r0, r3
 800827e:	f7f8 f963 	bl	8000548 <__aeabi_f2d>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f7 ffff 	bl	800028c <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4610      	mov	r0, r2
 8008294:	4619      	mov	r1, r3
 8008296:	f7f8 fca7 	bl	8000be8 <__aeabi_d2f>
 800829a:	4602      	mov	r2, r0
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80082ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b2:	ee17 0a90 	vmov	r0, s15
 80082b6:	f7f8 f947 	bl	8000548 <__aeabi_f2d>
 80082ba:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4614      	mov	r4, r2
 80082cc:	461d      	mov	r5, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f8 f937 	bl	8000548 <__aeabi_f2d>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f7 ffd3 	bl	800028c <__adddf3>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	f7f8 fc7b 	bl	8000be8 <__aeabi_d2f>
 80082f2:	4602      	mov	r2, r0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800830a:	ee17 0a90 	vmov	r0, s15
 800830e:	f7f8 f91b 	bl	8000548 <__aeabi_f2d>
 8008312:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f8 f96d 	bl	80005f8 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4614      	mov	r4, r2
 8008324:	461d      	mov	r5, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800832c:	4618      	mov	r0, r3
 800832e:	f7f8 f90b 	bl	8000548 <__aeabi_f2d>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffa7 	bl	800028c <__adddf3>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	f7f8 fc4f 	bl	8000be8 <__aeabi_d2f>
 800834a:	4602      	mov	r2, r0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800835e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008362:	ee17 0a90 	vmov	r0, s15
 8008366:	f7f8 f8ef 	bl	8000548 <__aeabi_f2d>
 800836a:	a3f4      	add	r3, pc, #976	; (adr r3, 800873c <PathPlan+0x1b64>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4614      	mov	r4, r2
 800837a:	461d      	mov	r5, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008382:	4618      	mov	r0, r3
 8008384:	f7f8 f8e0 	bl	8000548 <__aeabi_f2d>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f7 ff7c 	bl	800028c <__adddf3>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4610      	mov	r0, r2
 800839a:	4619      	mov	r1, r3
 800839c:	f7f8 fc24 	bl	8000be8 <__aeabi_d2f>
 80083a0:	4602      	mov	r2, r0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				hb_count = HAL_GetTick();

			}
		}
	}
}
 80083a8:	f001 ba76 	b.w	8009898 <PathPlan+0x2cc0>
				} else if(pp->base_shape==1){
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	f041 8270 	bne.w	8009898 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f8 f8c2 	bl	8000548 <__aeabi_f2d>
 80083c4:	a3d8      	add	r3, pc, #864	; (adr r3, 8008728 <PathPlan+0x1b50>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4614      	mov	r4, r2
 80083d4:	461d      	mov	r5, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083dc:	4618      	mov	r0, r3
 80083de:	f7f8 f8b3 	bl	8000548 <__aeabi_f2d>
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	4bd2      	ldr	r3, [pc, #840]	; (8008730 <PathPlan+0x1b58>)
 80083e8:	f7f8 f906 	bl	80005f8 <__aeabi_dmul>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4620      	mov	r0, r4
 80083f2:	4629      	mov	r1, r5
 80083f4:	f7f7 ff48 	bl	8000288 <__aeabi_dsub>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008406:	4618      	mov	r0, r3
 8008408:	f7f8 f89e 	bl	8000548 <__aeabi_f2d>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f7 ff3a 	bl	800028c <__adddf3>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4610      	mov	r0, r2
 800841e:	4619      	mov	r1, r3
 8008420:	f7f8 fbe2 	bl	8000be8 <__aeabi_d2f>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008432:	4618      	mov	r0, r3
 8008434:	f7f8 f888 	bl	8000548 <__aeabi_f2d>
 8008438:	a3bb      	add	r3, pc, #748	; (adr r3, 8008728 <PathPlan+0x1b50>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4614      	mov	r4, r2
 8008448:	461d      	mov	r5, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008450:	4618      	mov	r0, r3
 8008452:	f7f8 f879 	bl	8000548 <__aeabi_f2d>
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	4bb5      	ldr	r3, [pc, #724]	; (8008730 <PathPlan+0x1b58>)
 800845c:	f7f8 f8cc 	bl	80005f8 <__aeabi_dmul>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 ff10 	bl	800028c <__adddf3>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4614      	mov	r4, r2
 8008472:	461d      	mov	r5, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800847a:	4618      	mov	r0, r3
 800847c:	f7f8 f864 	bl	8000548 <__aeabi_f2d>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f7 fefe 	bl	8000288 <__aeabi_dsub>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	f7f8 fba8 	bl	8000be8 <__aeabi_d2f>
 8008498:	4602      	mov	r2, r0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80084ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f8 f843 	bl	8000548 <__aeabi_f2d>
 80084c2:	a399      	add	r3, pc, #612	; (adr r3, 8008728 <PathPlan+0x1b50>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f8 f896 	bl	80005f8 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4614      	mov	r4, r2
 80084d2:	461d      	mov	r5, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 f834 	bl	8000548 <__aeabi_f2d>
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	4b92      	ldr	r3, [pc, #584]	; (8008730 <PathPlan+0x1b58>)
 80084e6:	f7f8 f887 	bl	80005f8 <__aeabi_dmul>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4620      	mov	r0, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f7 fec9 	bl	8000288 <__aeabi_dsub>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4614      	mov	r4, r2
 80084fc:	461d      	mov	r5, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008504:	4618      	mov	r0, r3
 8008506:	f7f8 f81f 	bl	8000548 <__aeabi_f2d>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f7 febb 	bl	800028c <__adddf3>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	f7f8 fb63 	bl	8000be8 <__aeabi_d2f>
 8008522:	4602      	mov	r2, r0
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008530:	4618      	mov	r0, r3
 8008532:	f7f8 f809 	bl	8000548 <__aeabi_f2d>
 8008536:	a37c      	add	r3, pc, #496	; (adr r3, 8008728 <PathPlan+0x1b50>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f8 f85c 	bl	80005f8 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4614      	mov	r4, r2
 8008546:	461d      	mov	r5, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800854e:	4618      	mov	r0, r3
 8008550:	f7f7 fffa 	bl	8000548 <__aeabi_f2d>
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	4b75      	ldr	r3, [pc, #468]	; (8008730 <PathPlan+0x1b58>)
 800855a:	f7f8 f84d 	bl	80005f8 <__aeabi_dmul>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f7 fe91 	bl	800028c <__adddf3>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4614      	mov	r4, r2
 8008570:	461d      	mov	r5, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008578:	4618      	mov	r0, r3
 800857a:	f7f7 ffe5 	bl	8000548 <__aeabi_f2d>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f7 fe81 	bl	800028c <__adddf3>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	f7f8 fb29 	bl	8000be8 <__aeabi_d2f>
 8008596:	4602      	mov	r2, r0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80085aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 80085b4:	f001 b970 	b.w	8009898 <PathPlan+0x2cc0>
			led3 = 1;
 80085b8:	4a5e      	ldr	r2, [pc, #376]	; (8008734 <PathPlan+0x1b5c>)
 80085ba:	7853      	ldrb	r3, [r2, #1]
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	331a      	adds	r3, #26
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	ed93 7a00 	vldr	s14, [r3]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80085da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	3328      	adds	r3, #40	; 0x28
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	3304      	adds	r3, #4
 80085f4:	ed93 7a00 	vldr	s14, [r3]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80085fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	3338      	adds	r3, #56	; 0x38
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	ed93 7a00 	vldr	s14, [r3]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8008630:	eef0 7ae7 	vabs.f32	s15, s15
 8008634:	ee17 0a90 	vmov	r0, s15
 8008638:	f7f7 ff86 	bl	8000548 <__aeabi_f2d>
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8008646:	eef0 7ae7 	vabs.f32	s15, s15
 800864a:	ee17 0a90 	vmov	r0, s15
 800864e:	f7f7 ff7b 	bl	8000548 <__aeabi_f2d>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f7f7 fe17 	bl	800028c <__adddf3>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4610      	mov	r0, r2
 8008664:	4619      	mov	r1, r3
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800866e:	f7f8 f8ed 	bl	800084c <__aeabi_ddiv>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4614      	mov	r4, r2
 8008678:	461d      	mov	r5, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008680:	4618      	mov	r0, r3
 8008682:	f7f7 ff61 	bl	8000548 <__aeabi_f2d>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4620      	mov	r0, r4
 800868c:	4629      	mov	r1, r5
 800868e:	f7f8 fa25 	bl	8000adc <__aeabi_dcmplt>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d013      	beq.n	80086c0 <PathPlan+0x1ae8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 800869e:	eeb0 7ae7 	vabs.f32	s14, s15
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80086a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b0:	d506      	bpl.n	80086c0 <PathPlan+0x1ae8>
				pp->pp_lck = 1.0;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80086b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e005      	b.n	80086cc <PathPlan+0x1af4>
				pp->pp_lck = 0.0;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80086d2:	edd3 7a00 	vldr	s15, [r3]
 80086d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80086e4:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80086ee:	edd3 7a00 	vldr	s15, [r3]
 80086f2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008738 <PathPlan+0x1b60>
 80086f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fe:	d821      	bhi.n	8008744 <PathPlan+0x1b6c>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8008706:	ed93 7a00 	vldr	s14, [r3]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008710:	edd3 7a00 	vldr	s15, [r3]
 8008714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800871e:	edc3 7a00 	vstr	s15, [r3]
 8008722:	e045      	b.n	80087b0 <PathPlan+0x1bd8>
 8008724:	f3af 8000 	nop.w
 8008728:	a1cac083 	.word	0xa1cac083
 800872c:	3febb645 	.word	0x3febb645
 8008730:	3fe00000 	.word	0x3fe00000
 8008734:	40020814 	.word	0x40020814
 8008738:	42700000 	.word	0x42700000
 800873c:	dbf8b9bb 	.word	0xdbf8b9bb
 8008740:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800874a:	edd3 6a00 	vldr	s13, [r3]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008754:	ed93 7a00 	vldr	s14, [r3]
 8008758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8008762:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7f7 feea 	bl	8000548 <__aeabi_f2d>
 8008774:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f8 f9c2 	bl	8000b04 <__aeabi_dcmpge>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <PathPlan+0x1bb8>
					pp->pp_lck_enb = 1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800878e:	e003      	b.n	8008798 <PathPlan+0x1bc0>
					pp->pp_lck_enb = 0;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80087b6:	eef0 7ae7 	vabs.f32	s15, s15
 80087ba:	ee17 0a90 	vmov	r0, s15
 80087be:	f7f7 fec3 	bl	8000548 <__aeabi_f2d>
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80087cc:	eef0 7ae7 	vabs.f32	s15, s15
 80087d0:	ee17 0a90 	vmov	r0, s15
 80087d4:	f7f7 feb8 	bl	8000548 <__aeabi_f2d>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4620      	mov	r0, r4
 80087de:	4629      	mov	r1, r5
 80087e0:	f7f7 fd54 	bl	800028c <__adddf3>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4610      	mov	r0, r2
 80087ea:	4619      	mov	r1, r3
 80087ec:	f04f 0200 	mov.w	r2, #0
 80087f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087f4:	f7f8 f82a 	bl	800084c <__aeabi_ddiv>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4614      	mov	r4, r2
 80087fe:	461d      	mov	r5, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008806:	4618      	mov	r0, r3
 8008808:	f7f7 fe9e 	bl	8000548 <__aeabi_f2d>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4620      	mov	r0, r4
 8008812:	4629      	mov	r1, r5
 8008814:	f7f8 f962 	bl	8000adc <__aeabi_dcmplt>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 84a6 	beq.w	800916c <PathPlan+0x2594>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8008826:	eeb0 7ae7 	vabs.f32	s14, s15
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8008830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	f140 8498 	bpl.w	800916c <PathPlan+0x2594>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008848:	3b02      	subs	r3, #2
 800884a:	429a      	cmp	r2, r3
 800884c:	f280 8206 	bge.w	8008c5c <PathPlan+0x2084>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	3346      	adds	r3, #70	; 0x46
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	3304      	adds	r3, #4
 8008860:	edd3 7a00 	vldr	s15, [r3]
 8008864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008868:	eef4 7a47 	vcmp.f32	s15, s14
 800886c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008870:	f040 813a 	bne.w	8008ae8 <PathPlan+0x1f10>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800887a:	2b01      	cmp	r3, #1
 800887c:	f040 8476 	bne.w	800916c <PathPlan+0x2594>
							pp->point_count++; // Showing reached previous destination
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	331a      	adds	r3, #26
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	ed93 7a00 	vldr	s14, [r3]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80088a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	3328      	adds	r3, #40	; 0x28
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	3304      	adds	r3, #4
 80088c0:	ed93 7a00 	vldr	s14, [r3]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80088ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	3338      	adds	r3, #56	; 0x38
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	ed93 7a00 	vldr	s14, [r3]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80088ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	331a      	adds	r3, #26
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	ed93 7a00 	vldr	s14, [r3]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800890e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891a:	d03d      	beq.n	8008998 <PathPlan+0x1dc0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	331a      	adds	r3, #26
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	ed93 7a00 	vldr	s14, [r3]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008938:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800893c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	3384      	adds	r3, #132	; 0x84
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	3304      	adds	r3, #4
 8008954:	edd3 7a00 	vldr	s15, [r3]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008970:	4618      	mov	r0, r3
 8008972:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008976:	eeb0 3a65 	vmov.f32	s6, s11
 800897a:	eef0 2a46 	vmov.f32	s5, s12
 800897e:	eeb0 2a66 	vmov.f32	s4, s13
 8008982:	eef0 1a67 	vmov.f32	s3, s15
 8008986:	eeb0 1a47 	vmov.f32	s2, s14
 800898a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800898e:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8008c58 <PathPlan+0x2080>
 8008992:	f7fd fa59 	bl	8005e48 <PIDGainInit>
 8008996:	e028      	b.n	80089ea <PathPlan+0x1e12>
										pp->ku_x[pp->point_count],
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	3384      	adds	r3, #132	; 0x84
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	3304      	adds	r3, #4
 80089a8:	edd3 7a00 	vldr	s15, [r3]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80089c4:	4618      	mov	r0, r3
 80089c6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80089ca:	eeb0 3a46 	vmov.f32	s6, s12
 80089ce:	eef0 2a66 	vmov.f32	s5, s13
 80089d2:	eeb0 2a47 	vmov.f32	s4, s14
 80089d6:	eef0 1a67 	vmov.f32	s3, s15
 80089da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80089de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80089e2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008c58 <PathPlan+0x2080>
 80089e6:	f7fd fa2f 	bl	8005e48 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	3328      	adds	r3, #40	; 0x28
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	3304      	adds	r3, #4
 80089fa:	ed93 7a00 	vldr	s14, [r3]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a10:	d03d      	beq.n	8008a8e <PathPlan+0x1eb6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	3328      	adds	r3, #40	; 0x28
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	3304      	adds	r3, #4
 8008a22:	ed93 7a00 	vldr	s14, [r3]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a30:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	3394      	adds	r3, #148	; 0x94
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	edd3 7a00 	vldr	s15, [r3]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008a66:	4618      	mov	r0, r3
 8008a68:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008a6c:	eeb0 3a65 	vmov.f32	s6, s11
 8008a70:	eef0 2a46 	vmov.f32	s5, s12
 8008a74:	eeb0 2a66 	vmov.f32	s4, s13
 8008a78:	eef0 1a67 	vmov.f32	s3, s15
 8008a7c:	eeb0 1a47 	vmov.f32	s2, s14
 8008a80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008a84:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8008c58 <PathPlan+0x2080>
 8008a88:	f7fd f9de 	bl	8005e48 <PIDGainInit>
 8008a8c:	e027      	b.n	8008ade <PathPlan+0x1f06>
										pp->ku_y[pp->point_count],
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	3394      	adds	r3, #148	; 0x94
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	edd3 7a00 	vldr	s15, [r3]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008ab8:	4618      	mov	r0, r3
 8008aba:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008abe:	eeb0 3a46 	vmov.f32	s6, s12
 8008ac2:	eef0 2a66 	vmov.f32	s5, s13
 8008ac6:	eeb0 2a47 	vmov.f32	s4, s14
 8008aca:	eef0 1a67 	vmov.f32	s3, s15
 8008ace:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008ad2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008ad6:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8008c58 <PathPlan+0x2080>
 8008ada:	f7fd f9b5 	bl	8005e48 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008ae6:	e341      	b.n	800916c <PathPlan+0x2594>
						pp->point_count++; // Assuming reached previous point
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	331a      	adds	r3, #26
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	ed93 7a00 	vldr	s14, [r3]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	3328      	adds	r3, #40	; 0x28
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	3304      	adds	r3, #4
 8008b28:	ed93 7a00 	vldr	s14, [r3]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	3338      	adds	r3, #56	; 0x38
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	ed93 7a00 	vldr	s14, [r3]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	edd3 7a04 	vldr	s15, [r3, #16]
 8008b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	331a      	adds	r3, #26
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	ed93 7a00 	vldr	s14, [r3]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b82:	d01d      	beq.n	8008bc0 <PathPlan+0x1fe8>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	331a      	adds	r3, #26
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	ed93 7a00 	vldr	s14, [r3]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ba0:	eef0 7ae7 	vabs.f32	s15, s15
 8008ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8008bb8:	2002      	movs	r0, #2
 8008bba:	f7fd f978 	bl	8005eae <PIDGainSet>
 8008bbe:	e008      	b.n	8008bd2 <PathPlan+0x1ffa>
							PIDGainSet(KE,1.0,&(pp->x));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008bcc:	2002      	movs	r0, #2
 8008bce:	f7fd f96e 	bl	8005eae <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	3328      	adds	r3, #40	; 0x28
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	3304      	adds	r3, #4
 8008be2:	ed93 7a00 	vldr	s14, [r3]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	d01e      	beq.n	8008c38 <PathPlan+0x2060>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	3328      	adds	r3, #40	; 0x28
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	3304      	adds	r3, #4
 8008c0a:	ed93 7a00 	vldr	s14, [r3]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c18:	eef0 7ae7 	vabs.f32	s15, s15
 8008c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8008c30:	2002      	movs	r0, #2
 8008c32:	f7fd f93c 	bl	8005eae <PIDGainSet>
 8008c36:	e299      	b.n	800916c <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008c3e:	4619      	mov	r1, r3
 8008c40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c44:	2002      	movs	r0, #2
 8008c46:	f7fd f932 	bl	8005eae <PIDGainSet>
 8008c4a:	e28f      	b.n	800916c <PathPlan+0x2594>
 8008c4c:	f3af 8000 	nop.w
 8008c50:	66666666 	.word	0x66666666
 8008c54:	3fee6666 	.word	0x3fee6666
 8008c58:	3ba3d70a 	.word	0x3ba3d70a
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c68:	3b02      	subs	r3, #2
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	f040 81fe 	bne.w	800906c <PathPlan+0x2494>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	3346      	adds	r3, #70	; 0x46
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3304      	adds	r3, #4
 8008c80:	edd3 7a00 	vldr	s15, [r3]
 8008c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c88:	eef4 7a47 	vcmp.f32	s15, s14
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	f040 813a 	bne.w	8008f08 <PathPlan+0x2330>
						if(pp->pp_lck_enb == 1){
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	f040 8266 	bne.w	800916c <PathPlan+0x2594>
							pp->point_count++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	331a      	adds	r3, #26
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	ed93 7a00 	vldr	s14, [r3]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	3328      	adds	r3, #40	; 0x28
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	3304      	adds	r3, #4
 8008ce0:	ed93 7a00 	vldr	s14, [r3]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	3338      	adds	r3, #56	; 0x38
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	ed93 7a00 	vldr	s14, [r3]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	331a      	adds	r3, #26
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	ed93 7a00 	vldr	s14, [r3]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	d03d      	beq.n	8008db8 <PathPlan+0x21e0>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	331a      	adds	r3, #26
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	ed93 7a00 	vldr	s14, [r3]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d58:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	3384      	adds	r3, #132	; 0x84
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	3304      	adds	r3, #4
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008d90:	4618      	mov	r0, r3
 8008d92:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008d96:	eeb0 3a65 	vmov.f32	s6, s11
 8008d9a:	eef0 2a46 	vmov.f32	s5, s12
 8008d9e:	eeb0 2a66 	vmov.f32	s4, s13
 8008da2:	eef0 1a67 	vmov.f32	s3, s15
 8008da6:	eeb0 1a47 	vmov.f32	s2, s14
 8008daa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008dae:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8008c58 <PathPlan+0x2080>
 8008db2:	f7fd f849 	bl	8005e48 <PIDGainInit>
 8008db6:	e028      	b.n	8008e0a <PathPlan+0x2232>
										pp->ku_x[pp->point_count],
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	3384      	adds	r3, #132	; 0x84
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	edd3 7a00 	vldr	s15, [r3]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008de4:	4618      	mov	r0, r3
 8008de6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008dea:	eeb0 3a46 	vmov.f32	s6, s12
 8008dee:	eef0 2a66 	vmov.f32	s5, s13
 8008df2:	eeb0 2a47 	vmov.f32	s4, s14
 8008df6:	eef0 1a67 	vmov.f32	s3, s15
 8008dfa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008dfe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008e02:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8008c58 <PathPlan+0x2080>
 8008e06:	f7fd f81f 	bl	8005e48 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	3328      	adds	r3, #40	; 0x28
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	3304      	adds	r3, #4
 8008e1a:	ed93 7a00 	vldr	s14, [r3]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e30:	d03d      	beq.n	8008eae <PathPlan+0x22d6>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	3328      	adds	r3, #40	; 0x28
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	3304      	adds	r3, #4
 8008e42:	ed93 7a00 	vldr	s14, [r3]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e50:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	3394      	adds	r3, #148	; 0x94
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	edd3 7a00 	vldr	s15, [r3]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008e86:	4618      	mov	r0, r3
 8008e88:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008e8c:	eeb0 3a65 	vmov.f32	s6, s11
 8008e90:	eef0 2a46 	vmov.f32	s5, s12
 8008e94:	eeb0 2a66 	vmov.f32	s4, s13
 8008e98:	eef0 1a67 	vmov.f32	s3, s15
 8008e9c:	eeb0 1a47 	vmov.f32	s2, s14
 8008ea0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008ea4:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8008c58 <PathPlan+0x2080>
 8008ea8:	f7fc ffce 	bl	8005e48 <PIDGainInit>
 8008eac:	e027      	b.n	8008efe <PathPlan+0x2326>
										pp->ku_y[pp->point_count],
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	3394      	adds	r3, #148	; 0x94
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	edd3 7a00 	vldr	s15, [r3]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8008ed8:	4618      	mov	r0, r3
 8008eda:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008ede:	eeb0 3a46 	vmov.f32	s6, s12
 8008ee2:	eef0 2a66 	vmov.f32	s5, s13
 8008ee6:	eeb0 2a47 	vmov.f32	s4, s14
 8008eea:	eef0 1a67 	vmov.f32	s3, s15
 8008eee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008ef2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008ef6:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8008c58 <PathPlan+0x2080>
 8008efa:	f7fc ffa5 	bl	8005e48 <PIDGainInit>
							pp->pp_lck_enb = 0;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8008f06:	e131      	b.n	800916c <PathPlan+0x2594>
						pp->point_count++;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	331a      	adds	r3, #26
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	ed93 7a00 	vldr	s14, [r3]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	3328      	adds	r3, #40	; 0x28
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	3304      	adds	r3, #4
 8008f48:	ed93 7a00 	vldr	s14, [r3]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	3338      	adds	r3, #56	; 0x38
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	ed93 7a00 	vldr	s14, [r3]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	331a      	adds	r3, #26
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	ed93 7a00 	vldr	s14, [r3]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	d01d      	beq.n	8008fe0 <PathPlan+0x2408>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	331a      	adds	r3, #26
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	ed93 7a00 	vldr	s14, [r3]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fc0:	eef0 7ae7 	vabs.f32	s15, s15
 8008fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8008fd8:	2002      	movs	r0, #2
 8008fda:	f7fc ff68 	bl	8005eae <PIDGainSet>
 8008fde:	e008      	b.n	8008ff2 <PathPlan+0x241a>
							PIDGainSet(KE,1.0,&(pp->x));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008fec:	2002      	movs	r0, #2
 8008fee:	f7fc ff5e 	bl	8005eae <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	3328      	adds	r3, #40	; 0x28
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	3304      	adds	r3, #4
 8009002:	ed93 7a00 	vldr	s14, [r3]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800900c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009010:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	d01e      	beq.n	8009058 <PathPlan+0x2480>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	3328      	adds	r3, #40	; 0x28
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	3304      	adds	r3, #4
 800902a:	ed93 7a00 	vldr	s14, [r3]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8009034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009038:	eef0 7ae7 	vabs.f32	s15, s15
 800903c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800904a:	4619      	mov	r1, r3
 800904c:	eeb0 0a47 	vmov.f32	s0, s14
 8009050:	2002      	movs	r0, #2
 8009052:	f7fc ff2c 	bl	8005eae <PIDGainSet>
 8009056:	e089      	b.n	800916c <PathPlan+0x2594>
							PIDGainSet(KE,1.0,&(pp->y));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800905e:	4619      	mov	r1, r3
 8009060:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009064:	2002      	movs	r0, #2
 8009066:	f7fc ff22 	bl	8005eae <PIDGainSet>
 800906a:	e07f      	b.n	800916c <PathPlan+0x2594>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){ // Reached last point
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8009072:	eeb0 7ae7 	vabs.f32	s14, s15
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 800907c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009084:	d572      	bpl.n	800916c <PathPlan+0x2594>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 800908c:	eeb0 7ae7 	vabs.f32	s14, s15
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8009096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d565      	bpl.n	800916c <PathPlan+0x2594>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80090a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80090b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090bc:	d856      	bhi.n	800916c <PathPlan+0x2594>
					if(pp->target_accurate[pp->point_count] == 1.0){
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	3346      	adds	r3, #70	; 0x46
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	3304      	adds	r3, #4
 80090ce:	edd3 7a00 	vldr	s15, [r3]
 80090d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090d6:	eef4 7a47 	vcmp.f32	s15, s14
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	d127      	bne.n	8009130 <PathPlan+0x2558>
						if(pp->pp_lck_enb == 1){
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d140      	bne.n	800916c <PathPlan+0x2594>
							led3 = 0;
 80090ea:	4a7d      	ldr	r2, [pc, #500]	; (80092e0 <PathPlan+0x2708>)
 80090ec:	7853      	ldrb	r3, [r2, #1]
 80090ee:	f36f 13c7 	bfc	r3, #7, #1
 80090f2:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fd f829 	bl	8006152 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8009106:	4618      	mov	r0, r3
 8009108:	f7fd f823 	bl	8006152 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd f81d 	bl	8006152 <PIDDelayInit>
							pp->pp_start=0;
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800911e:	f36f 0300 	bfc	r3, #0, #1
 8009122:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800912e:	e01d      	b.n	800916c <PathPlan+0x2594>
						led3 = 0;
 8009130:	4a6b      	ldr	r2, [pc, #428]	; (80092e0 <PathPlan+0x2708>)
 8009132:	7853      	ldrb	r3, [r2, #1]
 8009134:	f36f 13c7 	bfc	r3, #7, #1
 8009138:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8009140:	4618      	mov	r0, r3
 8009142:	f7fd f806 	bl	8006152 <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd f800 	bl	8006152 <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8009158:	4618      	mov	r0, r3
 800915a:	f7fc fffa 	bl	8006152 <PIDDelayInit>
						pp->pp_start=0;
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8009164:	f36f 0300 	bfc	r3, #0, #1
 8009168:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 838d 	beq.w	8009898 <PathPlan+0x2cc0>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	331a      	adds	r3, #26
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	ed93 7a00 	vldr	s14, [r3]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	3328      	adds	r3, #40	; 0x28
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	3304      	adds	r3, #4
 80091b0:	ed93 7a00 	vldr	s14, [r3]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80091ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80091ca:	f36f 03c3 	bfc	r3, #3, #1
 80091ce:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80091d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e0:	d107      	bne.n	80091f2 <PathPlan+0x261a>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80091e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f0:	d021      	beq.n	8009236 <PathPlan+0x265e>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80091f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009200:	d107      	bne.n	8009212 <PathPlan+0x263a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009208:	eef5 7a40 	vcmp.f32	s15, #0.0
 800920c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009210:	d011      	beq.n	8009236 <PathPlan+0x265e>
					pp->heading = atan2f(pp->dy, pp->dx);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800921e:	eef0 0a47 	vmov.f32	s1, s14
 8009222:	eeb0 0a67 	vmov.f32	s0, s15
 8009226:	f014 fd61 	bl	801dcec <atan2f>
 800922a:	eef0 7a40 	vmov.f32	s15, s0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8009234:	e075      	b.n	8009322 <PathPlan+0x274a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800923c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009244:	d007      	beq.n	8009256 <PathPlan+0x267e>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800924c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009254:	d10b      	bne.n	800926e <PathPlan+0x2696>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800925c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009264:	d503      	bpl.n	800926e <PathPlan+0x2696>
						pp->heading = -1.5708;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <PathPlan+0x270c>)
 800926a:	65da      	str	r2, [r3, #92]	; 0x5c
 800926c:	e059      	b.n	8009322 <PathPlan+0x274a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927c:	d007      	beq.n	800928e <PathPlan+0x26b6>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928c:	d10b      	bne.n	80092a6 <PathPlan+0x26ce>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	dd03      	ble.n	80092a6 <PathPlan+0x26ce>
						pp->heading = 1.5708;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a11      	ldr	r2, [pc, #68]	; (80092e8 <PathPlan+0x2710>)
 80092a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80092a4:	e03d      	b.n	8009322 <PathPlan+0x274a>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80092ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d007      	beq.n	80092c6 <PathPlan+0x26ee>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80092bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c4:	d112      	bne.n	80092ec <PathPlan+0x2714>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80092cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d4:	dd0a      	ble.n	80092ec <PathPlan+0x2714>
						pp->heading = 0.0;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f04f 0200 	mov.w	r2, #0
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80092de:	e020      	b.n	8009322 <PathPlan+0x274a>
 80092e0:	40020814 	.word	0x40020814
 80092e4:	bfc90ff9 	.word	0xbfc90ff9
 80092e8:	3fc90ff9 	.word	0x3fc90ff9
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80092f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fa:	d007      	beq.n	800930c <PathPlan+0x2734>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	d10a      	bne.n	8009322 <PathPlan+0x274a>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931a:	d502      	bpl.n	8009322 <PathPlan+0x274a>
						pp->heading = M_PI;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4ad6      	ldr	r2, [pc, #856]	; (8009678 <PathPlan+0x2aa0>)
 8009320:	65da      	str	r2, [r3, #92]	; 0x5c
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	3374      	adds	r3, #116	; 0x74
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	ed93 8a00 	vldr	s16, [r3]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800933a:	eeb0 0a67 	vmov.f32	s0, s15
 800933e:	f014 fc4b 	bl	801dbd8 <cosf>
 8009342:	eef0 7a40 	vmov.f32	s15, s0
 8009346:	ee68 7a27 	vmul.f32	s15, s16, s15
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	3374      	adds	r3, #116	; 0x74
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	ed93 8a00 	vldr	s16, [r3]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009368:	eeb0 0a67 	vmov.f32	s0, s15
 800936c:	f014 fc7c 	bl	801dc68 <sinf>
 8009370:	eef0 7a40 	vmov.f32	s15, s0
 8009374:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8009384:	f003 0308 	and.w	r3, r3, #8
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <PathPlan+0x27c6>
					pp->vx = pp->vy = 0.0;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	665a      	str	r2, [r3, #100]	; 0x64
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fc fef2 	bl	800618e <PID>
				PID(&(pp->y));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fc feec 	bl	800618e <PID>
				PID(&(pp->z));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fc fee6 	bl	800618e <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80093ce:	eeb0 0a67 	vmov.f32	s0, s15
 80093d2:	f014 fc01 	bl	801dbd8 <cosf>
 80093d6:	eef0 7a40 	vmov.f32	s15, s0
 80093da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80093ea:	eeb0 0a67 	vmov.f32	s0, s15
 80093ee:	f014 fc3b 	bl	801dc68 <sinf>
 80093f2:	eef0 7a40 	vmov.f32	s15, s0
 80093f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80093fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	edd3 7a06 	vldr	s15, [r3, #24]
 8009410:	eeb0 0a67 	vmov.f32	s0, s15
 8009414:	f014 fc28 	bl	801dc68 <sinf>
 8009418:	eef0 7a40 	vmov.f32	s15, s0
 800941c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	edd3 7a06 	vldr	s15, [r3, #24]
 800942c:	eeb0 0a67 	vmov.f32	s0, s15
 8009430:	f014 fbd2 	bl	801dbd8 <cosf>
 8009434:	eef0 7a40 	vmov.f32	s15, s0
 8009438:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800943c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	edd3 7a06 	vldr	s15, [r3, #24]
 8009452:	eeb0 0a67 	vmov.f32	s0, s15
 8009456:	f014 fbbf 	bl	801dbd8 <cosf>
 800945a:	eef0 7a40 	vmov.f32	s15, s0
 800945e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	edd3 7a06 	vldr	s15, [r3, #24]
 800946e:	eeb0 0a67 	vmov.f32	s0, s15
 8009472:	f014 fbf9 	bl	801dc68 <sinf>
 8009476:	eef0 7a40 	vmov.f32	s15, s0
 800947a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800947e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	edd3 7a06 	vldr	s15, [r3, #24]
 8009494:	eeb0 0a67 	vmov.f32	s0, s15
 8009498:	f014 fbe6 	bl	801dc68 <sinf>
 800949c:	eef0 7a40 	vmov.f32	s15, s0
 80094a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80094b0:	eeb0 0a67 	vmov.f32	s0, s15
 80094b4:	f014 fb90 	bl	801dbd8 <cosf>
 80094b8:	eef0 7a40 	vmov.f32	s15, s0
 80094bc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80094c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	f040 80dd 	bne.w	8009690 <PathPlan+0x2ab8>
					pp->u1 = (pp->outz * 1.0);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = -pp->outz * 1.0;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80094e8:	eef1 7a67 	vneg.f32	s15, s15
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->u3 = (pp->outz * 1.0);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 22c4 	ldr.w	r2, [r3, #708]	; 0x2c4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = -(pp->outz * 1.0);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009504:	4618      	mov	r0, r3
 8009506:	f7f7 f81f 	bl	8000548 <__aeabi_f2d>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4610      	mov	r0, r2
 8009510:	4619      	mov	r1, r3
 8009512:	f7f7 fb69 	bl	8000be8 <__aeabi_d2f>
 8009516:	4603      	mov	r3, r0
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef1 7a67 	vneg.f32	s15, s15
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8009532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009536:	ee17 0a90 	vmov	r0, s15
 800953a:	f7f7 f805 	bl	8000548 <__aeabi_f2d>
 800953e:	a34c      	add	r3, pc, #304	; (adr r3, 8009670 <PathPlan+0x2a98>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4614      	mov	r4, r2
 800954e:	461d      	mov	r5, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009556:	4618      	mov	r0, r3
 8009558:	f7f6 fff6 	bl	8000548 <__aeabi_f2d>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4610      	mov	r0, r2
 800956e:	4619      	mov	r1, r3
 8009570:	f7f7 fb3a 	bl	8000be8 <__aeabi_d2f>
 8009574:	4602      	mov	r2, r0
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8009588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800958c:	ee17 0a90 	vmov	r0, s15
 8009590:	f7f6 ffda 	bl	8000548 <__aeabi_f2d>
 8009594:	a336      	add	r3, pc, #216	; (adr r3, 8009670 <PathPlan+0x2a98>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f7 f82d 	bl	80005f8 <__aeabi_dmul>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4614      	mov	r4, r2
 80095a4:	461d      	mov	r5, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7f6 ffcb 	bl	8000548 <__aeabi_f2d>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f6 fe67 	bl	800028c <__adddf3>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	f7f7 fb0f 	bl	8000be8 <__aeabi_d2f>
 80095ca:	4602      	mov	r2, r0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80095de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095e2:	ee17 0a90 	vmov	r0, s15
 80095e6:	f7f6 ffaf 	bl	8000548 <__aeabi_f2d>
 80095ea:	a321      	add	r3, pc, #132	; (adr r3, 8009670 <PathPlan+0x2a98>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4614      	mov	r4, r2
 80095fa:	461d      	mov	r5, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8009602:	4618      	mov	r0, r3
 8009604:	f7f6 ffa0 	bl	8000548 <__aeabi_f2d>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fe3c 	bl	800028c <__adddf3>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4610      	mov	r0, r2
 800961a:	4619      	mov	r1, r3
 800961c:	f7f7 fae4 	bl	8000be8 <__aeabi_d2f>
 8009620:	4602      	mov	r2, r0
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8009634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009638:	ee17 0a90 	vmov	r0, s15
 800963c:	f7f6 ff84 	bl	8000548 <__aeabi_f2d>
 8009640:	a30b      	add	r3, pc, #44	; (adr r3, 8009670 <PathPlan+0x2a98>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4614      	mov	r4, r2
 8009650:	461d      	mov	r5, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8009658:	4618      	mov	r0, r3
 800965a:	f7f6 ff75 	bl	8000548 <__aeabi_f2d>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	f7f6 fe11 	bl	800028c <__adddf3>
 800966a:	4602      	mov	r2, r0
 800966c:	e006      	b.n	800967c <PathPlan+0x2aa4>
 800966e:	bf00      	nop
 8009670:	dbf8b9bb 	.word	0xdbf8b9bb
 8009674:	3fe6a09e 	.word	0x3fe6a09e
 8009678:	40490fdb 	.word	0x40490fdb
 800967c:	460b      	mov	r3, r1
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	f7f7 fab1 	bl	8000be8 <__aeabi_d2f>
 8009686:	4602      	mov	r2, r0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 800968e:	e103      	b.n	8009898 <PathPlan+0x2cc0>
				} else if(pp->base_shape== 1){
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8009696:	2b01      	cmp	r3, #1
 8009698:	f040 80fe 	bne.w	8009898 <PathPlan+0x2cc0>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f6 ff50 	bl	8000548 <__aeabi_f2d>
 80096a8:	a37f      	add	r3, pc, #508	; (adr r3, 80098a8 <PathPlan+0x2cd0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4614      	mov	r4, r2
 80096b8:	461d      	mov	r5, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7f6 ff41 	bl	8000548 <__aeabi_f2d>
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	4b79      	ldr	r3, [pc, #484]	; (80098b0 <PathPlan+0x2cd8>)
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fdd6 	bl	8000288 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	461d      	mov	r5, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f6 ff2c 	bl	8000548 <__aeabi_f2d>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 fdc8 	bl	800028c <__adddf3>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4610      	mov	r0, r2
 8009702:	4619      	mov	r1, r3
 8009704:	f7f7 fa70 	bl	8000be8 <__aeabi_d2f>
 8009708:	4602      	mov	r2, r0
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009716:	4618      	mov	r0, r3
 8009718:	f7f6 ff16 	bl	8000548 <__aeabi_f2d>
 800971c:	a362      	add	r3, pc, #392	; (adr r3, 80098a8 <PathPlan+0x2cd0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4614      	mov	r4, r2
 800972c:	461d      	mov	r5, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009734:	4618      	mov	r0, r3
 8009736:	f7f6 ff07 	bl	8000548 <__aeabi_f2d>
 800973a:	f04f 0200 	mov.w	r2, #0
 800973e:	4b5c      	ldr	r3, [pc, #368]	; (80098b0 <PathPlan+0x2cd8>)
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f6 fd9e 	bl	800028c <__adddf3>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4614      	mov	r4, r2
 8009756:	461d      	mov	r5, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800975e:	4618      	mov	r0, r3
 8009760:	f7f6 fef2 	bl	8000548 <__aeabi_f2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4620      	mov	r0, r4
 800976a:	4629      	mov	r1, r5
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4610      	mov	r0, r2
 8009776:	4619      	mov	r1, r3
 8009778:	f7f7 fa36 	bl	8000be8 <__aeabi_d2f>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8009790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7f6 fed1 	bl	8000548 <__aeabi_f2d>
 80097a6:	a340      	add	r3, pc, #256	; (adr r3, 80098a8 <PathPlan+0x2cd0>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 ff24 	bl	80005f8 <__aeabi_dmul>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	461d      	mov	r5, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f6 fec2 	bl	8000548 <__aeabi_f2d>
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	4b39      	ldr	r3, [pc, #228]	; (80098b0 <PathPlan+0x2cd8>)
 80097ca:	f7f6 ff15 	bl	80005f8 <__aeabi_dmul>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f6 fd57 	bl	8000288 <__aeabi_dsub>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4614      	mov	r4, r2
 80097e0:	461d      	mov	r5, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7f6 fead 	bl	8000548 <__aeabi_f2d>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7f6 fd49 	bl	800028c <__adddf3>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4610      	mov	r0, r2
 8009800:	4619      	mov	r1, r3
 8009802:	f7f7 f9f1 	bl	8000be8 <__aeabi_d2f>
 8009806:	4602      	mov	r2, r0
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009814:	4618      	mov	r0, r3
 8009816:	f7f6 fe97 	bl	8000548 <__aeabi_f2d>
 800981a:	a323      	add	r3, pc, #140	; (adr r3, 80098a8 <PathPlan+0x2cd0>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4614      	mov	r4, r2
 800982a:	461d      	mov	r5, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009832:	4618      	mov	r0, r3
 8009834:	f7f6 fe88 	bl	8000548 <__aeabi_f2d>
 8009838:	f04f 0200 	mov.w	r2, #0
 800983c:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <PathPlan+0x2cd8>)
 800983e:	f7f6 fedb 	bl	80005f8 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f6 fd1f 	bl	800028c <__adddf3>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4614      	mov	r4, r2
 8009854:	461d      	mov	r5, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800985c:	4618      	mov	r0, r3
 800985e:	f7f6 fe73 	bl	8000548 <__aeabi_f2d>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f6 fd0f 	bl	800028c <__adddf3>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4610      	mov	r0, r2
 8009874:	4619      	mov	r1, r3
 8009876:	f7f7 f9b7 	bl	8000be8 <__aeabi_d2f>
 800987a:	4602      	mov	r2, r0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800988e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	ecbd 8b02 	vpop	{d8}
 80098a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80098a6:	bf00      	nop
 80098a8:	a1cac083 	.word	0xa1cac083
 80098ac:	3febb645 	.word	0x3febb645
 80098b0:	3fe00000 	.word	0x3fe00000

080098b4 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	230b      	movs	r3, #11
 80098c6:	2188      	movs	r1, #136	; 0x88
 80098c8:	f008 f916 	bl	8011af8 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f81e 	bl	800990e <PSx_HandlerI2C>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	230b      	movs	r3, #11
 80098f4:	2188      	movs	r1, #136	; 0x88
 80098f6:	f008 f8ff 	bl	8011af8 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	789a      	ldrb	r2, [r3, #2]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	78da      	ldrb	r2, [r3, #3]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	795b      	ldrb	r3, [r3, #5]
 8009938:	461a      	mov	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	799b      	ldrb	r3, [r3, #6]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	79db      	ldrb	r3, [r3, #7]
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	7a1b      	ldrb	r3, [r3, #8]
 8009956:	461a      	mov	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	7a5b      	ldrb	r3, [r3, #9]
 8009960:	461a      	mov	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7a9a      	ldrb	r2, [r3, #10]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7ada      	ldrb	r2, [r3, #11]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f804 	bl	8009988 <PSxBTGetXY>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	ee07 3a90 	vmov	s15, r3
 8009998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999c:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8009ca0 <PSxBTGetXY+0x318>
 80099a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	d53e      	bpl.n	8009a28 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	ee17 0a90 	vmov	r0, s15
 80099ba:	f7f6 fdc5 	bl	8000548 <__aeabi_f2d>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	a1b5      	add	r1, pc, #724	; (adr r1, 8009c98 <PSxBTGetXY+0x310>)
 80099c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c8:	f7f6 fc5e 	bl	8000288 <__aeabi_dsub>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4610      	mov	r0, r2
 80099d2:	4619      	mov	r1, r3
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	4bb2      	ldr	r3, [pc, #712]	; (8009ca4 <PSxBTGetXY+0x31c>)
 80099da:	f7f6 ff37 	bl	800084c <__aeabi_ddiv>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4610      	mov	r0, r2
 80099e4:	4619      	mov	r1, r3
 80099e6:	f7f7 f8ff 	bl	8000be8 <__aeabi_d2f>
 80099ea:	4602      	mov	r2, r0
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80099f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fe:	d504      	bpl.n	8009a0a <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	64da      	str	r2, [r3, #76]	; 0x4c
 8009a08:	e05d      	b.n	8009ac6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1c:	dd53      	ble.n	8009ac6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8009a26:	e04e      	b.n	8009ac6 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8009cb0 <PSxBTGetXY+0x328>
 8009a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a40:	dd3d      	ble.n	8009abe <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4e:	ee17 0a90 	vmov	r0, s15
 8009a52:	f7f6 fd79 	bl	8000548 <__aeabi_f2d>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	f04f 0000 	mov.w	r0, #0
 8009a5e:	4992      	ldr	r1, [pc, #584]	; (8009ca8 <PSxBTGetXY+0x320>)
 8009a60:	f7f6 fc12 	bl	8000288 <__aeabi_dsub>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	4b8c      	ldr	r3, [pc, #560]	; (8009ca4 <PSxBTGetXY+0x31c>)
 8009a72:	f7f6 feeb 	bl	800084c <__aeabi_ddiv>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7f7 f8b3 	bl	8000be8 <__aeabi_d2f>
 8009a82:	4602      	mov	r2, r0
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	dd04      	ble.n	8009aa2 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009aa0:	e011      	b.n	8009ac6 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009aa8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab4:	d507      	bpl.n	8009ac6 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a7c      	ldr	r2, [pc, #496]	; (8009cac <PSxBTGetXY+0x324>)
 8009aba:	64da      	str	r2, [r3, #76]	; 0x4c
 8009abc:	e003      	b.n	8009ac6 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f04f 0200 	mov.w	r2, #0
 8009ac4:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009ca0 <PSxBTGetXY+0x318>
 8009ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ade:	d53e      	bpl.n	8009b5e <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aec:	ee17 0a90 	vmov	r0, s15
 8009af0:	f7f6 fd2a 	bl	8000548 <__aeabi_f2d>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	a167      	add	r1, pc, #412	; (adr r1, 8009c98 <PSxBTGetXY+0x310>)
 8009afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009afe:	f7f6 fbc3 	bl	8000288 <__aeabi_dsub>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4610      	mov	r0, r2
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	4b65      	ldr	r3, [pc, #404]	; (8009ca4 <PSxBTGetXY+0x31c>)
 8009b10:	f7f6 fe9c 	bl	800084c <__aeabi_ddiv>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f7f7 f864 	bl	8000be8 <__aeabi_d2f>
 8009b20:	4602      	mov	r2, r0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b34:	d504      	bpl.n	8009b40 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	651a      	str	r2, [r3, #80]	; 0x50
 8009b3e:	e05d      	b.n	8009bfc <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	dd53      	ble.n	8009bfc <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009b5a:	651a      	str	r2, [r3, #80]	; 0x50
 8009b5c:	e04e      	b.n	8009bfc <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8009cb0 <PSxBTGetXY+0x328>
 8009b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b76:	dd3d      	ble.n	8009bf4 <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	ee07 3a90 	vmov	s15, r3
 8009b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b84:	ee17 0a90 	vmov	r0, s15
 8009b88:	f7f6 fcde 	bl	8000548 <__aeabi_f2d>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f04f 0000 	mov.w	r0, #0
 8009b94:	4944      	ldr	r1, [pc, #272]	; (8009ca8 <PSxBTGetXY+0x320>)
 8009b96:	f7f6 fb77 	bl	8000288 <__aeabi_dsub>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	4b3f      	ldr	r3, [pc, #252]	; (8009ca4 <PSxBTGetXY+0x31c>)
 8009ba8:	f7f6 fe50 	bl	800084c <__aeabi_ddiv>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	f7f7 f818 	bl	8000be8 <__aeabi_d2f>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	dd04      	ble.n	8009bd8 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f04f 0200 	mov.w	r2, #0
 8009bd4:	651a      	str	r2, [r3, #80]	; 0x50
 8009bd6:	e011      	b.n	8009bfc <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009bde:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bea:	d507      	bpl.n	8009bfc <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a2f      	ldr	r2, [pc, #188]	; (8009cac <PSxBTGetXY+0x324>)
 8009bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8009bf2:	e003      	b.n	8009bfc <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c08:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009ca0 <PSxBTGetXY+0x318>
 8009c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c14:	d54e      	bpl.n	8009cb4 <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	ee17 0a90 	vmov	r0, s15
 8009c26:	f7f6 fc8f 	bl	8000548 <__aeabi_f2d>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	a11a      	add	r1, pc, #104	; (adr r1, 8009c98 <PSxBTGetXY+0x310>)
 8009c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c34:	f7f6 fb28 	bl	8000288 <__aeabi_dsub>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <PSxBTGetXY+0x31c>)
 8009c46:	f7f6 fe01 	bl	800084c <__aeabi_ddiv>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7f6 ffc9 	bl	8000be8 <__aeabi_d2f>
 8009c56:	4602      	mov	r2, r0
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6a:	d504      	bpl.n	8009c76 <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	655a      	str	r2, [r3, #84]	; 0x54
 8009c74:	e06d      	b.n	8009d52 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	dd63      	ble.n	8009d52 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009c90:	655a      	str	r2, [r3, #84]	; 0x54
 8009c92:	e05e      	b.n	8009d52 <PSxBTGetXY+0x3ca>
 8009c94:	f3af 8000 	nop.w
 8009c98:	00000000 	.word	0x00000000
 8009c9c:	405cc000 	.word	0x405cc000
 8009ca0:	42e60000 	.word	0x42e60000
 8009ca4:	40590000 	.word	0x40590000
 8009ca8:	40618000 	.word	0x40618000
 8009cac:	bf800000 	.word	0xbf800000
 8009cb0:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	ee07 3a90 	vmov	s15, r3
 8009cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009cb0 <PSxBTGetXY+0x328>
 8009cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ccc:	dd3d      	ble.n	8009d4a <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cda:	ee17 0a90 	vmov	r0, s15
 8009cde:	f7f6 fc33 	bl	8000548 <__aeabi_f2d>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	f04f 0000 	mov.w	r0, #0
 8009cea:	4981      	ldr	r1, [pc, #516]	; (8009ef0 <PSxBTGetXY+0x568>)
 8009cec:	f7f6 facc 	bl	8000288 <__aeabi_dsub>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	4b7d      	ldr	r3, [pc, #500]	; (8009ef4 <PSxBTGetXY+0x56c>)
 8009cfe:	f7f6 fda5 	bl	800084c <__aeabi_ddiv>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4610      	mov	r0, r2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	f7f6 ff6d 	bl	8000be8 <__aeabi_d2f>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d22:	dd04      	ble.n	8009d2e <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
 8009d2c:	e011      	b.n	8009d52 <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009d34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d40:	d507      	bpl.n	8009d52 <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a6c      	ldr	r2, [pc, #432]	; (8009ef8 <PSxBTGetXY+0x570>)
 8009d46:	655a      	str	r2, [r3, #84]	; 0x54
 8009d48:	e003      	b.n	8009d52 <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009efc <PSxBTGetXY+0x574>
 8009d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	d53e      	bpl.n	8009dea <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d78:	ee17 0a90 	vmov	r0, s15
 8009d7c:	f7f6 fbe4 	bl	8000548 <__aeabi_f2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	a156      	add	r1, pc, #344	; (adr r1, 8009ee0 <PSxBTGetXY+0x558>)
 8009d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d8a:	f7f6 fa7d 	bl	8000288 <__aeabi_dsub>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4610      	mov	r0, r2
 8009d94:	4619      	mov	r1, r3
 8009d96:	f04f 0200 	mov.w	r2, #0
 8009d9a:	4b56      	ldr	r3, [pc, #344]	; (8009ef4 <PSxBTGetXY+0x56c>)
 8009d9c:	f7f6 fd56 	bl	800084c <__aeabi_ddiv>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	f7f6 ff1e 	bl	8000be8 <__aeabi_d2f>
 8009dac:	4602      	mov	r2, r0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc0:	d504      	bpl.n	8009dcc <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8009dca:	e05d      	b.n	8009e88 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dde:	dd53      	ble.n	8009e88 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009de6:	659a      	str	r2, [r3, #88]	; 0x58
 8009de8:	e04e      	b.n	8009e88 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009f00 <PSxBTGetXY+0x578>
 8009dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e02:	dd3d      	ble.n	8009e80 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e10:	ee17 0a90 	vmov	r0, s15
 8009e14:	f7f6 fb98 	bl	8000548 <__aeabi_f2d>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	f04f 0000 	mov.w	r0, #0
 8009e20:	4933      	ldr	r1, [pc, #204]	; (8009ef0 <PSxBTGetXY+0x568>)
 8009e22:	f7f6 fa31 	bl	8000288 <__aeabi_dsub>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	4b30      	ldr	r3, [pc, #192]	; (8009ef4 <PSxBTGetXY+0x56c>)
 8009e34:	f7f6 fd0a 	bl	800084c <__aeabi_ddiv>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f7f6 fed2 	bl	8000be8 <__aeabi_d2f>
 8009e44:	4602      	mov	r2, r0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e58:	dd04      	ble.n	8009e64 <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	659a      	str	r2, [r3, #88]	; 0x58
 8009e62:	e011      	b.n	8009e88 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009e6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e76:	d507      	bpl.n	8009e88 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <PSxBTGetXY+0x570>)
 8009e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8009e7e:	e003      	b.n	8009e88 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f04f 0200 	mov.w	r2, #0
 8009e86:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f6 fb39 	bl	8000504 <__aeabi_ui2d>
 8009e92:	a315      	add	r3, pc, #84	; (adr r3, 8009ee8 <PSxBTGetXY+0x560>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fcd8 	bl	800084c <__aeabi_ddiv>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f7f6 fea0 	bl	8000be8 <__aeabi_d2f>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7f6 fb26 	bl	8000504 <__aeabi_ui2d>
 8009eb8:	a30b      	add	r3, pc, #44	; (adr r3, 8009ee8 <PSxBTGetXY+0x560>)
 8009eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebe:	f7f6 fcc5 	bl	800084c <__aeabi_ddiv>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f7f6 fe8d 	bl	8000be8 <__aeabi_d2f>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	f3af 8000 	nop.w
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	405cc000 	.word	0x405cc000
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	406fe000 	.word	0x406fe000
 8009ef0:	40618000 	.word	0x40618000
 8009ef4:	40590000 	.word	0x40590000
 8009ef8:	bf800000 	.word	0xbf800000
 8009efc:	42e60000 	.word	0x42e60000
 8009f00:	430c0000 	.word	0x430c0000

08009f04 <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6858      	ldr	r0, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3308      	adds	r3, #8
 8009f22:	2201      	movs	r2, #1
 8009f24:	4619      	mov	r1, r3
 8009f26:	f00b fb69 	bl	80155fc <HAL_UART_Receive_IT>

}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7f5b      	ldrb	r3, [r3, #29]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d035      	beq.n	8009fb0 <R6091U_Handler+0x7c>
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	f300 80b2 	bgt.w	800a0ae <R6091U_Handler+0x17a>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <R6091U_Handler+0x20>
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d011      	beq.n	8009f76 <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 8009f52:	e0ac      	b.n	800a0ae <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7a1b      	ldrb	r3, [r3, #8]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2baa      	cmp	r3, #170	; 0xaa
 8009f5c:	d102      	bne.n	8009f64 <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6858      	ldr	r0, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f00b fb44 	bl	80155fc <HAL_UART_Receive_IT>
		break;
 8009f74:	e09b      	b.n	800a0ae <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	7a1b      	ldrb	r3, [r3, #8]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10b      	bne.n	8009f98 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6858      	ldr	r0, [r3, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	220d      	movs	r2, #13
 8009f90:	4619      	mov	r1, r3
 8009f92:	f00b fb33 	bl	80155fc <HAL_UART_Receive_IT>
		break;
 8009f96:	e08a      	b.n	800a0ae <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6858      	ldr	r0, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f00b fb27 	bl	80155fc <HAL_UART_Receive_IT>
		break;
 8009fae:	e07e      	b.n	800a0ae <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	7a1b      	ldrb	r3, [r3, #8]
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7a5b      	ldrb	r3, [r3, #9]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7a9b      	ldrb	r3, [r3, #10]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	4413      	add	r3, r2
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7adb      	ldrb	r3, [r3, #11]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	4413      	add	r3, r2
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7b1b      	ldrb	r3, [r3, #12]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	4413      	add	r3, r2
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7b5b      	ldrb	r3, [r3, #13]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	4413      	add	r3, r2
 8009fee:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7b9b      	ldrb	r3, [r3, #14]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	7bdb      	ldrb	r3, [r3, #15]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	4413      	add	r3, r2
 800a002:	b2da      	uxtb	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7c1b      	ldrb	r3, [r3, #16]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	4413      	add	r3, r2
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c5b      	ldrb	r3, [r3, #17]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b2da      	uxtb	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c9b      	ldrb	r3, [r3, #18]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	4413      	add	r3, r2
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7cdb      	ldrb	r3, [r3, #19]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	4413      	add	r3, r2
 800a02a:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7d1b      	ldrb	r3, [r3, #20]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	429a      	cmp	r2, r3
 800a042:	d121      	bne.n	800a088 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3309      	adds	r3, #9
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 800a04c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a050:	ee07 3a90 	vmov	s15, r3
 800a054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a058:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a0b8 <R6091U_Handler+0x184>
 800a05c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a060:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800a0bc <R6091U_Handler+0x188>
 800a064:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a068:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <R6091U_Handler+0x18c>)
 800a06a:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 800a06e:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <R6091U_Handler+0x190>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b13      	cmp	r3, #19
 800a074:	dd03      	ble.n	800a07e <R6091U_Handler+0x14a>
				testCounter2 = 0;
 800a076:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <R6091U_Handler+0x190>)
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	e004      	b.n	800a088 <R6091U_Handler+0x154>
				testCounter2 ++;
 800a07e:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <R6091U_Handler+0x190>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	4a0f      	ldr	r2, [pc, #60]	; (800a0c4 <R6091U_Handler+0x190>)
 800a086:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3308      	adds	r3, #8
 800a08c:	220d      	movs	r2, #13
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f00e fffb 	bl	801908c <memset>
		IMU->State = PENDING_SYNC;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6858      	ldr	r0, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f00b faa8 	bl	80155fc <HAL_UART_Receive_IT>
		break;
 800a0ac:	bf00      	nop
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	42c80000 	.word	0x42c80000
 800a0bc:	43340000 	.word	0x43340000
 800a0c0:	20009cc4 	.word	0x20009cc4
 800a0c4:	20006c74 	.word	0x20006c74

0800a0c8 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 800a0d8:	4b28      	ldr	r3, [pc, #160]	; (800a17c <RNSInit+0xb4>)
 800a0da:	2201      	movs	r2, #1
 800a0dc:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800a0de:	4b27      	ldr	r3, [pc, #156]	; (800a17c <RNSInit+0xb4>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	4a24      	ldr	r2, [pc, #144]	; (800a17c <RNSInit+0xb4>)
 800a0ec:	2117      	movs	r1, #23
 800a0ee:	f7f9 fc25 	bl	800393c <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 800a0fa:	4b20      	ldr	r3, [pc, #128]	; (800a17c <RNSInit+0xb4>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <RNSInit+0xb4>)
 800a102:	2214      	movs	r2, #20
 800a104:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	2302      	movs	r3, #2
 800a10c:	4a1b      	ldr	r2, [pc, #108]	; (800a17c <RNSInit+0xb4>)
 800a10e:	2117      	movs	r1, #23
 800a110:	f7f9 fc14 	bl	800393c <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800a120:	e022      	b.n	800a168 <RNSInit+0xa0>
		if(wait >= 2000000){
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4a16      	ldr	r2, [pc, #88]	; (800a180 <RNSInit+0xb8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	dd1b      	ble.n	800a162 <RNSInit+0x9a>
			insData_send[0] = 1;
 800a12a:	4b14      	ldr	r3, [pc, #80]	; (800a17c <RNSInit+0xb4>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 800a130:	4b12      	ldr	r3, [pc, #72]	; (800a17c <RNSInit+0xb4>)
 800a132:	2214      	movs	r2, #20
 800a134:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	2302      	movs	r3, #2
 800a13c:	4a0f      	ldr	r2, [pc, #60]	; (800a17c <RNSInit+0xb4>)
 800a13e:	2117      	movs	r1, #23
 800a140:	f7f9 fbfc 	bl	800393c <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 800a144:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <RNSInit+0xbc>)
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	4a0e      	ldr	r2, [pc, #56]	; (800a184 <RNSInit+0xbc>)
 800a14c:	43db      	mvns	r3, r3
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	09db      	lsrs	r3, r3, #7
 800a152:	b2d9      	uxtb	r1, r3
 800a154:	7853      	ldrb	r3, [r2, #1]
 800a156:	f361 13c7 	bfi	r3, r1, #7, #1
 800a15a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e002      	b.n	800a168 <RNSInit+0xa0>
		}else{
			wait ++;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d0d7      	beq.n	800a122 <RNSInit+0x5a>
		}
	}
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	2000a974 	.word	0x2000a974
 800a180:	001e847f 	.word	0x001e847f
 800a184:	40020814 	.word	0x40020814

0800a188 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2203      	movs	r2, #3
 800a194:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800a1be:	4b31      	ldr	r3, [pc, #196]	; (800a284 <RNSStop+0xfc>)
 800a1c0:	2211      	movs	r2, #17
 800a1c2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	791a      	ldrb	r2, [r3, #4]
 800a1c8:	4b2e      	ldr	r3, [pc, #184]	; (800a284 <RNSStop+0xfc>)
 800a1ca:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	4a2c      	ldr	r2, [pc, #176]	; (800a284 <RNSStop+0xfc>)
 800a1d4:	2117      	movs	r1, #23
 800a1d6:	f7f9 fbb1 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f103 0208 	add.w	r2, r3, #8
 800a1e4:	2308      	movs	r3, #8
 800a1e6:	2118      	movs	r1, #24
 800a1e8:	f7f9 fba8 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f103 0210 	add.w	r2, r3, #16
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	2119      	movs	r1, #25
 800a1fa:	f7f9 fb9f 	bl	800393c <CAN_TxMsg>

	int wait = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a202:	e035      	b.n	800a270 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4a20      	ldr	r2, [pc, #128]	; (800a288 <RNSStop+0x100>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	dd2e      	ble.n	800a26a <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800a20c:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <RNSStop+0xfc>)
 800a20e:	2211      	movs	r2, #17
 800a210:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	791a      	ldrb	r2, [r3, #4]
 800a216:	4b1b      	ldr	r3, [pc, #108]	; (800a284 <RNSStop+0xfc>)
 800a218:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	2302      	movs	r3, #2
 800a220:	4a18      	ldr	r2, [pc, #96]	; (800a284 <RNSStop+0xfc>)
 800a222:	2117      	movs	r1, #23
 800a224:	f7f9 fb8a 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f103 0208 	add.w	r2, r3, #8
 800a232:	2308      	movs	r3, #8
 800a234:	2118      	movs	r1, #24
 800a236:	f7f9 fb81 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f103 0210 	add.w	r2, r3, #16
 800a244:	2308      	movs	r3, #8
 800a246:	2119      	movs	r1, #25
 800a248:	f7f9 fb78 	bl	800393c <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800a24c:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <RNSStop+0x104>)
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	b25b      	sxtb	r3, r3
 800a252:	4a0e      	ldr	r2, [pc, #56]	; (800a28c <RNSStop+0x104>)
 800a254:	43db      	mvns	r3, r3
 800a256:	b2db      	uxtb	r3, r3
 800a258:	09db      	lsrs	r3, r3, #7
 800a25a:	b2d9      	uxtb	r1, r3
 800a25c:	7853      	ldrb	r3, [r2, #1]
 800a25e:	f361 13c7 	bfi	r3, r1, #7, #1
 800a262:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e002      	b.n	800a270 <RNSStop+0xe8>
		}
		else
			wait++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a276:	2b02      	cmp	r3, #2
 800a278:	d0c4      	beq.n	800a204 <RNSStop+0x7c>
	}


}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	2000a974 	.word	0x2000a974
 800a288:	001e847f 	.word	0x001e847f
 800a28c:	40020814 	.word	0x40020814

0800a290 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	ed87 0a05 	vstr	s0, [r7, #20]
 800a29a:	edc7 0a04 	vstr	s1, [r7, #16]
 800a29e:	ed87 1a03 	vstr	s2, [r7, #12]
 800a2a2:	edc7 1a02 	vstr	s3, [r7, #8]
 800a2a6:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2205      	movs	r2, #5
 800a2ac:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f804 	bl	800a2d4 <RNSSendIns>

}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800a2dc:	bf00      	nop
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d0fa      	beq.n	800a2de <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800a2f0:	4b31      	ldr	r3, [pc, #196]	; (800a3b8 <RNSSendIns+0xe4>)
 800a2f2:	2211      	movs	r2, #17
 800a2f4:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	791a      	ldrb	r2, [r3, #4]
 800a2fa:	4b2f      	ldr	r3, [pc, #188]	; (800a3b8 <RNSSendIns+0xe4>)
 800a2fc:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	2302      	movs	r3, #2
 800a304:	4a2c      	ldr	r2, [pc, #176]	; (800a3b8 <RNSSendIns+0xe4>)
 800a306:	2117      	movs	r1, #23
 800a308:	f7f9 fb18 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f103 0208 	add.w	r2, r3, #8
 800a316:	2308      	movs	r3, #8
 800a318:	2118      	movs	r1, #24
 800a31a:	f7f9 fb0f 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f103 0210 	add.w	r2, r3, #16
 800a328:	2308      	movs	r3, #8
 800a32a:	2119      	movs	r1, #25
 800a32c:	f7f9 fb06 	bl	800393c <CAN_TxMsg>

	int wait = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a334:	e035      	b.n	800a3a2 <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4a20      	ldr	r2, [pc, #128]	; (800a3bc <RNSSendIns+0xe8>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	dd2e      	ble.n	800a39c <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 800a33e:	4b1e      	ldr	r3, [pc, #120]	; (800a3b8 <RNSSendIns+0xe4>)
 800a340:	2211      	movs	r2, #17
 800a342:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	791a      	ldrb	r2, [r3, #4]
 800a348:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <RNSSendIns+0xe4>)
 800a34a:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	2302      	movs	r3, #2
 800a352:	4a19      	ldr	r2, [pc, #100]	; (800a3b8 <RNSSendIns+0xe4>)
 800a354:	2117      	movs	r1, #23
 800a356:	f7f9 faf1 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f103 0208 	add.w	r2, r3, #8
 800a364:	2308      	movs	r3, #8
 800a366:	2118      	movs	r1, #24
 800a368:	f7f9 fae8 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f103 0210 	add.w	r2, r3, #16
 800a376:	2308      	movs	r3, #8
 800a378:	2119      	movs	r1, #25
 800a37a:	f7f9 fadf 	bl	800393c <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <RNSSendIns+0xec>)
 800a380:	785b      	ldrb	r3, [r3, #1]
 800a382:	b25b      	sxtb	r3, r3
 800a384:	4a0e      	ldr	r2, [pc, #56]	; (800a3c0 <RNSSendIns+0xec>)
 800a386:	43db      	mvns	r3, r3
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	09db      	lsrs	r3, r3, #7
 800a38c:	b2d9      	uxtb	r1, r3
 800a38e:	7853      	ldrb	r3, [r2, #1]
 800a390:	f361 13c7 	bfi	r3, r1, #7, #1
 800a394:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	e002      	b.n	800a3a2 <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d0c4      	beq.n	800a336 <RNSSendIns+0x62>
		}
	}

}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	2000a974 	.word	0x2000a974
 800a3bc:	001e847f 	.word	0x001e847f
 800a3c0:	40020814 	.word	0x40020814

0800a3c4 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 800a3c4:	b40e      	push	{r1, r2, r3}
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7f3a      	ldrb	r2, [r7, #28]
 800a3d2:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800a3d4:	f107 0320 	add.w	r3, r7, #32
 800a3d8:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 800a3da:	bf00      	nop
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d0fa      	beq.n	800a3dc <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800a3e6:	7f3b      	ldrb	r3, [r7, #28]
 800a3e8:	2b18      	cmp	r3, #24
 800a3ea:	d92b      	bls.n	800a444 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3307      	adds	r3, #7
 800a3f0:	f023 0307 	bic.w	r3, r3, #7
 800a3f4:	f103 0208 	add.w	r2, r3, #8
 800a3f8:	60ba      	str	r2, [r7, #8]
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	4610      	mov	r0, r2
 800a400:	4619      	mov	r1, r3
 800a402:	f7f6 fbf1 	bl	8000be8 <__aeabi_d2f>
 800a406:	4602      	mov	r2, r0
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f04f 0200 	mov.w	r2, #0
 800a412:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f04f 0200 	mov.w	r2, #0
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f04f 0200 	mov.w	r2, #0
 800a432:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f04f 0200 	mov.w	r2, #0
 800a43a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f04f 0200 	mov.w	r2, #0
 800a442:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 800a444:	7f3b      	ldrb	r3, [r7, #28]
 800a446:	2b1e      	cmp	r3, #30
 800a448:	d927      	bls.n	800a49a <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3307      	adds	r3, #7
 800a44e:	f023 0307 	bic.w	r3, r3, #7
 800a452:	f103 0208 	add.w	r2, r3, #8
 800a456:	60ba      	str	r2, [r7, #8]
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	4610      	mov	r0, r2
 800a45e:	4619      	mov	r1, r3
 800a460:	f7f6 fbc2 	bl	8000be8 <__aeabi_d2f>
 800a464:	4602      	mov	r2, r0
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f04f 0200 	mov.w	r2, #0
 800a488:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f04f 0200 	mov.w	r2, #0
 800a498:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 800a49a:	7f3b      	ldrb	r3, [r7, #28]
 800a49c:	2b23      	cmp	r3, #35	; 0x23
 800a49e:	d923      	bls.n	800a4e8 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	3307      	adds	r3, #7
 800a4a4:	f023 0307 	bic.w	r3, r3, #7
 800a4a8:	f103 0208 	add.w	r2, r3, #8
 800a4ac:	60ba      	str	r2, [r7, #8]
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f7f6 fb97 	bl	8000be8 <__aeabi_d2f>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f04f 0200 	mov.w	r2, #0
 800a4c6:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f04f 0200 	mov.w	r2, #0
 800a4ce:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 800a4e8:	7f3b      	ldrb	r3, [r7, #28]
 800a4ea:	2b48      	cmp	r3, #72	; 0x48
 800a4ec:	d91f      	bls.n	800a52e <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	3307      	adds	r3, #7
 800a4f2:	f023 0307 	bic.w	r3, r3, #7
 800a4f6:	f103 0208 	add.w	r2, r3, #8
 800a4fa:	60ba      	str	r2, [r7, #8]
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	4610      	mov	r0, r2
 800a502:	4619      	mov	r1, r3
 800a504:	f7f6 fb70 	bl	8000be8 <__aeabi_d2f>
 800a508:	4602      	mov	r2, r0
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f04f 0200 	mov.w	r2, #0
 800a514:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f04f 0200 	mov.w	r2, #0
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800a52e:	7f3b      	ldrb	r3, [r7, #28]
 800a530:	2b50      	cmp	r3, #80	; 0x50
 800a532:	d91b      	bls.n	800a56c <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3307      	adds	r3, #7
 800a538:	f023 0307 	bic.w	r3, r3, #7
 800a53c:	f103 0208 	add.w	r2, r3, #8
 800a540:	60ba      	str	r2, [r7, #8]
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	4610      	mov	r0, r2
 800a548:	4619      	mov	r1, r3
 800a54a:	f7f6 fb4d 	bl	8000be8 <__aeabi_d2f>
 800a54e:	4602      	mov	r2, r0
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 800a56c:	7f3b      	ldrb	r3, [r7, #28]
 800a56e:	2b51      	cmp	r3, #81	; 0x51
 800a570:	d917      	bls.n	800a5a2 <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	3307      	adds	r3, #7
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	f103 0208 	add.w	r2, r3, #8
 800a57e:	60ba      	str	r2, [r7, #8]
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4610      	mov	r0, r2
 800a586:	4619      	mov	r1, r3
 800a588:	f7f6 fb2e 	bl	8000be8 <__aeabi_d2f>
 800a58c:	4602      	mov	r2, r0
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 800a5a2:	7f3b      	ldrb	r3, [r7, #28]
 800a5a4:	2b52      	cmp	r3, #82	; 0x52
 800a5a6:	d913      	bls.n	800a5d0 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	3307      	adds	r3, #7
 800a5ac:	f023 0307 	bic.w	r3, r3, #7
 800a5b0:	f103 0208 	add.w	r2, r3, #8
 800a5b4:	60ba      	str	r2, [r7, #8]
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f7f6 fb13 	bl	8000be8 <__aeabi_d2f>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f04f 0200 	mov.w	r2, #0
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 800a5d0:	7f3b      	ldrb	r3, [r7, #28]
 800a5d2:	2b54      	cmp	r3, #84	; 0x54
 800a5d4:	d90f      	bls.n	800a5f6 <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	3307      	adds	r3, #7
 800a5da:	f023 0307 	bic.w	r3, r3, #7
 800a5de:	f103 0208 	add.w	r2, r3, #8
 800a5e2:	60ba      	str	r2, [r7, #8]
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	f7f6 fafc 	bl	8000be8 <__aeabi_d2f>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800a5f6:	4b4d      	ldr	r3, [pc, #308]	; (800a72c <RNSSet+0x368>)
 800a5f8:	2211      	movs	r2, #17
 800a5fa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7e1a      	ldrb	r2, [r3, #24]
 800a600:	4b4a      	ldr	r3, [pc, #296]	; (800a72c <RNSSet+0x368>)
 800a602:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	2302      	movs	r3, #2
 800a60a:	4a48      	ldr	r2, [pc, #288]	; (800a72c <RNSSet+0x368>)
 800a60c:	2117      	movs	r1, #23
 800a60e:	f7f9 f995 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f103 021c 	add.w	r2, r3, #28
 800a61c:	2308      	movs	r3, #8
 800a61e:	2118      	movs	r1, #24
 800a620:	f7f9 f98c 	bl	800393c <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a62e:	2308      	movs	r3, #8
 800a630:	2119      	movs	r1, #25
 800a632:	f7f9 f983 	bl	800393c <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800a636:	7f3b      	ldrb	r3, [r7, #28]
 800a638:	2b50      	cmp	r3, #80	; 0x50
 800a63a:	d908      	bls.n	800a64e <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a646:	2308      	movs	r3, #8
 800a648:	211a      	movs	r1, #26
 800a64a:	f7f9 f977 	bl	800393c <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 800a64e:	7f3b      	ldrb	r3, [r7, #28]
 800a650:	2b52      	cmp	r3, #82	; 0x52
 800a652:	d908      	bls.n	800a666 <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a65e:	2308      	movs	r3, #8
 800a660:	211b      	movs	r1, #27
 800a662:	f7f9 f96b 	bl	800393c <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a672:	e04d      	b.n	800a710 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a2e      	ldr	r2, [pc, #184]	; (800a730 <RNSSet+0x36c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	dd46      	ble.n	800a70a <RNSSet+0x346>
		{
			insData_send[0] = 17;
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <RNSSet+0x368>)
 800a67e:	2211      	movs	r2, #17
 800a680:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7e1a      	ldrb	r2, [r3, #24]
 800a686:	4b29      	ldr	r3, [pc, #164]	; (800a72c <RNSSet+0x368>)
 800a688:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	2302      	movs	r3, #2
 800a690:	4a26      	ldr	r2, [pc, #152]	; (800a72c <RNSSet+0x368>)
 800a692:	2117      	movs	r1, #23
 800a694:	f7f9 f952 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f103 021c 	add.w	r2, r3, #28
 800a6a2:	2308      	movs	r3, #8
 800a6a4:	2118      	movs	r1, #24
 800a6a6:	f7f9 f949 	bl	800393c <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	2119      	movs	r1, #25
 800a6b8:	f7f9 f940 	bl	800393c <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 800a6bc:	7f3b      	ldrb	r3, [r7, #28]
 800a6be:	2b50      	cmp	r3, #80	; 0x50
 800a6c0:	d908      	bls.n	800a6d4 <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	211a      	movs	r1, #26
 800a6d0:	f7f9 f934 	bl	800393c <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 800a6d4:	7f3b      	ldrb	r3, [r7, #28]
 800a6d6:	2b52      	cmp	r3, #82	; 0x52
 800a6d8:	d908      	bls.n	800a6ec <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	211b      	movs	r1, #27
 800a6e8:	f7f9 f928 	bl	800393c <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800a6ec:	4b11      	ldr	r3, [pc, #68]	; (800a734 <RNSSet+0x370>)
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	b25b      	sxtb	r3, r3
 800a6f2:	4a10      	ldr	r2, [pc, #64]	; (800a734 <RNSSet+0x370>)
 800a6f4:	43db      	mvns	r3, r3
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	09db      	lsrs	r3, r3, #7
 800a6fa:	b2d9      	uxtb	r1, r3
 800a6fc:	7853      	ldrb	r3, [r2, #1]
 800a6fe:	f361 13c7 	bfi	r3, r1, #7, #1
 800a702:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	e002      	b.n	800a710 <RNSSet+0x34c>
		}
		else
			wait++;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a716:	2b02      	cmp	r3, #2
 800a718:	d0ac      	beq.n	800a674 <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a726:	b003      	add	sp, #12
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	2000a974 	.word	0x2000a974
 800a730:	001e847f 	.word	0x001e847f
 800a734:	40020814 	.word	0x40020814

0800a738 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	; 0x30
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a746:	f107 0318 	add.w	r3, r7, #24
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	605a      	str	r2, [r3, #4]
 800a750:	609a      	str	r2, [r3, #8]
 800a752:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a754:	f107 0310 	add.w	r3, r7, #16
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4a6d      	ldr	r2, [pc, #436]	; (800a918 <ServoxInit+0x1e0>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d106      	bne.n	800a774 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	4a6c      	ldr	r2, [pc, #432]	; (800a91c <ServoxInit+0x1e4>)
 800a76a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	22a7      	movs	r2, #167	; 0xa7
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	e078      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4a6a      	ldr	r2, [pc, #424]	; (800a920 <ServoxInit+0x1e8>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d107      	bne.n	800a78c <ServoxInit+0x54>
			htimx->Instance = TIM2;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a782:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2253      	movs	r2, #83	; 0x53
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	e06c      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4a65      	ldr	r2, [pc, #404]	; (800a924 <ServoxInit+0x1ec>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d106      	bne.n	800a7a2 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4a64      	ldr	r2, [pc, #400]	; (800a928 <ServoxInit+0x1f0>)
 800a798:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2253      	movs	r2, #83	; 0x53
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	e061      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	4a61      	ldr	r2, [pc, #388]	; (800a92c <ServoxInit+0x1f4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d106      	bne.n	800a7b8 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4a60      	ldr	r2, [pc, #384]	; (800a930 <ServoxInit+0x1f8>)
 800a7ae:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2253      	movs	r2, #83	; 0x53
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	e056      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4a5e      	ldr	r2, [pc, #376]	; (800a934 <ServoxInit+0x1fc>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d106      	bne.n	800a7ce <ServoxInit+0x96>
			htimx->Instance = TIM5;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4a5d      	ldr	r2, [pc, #372]	; (800a938 <ServoxInit+0x200>)
 800a7c4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2253      	movs	r2, #83	; 0x53
 800a7ca:	605a      	str	r2, [r3, #4]
 800a7cc:	e04b      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	4a5a      	ldr	r2, [pc, #360]	; (800a93c <ServoxInit+0x204>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d106      	bne.n	800a7e4 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4a59      	ldr	r2, [pc, #356]	; (800a940 <ServoxInit+0x208>)
 800a7da:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	22a7      	movs	r2, #167	; 0xa7
 800a7e0:	605a      	str	r2, [r3, #4]
 800a7e2:	e040      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4a57      	ldr	r2, [pc, #348]	; (800a944 <ServoxInit+0x20c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d106      	bne.n	800a7fa <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4a56      	ldr	r2, [pc, #344]	; (800a948 <ServoxInit+0x210>)
 800a7f0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	22a7      	movs	r2, #167	; 0xa7
 800a7f6:	605a      	str	r2, [r3, #4]
 800a7f8:	e035      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4a53      	ldr	r2, [pc, #332]	; (800a94c <ServoxInit+0x214>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d106      	bne.n	800a810 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	4a52      	ldr	r2, [pc, #328]	; (800a950 <ServoxInit+0x218>)
 800a806:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	22a7      	movs	r2, #167	; 0xa7
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	e02a      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4a50      	ldr	r2, [pc, #320]	; (800a954 <ServoxInit+0x21c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d106      	bne.n	800a826 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4a4f      	ldr	r2, [pc, #316]	; (800a958 <ServoxInit+0x220>)
 800a81c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	22a7      	movs	r2, #167	; 0xa7
 800a822:	605a      	str	r2, [r3, #4]
 800a824:	e01f      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4a4c      	ldr	r2, [pc, #304]	; (800a95c <ServoxInit+0x224>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d106      	bne.n	800a83c <ServoxInit+0x104>
			htimx->Instance = TIM12;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4a4b      	ldr	r2, [pc, #300]	; (800a960 <ServoxInit+0x228>)
 800a832:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2253      	movs	r2, #83	; 0x53
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	e014      	b.n	800a866 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4a49      	ldr	r2, [pc, #292]	; (800a964 <ServoxInit+0x22c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d106      	bne.n	800a852 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4a48      	ldr	r2, [pc, #288]	; (800a968 <ServoxInit+0x230>)
 800a848:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2253      	movs	r2, #83	; 0x53
 800a84e:	605a      	str	r2, [r3, #4]
 800a850:	e009      	b.n	800a866 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	4a45      	ldr	r2, [pc, #276]	; (800a96c <ServoxInit+0x234>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d105      	bne.n	800a866 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	4a44      	ldr	r2, [pc, #272]	; (800a970 <ServoxInit+0x238>)
 800a85e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2253      	movs	r2, #83	; 0x53
 800a864:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2200      	movs	r2, #0
 800a86a:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a872:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2200      	movs	r2, #0
 800a878:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2280      	movs	r2, #128	; 0x80
 800a87e:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f009 fdd5 	bl	8014430 <HAL_TIM_Base_Init>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <ServoxInit+0x158>
		  {
		    Error_Handler();
 800a88c:	f7fa fb68 	bl	8004f60 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a894:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800a896:	f107 0318 	add.w	r3, r7, #24
 800a89a:	4619      	mov	r1, r3
 800a89c:	68b8      	ldr	r0, [r7, #8]
 800a89e:	f00a f93b 	bl	8014b18 <HAL_TIM_ConfigClockSource>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <ServoxInit+0x174>
		  {
		    Error_Handler();
 800a8a8:	f7fa fb5a 	bl	8004f60 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800a8ac:	68b8      	ldr	r0, [r7, #8]
 800a8ae:	f009 fe32 	bl	8014516 <HAL_TIM_PWM_Init>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <ServoxInit+0x184>
			{
				Error_Handler();
 800a8b8:	f7fa fb52 	bl	8004f60 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800a8c4:	f107 0310 	add.w	r3, r7, #16
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68b8      	ldr	r0, [r7, #8]
 800a8cc:	f00a fd20 	bl	8015310 <HAL_TIMEx_MasterConfigSynchronization>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <ServoxInit+0x1a2>
		{
			Error_Handler();
 800a8d6:	f7fa fb43 	bl	8004f60 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	f009 fdd3 	bl	8014486 <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a8e0:	8879      	ldrh	r1, [r7, #2]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7f6 fddc 	bl	80014a8 <GPIOPinsInit>

	servo->htimx = htimx;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fa:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 800a8fc:	887b      	ldrh	r3, [r7, #2]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a902:	68b8      	ldr	r0, [r7, #8]
 800a904:	f7f6 ffb0 	bl	8001868 <PWMChannelConfig>

	servo->currentPulse = 0;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	621a      	str	r2, [r3, #32]
}
 800a90e:	bf00      	nop
 800a910:	3728      	adds	r7, #40	; 0x28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200063e8 	.word	0x200063e8
 800a91c:	40010000 	.word	0x40010000
 800a920:	200064ec 	.word	0x200064ec
 800a924:	2000619c 	.word	0x2000619c
 800a928:	40000400 	.word	0x40000400
 800a92c:	20005fd8 	.word	0x20005fd8
 800a930:	40000800 	.word	0x40000800
 800a934:	2000615c 	.word	0x2000615c
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	20005f98 	.word	0x20005f98
 800a940:	40010400 	.word	0x40010400
 800a944:	20006428 	.word	0x20006428
 800a948:	40014000 	.word	0x40014000
 800a94c:	200060b8 	.word	0x200060b8
 800a950:	40014400 	.word	0x40014400
 800a954:	20006300 	.word	0x20006300
 800a958:	40014800 	.word	0x40014800
 800a95c:	2000660c 	.word	0x2000660c
 800a960:	40001800 	.word	0x40001800
 800a964:	20006280 	.word	0x20006280
 800a968:	40001c00 	.word	0x40001c00
 800a96c:	200065cc 	.word	0x200065cc
 800a970:	40002000 	.word	0x40002000

0800a974 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d204      	bcs.n	800a992 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	695a      	ldr	r2, [r3, #20]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	621a      	str	r2, [r3, #32]
 800a990:	e00c      	b.n	800a9ac <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d904      	bls.n	800a9a6 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699a      	ldr	r2, [r3, #24]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	621a      	str	r2, [r3, #32]
 800a9a4:	e002      	b.n	800a9ac <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d106      	bne.n	800a9c2 <ServoSetPulse+0x4e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6a12      	ldr	r2, [r2, #32]
 800a9be:	635a      	str	r2, [r3, #52]	; 0x34

}
 800a9c0:	e01b      	b.n	800a9fa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	d106      	bne.n	800a9d8 <ServoSetPulse+0x64>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a9d6:	e010      	b.n	800a9fa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d106      	bne.n	800a9ee <ServoSetPulse+0x7a>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800a9ec:	e005      	b.n	800a9fa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	619a      	str	r2, [r3, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800aa30:	4802      	ldr	r0, [pc, #8]	; (800aa3c <SPI1_IRQHandler+0x10>)
 800aa32:	f009 fbdf 	bl	80141f4 <HAL_SPI_IRQHandler>
}
 800aa36:	bf00      	nop
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20009f90 	.word	0x20009f90

0800aa40 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800aa44:	4802      	ldr	r0, [pc, #8]	; (800aa50 <SPI2_IRQHandler+0x10>)
 800aa46:	f009 fbd5 	bl	80141f4 <HAL_SPI_IRQHandler>
}
 800aa4a:	bf00      	nop
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20006d58 	.word	0x20006d58

0800aa54 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 800aa58:	4802      	ldr	r0, [pc, #8]	; (800aa64 <SPI3_IRQHandler+0x10>)
 800aa5a:	f009 fbcb 	bl	80141f4 <HAL_SPI_IRQHandler>
}
 800aa5e:	bf00      	nop
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20007c0c 	.word	0x20007c0c

0800aa68 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800aa6e:	f005 f803 	bl	800fa78 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800aa72:	f7f8 fa89 	bl	8002f88 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800aa76:	2301      	movs	r3, #1
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa82:	48c5      	ldr	r0, [pc, #788]	; (800ad98 <Initialize+0x330>)
 800aa84:	f7f6 fd10 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800aa88:	2301      	movs	r3, #1
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa94:	48c0      	ldr	r0, [pc, #768]	; (800ad98 <Initialize+0x330>)
 800aa96:	f7f6 fd07 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aaa6:	48bc      	ldr	r0, [pc, #752]	; (800ad98 <Initialize+0x330>)
 800aaa8:	f7f6 fcfe 	bl	80014a8 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800aaac:	2301      	movs	r3, #1
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	2302      	movs	r3, #2
 800aab2:	2200      	movs	r2, #0
 800aab4:	2180      	movs	r1, #128	; 0x80
 800aab6:	48b9      	ldr	r0, [pc, #740]	; (800ad9c <Initialize+0x334>)
 800aab8:	f7f6 fcf6 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800aabc:	2301      	movs	r3, #1
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	2302      	movs	r3, #2
 800aac2:	2200      	movs	r2, #0
 800aac4:	2101      	movs	r1, #1
 800aac6:	48b6      	ldr	r0, [pc, #728]	; (800ada0 <Initialize+0x338>)
 800aac8:	f7f6 fcee 	bl	80014a8 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800aacc:	2301      	movs	r3, #1
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	2301      	movs	r3, #1
 800aad2:	2200      	movs	r2, #0
 800aad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aad8:	48b1      	ldr	r0, [pc, #708]	; (800ada0 <Initialize+0x338>)
 800aada:	f7f6 fce5 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800aade:	2301      	movs	r3, #1
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	2301      	movs	r3, #1
 800aae4:	2200      	movs	r2, #0
 800aae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aaea:	48ad      	ldr	r0, [pc, #692]	; (800ada0 <Initialize+0x338>)
 800aaec:	f7f6 fcdc 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aafc:	48a8      	ldr	r0, [pc, #672]	; (800ada0 <Initialize+0x338>)
 800aafe:	f7f6 fcd3 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab02:	2301      	movs	r3, #1
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	2301      	movs	r3, #1
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab0e:	48a4      	ldr	r0, [pc, #656]	; (800ada0 <Initialize+0x338>)
 800ab10:	f7f6 fcca 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab14:	2301      	movs	r3, #1
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	2301      	movs	r3, #1
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ab20:	489e      	ldr	r0, [pc, #632]	; (800ad9c <Initialize+0x334>)
 800ab22:	f7f6 fcc1 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab26:	2301      	movs	r3, #1
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab32:	489a      	ldr	r0, [pc, #616]	; (800ad9c <Initialize+0x334>)
 800ab34:	f7f6 fcb8 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab38:	2301      	movs	r3, #1
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab44:	4897      	ldr	r0, [pc, #604]	; (800ada4 <Initialize+0x33c>)
 800ab46:	f7f6 fcaf 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	2301      	movs	r3, #1
 800ab50:	2200      	movs	r2, #0
 800ab52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab56:	4893      	ldr	r0, [pc, #588]	; (800ada4 <Initialize+0x33c>)
 800ab58:	f7f6 fca6 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	2301      	movs	r3, #1
 800ab62:	2200      	movs	r2, #0
 800ab64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab68:	488b      	ldr	r0, [pc, #556]	; (800ad98 <Initialize+0x330>)
 800ab6a:	f7f6 fc9d 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab6e:	2301      	movs	r3, #1
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	2301      	movs	r3, #1
 800ab74:	2200      	movs	r2, #0
 800ab76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab7a:	488b      	ldr	r0, [pc, #556]	; (800ada8 <Initialize+0x340>)
 800ab7c:	f7f6 fc94 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab80:	2301      	movs	r3, #1
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	2301      	movs	r3, #1
 800ab86:	2200      	movs	r2, #0
 800ab88:	2108      	movs	r1, #8
 800ab8a:	4886      	ldr	r0, [pc, #536]	; (800ada4 <Initialize+0x33c>)
 800ab8c:	f7f6 fc8c 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ab90:	2301      	movs	r3, #1
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	2301      	movs	r3, #1
 800ab96:	2200      	movs	r2, #0
 800ab98:	2110      	movs	r1, #16
 800ab9a:	4882      	ldr	r0, [pc, #520]	; (800ada4 <Initialize+0x33c>)
 800ab9c:	f7f6 fc84 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800aba0:	2301      	movs	r3, #1
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	2301      	movs	r3, #1
 800aba6:	2200      	movs	r2, #0
 800aba8:	2180      	movs	r1, #128	; 0x80
 800abaa:	487e      	ldr	r0, [pc, #504]	; (800ada4 <Initialize+0x33c>)
 800abac:	f7f6 fc7c 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800abb0:	2301      	movs	r3, #1
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	2301      	movs	r3, #1
 800abb6:	2200      	movs	r2, #0
 800abb8:	2120      	movs	r1, #32
 800abba:	4878      	ldr	r0, [pc, #480]	; (800ad9c <Initialize+0x334>)
 800abbc:	f7f6 fc74 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800abc0:	2301      	movs	r3, #1
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	2301      	movs	r3, #1
 800abc6:	2200      	movs	r2, #0
 800abc8:	2140      	movs	r1, #64	; 0x40
 800abca:	4874      	ldr	r0, [pc, #464]	; (800ad9c <Initialize+0x334>)
 800abcc:	f7f6 fc6c 	bl	80014a8 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800abd0:	2301      	movs	r3, #1
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	2301      	movs	r3, #1
 800abd6:	2200      	movs	r2, #0
 800abd8:	2101      	movs	r1, #1
 800abda:	486f      	ldr	r0, [pc, #444]	; (800ad98 <Initialize+0x330>)
 800abdc:	f7f6 fc64 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800abe0:	2301      	movs	r3, #1
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	2301      	movs	r3, #1
 800abe6:	2200      	movs	r2, #0
 800abe8:	2102      	movs	r1, #2
 800abea:	486b      	ldr	r0, [pc, #428]	; (800ad98 <Initialize+0x330>)
 800abec:	f7f6 fc5c 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800abf0:	2301      	movs	r3, #1
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	2301      	movs	r3, #1
 800abf6:	2200      	movs	r2, #0
 800abf8:	2104      	movs	r1, #4
 800abfa:	4867      	ldr	r0, [pc, #412]	; (800ad98 <Initialize+0x330>)
 800abfc:	f7f6 fc54 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ac00:	2301      	movs	r3, #1
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	2301      	movs	r3, #1
 800ac06:	2200      	movs	r2, #0
 800ac08:	2108      	movs	r1, #8
 800ac0a:	4863      	ldr	r0, [pc, #396]	; (800ad98 <Initialize+0x330>)
 800ac0c:	f7f6 fc4c 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ac10:	2301      	movs	r3, #1
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	2301      	movs	r3, #1
 800ac16:	2200      	movs	r2, #0
 800ac18:	2110      	movs	r1, #16
 800ac1a:	485f      	ldr	r0, [pc, #380]	; (800ad98 <Initialize+0x330>)
 800ac1c:	f7f6 fc44 	bl	80014a8 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ac20:	2301      	movs	r3, #1
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	2301      	movs	r3, #1
 800ac26:	2200      	movs	r2, #0
 800ac28:	2120      	movs	r1, #32
 800ac2a:	485b      	ldr	r0, [pc, #364]	; (800ad98 <Initialize+0x330>)
 800ac2c:	f7f6 fc3c 	bl	80014a8 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800ac30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac34:	9303      	str	r3, [sp, #12]
 800ac36:	4b5a      	ldr	r3, [pc, #360]	; (800ada0 <Initialize+0x338>)
 800ac38:	9302      	str	r3, [sp, #8]
 800ac3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	4b57      	ldr	r3, [pc, #348]	; (800ada0 <Initialize+0x338>)
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	2380      	movs	r3, #128	; 0x80
 800ac46:	4a56      	ldr	r2, [pc, #344]	; (800ada0 <Initialize+0x338>)
 800ac48:	2101      	movs	r1, #1
 800ac4a:	4858      	ldr	r0, [pc, #352]	; (800adac <Initialize+0x344>)
 800ac4c:	f7f7 f980 	bl	8001f50 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac50:	2003      	movs	r0, #3
 800ac52:	f005 fed0 	bl	80109f6 <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ac56:	4b56      	ldr	r3, [pc, #344]	; (800adb0 <Initialize+0x348>)
 800ac58:	2208      	movs	r2, #8
 800ac5a:	4956      	ldr	r1, [pc, #344]	; (800adb4 <Initialize+0x34c>)
 800ac5c:	4856      	ldr	r0, [pc, #344]	; (800adb8 <Initialize+0x350>)
 800ac5e:	f7f9 fc2f 	bl	80044c0 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800ac62:	2301      	movs	r3, #1
 800ac64:	4a55      	ldr	r2, [pc, #340]	; (800adbc <Initialize+0x354>)
 800ac66:	2108      	movs	r1, #8
 800ac68:	4855      	ldr	r0, [pc, #340]	; (800adc0 <Initialize+0x358>)
 800ac6a:	f7f9 fb77 	bl	800435c <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800ac6e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac72:	4954      	ldr	r1, [pc, #336]	; (800adc4 <Initialize+0x35c>)
 800ac74:	4854      	ldr	r0, [pc, #336]	; (800adc8 <Initialize+0x360>)
 800ac76:	f7f8 fc95 	bl	80035a4 <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ac80:	4852      	ldr	r0, [pc, #328]	; (800adcc <Initialize+0x364>)
 800ac82:	f7f8 fb87 	bl	8003394 <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800ac86:	2201      	movs	r2, #1
 800ac88:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ac8c:	4850      	ldr	r0, [pc, #320]	; (800add0 <Initialize+0x368>)
 800ac8e:	f7f8 fb81 	bl	8003394 <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800ac92:	2201      	movs	r2, #1
 800ac94:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ac98:	484e      	ldr	r0, [pc, #312]	; (800add4 <Initialize+0x36c>)
 800ac9a:	f7f8 fb7b 	bl	8003394 <UARTInit>

	QEIInit(&htim1);
 800ac9e:	484e      	ldr	r0, [pc, #312]	; (800add8 <Initialize+0x370>)
 800aca0:	f7f6 ff6e 	bl	8001b80 <QEIInit>
	QEIInit(&htim4);
 800aca4:	484d      	ldr	r0, [pc, #308]	; (800addc <Initialize+0x374>)
 800aca6:	f7f6 ff6b 	bl	8001b80 <QEIInit>
//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800acaa:	2300      	movs	r3, #0
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	2300      	movs	r3, #0
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	2300      	movs	r3, #0
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	2300      	movs	r3, #0
 800acb8:	2200      	movs	r2, #0
 800acba:	2104      	movs	r1, #4
 800acbc:	4848      	ldr	r0, [pc, #288]	; (800ade0 <Initialize+0x378>)
 800acbe:	f7f8 fd7d 	bl	80037bc <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800acc2:	2300      	movs	r3, #0
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	230e      	movs	r3, #14
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	2300      	movs	r3, #0
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	2300      	movs	r3, #0
 800acd0:	2201      	movs	r2, #1
 800acd2:	2104      	movs	r1, #4
 800acd4:	4843      	ldr	r0, [pc, #268]	; (800ade4 <Initialize+0x37c>)
 800acd6:	f7f8 fd71 	bl	80037bc <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800acda:	2253      	movs	r2, #83	; 0x53
 800acdc:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800ace0:	4841      	ldr	r0, [pc, #260]	; (800ade8 <Initialize+0x380>)
 800ace2:	f7f6 fcdb 	bl	800169c <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800ace6:	2301      	movs	r3, #1
 800ace8:	4a2c      	ldr	r2, [pc, #176]	; (800ad9c <Initialize+0x334>)
 800acea:	2108      	movs	r1, #8
 800acec:	483e      	ldr	r0, [pc, #248]	; (800ade8 <Initialize+0x380>)
 800acee:	f7f6 fdbb 	bl	8001868 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800acf2:	2302      	movs	r3, #2
 800acf4:	4a29      	ldr	r2, [pc, #164]	; (800ad9c <Initialize+0x334>)
 800acf6:	210c      	movs	r1, #12
 800acf8:	483b      	ldr	r0, [pc, #236]	; (800ade8 <Initialize+0x380>)
 800acfa:	f7f6 fdb5 	bl	8001868 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800acfe:	2253      	movs	r2, #83	; 0x53
 800ad00:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800ad04:	4839      	ldr	r0, [pc, #228]	; (800adec <Initialize+0x384>)
 800ad06:	f7f6 fcc9 	bl	800169c <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4a26      	ldr	r2, [pc, #152]	; (800ada8 <Initialize+0x340>)
 800ad0e:	2100      	movs	r1, #0
 800ad10:	4836      	ldr	r0, [pc, #216]	; (800adec <Initialize+0x384>)
 800ad12:	f7f6 fda9 	bl	8001868 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800ad16:	2302      	movs	r3, #2
 800ad18:	4a23      	ldr	r2, [pc, #140]	; (800ada8 <Initialize+0x340>)
 800ad1a:	2104      	movs	r1, #4
 800ad1c:	4833      	ldr	r0, [pc, #204]	; (800adec <Initialize+0x384>)
 800ad1e:	f7f6 fda3 	bl	8001868 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800ad22:	2304      	movs	r3, #4
 800ad24:	4a20      	ldr	r2, [pc, #128]	; (800ada8 <Initialize+0x340>)
 800ad26:	2108      	movs	r1, #8
 800ad28:	4830      	ldr	r0, [pc, #192]	; (800adec <Initialize+0x384>)
 800ad2a:	f7f6 fd9d 	bl	8001868 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800ad2e:	2308      	movs	r3, #8
 800ad30:	4a1d      	ldr	r2, [pc, #116]	; (800ada8 <Initialize+0x340>)
 800ad32:	210c      	movs	r1, #12
 800ad34:	482d      	ldr	r0, [pc, #180]	; (800adec <Initialize+0x384>)
 800ad36:	f7f6 fd97 	bl	8001868 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800ad3a:	22a7      	movs	r2, #167	; 0xa7
 800ad3c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800ad40:	482b      	ldr	r0, [pc, #172]	; (800adf0 <Initialize+0x388>)
 800ad42:	f7f6 fcab 	bl	800169c <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800ad46:	2320      	movs	r3, #32
 800ad48:	4a15      	ldr	r2, [pc, #84]	; (800ada0 <Initialize+0x338>)
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	4828      	ldr	r0, [pc, #160]	; (800adf0 <Initialize+0x388>)
 800ad4e:	f7f6 fd8b 	bl	8001868 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	4a12      	ldr	r2, [pc, #72]	; (800ada0 <Initialize+0x338>)
 800ad56:	2104      	movs	r1, #4
 800ad58:	4825      	ldr	r0, [pc, #148]	; (800adf0 <Initialize+0x388>)
 800ad5a:	f7f6 fd85 	bl	8001868 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7); // Pitch
 800ad5e:	2380      	movs	r3, #128	; 0x80
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	2340      	movs	r3, #64	; 0x40
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	4b23      	ldr	r3, [pc, #140]	; (800adf4 <Initialize+0x38c>)
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	220c      	movs	r2, #12
 800ad6e:	491e      	ldr	r1, [pc, #120]	; (800ade8 <Initialize+0x380>)
 800ad70:	4821      	ldr	r0, [pc, #132]	; (800adf8 <Initialize+0x390>)
 800ad72:	f7f6 fa55 	bl	8001220 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5); // Timing belt
 800ad76:	2320      	movs	r3, #32
 800ad78:	9302      	str	r3, [sp, #8]
 800ad7a:	2310      	movs	r3, #16
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	4b1d      	ldr	r3, [pc, #116]	; (800adf4 <Initialize+0x38c>)
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	2300      	movs	r3, #0
 800ad84:	2208      	movs	r2, #8
 800ad86:	4918      	ldr	r1, [pc, #96]	; (800ade8 <Initialize+0x380>)
 800ad88:	481c      	ldr	r0, [pc, #112]	; (800adfc <Initialize+0x394>)
 800ad8a:	f7f6 fa49 	bl	8001220 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800ad8e:	2308      	movs	r3, #8
 800ad90:	9302      	str	r3, [sp, #8]
 800ad92:	2304      	movs	r3, #4
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	e033      	b.n	800ae00 <Initialize+0x398>
 800ad98:	40020800 	.word	0x40020800
 800ad9c:	40020400 	.word	0x40020400
 800ada0:	40021000 	.word	0x40021000
 800ada4:	40020c00 	.word	0x40020c00
 800ada8:	40020000 	.word	0x40020000
 800adac:	20009948 	.word	0x20009948
 800adb0:	00061a80 	.word	0x00061a80
 800adb4:	2000a29c 	.word	0x2000a29c
 800adb8:	20007010 	.word	0x20007010
 800adbc:	000186a0 	.word	0x000186a0
 800adc0:	20007068 	.word	0x20007068
 800adc4:	20005f34 	.word	0x20005f34
 800adc8:	2000652c 	.word	0x2000652c
 800adcc:	20006078 	.word	0x20006078
 800add0:	200064ac 	.word	0x200064ac
 800add4:	200061e0 	.word	0x200061e0
 800add8:	200063e8 	.word	0x200063e8
 800addc:	20005fd8 	.word	0x20005fd8
 800ade0:	2000a274 	.word	0x2000a274
 800ade4:	2000940c 	.word	0x2000940c
 800ade8:	2000619c 	.word	0x2000619c
 800adec:	2000615c 	.word	0x2000615c
 800adf0:	20006428 	.word	0x20006428
 800adf4:	20009964 	.word	0x20009964
 800adf8:	2000a824 	.word	0x2000a824
 800adfc:	20007ba0 	.word	0x20007ba0
 800ae00:	4b23      	ldr	r3, [pc, #140]	; (800ae90 <Initialize+0x428>)
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	2200      	movs	r2, #0
 800ae08:	4922      	ldr	r1, [pc, #136]	; (800ae94 <Initialize+0x42c>)
 800ae0a:	4823      	ldr	r0, [pc, #140]	; (800ae98 <Initialize+0x430>)
 800ae0c:	f7f6 fa08 	bl	8001220 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800ae10:	2302      	movs	r3, #2
 800ae12:	9302      	str	r3, [sp, #8]
 800ae14:	2301      	movs	r3, #1
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <Initialize+0x428>)
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2204      	movs	r2, #4
 800ae20:	491c      	ldr	r1, [pc, #112]	; (800ae94 <Initialize+0x42c>)
 800ae22:	481e      	ldr	r0, [pc, #120]	; (800ae9c <Initialize+0x434>)
 800ae24:	f7f6 f9fc 	bl	8001220 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800ae28:	2380      	movs	r3, #128	; 0x80
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	4b1b      	ldr	r3, [pc, #108]	; (800aea0 <Initialize+0x438>)
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	220c      	movs	r2, #12
 800ae38:	491a      	ldr	r1, [pc, #104]	; (800aea4 <Initialize+0x43c>)
 800ae3a:	481b      	ldr	r0, [pc, #108]	; (800aea8 <Initialize+0x440>)
 800ae3c:	f7f6 f9f0 	bl	8001220 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800ae40:	2320      	movs	r3, #32
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	2310      	movs	r3, #16
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <Initialize+0x438>)
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	2208      	movs	r2, #8
 800ae50:	4914      	ldr	r1, [pc, #80]	; (800aea4 <Initialize+0x43c>)
 800ae52:	4816      	ldr	r0, [pc, #88]	; (800aeac <Initialize+0x444>)
 800ae54:	f7f6 f9e4 	bl	8001220 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800ae58:	2308      	movs	r3, #8
 800ae5a:	9302      	str	r3, [sp, #8]
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <Initialize+0x438>)
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	2300      	movs	r3, #0
 800ae66:	2204      	movs	r2, #4
 800ae68:	490e      	ldr	r1, [pc, #56]	; (800aea4 <Initialize+0x43c>)
 800ae6a:	4811      	ldr	r0, [pc, #68]	; (800aeb0 <Initialize+0x448>)
 800ae6c:	f7f6 f9d8 	bl	8001220 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800ae70:	2302      	movs	r3, #2
 800ae72:	9302      	str	r3, [sp, #8]
 800ae74:	2301      	movs	r3, #1
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <Initialize+0x438>)
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4908      	ldr	r1, [pc, #32]	; (800aea4 <Initialize+0x43c>)
 800ae82:	480c      	ldr	r0, [pc, #48]	; (800aeb4 <Initialize+0x44c>)
 800ae84:	f7f6 f9cc 	bl	8001220 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800ae88:	bf00      	nop
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20009964 	.word	0x20009964
 800ae94:	20006428 	.word	0x20006428
 800ae98:	200070c8 	.word	0x200070c8
 800ae9c:	20009a24 	.word	0x20009a24
 800aea0:	20009960 	.word	0x20009960
 800aea4:	2000615c 	.word	0x2000615c
 800aea8:	2000a6a0 	.word	0x2000a6a0
 800aeac:	20009aa8 	.word	0x20009aa8
 800aeb0:	20009acc 	.word	0x20009acc
 800aeb4:	200077cc 	.word	0x200077cc

0800aeb8 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800aebc:	4802      	ldr	r0, [pc, #8]	; (800aec8 <CAN1_RX0_IRQHandler+0x10>)
 800aebe:	f005 fa85 	bl	80103cc <HAL_CAN_IRQHandler>

}
 800aec2:	bf00      	nop
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	2000a274 	.word	0x2000a274

0800aecc <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800aed0:	4802      	ldr	r0, [pc, #8]	; (800aedc <CAN2_RX1_IRQHandler+0x10>)
 800aed2:	f005 fa7b 	bl	80103cc <HAL_CAN_IRQHandler>

}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	2000940c 	.word	0x2000940c

0800aee0 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d008      	beq.n	800af02 <CAN_PROCESS+0x22>
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	dc36      	bgt.n	800af62 <CAN_PROCESS+0x82>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <CAN_PROCESS+0x28>
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d132      	bne.n	800af62 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800aefc:	f003 fb40 	bl	800e580 <decode_VESC>
		break;
 800af00:	e02f      	b.n	800af62 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800af02:	f7fa ff1f 	bl	8005d44 <OdriveCAN_Handler>
		break;
 800af06:	e02c      	b.n	800af62 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <CAN_PROCESS+0x8c>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d107      	bne.n	800af20 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800af10:	4b16      	ldr	r3, [pc, #88]	; (800af6c <CAN_PROCESS+0x8c>)
 800af12:	785a      	ldrb	r2, [r3, #1]
 800af14:	4b16      	ldr	r3, [pc, #88]	; (800af70 <CAN_PROCESS+0x90>)
 800af16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800af1a:	4b14      	ldr	r3, [pc, #80]	; (800af6c <CAN_PROCESS+0x8c>)
 800af1c:	2202      	movs	r2, #2
 800af1e:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800af20:	4b12      	ldr	r3, [pc, #72]	; (800af6c <CAN_PROCESS+0x8c>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b11      	cmp	r3, #17
 800af26:	d11b      	bne.n	800af60 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800af28:	4b12      	ldr	r3, [pc, #72]	; (800af74 <CAN_PROCESS+0x94>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d117      	bne.n	800af60 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <CAN_PROCESS+0x8c>)
 800af32:	785a      	ldrb	r2, [r3, #1]
 800af34:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <CAN_PROCESS+0x90>)
 800af36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800af3a:	4b0f      	ldr	r3, [pc, #60]	; (800af78 <CAN_PROCESS+0x98>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a0c      	ldr	r2, [pc, #48]	; (800af70 <CAN_PROCESS+0x90>)
 800af40:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800af42:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <CAN_PROCESS+0x98>)
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	4a0a      	ldr	r2, [pc, #40]	; (800af70 <CAN_PROCESS+0x90>)
 800af48:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <CAN_PROCESS+0x9c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a08      	ldr	r2, [pc, #32]	; (800af70 <CAN_PROCESS+0x90>)
 800af50:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800af52:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <CAN_PROCESS+0x9c>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	4a06      	ldr	r2, [pc, #24]	; (800af70 <CAN_PROCESS+0x90>)
 800af58:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800af5a:	4b04      	ldr	r3, [pc, #16]	; (800af6c <CAN_PROCESS+0x8c>)
 800af5c:	2203      	movs	r2, #3
 800af5e:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800af60:	bf00      	nop
	}
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20006edc 	.word	0x20006edc
 800af70:	20009314 	.word	0x20009314
 800af74:	20000254 	.word	0x20000254
 800af78:	20009f7c 	.word	0x20009f7c
 800af7c:	2000a0d4 	.word	0x2000a0d4

0800af80 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800af80:	b5b0      	push	{r4, r5, r7, lr}
 800af82:	b08c      	sub	sp, #48	; 0x30
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4aaa      	ldr	r2, [pc, #680]	; (800b23c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800af92:	4293      	cmp	r3, r2
 800af94:	f040 80b4 	bne.w	800b100 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800af98:	f107 030c 	add.w	r3, r7, #12
 800af9c:	4aa8      	ldr	r2, [pc, #672]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800af9e:	2100      	movs	r1, #0
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f005 f8db 	bl	801015c <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800afa6:	4ba6      	ldr	r3, [pc, #664]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d118      	bne.n	800afe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800afae:	4aa5      	ldr	r2, [pc, #660]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800afb0:	4ba3      	ldr	r3, [pc, #652]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800afb2:	4614      	mov	r4, r2
 800afb4:	461d      	mov	r5, r3
 800afb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800afbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800afc2:	4ba0      	ldr	r3, [pc, #640]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800afc4:	331c      	adds	r3, #28
 800afc6:	f107 020c 	add.w	r2, r7, #12
 800afca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afce:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800afd2:	489c      	ldr	r0, [pc, #624]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800afd4:	f003 fbda 	bl	800e78c <set_rx_frames>
			source = VESC_PACKET;
 800afd8:	2301      	movs	r3, #1
 800afda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afde:	e081      	b.n	800b0e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800afe0:	2300      	movs	r3, #0
 800afe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800afe6:	231f      	movs	r3, #31
 800afe8:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800afea:	4b95      	ldr	r3, [pc, #596]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	8b7b      	ldrh	r3, [r7, #26]
 800aff2:	4013      	ands	r3, r2
 800aff4:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800aff6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800affa:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800affc:	4b90      	ldr	r3, [pc, #576]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	b29a      	uxth	r2, r3
 800b002:	8afb      	ldrh	r3, [r7, #22]
 800b004:	4013      	ands	r3, r2
 800b006:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800b008:	8abb      	ldrh	r3, [r7, #20]
 800b00a:	095b      	lsrs	r3, r3, #5
 800b00c:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800b00e:	2300      	movs	r3, #0
 800b010:	62bb      	str	r3, [r7, #40]	; 0x28
 800b012:	e016      	b.n	800b042 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800b014:	4b8c      	ldr	r3, [pc, #560]	; (800b248 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	8b1b      	ldrh	r3, [r3, #24]
 800b022:	8aba      	ldrh	r2, [r7, #20]
 800b024:	429a      	cmp	r2, r3
 800b026:	d109      	bne.n	800b03c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800b028:	8b3b      	ldrh	r3, [r7, #24]
 800b02a:	2b09      	cmp	r3, #9
 800b02c:	d002      	beq.n	800b034 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800b02e:	8b3b      	ldrh	r3, [r7, #24]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d103      	bne.n	800b03c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800b034:	2302      	movs	r3, #2
 800b036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800b03a:	e007      	b.n	800b04c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	3301      	adds	r3, #1
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28
 800b042:	4b82      	ldr	r3, [pc, #520]	; (800b24c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b048:	429a      	cmp	r2, r3
 800b04a:	dbe3      	blt.n	800b014 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800b04c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b050:	2b02      	cmp	r3, #2
 800b052:	d112      	bne.n	800b07a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800b054:	4a7e      	ldr	r2, [pc, #504]	; (800b250 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800b056:	4b7a      	ldr	r3, [pc, #488]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b058:	4614      	mov	r4, r2
 800b05a:	461d      	mov	r5, r3
 800b05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b05e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800b068:	4b75      	ldr	r3, [pc, #468]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b06a:	691a      	ldr	r2, [r3, #16]
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	4619      	mov	r1, r3
 800b072:	4878      	ldr	r0, [pc, #480]	; (800b254 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800b074:	f00d fffc 	bl	8019070 <memcpy>
 800b078:	e034      	b.n	800b0e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800b07a:	4b71      	ldr	r3, [pc, #452]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b16      	cmp	r3, #22
 800b080:	d01b      	beq.n	800b0ba <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800b082:	2b16      	cmp	r3, #22
 800b084:	d825      	bhi.n	800b0d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800b086:	2b14      	cmp	r3, #20
 800b088:	d002      	beq.n	800b090 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800b08a:	2b15      	cmp	r3, #21
 800b08c:	d00c      	beq.n	800b0a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800b08e:	e020      	b.n	800b0d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b090:	4b6b      	ldr	r3, [pc, #428]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	f107 030c 	add.w	r3, r7, #12
 800b098:	4619      	mov	r1, r3
 800b09a:	486f      	ldr	r0, [pc, #444]	; (800b258 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800b09c:	f00d ffe8 	bl	8019070 <memcpy>
					buf2_flag = 0;
 800b0a0:	4b6e      	ldr	r3, [pc, #440]	; (800b25c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	701a      	strb	r2, [r3, #0]

					break;
 800b0a6:	e01d      	b.n	800b0e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b0a8:	4b65      	ldr	r3, [pc, #404]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	f107 030c 	add.w	r3, r7, #12
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	486b      	ldr	r0, [pc, #428]	; (800b260 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800b0b4:	f00d ffdc 	bl	8019070 <memcpy>

					break;
 800b0b8:	e014      	b.n	800b0e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b0ba:	4b61      	ldr	r3, [pc, #388]	; (800b240 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800b0bc:	691a      	ldr	r2, [r3, #16]
 800b0be:	f107 030c 	add.w	r3, r7, #12
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4867      	ldr	r0, [pc, #412]	; (800b264 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800b0c6:	f00d ffd3 	bl	8019070 <memcpy>
					buf2_flag = 1;
 800b0ca:	4b64      	ldr	r3, [pc, #400]	; (800b25c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	701a      	strb	r2, [r3, #0]
					break;
 800b0d0:	e008      	b.n	800b0e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800b0d8:	f107 030c 	add.w	r3, r7, #12
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7f9 f911 	bl	8004304 <FaulHaber_Handler>
					break;
 800b0e2:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800b0e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800b0ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fef5 	bl	800aee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b0f6:	2102      	movs	r1, #2
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f005 f941 	bl	8010380 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800b0fe:	e0cb      	b.n	800b298 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800b100:	f107 030c 	add.w	r3, r7, #12
 800b104:	4a58      	ldr	r2, [pc, #352]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b106:	2100      	movs	r1, #0
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f005 f827 	bl	801015c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800b10e:	4b56      	ldr	r3, [pc, #344]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	2b04      	cmp	r3, #4
 800b114:	d118      	bne.n	800b148 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b116:	4a4b      	ldr	r2, [pc, #300]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800b118:	4b53      	ldr	r3, [pc, #332]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b11a:	4614      	mov	r4, r2
 800b11c:	461d      	mov	r5, r3
 800b11e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b122:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b12a:	4b46      	ldr	r3, [pc, #280]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800b12c:	331c      	adds	r3, #28
 800b12e:	f107 020c 	add.w	r2, r7, #12
 800b132:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b136:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b13a:	4842      	ldr	r0, [pc, #264]	; (800b244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800b13c:	f003 fb26 	bl	800e78c <set_rx_frames>
			source = VESC_PACKET;
 800b140:	2301      	movs	r3, #1
 800b142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b146:	e09a      	b.n	800b27e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800b148:	2300      	movs	r3, #0
 800b14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800b14e:	231f      	movs	r3, #31
 800b150:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800b152:	4b45      	ldr	r3, [pc, #276]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	b29a      	uxth	r2, r3
 800b158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b15a:	4013      	ands	r3, r2
 800b15c:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800b15e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800b162:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800b164:	4b40      	ldr	r3, [pc, #256]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	b29a      	uxth	r2, r3
 800b16a:	8bfb      	ldrh	r3, [r7, #30]
 800b16c:	4013      	ands	r3, r2
 800b16e:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800b170:	8bbb      	ldrh	r3, [r7, #28]
 800b172:	095b      	lsrs	r3, r3, #5
 800b174:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800b176:	2300      	movs	r3, #0
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
 800b17a:	e016      	b.n	800b1aa <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800b17c:	4b32      	ldr	r3, [pc, #200]	; (800b248 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	8b1b      	ldrh	r3, [r3, #24]
 800b18a:	8bba      	ldrh	r2, [r7, #28]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d109      	bne.n	800b1a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800b190:	8c3b      	ldrh	r3, [r7, #32]
 800b192:	2b09      	cmp	r3, #9
 800b194:	d002      	beq.n	800b19c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800b196:	8c3b      	ldrh	r3, [r7, #32]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d103      	bne.n	800b1a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800b19c:	2302      	movs	r3, #2
 800b19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800b1a2:	e007      	b.n	800b1b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1aa:	4b28      	ldr	r3, [pc, #160]	; (800b24c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	dbe3      	blt.n	800b17c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800b1b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d112      	bne.n	800b1e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800b1bc:	4a24      	ldr	r2, [pc, #144]	; (800b250 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800b1be:	4b2a      	ldr	r3, [pc, #168]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	461d      	mov	r5, r3
 800b1c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b1cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800b1d0:	4b25      	ldr	r3, [pc, #148]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	f107 030c 	add.w	r3, r7, #12
 800b1d8:	4619      	mov	r1, r3
 800b1da:	481e      	ldr	r0, [pc, #120]	; (800b254 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800b1dc:	f00d ff48 	bl	8019070 <memcpy>
 800b1e0:	e04d      	b.n	800b27e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800b1e2:	4b21      	ldr	r3, [pc, #132]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b16      	cmp	r3, #22
 800b1e8:	d01b      	beq.n	800b222 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800b1ea:	2b16      	cmp	r3, #22
 800b1ec:	d83e      	bhi.n	800b26c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800b1ee:	2b14      	cmp	r3, #20
 800b1f0:	d002      	beq.n	800b1f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800b1f2:	2b15      	cmp	r3, #21
 800b1f4:	d00c      	beq.n	800b210 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800b1f6:	e039      	b.n	800b26c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b1f8:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	f107 030c 	add.w	r3, r7, #12
 800b200:	4619      	mov	r1, r3
 800b202:	4815      	ldr	r0, [pc, #84]	; (800b258 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800b204:	f00d ff34 	bl	8019070 <memcpy>
					buf2_flag = 0;
 800b208:	4b14      	ldr	r3, [pc, #80]	; (800b25c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
					break;
 800b20e:	e036      	b.n	800b27e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800b210:	4b15      	ldr	r3, [pc, #84]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b212:	691a      	ldr	r2, [r3, #16]
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	4619      	mov	r1, r3
 800b21a:	4811      	ldr	r0, [pc, #68]	; (800b260 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800b21c:	f00d ff28 	bl	8019070 <memcpy>
					break;
 800b220:	e02d      	b.n	800b27e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	f107 030c 	add.w	r3, r7, #12
 800b22a:	4619      	mov	r1, r3
 800b22c:	480d      	ldr	r0, [pc, #52]	; (800b264 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800b22e:	f00d ff1f 	bl	8019070 <memcpy>
					buf2_flag = 1;
 800b232:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800b234:	2201      	movs	r2, #1
 800b236:	701a      	strb	r2, [r3, #0]
					break;
 800b238:	e021      	b.n	800b27e <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800b23a:	bf00      	nop
 800b23c:	2000a274 	.word	0x2000a274
 800b240:	2000a7e0 	.word	0x2000a7e0
 800b244:	20009a74 	.word	0x20009a74
 800b248:	2000a8fc 	.word	0x2000a8fc
 800b24c:	20000248 	.word	0x20000248
 800b250:	20006d2c 	.word	0x20006d2c
 800b254:	20006d48 	.word	0x20006d48
 800b258:	20006edc 	.word	0x20006edc
 800b25c:	20000254 	.word	0x20000254
 800b260:	20009f7c 	.word	0x20009f7c
 800b264:	2000a0d4 	.word	0x2000a0d4
 800b268:	20006f58 	.word	0x20006f58
					rns_can = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800b272:	f107 030c 	add.w	r3, r7, #12
 800b276:	4618      	mov	r0, r3
 800b278:	f7f9 f844 	bl	8004304 <FaulHaber_Handler>
					break;
 800b27c:	bf00      	nop
		if(rns_can)
 800b27e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b282:	2b00      	cmp	r3, #0
 800b284:	d004      	beq.n	800b290 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800b286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fe28 	bl	800aee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800b290:	2102      	movs	r1, #2
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f005 f874 	bl	8010380 <HAL_CAN_ActivateNotification>
}
 800b298:	bf00      	nop
 800b29a:	3730      	adds	r7, #48	; 0x30
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bdb0      	pop	{r4, r5, r7, pc}

0800b2a0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b2a0:	b5b0      	push	{r4, r5, r7, lr}
 800b2a2:	b08c      	sub	sp, #48	; 0x30
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4aaa      	ldr	r2, [pc, #680]	; (800b55c <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	f040 80b4 	bne.w	800b420 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800b2b8:	f107 030c 	add.w	r3, r7, #12
 800b2bc:	4aa8      	ldr	r2, [pc, #672]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b2be:	2101      	movs	r1, #1
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f004 ff4b 	bl	801015c <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800b2c6:	4ba6      	ldr	r3, [pc, #664]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d118      	bne.n	800b300 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800b2ce:	4aa5      	ldr	r2, [pc, #660]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b2d0:	4ba3      	ldr	r3, [pc, #652]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b2d2:	4614      	mov	r4, r2
 800b2d4:	461d      	mov	r5, r3
 800b2d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b2e2:	4ba0      	ldr	r3, [pc, #640]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b2e4:	331c      	adds	r3, #28
 800b2e6:	f107 020c 	add.w	r2, r7, #12
 800b2ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2ee:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b2f2:	489c      	ldr	r0, [pc, #624]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b2f4:	f003 fa4a 	bl	800e78c <set_rx_frames>
			source = VESC_PACKET;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b2fe:	e081      	b.n	800b404 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800b300:	2300      	movs	r3, #0
 800b302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800b306:	231f      	movs	r3, #31
 800b308:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800b30a:	4b95      	ldr	r3, [pc, #596]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	b29a      	uxth	r2, r3
 800b310:	8b7b      	ldrh	r3, [r7, #26]
 800b312:	4013      	ands	r3, r2
 800b314:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800b316:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800b31a:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800b31c:	4b90      	ldr	r3, [pc, #576]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	b29a      	uxth	r2, r3
 800b322:	8afb      	ldrh	r3, [r7, #22]
 800b324:	4013      	ands	r3, r2
 800b326:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800b328:	8abb      	ldrh	r3, [r7, #20]
 800b32a:	095b      	lsrs	r3, r3, #5
 800b32c:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800b32e:	2300      	movs	r3, #0
 800b330:	62bb      	str	r3, [r7, #40]	; 0x28
 800b332:	e016      	b.n	800b362 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800b334:	4b8c      	ldr	r3, [pc, #560]	; (800b568 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	8b1b      	ldrh	r3, [r3, #24]
 800b342:	8aba      	ldrh	r2, [r7, #20]
 800b344:	429a      	cmp	r2, r3
 800b346:	d109      	bne.n	800b35c <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800b348:	8b3b      	ldrh	r3, [r7, #24]
 800b34a:	2b09      	cmp	r3, #9
 800b34c:	d002      	beq.n	800b354 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800b34e:	8b3b      	ldrh	r3, [r7, #24]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d103      	bne.n	800b35c <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800b354:	2302      	movs	r3, #2
 800b356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800b35a:	e007      	b.n	800b36c <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35e:	3301      	adds	r3, #1
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
 800b362:	4b82      	ldr	r3, [pc, #520]	; (800b56c <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b368:	429a      	cmp	r2, r3
 800b36a:	dbe3      	blt.n	800b334 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800b36c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b370:	2b02      	cmp	r3, #2
 800b372:	d112      	bne.n	800b39a <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800b374:	4a7e      	ldr	r2, [pc, #504]	; (800b570 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800b376:	4b7a      	ldr	r3, [pc, #488]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b378:	4614      	mov	r4, r2
 800b37a:	461d      	mov	r5, r3
 800b37c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800b388:	4b75      	ldr	r3, [pc, #468]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	4619      	mov	r1, r3
 800b392:	4878      	ldr	r0, [pc, #480]	; (800b574 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800b394:	f00d fe6c 	bl	8019070 <memcpy>
 800b398:	e034      	b.n	800b404 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800b39a:	4b71      	ldr	r3, [pc, #452]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d01b      	beq.n	800b3da <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800b3a2:	2b16      	cmp	r3, #22
 800b3a4:	d825      	bhi.n	800b3f2 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800b3a6:	2b14      	cmp	r3, #20
 800b3a8:	d002      	beq.n	800b3b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800b3aa:	2b15      	cmp	r3, #21
 800b3ac:	d00c      	beq.n	800b3c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800b3ae:	e020      	b.n	800b3f2 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800b3b0:	4b6b      	ldr	r3, [pc, #428]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	486f      	ldr	r0, [pc, #444]	; (800b578 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800b3bc:	f00d fe58 	bl	8019070 <memcpy>
					buf2_flag = 0;
 800b3c0:	4b6e      	ldr	r3, [pc, #440]	; (800b57c <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]

					break;
 800b3c6:	e01d      	b.n	800b404 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800b3c8:	4b65      	ldr	r3, [pc, #404]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	f107 030c 	add.w	r3, r7, #12
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	486b      	ldr	r0, [pc, #428]	; (800b580 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800b3d4:	f00d fe4c 	bl	8019070 <memcpy>

					break;
 800b3d8:	e014      	b.n	800b404 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800b3da:	4b61      	ldr	r3, [pc, #388]	; (800b560 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800b3dc:	691a      	ldr	r2, [r3, #16]
 800b3de:	f107 030c 	add.w	r3, r7, #12
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4867      	ldr	r0, [pc, #412]	; (800b584 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800b3e6:	f00d fe43 	bl	8019070 <memcpy>
					buf2_flag = 1;
 800b3ea:	4b64      	ldr	r3, [pc, #400]	; (800b57c <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	701a      	strb	r2, [r3, #0]
					break;
 800b3f0:	e008      	b.n	800b404 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800b3f8:	f107 030c 	add.w	r3, r7, #12
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7f8 ff81 	bl	8004304 <FaulHaber_Handler>
					break;
 800b402:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800b404:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800b40c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fd65 	bl	800aee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b416:	2110      	movs	r1, #16
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f004 ffb1 	bl	8010380 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800b41e:	e0cb      	b.n	800b5b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	4a58      	ldr	r2, [pc, #352]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b426:	2101      	movs	r1, #1
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f004 fe97 	bl	801015c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800b42e:	4b56      	ldr	r3, [pc, #344]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	2b04      	cmp	r3, #4
 800b434:	d118      	bne.n	800b468 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800b436:	4a4b      	ldr	r2, [pc, #300]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b438:	4b53      	ldr	r3, [pc, #332]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b43a:	4614      	mov	r4, r2
 800b43c:	461d      	mov	r5, r3
 800b43e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800b44a:	4b46      	ldr	r3, [pc, #280]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b44c:	331c      	adds	r3, #28
 800b44e:	f107 020c 	add.w	r2, r7, #12
 800b452:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b456:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800b45a:	4842      	ldr	r0, [pc, #264]	; (800b564 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800b45c:	f003 f996 	bl	800e78c <set_rx_frames>
			source = VESC_PACKET;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b466:	e09a      	b.n	800b59e <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800b46e:	231f      	movs	r3, #31
 800b470:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800b472:	4b45      	ldr	r3, [pc, #276]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	b29a      	uxth	r2, r3
 800b478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b47a:	4013      	ands	r3, r2
 800b47c:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800b47e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800b482:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800b484:	4b40      	ldr	r3, [pc, #256]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	b29a      	uxth	r2, r3
 800b48a:	8bfb      	ldrh	r3, [r7, #30]
 800b48c:	4013      	ands	r3, r2
 800b48e:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800b490:	8bbb      	ldrh	r3, [r7, #28]
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800b496:	2300      	movs	r3, #0
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
 800b49a:	e016      	b.n	800b4ca <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800b49c:	4b32      	ldr	r3, [pc, #200]	; (800b568 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	8b1b      	ldrh	r3, [r3, #24]
 800b4aa:	8bba      	ldrh	r2, [r7, #28]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d109      	bne.n	800b4c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800b4b0:	8c3b      	ldrh	r3, [r7, #32]
 800b4b2:	2b09      	cmp	r3, #9
 800b4b4:	d002      	beq.n	800b4bc <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800b4b6:	8c3b      	ldrh	r3, [r7, #32]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d103      	bne.n	800b4c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800b4c2:	e007      	b.n	800b4d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ca:	4b28      	ldr	r3, [pc, #160]	; (800b56c <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	dbe3      	blt.n	800b49c <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800b4d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d112      	bne.n	800b502 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800b4dc:	4a24      	ldr	r2, [pc, #144]	; (800b570 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800b4de:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	461d      	mov	r5, r3
 800b4e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800b4f0:	4b25      	ldr	r3, [pc, #148]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b4f2:	691a      	ldr	r2, [r3, #16]
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	481e      	ldr	r0, [pc, #120]	; (800b574 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800b4fc:	f00d fdb8 	bl	8019070 <memcpy>
 800b500:	e04d      	b.n	800b59e <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800b502:	4b21      	ldr	r3, [pc, #132]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b16      	cmp	r3, #22
 800b508:	d01b      	beq.n	800b542 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800b50a:	2b16      	cmp	r3, #22
 800b50c:	d83e      	bhi.n	800b58c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800b50e:	2b14      	cmp	r3, #20
 800b510:	d002      	beq.n	800b518 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800b512:	2b15      	cmp	r3, #21
 800b514:	d00c      	beq.n	800b530 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800b516:	e039      	b.n	800b58c <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b518:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	4619      	mov	r1, r3
 800b522:	4815      	ldr	r0, [pc, #84]	; (800b578 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800b524:	f00d fda4 	bl	8019070 <memcpy>
					buf2_flag = 0;
 800b528:	4b14      	ldr	r3, [pc, #80]	; (800b57c <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
					break;
 800b52e:	e036      	b.n	800b59e <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800b530:	4b15      	ldr	r3, [pc, #84]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b532:	691a      	ldr	r2, [r3, #16]
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	4619      	mov	r1, r3
 800b53a:	4811      	ldr	r0, [pc, #68]	; (800b580 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800b53c:	f00d fd98 	bl	8019070 <memcpy>
					break;
 800b540:	e02d      	b.n	800b59e <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800b544:	691a      	ldr	r2, [r3, #16]
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	4619      	mov	r1, r3
 800b54c:	480d      	ldr	r0, [pc, #52]	; (800b584 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800b54e:	f00d fd8f 	bl	8019070 <memcpy>
					buf2_flag = 1;
 800b552:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800b554:	2201      	movs	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]
					break;
 800b558:	e021      	b.n	800b59e <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800b55a:	bf00      	nop
 800b55c:	2000a274 	.word	0x2000a274
 800b560:	2000a7e0 	.word	0x2000a7e0
 800b564:	20009a74 	.word	0x20009a74
 800b568:	2000a8fc 	.word	0x2000a8fc
 800b56c:	20000248 	.word	0x20000248
 800b570:	20006d2c 	.word	0x20006d2c
 800b574:	20006d48 	.word	0x20006d48
 800b578:	20006edc 	.word	0x20006edc
 800b57c:	20000254 	.word	0x20000254
 800b580:	20009f7c 	.word	0x20009f7c
 800b584:	2000a0d4 	.word	0x2000a0d4
 800b588:	20006f58 	.word	0x20006f58
					rns_can = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800b592:	f107 030c 	add.w	r3, r7, #12
 800b596:	4618      	mov	r0, r3
 800b598:	f7f8 feb4 	bl	8004304 <FaulHaber_Handler>
					break;
 800b59c:	bf00      	nop
		if(rns_can)
 800b59e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d004      	beq.n	800b5b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800b5a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fc98 	bl	800aee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b5b0:	2110      	movs	r1, #16
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f004 fee4 	bl	8010380 <HAL_CAN_ActivateNotification>
}
 800b5b8:	bf00      	nop
 800b5ba:	3730      	adds	r7, #48	; 0x30
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bdb0      	pop	{r4, r5, r7, pc}

0800b5c0 <set>:
/*********************************************/

#include "common.h"
#include "math.h"

void set(void) {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af04      	add	r7, sp, #16
	Initialize();
 800b5c6:	f7ff fa4f 	bl	800aa68 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800b5ca:	495f      	ldr	r1, [pc, #380]	; (800b748 <set+0x188>)
 800b5cc:	485f      	ldr	r0, [pc, #380]	; (800b74c <set+0x18c>)
 800b5ce:	f7fe f984 	bl	80098da <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800b5d2:	2254      	movs	r2, #84	; 0x54
 800b5d4:	f241 3188 	movw	r1, #5000	; 0x1388
 800b5d8:	485d      	ldr	r0, [pc, #372]	; (800b750 <set+0x190>)
 800b5da:	f7f7 fd41 	bl	8003060 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 3.5, 0.5, 2.0, 0.1);
 800b5de:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800b754 <set+0x194>
 800b5e2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800b5e6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b5ea:	eeb0 0a0c 	vmov.f32	s0, #12	; 0x40600000  3.5
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f7f9 fcbe 	bl	8004f70 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800b5f4:	4a58      	ldr	r2, [pc, #352]	; (800b758 <set+0x198>)
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4858      	ldr	r0, [pc, #352]	; (800b75c <set+0x19c>)
 800b5fa:	f003 f8fd 	bl	800e7f8 <LidarInit>
	OdriveInit(&Odrv1, &hcan1, ODRV3, 27, POSITION_CONTROL, TRAPEZOIDAL_TRAJECTORY);
 800b5fe:	2305      	movs	r3, #5
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	2303      	movs	r3, #3
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	231b      	movs	r3, #27
 800b608:	2201      	movs	r2, #1
 800b60a:	4955      	ldr	r1, [pc, #340]	; (800b760 <set+0x1a0>)
 800b60c:	4855      	ldr	r0, [pc, #340]	; (800b764 <set+0x1a4>)
 800b60e:	f7f9 ffaf 	bl	8005570 <OdriveInit>
	RNS_config(&hcan1);
 800b612:	4853      	ldr	r0, [pc, #332]	; (800b760 <set+0x1a0>)
 800b614:	f000 f8dc 	bl	800b7d0 <RNS_config>
	ServoxInit(&servo_load, &htim9, IP15_PIN, TIM_CHANNEL_2); // BDC4
 800b618:	2304      	movs	r3, #4
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2340      	movs	r3, #64	; 0x40
 800b61e:	4a52      	ldr	r2, [pc, #328]	; (800b768 <set+0x1a8>)
 800b620:	4952      	ldr	r1, [pc, #328]	; (800b76c <set+0x1ac>)
 800b622:	4853      	ldr	r0, [pc, #332]	; (800b770 <set+0x1b0>)
 800b624:	f7ff f888 	bl	800a738 <ServoxInit>
	ServoInitPulseLimit(&servo_load, 1850, 2500);
 800b628:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b62c:	f240 713a 	movw	r1, #1850	; 0x73a
 800b630:	484f      	ldr	r0, [pc, #316]	; (800b770 <set+0x1b0>)
 800b632:	f7ff f9e8 	bl	800aa06 <ServoInitPulseLimit>
	ServoSetPulse(&servo_load, 2500);
 800b636:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800b63a:	484d      	ldr	r0, [pc, #308]	; (800b770 <set+0x1b0>)
 800b63c:	f7ff f99a 	bl	800a974 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
 800b640:	4b4c      	ldr	r3, [pc, #304]	; (800b774 <set+0x1b4>)
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4b4c      	ldr	r3, [pc, #304]	; (800b778 <set+0x1b8>)
 800b646:	4a4d      	ldr	r2, [pc, #308]	; (800b77c <set+0x1bc>)
 800b648:	494d      	ldr	r1, [pc, #308]	; (800b780 <set+0x1c0>)
 800b64a:	2002      	movs	r0, #2
 800b64c:	f7fa fe80 	bl	8006350 <PPInit>
	PP_SetZ(-270, &pp);
 800b650:	4848      	ldr	r0, [pc, #288]	; (800b774 <set+0x1b4>)
 800b652:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800b784 <set+0x1c4>
 800b656:	f7fb fa96 	bl	8006b86 <PP_SetZ>
	PP_PIDPathSet(1.0, 0.5, 0.5, &pp);
 800b65a:	4846      	ldr	r0, [pc, #280]	; (800b774 <set+0x1b4>)
 800b65c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800b660:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800b664:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b668:	f7fa ff44 	bl	80064f4 <PP_PIDPathSet>
	PP_PIDEndSet(0.5, 0.1, 0.7, &pp);
 800b66c:	4841      	ldr	r0, [pc, #260]	; (800b774 <set+0x1b4>)
 800b66e:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800b788 <set+0x1c8>
 800b672:	eddf 0a38 	vldr	s1, [pc, #224]	; 800b754 <set+0x194>
 800b676:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b67a:	f7fa ffc4 	bl	8006606 <PP_PIDEndSet>
	PP_PIDZSet(0.5, 0.05, 0.2, 5.5, &pp);
 800b67e:	483d      	ldr	r0, [pc, #244]	; (800b774 <set+0x1b4>)
 800b680:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800b684:	ed9f 1a41 	vldr	s2, [pc, #260]	; 800b78c <set+0x1cc>
 800b688:	eddf 0a41 	vldr	s1, [pc, #260]	; 800b790 <set+0x1d0>
 800b68c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b690:	f7fa ff80 	bl	8006594 <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800b694:	4937      	ldr	r1, [pc, #220]	; (800b774 <set+0x1b4>)
 800b696:	200a      	movs	r0, #10
 800b698:	f7fb fa8d 	bl	8006bb6 <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800b69c:	493d      	ldr	r1, [pc, #244]	; (800b794 <set+0x1d4>)
 800b69e:	483e      	ldr	r0, [pc, #248]	; (800b798 <set+0x1d8>)
 800b6a0:	f7fe fc30 	bl	8009f04 <R6091U_Init>
//	R6091U_Init(&PITCH_IMU, &huart5);

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800b6a4:	4a3d      	ldr	r2, [pc, #244]	; (800b79c <set+0x1dc>)
 800b6a6:	f107 030c 	add.w	r3, r7, #12
 800b6aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800b6b0:	4a3a      	ldr	r2, [pc, #232]	; (800b79c <set+0x1dc>)
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

//
	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800b6ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6be:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6c2:	edd7 6a05 	vldr	s13, [r7, #20]
 800b6c6:	4b36      	ldr	r3, [pc, #216]	; (800b7a0 <set+0x1e0>)
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	4b36      	ldr	r3, [pc, #216]	; (800b7a4 <set+0x1e4>)
 800b6cc:	4a36      	ldr	r2, [pc, #216]	; (800b7a8 <set+0x1e8>)
 800b6ce:	492c      	ldr	r1, [pc, #176]	; (800b780 <set+0x1c0>)
 800b6d0:	4836      	ldr	r0, [pc, #216]	; (800b7ac <set+0x1ec>)
 800b6d2:	eef0 1a66 	vmov.f32	s3, s13
 800b6d6:	eeb0 1a47 	vmov.f32	s2, s14
 800b6da:	eef0 0a67 	vmov.f32	s1, s15
 800b6de:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800b7b0 <set+0x1f0>
 800b6e2:	f7f5 fc83 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800b6e6:	482e      	ldr	r0, [pc, #184]	; (800b7a0 <set+0x1e0>)
 800b6e8:	f7f5 fcad 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800b6ec:	edd7 7a00 	vldr	s15, [r7]
 800b6f0:	ed97 7a01 	vldr	s14, [r7, #4]
 800b6f4:	edd7 6a02 	vldr	s13, [r7, #8]
 800b6f8:	4b2e      	ldr	r3, [pc, #184]	; (800b7b4 <set+0x1f4>)
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	4b2e      	ldr	r3, [pc, #184]	; (800b7b8 <set+0x1f8>)
 800b6fe:	4a2f      	ldr	r2, [pc, #188]	; (800b7bc <set+0x1fc>)
 800b700:	491e      	ldr	r1, [pc, #120]	; (800b77c <set+0x1bc>)
 800b702:	482f      	ldr	r0, [pc, #188]	; (800b7c0 <set+0x200>)
 800b704:	eef0 1a66 	vmov.f32	s3, s13
 800b708:	eeb0 1a47 	vmov.f32	s2, s14
 800b70c:	eef0 0a67 	vmov.f32	s1, s15
 800b710:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800b7b0 <set+0x1f0>
 800b714:	f7f5 fc6a 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800b718:	4826      	ldr	r0, [pc, #152]	; (800b7b4 <set+0x1f4>)
 800b71a:	f7f5 fc94 	bl	8001046 <ABTEstimateInit>

	FHInit(&fh1, &hcan2, 49, 0, 2000, 2147483647, -2147483647);
 800b71e:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <set+0x204>)
 800b720:	9302      	str	r3, [sp, #8]
 800b722:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	2300      	movs	r3, #0
 800b730:	2231      	movs	r2, #49	; 0x31
 800b732:	4925      	ldr	r1, [pc, #148]	; (800b7c8 <set+0x208>)
 800b734:	4825      	ldr	r0, [pc, #148]	; (800b7cc <set+0x20c>)
 800b736:	f7f8 f9cb 	bl	8003ad0 <FHInit>
	FH_WaitInit();
 800b73a:	f7f8 fa03 	bl	8003b44 <FH_WaitInit>
}
 800b73e:	bf00      	nop
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20007010 	.word	0x20007010
 800b74c:	2000a300 	.word	0x2000a300
 800b750:	200063a8 	.word	0x200063a8
 800b754:	3dcccccd 	.word	0x3dcccccd
 800b758:	20009438 	.word	0x20009438
 800b75c:	200064ac 	.word	0x200064ac
 800b760:	2000a274 	.word	0x2000a274
 800b764:	20009bc8 	.word	0x20009bc8
 800b768:	40020400 	.word	0x40020400
 800b76c:	20006428 	.word	0x20006428
 800b770:	20007744 	.word	0x20007744
 800b774:	20007150 	.word	0x20007150
 800b778:	20009cc4 	.word	0x20009cc4
 800b77c:	20009bb8 	.word	0x20009bb8
 800b780:	20009cfc 	.word	0x20009cfc
 800b784:	c3870000 	.word	0xc3870000
 800b788:	3f333333 	.word	0x3f333333
 800b78c:	3e4ccccd 	.word	0x3e4ccccd
 800b790:	3d4ccccd 	.word	0x3d4ccccd
 800b794:	20006078 	.word	0x20006078
 800b798:	200070ec 	.word	0x200070ec
 800b79c:	0801f2ec 	.word	0x0801f2ec
 800b7a0:	2000a5f4 	.word	0x2000a5f4
 800b7a4:	20006ae4 	.word	0x20006ae4
 800b7a8:	20009bc4 	.word	0x20009bc4
 800b7ac:	20006db8 	.word	0x20006db8
 800b7b0:	3ba3d70a 	.word	0x3ba3d70a
 800b7b4:	20007c64 	.word	0x20007c64
 800b7b8:	20007698 	.word	0x20007698
 800b7bc:	20007064 	.word	0x20007064
 800b7c0:	2000a618 	.word	0x2000a618
 800b7c4:	80000001 	.word	0x80000001
 800b7c8:	2000940c 	.word	0x2000940c
 800b7cc:	2000a598 	.word	0x2000a598

0800b7d0 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af06      	add	r7, sp, #24
 800b7d6:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800b7d8:	49a7      	ldr	r1, [pc, #668]	; (800ba78 <RNS_config+0x2a8>)
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7fe fc74 	bl	800a0c8 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00000100, (float) fwd_omni,
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7f4:	e9cd 2300 	strd	r2, r3, [sp]
 800b7f8:	f04f 0200 	mov.w	r2, #0
 800b7fc:	4b9f      	ldr	r3, [pc, #636]	; (800ba7c <RNS_config+0x2ac>)
 800b7fe:	2124      	movs	r1, #36	; 0x24
 800b800:	489d      	ldr	r0, [pc, #628]	; (800ba78 <RNS_config+0x2a8>)
 800b802:	f7fe fddf 	bl	800a3c4 <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 1.0,
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	4b9d      	ldr	r3, [pc, #628]	; (800ba80 <RNS_config+0x2b0>)
 800b80c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b810:	a37b      	add	r3, pc, #492	; (adr r3, 800ba00 <RNS_config+0x230>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	4b98      	ldr	r3, [pc, #608]	; (800ba80 <RNS_config+0x2b0>)
 800b820:	e9cd 2300 	strd	r2, r3, [sp]
 800b824:	a376      	add	r3, pc, #472	; (adr r3, 800ba00 <RNS_config+0x230>)
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	2149      	movs	r1, #73	; 0x49
 800b82c:	4892      	ldr	r0, [pc, #584]	; (800ba78 <RNS_config+0x2a8>)
 800b82e:	f7fe fdc9 	bl	800a3c4 <RNSSet>
			0.05 / 4000.0 * 3.142, 1.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800b832:	a375      	add	r3, pc, #468	; (adr r3, 800ba08 <RNS_config+0x238>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	e9cd 2300 	strd	r2, r3, [sp]
 800b83c:	a374      	add	r3, pc, #464	; (adr r3, 800ba10 <RNS_config+0x240>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	211f      	movs	r1, #31
 800b844:	488c      	ldr	r0, [pc, #560]	; (800ba78 <RNS_config+0x2a8>)
 800b846:	f7fe fdbd 	bl	800a3c4 <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800b84a:	a373      	add	r3, pc, #460	; (adr r3, 800ba18 <RNS_config+0x248>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	e9cd 2300 	strd	r2, r3, [sp]
 800b854:	a372      	add	r3, pc, #456	; (adr r3, 800ba20 <RNS_config+0x250>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	2120      	movs	r1, #32
 800b85c:	4886      	ldr	r0, [pc, #536]	; (800ba78 <RNS_config+0x2a8>)
 800b85e:	f7fe fdb1 	bl	800a3c4 <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 7.29, 19999.0);
 800b862:	a371      	add	r3, pc, #452	; (adr r3, 800ba28 <RNS_config+0x258>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b86c:	a370      	add	r3, pc, #448	; (adr r3, 800ba30 <RNS_config+0x260>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	e9cd 2300 	strd	r2, r3, [sp]
 800b876:	f04f 0200 	mov.w	r2, #0
 800b87a:	4b81      	ldr	r3, [pc, #516]	; (800ba80 <RNS_config+0x2b0>)
 800b87c:	212b      	movs	r1, #43	; 0x2b
 800b87e:	487e      	ldr	r0, [pc, #504]	; (800ba78 <RNS_config+0x2a8>)
 800b880:	f7fe fda0 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.01, 19999.0);
 800b884:	a368      	add	r3, pc, #416	; (adr r3, 800ba28 <RNS_config+0x258>)
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b88e:	a36a      	add	r3, pc, #424	; (adr r3, 800ba38 <RNS_config+0x268>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	e9cd 2300 	strd	r2, r3, [sp]
 800b898:	f04f 0200 	mov.w	r2, #0
 800b89c:	4b78      	ldr	r3, [pc, #480]	; (800ba80 <RNS_config+0x2b0>)
 800b89e:	212c      	movs	r1, #44	; 0x2c
 800b8a0:	4875      	ldr	r0, [pc, #468]	; (800ba78 <RNS_config+0x2a8>)
 800b8a2:	f7fe fd8f 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 8.4, 19999.0);
 800b8a6:	a360      	add	r3, pc, #384	; (adr r3, 800ba28 <RNS_config+0x258>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8b0:	a363      	add	r3, pc, #396	; (adr r3, 800ba40 <RNS_config+0x270>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	e9cd 2300 	strd	r2, r3, [sp]
 800b8ba:	f04f 0200 	mov.w	r2, #0
 800b8be:	4b70      	ldr	r3, [pc, #448]	; (800ba80 <RNS_config+0x2b0>)
 800b8c0:	212d      	movs	r1, #45	; 0x2d
 800b8c2:	486d      	ldr	r0, [pc, #436]	; (800ba78 <RNS_config+0x2a8>)
 800b8c4:	f7fe fd7e 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.24, 19999.0);
 800b8c8:	a357      	add	r3, pc, #348	; (adr r3, 800ba28 <RNS_config+0x258>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8d2:	a35d      	add	r3, pc, #372	; (adr r3, 800ba48 <RNS_config+0x278>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	e9cd 2300 	strd	r2, r3, [sp]
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	4b67      	ldr	r3, [pc, #412]	; (800ba80 <RNS_config+0x2b0>)
 800b8e2:	212e      	movs	r1, #46	; 0x2e
 800b8e4:	4864      	ldr	r0, [pc, #400]	; (800ba78 <RNS_config+0x2a8>)
 800b8e6:	f7fe fd6d 	bl	800a3c4 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800b8ea:	a359      	add	r3, pc, #356	; (adr r3, 800ba50 <RNS_config+0x280>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8f4:	f04f 0200 	mov.w	r2, #0
 800b8f8:	4b62      	ldr	r3, [pc, #392]	; (800ba84 <RNS_config+0x2b4>)
 800b8fa:	e9cd 2300 	strd	r2, r3, [sp]
 800b8fe:	f04f 0200 	mov.w	r2, #0
 800b902:	4b5f      	ldr	r3, [pc, #380]	; (800ba80 <RNS_config+0x2b0>)
 800b904:	212f      	movs	r1, #47	; 0x2f
 800b906:	485c      	ldr	r0, [pc, #368]	; (800ba78 <RNS_config+0x2a8>)
 800b908:	f7fe fd5c 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.75, 0.001);   //
 800b90c:	a350      	add	r3, pc, #320	; (adr r3, 800ba50 <RNS_config+0x280>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b916:	f04f 0200 	mov.w	r2, #0
 800b91a:	4b5b      	ldr	r3, [pc, #364]	; (800ba88 <RNS_config+0x2b8>)
 800b91c:	e9cd 2300 	strd	r2, r3, [sp]
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	4b56      	ldr	r3, [pc, #344]	; (800ba80 <RNS_config+0x2b0>)
 800b926:	2130      	movs	r1, #48	; 0x30
 800b928:	4853      	ldr	r0, [pc, #332]	; (800ba78 <RNS_config+0x2a8>)
 800b92a:	f7fe fd4b 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800b92e:	a348      	add	r3, pc, #288	; (adr r3, 800ba50 <RNS_config+0x280>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	4b51      	ldr	r3, [pc, #324]	; (800ba84 <RNS_config+0x2b4>)
 800b93e:	e9cd 2300 	strd	r2, r3, [sp]
 800b942:	f04f 0200 	mov.w	r2, #0
 800b946:	4b4e      	ldr	r3, [pc, #312]	; (800ba80 <RNS_config+0x2b0>)
 800b948:	2131      	movs	r1, #49	; 0x31
 800b94a:	484b      	ldr	r0, [pc, #300]	; (800ba78 <RNS_config+0x2a8>)
 800b94c:	f7fe fd3a 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800b950:	a33f      	add	r3, pc, #252	; (adr r3, 800ba50 <RNS_config+0x280>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b95a:	f04f 0200 	mov.w	r2, #0
 800b95e:	4b49      	ldr	r3, [pc, #292]	; (800ba84 <RNS_config+0x2b4>)
 800b960:	e9cd 2300 	strd	r2, r3, [sp]
 800b964:	f04f 0200 	mov.w	r2, #0
 800b968:	4b45      	ldr	r3, [pc, #276]	; (800ba80 <RNS_config+0x2b0>)
 800b96a:	2132      	movs	r1, #50	; 0x32
 800b96c:	4842      	ldr	r0, [pc, #264]	; (800ba78 <RNS_config+0x2a8>)
 800b96e:	f7fe fd29 	bl	800a3c4 <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800b972:	2116      	movs	r1, #22
 800b974:	4840      	ldr	r0, [pc, #256]	; (800ba78 <RNS_config+0x2a8>)
 800b976:	f7fe fd25 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800b97a:	f04f 0200 	mov.w	r2, #0
 800b97e:	4b43      	ldr	r3, [pc, #268]	; (800ba8c <RNS_config+0x2bc>)
 800b980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b984:	f04f 0200 	mov.w	r2, #0
 800b988:	4b40      	ldr	r3, [pc, #256]	; (800ba8c <RNS_config+0x2bc>)
 800b98a:	e9cd 2300 	strd	r2, r3, [sp]
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	4b3b      	ldr	r3, [pc, #236]	; (800ba80 <RNS_config+0x2b0>)
 800b994:	2146      	movs	r1, #70	; 0x46
 800b996:	4838      	ldr	r0, [pc, #224]	; (800ba78 <RNS_config+0x2a8>)
 800b998:	f7fe fd14 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800b99c:	a32e      	add	r3, pc, #184	; (adr r3, 800ba58 <RNS_config+0x288>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9a6:	a32e      	add	r3, pc, #184	; (adr r3, 800ba60 <RNS_config+0x290>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	e9cd 2300 	strd	r2, r3, [sp]
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	4b35      	ldr	r3, [pc, #212]	; (800ba8c <RNS_config+0x2bc>)
 800b9b6:	2147      	movs	r1, #71	; 0x47
 800b9b8:	482f      	ldr	r0, [pc, #188]	; (800ba78 <RNS_config+0x2a8>)
 800b9ba:	f7fe fd03 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 5.5);
 800b9be:	f04f 0200 	mov.w	r2, #0
 800b9c2:	4b33      	ldr	r3, [pc, #204]	; (800ba90 <RNS_config+0x2c0>)
 800b9c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9c8:	a327      	add	r3, pc, #156	; (adr r3, 800ba68 <RNS_config+0x298>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9d2:	a327      	add	r3, pc, #156	; (adr r3, 800ba70 <RNS_config+0x2a0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	e9cd 2300 	strd	r2, r3, [sp]
 800b9dc:	f04f 0200 	mov.w	r2, #0
 800b9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ba8c <RNS_config+0x2bc>)
 800b9e2:	214f      	movs	r1, #79	; 0x4f
 800b9e4:	4824      	ldr	r0, [pc, #144]	; (800ba78 <RNS_config+0x2a8>)
 800b9e6:	f7fe fced 	bl	800a3c4 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800b9ea:	f04f 0200 	mov.w	r2, #0
 800b9ee:	4b29      	ldr	r3, [pc, #164]	; (800ba94 <RNS_config+0x2c4>)
 800b9f0:	211d      	movs	r1, #29
 800b9f2:	4821      	ldr	r0, [pc, #132]	; (800ba78 <RNS_config+0x2a8>)
 800b9f4:	f7fe fce6 	bl	800a3c4 <RNSSet>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	b9727cf5 	.word	0xb9727cf5
 800ba04:	3f049766 	.word	0x3f049766
 800ba08:	a0000000 	.word	0xa0000000
 800ba0c:	3f564e14 	.word	0x3f564e14
 800ba10:	d7a1868c 	.word	0xd7a1868c
 800ba14:	3ff1f604 	.word	0x3ff1f604
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	3f58fd94 	.word	0x3f58fd94
 800ba20:	7c2c0ed1 	.word	0x7c2c0ed1
 800ba24:	3ff00652 	.word	0x3ff00652
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	40d387c0 	.word	0x40d387c0
 800ba30:	af953edc 	.word	0xaf953edc
 800ba34:	3fc18eec 	.word	0x3fc18eec
 800ba38:	d52c6caa 	.word	0xd52c6caa
 800ba3c:	3fbff5c5 	.word	0x3fbff5c5
 800ba40:	9e79e79e 	.word	0x9e79e79e
 800ba44:	3fbe79e7 	.word	0x3fbe79e7
 800ba48:	e7254814 	.word	0xe7254814
 800ba4c:	3fbf1165 	.word	0x3fbf1165
 800ba50:	d2f1a9fc 	.word	0xd2f1a9fc
 800ba54:	3f50624d 	.word	0x3f50624d
 800ba58:	66666666 	.word	0x66666666
 800ba5c:	3fe66666 	.word	0x3fe66666
 800ba60:	9999999a 	.word	0x9999999a
 800ba64:	3fb99999 	.word	0x3fb99999
 800ba68:	9999999a 	.word	0x9999999a
 800ba6c:	3fc99999 	.word	0x3fc99999
 800ba70:	9999999a 	.word	0x9999999a
 800ba74:	3fa99999 	.word	0x3fa99999
 800ba78:	20009314 	.word	0x20009314
 800ba7c:	40100000 	.word	0x40100000
 800ba80:	3ff00000 	.word	0x3ff00000
 800ba84:	3ff80000 	.word	0x3ff80000
 800ba88:	3ffc0000 	.word	0x3ffc0000
 800ba8c:	3fe00000 	.word	0x3fe00000
 800ba90:	40160000 	.word	0x40160000
 800ba94:	40240000 	.word	0x40240000

0800ba98 <RobotStart>:
		realMODN(&ps4, &rns);
	}

}

void RobotStart() {
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0
	cylinder_retract;
 800ba9c:	4a35      	ldr	r2, [pc, #212]	; (800bb74 <RobotStart+0xdc>)
 800ba9e:	7e13      	ldrb	r3, [r2, #24]
 800baa0:	f36f 1386 	bfc	r3, #6, #1
 800baa4:	7613      	strb	r3, [r2, #24]
	mode = 0;
 800baa6:	4b34      	ldr	r3, [pc, #208]	; (800bb78 <RobotStart+0xe0>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
	before = 0;
 800baac:	4b33      	ldr	r3, [pc, #204]	; (800bb7c <RobotStart+0xe4>)
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
	moveSpeed = 3.5;
 800bab2:	4b33      	ldr	r3, [pc, #204]	; (800bb80 <RobotStart+0xe8>)
 800bab4:	4a33      	ldr	r2, [pc, #204]	; (800bb84 <RobotStart+0xec>)
 800bab6:	601a      	str	r2, [r3, #0]
	pitch_tol = 1;
 800bab8:	4b33      	ldr	r3, [pc, #204]	; (800bb88 <RobotStart+0xf0>)
 800baba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800babe:	601a      	str	r2, [r3, #0]
	target_pitch = 0;
 800bac0:	4b32      	ldr	r3, [pc, #200]	; (800bb8c <RobotStart+0xf4>)
 800bac2:	f04f 0200 	mov.w	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]

	sys.pitch_cali = 0;
 800bac8:	4a31      	ldr	r2, [pc, #196]	; (800bb90 <RobotStart+0xf8>)
 800baca:	7853      	ldrb	r3, [r2, #1]
 800bacc:	f36f 0382 	bfc	r3, #2, #1
 800bad0:	7053      	strb	r3, [r2, #1]
	sys.set_pitch = 0;
 800bad2:	4a2f      	ldr	r2, [pc, #188]	; (800bb90 <RobotStart+0xf8>)
 800bad4:	7853      	ldrb	r3, [r2, #1]
 800bad6:	f36f 03c3 	bfc	r3, #3, #1
 800bada:	7053      	strb	r3, [r2, #1]
	sys.pick_start = 0;
 800badc:	4a2c      	ldr	r2, [pc, #176]	; (800bb90 <RobotStart+0xf8>)
 800bade:	7853      	ldrb	r3, [r2, #1]
 800bae0:	f36f 1345 	bfc	r3, #5, #1
 800bae4:	7053      	strb	r3, [r2, #1]
	odrv0_stop_once = 0;
 800bae6:	4b2b      	ldr	r3, [pc, #172]	; (800bb94 <RobotStart+0xfc>)
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
	cylinder_distract = 0;
 800baec:	4b2a      	ldr	r3, [pc, #168]	; (800bb98 <RobotStart+0x100>)
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]
	cylinder_up = 0;
 800baf2:	4b2a      	ldr	r3, [pc, #168]	; (800bb9c <RobotStart+0x104>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
	fh_current_pos = 0;
 800baf8:	4b29      	ldr	r3, [pc, #164]	; (800bba0 <RobotStart+0x108>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
	loaded_ring = 0;
 800bafe:	4b29      	ldr	r3, [pc, #164]	; (800bba4 <RobotStart+0x10c>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
	load_for_shot = 0;
 800bb04:	4b28      	ldr	r3, [pc, #160]	; (800bba8 <RobotStart+0x110>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
	shooting = 0;
 800bb0a:	4b28      	ldr	r3, [pc, #160]	; (800bbac <RobotStart+0x114>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]
	turn_count = 0.465;
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <RobotStart+0x118>)
 800bb12:	4a28      	ldr	r2, [pc, #160]	; (800bbb4 <RobotStart+0x11c>)
 800bb14:	601a      	str	r2, [r3, #0]
//	turn_count = 0.75;
	using_servo = 0;
 800bb16:	4b28      	ldr	r3, [pc, #160]	; (800bbb8 <RobotStart+0x120>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
	fh_vel = 0;
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <RobotStart+0x124>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	601a      	str	r2, [r3, #0]
	fh1.start_pos = 0;
 800bb22:	4a27      	ldr	r2, [pc, #156]	; (800bbc0 <RobotStart+0x128>)
 800bb24:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800bb28:	f36f 1386 	bfc	r3, #6, #1
 800bb2c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	pick_at_right = 0;
 800bb30:	4b24      	ldr	r3, [pc, #144]	; (800bbc4 <RobotStart+0x12c>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
	pick_at_left = 0;
 800bb36:	4b24      	ldr	r3, [pc, #144]	; (800bbc8 <RobotStart+0x130>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
	pp_from_left = 0;
 800bb3c:	4b23      	ldr	r3, [pc, #140]	; (800bbcc <RobotStart+0x134>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]
	pp_from_right = 0;
 800bb42:	4b23      	ldr	r3, [pc, #140]	; (800bbd0 <RobotStart+0x138>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	601a      	str	r2, [r3, #0]
	reload_ring = 0;
 800bb48:	4b22      	ldr	r3, [pc, #136]	; (800bbd4 <RobotStart+0x13c>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
	target_pitch = 0;
 800bb4e:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <RobotStart+0xf4>)
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800bb56:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <RobotStart+0x140>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
	pitch_tol = 1;
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <RobotStart+0xf0>)
 800bb5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bb62:	601a      	str	r2, [r3, #0]
	pitch_cali = 0;
 800bb64:	4b1d      	ldr	r3, [pc, #116]	; (800bbdc <RobotStart+0x144>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]
//	shoot_from_left = 0;
//	pole_shot_left = 0;
}
 800bb6a:	bf00      	nop
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	20009948 	.word	0x20009948
 800bb78:	20009684 	.word	0x20009684
 800bb7c:	20007724 	.word	0x20007724
 800bb80:	20009ce4 	.word	0x20009ce4
 800bb84:	40600000 	.word	0x40600000
 800bb88:	2000a37c 	.word	0x2000a37c
 800bb8c:	2000938c 	.word	0x2000938c
 800bb90:	20007740 	.word	0x20007740
 800bb94:	2000a0e0 	.word	0x2000a0e0
 800bb98:	20009cf8 	.word	0x20009cf8
 800bb9c:	200099c0 	.word	0x200099c0
 800bba0:	20007728 	.word	0x20007728
 800bba4:	20009aa4 	.word	0x20009aa4
 800bba8:	2000968c 	.word	0x2000968c
 800bbac:	2000a0f8 	.word	0x2000a0f8
 800bbb0:	2000769c 	.word	0x2000769c
 800bbb4:	3eee147b 	.word	0x3eee147b
 800bbb8:	2000a5c4 	.word	0x2000a5c4
 800bbbc:	20009cec 	.word	0x20009cec
 800bbc0:	2000a598 	.word	0x2000a598
 800bbc4:	20007148 	.word	0x20007148
 800bbc8:	2000982c 	.word	0x2000982c
 800bbcc:	20009bbc 	.word	0x20009bbc
 800bbd0:	2000a904 	.word	0x2000a904
 800bbd4:	20007bf4 	.word	0x20007bf4
 800bbd8:	20009a0c 	.word	0x20009a0c
 800bbdc:	20009b48 	.word	0x20009b48

0800bbe0 <Auto>:
		led9= !led9;
		before = HAL_GetTick();
	}
}

void Auto() {
 800bbe0:	b5b0      	push	{r4, r5, r7, lr}
 800bbe2:	b0d4      	sub	sp, #336	; 0x150
 800bbe4:	af00      	add	r7, sp, #0
	if (ps4.button == LEFT) {
 800bbe6:	4bab      	ldr	r3, [pc, #684]	; (800be94 <Auto+0x2b4>)
 800bbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbea:	2b80      	cmp	r3, #128	; 0x80
 800bbec:	d11d      	bne.n	800bc2a <Auto+0x4a>
		while (ps4.button == LEFT);
 800bbee:	bf00      	nop
 800bbf0:	4ba8      	ldr	r3, [pc, #672]	; (800be94 <Auto+0x2b4>)
 800bbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbf4:	2b80      	cmp	r3, #128	; 0x80
 800bbf6:	d0fb      	beq.n	800bbf0 <Auto+0x10>
		sys.pick_start = 1;
 800bbf8:	4aa7      	ldr	r2, [pc, #668]	; (800be98 <Auto+0x2b8>)
 800bbfa:	7853      	ldrb	r3, [r2, #1]
 800bbfc:	f043 0320 	orr.w	r3, r3, #32
 800bc00:	7053      	strb	r3, [r2, #1]
		float point[1][7] = { {0.6, -10, 0, 0, 0, 1, 0 } };
 800bc02:	4ba6      	ldr	r3, [pc, #664]	; (800be9c <Auto+0x2bc>)
 800bc04:	f507 749a 	add.w	r4, r7, #308	; 0x134
 800bc08:	461d      	mov	r5, r3
 800bc0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(point, 1, &pp);
 800bc16:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800bc1a:	4aa1      	ldr	r2, [pc, #644]	; (800bea0 <Auto+0x2c0>)
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fa fd0d 	bl	800663e <PP_start>
		pick_at_left = 1;
 800bc24:	4b9f      	ldr	r3, [pc, #636]	; (800bea4 <Auto+0x2c4>)
 800bc26:	2201      	movs	r2, #1
 800bc28:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800bc2a:	4b9a      	ldr	r3, [pc, #616]	; (800be94 <Auto+0x2b4>)
 800bc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	f040 8203 	bne.w	800c03a <Auto+0x45a>
	{
		while(ps4.button == RIGHT);
 800bc34:	bf00      	nop
 800bc36:	4b97      	ldr	r3, [pc, #604]	; (800be94 <Auto+0x2b4>)
 800bc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	d0fb      	beq.n	800bc36 <Auto+0x56>
		ResetCoordinate();
 800bc3e:	f000 fba5 	bl	800c38c <ResetCoordinate>

		float pole_from_left_2[1][7] = { {1.0, 0.0, -3.28, 0, 0, 1, 0 } };
 800bc42:	4b99      	ldr	r3, [pc, #612]	; (800bea8 <Auto+0x2c8>)
 800bc44:	f507 748c 	add.w	r4, r7, #280	; 0x118
 800bc48:	461d      	mov	r5, r3
 800bc4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		float pole_from_left_3[1][7] = { {1.0, 0.0, -3.15, 0, 0, 1, 0 } };
 800bc56:	4b95      	ldr	r3, [pc, #596]	; (800beac <Auto+0x2cc>)
 800bc58:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 800bc5c:	461d      	mov	r5, r3
 800bc5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		float pole_from_right_2[1][7] = {{1.0, 0.0, 3.19, 0, 0, 1, 0}};
 800bc6a:	4b91      	ldr	r3, [pc, #580]	; (800beb0 <Auto+0x2d0>)
 800bc6c:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800bc70:	461d      	mov	r5, r3
 800bc72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		float pole_from_right_3[1][7] = {{1.0, -0.0, 3.2, 0, 0, 1, 0}};
 800bc7e:	4b8d      	ldr	r3, [pc, #564]	; (800beb4 <Auto+0x2d4>)
 800bc80:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800bc84:	461d      	mov	r5, r3
 800bc86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		float type_2_pole_from_left[1][7] = {{1.0, 0.29, 3.51, 0, 1, 0}};
 800bc92:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800bc96:	2200      	movs	r2, #0
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	605a      	str	r2, [r3, #4]
 800bc9c:	609a      	str	r2, [r3, #8]
 800bc9e:	60da      	str	r2, [r3, #12]
 800bca0:	611a      	str	r2, [r3, #16]
 800bca2:	615a      	str	r2, [r3, #20]
 800bca4:	619a      	str	r2, [r3, #24]
 800bca6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcae:	4b82      	ldr	r3, [pc, #520]	; (800beb8 <Auto+0x2d8>)
 800bcb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcb4:	4b81      	ldr	r3, [pc, #516]	; (800bebc <Auto+0x2dc>)
 800bcb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		float type_2_pole_from_left_2[1][7] = {{1.0, 0.0, 2.86, 0, 1, 0}};
 800bcc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	605a      	str	r2, [r3, #4]
 800bccc:	609a      	str	r2, [r3, #8]
 800bcce:	60da      	str	r2, [r3, #12]
 800bcd0:	611a      	str	r2, [r3, #16]
 800bcd2:	615a      	str	r2, [r3, #20]
 800bcd4:	619a      	str	r2, [r3, #24]
 800bcd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcde:	4b78      	ldr	r3, [pc, #480]	; (800bec0 <Auto+0x2e0>)
 800bce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bce4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		float type_2_pole_from_right[1][7] = {{1.0, 0.29, -0.07, 0, 1, 0}};
 800bcec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	605a      	str	r2, [r3, #4]
 800bcf6:	609a      	str	r2, [r3, #8]
 800bcf8:	60da      	str	r2, [r3, #12]
 800bcfa:	611a      	str	r2, [r3, #16]
 800bcfc:	615a      	str	r2, [r3, #20]
 800bcfe:	619a      	str	r2, [r3, #24]
 800bd00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd04:	673b      	str	r3, [r7, #112]	; 0x70
 800bd06:	4b6c      	ldr	r3, [pc, #432]	; (800beb8 <Auto+0x2d8>)
 800bd08:	677b      	str	r3, [r7, #116]	; 0x74
 800bd0a:	4b6e      	ldr	r3, [pc, #440]	; (800bec4 <Auto+0x2e4>)
 800bd0c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		float type_2_pole_from_right_2[1][7] = {{1.0, 0.07, -2.79, 0, 1, 0}};
 800bd16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	605a      	str	r2, [r3, #4]
 800bd20:	609a      	str	r2, [r3, #8]
 800bd22:	60da      	str	r2, [r3, #12]
 800bd24:	611a      	str	r2, [r3, #16]
 800bd26:	615a      	str	r2, [r3, #20]
 800bd28:	619a      	str	r2, [r3, #24]
 800bd2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd2e:	657b      	str	r3, [r7, #84]	; 0x54
 800bd30:	4b65      	ldr	r3, [pc, #404]	; (800bec8 <Auto+0x2e8>)
 800bd32:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd34:	4b65      	ldr	r3, [pc, #404]	; (800becc <Auto+0x2ec>)
 800bd36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bd3c:	667b      	str	r3, [r7, #100]	; 0x64

		if(shoot_from_left)
 800bd3e:	4b64      	ldr	r3, [pc, #400]	; (800bed0 <Auto+0x2f0>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 80ca 	beq.w	800bedc <Auto+0x2fc>
		{
			pole_shot_left++;
 800bd48:	4b62      	ldr	r3, [pc, #392]	; (800bed4 <Auto+0x2f4>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	4a61      	ldr	r2, [pc, #388]	; (800bed4 <Auto+0x2f4>)
 800bd50:	6013      	str	r3, [r2, #0]
			switch(pole_shot_left)
 800bd52:	4b60      	ldr	r3, [pc, #384]	; (800bed4 <Auto+0x2f4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	f200 816c 	bhi.w	800c036 <Auto+0x456>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <Auto+0x184>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bdbd 	.word	0x0800bdbd
 800bd6c:	0800be05 	.word	0x0800be05
 800bd70:	0800be49 	.word	0x0800be49
			{
				case 1:
				PP_start(pole_from_left_2, 1, &pp);
 800bd74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd78:	4a49      	ldr	r2, [pc, #292]	; (800bea0 <Auto+0x2c0>)
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fa fc5e 	bl	800663e <PP_start>
				while(pp.pp_start == 1)
 800bd82:	e00d      	b.n	800bda0 <Auto+0x1c0>
				{
					if(ps4.button == SQUARE)
 800bd84:	4b43      	ldr	r3, [pc, #268]	; (800be94 <Auto+0x2b4>)
 800bd86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd8c:	d108      	bne.n	800bda0 <Auto+0x1c0>
					{
						while(ps4.button == SQUARE);
 800bd8e:	bf00      	nop
 800bd90:	4b40      	ldr	r3, [pc, #256]	; (800be94 <Auto+0x2b4>)
 800bd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd98:	d0fa      	beq.n	800bd90 <Auto+0x1b0>
						StopAutoPP();
 800bd9a:	f000 fab9 	bl	800c310 <StopAutoPP>
						break;
 800bd9e:	e007      	b.n	800bdb0 <Auto+0x1d0>
				while(pp.pp_start == 1)
 800bda0:	4b3f      	ldr	r3, [pc, #252]	; (800bea0 <Auto+0x2c0>)
 800bda2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e9      	bne.n	800bd84 <Auto+0x1a4>
					}
				}
				PP_SetZ(-90, &pp);
 800bdb0:	483b      	ldr	r0, [pc, #236]	; (800bea0 <Auto+0x2c0>)
 800bdb2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800bed8 <Auto+0x2f8>
 800bdb6:	f7fa fee6 	bl	8006b86 <PP_SetZ>
				break;
 800bdba:	e13c      	b.n	800c036 <Auto+0x456>
			case 2:
				PP_start(pole_from_left_3, 1, &pp);
 800bdbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800bdc0:	4a37      	ldr	r2, [pc, #220]	; (800bea0 <Auto+0x2c0>)
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fa fc3a 	bl	800663e <PP_start>
				while(pp.pp_start == 1)
 800bdca:	e00d      	b.n	800bde8 <Auto+0x208>
				{
					if(ps4.button == SQUARE)
 800bdcc:	4b31      	ldr	r3, [pc, #196]	; (800be94 <Auto+0x2b4>)
 800bdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdd4:	d108      	bne.n	800bde8 <Auto+0x208>
					{
						while(ps4.button == SQUARE);
 800bdd6:	bf00      	nop
 800bdd8:	4b2e      	ldr	r3, [pc, #184]	; (800be94 <Auto+0x2b4>)
 800bdda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bde0:	d0fa      	beq.n	800bdd8 <Auto+0x1f8>
						StopAutoPP();
 800bde2:	f000 fa95 	bl	800c310 <StopAutoPP>
						break;
 800bde6:	e007      	b.n	800bdf8 <Auto+0x218>
				while(pp.pp_start == 1)
 800bde8:	4b2d      	ldr	r3, [pc, #180]	; (800bea0 <Auto+0x2c0>)
 800bdea:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e9      	bne.n	800bdcc <Auto+0x1ec>
					}
				}
				PP_SetZ(-90, &pp);
 800bdf8:	4829      	ldr	r0, [pc, #164]	; (800bea0 <Auto+0x2c0>)
 800bdfa:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800bed8 <Auto+0x2f8>
 800bdfe:	f7fa fec2 	bl	8006b86 <PP_SetZ>
				break;
 800be02:	e118      	b.n	800c036 <Auto+0x456>

			case 3:
				shotType2();
 800be04:	f000 fa36 	bl	800c274 <shotType2>
				PP_start(type_2_pole_from_left, 1, &pp);
 800be08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800be0c:	4a24      	ldr	r2, [pc, #144]	; (800bea0 <Auto+0x2c0>)
 800be0e:	2101      	movs	r1, #1
 800be10:	4618      	mov	r0, r3
 800be12:	f7fa fc14 	bl	800663e <PP_start>
				while(pp.pp_start == 1)
 800be16:	e00e      	b.n	800be36 <Auto+0x256>
				{
					if(ps4.button == SQUARE)
 800be18:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <Auto+0x2b4>)
 800be1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be20:	d109      	bne.n	800be36 <Auto+0x256>
					{
						while(ps4.button == SQUARE);
 800be22:	bf00      	nop
 800be24:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <Auto+0x2b4>)
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2c:	d0fa      	beq.n	800be24 <Auto+0x244>
						StopAutoPP();
 800be2e:	f000 fa6f 	bl	800c310 <StopAutoPP>
						break;
 800be32:	bf00      	nop
					}
				}
//				PP_SetZ(-90, &pp);
				break;
 800be34:	e0ff      	b.n	800c036 <Auto+0x456>
				while(pp.pp_start == 1)
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <Auto+0x2c0>)
 800be38:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1e8      	bne.n	800be18 <Auto+0x238>
				break;
 800be46:	e0f6      	b.n	800c036 <Auto+0x456>

			case 4:
				shotType2();
 800be48:	f000 fa14 	bl	800c274 <shotType2>
				PP_start(type_2_pole_from_left_2, 1, &pp);
 800be4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800be50:	4a13      	ldr	r2, [pc, #76]	; (800bea0 <Auto+0x2c0>)
 800be52:	2101      	movs	r1, #1
 800be54:	4618      	mov	r0, r3
 800be56:	f7fa fbf2 	bl	800663e <PP_start>
				while(pp.pp_start == 1)
 800be5a:	e00d      	b.n	800be78 <Auto+0x298>
				{
					if(ps4.button == SQUARE)
 800be5c:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <Auto+0x2b4>)
 800be5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be64:	d108      	bne.n	800be78 <Auto+0x298>
					{
						while(ps4.button == SQUARE);
 800be66:	bf00      	nop
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <Auto+0x2b4>)
 800be6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be70:	d0fa      	beq.n	800be68 <Auto+0x288>
						StopAutoPP();
 800be72:	f000 fa4d 	bl	800c310 <StopAutoPP>
						break;
 800be76:	e007      	b.n	800be88 <Auto+0x2a8>
				while(pp.pp_start == 1)
 800be78:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <Auto+0x2c0>)
 800be7a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e9      	bne.n	800be5c <Auto+0x27c>
					}
				}
				PP_SetZ(-90, &pp);
 800be88:	4805      	ldr	r0, [pc, #20]	; (800bea0 <Auto+0x2c0>)
 800be8a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800bed8 <Auto+0x2f8>
 800be8e:	f7fa fe7a 	bl	8006b86 <PP_SetZ>
				break;
 800be92:	e0d0      	b.n	800c036 <Auto+0x456>
 800be94:	2000a300 	.word	0x2000a300
 800be98:	20007740 	.word	0x20007740
 800be9c:	0801f2f8 	.word	0x0801f2f8
 800bea0:	20007150 	.word	0x20007150
 800bea4:	2000982c 	.word	0x2000982c
 800bea8:	0801f314 	.word	0x0801f314
 800beac:	0801f330 	.word	0x0801f330
 800beb0:	0801f34c 	.word	0x0801f34c
 800beb4:	0801f368 	.word	0x0801f368
 800beb8:	3e947ae1 	.word	0x3e947ae1
 800bebc:	4060a3d7 	.word	0x4060a3d7
 800bec0:	40370a3d 	.word	0x40370a3d
 800bec4:	bd8f5c29 	.word	0xbd8f5c29
 800bec8:	3d8f5c29 	.word	0x3d8f5c29
 800becc:	c0328f5c 	.word	0xc0328f5c
 800bed0:	2000714c 	.word	0x2000714c
 800bed4:	20006a54 	.word	0x20006a54
 800bed8:	c2b40000 	.word	0xc2b40000
			}
		}
		else if(shoot_from_right)
 800bedc:	4b6f      	ldr	r3, [pc, #444]	; (800c09c <Auto+0x4bc>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 80a7 	beq.w	800c034 <Auto+0x454>
		{
			pole_shot_right++;
 800bee6:	4b6e      	ldr	r3, [pc, #440]	; (800c0a0 <Auto+0x4c0>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	4a6c      	ldr	r2, [pc, #432]	; (800c0a0 <Auto+0x4c0>)
 800beee:	6013      	str	r3, [r2, #0]
			switch(pole_shot_right)
 800bef0:	4b6b      	ldr	r3, [pc, #428]	; (800c0a0 <Auto+0x4c0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	f200 809d 	bhi.w	800c036 <Auto+0x456>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <Auto+0x324>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf5d 	.word	0x0800bf5d
 800bf0c:	0800bfa5 	.word	0x0800bfa5
 800bf10:	0800bfe9 	.word	0x0800bfe9
			{
				case 1:
					PP_start(pole_from_right_2, 1, &pp);
 800bf14:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800bf18:	4a62      	ldr	r2, [pc, #392]	; (800c0a4 <Auto+0x4c4>)
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fa fb8e 	bl	800663e <PP_start>
					while(pp.pp_start == 1)
 800bf22:	e00d      	b.n	800bf40 <Auto+0x360>
					{
						if(ps4.button == SQUARE)
 800bf24:	4b60      	ldr	r3, [pc, #384]	; (800c0a8 <Auto+0x4c8>)
 800bf26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf2c:	d108      	bne.n	800bf40 <Auto+0x360>
						{
							while(ps4.button == SQUARE);
 800bf2e:	bf00      	nop
 800bf30:	4b5d      	ldr	r3, [pc, #372]	; (800c0a8 <Auto+0x4c8>)
 800bf32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf38:	d0fa      	beq.n	800bf30 <Auto+0x350>
							StopAutoPP();
 800bf3a:	f000 f9e9 	bl	800c310 <StopAutoPP>
							break;
 800bf3e:	e007      	b.n	800bf50 <Auto+0x370>
					while(pp.pp_start == 1)
 800bf40:	4b58      	ldr	r3, [pc, #352]	; (800c0a4 <Auto+0x4c4>)
 800bf42:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e9      	bne.n	800bf24 <Auto+0x344>
						}
					}
					PP_SetZ(-90, &pp);
 800bf50:	4854      	ldr	r0, [pc, #336]	; (800c0a4 <Auto+0x4c4>)
 800bf52:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800c0ac <Auto+0x4cc>
 800bf56:	f7fa fe16 	bl	8006b86 <PP_SetZ>
					break;
 800bf5a:	e06c      	b.n	800c036 <Auto+0x456>

				case 2:
					PP_start(pole_from_right_3, 1, &pp);
 800bf5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800bf60:	4a50      	ldr	r2, [pc, #320]	; (800c0a4 <Auto+0x4c4>)
 800bf62:	2101      	movs	r1, #1
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fa fb6a 	bl	800663e <PP_start>
					while(pp.pp_start == 1)
 800bf6a:	e00d      	b.n	800bf88 <Auto+0x3a8>
					{
						if(ps4.button == SQUARE)
 800bf6c:	4b4e      	ldr	r3, [pc, #312]	; (800c0a8 <Auto+0x4c8>)
 800bf6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf74:	d108      	bne.n	800bf88 <Auto+0x3a8>
						{
							while(ps4.button == SQUARE);
 800bf76:	bf00      	nop
 800bf78:	4b4b      	ldr	r3, [pc, #300]	; (800c0a8 <Auto+0x4c8>)
 800bf7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf80:	d0fa      	beq.n	800bf78 <Auto+0x398>
							StopAutoPP();
 800bf82:	f000 f9c5 	bl	800c310 <StopAutoPP>
							break;
 800bf86:	e007      	b.n	800bf98 <Auto+0x3b8>
					while(pp.pp_start == 1)
 800bf88:	4b46      	ldr	r3, [pc, #280]	; (800c0a4 <Auto+0x4c4>)
 800bf8a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1e9      	bne.n	800bf6c <Auto+0x38c>
						}
					}
					PP_SetZ(-90, &pp);
 800bf98:	4842      	ldr	r0, [pc, #264]	; (800c0a4 <Auto+0x4c4>)
 800bf9a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800c0ac <Auto+0x4cc>
 800bf9e:	f7fa fdf2 	bl	8006b86 <PP_SetZ>
					break;
 800bfa2:	e048      	b.n	800c036 <Auto+0x456>

				case 3:
					shotType2();
 800bfa4:	f000 f966 	bl	800c274 <shotType2>
					PP_start(type_2_pole_from_right, 1, &pp);
 800bfa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800bfac:	4a3d      	ldr	r2, [pc, #244]	; (800c0a4 <Auto+0x4c4>)
 800bfae:	2101      	movs	r1, #1
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fa fb44 	bl	800663e <PP_start>
					while(pp.pp_start == 1)
 800bfb6:	e00e      	b.n	800bfd6 <Auto+0x3f6>
					{
						if(ps4.button == SQUARE)
 800bfb8:	4b3b      	ldr	r3, [pc, #236]	; (800c0a8 <Auto+0x4c8>)
 800bfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfc0:	d109      	bne.n	800bfd6 <Auto+0x3f6>
						{
							while(ps4.button == SQUARE);
 800bfc2:	bf00      	nop
 800bfc4:	4b38      	ldr	r3, [pc, #224]	; (800c0a8 <Auto+0x4c8>)
 800bfc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfcc:	d0fa      	beq.n	800bfc4 <Auto+0x3e4>
							StopAutoPP();
 800bfce:	f000 f99f 	bl	800c310 <StopAutoPP>
							break;
 800bfd2:	bf00      	nop
						}
					}
	//				PP_SetZ(-90, &pp);
					break;
 800bfd4:	e02f      	b.n	800c036 <Auto+0x456>
					while(pp.pp_start == 1)
 800bfd6:	4b33      	ldr	r3, [pc, #204]	; (800c0a4 <Auto+0x4c4>)
 800bfd8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1e8      	bne.n	800bfb8 <Auto+0x3d8>
					break;
 800bfe6:	e026      	b.n	800c036 <Auto+0x456>

				case 4:
					shotType2();
 800bfe8:	f000 f944 	bl	800c274 <shotType2>
					PP_start(type_2_pole_from_right_2, 1, &pp);
 800bfec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bff0:	4a2c      	ldr	r2, [pc, #176]	; (800c0a4 <Auto+0x4c4>)
 800bff2:	2101      	movs	r1, #1
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fa fb22 	bl	800663e <PP_start>
					while(pp.pp_start == 1)
 800bffa:	e00d      	b.n	800c018 <Auto+0x438>
					{
						if(ps4.button == SQUARE)
 800bffc:	4b2a      	ldr	r3, [pc, #168]	; (800c0a8 <Auto+0x4c8>)
 800bffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c004:	d108      	bne.n	800c018 <Auto+0x438>
						{
							while(ps4.button == SQUARE);
 800c006:	bf00      	nop
 800c008:	4b27      	ldr	r3, [pc, #156]	; (800c0a8 <Auto+0x4c8>)
 800c00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c010:	d0fa      	beq.n	800c008 <Auto+0x428>
							StopAutoPP();
 800c012:	f000 f97d 	bl	800c310 <StopAutoPP>
							break;
 800c016:	e007      	b.n	800c028 <Auto+0x448>
					while(pp.pp_start == 1)
 800c018:	4b22      	ldr	r3, [pc, #136]	; (800c0a4 <Auto+0x4c4>)
 800c01a:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1e9      	bne.n	800bffc <Auto+0x41c>
						}
					}
					PP_SetZ(-90, &pp);
 800c028:	481e      	ldr	r0, [pc, #120]	; (800c0a4 <Auto+0x4c4>)
 800c02a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c0ac <Auto+0x4cc>
 800c02e:	f7fa fdaa 	bl	8006b86 <PP_SetZ>
					break;
 800c032:	e000      	b.n	800c036 <Auto+0x456>
			}
		}
 800c034:	bf00      	nop
		LoadRing();
 800c036:	f000 f92b 	bl	800c290 <LoadRing>
	}


	if(ps4.button == CIRCLE)
 800c03a:	4b1b      	ldr	r3, [pc, #108]	; (800c0a8 <Auto+0x4c8>)
 800c03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c042:	d162      	bne.n	800c10a <Auto+0x52a>
	{
		while(ps4.button == CIRCLE);
 800c044:	bf00      	nop
 800c046:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <Auto+0x4c8>)
 800c048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c04a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c04e:	d0fa      	beq.n	800c046 <Auto+0x466>
		FH_PosRel(&fh1, 10000);
 800c050:	f242 7110 	movw	r1, #10000	; 0x2710
 800c054:	4816      	ldr	r0, [pc, #88]	; (800c0b0 <Auto+0x4d0>)
 800c056:	f7f7 ff41 	bl	8003edc <FH_PosRel>
		float high_vel_point[1][7] = {{3.5, -4.0, -0.06, 0, 0, 0, 0}};
 800c05a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c05e:	4a15      	ldr	r2, [pc, #84]	; (800c0b4 <Auto+0x4d4>)
 800c060:	461c      	mov	r4, r3
 800c062:	4615      	mov	r5, r2
 800c064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c06c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(high_vel_point, 1, &pp);
 800c070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c074:	4a0b      	ldr	r2, [pc, #44]	; (800c0a4 <Auto+0x4c4>)
 800c076:	2101      	movs	r1, #1
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fa fae0 	bl	800663e <PP_start>
		while(pp.pp_start == 1)
 800c07e:	e01b      	b.n	800c0b8 <Auto+0x4d8>
		{
			if(ps4.button == SQUARE)
 800c080:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <Auto+0x4c8>)
 800c082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c088:	d116      	bne.n	800c0b8 <Auto+0x4d8>
			{
				while(ps4.button == SQUARE);
 800c08a:	bf00      	nop
 800c08c:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <Auto+0x4c8>)
 800c08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c094:	d0fa      	beq.n	800c08c <Auto+0x4ac>
				StopAutoPP();
 800c096:	f000 f93b 	bl	800c310 <StopAutoPP>
				break;
 800c09a:	e015      	b.n	800c0c8 <Auto+0x4e8>
 800c09c:	20009f88 	.word	0x20009f88
 800c0a0:	20009688 	.word	0x20009688
 800c0a4:	20007150 	.word	0x20007150
 800c0a8:	2000a300 	.word	0x2000a300
 800c0ac:	c2b40000 	.word	0xc2b40000
 800c0b0:	2000a598 	.word	0x2000a598
 800c0b4:	0801f384 	.word	0x0801f384
		while(pp.pp_start == 1)
 800c0b8:	4b5d      	ldr	r3, [pc, #372]	; (800c230 <Auto+0x650>)
 800c0ba:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1db      	bne.n	800c080 <Auto+0x4a0>
			}
		}
		FH_PosRel(&fh1, -10000);
 800c0c8:	495a      	ldr	r1, [pc, #360]	; (800c234 <Auto+0x654>)
 800c0ca:	485b      	ldr	r0, [pc, #364]	; (800c238 <Auto+0x658>)
 800c0cc:	f7f7 ff06 	bl	8003edc <FH_PosRel>
		float pick_point[1][7] = { { 0.6, -10, 0, 0.0, 0, 1, 0 } };
 800c0d0:	f107 031c 	add.w	r3, r7, #28
 800c0d4:	4a59      	ldr	r2, [pc, #356]	; (800c23c <Auto+0x65c>)
 800c0d6:	461c      	mov	r4, r3
 800c0d8:	4615      	mov	r5, r2
 800c0da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_point, 1, &pp);
 800c0e6:	f107 031c 	add.w	r3, r7, #28
 800c0ea:	4a51      	ldr	r2, [pc, #324]	; (800c230 <Auto+0x650>)
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fa faa5 	bl	800663e <PP_start>
		sys.pick_start = 1;
 800c0f4:	4a52      	ldr	r2, [pc, #328]	; (800c240 <Auto+0x660>)
 800c0f6:	7853      	ldrb	r3, [r2, #1]
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	7053      	strb	r3, [r2, #1]
		pick_at_left = 1;
 800c0fe:	4b51      	ldr	r3, [pc, #324]	; (800c244 <Auto+0x664>)
 800c100:	2201      	movs	r2, #1
 800c102:	601a      	str	r2, [r3, #0]
		shoot_from_right = 0;
 800c104:	4b50      	ldr	r3, [pc, #320]	; (800c248 <Auto+0x668>)
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
	}

	if (ps4.button == UP) {
 800c10a:	4b50      	ldr	r3, [pc, #320]	; (800c24c <Auto+0x66c>)
 800c10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c10e:	2b10      	cmp	r3, #16
 800c110:	d106      	bne.n	800c120 <Auto+0x540>
		while (ps4.button == UP);
 800c112:	bf00      	nop
 800c114:	4b4d      	ldr	r3, [pc, #308]	; (800c24c <Auto+0x66c>)
 800c116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c118:	2b10      	cmp	r3, #16
 800c11a:	d0fb      	beq.n	800c114 <Auto+0x534>
		AutoLoadRing();
 800c11c:	f000 f91a 	bl	800c354 <AutoLoadRing>
	}

	if(ps4.button == DOWN)
 800c120:	4b4a      	ldr	r3, [pc, #296]	; (800c24c <Auto+0x66c>)
 800c122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c124:	2b40      	cmp	r3, #64	; 0x40
 800c126:	d11f      	bne.n	800c168 <Auto+0x588>
	{
		while(ps4.button == DOWN);
 800c128:	bf00      	nop
 800c12a:	4b48      	ldr	r3, [pc, #288]	; (800c24c <Auto+0x66c>)
 800c12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c12e:	2b40      	cmp	r3, #64	; 0x40
 800c130:	d0fb      	beq.n	800c12a <Auto+0x54a>
		float pick_point[1][7] = { { 0.8, 0, -10, 0.0, 0, 1, 0 } };
 800c132:	463b      	mov	r3, r7
 800c134:	4a46      	ldr	r2, [pc, #280]	; (800c250 <Auto+0x670>)
 800c136:	461c      	mov	r4, r3
 800c138:	4615      	mov	r5, r2
 800c13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c13e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_point, 1, &pp);
 800c146:	463b      	mov	r3, r7
 800c148:	4a39      	ldr	r2, [pc, #228]	; (800c230 <Auto+0x650>)
 800c14a:	2101      	movs	r1, #1
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fa fa76 	bl	800663e <PP_start>
		sys.pick_start = 1;
 800c152:	4a3b      	ldr	r2, [pc, #236]	; (800c240 <Auto+0x660>)
 800c154:	7853      	ldrb	r3, [r2, #1]
 800c156:	f043 0320 	orr.w	r3, r3, #32
 800c15a:	7053      	strb	r3, [r2, #1]
		pick_at_right = 1;
 800c15c:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <Auto+0x674>)
 800c15e:	2201      	movs	r2, #1
 800c160:	601a      	str	r2, [r3, #0]
		shoot_from_left = 0;
 800c162:	4b3d      	ldr	r3, [pc, #244]	; (800c258 <Auto+0x678>)
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == TRIANGLE)
 800c168:	4b38      	ldr	r3, [pc, #224]	; (800c24c <Auto+0x66c>)
 800c16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c16c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c170:	d107      	bne.n	800c182 <Auto+0x5a2>
	{
		while(ps4.button == TRIANGLE);
 800c172:	bf00      	nop
 800c174:	4b35      	ldr	r3, [pc, #212]	; (800c24c <Auto+0x66c>)
 800c176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17c:	d0fa      	beq.n	800c174 <Auto+0x594>
		LoadRing();
 800c17e:	f000 f887 	bl	800c290 <LoadRing>
	}

	if (ps4.button == SQUARE)
 800c182:	4b32      	ldr	r3, [pc, #200]	; (800c24c <Auto+0x66c>)
 800c184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c18a:	d107      	bne.n	800c19c <Auto+0x5bc>
	{
		while (ps4.button == SQUARE);
 800c18c:	bf00      	nop
 800c18e:	4b2f      	ldr	r3, [pc, #188]	; (800c24c <Auto+0x66c>)
 800c190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c196:	d0fa      	beq.n	800c18e <Auto+0x5ae>
		StopAutoPP();
 800c198:	f000 f8ba 	bl	800c310 <StopAutoPP>
	}

	if (ps4.button == CROSS)
 800c19c:	4b2b      	ldr	r3, [pc, #172]	; (800c24c <Auto+0x66c>)
 800c19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a4:	d115      	bne.n	800c1d2 <Auto+0x5f2>
	{
		while (ps4.button == CROSS);
 800c1a6:	bf00      	nop
 800c1a8:	4b28      	ldr	r3, [pc, #160]	; (800c24c <Auto+0x66c>)
 800c1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1b0:	d0fa      	beq.n	800c1a8 <Auto+0x5c8>
		odrv0_stop_once = 0;
 800c1b2:	4b2a      	ldr	r3, [pc, #168]	; (800c25c <Auto+0x67c>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
		shooting = 1;
 800c1b8:	4b29      	ldr	r3, [pc, #164]	; (800c260 <Auto+0x680>)
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	601a      	str	r2, [r3, #0]
		OdriveBlockingTurn(&Odrv1, -turn_count);
 800c1be:	4b29      	ldr	r3, [pc, #164]	; (800c264 <Auto+0x684>)
 800c1c0:	edd3 7a00 	vldr	s15, [r3]
 800c1c4:	eef1 7a67 	vneg.f32	s15, s15
 800c1c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c1cc:	4826      	ldr	r0, [pc, #152]	; (800c268 <Auto+0x688>)
 800c1ce:	f7f9 fb97 	bl	8005900 <OdriveBlockingTurn>
//		shot_once = 1;
	}

	if(ps4.button == OPTION)
 800c1d2:	4b1e      	ldr	r3, [pc, #120]	; (800c24c <Auto+0x66c>)
 800c1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1da:	d107      	bne.n	800c1ec <Auto+0x60c>
	{
		while(ps4.button == OPTION);
 800c1dc:	bf00      	nop
 800c1de:	4b1b      	ldr	r3, [pc, #108]	; (800c24c <Auto+0x66c>)
 800c1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1e6:	d0fa      	beq.n	800c1de <Auto+0x5fe>
		ResetCoordinate();
 800c1e8:	f000 f8d0 	bl	800c38c <ResetCoordinate>
	}

	if (HAL_GetTick() - before >= AutoMode) {
 800c1ec:	f003 fc7a 	bl	800fae4 <HAL_GetTick>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	4a1e      	ldr	r2, [pc, #120]	; (800c26c <Auto+0x68c>)
 800c1f4:	6812      	ldr	r2, [r2, #0]
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	2b7c      	cmp	r3, #124	; 0x7c
 800c1fa:	d914      	bls.n	800c226 <Auto+0x646>
		led9= !led9;
 800c1fc:	4b1c      	ldr	r3, [pc, #112]	; (800c270 <Auto+0x690>)
 800c1fe:	7e1b      	ldrb	r3, [r3, #24]
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	bf0c      	ite	eq
 800c20a:	2301      	moveq	r3, #1
 800c20c:	2300      	movne	r3, #0
 800c20e:	b2d9      	uxtb	r1, r3
 800c210:	4a17      	ldr	r2, [pc, #92]	; (800c270 <Auto+0x690>)
 800c212:	7e13      	ldrb	r3, [r2, #24]
 800c214:	f361 0300 	bfi	r3, r1, #0, #1
 800c218:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800c21a:	f003 fc63 	bl	800fae4 <HAL_GetTick>
 800c21e:	4603      	mov	r3, r0
 800c220:	461a      	mov	r2, r3
 800c222:	4b12      	ldr	r3, [pc, #72]	; (800c26c <Auto+0x68c>)
 800c224:	601a      	str	r2, [r3, #0]
	}
}
 800c226:	bf00      	nop
 800c228:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bdb0      	pop	{r4, r5, r7, pc}
 800c230:	20007150 	.word	0x20007150
 800c234:	ffffd8f0 	.word	0xffffd8f0
 800c238:	2000a598 	.word	0x2000a598
 800c23c:	0801f2f8 	.word	0x0801f2f8
 800c240:	20007740 	.word	0x20007740
 800c244:	2000982c 	.word	0x2000982c
 800c248:	20009f88 	.word	0x20009f88
 800c24c:	2000a300 	.word	0x2000a300
 800c250:	0801f3a0 	.word	0x0801f3a0
 800c254:	20007148 	.word	0x20007148
 800c258:	2000714c 	.word	0x2000714c
 800c25c:	2000a0e0 	.word	0x2000a0e0
 800c260:	2000a0f8 	.word	0x2000a0f8
 800c264:	2000769c 	.word	0x2000769c
 800c268:	20009bc8 	.word	0x20009bc8
 800c26c:	20007724 	.word	0x20007724
 800c270:	20009948 	.word	0x20009948

0800c274 <shotType2>:
//		LoadRing();
//	}
}

void shotType2()
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
	turn_count = 0.75;
 800c278:	4b04      	ldr	r3, [pc, #16]	; (800c28c <shotType2+0x18>)
 800c27a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800c27e:	601a      	str	r2, [r3, #0]
//	setTargetPitch(10);
}
 800c280:	bf00      	nop
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	2000769c 	.word	0x2000769c

0800c290 <LoadRing>:
{
	target_pitch = target;
	set_pitch = 1;
}

void LoadRing(void) {
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
	loaded_ring += 1;
 800c294:	4b17      	ldr	r3, [pc, #92]	; (800c2f4 <LoadRing+0x64>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3301      	adds	r3, #1
 800c29a:	4a16      	ldr	r2, [pc, #88]	; (800c2f4 <LoadRing+0x64>)
 800c29c:	6013      	str	r3, [r2, #0]

//	if(loaded_ring <= 10)
//	{
	cylinder_load;
 800c29e:	4a16      	ldr	r2, [pc, #88]	; (800c2f8 <LoadRing+0x68>)
 800c2a0:	7e13      	ldrb	r3, [r2, #24]
 800c2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a6:	7613      	strb	r3, [r2, #24]
	osDelay(500);
 800c2a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c2ac:	f00a f965 	bl	801657a <osDelay>
	ServoLoad();
 800c2b0:	f000 f87c 	bl	800c3ac <ServoLoad>
	FH_Pvel(&fh1, 300);
 800c2b4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c2b8:	4810      	ldr	r0, [pc, #64]	; (800c2fc <LoadRing+0x6c>)
 800c2ba:	f7f7 fe75 	bl	8003fa8 <FH_Pvel>
	FH_PosRel(&fh1, -10000);
 800c2be:	4910      	ldr	r1, [pc, #64]	; (800c300 <LoadRing+0x70>)
 800c2c0:	480e      	ldr	r0, [pc, #56]	; (800c2fc <LoadRing+0x6c>)
 800c2c2:	f7f7 fe0b 	bl	8003edc <FH_PosRel>
	cylinder_distract = 0;
 800c2c6:	4b0f      	ldr	r3, [pc, #60]	; (800c304 <LoadRing+0x74>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800c2cc:	4a0a      	ldr	r2, [pc, #40]	; (800c2f8 <LoadRing+0x68>)
 800c2ce:	7e13      	ldrb	r3, [r2, #24]
 800c2d0:	f36f 1386 	bfc	r3, #6, #1
 800c2d4:	7613      	strb	r3, [r2, #24]
	ServoBack();
 800c2d6:	f000 f88d 	bl	800c3f4 <ServoBack>
	reload_ring = 1;
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <LoadRing+0x78>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	601a      	str	r2, [r3, #0]
	FH_Vel(&fh1, 200);
 800c2e0:	21c8      	movs	r1, #200	; 0xc8
 800c2e2:	4806      	ldr	r0, [pc, #24]	; (800c2fc <LoadRing+0x6c>)
 800c2e4:	f7f7 fe36 	bl	8003f54 <FH_Vel>
	fh_vel = 1;
 800c2e8:	4b08      	ldr	r3, [pc, #32]	; (800c30c <LoadRing+0x7c>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
//	}
}
 800c2ee:	bf00      	nop
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20009aa4 	.word	0x20009aa4
 800c2f8:	20009948 	.word	0x20009948
 800c2fc:	2000a598 	.word	0x2000a598
 800c300:	ffffd8f0 	.word	0xffffd8f0
 800c304:	20009cf8 	.word	0x20009cf8
 800c308:	20007bf4 	.word	0x20007bf4
 800c30c:	20009cec 	.word	0x20009cec

0800c310 <StopAutoPP>:

void StopAutoPP(void)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800c314:	4809      	ldr	r0, [pc, #36]	; (800c33c <StopAutoPP+0x2c>)
 800c316:	f7fa fbd3 	bl	8006ac0 <PP_stop>
	RNSStop(&rns);
 800c31a:	4809      	ldr	r0, [pc, #36]	; (800c340 <StopAutoPP+0x30>)
 800c31c:	f7fd ff34 	bl	800a188 <RNSStop>
	pick_at_left = 0;
 800c320:	4b08      	ldr	r3, [pc, #32]	; (800c344 <StopAutoPP+0x34>)
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]
	pick_at_right = 0;
 800c326:	4b08      	ldr	r3, [pc, #32]	; (800c348 <StopAutoPP+0x38>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]
	pp_from_left = 0;
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <StopAutoPP+0x3c>)
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]
	pp_from_right = 0;
 800c332:	4b07      	ldr	r3, [pc, #28]	; (800c350 <StopAutoPP+0x40>)
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
//	shoot_from_left = 0;
//	pole_shot_left = 0;
//	shoot_from_right = 0;
//	pole_shot_right = 0;
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20007150 	.word	0x20007150
 800c340:	20009314 	.word	0x20009314
 800c344:	2000982c 	.word	0x2000982c
 800c348:	20007148 	.word	0x20007148
 800c34c:	20009bbc 	.word	0x20009bbc
 800c350:	2000a904 	.word	0x2000a904

0800c354 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
	sys.load_start = 1;
 800c358:	4a08      	ldr	r2, [pc, #32]	; (800c37c <AutoLoadRing+0x28>)
 800c35a:	7853      	ldrb	r3, [r2, #1]
 800c35c:	f043 0310 	orr.w	r3, r3, #16
 800c360:	7053      	strb	r3, [r2, #1]
	fh_vel = 1;
 800c362:	4b07      	ldr	r3, [pc, #28]	; (800c380 <AutoLoadRing+0x2c>)
 800c364:	2201      	movs	r2, #1
 800c366:	601a      	str	r2, [r3, #0]
	FH_Vel(&fh1, 600);
 800c368:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c36c:	4805      	ldr	r0, [pc, #20]	; (800c384 <AutoLoadRing+0x30>)
 800c36e:	f7f7 fdf1 	bl	8003f54 <FH_Vel>
	cylinder_distract = 50;
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <AutoLoadRing+0x34>)
 800c374:	2232      	movs	r2, #50	; 0x32
 800c376:	601a      	str	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20007740 	.word	0x20007740
 800c380:	20009cec 	.word	0x20009cec
 800c384:	2000a598 	.word	0x2000a598
 800c388:	20009cf8 	.word	0x20009cf8

0800c38c <ResetCoordinate>:

void ResetCoordinate(void)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
	PP_reset(&pp);
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <ResetCoordinate+0x1c>)
 800c392:	f7fa fbb6 	bl	8006b02 <PP_reset>
	QEIReset(QEI1);
 800c396:	2001      	movs	r0, #1
 800c398:	f7f5 fcf0 	bl	8001d7c <QEIReset>
	QEIReset(QEI4);
 800c39c:	2004      	movs	r0, #4
 800c39e:	f7f5 fced 	bl	8001d7c <QEIReset>
}
 800c3a2:	bf00      	nop
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20007150 	.word	0x20007150

0800c3ac <ServoLoad>:

void ServoLoad(void) {
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	af00      	add	r7, sp, #0
	ServoSetPulse(&servo_load, 2400);
 800c3b0:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800c3b4:	480e      	ldr	r0, [pc, #56]	; (800c3f0 <ServoLoad+0x44>)
 800c3b6:	f7fe fadd 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c3ba:	20c8      	movs	r0, #200	; 0xc8
 800c3bc:	f00a f8dd 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2250);
 800c3c0:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800c3c4:	480a      	ldr	r0, [pc, #40]	; (800c3f0 <ServoLoad+0x44>)
 800c3c6:	f7fe fad5 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c3ca:	20c8      	movs	r0, #200	; 0xc8
 800c3cc:	f00a f8d5 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2150);
 800c3d0:	f640 0166 	movw	r1, #2150	; 0x866
 800c3d4:	4806      	ldr	r0, [pc, #24]	; (800c3f0 <ServoLoad+0x44>)
 800c3d6:	f7fe facd 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c3da:	20c8      	movs	r0, #200	; 0xc8
 800c3dc:	f00a f8cd 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2000);
 800c3e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c3e4:	4802      	ldr	r0, [pc, #8]	; (800c3f0 <ServoLoad+0x44>)
 800c3e6:	f7fe fac5 	bl	800a974 <ServoSetPulse>
//	osDelay(200);
//	ServoSetPulse(&servo_load, 1850);
}
 800c3ea:	bf00      	nop
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20007744 	.word	0x20007744

0800c3f4 <ServoBack>:

void ServoBack(void) {
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
	osDelay(200);
 800c3f8:	20c8      	movs	r0, #200	; 0xc8
 800c3fa:	f00a f8be 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2000);
 800c3fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c402:	4814      	ldr	r0, [pc, #80]	; (800c454 <ServoBack+0x60>)
 800c404:	f7fe fab6 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c408:	20c8      	movs	r0, #200	; 0xc8
 800c40a:	f00a f8b6 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2150);
 800c40e:	f640 0166 	movw	r1, #2150	; 0x866
 800c412:	4810      	ldr	r0, [pc, #64]	; (800c454 <ServoBack+0x60>)
 800c414:	f7fe faae 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c418:	20c8      	movs	r0, #200	; 0xc8
 800c41a:	f00a f8ae 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2250);
 800c41e:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800c422:	480c      	ldr	r0, [pc, #48]	; (800c454 <ServoBack+0x60>)
 800c424:	f7fe faa6 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c428:	20c8      	movs	r0, #200	; 0xc8
 800c42a:	f00a f8a6 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2400);
 800c42e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800c432:	4808      	ldr	r0, [pc, #32]	; (800c454 <ServoBack+0x60>)
 800c434:	f7fe fa9e 	bl	800a974 <ServoSetPulse>
	osDelay(200);
 800c438:	20c8      	movs	r0, #200	; 0xc8
 800c43a:	f00a f89e 	bl	801657a <osDelay>
	ServoSetPulse(&servo_load, 2500);
 800c43e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800c442:	4804      	ldr	r0, [pc, #16]	; (800c454 <ServoBack+0x60>)
 800c444:	f7fe fa96 	bl	800a974 <ServoSetPulse>
	osDelay(400);
 800c448:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c44c:	f00a f895 	bl	801657a <osDelay>
}
 800c450:	bf00      	nop
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20007744 	.word	0x20007744

0800c458 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800c45c:	4802      	ldr	r0, [pc, #8]	; (800c468 <DMA1_Stream0_IRQHandler+0x10>)
 800c45e:	f004 fca1 	bl	8010da4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800c462:	bf00      	nop
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	2000a29c 	.word	0x2000a29c

0800c46c <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800c470:	4802      	ldr	r0, [pc, #8]	; (800c47c <DMA1_Stream3_IRQHandler+0x10>)
 800c472:	f004 fc97 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c476:	bf00      	nop
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	200069ec 	.word	0x200069ec

0800c480 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800c484:	4802      	ldr	r0, [pc, #8]	; (800c490 <DMA1_Stream2_IRQHandler+0x10>)
 800c486:	f004 fc8d 	bl	8010da4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800c48a:	bf00      	nop
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20005ed4 	.word	0x20005ed4

0800c494 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800c498:	4802      	ldr	r0, [pc, #8]	; (800c4a4 <DMA1_Stream1_IRQHandler+0x10>)
 800c49a:	f004 fc83 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c49e:	bf00      	nop
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20006018 	.word	0x20006018

0800c4a8 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800c4ac:	4802      	ldr	r0, [pc, #8]	; (800c4b8 <DMA1_Stream4_IRQHandler+0x10>)
 800c4ae:	f004 fc79 	bl	8010da4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800c4b2:	bf00      	nop
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2000668c 	.word	0x2000668c

0800c4bc <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c4c0:	4802      	ldr	r0, [pc, #8]	; (800c4cc <DMA1_Stream5_IRQHandler+0x10>)
 800c4c2:	f004 fc6f 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c4c6:	bf00      	nop
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20005f34 	.word	0x20005f34

0800c4d0 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800c4d4:	4802      	ldr	r0, [pc, #8]	; (800c4e0 <DMA1_Stream6_IRQHandler+0x10>)
 800c4d6:	f004 fc65 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c4da:	bf00      	nop
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20006220 	.word	0x20006220

0800c4e4 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800c4e8:	4802      	ldr	r0, [pc, #8]	; (800c4f4 <DMA1_Stream7_IRQHandler+0x10>)
 800c4ea:	f004 fc5b 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c4ee:	bf00      	nop
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	200066ec 	.word	0x200066ec

0800c4f8 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800c4fc:	4802      	ldr	r0, [pc, #8]	; (800c508 <DMA2_Stream0_IRQHandler+0x10>)
 800c4fe:	f004 fc51 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c502:	bf00      	nop
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20006884 	.word	0x20006884

0800c50c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800c510:	4802      	ldr	r0, [pc, #8]	; (800c51c <DMA2_Stream1_IRQHandler+0x10>)
 800c512:	f004 fc47 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c516:	bf00      	nop
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	20006794 	.word	0x20006794

0800c520 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800c524:	4802      	ldr	r0, [pc, #8]	; (800c530 <DMA2_Stream2_IRQHandler+0x10>)
 800c526:	f004 fc3d 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c52a:	bf00      	nop
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	2000a214 	.word	0x2000a214

0800c534 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800c538:	4802      	ldr	r0, [pc, #8]	; (800c544 <DMA2_Stream3_IRQHandler+0x10>)
 800c53a:	f004 fc33 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200068e4 	.word	0x200068e4

0800c548 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c54c:	4802      	ldr	r0, [pc, #8]	; (800c558 <DMA2_Stream5_IRQHandler+0x10>)
 800c54e:	f004 fc29 	bl	8010da4 <HAL_DMA_IRQHandler>
}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2000a61c 	.word	0x2000a61c

0800c55c <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0

}
 800c560:	bf00      	nop
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800c56a:	b480      	push	{r7}
 800c56c:	af00      	add	r7, sp, #0

}
 800c56e:	bf00      	nop
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0

	while(1){
 800c57c:	e7fe      	b.n	800c57c <MemManage_Handler+0x4>

0800c57e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800c57e:	b480      	push	{r7}
 800c580:	af00      	add	r7, sp, #0

}
 800c582:	bf00      	nop
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0

}
 800c590:	bf00      	nop
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800c59a:	b480      	push	{r7}
 800c59c:	af00      	add	r7, sp, #0

}
 800c59e:	bf00      	nop
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800c5ac:	4b14      	ldr	r3, [pc, #80]	; (800c600 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b81      	cmp	r3, #129	; 0x81
 800c5b4:	d109      	bne.n	800c5ca <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800c5b6:	4b13      	ldr	r3, [pc, #76]	; (800c604 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c5b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	3301      	adds	r3, #1
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	b21a      	sxth	r2, r3
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c5c6:	805a      	strh	r2, [r3, #2]
 800c5c8:	e00d      	b.n	800c5e6 <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b91      	cmp	r3, #145	; 0x91
 800c5d2:	d108      	bne.n	800c5e6 <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c5d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	b21a      	sxth	r2, r3
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800c5e4:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800c5e6:	4b06      	ldr	r3, [pc, #24]	; (800c600 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800c5ee:	20c8      	movs	r0, #200	; 0xc8
 800c5f0:	f7f5 fc24 	bl	8001e3c <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800c5f4:	4804      	ldr	r0, [pc, #16]	; (800c608 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800c5f6:	f008 f8c1 	bl	801477c <HAL_TIM_IRQHandler>
	return;
 800c5fa:	bf00      	nop
}
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200063e8 	.word	0x200063e8
 800c604:	20006948 	.word	0x20006948
 800c608:	200060b8 	.word	0x200060b8

0800c60c <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800c610:	4b12      	ldr	r3, [pc, #72]	; (800c65c <TIM4_IRQHandler+0x50>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b81      	cmp	r3, #129	; 0x81
 800c618:	d109      	bne.n	800c62e <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800c61a:	4b11      	ldr	r3, [pc, #68]	; (800c660 <TIM4_IRQHandler+0x54>)
 800c61c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c620:	b29b      	uxth	r3, r3
 800c622:	3301      	adds	r3, #1
 800c624:	b29b      	uxth	r3, r3
 800c626:	b21a      	sxth	r2, r3
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <TIM4_IRQHandler+0x54>)
 800c62a:	805a      	strh	r2, [r3, #2]
 800c62c:	e00d      	b.n	800c64a <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800c62e:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <TIM4_IRQHandler+0x50>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b91      	cmp	r3, #145	; 0x91
 800c636:	d108      	bne.n	800c64a <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800c638:	4b09      	ldr	r3, [pc, #36]	; (800c660 <TIM4_IRQHandler+0x54>)
 800c63a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	3b01      	subs	r3, #1
 800c642:	b29b      	uxth	r3, r3
 800c644:	b21a      	sxth	r2, r3
 800c646:	4b06      	ldr	r3, [pc, #24]	; (800c660 <TIM4_IRQHandler+0x54>)
 800c648:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800c64a:	4b04      	ldr	r3, [pc, #16]	; (800c65c <TIM4_IRQHandler+0x50>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2200      	movs	r2, #0
 800c650:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800c652:	2064      	movs	r0, #100	; 0x64
 800c654:	f7f5 fbf2 	bl	8001e3c <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800c658:	bf00      	nop
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20005fd8 	.word	0x20005fd8
 800c660:	2000696c 	.word	0x2000696c

0800c664 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800c668:	4803      	ldr	r0, [pc, #12]	; (800c678 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800c66a:	f008 f887 	bl	801477c <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800c66e:	4803      	ldr	r0, [pc, #12]	; (800c67c <TIM8_UP_TIM13_IRQHandler+0x18>)
 800c670:	f008 f884 	bl	801477c <HAL_TIM_IRQHandler>
	return;
 800c674:	bf00      	nop
}
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20005f98 	.word	0x20005f98
 800c67c:	20006280 	.word	0x20006280

0800c680 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800c684:	4802      	ldr	r0, [pc, #8]	; (800c690 <TIM2_IRQHandler+0x10>)
 800c686:	f008 f879 	bl	801477c <HAL_TIM_IRQHandler>
}
 800c68a:	bf00      	nop
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	200064ec 	.word	0x200064ec

0800c694 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6a4:	d109      	bne.n	800c6ba <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800c6a6:	f003 fa09 	bl	800fabc <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800c6aa:	4806      	ldr	r0, [pc, #24]	; (800c6c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800c6ac:	f7f5 fc91 	bl	8001fd2 <SHIFTREGShift>
		counter++;
 800c6b0:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	4a04      	ldr	r2, [pc, #16]	; (800c6c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800c6b8:	6013      	str	r3, [r2, #0]
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20009948 	.word	0x20009948
 800c6c8:	20009aa0 	.word	0x20009aa0

0800c6cc <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d102      	bne.n	800c6e4 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800c6de:	4803      	ldr	r0, [pc, #12]	; (800c6ec <HAL_I2C_MasterRxCpltCallback+0x20>)
 800c6e0:	f7fd f8e8 	bl	80098b4 <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	2000a300 	.word	0x2000a300

0800c6f0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800c6f4:	4802      	ldr	r0, [pc, #8]	; (800c700 <I2C1_EV_IRQHandler+0x10>)
 800c6f6:	f005 fb15 	bl	8011d24 <HAL_I2C_EV_IRQHandler>

}
 800c6fa:	bf00      	nop
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20007010 	.word	0x20007010

0800c704 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800c708:	480a      	ldr	r0, [pc, #40]	; (800c734 <I2C1_ER_IRQHandler+0x30>)
 800c70a:	f005 fc78 	bl	8011ffe <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800c70e:	480a      	ldr	r0, [pc, #40]	; (800c738 <I2C1_ER_IRQHandler+0x34>)
 800c710:	f004 fa70 	bl	8010bf4 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800c714:	4807      	ldr	r0, [pc, #28]	; (800c734 <I2C1_ER_IRQHandler+0x30>)
 800c716:	f005 f9bf 	bl	8011a98 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <I2C1_ER_IRQHandler+0x38>)
 800c71c:	2208      	movs	r2, #8
 800c71e:	4906      	ldr	r1, [pc, #24]	; (800c738 <I2C1_ER_IRQHandler+0x34>)
 800c720:	4804      	ldr	r0, [pc, #16]	; (800c734 <I2C1_ER_IRQHandler+0x30>)
 800c722:	f7f7 fecd 	bl	80044c0 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800c726:	4903      	ldr	r1, [pc, #12]	; (800c734 <I2C1_ER_IRQHandler+0x30>)
 800c728:	4805      	ldr	r0, [pc, #20]	; (800c740 <I2C1_ER_IRQHandler+0x3c>)
 800c72a:	f7fd f8d6 	bl	80098da <PSxInitDMA>

}
 800c72e:	bf00      	nop
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20007010 	.word	0x20007010
 800c738:	2000a29c 	.word	0x2000a29c
 800c73c:	00061a80 	.word	0x00061a80
 800c740:	2000a300 	.word	0x2000a300

0800c744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08c      	sub	sp, #48	; 0x30
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800c754:	2200      	movs	r2, #0
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	201c      	movs	r0, #28
 800c75a:	f004 f957 	bl	8010a0c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c75e:	201c      	movs	r0, #28
 800c760:	f004 f970 	bl	8010a44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	4b20      	ldr	r3, [pc, #128]	; (800c7ec <HAL_InitTick+0xa8>)
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <HAL_InitTick+0xa8>)
 800c76e:	f043 0301 	orr.w	r3, r3, #1
 800c772:	6413      	str	r3, [r2, #64]	; 0x40
 800c774:	4b1d      	ldr	r3, [pc, #116]	; (800c7ec <HAL_InitTick+0xa8>)
 800c776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	60fb      	str	r3, [r7, #12]
 800c77e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c780:	f107 0210 	add.w	r2, r7, #16
 800c784:	f107 0314 	add.w	r3, r7, #20
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f007 fd00 	bl	8014190 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c790:	f007 fcd6 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 800c794:	4603      	mov	r3, r0
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	4a14      	ldr	r2, [pc, #80]	; (800c7f0 <HAL_InitTick+0xac>)
 800c79e:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a2:	0c9b      	lsrs	r3, r3, #18
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c7ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800c7b0:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c7b6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800c7b8:	4a0e      	ldr	r2, [pc, #56]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800c7be:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800c7ca:	480a      	ldr	r0, [pc, #40]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7cc:	f007 fe30 	bl	8014430 <HAL_TIM_Base_Init>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800c7d6:	4807      	ldr	r0, [pc, #28]	; (800c7f4 <HAL_InitTick+0xb0>)
 800c7d8:	f007 fe79 	bl	80144ce <HAL_TIM_Base_Start_IT>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	e000      	b.n	800c7e2 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3730      	adds	r7, #48	; 0x30
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	40023800 	.word	0x40023800
 800c7f0:	431bde83 	.word	0x431bde83
 800c7f4:	200064ec 	.word	0x200064ec

0800c7f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
	return 1;
 800c7fc:	2301      	movs	r3, #1
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <_kill>:

int _kill(int pid, int sig)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c812:	f00c fbfb 	bl	801900c <__errno>
 800c816:	4603      	mov	r3, r0
 800c818:	2216      	movs	r2, #22
 800c81a:	601a      	str	r2, [r3, #0]
	return -1;
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <_exit>:

void _exit (int status)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff ffe7 	bl	800c808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c83a:	e7fe      	b.n	800c83a <_exit+0x12>

0800c83c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c848:	2300      	movs	r3, #0
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	e00a      	b.n	800c864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c84e:	f3af 8000 	nop.w
 800c852:	4601      	mov	r1, r0
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	60ba      	str	r2, [r7, #8]
 800c85a:	b2ca      	uxtb	r2, r1
 800c85c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	3301      	adds	r3, #1
 800c862:	617b      	str	r3, [r7, #20]
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	429a      	cmp	r2, r3
 800c86a:	dbf0      	blt.n	800c84e <_read+0x12>
	}

return len;
 800c86c:	687b      	ldr	r3, [r7, #4]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c882:	2300      	movs	r3, #0
 800c884:	617b      	str	r3, [r7, #20]
 800c886:	e009      	b.n	800c89c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	60ba      	str	r2, [r7, #8]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	3301      	adds	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	dbf1      	blt.n	800c888 <_write+0x12>
	}
	return len;
 800c8a4:	687b      	ldr	r3, [r7, #4]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <_close>:

int _close(int file)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
	return -1;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c8c6:	b480      	push	{r7}
 800c8c8:	b083      	sub	sp, #12
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c8d6:	605a      	str	r2, [r3, #4]
	return 0;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <_isatty>:

int _isatty(int file)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b083      	sub	sp, #12
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
	return 1;
 800c8ee:	2301      	movs	r3, #1
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
	return 0;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
	...

0800c918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c920:	4a14      	ldr	r2, [pc, #80]	; (800c974 <_sbrk+0x5c>)
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <_sbrk+0x60>)
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c92c:	4b13      	ldr	r3, [pc, #76]	; (800c97c <_sbrk+0x64>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c934:	4b11      	ldr	r3, [pc, #68]	; (800c97c <_sbrk+0x64>)
 800c936:	4a12      	ldr	r2, [pc, #72]	; (800c980 <_sbrk+0x68>)
 800c938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c93a:	4b10      	ldr	r3, [pc, #64]	; (800c97c <_sbrk+0x64>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4413      	add	r3, r2
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	429a      	cmp	r2, r3
 800c946:	d207      	bcs.n	800c958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c948:	f00c fb60 	bl	801900c <__errno>
 800c94c:	4603      	mov	r3, r0
 800c94e:	220c      	movs	r2, #12
 800c950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c956:	e009      	b.n	800c96c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c958:	4b08      	ldr	r3, [pc, #32]	; (800c97c <_sbrk+0x64>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c95e:	4b07      	ldr	r3, [pc, #28]	; (800c97c <_sbrk+0x64>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4413      	add	r3, r2
 800c966:	4a05      	ldr	r2, [pc, #20]	; (800c97c <_sbrk+0x64>)
 800c968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c96a:	68fb      	ldr	r3, [r7, #12]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20020000 	.word	0x20020000
 800c978:	00000400 	.word	0x00000400
 800c97c:	20000258 	.word	0x20000258
 800c980:	2000a9d0 	.word	0x2000a9d0

0800c984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c988:	4b08      	ldr	r3, [pc, #32]	; (800c9ac <SystemInit+0x28>)
 800c98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c98e:	4a07      	ldr	r2, [pc, #28]	; (800c9ac <SystemInit+0x28>)
 800c990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <SystemInit+0x28>)
 800c99a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c99e:	609a      	str	r2, [r3, #8]
#endif
}
 800c9a0:	bf00      	nop
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	e000ed00 	.word	0xe000ed00

0800c9b0 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b088      	sub	sp, #32
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
	if (!len) {
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f001 8437 	beq.w	800e230 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 800c9c2:	4bcd      	ldr	r3, [pc, #820]	; (800ccf8 <bldc_interface_process_packet+0x348>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d006      	beq.n	800c9d8 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800c9ca:	4bcb      	ldr	r3, [pc, #812]	; (800ccf8 <bldc_interface_process_packet+0x348>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	4798      	blx	r3
		return;
 800c9d4:	f001 bc43 	b.w	800e25e <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	61fb      	str	r3, [r7, #28]
	int i = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	74fb      	strb	r3, [r7, #19]
	data++;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	607b      	str	r3, [r7, #4]
	len--;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	603b      	str	r3, [r7, #0]

	switch (id) {
 800c9fa:	7cfb      	ldrb	r3, [r7, #19]
 800c9fc:	2b32      	cmp	r3, #50	; 0x32
 800c9fe:	f201 8419 	bhi.w	800e234 <bldc_interface_process_packet+0x1884>
 800ca02:	a201      	add	r2, pc, #4	; (adr r2, 800ca08 <bldc_interface_process_packet+0x58>)
 800ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca08:	0800cad5 	.word	0x0800cad5
 800ca0c:	0800e235 	.word	0x0800e235
 800ca10:	0800e235 	.word	0x0800e235
 800ca14:	0800e235 	.word	0x0800e235
 800ca18:	0800cb1f 	.word	0x0800cb1f
 800ca1c:	0800e235 	.word	0x0800e235
 800ca20:	0800e235 	.word	0x0800e235
 800ca24:	0800e235 	.word	0x0800e235
 800ca28:	0800e235 	.word	0x0800e235
 800ca2c:	0800e235 	.word	0x0800e235
 800ca30:	0800e235 	.word	0x0800e235
 800ca34:	0800e235 	.word	0x0800e235
 800ca38:	0800e235 	.word	0x0800e235
 800ca3c:	0800e211 	.word	0x0800e211
 800ca40:	0800d199 	.word	0x0800d199
 800ca44:	0800d199 	.word	0x0800d199
 800ca48:	0800e221 	.word	0x0800e221
 800ca4c:	0800da55 	.word	0x0800da55
 800ca50:	0800da55 	.word	0x0800da55
 800ca54:	0800e235 	.word	0x0800e235
 800ca58:	0800e235 	.word	0x0800e235
 800ca5c:	0800d119 	.word	0x0800d119
 800ca60:	0800d139 	.word	0x0800d139
 800ca64:	0800e235 	.word	0x0800e235
 800ca68:	0800e079 	.word	0x0800e079
 800ca6c:	0800e235 	.word	0x0800e235
 800ca70:	0800e235 	.word	0x0800e235
 800ca74:	0800e235 	.word	0x0800e235
 800ca78:	0800e235 	.word	0x0800e235
 800ca7c:	0800e235 	.word	0x0800e235
 800ca80:	0800e235 	.word	0x0800e235
 800ca84:	0800e121 	.word	0x0800e121
 800ca88:	0800e17d 	.word	0x0800e17d
 800ca8c:	0800e1d9 	.word	0x0800e1d9
 800ca90:	0800e235 	.word	0x0800e235
 800ca94:	0800e235 	.word	0x0800e235
 800ca98:	0800e235 	.word	0x0800e235
 800ca9c:	0800e235 	.word	0x0800e235
 800caa0:	0800e235 	.word	0x0800e235
 800caa4:	0800e235 	.word	0x0800e235
 800caa8:	0800e235 	.word	0x0800e235
 800caac:	0800e235 	.word	0x0800e235
 800cab0:	0800e235 	.word	0x0800e235
 800cab4:	0800e235 	.word	0x0800e235
 800cab8:	0800e235 	.word	0x0800e235
 800cabc:	0800e235 	.word	0x0800e235
 800cac0:	0800e235 	.word	0x0800e235
 800cac4:	0800e235 	.word	0x0800e235
 800cac8:	0800e235 	.word	0x0800e235
 800cacc:	0800e235 	.word	0x0800e235
 800cad0:	0800cd5d 	.word	0x0800cd5d
	case COMM_FW_VERSION:
		if (len == 2) {
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d117      	bne.n	800cb0a <bldc_interface_process_packet+0x15a>
			ind = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	60fa      	str	r2, [r7, #12]
 800cae4:	461a      	mov	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4413      	add	r3, r2
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	461a      	mov	r2, r3
 800caee:	4b83      	ldr	r3, [pc, #524]	; (800ccfc <bldc_interface_process_packet+0x34c>)
 800caf0:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	60fa      	str	r2, [r7, #12]
 800caf8:	461a      	mov	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b7f      	ldr	r3, [pc, #508]	; (800cd00 <bldc_interface_process_packet+0x350>)
 800cb04:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 800cb06:	f001 bbaa 	b.w	800e25e <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800cb0a:	4b7c      	ldr	r3, [pc, #496]	; (800ccfc <bldc_interface_process_packet+0x34c>)
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb10:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <bldc_interface_process_packet+0x350>)
 800cb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb18:	601a      	str	r2, [r3, #0]
		break;
 800cb1a:	f001 bba0 	b.w	800e25e <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800cb22:	f107 030c 	add.w	r3, r7, #12
 800cb26:	4619      	mov	r1, r3
 800cb28:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f001 fc65 	bl	800e3fc <buffer_get_float16>
 800cb32:	eef0 7a40 	vmov.f32	s15, s0
 800cb36:	4b73      	ldr	r3, [pc, #460]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cb38:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800cb3c:	f107 030c 	add.w	r3, r7, #12
 800cb40:	4619      	mov	r1, r3
 800cb42:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 fc58 	bl	800e3fc <buffer_get_float16>
 800cb4c:	eef0 7a40 	vmov.f32	s15, s0
 800cb50:	4b6c      	ldr	r3, [pc, #432]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cb52:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800cb56:	f107 030c 	add.w	r3, r7, #12
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800cd08 <bldc_interface_process_packet+0x358>
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 fc66 	bl	800e432 <buffer_get_float32>
 800cb66:	eef0 7a40 	vmov.f32	s15, s0
 800cb6a:	4b66      	ldr	r3, [pc, #408]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cb6c:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 800cb70:	f107 030c 	add.w	r3, r7, #12
 800cb74:	4619      	mov	r1, r3
 800cb76:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800cd08 <bldc_interface_process_packet+0x358>
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f001 fc59 	bl	800e432 <buffer_get_float32>
 800cb80:	eef0 7a40 	vmov.f32	s15, s0
 800cb84:	4b5f      	ldr	r3, [pc, #380]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cb86:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 800cb8a:	f107 030c 	add.w	r3, r7, #12
 800cb8e:	4619      	mov	r1, r3
 800cb90:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800cd08 <bldc_interface_process_packet+0x358>
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 fc4c 	bl	800e432 <buffer_get_float32>
 800cb9a:	eef0 7a40 	vmov.f32	s15, s0
 800cb9e:	4b59      	ldr	r3, [pc, #356]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cba0:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	4619      	mov	r1, r3
 800cbaa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800cd08 <bldc_interface_process_packet+0x358>
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fc3f 	bl	800e432 <buffer_get_float32>
 800cbb4:	eef0 7a40 	vmov.f32	s15, s0
 800cbb8:	4b52      	ldr	r3, [pc, #328]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cbba:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800cbbe:	f107 030c 	add.w	r3, r7, #12
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800cd0c <bldc_interface_process_packet+0x35c>
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 fc17 	bl	800e3fc <buffer_get_float16>
 800cbce:	eef0 7a40 	vmov.f32	s15, s0
 800cbd2:	4b4c      	ldr	r3, [pc, #304]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cbd4:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 800cbd8:	f107 030c 	add.w	r3, r7, #12
 800cbdc:	4619      	mov	r1, r3
 800cbde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f001 fc25 	bl	800e432 <buffer_get_float32>
 800cbe8:	eef0 7a40 	vmov.f32	s15, s0
 800cbec:	4b45      	ldr	r3, [pc, #276]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cbee:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 800cbf2:	f107 030c 	add.w	r3, r7, #12
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f001 fbfd 	bl	800e3fc <buffer_get_float16>
 800cc02:	eef0 7a40 	vmov.f32	s15, s0
 800cc06:	4b3f      	ldr	r3, [pc, #252]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc08:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	4619      	mov	r1, r3
 800cc12:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800cd10 <bldc_interface_process_packet+0x360>
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 fc0b 	bl	800e432 <buffer_get_float32>
 800cc1c:	eef0 7a40 	vmov.f32	s15, s0
 800cc20:	4b38      	ldr	r3, [pc, #224]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800cd10 <bldc_interface_process_packet+0x360>
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 fbfe 	bl	800e432 <buffer_get_float32>
 800cc36:	eef0 7a40 	vmov.f32	s15, s0
 800cc3a:	4b32      	ldr	r3, [pc, #200]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc3c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800cc40:	f107 030c 	add.w	r3, r7, #12
 800cc44:	4619      	mov	r1, r3
 800cc46:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800cd10 <bldc_interface_process_packet+0x360>
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 fbf1 	bl	800e432 <buffer_get_float32>
 800cc50:	eef0 7a40 	vmov.f32	s15, s0
 800cc54:	4b2b      	ldr	r3, [pc, #172]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc56:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cc5a:	f107 030c 	add.w	r3, r7, #12
 800cc5e:	4619      	mov	r1, r3
 800cc60:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800cd10 <bldc_interface_process_packet+0x360>
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f001 fbe4 	bl	800e432 <buffer_get_float32>
 800cc6a:	eef0 7a40 	vmov.f32	s15, s0
 800cc6e:	4b25      	ldr	r3, [pc, #148]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc70:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 800cc74:	f107 030c 	add.w	r3, r7, #12
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f001 fb5e 	bl	800e33c <buffer_get_int32>
 800cc80:	4603      	mov	r3, r0
 800cc82:	4a20      	ldr	r2, [pc, #128]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc84:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 800cc86:	f107 030c 	add.w	r3, r7, #12
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f001 fb55 	bl	800e33c <buffer_get_int32>
 800cc92:	4603      	mov	r3, r0
 800cc94:	4a1b      	ldr	r2, [pc, #108]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cc96:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	60fa      	str	r2, [r7, #12]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4413      	add	r3, r2
 800cca4:	781a      	ldrb	r2, [r3, #0]
 800cca6:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800cca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	da0d      	bge.n	800ccd0 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800ccb4:	f107 030c 	add.w	r3, r7, #12
 800ccb8:	4619      	mov	r1, r3
 800ccba:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800cd14 <bldc_interface_process_packet+0x364>
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f001 fbb7 	bl	800e432 <buffer_get_float32>
 800ccc4:	eef0 7a40 	vmov.f32	s15, s0
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800ccca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800ccce:	e003      	b.n	800ccd8 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 800ccd0:	4b0c      	ldr	r3, [pc, #48]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800ccd2:	f04f 0200 	mov.w	r2, #0
 800ccd6:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	da1b      	bge.n	800cd18 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	60fa      	str	r2, [r7, #12]
 800cce6:	461a      	mov	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4413      	add	r3, r2
 800ccec:	781a      	ldrb	r2, [r3, #0]
 800ccee:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <bldc_interface_process_packet+0x354>)
 800ccf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ccf4:	e014      	b.n	800cd20 <bldc_interface_process_packet+0x370>
 800ccf6:	bf00      	nop
 800ccf8:	20000544 	.word	0x20000544
 800ccfc:	200002bc 	.word	0x200002bc
 800cd00:	200002c0 	.word	0x200002c0
 800cd04:	2000025c 	.word	0x2000025c
 800cd08:	42c80000 	.word	0x42c80000
 800cd0c:	447a0000 	.word	0x447a0000
 800cd10:	461c4000 	.word	0x461c4000
 800cd14:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <bldc_interface_process_packet+0x39c>)
 800cd1a:	22ff      	movs	r2, #255	; 0xff
 800cd1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <bldc_interface_process_packet+0x3a0>)
 800cd22:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <bldc_interface_process_packet+0x39c>)
 800cd24:	4610      	mov	r0, r2
 800cd26:	4619      	mov	r1, r3
 800cd28:	2360      	movs	r3, #96	; 0x60
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	f00c f9a0 	bl	8019070 <memcpy>

		if (rx_value_func) {
 800cd30:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <bldc_interface_process_packet+0x3a4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d003      	beq.n	800cd40 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <bldc_interface_process_packet+0x3a4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4803      	ldr	r0, [pc, #12]	; (800cd4c <bldc_interface_process_packet+0x39c>)
 800cd3e:	4798      	blx	r3
		}

		rx_value_complete = true;
 800cd40:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <bldc_interface_process_packet+0x3a8>)
 800cd42:	2201      	movs	r2, #1
 800cd44:	701a      	strb	r2, [r3, #0]

		break;
 800cd46:	f001 ba8a 	b.w	800e25e <bldc_interface_process_packet+0x18ae>
 800cd4a:	bf00      	nop
 800cd4c:	2000025c 	.word	0x2000025c
 800cd50:	20007768 	.word	0x20007768
 800cd54:	20000548 	.word	0x20000548
 800cd58:	2000a5ec 	.word	0x2000a5ec

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 800cd60:	f107 030c 	add.w	r3, r7, #12
 800cd64:	4619      	mov	r1, r3
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f001 fb18 	bl	800e39c <buffer_get_uint32>
 800cd6c:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00e      	beq.n	800cd96 <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800cd78:	f107 030c 	add.w	r3, r7, #12
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f001 fb3a 	bl	800e3fc <buffer_get_float16>
 800cd88:	eef0 7a40 	vmov.f32	s15, s0
 800cd8c:	4bc6      	ldr	r3, [pc, #792]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cd8e:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f003 0302 	and.w	r3, r3, #2
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00e      	beq.n	800cdbe <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800cda0:	f107 030c 	add.w	r3, r7, #12
 800cda4:	4619      	mov	r1, r3
 800cda6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 fb26 	bl	800e3fc <buffer_get_float16>
 800cdb0:	eef0 7a40 	vmov.f32	s15, s0
 800cdb4:	4bbc      	ldr	r3, [pc, #752]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cdb6:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00e      	beq.n	800cde6 <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800cdc8:	f107 030c 	add.w	r3, r7, #12
 800cdcc:	4619      	mov	r1, r3
 800cdce:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800d0ac <bldc_interface_process_packet+0x6fc>
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 fb2d 	bl	800e432 <buffer_get_float32>
 800cdd8:	eef0 7a40 	vmov.f32	s15, s0
 800cddc:	4bb2      	ldr	r3, [pc, #712]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cdde:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 800cde2:	2302      	movs	r3, #2
 800cde4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f003 0308 	and.w	r3, r3, #8
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00e      	beq.n	800ce0e <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 800cdf0:	f107 030c 	add.w	r3, r7, #12
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800d0ac <bldc_interface_process_packet+0x6fc>
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f001 fb19 	bl	800e432 <buffer_get_float32>
 800ce00:	eef0 7a40 	vmov.f32	s15, s0
 800ce04:	4ba8      	ldr	r3, [pc, #672]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800ce06:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f003 0310 	and.w	r3, r3, #16
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 800ce18:	f107 030c 	add.w	r3, r7, #12
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800d0ac <bldc_interface_process_packet+0x6fc>
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 fb05 	bl	800e432 <buffer_get_float32>
 800ce28:	eef0 7a40 	vmov.f32	s15, s0
 800ce2c:	4b9e      	ldr	r3, [pc, #632]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800ce2e:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 800ce32:	2304      	movs	r3, #4
 800ce34:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f003 0320 	and.w	r3, r3, #32
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00e      	beq.n	800ce5e <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 800ce40:	f107 030c 	add.w	r3, r7, #12
 800ce44:	4619      	mov	r1, r3
 800ce46:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800d0ac <bldc_interface_process_packet+0x6fc>
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f001 faf1 	bl	800e432 <buffer_get_float32>
 800ce50:	eef0 7a40 	vmov.f32	s15, s0
 800ce54:	4b94      	ldr	r3, [pc, #592]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800ce56:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 800ce5a:	2305      	movs	r3, #5
 800ce5c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00e      	beq.n	800ce86 <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800ce68:	f107 030c 	add.w	r3, r7, #12
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800d0b8 <bldc_interface_process_packet+0x708>
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f001 fac2 	bl	800e3fc <buffer_get_float16>
 800ce78:	eef0 7a40 	vmov.f32	s15, s0
 800ce7c:	4b8a      	ldr	r3, [pc, #552]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800ce7e:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 800ce82:	2306      	movs	r3, #6
 800ce84:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00e      	beq.n	800ceae <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 800ce90:	f107 030c 	add.w	r3, r7, #12
 800ce94:	4619      	mov	r1, r3
 800ce96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 fac9 	bl	800e432 <buffer_get_float32>
 800cea0:	eef0 7a40 	vmov.f32	s15, s0
 800cea4:	4b80      	ldr	r3, [pc, #512]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cea6:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 800ceaa:	2307      	movs	r3, #7
 800ceac:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00e      	beq.n	800ced6 <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 800ceb8:	f107 030c 	add.w	r3, r7, #12
 800cebc:	4619      	mov	r1, r3
 800cebe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fa9a 	bl	800e3fc <buffer_get_float16>
 800cec8:	eef0 7a40 	vmov.f32	s15, s0
 800cecc:	4b76      	ldr	r3, [pc, #472]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cece:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 800ced2:	2308      	movs	r3, #8
 800ced4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00e      	beq.n	800cefe <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800cee0:	f107 030c 	add.w	r3, r7, #12
 800cee4:	4619      	mov	r1, r3
 800cee6:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800d0b0 <bldc_interface_process_packet+0x700>
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f001 faa1 	bl	800e432 <buffer_get_float32>
 800cef0:	eef0 7a40 	vmov.f32	s15, s0
 800cef4:	4b6c      	ldr	r3, [pc, #432]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cef6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 800cefa:	2309      	movs	r3, #9
 800cefc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00e      	beq.n	800cf26 <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800d0b0 <bldc_interface_process_packet+0x700>
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f001 fa8d 	bl	800e432 <buffer_get_float32>
 800cf18:	eef0 7a40 	vmov.f32	s15, s0
 800cf1c:	4b62      	ldr	r3, [pc, #392]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cf1e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 800cf22:	230a      	movs	r3, #10
 800cf24:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	4619      	mov	r1, r3
 800cf36:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800d0b0 <bldc_interface_process_packet+0x700>
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f001 fa79 	bl	800e432 <buffer_get_float32>
 800cf40:	eef0 7a40 	vmov.f32	s15, s0
 800cf44:	4b58      	ldr	r3, [pc, #352]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cf46:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 800cf4a:	230b      	movs	r3, #11
 800cf4c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00e      	beq.n	800cf76 <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800cf58:	f107 030c 	add.w	r3, r7, #12
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800d0b0 <bldc_interface_process_packet+0x700>
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 fa65 	bl	800e432 <buffer_get_float32>
 800cf68:	eef0 7a40 	vmov.f32	s15, s0
 800cf6c:	4b4e      	ldr	r3, [pc, #312]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cf6e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 800cf72:	230c      	movs	r3, #12
 800cf74:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00a      	beq.n	800cf96 <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 800cf80:	f107 030c 	add.w	r3, r7, #12
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 f9d8 	bl	800e33c <buffer_get_int32>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	4a46      	ldr	r2, [pc, #280]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cf90:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 800cf92:	230d      	movs	r3, #13
 800cf94:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00a      	beq.n	800cfb6 <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 800cfa0:	f107 030c 	add.w	r3, r7, #12
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 f9c8 	bl	800e33c <buffer_get_int32>
 800cfac:	4603      	mov	r3, r0
 800cfae:	4a3e      	ldr	r2, [pc, #248]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cfb0:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 800cfb2:	230e      	movs	r3, #14
 800cfb4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00b      	beq.n	800cfd8 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	1c5a      	adds	r2, r3, #1
 800cfc4:	60fa      	str	r2, [r7, #12]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4413      	add	r3, r2
 800cfcc:	781a      	ldrb	r2, [r3, #0]
 800cfce:	4b36      	ldr	r3, [pc, #216]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cfd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 800cfd4:	230f      	movs	r3, #15
 800cfd6:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00e      	beq.n	800d000 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800cfe2:	f107 030c 	add.w	r3, r7, #12
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800d0b4 <bldc_interface_process_packet+0x704>
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f001 fa20 	bl	800e432 <buffer_get_float32>
 800cff2:	eef0 7a40 	vmov.f32	s15, s0
 800cff6:	4b2c      	ldr	r3, [pc, #176]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800cff8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 800cffc:	2310      	movs	r3, #16
 800cffe:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00b      	beq.n	800d022 <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	1c5a      	adds	r2, r3, #1
 800d00e:	60fa      	str	r2, [r7, #12]
 800d010:	461a      	mov	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4413      	add	r3, r2
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	4b23      	ldr	r3, [pc, #140]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800d01a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 800d01e:	2311      	movs	r3, #17
 800d020:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d028      	beq.n	800d07e <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 800d02c:	f107 030c 	add.w	r3, r7, #12
 800d030:	4619      	mov	r1, r3
 800d032:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f001 f9e0 	bl	800e3fc <buffer_get_float16>
 800d03c:	eef0 7a40 	vmov.f32	s15, s0
 800d040:	4b19      	ldr	r3, [pc, #100]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800d042:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 800d046:	f107 030c 	add.w	r3, r7, #12
 800d04a:	4619      	mov	r1, r3
 800d04c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f001 f9d3 	bl	800e3fc <buffer_get_float16>
 800d056:	eef0 7a40 	vmov.f32	s15, s0
 800d05a:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800d05c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 800d060:	f107 030c 	add.w	r3, r7, #12
 800d064:	4619      	mov	r1, r3
 800d066:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f001 f9c6 	bl	800e3fc <buffer_get_float16>
 800d070:	eef0 7a40 	vmov.f32	s15, s0
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800d076:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 800d07a:	2312      	movs	r3, #18
 800d07c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d019      	beq.n	800d0bc <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 800d088:	f107 030c 	add.w	r3, r7, #12
 800d08c:	4619      	mov	r1, r3
 800d08e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800d0b8 <bldc_interface_process_packet+0x708>
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 f9cd 	bl	800e432 <buffer_get_float32>
 800d098:	eef0 7a40 	vmov.f32	s15, s0
 800d09c:	4b02      	ldr	r3, [pc, #8]	; (800d0a8 <bldc_interface_process_packet+0x6f8>)
 800d09e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 800d0a2:	2313      	movs	r3, #19
 800d0a4:	61fb      	str	r3, [r7, #28]
 800d0a6:	e009      	b.n	800d0bc <bldc_interface_process_packet+0x70c>
 800d0a8:	2000025c 	.word	0x2000025c
 800d0ac:	42c80000 	.word	0x42c80000
 800d0b0:	461c4000 	.word	0x461c4000
 800d0b4:	49742400 	.word	0x49742400
 800d0b8:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00e      	beq.n	800d0e4 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 800d0c6:	f107 030c 	add.w	r3, r7, #12
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 800d0b8 <bldc_interface_process_packet+0x708>
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f001 f9ae 	bl	800e432 <buffer_get_float32>
 800d0d6:	eef0 7a40 	vmov.f32	s15, s0
 800d0da:	4b26      	ldr	r3, [pc, #152]	; (800d174 <bldc_interface_process_packet+0x7c4>)
 800d0dc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 800d0e0:	2314      	movs	r3, #20
 800d0e2:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 800d0e4:	4a24      	ldr	r2, [pc, #144]	; (800d178 <bldc_interface_process_packet+0x7c8>)
 800d0e6:	4b23      	ldr	r3, [pc, #140]	; (800d174 <bldc_interface_process_packet+0x7c4>)
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	2360      	movs	r3, #96	; 0x60
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f00b ffbe 	bl	8019070 <memcpy>

		if(rx_value_selective_print){
 800d0f4:	4b21      	ldr	r3, [pc, #132]	; (800d17c <bldc_interface_process_packet+0x7cc>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d008      	beq.n	800d10e <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 800d0fc:	4b20      	ldr	r3, [pc, #128]	; (800d180 <bldc_interface_process_packet+0x7d0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 800d104:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <bldc_interface_process_packet+0x7d0>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	491a      	ldr	r1, [pc, #104]	; (800d174 <bldc_interface_process_packet+0x7c4>)
 800d10a:	69f8      	ldr	r0, [r7, #28]
 800d10c:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 800d10e:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <bldc_interface_process_packet+0x7d4>)
 800d110:	2201      	movs	r2, #1
 800d112:	701a      	strb	r2, [r3, #0]
		break;
 800d114:	f001 b8a3 	b.w	800e25e <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 800d118:	4b1b      	ldr	r3, [pc, #108]	; (800d188 <bldc_interface_process_packet+0x7d8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f001 808b 	beq.w	800e238 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	4413      	add	r3, r2
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 800d12c:	4b16      	ldr	r3, [pc, #88]	; (800d188 <bldc_interface_process_packet+0x7d8>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	4798      	blx	r3
		}
		break;
 800d134:	f001 b880 	b.w	800e238 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 800d13c:	f107 030c 	add.w	r3, r7, #12
 800d140:	4619      	mov	r1, r3
 800d142:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800d18c <bldc_interface_process_packet+0x7dc>
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 f973 	bl	800e432 <buffer_get_float32>
 800d14c:	eef0 7a40 	vmov.f32	s15, s0
 800d150:	4b0f      	ldr	r3, [pc, #60]	; (800d190 <bldc_interface_process_packet+0x7e0>)
 800d152:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 800d156:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <bldc_interface_process_packet+0x7e4>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f001 806e 	beq.w	800e23c <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 800d160:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <bldc_interface_process_packet+0x7e4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a0a      	ldr	r2, [pc, #40]	; (800d190 <bldc_interface_process_packet+0x7e0>)
 800d166:	edd2 7a00 	vldr	s15, [r2]
 800d16a:	eeb0 0a67 	vmov.f32	s0, s15
 800d16e:	4798      	blx	r3
		}
		break;
 800d170:	f001 b864 	b.w	800e23c <bldc_interface_process_packet+0x188c>
 800d174:	2000025c 	.word	0x2000025c
 800d178:	20007768 	.word	0x20007768
 800d17c:	2000a90c 	.word	0x2000a90c
 800d180:	2000054c 	.word	0x2000054c
 800d184:	2000a5ec 	.word	0x2000a5ec
 800d188:	20000550 	.word	0x20000550
 800d18c:	47c35000 	.word	0x47c35000
 800d190:	200002c4 	.word	0x200002c4
 800d194:	20000554 	.word	0x20000554
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 800d19c:	f107 030c 	add.w	r3, r7, #12
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 f8fa 	bl	800e39c <buffer_get_uint32>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	4ac5      	ldr	r2, [pc, #788]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d1ac:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	60fa      	str	r2, [r7, #12]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	781a      	ldrb	r2, [r3, #0]
 800d1bc:	4bc0      	ldr	r3, [pc, #768]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d1be:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	60fa      	str	r2, [r7, #12]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	781a      	ldrb	r2, [r3, #0]
 800d1ce:	4bbc      	ldr	r3, [pc, #752]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d1d0:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	60fa      	str	r2, [r7, #12]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	4bb7      	ldr	r3, [pc, #732]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d1e2:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	60fa      	str	r2, [r7, #12]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	4bb3      	ldr	r3, [pc, #716]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d1f4:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 800d1f6:	f107 030c 	add.w	r3, r7, #12
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f001 f933 	bl	800e468 <buffer_get_float32_auto>
 800d202:	eef0 7a40 	vmov.f32	s15, s0
 800d206:	4bae      	ldr	r3, [pc, #696]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d208:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 800d20c:	f107 030c 	add.w	r3, r7, #12
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f001 f928 	bl	800e468 <buffer_get_float32_auto>
 800d218:	eef0 7a40 	vmov.f32	s15, s0
 800d21c:	4ba8      	ldr	r3, [pc, #672]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d21e:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 800d222:	f107 030c 	add.w	r3, r7, #12
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f001 f91d 	bl	800e468 <buffer_get_float32_auto>
 800d22e:	eef0 7a40 	vmov.f32	s15, s0
 800d232:	4ba3      	ldr	r3, [pc, #652]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d234:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 800d238:	f107 030c 	add.w	r3, r7, #12
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f001 f912 	bl	800e468 <buffer_get_float32_auto>
 800d244:	eef0 7a40 	vmov.f32	s15, s0
 800d248:	4b9d      	ldr	r3, [pc, #628]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d24a:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 800d24e:	f107 030c 	add.w	r3, r7, #12
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f001 f907 	bl	800e468 <buffer_get_float32_auto>
 800d25a:	eef0 7a40 	vmov.f32	s15, s0
 800d25e:	4b98      	ldr	r3, [pc, #608]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d260:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 800d264:	f107 030c 	add.w	r3, r7, #12
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f001 f8fc 	bl	800e468 <buffer_get_float32_auto>
 800d270:	eef0 7a40 	vmov.f32	s15, s0
 800d274:	4b92      	ldr	r3, [pc, #584]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d276:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 800d27a:	f107 030c 	add.w	r3, r7, #12
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f001 f8f1 	bl	800e468 <buffer_get_float32_auto>
 800d286:	eef0 7a40 	vmov.f32	s15, s0
 800d28a:	4b8d      	ldr	r3, [pc, #564]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d28c:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f001 f8e6 	bl	800e468 <buffer_get_float32_auto>
 800d29c:	eef0 7a40 	vmov.f32	s15, s0
 800d2a0:	4b87      	ldr	r3, [pc, #540]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d2a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 f8db 	bl	800e468 <buffer_get_float32_auto>
 800d2b2:	eef0 7a40 	vmov.f32	s15, s0
 800d2b6:	4b82      	ldr	r3, [pc, #520]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d2b8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 800d2bc:	f107 030c 	add.w	r3, r7, #12
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f001 f8d0 	bl	800e468 <buffer_get_float32_auto>
 800d2c8:	eef0 7a40 	vmov.f32	s15, s0
 800d2cc:	4b7c      	ldr	r3, [pc, #496]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d2ce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 800d2d2:	f107 030c 	add.w	r3, r7, #12
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 f8c5 	bl	800e468 <buffer_get_float32_auto>
 800d2de:	eef0 7a40 	vmov.f32	s15, s0
 800d2e2:	4b77      	ldr	r3, [pc, #476]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d2e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f001 f8ba 	bl	800e468 <buffer_get_float32_auto>
 800d2f4:	eef0 7a40 	vmov.f32	s15, s0
 800d2f8:	4b71      	ldr	r3, [pc, #452]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d2fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 800d2fe:	f107 030c 	add.w	r3, r7, #12
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f001 f8af 	bl	800e468 <buffer_get_float32_auto>
 800d30a:	eef0 7a40 	vmov.f32	s15, s0
 800d30e:	4b6c      	ldr	r3, [pc, #432]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d310:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 800d314:	f107 030c 	add.w	r3, r7, #12
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 f8a4 	bl	800e468 <buffer_get_float32_auto>
 800d320:	eef0 7a40 	vmov.f32	s15, s0
 800d324:	4b66      	ldr	r3, [pc, #408]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d326:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	60fa      	str	r2, [r7, #12]
 800d330:	461a      	mov	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4413      	add	r3, r2
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bf14      	ite	ne
 800d33c:	2301      	movne	r3, #1
 800d33e:	2300      	moveq	r3, #0
 800d340:	b2da      	uxtb	r2, r3
 800d342:	4b5f      	ldr	r3, [pc, #380]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 800d348:	f107 030c 	add.w	r3, r7, #12
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f001 f88a 	bl	800e468 <buffer_get_float32_auto>
 800d354:	eef0 7a40 	vmov.f32	s15, s0
 800d358:	4b59      	ldr	r3, [pc, #356]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d35a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 800d35e:	f107 030c 	add.w	r3, r7, #12
 800d362:	4619      	mov	r1, r3
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f001 f87f 	bl	800e468 <buffer_get_float32_auto>
 800d36a:	eef0 7a40 	vmov.f32	s15, s0
 800d36e:	4b54      	ldr	r3, [pc, #336]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d370:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 800d374:	f107 030c 	add.w	r3, r7, #12
 800d378:	4619      	mov	r1, r3
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f001 f874 	bl	800e468 <buffer_get_float32_auto>
 800d380:	eef0 7a40 	vmov.f32	s15, s0
 800d384:	4b4e      	ldr	r3, [pc, #312]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d386:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 f869 	bl	800e468 <buffer_get_float32_auto>
 800d396:	eef0 7a40 	vmov.f32	s15, s0
 800d39a:	4b49      	ldr	r3, [pc, #292]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d39c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 800d3a0:	f107 030c 	add.w	r3, r7, #12
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f001 f85e 	bl	800e468 <buffer_get_float32_auto>
 800d3ac:	eef0 7a40 	vmov.f32	s15, s0
 800d3b0:	4b43      	ldr	r3, [pc, #268]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d3b2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 800d3b6:	f107 030c 	add.w	r3, r7, #12
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f001 f853 	bl	800e468 <buffer_get_float32_auto>
 800d3c2:	eef0 7a40 	vmov.f32	s15, s0
 800d3c6:	4b3e      	ldr	r3, [pc, #248]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d3c8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 800d3cc:	f107 030c 	add.w	r3, r7, #12
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f001 f848 	bl	800e468 <buffer_get_float32_auto>
 800d3d8:	eef0 7a40 	vmov.f32	s15, s0
 800d3dc:	4b38      	ldr	r3, [pc, #224]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d3de:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 800d3e2:	f107 030c 	add.w	r3, r7, #12
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f001 f83d 	bl	800e468 <buffer_get_float32_auto>
 800d3ee:	eef0 7a40 	vmov.f32	s15, s0
 800d3f2:	4b33      	ldr	r3, [pc, #204]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d3f4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 800d3f8:	f107 030c 	add.w	r3, r7, #12
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 f832 	bl	800e468 <buffer_get_float32_auto>
 800d404:	eef0 7a40 	vmov.f32	s15, s0
 800d408:	4b2d      	ldr	r3, [pc, #180]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d40a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 800d40e:	4b2c      	ldr	r3, [pc, #176]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	4a2b      	ldr	r2, [pc, #172]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d414:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 800d416:	4b2a      	ldr	r3, [pc, #168]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	4a29      	ldr	r2, [pc, #164]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d41c:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 800d41e:	4b28      	ldr	r3, [pc, #160]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	4a27      	ldr	r2, [pc, #156]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d424:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 800d426:	4b26      	ldr	r3, [pc, #152]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	4a25      	ldr	r2, [pc, #148]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d42c:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 800d42e:	4b24      	ldr	r3, [pc, #144]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	4a23      	ldr	r2, [pc, #140]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d434:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 800d436:	4b22      	ldr	r3, [pc, #136]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	4a21      	ldr	r2, [pc, #132]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d43c:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	4619      	mov	r1, r3
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f001 f80f 	bl	800e468 <buffer_get_float32_auto>
 800d44a:	eef0 7a40 	vmov.f32	s15, s0
 800d44e:	4b1c      	ldr	r3, [pc, #112]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d450:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d454:	f107 030c 	add.w	r3, r7, #12
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f001 f804 	bl	800e468 <buffer_get_float32_auto>
 800d460:	eef0 7a40 	vmov.f32	s15, s0
 800d464:	4b16      	ldr	r3, [pc, #88]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d466:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 800d46a:	f107 030c 	add.w	r3, r7, #12
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fff9 	bl	800e468 <buffer_get_float32_auto>
 800d476:	eef0 7a40 	vmov.f32	s15, s0
 800d47a:	4b11      	ldr	r3, [pc, #68]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d47c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 800d480:	f107 030c 	add.w	r3, r7, #12
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 ffee 	bl	800e468 <buffer_get_float32_auto>
 800d48c:	eef0 7a40 	vmov.f32	s15, s0
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d492:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 800d496:	f107 030c 	add.w	r3, r7, #12
 800d49a:	4619      	mov	r1, r3
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 ffe3 	bl	800e468 <buffer_get_float32_auto>
 800d4a2:	eef0 7a40 	vmov.f32	s15, s0
 800d4a6:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <bldc_interface_process_packet+0xb10>)
 800d4a8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 800d4ac:	f107 030c 	add.w	r3, r7, #12
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 ffd8 	bl	800e468 <buffer_get_float32_auto>
 800d4b8:	eef0 7a40 	vmov.f32	s15, s0
 800d4bc:	e002      	b.n	800d4c4 <bldc_interface_process_packet+0xb14>
 800d4be:	bf00      	nop
 800d4c0:	200002c8 	.word	0x200002c8
 800d4c4:	4bc7      	ldr	r3, [pc, #796]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d4c6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 ffc9 	bl	800e468 <buffer_get_float32_auto>
 800d4d6:	eef0 7a40 	vmov.f32	s15, s0
 800d4da:	4bc2      	ldr	r3, [pc, #776]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d4dc:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	441a      	add	r2, r3
 800d4e8:	4bbe      	ldr	r3, [pc, #760]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d4ea:	339c      	adds	r3, #156	; 0x9c
 800d4ec:	6810      	ldr	r0, [r2, #0]
 800d4ee:	6851      	ldr	r1, [r2, #4]
 800d4f0:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d4f8:	f107 030c 	add.w	r3, r7, #12
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 ffb2 	bl	800e468 <buffer_get_float32_auto>
 800d504:	eef0 7a40 	vmov.f32	s15, s0
 800d508:	4bb6      	ldr	r3, [pc, #728]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d50a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 800d50e:	f107 030c 	add.w	r3, r7, #12
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 ffa7 	bl	800e468 <buffer_get_float32_auto>
 800d51a:	eef0 7a40 	vmov.f32	s15, s0
 800d51e:	4bb1      	ldr	r3, [pc, #708]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d520:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 800d524:	f107 030c 	add.w	r3, r7, #12
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 ff9c 	bl	800e468 <buffer_get_float32_auto>
 800d530:	eef0 7a40 	vmov.f32	s15, s0
 800d534:	4bab      	ldr	r3, [pc, #684]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d536:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800d53a:	f107 030c 	add.w	r3, r7, #12
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 ff91 	bl	800e468 <buffer_get_float32_auto>
 800d546:	eef0 7a40 	vmov.f32	s15, s0
 800d54a:	4ba6      	ldr	r3, [pc, #664]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d54c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 800d550:	f107 030c 	add.w	r3, r7, #12
 800d554:	4619      	mov	r1, r3
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 ff86 	bl	800e468 <buffer_get_float32_auto>
 800d55c:	eef0 7a40 	vmov.f32	s15, s0
 800d560:	4ba0      	ldr	r3, [pc, #640]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d562:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	60fa      	str	r2, [r7, #12]
 800d56c:	461a      	mov	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4413      	add	r3, r2
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	bf14      	ite	ne
 800d578:	2301      	movne	r3, #1
 800d57a:	2300      	moveq	r3, #0
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	4b99      	ldr	r3, [pc, #612]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d580:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 800d584:	f107 030c 	add.w	r3, r7, #12
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 ff6c 	bl	800e468 <buffer_get_float32_auto>
 800d590:	eef0 7a40 	vmov.f32	s15, s0
 800d594:	4b93      	ldr	r3, [pc, #588]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d596:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 ff61 	bl	800e468 <buffer_get_float32_auto>
 800d5a6:	eef0 7a40 	vmov.f32	s15, s0
 800d5aa:	4b8e      	ldr	r3, [pc, #568]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d5ac:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	60fa      	str	r2, [r7, #12]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	781a      	ldrb	r2, [r3, #0]
 800d5be:	4b89      	ldr	r3, [pc, #548]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d5c0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 800d5c4:	f107 030c 	add.w	r3, r7, #12
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 ff4c 	bl	800e468 <buffer_get_float32_auto>
 800d5d0:	eef0 7a40 	vmov.f32	s15, s0
 800d5d4:	4b83      	ldr	r3, [pc, #524]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d5d6:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 800d5da:	f107 030c 	add.w	r3, r7, #12
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 ff41 	bl	800e468 <buffer_get_float32_auto>
 800d5e6:	eef0 7a40 	vmov.f32	s15, s0
 800d5ea:	4b7e      	ldr	r3, [pc, #504]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d5ec:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 800d5f0:	f107 030c 	add.w	r3, r7, #12
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 ff36 	bl	800e468 <buffer_get_float32_auto>
 800d5fc:	eef0 7a40 	vmov.f32	s15, s0
 800d600:	4b78      	ldr	r3, [pc, #480]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d602:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 800d606:	f107 030c 	add.w	r3, r7, #12
 800d60a:	4619      	mov	r1, r3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 ff2b 	bl	800e468 <buffer_get_float32_auto>
 800d612:	eef0 7a40 	vmov.f32	s15, s0
 800d616:	4b73      	ldr	r3, [pc, #460]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d618:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 800d61c:	f107 030c 	add.w	r3, r7, #12
 800d620:	4619      	mov	r1, r3
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 ff20 	bl	800e468 <buffer_get_float32_auto>
 800d628:	eef0 7a40 	vmov.f32	s15, s0
 800d62c:	4b6d      	ldr	r3, [pc, #436]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d62e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 800d632:	f107 030c 	add.w	r3, r7, #12
 800d636:	4619      	mov	r1, r3
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 ff15 	bl	800e468 <buffer_get_float32_auto>
 800d63e:	eef0 7a40 	vmov.f32	s15, s0
 800d642:	4b68      	ldr	r3, [pc, #416]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d644:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800d648:	f107 030c 	add.w	r3, r7, #12
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 ff0a 	bl	800e468 <buffer_get_float32_auto>
 800d654:	eef0 7a40 	vmov.f32	s15, s0
 800d658:	4b62      	ldr	r3, [pc, #392]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d65a:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 800d65e:	f107 030c 	add.w	r3, r7, #12
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 feff 	bl	800e468 <buffer_get_float32_auto>
 800d66a:	eef0 7a40 	vmov.f32	s15, s0
 800d66e:	4b5d      	ldr	r3, [pc, #372]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d670:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fef4 	bl	800e468 <buffer_get_float32_auto>
 800d680:	eef0 7a40 	vmov.f32	s15, s0
 800d684:	4b57      	ldr	r3, [pc, #348]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d686:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800d68a:	f107 030c 	add.w	r3, r7, #12
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fee9 	bl	800e468 <buffer_get_float32_auto>
 800d696:	eef0 7a40 	vmov.f32	s15, s0
 800d69a:	4b52      	ldr	r3, [pc, #328]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d69c:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 800d6a0:	f107 030c 	add.w	r3, r7, #12
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fede 	bl	800e468 <buffer_get_float32_auto>
 800d6ac:	eef0 7a40 	vmov.f32	s15, s0
 800d6b0:	4b4c      	ldr	r3, [pc, #304]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d6b2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800d6b6:	f107 030c 	add.w	r3, r7, #12
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fed3 	bl	800e468 <buffer_get_float32_auto>
 800d6c2:	eef0 7a40 	vmov.f32	s15, s0
 800d6c6:	4b47      	ldr	r3, [pc, #284]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d6c8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 800d6cc:	f107 030c 	add.w	r3, r7, #12
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fec8 	bl	800e468 <buffer_get_float32_auto>
 800d6d8:	eef0 7a40 	vmov.f32	s15, s0
 800d6dc:	4b41      	ldr	r3, [pc, #260]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d6de:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 800d6e2:	f107 030c 	add.w	r3, r7, #12
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 febd 	bl	800e468 <buffer_get_float32_auto>
 800d6ee:	eef0 7a40 	vmov.f32	s15, s0
 800d6f2:	4b3c      	ldr	r3, [pc, #240]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d6f4:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	441a      	add	r2, r3
 800d700:	4b38      	ldr	r3, [pc, #224]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d702:	33fd      	adds	r3, #253	; 0xfd
 800d704:	6811      	ldr	r1, [r2, #0]
 800d706:	6852      	ldr	r2, [r2, #4]
 800d708:	6019      	str	r1, [r3, #0]
 800d70a:	605a      	str	r2, [r3, #4]
		ind += 8;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3308      	adds	r3, #8
 800d710:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 800d712:	f107 030c 	add.w	r3, r7, #12
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fea5 	bl	800e468 <buffer_get_float32_auto>
 800d71e:	eef0 7a40 	vmov.f32	s15, s0
 800d722:	4b30      	ldr	r3, [pc, #192]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d724:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	60fa      	str	r2, [r7, #12]
 800d72e:	461a      	mov	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4413      	add	r3, r2
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bf14      	ite	ne
 800d73a:	2301      	movne	r3, #1
 800d73c:	2300      	moveq	r3, #0
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	4b28      	ldr	r3, [pc, #160]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d742:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	60fa      	str	r2, [r7, #12]
 800d74c:	461a      	mov	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4413      	add	r3, r2
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	bf14      	ite	ne
 800d758:	2301      	movne	r3, #1
 800d75a:	2300      	moveq	r3, #0
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	4b21      	ldr	r3, [pc, #132]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d760:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 800d764:	f107 030c 	add.w	r3, r7, #12
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fe7c 	bl	800e468 <buffer_get_float32_auto>
 800d770:	eef0 7a40 	vmov.f32	s15, s0
 800d774:	4b1b      	ldr	r3, [pc, #108]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d776:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	1c5a      	adds	r2, r3, #1
 800d77e:	60fa      	str	r2, [r7, #12]
 800d780:	461a      	mov	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4413      	add	r3, r2
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bf14      	ite	ne
 800d78c:	2301      	movne	r3, #1
 800d78e:	2300      	moveq	r3, #0
 800d790:	b2da      	uxtb	r2, r3
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d794:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800d798:	f107 030c 	add.w	r3, r7, #12
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fe62 	bl	800e468 <buffer_get_float32_auto>
 800d7a4:	eef0 7a40 	vmov.f32	s15, s0
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d7aa:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 800d7ae:	f107 030c 	add.w	r3, r7, #12
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fe57 	bl	800e468 <buffer_get_float32_auto>
 800d7ba:	eef0 7a40 	vmov.f32	s15, s0
 800d7be:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d7c0:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 800d7c4:	f107 030c 	add.w	r3, r7, #12
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fe4c 	bl	800e468 <buffer_get_float32_auto>
 800d7d0:	eef0 7a40 	vmov.f32	s15, s0
 800d7d4:	4b03      	ldr	r3, [pc, #12]	; (800d7e4 <bldc_interface_process_packet+0xe34>)
 800d7d6:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 800d7da:	f107 030c 	add.w	r3, r7, #12
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	e001      	b.n	800d7e8 <bldc_interface_process_packet+0xe38>
 800d7e4:	200002c8 	.word	0x200002c8
 800d7e8:	f000 fe3e 	bl	800e468 <buffer_get_float32_auto>
 800d7ec:	eef0 7a40 	vmov.f32	s15, s0
 800d7f0:	4b96      	ldr	r3, [pc, #600]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d7f2:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 800d7f6:	f107 030c 	add.w	r3, r7, #12
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fe33 	bl	800e468 <buffer_get_float32_auto>
 800d802:	eef0 7a40 	vmov.f32	s15, s0
 800d806:	4b91      	ldr	r3, [pc, #580]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d808:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d80c:	f107 030c 	add.w	r3, r7, #12
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fe28 	bl	800e468 <buffer_get_float32_auto>
 800d818:	eef0 7a40 	vmov.f32	s15, s0
 800d81c:	4b8b      	ldr	r3, [pc, #556]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d81e:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 800d822:	f107 030c 	add.w	r3, r7, #12
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fe1d 	bl	800e468 <buffer_get_float32_auto>
 800d82e:	eef0 7a40 	vmov.f32	s15, s0
 800d832:	4b86      	ldr	r3, [pc, #536]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d834:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	60fa      	str	r2, [r7, #12]
 800d83e:	461a      	mov	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4413      	add	r3, r2
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	bf14      	ite	ne
 800d84a:	2301      	movne	r3, #1
 800d84c:	2300      	moveq	r3, #0
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	4b7e      	ldr	r3, [pc, #504]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d852:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800d856:	f107 030c 	add.w	r3, r7, #12
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fe03 	bl	800e468 <buffer_get_float32_auto>
 800d862:	eef0 7a40 	vmov.f32	s15, s0
 800d866:	4b79      	ldr	r3, [pc, #484]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d868:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 800d86c:	f107 030c 	add.w	r3, r7, #12
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fdf8 	bl	800e468 <buffer_get_float32_auto>
 800d878:	eef0 7a40 	vmov.f32	s15, s0
 800d87c:	4b73      	ldr	r3, [pc, #460]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d87e:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 800d882:	f107 030c 	add.w	r3, r7, #12
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fded 	bl	800e468 <buffer_get_float32_auto>
 800d88e:	eef0 7a40 	vmov.f32	s15, s0
 800d892:	4b6e      	ldr	r3, [pc, #440]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d894:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800d898:	f107 030c 	add.w	r3, r7, #12
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fde2 	bl	800e468 <buffer_get_float32_auto>
 800d8a4:	eef0 7a40 	vmov.f32	s15, s0
 800d8a8:	4b68      	ldr	r3, [pc, #416]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d8aa:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 800d8ae:	f107 030c 	add.w	r3, r7, #12
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fdd7 	bl	800e468 <buffer_get_float32_auto>
 800d8ba:	eef0 7a40 	vmov.f32	s15, s0
 800d8be:	4b63      	ldr	r3, [pc, #396]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d8c0:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 800d8c4:	f107 030c 	add.w	r3, r7, #12
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fdcc 	bl	800e468 <buffer_get_float32_auto>
 800d8d0:	eef0 7a40 	vmov.f32	s15, s0
 800d8d4:	4b5d      	ldr	r3, [pc, #372]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d8d6:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 800d8da:	f107 030c 	add.w	r3, r7, #12
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fdc1 	bl	800e468 <buffer_get_float32_auto>
 800d8e6:	eef0 7a40 	vmov.f32	s15, s0
 800d8ea:	4b58      	ldr	r3, [pc, #352]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d8ec:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 800d8f0:	f107 030c 	add.w	r3, r7, #12
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fdb6 	bl	800e468 <buffer_get_float32_auto>
 800d8fc:	eef0 7a40 	vmov.f32	s15, s0
 800d900:	4b52      	ldr	r3, [pc, #328]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d902:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 800d906:	f107 030c 	add.w	r3, r7, #12
 800d90a:	4619      	mov	r1, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fdab 	bl	800e468 <buffer_get_float32_auto>
 800d912:	eef0 7a40 	vmov.f32	s15, s0
 800d916:	4b4d      	ldr	r3, [pc, #308]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d918:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 800d91c:	f107 030c 	add.w	r3, r7, #12
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fd0a 	bl	800e33c <buffer_get_int32>
 800d928:	4603      	mov	r3, r0
 800d92a:	4a48      	ldr	r2, [pc, #288]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d92c:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fd96 	bl	800e468 <buffer_get_float32_auto>
 800d93c:	eef0 7a40 	vmov.f32	s15, s0
 800d940:	4b42      	ldr	r3, [pc, #264]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d942:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800d946:	f107 030c 	add.w	r3, r7, #12
 800d94a:	4619      	mov	r1, r3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fd8b 	bl	800e468 <buffer_get_float32_auto>
 800d952:	eef0 7a40 	vmov.f32	s15, s0
 800d956:	4b3d      	ldr	r3, [pc, #244]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d958:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 800d95c:	f107 030c 	add.w	r3, r7, #12
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fd1a 	bl	800e39c <buffer_get_uint32>
 800d968:	4603      	mov	r3, r0
 800d96a:	4a38      	ldr	r2, [pc, #224]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d96c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	60fa      	str	r2, [r7, #12]
 800d976:	461a      	mov	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4413      	add	r3, r2
 800d97c:	781a      	ldrb	r2, [r3, #0]
 800d97e:	4b33      	ldr	r3, [pc, #204]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d980:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	60fa      	str	r2, [r7, #12]
 800d98a:	461a      	mov	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4413      	add	r3, r2
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	bf14      	ite	ne
 800d996:	2301      	movne	r3, #1
 800d998:	2300      	moveq	r3, #0
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	4b2b      	ldr	r3, [pc, #172]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d99e:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	60fa      	str	r2, [r7, #12]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	4b26      	ldr	r3, [pc, #152]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d9b2:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	1c5a      	adds	r2, r3, #1
 800d9ba:	60fa      	str	r2, [r7, #12]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	4b21      	ldr	r3, [pc, #132]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d9c8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 800d9cc:	f107 030c 	add.w	r3, r7, #12
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fd48 	bl	800e468 <buffer_get_float32_auto>
 800d9d8:	eef0 7a40 	vmov.f32	s15, s0
 800d9dc:	4b1b      	ldr	r3, [pc, #108]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d9de:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 800d9e2:	f107 030c 	add.w	r3, r7, #12
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fd3d 	bl	800e468 <buffer_get_float32_auto>
 800d9ee:	eef0 7a40 	vmov.f32	s15, s0
 800d9f2:	4b16      	ldr	r3, [pc, #88]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800d9f4:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 800d9f8:	f107 030c 	add.w	r3, r7, #12
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fd32 	bl	800e468 <buffer_get_float32_auto>
 800da04:	eef0 7a40 	vmov.f32	s15, s0
 800da08:	4b10      	ldr	r3, [pc, #64]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800da0a:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 800da0e:	f107 030c 	add.w	r3, r7, #12
 800da12:	4619      	mov	r1, r3
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fd27 	bl	800e468 <buffer_get_float32_auto>
 800da1a:	eef0 7a40 	vmov.f32	s15, s0
 800da1e:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800da20:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	60fa      	str	r2, [r7, #12]
 800da2a:	461a      	mov	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4413      	add	r3, r2
 800da30:	781a      	ldrb	r2, [r3, #0]
 800da32:	4b06      	ldr	r3, [pc, #24]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800da34:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <bldc_interface_process_packet+0x10a0>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 83ff 	beq.w	800e240 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 800da42:	4b03      	ldr	r3, [pc, #12]	; (800da50 <bldc_interface_process_packet+0x10a0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4801      	ldr	r0, [pc, #4]	; (800da4c <bldc_interface_process_packet+0x109c>)
 800da48:	4798      	blx	r3
		}
		break;
 800da4a:	e3f9      	b.n	800e240 <bldc_interface_process_packet+0x1890>
 800da4c:	200002c8 	.word	0x200002c8
 800da50:	20000558 	.word	0x20000558

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 800da58:	f107 030c 	add.w	r3, r7, #12
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fc9c 	bl	800e39c <buffer_get_uint32>
 800da64:	4603      	mov	r3, r0
 800da66:	4aba      	ldr	r2, [pc, #744]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800da68:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	60fa      	str	r2, [r7, #12]
 800da70:	461a      	mov	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4413      	add	r3, r2
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	4bb5      	ldr	r3, [pc, #724]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800da7a:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 800da7c:	f107 030c 	add.w	r3, r7, #12
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fc8a 	bl	800e39c <buffer_get_uint32>
 800da88:	4603      	mov	r3, r0
 800da8a:	4ab1      	ldr	r2, [pc, #708]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800da8c:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 800da8e:	f107 030c 	add.w	r3, r7, #12
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 fce7 	bl	800e468 <buffer_get_float32_auto>
 800da9a:	eef0 7a40 	vmov.f32	s15, s0
 800da9e:	4bac      	ldr	r3, [pc, #688]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800daa0:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	60fa      	str	r2, [r7, #12]
 800daaa:	461a      	mov	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4413      	add	r3, r2
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bf14      	ite	ne
 800dab6:	2301      	movne	r3, #1
 800dab8:	2300      	moveq	r3, #0
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	4ba4      	ldr	r3, [pc, #656]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dabe:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 800dac0:	f107 030c 	add.w	r3, r7, #12
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fc15 	bl	800e2f6 <buffer_get_uint16>
 800dacc:	4603      	mov	r3, r0
 800dace:	461a      	mov	r2, r3
 800dad0:	4b9f      	ldr	r3, [pc, #636]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dad2:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	60fa      	str	r2, [r7, #12]
 800dada:	461a      	mov	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4413      	add	r3, r2
 800dae0:	781a      	ldrb	r2, [r3, #0]
 800dae2:	4b9b      	ldr	r3, [pc, #620]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dae4:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	60fa      	str	r2, [r7, #12]
 800daec:	461a      	mov	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4413      	add	r3, r2
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	4b96      	ldr	r3, [pc, #600]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800daf6:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	60fa      	str	r2, [r7, #12]
 800dafe:	461a      	mov	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4413      	add	r3, r2
 800db04:	781a      	ldrb	r2, [r3, #0]
 800db06:	4b92      	ldr	r3, [pc, #584]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db08:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 800db0a:	f107 030c 	add.w	r3, r7, #12
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fca9 	bl	800e468 <buffer_get_float32_auto>
 800db16:	eef0 7a40 	vmov.f32	s15, s0
 800db1a:	4b8d      	ldr	r3, [pc, #564]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db1c:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 800db20:	f107 030c 	add.w	r3, r7, #12
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fc9e 	bl	800e468 <buffer_get_float32_auto>
 800db2c:	eef0 7a40 	vmov.f32	s15, s0
 800db30:	4b87      	ldr	r3, [pc, #540]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800db36:	f107 030c 	add.w	r3, r7, #12
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fc93 	bl	800e468 <buffer_get_float32_auto>
 800db42:	eef0 7a40 	vmov.f32	s15, s0
 800db46:	4b82      	ldr	r3, [pc, #520]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db48:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 800db4c:	f107 030c 	add.w	r3, r7, #12
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fc88 	bl	800e468 <buffer_get_float32_auto>
 800db58:	eef0 7a40 	vmov.f32	s15, s0
 800db5c:	4b7c      	ldr	r3, [pc, #496]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db5e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fc7d 	bl	800e468 <buffer_get_float32_auto>
 800db6e:	eef0 7a40 	vmov.f32	s15, s0
 800db72:	4b77      	ldr	r3, [pc, #476]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db74:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	60fa      	str	r2, [r7, #12]
 800db7e:	461a      	mov	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	4413      	add	r3, r2
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	bf14      	ite	ne
 800db8a:	2301      	movne	r3, #1
 800db8c:	2300      	moveq	r3, #0
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	4b6f      	ldr	r3, [pc, #444]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800db92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	1c5a      	adds	r2, r3, #1
 800db9a:	60fa      	str	r2, [r7, #12]
 800db9c:	461a      	mov	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4413      	add	r3, r2
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	bf14      	ite	ne
 800dba8:	2301      	movne	r3, #1
 800dbaa:	2300      	moveq	r3, #0
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	4b68      	ldr	r3, [pc, #416]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dbb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fc54 	bl	800e468 <buffer_get_float32_auto>
 800dbc0:	eef0 7a40 	vmov.f32	s15, s0
 800dbc4:	4b62      	ldr	r3, [pc, #392]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dbc6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800dbca:	f107 030c 	add.w	r3, r7, #12
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fc49 	bl	800e468 <buffer_get_float32_auto>
 800dbd6:	eef0 7a40 	vmov.f32	s15, s0
 800dbda:	4b5d      	ldr	r3, [pc, #372]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dbdc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	1c5a      	adds	r2, r3, #1
 800dbe4:	60fa      	str	r2, [r7, #12]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4413      	add	r3, r2
 800dbec:	781a      	ldrb	r2, [r3, #0]
 800dbee:	4b58      	ldr	r3, [pc, #352]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dbf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fc34 	bl	800e468 <buffer_get_float32_auto>
 800dc00:	eef0 7a40 	vmov.f32	s15, s0
 800dc04:	4b52      	ldr	r3, [pc, #328]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc06:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800dc0a:	f107 030c 	add.w	r3, r7, #12
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fc29 	bl	800e468 <buffer_get_float32_auto>
 800dc16:	eef0 7a40 	vmov.f32	s15, s0
 800dc1a:	4b4d      	ldr	r3, [pc, #308]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc1c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	60fa      	str	r2, [r7, #12]
 800dc26:	461a      	mov	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bf14      	ite	ne
 800dc32:	2301      	movne	r3, #1
 800dc34:	2300      	moveq	r3, #0
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	4b45      	ldr	r3, [pc, #276]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	60fa      	str	r2, [r7, #12]
 800dc44:	461a      	mov	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4413      	add	r3, r2
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	bf14      	ite	ne
 800dc50:	2301      	movne	r3, #1
 800dc52:	2300      	moveq	r3, #0
 800dc54:	b2da      	uxtb	r2, r3
 800dc56:	4b3e      	ldr	r3, [pc, #248]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800dc5c:	f107 030c 	add.w	r3, r7, #12
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fc00 	bl	800e468 <buffer_get_float32_auto>
 800dc68:	eef0 7a40 	vmov.f32	s15, s0
 800dc6c:	4b38      	ldr	r3, [pc, #224]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc6e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	1c5a      	adds	r2, r3, #1
 800dc76:	60fa      	str	r2, [r7, #12]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	781a      	ldrb	r2, [r3, #0]
 800dc80:	4b33      	ldr	r3, [pc, #204]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800dc86:	f107 030c 	add.w	r3, r7, #12
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fbeb 	bl	800e468 <buffer_get_float32_auto>
 800dc92:	eef0 7a40 	vmov.f32	s15, s0
 800dc96:	4b2e      	ldr	r3, [pc, #184]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dc98:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 800dc9c:	f107 030c 	add.w	r3, r7, #12
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fbe0 	bl	800e468 <buffer_get_float32_auto>
 800dca8:	eef0 7a40 	vmov.f32	s15, s0
 800dcac:	4b28      	ldr	r3, [pc, #160]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dcae:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 800dcb2:	f107 030c 	add.w	r3, r7, #12
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fbd5 	bl	800e468 <buffer_get_float32_auto>
 800dcbe:	eef0 7a40 	vmov.f32	s15, s0
 800dcc2:	4b23      	ldr	r3, [pc, #140]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dcc4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800dcc8:	f107 030c 	add.w	r3, r7, #12
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fbca 	bl	800e468 <buffer_get_float32_auto>
 800dcd4:	eef0 7a40 	vmov.f32	s15, s0
 800dcd8:	4b1d      	ldr	r3, [pc, #116]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dcda:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 800dcde:	f107 030c 	add.w	r3, r7, #12
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fbbf 	bl	800e468 <buffer_get_float32_auto>
 800dcea:	eef0 7a40 	vmov.f32	s15, s0
 800dcee:	4b18      	ldr	r3, [pc, #96]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dcf0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 800dcf4:	f107 030c 	add.w	r3, r7, #12
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 fbb4 	bl	800e468 <buffer_get_float32_auto>
 800dd00:	eef0 7a40 	vmov.f32	s15, s0
 800dd04:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dd06:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	60fa      	str	r2, [r7, #12]
 800dd10:	461a      	mov	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4413      	add	r3, r2
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bf14      	ite	ne
 800dd1c:	2301      	movne	r3, #1
 800dd1e:	2300      	moveq	r3, #0
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	4b0b      	ldr	r3, [pc, #44]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dd24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	60fa      	str	r2, [r7, #12]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4413      	add	r3, r2
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	bf14      	ite	ne
 800dd3a:	2301      	movne	r3, #1
 800dd3c:	2300      	moveq	r3, #0
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	4b03      	ldr	r3, [pc, #12]	; (800dd50 <bldc_interface_process_packet+0x13a0>)
 800dd42:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	60fa      	str	r2, [r7, #12]
 800dd4c:	e002      	b.n	800dd54 <bldc_interface_process_packet+0x13a4>
 800dd4e:	bf00      	nop
 800dd50:	20000450 	.word	0x20000450
 800dd54:	461a      	mov	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4413      	add	r3, r2
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	bf14      	ite	ne
 800dd60:	2301      	movne	r3, #1
 800dd62:	2300      	moveq	r3, #0
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4bb7      	ldr	r3, [pc, #732]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dd68:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	1c5a      	adds	r2, r3, #1
 800dd70:	60fa      	str	r2, [r7, #12]
 800dd72:	461a      	mov	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4413      	add	r3, r2
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	bf14      	ite	ne
 800dd7e:	2301      	movne	r3, #1
 800dd80:	2300      	moveq	r3, #0
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	4baf      	ldr	r3, [pc, #700]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dd86:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	60fa      	str	r2, [r7, #12]
 800dd90:	461a      	mov	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4413      	add	r3, r2
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bf14      	ite	ne
 800dd9c:	2301      	movne	r3, #1
 800dd9e:	2300      	moveq	r3, #0
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	4ba8      	ldr	r3, [pc, #672]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dda4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	60fa      	str	r2, [r7, #12]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bf14      	ite	ne
 800ddba:	2301      	movne	r3, #1
 800ddbc:	2300      	moveq	r3, #0
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	4ba0      	ldr	r3, [pc, #640]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800ddc2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800ddc6:	f107 030c 	add.w	r3, r7, #12
 800ddca:	4619      	mov	r1, r3
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fb4b 	bl	800e468 <buffer_get_float32_auto>
 800ddd2:	eef0 7a40 	vmov.f32	s15, s0
 800ddd6:	4b9b      	ldr	r3, [pc, #620]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800ddd8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800dddc:	f107 030c 	add.w	r3, r7, #12
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fb40 	bl	800e468 <buffer_get_float32_auto>
 800dde8:	eef0 7a40 	vmov.f32	s15, s0
 800ddec:	4b95      	ldr	r3, [pc, #596]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800ddee:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	60fa      	str	r2, [r7, #12]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	781a      	ldrb	r2, [r3, #0]
 800de00:	4b90      	ldr	r3, [pc, #576]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800de06:	f107 030c 	add.w	r3, r7, #12
 800de0a:	4619      	mov	r1, r3
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb2b 	bl	800e468 <buffer_get_float32_auto>
 800de12:	eef0 7a40 	vmov.f32	s15, s0
 800de16:	4b8b      	ldr	r3, [pc, #556]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de18:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800de1c:	f107 030c 	add.w	r3, r7, #12
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fb20 	bl	800e468 <buffer_get_float32_auto>
 800de28:	eef0 7a40 	vmov.f32	s15, s0
 800de2c:	4b85      	ldr	r3, [pc, #532]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de2e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	60fa      	str	r2, [r7, #12]
 800de38:	461a      	mov	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	bf14      	ite	ne
 800de44:	2301      	movne	r3, #1
 800de46:	2300      	moveq	r3, #0
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	4b7e      	ldr	r3, [pc, #504]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de4c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	60fa      	str	r2, [r7, #12]
 800de56:	461a      	mov	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4413      	add	r3, r2
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	bf14      	ite	ne
 800de62:	2301      	movne	r3, #1
 800de64:	2300      	moveq	r3, #0
 800de66:	b2da      	uxtb	r2, r3
 800de68:	4b76      	ldr	r3, [pc, #472]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de6a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800de6e:	f107 030c 	add.w	r3, r7, #12
 800de72:	4619      	mov	r1, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 faf7 	bl	800e468 <buffer_get_float32_auto>
 800de7a:	eef0 7a40 	vmov.f32	s15, s0
 800de7e:	4b71      	ldr	r3, [pc, #452]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de80:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800de84:	f107 030c 	add.w	r3, r7, #12
 800de88:	4619      	mov	r1, r3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 fa33 	bl	800e2f6 <buffer_get_uint16>
 800de90:	4603      	mov	r3, r0
 800de92:	461a      	mov	r2, r3
 800de94:	4b6b      	ldr	r3, [pc, #428]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800de96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 800de9a:	f107 030c 	add.w	r3, r7, #12
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 fa7b 	bl	800e39c <buffer_get_uint32>
 800dea6:	4603      	mov	r3, r0
 800dea8:	4a66      	ldr	r2, [pc, #408]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800deaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	60fa      	str	r2, [r7, #12]
 800deb4:	461a      	mov	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4413      	add	r3, r2
 800deba:	781a      	ldrb	r2, [r3, #0]
 800debc:	4b61      	ldr	r3, [pc, #388]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800debe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 800dec2:	f107 030c 	add.w	r3, r7, #12
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 facd 	bl	800e468 <buffer_get_float32_auto>
 800dece:	eef0 7a40 	vmov.f32	s15, s0
 800ded2:	4b5c      	ldr	r3, [pc, #368]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800ded4:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 800ded8:	f107 030c 	add.w	r3, r7, #12
 800dedc:	4619      	mov	r1, r3
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fac2 	bl	800e468 <buffer_get_float32_auto>
 800dee4:	eef0 7a40 	vmov.f32	s15, s0
 800dee8:	4b56      	ldr	r3, [pc, #344]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800deea:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 800deee:	f107 030c 	add.w	r3, r7, #12
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fab7 	bl	800e468 <buffer_get_float32_auto>
 800defa:	eef0 7a40 	vmov.f32	s15, s0
 800defe:	4b51      	ldr	r3, [pc, #324]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df00:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 800df04:	f107 030c 	add.w	r3, r7, #12
 800df08:	4619      	mov	r1, r3
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 faac 	bl	800e468 <buffer_get_float32_auto>
 800df10:	eef0 7a40 	vmov.f32	s15, s0
 800df14:	4b4b      	ldr	r3, [pc, #300]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df16:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800df1a:	f107 030c 	add.w	r3, r7, #12
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 faa1 	bl	800e468 <buffer_get_float32_auto>
 800df26:	eef0 7a40 	vmov.f32	s15, s0
 800df2a:	4b46      	ldr	r3, [pc, #280]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df2c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 800df30:	f107 030c 	add.w	r3, r7, #12
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fa96 	bl	800e468 <buffer_get_float32_auto>
 800df3c:	eef0 7a40 	vmov.f32	s15, s0
 800df40:	4b40      	ldr	r3, [pc, #256]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df42:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	60fa      	str	r2, [r7, #12]
 800df4c:	461a      	mov	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4413      	add	r3, r2
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	4b3b      	ldr	r3, [pc, #236]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df56:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	60fa      	str	r2, [r7, #12]
 800df60:	461a      	mov	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4413      	add	r3, r2
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	bf14      	ite	ne
 800df6c:	2301      	movne	r3, #1
 800df6e:	2300      	moveq	r3, #0
 800df70:	b2da      	uxtb	r2, r3
 800df72:	4b34      	ldr	r3, [pc, #208]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	1c5a      	adds	r2, r3, #1
 800df7c:	60fa      	str	r2, [r7, #12]
 800df7e:	461a      	mov	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4413      	add	r3, r2
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	bf14      	ite	ne
 800df8a:	2301      	movne	r3, #1
 800df8c:	2300      	moveq	r3, #0
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	4b2c      	ldr	r3, [pc, #176]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800df92:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fa63 	bl	800e468 <buffer_get_float32_auto>
 800dfa2:	eef0 7a40 	vmov.f32	s15, s0
 800dfa6:	4b27      	ldr	r3, [pc, #156]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dfa8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	60fa      	str	r2, [r7, #12]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	4b22      	ldr	r3, [pc, #136]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dfbc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	60fa      	str	r2, [r7, #12]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4413      	add	r3, r2
 800dfcc:	781a      	ldrb	r2, [r3, #0]
 800dfce:	4b1d      	ldr	r3, [pc, #116]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dfd0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	60fa      	str	r2, [r7, #12]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4413      	add	r3, r2
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	4b18      	ldr	r3, [pc, #96]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dfe4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	60fa      	str	r2, [r7, #12]
 800dfee:	461a      	mov	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4413      	add	r3, r2
 800dff4:	781a      	ldrb	r2, [r3, #0]
 800dff6:	4b13      	ldr	r3, [pc, #76]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800dff8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	60fa      	str	r2, [r7, #12]
 800e002:	461a      	mov	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4413      	add	r3, r2
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800e00c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	60fa      	str	r2, [r7, #12]
 800e016:	461a      	mov	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4413      	add	r3, r2
 800e01c:	781a      	ldrb	r2, [r3, #0]
 800e01e:	4b09      	ldr	r3, [pc, #36]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800e020:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	461a      	mov	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	441a      	add	r2, r3
 800e02c:	4b05      	ldr	r3, [pc, #20]	; (800e044 <bldc_interface_process_packet+0x1694>)
 800e02e:	33c6      	adds	r3, #198	; 0xc6
 800e030:	8811      	ldrh	r1, [r2, #0]
 800e032:	7892      	ldrb	r2, [r2, #2]
 800e034:	8019      	strh	r1, [r3, #0]
 800e036:	709a      	strb	r2, [r3, #2]
		ind += 3;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	3303      	adds	r3, #3
 800e03c:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	e002      	b.n	800e048 <bldc_interface_process_packet+0x1698>
 800e042:	bf00      	nop
 800e044:	20000450 	.word	0x20000450
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	60fa      	str	r2, [r7, #12]
 800e04c:	461a      	mov	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4413      	add	r3, r2
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	bf14      	ite	ne
 800e058:	2301      	movne	r3, #1
 800e05a:	2300      	moveq	r3, #0
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	4b81      	ldr	r3, [pc, #516]	; (800e264 <bldc_interface_process_packet+0x18b4>)
 800e060:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 800e064:	4b80      	ldr	r3, [pc, #512]	; (800e268 <bldc_interface_process_packet+0x18b8>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 80eb 	beq.w	800e244 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 800e06e:	4b7e      	ldr	r3, [pc, #504]	; (800e268 <bldc_interface_process_packet+0x18b8>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	487c      	ldr	r0, [pc, #496]	; (800e264 <bldc_interface_process_packet+0x18b4>)
 800e074:	4798      	blx	r3
		}
		break;
 800e076:	e0e5      	b.n	800e244 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 800e07c:	f107 030c 	add.w	r3, r7, #12
 800e080:	4619      	mov	r1, r3
 800e082:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800e26c <bldc_interface_process_packet+0x18bc>
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f9d3 	bl	800e432 <buffer_get_float32>
 800e08c:	eef0 7a40 	vmov.f32	s15, s0
 800e090:	4b77      	ldr	r3, [pc, #476]	; (800e270 <bldc_interface_process_packet+0x18c0>)
 800e092:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 800e096:	f107 030c 	add.w	r3, r7, #12
 800e09a:	4619      	mov	r1, r3
 800e09c:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800e26c <bldc_interface_process_packet+0x18bc>
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f9c6 	bl	800e432 <buffer_get_float32>
 800e0a6:	eef0 7a40 	vmov.f32	s15, s0
 800e0aa:	4b72      	ldr	r3, [pc, #456]	; (800e274 <bldc_interface_process_packet+0x18c4>)
 800e0ac:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61bb      	str	r3, [r7, #24]
 800e0b4:	e00f      	b.n	800e0d6 <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	60fa      	str	r2, [r7, #12]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	b259      	sxtb	r1, r3
 800e0c6:	4a6c      	ldr	r2, [pc, #432]	; (800e278 <bldc_interface_process_packet+0x18c8>)
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	460a      	mov	r2, r1
 800e0ce:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	61bb      	str	r3, [r7, #24]
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	2b07      	cmp	r3, #7
 800e0da:	ddec      	ble.n	800e0b6 <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	1c5a      	adds	r2, r3, #1
 800e0e0:	60fa      	str	r2, [r7, #12]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	b25a      	sxtb	r2, r3
 800e0ec:	4b63      	ldr	r3, [pc, #396]	; (800e27c <bldc_interface_process_packet+0x18cc>)
 800e0ee:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 800e0f0:	4b63      	ldr	r3, [pc, #396]	; (800e280 <bldc_interface_process_packet+0x18d0>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 80a7 	beq.w	800e248 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 800e0fa:	4b61      	ldr	r3, [pc, #388]	; (800e280 <bldc_interface_process_packet+0x18d0>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a5c      	ldr	r2, [pc, #368]	; (800e270 <bldc_interface_process_packet+0x18c0>)
 800e100:	edd2 7a00 	vldr	s15, [r2]
 800e104:	4a5b      	ldr	r2, [pc, #364]	; (800e274 <bldc_interface_process_packet+0x18c4>)
 800e106:	ed92 7a00 	vldr	s14, [r2]
 800e10a:	4a5c      	ldr	r2, [pc, #368]	; (800e27c <bldc_interface_process_packet+0x18cc>)
 800e10c:	f992 2000 	ldrsb.w	r2, [r2]
 800e110:	4611      	mov	r1, r2
 800e112:	4859      	ldr	r0, [pc, #356]	; (800e278 <bldc_interface_process_packet+0x18c8>)
 800e114:	eef0 0a47 	vmov.f32	s1, s14
 800e118:	eeb0 0a67 	vmov.f32	s0, s15
 800e11c:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 800e11e:	e093      	b.n	800e248 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 800e124:	f107 030c 	add.w	r3, r7, #12
 800e128:	4619      	mov	r1, r3
 800e12a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800e284 <bldc_interface_process_packet+0x18d4>
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f97f 	bl	800e432 <buffer_get_float32>
 800e134:	eef0 7a40 	vmov.f32	s15, s0
 800e138:	4b53      	ldr	r3, [pc, #332]	; (800e288 <bldc_interface_process_packet+0x18d8>)
 800e13a:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 800e13e:	f107 030c 	add.w	r3, r7, #12
 800e142:	4619      	mov	r1, r3
 800e144:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800e284 <bldc_interface_process_packet+0x18d4>
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f972 	bl	800e432 <buffer_get_float32>
 800e14e:	eef0 7a40 	vmov.f32	s15, s0
 800e152:	4b4e      	ldr	r3, [pc, #312]	; (800e28c <bldc_interface_process_packet+0x18dc>)
 800e154:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 800e158:	4b4d      	ldr	r3, [pc, #308]	; (800e290 <bldc_interface_process_packet+0x18e0>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d075      	beq.n	800e24c <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 800e160:	4b4b      	ldr	r3, [pc, #300]	; (800e290 <bldc_interface_process_packet+0x18e0>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a48      	ldr	r2, [pc, #288]	; (800e288 <bldc_interface_process_packet+0x18d8>)
 800e166:	edd2 7a00 	vldr	s15, [r2]
 800e16a:	4a48      	ldr	r2, [pc, #288]	; (800e28c <bldc_interface_process_packet+0x18dc>)
 800e16c:	ed92 7a00 	vldr	s14, [r2]
 800e170:	eef0 0a47 	vmov.f32	s1, s14
 800e174:	eeb0 0a67 	vmov.f32	s0, s15
 800e178:	4798      	blx	r3
		}
		break;
 800e17a:	e067      	b.n	800e24c <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 800e180:	f107 030c 	add.w	r3, r7, #12
 800e184:	4619      	mov	r1, r3
 800e186:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800e284 <bldc_interface_process_packet+0x18d4>
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f951 	bl	800e432 <buffer_get_float32>
 800e190:	eef0 7a40 	vmov.f32	s15, s0
 800e194:	4b3f      	ldr	r3, [pc, #252]	; (800e294 <bldc_interface_process_packet+0x18e4>)
 800e196:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 800e19a:	f107 030c 	add.w	r3, r7, #12
 800e19e:	4619      	mov	r1, r3
 800e1a0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e284 <bldc_interface_process_packet+0x18d4>
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f944 	bl	800e432 <buffer_get_float32>
 800e1aa:	eef0 7a40 	vmov.f32	s15, s0
 800e1ae:	4b3a      	ldr	r3, [pc, #232]	; (800e298 <bldc_interface_process_packet+0x18e8>)
 800e1b0:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 800e1b4:	4b39      	ldr	r3, [pc, #228]	; (800e29c <bldc_interface_process_packet+0x18ec>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d049      	beq.n	800e250 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 800e1bc:	4b37      	ldr	r3, [pc, #220]	; (800e29c <bldc_interface_process_packet+0x18ec>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a34      	ldr	r2, [pc, #208]	; (800e294 <bldc_interface_process_packet+0x18e4>)
 800e1c2:	edd2 7a00 	vldr	s15, [r2]
 800e1c6:	4a34      	ldr	r2, [pc, #208]	; (800e298 <bldc_interface_process_packet+0x18e8>)
 800e1c8:	ed92 7a00 	vldr	s14, [r2]
 800e1cc:	eef0 0a47 	vmov.f32	s1, s14
 800e1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1d4:	4798      	blx	r3
		}
		break;
 800e1d6:	e03b      	b.n	800e250 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 800e1dc:	f107 030c 	add.w	r3, r7, #12
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800e284 <bldc_interface_process_packet+0x18d4>
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f923 	bl	800e432 <buffer_get_float32>
 800e1ec:	eef0 7a40 	vmov.f32	s15, s0
 800e1f0:	4b2b      	ldr	r3, [pc, #172]	; (800e2a0 <bldc_interface_process_packet+0x18f0>)
 800e1f2:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 800e1f6:	4b2b      	ldr	r3, [pc, #172]	; (800e2a4 <bldc_interface_process_packet+0x18f4>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d02a      	beq.n	800e254 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 800e1fe:	4b29      	ldr	r3, [pc, #164]	; (800e2a4 <bldc_interface_process_packet+0x18f4>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a27      	ldr	r2, [pc, #156]	; (800e2a0 <bldc_interface_process_packet+0x18f0>)
 800e204:	edd2 7a00 	vldr	s15, [r2]
 800e208:	eeb0 0a67 	vmov.f32	s0, s15
 800e20c:	4798      	blx	r3
		}
		break;
 800e20e:	e021      	b.n	800e254 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 800e210:	4b25      	ldr	r3, [pc, #148]	; (800e2a8 <bldc_interface_process_packet+0x18f8>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d01f      	beq.n	800e258 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 800e218:	4b23      	ldr	r3, [pc, #140]	; (800e2a8 <bldc_interface_process_packet+0x18f8>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4798      	blx	r3
		}
		break;
 800e21e:	e01b      	b.n	800e258 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 800e220:	4b22      	ldr	r3, [pc, #136]	; (800e2ac <bldc_interface_process_packet+0x18fc>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d019      	beq.n	800e25c <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 800e228:	4b20      	ldr	r3, [pc, #128]	; (800e2ac <bldc_interface_process_packet+0x18fc>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4798      	blx	r3
		}
		break;
 800e22e:	e015      	b.n	800e25c <bldc_interface_process_packet+0x18ac>
		return;
 800e230:	bf00      	nop
 800e232:	e014      	b.n	800e25e <bldc_interface_process_packet+0x18ae>

	default:
		break;
 800e234:	bf00      	nop
 800e236:	e012      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e238:	bf00      	nop
 800e23a:	e010      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e23c:	bf00      	nop
 800e23e:	e00e      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e240:	bf00      	nop
 800e242:	e00c      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e244:	bf00      	nop
 800e246:	e00a      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e248:	bf00      	nop
 800e24a:	e008      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e24c:	bf00      	nop
 800e24e:	e006      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e250:	bf00      	nop
 800e252:	e004      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e254:	bf00      	nop
 800e256:	e002      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e258:	bf00      	nop
 800e25a:	e000      	b.n	800e25e <bldc_interface_process_packet+0x18ae>
		break;
 800e25c:	bf00      	nop
	}
}
 800e25e:	3720      	adds	r7, #32
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	20000450 	.word	0x20000450
 800e268:	2000055c 	.word	0x2000055c
 800e26c:	447a0000 	.word	0x447a0000
 800e270:	2000051c 	.word	0x2000051c
 800e274:	20000520 	.word	0x20000520
 800e278:	20000524 	.word	0x20000524
 800e27c:	2000052c 	.word	0x2000052c
 800e280:	20000560 	.word	0x20000560
 800e284:	49742400 	.word	0x49742400
 800e288:	20000530 	.word	0x20000530
 800e28c:	20000534 	.word	0x20000534
 800e290:	20000564 	.word	0x20000564
 800e294:	20000538 	.word	0x20000538
 800e298:	2000053c 	.word	0x2000053c
 800e29c:	20000568 	.word	0x20000568
 800e2a0:	20000540 	.word	0x20000540
 800e2a4:	2000056c 	.word	0x2000056c
 800e2a8:	20000570 	.word	0x20000570
 800e2ac:	20000574 	.word	0x20000574

0800e2b0 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	021b      	lsls	r3, r3, #8
 800e2c8:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	440b      	add	r3, r1
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	1c9a      	adds	r2, r3, #2
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	601a      	str	r2, [r3, #0]
	return res;
 800e2e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 800e2f6:	b480      	push	{r7}
 800e2f8:	b085      	sub	sp, #20
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	461a      	mov	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4413      	add	r3, r2
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	021b      	lsls	r3, r3, #8
 800e30e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	440b      	add	r3, r1
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 800e31e:	4313      	orrs	r3, r2
 800e320:	b21b      	sxth	r3, r3
 800e322:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	1c9a      	adds	r2, r3, #2
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	601a      	str	r2, [r3, #0]
	return res;
 800e32e:	89fb      	ldrh	r3, [r7, #14]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4413      	add	r3, r2
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	440b      	add	r3, r1
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e362:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3302      	adds	r3, #2
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	440b      	add	r3, r1
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e372:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	3203      	adds	r2, #3
 800e37a:	6879      	ldr	r1, [r7, #4]
 800e37c:	440a      	add	r2, r1
 800e37e:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800e380:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e382:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	1d1a      	adds	r2, r3, #4
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	601a      	str	r2, [r3, #0]
	return res;
 800e38e:	68fb      	ldr	r3, [r7, #12]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	440b      	add	r3, r1
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e3c2:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	3302      	adds	r3, #2
 800e3ca:	6879      	ldr	r1, [r7, #4]
 800e3cc:	440b      	add	r3, r1
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800e3d2:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	6812      	ldr	r2, [r2, #0]
 800e3d8:	3203      	adds	r2, #3
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	440a      	add	r2, r1
 800e3de:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	1d1a      	adds	r2, r3, #4
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	601a      	str	r2, [r3, #0]
	return res;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	ed87 0a02 	vstr	s0, [r7, #8]
 800e408:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7ff ff4f 	bl	800e2b0 <buffer_get_int16>
 800e412:	4603      	mov	r3, r0
 800e414:	ee07 3a90 	vmov	s15, r3
 800e418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e41c:	edd7 7a02 	vldr	s15, [r7, #8]
 800e420:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e424:	eef0 7a66 	vmov.f32	s15, s13
}
 800e428:	eeb0 0a67 	vmov.f32	s0, s15
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	ed87 0a02 	vstr	s0, [r7, #8]
 800e43e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800e440:	6879      	ldr	r1, [r7, #4]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7ff ff7a 	bl	800e33c <buffer_get_int32>
 800e448:	ee07 0a90 	vmov	s15, r0
 800e44c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e450:	edd7 7a02 	vldr	s15, [r7, #8]
 800e454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e458:	eef0 7a66 	vmov.f32	s15, s13
}
 800e45c:	eeb0 0a67 	vmov.f32	s0, s15
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ff91 	bl	800e39c <buffer_get_uint32>
 800e47a:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	0ddb      	lsrs	r3, r3, #23
 800e480:	b2db      	uxtb	r3, r3
 800e482:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e48a:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e492:	2b00      	cmp	r3, #0
 800e494:	bf14      	ite	ne
 800e496:	2301      	movne	r3, #1
 800e498:	2300      	moveq	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 800e49c:	f04f 0300 	mov.w	r3, #0
 800e4a0:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d102      	bne.n	800e4ae <buffer_get_float32_auto+0x46>
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d021      	beq.n	800e4f2 <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	ee07 3a90 	vmov	s15, r3
 800e4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4b8:	ee17 0a90 	vmov	r0, s15
 800e4bc:	f7f2 f844 	bl	8000548 <__aeabi_f2d>
 800e4c0:	f04f 0200 	mov.w	r2, #0
 800e4c4:	4b15      	ldr	r3, [pc, #84]	; (800e51c <buffer_get_float32_auto+0xb4>)
 800e4c6:	f7f2 f9c1 	bl	800084c <__aeabi_ddiv>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	4b12      	ldr	r3, [pc, #72]	; (800e520 <buffer_get_float32_auto+0xb8>)
 800e4d8:	f7f1 fed8 	bl	800028c <__adddf3>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	f7f2 fb80 	bl	8000be8 <__aeabi_d2f>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	61bb      	str	r3, [r7, #24]
		e -= 126;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	3b7e      	subs	r3, #126	; 0x7e
 800e4f0:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d005      	beq.n	800e504 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800e4f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800e4fc:	eef1 7a67 	vneg.f32	s15, s15
 800e500:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 800e504:	69f8      	ldr	r0, [r7, #28]
 800e506:	ed97 0a06 	vldr	s0, [r7, #24]
 800e50a:	f00b fd03 	bl	8019f14 <ldexpf>
 800e50e:	eef0 7a40 	vmov.f32	s15, s0
}
 800e512:	eeb0 0a67 	vmov.f32	s0, s15
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	41700000 	.word	0x41700000
 800e520:	3fe00000 	.word	0x3fe00000

0800e524 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800e524:	b480      	push	{r7}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e532:	2300      	movs	r3, #0
 800e534:	60fb      	str	r3, [r7, #12]
 800e536:	e016      	b.n	800e566 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800e538:	897b      	ldrh	r3, [r7, #10]
 800e53a:	0a1b      	lsrs	r3, r3, #8
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	4619      	mov	r1, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	1c5a      	adds	r2, r3, #1
 800e544:	607a      	str	r2, [r7, #4]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	404b      	eors	r3, r1
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	4a0b      	ldr	r2, [pc, #44]	; (800e57c <crc16+0x58>)
 800e54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e552:	b21a      	sxth	r2, r3
 800e554:	897b      	ldrh	r3, [r7, #10]
 800e556:	021b      	lsls	r3, r3, #8
 800e558:	b21b      	sxth	r3, r3
 800e55a:	4053      	eors	r3, r2
 800e55c:	b21b      	sxth	r3, r3
 800e55e:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	3301      	adds	r3, #1
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d3e4      	bcc.n	800e538 <crc16+0x14>
	}
	return cksum;
 800e56e:	897b      	ldrh	r3, [r7, #10]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	0801f4cc 	.word	0x0801f4cc

0800e580 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	617b      	str	r3, [r7, #20]
	int32_t indexbuf = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	603b      	str	r3, [r7, #0]
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;
//
//		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800e58e:	4b77      	ldr	r3, [pc, #476]	; (800e76c <decode_VESC+0x1ec>)
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	74fb      	strb	r3, [r7, #19]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800e594:	4b75      	ldr	r3, [pc, #468]	; (800e76c <decode_VESC+0x1ec>)
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	0a1b      	lsrs	r3, r3, #8
 800e59a:	74bb      	strb	r3, [r7, #18]

			if (id == 255 || id == RNS_TO_VESC) {
 800e59c:	7cfb      	ldrb	r3, [r7, #19]
 800e59e:	2bff      	cmp	r3, #255	; 0xff
 800e5a0:	d003      	beq.n	800e5aa <decode_VESC+0x2a>
 800e5a2:	7cfb      	ldrb	r3, [r7, #19]
 800e5a4:	2b1e      	cmp	r3, #30
 800e5a6:	f040 80a5 	bne.w	800e6f4 <decode_VESC+0x174>
				switch (cmd) {
 800e5aa:	7cbb      	ldrb	r3, [r7, #18]
 800e5ac:	3b05      	subs	r3, #5
 800e5ae:	2b03      	cmp	r3, #3
 800e5b0:	f200 8096 	bhi.w	800e6e0 <decode_VESC+0x160>
 800e5b4:	a201      	add	r2, pc, #4	; (adr r2, 800e5bc <decode_VESC+0x3c>)
 800e5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ba:	bf00      	nop
 800e5bc:	0800e5cd 	.word	0x0800e5cd
 800e5c0:	0800e5e7 	.word	0x0800e5e7
 800e5c4:	0800e619 	.word	0x0800e619
 800e5c8:	0800e6ad 	.word	0x0800e6ad
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + vescmsg.Data[0], vescmsg.Data + 1, vescmsg.Rxmsg.DLC - 1);
 800e5cc:	4b67      	ldr	r3, [pc, #412]	; (800e76c <decode_VESC+0x1ec>)
 800e5ce:	7f1b      	ldrb	r3, [r3, #28]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4b67      	ldr	r3, [pc, #412]	; (800e770 <decode_VESC+0x1f0>)
 800e5d4:	18d0      	adds	r0, r2, r3
 800e5d6:	4967      	ldr	r1, [pc, #412]	; (800e774 <decode_VESC+0x1f4>)
 800e5d8:	4b64      	ldr	r3, [pc, #400]	; (800e76c <decode_VESC+0x1ec>)
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	461a      	mov	r2, r3
 800e5e0:	f00a fd46 	bl	8019070 <memcpy>
					break;
 800e5e4:	e085      	b.n	800e6f2 <decode_VESC+0x172>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)vescmsg.Data[0] << 8;
 800e5e6:	4b61      	ldr	r3, [pc, #388]	; (800e76c <decode_VESC+0x1ec>)
 800e5e8:	7f1b      	ldrb	r3, [r3, #28]
 800e5ea:	021b      	lsls	r3, r3, #8
 800e5ec:	607b      	str	r3, [r7, #4]
					rxbuf_ind |= vescmsg.Data[1];
 800e5ee:	4b5f      	ldr	r3, [pc, #380]	; (800e76c <decode_VESC+0x1ec>)
 800e5f0:	7f5b      	ldrb	r3, [r3, #29]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	607b      	str	r3, [r7, #4]
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e600:	d270      	bcs.n	800e6e4 <decode_VESC+0x164>
						memcpy(rx_buffer + rxbuf_ind, vescmsg.Data + 2, vescmsg.Rxmsg.DLC - 2);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4a5a      	ldr	r2, [pc, #360]	; (800e770 <decode_VESC+0x1f0>)
 800e606:	1898      	adds	r0, r3, r2
 800e608:	495b      	ldr	r1, [pc, #364]	; (800e778 <decode_VESC+0x1f8>)
 800e60a:	4b58      	ldr	r3, [pc, #352]	; (800e76c <decode_VESC+0x1ec>)
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	3b02      	subs	r3, #2
 800e610:	461a      	mov	r2, r3
 800e612:	f00a fd2d 	bl	8019070 <memcpy>
					}
					break;
 800e616:	e065      	b.n	800e6e4 <decode_VESC+0x164>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	1c5a      	adds	r2, r3, #1
 800e620:	617a      	str	r2, [r7, #20]
 800e622:	4a52      	ldr	r2, [pc, #328]	; (800e76c <decode_VESC+0x1ec>)
 800e624:	4413      	add	r3, r2
 800e626:	7f1b      	ldrb	r3, [r3, #28]
 800e628:	461a      	mov	r2, r3
 800e62a:	4b54      	ldr	r3, [pc, #336]	; (800e77c <decode_VESC+0x1fc>)
 800e62c:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	617a      	str	r2, [r7, #20]
 800e634:	4a4d      	ldr	r2, [pc, #308]	; (800e76c <decode_VESC+0x1ec>)
 800e636:	4413      	add	r3, r2
 800e638:	7f1b      	ldrb	r3, [r3, #28]
 800e63a:	747b      	strb	r3, [r7, #17]
					rxbuf_len = (unsigned int)vescmsg.Data[ind++] << 8;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	617a      	str	r2, [r7, #20]
 800e642:	4a4a      	ldr	r2, [pc, #296]	; (800e76c <decode_VESC+0x1ec>)
 800e644:	4413      	add	r3, r2
 800e646:	7f1b      	ldrb	r3, [r3, #28]
 800e648:	021b      	lsls	r3, r3, #8
 800e64a:	60fb      	str	r3, [r7, #12]
					rxbuf_len |= (unsigned int)vescmsg.Data[ind++];
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	617a      	str	r2, [r7, #20]
 800e652:	4a46      	ldr	r2, [pc, #280]	; (800e76c <decode_VESC+0x1ec>)
 800e654:	4413      	add	r3, r2
 800e656:	7f1b      	ldrb	r3, [r3, #28]
 800e658:	461a      	mov	r2, r3
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	60fb      	str	r3, [r7, #12]

					if (rxbuf_len > RX_BUFFER_SIZE) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e666:	d83f      	bhi.n	800e6e8 <decode_VESC+0x168>
						break;
					}

					crc_high = vescmsg.Data[ind++];
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	617a      	str	r2, [r7, #20]
 800e66e:	4a3f      	ldr	r2, [pc, #252]	; (800e76c <decode_VESC+0x1ec>)
 800e670:	4413      	add	r3, r2
 800e672:	7f1b      	ldrb	r3, [r3, #28]
 800e674:	72fb      	strb	r3, [r7, #11]
					crc_low = vescmsg.Data[ind++];
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	617a      	str	r2, [r7, #20]
 800e67c:	4a3b      	ldr	r2, [pc, #236]	; (800e76c <decode_VESC+0x1ec>)
 800e67e:	4413      	add	r3, r2
 800e680:	7f1b      	ldrb	r3, [r3, #28]
 800e682:	72bb      	strb	r3, [r7, #10]

					if (crc16(rx_buffer, rxbuf_len)
 800e684:	68f9      	ldr	r1, [r7, #12]
 800e686:	483a      	ldr	r0, [pc, #232]	; (800e770 <decode_VESC+0x1f0>)
 800e688:	f7ff ff4c 	bl	800e524 <crc16>
 800e68c:	4603      	mov	r3, r0
 800e68e:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 800e694:	7abb      	ldrb	r3, [r7, #10]
 800e696:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 800e698:	4299      	cmp	r1, r3
 800e69a:	d127      	bne.n	800e6ec <decode_VESC+0x16c>
						if(commands_send==1)
 800e69c:	7c7b      	ldrb	r3, [r7, #17]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d124      	bne.n	800e6ec <decode_VESC+0x16c>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e6a2:	68f9      	ldr	r1, [r7, #12]
 800e6a4:	4832      	ldr	r0, [pc, #200]	; (800e770 <decode_VESC+0x1f0>)
 800e6a6:	f7fe f983 	bl	800c9b0 <bldc_interface_process_packet>
					}
					break;
 800e6aa:	e01f      	b.n	800e6ec <decode_VESC+0x16c>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	617b      	str	r3, [r7, #20]
					rx_buffer_last_id = vescmsg.Data[ind++];
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	617a      	str	r2, [r7, #20]
 800e6b6:	4a2d      	ldr	r2, [pc, #180]	; (800e76c <decode_VESC+0x1ec>)
 800e6b8:	4413      	add	r3, r2
 800e6ba:	7f1b      	ldrb	r3, [r3, #28]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	4b2f      	ldr	r3, [pc, #188]	; (800e77c <decode_VESC+0x1fc>)
 800e6c0:	601a      	str	r2, [r3, #0]
					commands_send = vescmsg.Data[ind++];
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	617a      	str	r2, [r7, #20]
 800e6c8:	4a28      	ldr	r2, [pc, #160]	; (800e76c <decode_VESC+0x1ec>)
 800e6ca:	4413      	add	r3, r2
 800e6cc:	7f1b      	ldrb	r3, [r3, #28]
 800e6ce:	747b      	strb	r3, [r7, #17]

					if(commands_send==1)
 800e6d0:	7c7b      	ldrb	r3, [r7, #17]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d10c      	bne.n	800e6f0 <decode_VESC+0x170>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800e6d6:	68f9      	ldr	r1, [r7, #12]
 800e6d8:	4825      	ldr	r0, [pc, #148]	; (800e770 <decode_VESC+0x1f0>)
 800e6da:	f7fe f969 	bl	800c9b0 <bldc_interface_process_packet>
					break;
 800e6de:	e007      	b.n	800e6f0 <decode_VESC+0x170>
				default:
					break;
 800e6e0:	bf00      	nop
 800e6e2:	e03f      	b.n	800e764 <decode_VESC+0x1e4>
					break;
 800e6e4:	bf00      	nop
 800e6e6:	e03d      	b.n	800e764 <decode_VESC+0x1e4>
						break;
 800e6e8:	bf00      	nop
 800e6ea:	e03b      	b.n	800e764 <decode_VESC+0x1e4>
					break;
 800e6ec:	bf00      	nop
 800e6ee:	e039      	b.n	800e764 <decode_VESC+0x1e4>
					break;
 800e6f0:	bf00      	nop
				switch (cmd) {
 800e6f2:	e037      	b.n	800e764 <decode_VESC+0x1e4>
				}
			}
			else if(id == 111)
 800e6f4:	7cfb      	ldrb	r3, [r7, #19]
 800e6f6:	2b6f      	cmp	r3, #111	; 0x6f
 800e6f8:	d133      	bne.n	800e762 <decode_VESC+0x1e2>
			{
				switch(cmd)
 800e6fa:	7cbb      	ldrb	r3, [r7, #18]
 800e6fc:	2b10      	cmp	r3, #16
 800e6fe:	d131      	bne.n	800e764 <decode_VESC+0x1e4>
				{
				case CAN_PACKET_STATUS_4:
						info.temp_fet = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e700:	463b      	mov	r3, r7
 800e702:	4619      	mov	r1, r3
 800e704:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e708:	481d      	ldr	r0, [pc, #116]	; (800e780 <decode_VESC+0x200>)
 800e70a:	f7ff fe77 	bl	800e3fc <buffer_get_float16>
 800e70e:	eef0 7a40 	vmov.f32	s15, s0
 800e712:	4b1c      	ldr	r3, [pc, #112]	; (800e784 <decode_VESC+0x204>)
 800e714:	edc3 7a00 	vstr	s15, [r3]
						info.temp_motor = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e718:	463b      	mov	r3, r7
 800e71a:	4619      	mov	r1, r3
 800e71c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e720:	4817      	ldr	r0, [pc, #92]	; (800e780 <decode_VESC+0x200>)
 800e722:	f7ff fe6b 	bl	800e3fc <buffer_get_float16>
 800e726:	eef0 7a40 	vmov.f32	s15, s0
 800e72a:	4b16      	ldr	r3, [pc, #88]	; (800e784 <decode_VESC+0x204>)
 800e72c:	edc3 7a01 	vstr	s15, [r3, #4]
						info.current_in = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &indexbuf);
 800e730:	463b      	mov	r3, r7
 800e732:	4619      	mov	r1, r3
 800e734:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e738:	4811      	ldr	r0, [pc, #68]	; (800e780 <decode_VESC+0x200>)
 800e73a:	f7ff fe5f 	bl	800e3fc <buffer_get_float16>
 800e73e:	eef0 7a40 	vmov.f32	s15, s0
 800e742:	4b10      	ldr	r3, [pc, #64]	; (800e784 <decode_VESC+0x204>)
 800e744:	edc3 7a02 	vstr	s15, [r3, #8]
						info.pos = buffer_get_float16((uint8_t*)&vescmsg.Data, 50, &indexbuf);
 800e748:	463b      	mov	r3, r7
 800e74a:	4619      	mov	r1, r3
 800e74c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e788 <decode_VESC+0x208>
 800e750:	480b      	ldr	r0, [pc, #44]	; (800e780 <decode_VESC+0x200>)
 800e752:	f7ff fe53 	bl	800e3fc <buffer_get_float16>
 800e756:	eef0 7a40 	vmov.f32	s15, s0
 800e75a:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <decode_VESC+0x204>)
 800e75c:	edc3 7a03 	vstr	s15, [r3, #12]
						break;
 800e760:	e000      	b.n	800e764 <decode_VESC+0x1e4>
				}
			}
 800e762:	bf00      	nop
//		}
//	}
}
 800e764:	bf00      	nop
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	20009a74 	.word	0x20009a74
 800e770:	20000578 	.word	0x20000578
 800e774:	20009a91 	.word	0x20009a91
 800e778:	20009a92 	.word	0x20009a92
 800e77c:	20000778 	.word	0x20000778
 800e780:	20009a90 	.word	0x20009a90
 800e784:	20006978 	.word	0x20006978
 800e788:	42480000 	.word	0x42480000

0800e78c <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800e78c:	b4b0      	push	{r4, r5, r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800e794:	4b16      	ldr	r3, [pc, #88]	; (800e7f0 <set_rx_frames+0x64>)
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	1c53      	adds	r3, r2, #1
 800e79a:	4915      	ldr	r1, [pc, #84]	; (800e7f0 <set_rx_frames+0x64>)
 800e79c:	600b      	str	r3, [r1, #0]
 800e79e:	4915      	ldr	r1, [pc, #84]	; (800e7f4 <set_rx_frames+0x68>)
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	18ca      	adds	r2, r1, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4614      	mov	r4, r2
 800e7ae:	461d      	mov	r5, r3
 800e7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800e7bc:	4b0c      	ldr	r3, [pc, #48]	; (800e7f0 <set_rx_frames+0x64>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b64      	cmp	r3, #100	; 0x64
 800e7c2:	d102      	bne.n	800e7ca <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800e7c4:	4b0a      	ldr	r3, [pc, #40]	; (800e7f0 <set_rx_frames+0x64>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	0a1b      	lsrs	r3, r3, #8
 800e7d0:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b07      	cmp	r3, #7
 800e7d6:	d002      	beq.n	800e7de <set_rx_frames+0x52>
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b08      	cmp	r3, #8
 800e7dc:	d101      	bne.n	800e7e2 <set_rx_frames+0x56>
		return 112;
 800e7de:	2370      	movs	r3, #112	; 0x70
 800e7e0:	e000      	b.n	800e7e4 <set_rx_frames+0x58>
	else
		return 0;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bcb0      	pop	{r4, r5, r7}
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	2000158c 	.word	0x2000158c
 800e7f4:	2000077c 	.word	0x2000077c

0800e7f8 <LidarInit>:
float Lidar_Offsets[6] = {0, 0, 0, 0, 0.26, 1.11};
float Lidar_Shoot_Angles[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {0.39, 1.11, -1.53, 1.11, -0.9, 1.11, 0.35, 1.11};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	460b      	mov	r3, r1
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7afa      	ldrb	r2, [r7, #11]
 800e812:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
 800e81c:	f36f 0382 	bfc	r3, #2, #1
 800e820:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240

	if(lidar->mode == CONTINUOUS)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d110      	bne.n	800e850 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	33c9      	adds	r3, #201	; 0xc9
 800e838:	2205      	movs	r2, #5
 800e83a:	4619      	mov	r1, r3
 800e83c:	f006 fede 	bl	80155fc <HAL_UART_Receive_IT>
		lidar->new = 0;
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
 800e846:	f36f 0300 	bfc	r3, #0, #1
 800e84a:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240
		lidar->pos_counter = 6;
		lidar->angle = ANGLE_PENDING;
		lidar->angle_counter = 0;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800e84e:	e095      	b.n	800e97c <LidarInit+0x184>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800e850:	4b4c      	ldr	r3, [pc, #304]	; (800e984 <LidarInit+0x18c>)
 800e852:	edd3 7a00 	vldr	s15, [r3]
 800e856:	4b4b      	ldr	r3, [pc, #300]	; (800e984 <LidarInit+0x18c>)
 800e858:	ed93 7a01 	vldr	s14, [r3, #4]
 800e85c:	4b49      	ldr	r3, [pc, #292]	; (800e984 <LidarInit+0x18c>)
 800e85e:	edd3 6a02 	vldr	s13, [r3, #8]
 800e862:	4b48      	ldr	r3, [pc, #288]	; (800e984 <LidarInit+0x18c>)
 800e864:	ed93 6a03 	vldr	s12, [r3, #12]
 800e868:	4b46      	ldr	r3, [pc, #280]	; (800e984 <LidarInit+0x18c>)
 800e86a:	edd3 5a04 	vldr	s11, [r3, #16]
 800e86e:	4b45      	ldr	r3, [pc, #276]	; (800e984 <LidarInit+0x18c>)
 800e870:	ed93 5a05 	vldr	s10, [r3, #20]
 800e874:	4b43      	ldr	r3, [pc, #268]	; (800e984 <LidarInit+0x18c>)
 800e876:	ed93 3a06 	vldr	s6, [r3, #24]
 800e87a:	4b42      	ldr	r3, [pc, #264]	; (800e984 <LidarInit+0x18c>)
 800e87c:	edd3 3a07 	vldr	s7, [r3, #28]
 800e880:	4b40      	ldr	r3, [pc, #256]	; (800e984 <LidarInit+0x18c>)
 800e882:	ed93 4a08 	vldr	s8, [r3, #32]
 800e886:	4b3f      	ldr	r3, [pc, #252]	; (800e984 <LidarInit+0x18c>)
 800e888:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	eef0 2a45 	vmov.f32	s5, s10
 800e892:	eeb0 2a65 	vmov.f32	s4, s11
 800e896:	eef0 1a46 	vmov.f32	s3, s12
 800e89a:	eeb0 1a66 	vmov.f32	s2, s13
 800e89e:	eef0 0a47 	vmov.f32	s1, s14
 800e8a2:	eeb0 0a67 	vmov.f32	s0, s15
 800e8a6:	f000 f8db 	bl	800ea60 <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800e8aa:	4b37      	ldr	r3, [pc, #220]	; (800e988 <LidarInit+0x190>)
 800e8ac:	edd3 7a00 	vldr	s15, [r3]
 800e8b0:	4b35      	ldr	r3, [pc, #212]	; (800e988 <LidarInit+0x190>)
 800e8b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800e8b6:	4b34      	ldr	r3, [pc, #208]	; (800e988 <LidarInit+0x190>)
 800e8b8:	edd3 6a02 	vldr	s13, [r3, #8]
 800e8bc:	4b32      	ldr	r3, [pc, #200]	; (800e988 <LidarInit+0x190>)
 800e8be:	ed93 6a03 	vldr	s12, [r3, #12]
 800e8c2:	4b31      	ldr	r3, [pc, #196]	; (800e988 <LidarInit+0x190>)
 800e8c4:	edd3 5a04 	vldr	s11, [r3, #16]
 800e8c8:	4b2f      	ldr	r3, [pc, #188]	; (800e988 <LidarInit+0x190>)
 800e8ca:	ed93 5a05 	vldr	s10, [r3, #20]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	eef0 2a45 	vmov.f32	s5, s10
 800e8d4:	eeb0 2a65 	vmov.f32	s4, s11
 800e8d8:	eef0 1a46 	vmov.f32	s3, s12
 800e8dc:	eeb0 1a66 	vmov.f32	s2, s13
 800e8e0:	eef0 0a47 	vmov.f32	s1, s14
 800e8e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e8e8:	f000 f852 	bl	800e990 <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800e8ec:	4b27      	ldr	r3, [pc, #156]	; (800e98c <LidarInit+0x194>)
 800e8ee:	edd3 7a00 	vldr	s15, [r3]
 800e8f2:	4b26      	ldr	r3, [pc, #152]	; (800e98c <LidarInit+0x194>)
 800e8f4:	ed93 7a01 	vldr	s14, [r3, #4]
 800e8f8:	4b24      	ldr	r3, [pc, #144]	; (800e98c <LidarInit+0x194>)
 800e8fa:	edd3 6a02 	vldr	s13, [r3, #8]
 800e8fe:	4b23      	ldr	r3, [pc, #140]	; (800e98c <LidarInit+0x194>)
 800e900:	ed93 6a03 	vldr	s12, [r3, #12]
 800e904:	4b21      	ldr	r3, [pc, #132]	; (800e98c <LidarInit+0x194>)
 800e906:	edd3 5a04 	vldr	s11, [r3, #16]
 800e90a:	4b20      	ldr	r3, [pc, #128]	; (800e98c <LidarInit+0x194>)
 800e90c:	ed93 5a05 	vldr	s10, [r3, #20]
 800e910:	4b1e      	ldr	r3, [pc, #120]	; (800e98c <LidarInit+0x194>)
 800e912:	edd3 4a06 	vldr	s9, [r3, #24]
 800e916:	4b1d      	ldr	r3, [pc, #116]	; (800e98c <LidarInit+0x194>)
 800e918:	ed93 4a07 	vldr	s8, [r3, #28]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	eef0 3a44 	vmov.f32	s7, s8
 800e922:	eeb0 3a64 	vmov.f32	s6, s9
 800e926:	eef0 2a45 	vmov.f32	s5, s10
 800e92a:	eeb0 2a65 	vmov.f32	s4, s11
 800e92e:	eef0 1a46 	vmov.f32	s3, s12
 800e932:	eeb0 1a66 	vmov.f32	s2, s13
 800e936:	eef0 0a47 	vmov.f32	s1, s14
 800e93a:	eeb0 0a67 	vmov.f32	s0, s15
 800e93e:	f000 f855 	bl	800e9ec <LidarCenterOffsetInit>
		lidar->response = NO;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2201      	movs	r2, #1
 800e946:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->pos = CENTER;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2206      	movs	r2, #6
 800e94e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 6;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2206      	movs	r2, #6
 800e956:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		lidar->angle = ANGLE_PENDING;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 0;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	33c9      	adds	r3, #201	; 0xc9
 800e974:	2202      	movs	r2, #2
 800e976:	4619      	mov	r1, r3
 800e978:	f006 fe40 	bl	80155fc <HAL_UART_Receive_IT>
}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	20001590 	.word	0x20001590
 800e988:	20000004 	.word	0x20000004
 800e98c:	2000001c 	.word	0x2000001c

0800e990 <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800e990:	b480      	push	{r7}
 800e992:	b089      	sub	sp, #36	; 0x24
 800e994:	af00      	add	r7, sp, #0
 800e996:	ed87 0a07 	vstr	s0, [r7, #28]
 800e99a:	edc7 0a06 	vstr	s1, [r7, #24]
 800e99e:	ed87 1a05 	vstr	s2, [r7, #20]
 800e9a2:	edc7 1a04 	vstr	s3, [r7, #16]
 800e9a6:	ed87 2a03 	vstr	s4, [r7, #12]
 800e9aa:	edc7 2a02 	vstr	s5, [r7, #8]
 800e9ae:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	69fa      	ldr	r2, [r7, #28]
 800e9b4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	69ba      	ldr	r2, [r7, #24]
 800e9bc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	693a      	ldr	r2, [r7, #16]
 800e9cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800e9e0:	bf00      	nop
 800e9e2:	3724      	adds	r7, #36	; 0x24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b08b      	sub	sp, #44	; 0x2c
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800e9f6:	edc7 0a08 	vstr	s1, [r7, #32]
 800e9fa:	ed87 1a07 	vstr	s2, [r7, #28]
 800e9fe:	edc7 1a06 	vstr	s3, [r7, #24]
 800ea02:	ed87 2a05 	vstr	s4, [r7, #20]
 800ea06:	edc7 2a04 	vstr	s5, [r7, #16]
 800ea0a:	ed87 3a03 	vstr	s6, [r7, #12]
 800ea0e:	edc7 3a02 	vstr	s7, [r7, #8]
 800ea12:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a3a      	ldr	r2, [r7, #32]
 800ea20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	69fa      	ldr	r2, [r7, #28]
 800ea28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800ea54:	bf00      	nop
 800ea56:	372c      	adds	r7, #44	; 0x2c
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b08d      	sub	sp, #52	; 0x34
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800ea6a:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800ea6e:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800ea72:	edc7 1a08 	vstr	s3, [r7, #32]
 800ea76:	ed87 2a07 	vstr	s4, [r7, #28]
 800ea7a:	edc7 2a06 	vstr	s5, [r7, #24]
 800ea7e:	ed87 3a05 	vstr	s6, [r7, #20]
 800ea82:	edc7 3a04 	vstr	s7, [r7, #16]
 800ea86:	ed87 4a03 	vstr	s8, [r7, #12]
 800ea8a:	edc7 4a02 	vstr	s9, [r7, #8]
 800ea8e:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea94:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea9c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a3a      	ldr	r2, [r7, #32]
 800eaac:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	69fa      	ldr	r2, [r7, #28]
 800eab4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	69ba      	ldr	r2, [r7, #24]
 800eabc:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800eae0:	bf00      	nop
 800eae2:	3734      	adds	r7, #52	; 0x34
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800eaec:	b5b0      	push	{r4, r5, r7, lr}
 800eaee:	b0ba      	sub	sp, #232	; 0xe8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	71fb      	strb	r3, [r7, #7]
	float center_1_to_center_2[1][7] = {{6.0, 1.8, 0, 0, 0, 1, 0}};
 800eaf8:	4bbd      	ldr	r3, [pc, #756]	; (800edf0 <LidarSetPos+0x304>)
 800eafa:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 800eafe:	461d      	mov	r5, r3
 800eb00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_1[1][7] = {{6.0, -1.8, 0, 0, 0, 1, 0}};
 800eb0c:	4bb9      	ldr	r3, [pc, #740]	; (800edf4 <LidarSetPos+0x308>)
 800eb0e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800eb12:	461d      	mov	r5, r3
 800eb14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center[1][7] = {{6.0, 1.6, 0, 0, 0, 1, 0}};
 800eb20:	4bb5      	ldr	r3, [pc, #724]	; (800edf8 <LidarSetPos+0x30c>)
 800eb22:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800eb26:	461d      	mov	r5, r3
 800eb28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_2[1][7] = {{6.0, -1.6, 0, 0, 0, 1, 0}};
 800eb34:	4bb1      	ldr	r3, [pc, #708]	; (800edfc <LidarSetPos+0x310>)
 800eb36:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800eb3a:	461d      	mov	r5, r3
 800eb3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_3[1][7] = {{6.0, 1.1, 0, 0, 0, 1, 0}};
 800eb48:	4bad      	ldr	r3, [pc, #692]	; (800ee00 <LidarSetPos+0x314>)
 800eb4a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800eb4e:	461d      	mov	r5, r3
 800eb50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center[1][7] = {{6.0, -1.1, 0, 0, 0, 1, 0}};
 800eb5c:	4ba9      	ldr	r3, [pc, #676]	; (800ee04 <LidarSetPos+0x318>)
 800eb5e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800eb62:	461d      	mov	r5, r3
 800eb64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_4[1][7] = {{6.0, 2, 0, 0, 0, 1, 0}};
 800eb70:	4ba5      	ldr	r3, [pc, #660]	; (800ee08 <LidarSetPos+0x31c>)
 800eb72:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800eb76:	461d      	mov	r5, r3
 800eb78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center_3[1][7] = {{6.0, -2, 0, 0, 0, 1, 0}};
 800eb84:	4ba1      	ldr	r3, [pc, #644]	; (800ee0c <LidarSetPos+0x320>)
 800eb86:	f107 0408 	add.w	r4, r7, #8
 800eb8a:	461d      	mov	r5, r3
 800eb8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb94:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if(pose != lidar->pos)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800eb9e:	79fa      	ldrb	r2, [r7, #7]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	f000 82c3 	beq.w	800f12c <LidarSetPos+0x640>
	{
		switch(pose) // Target Pose
 800eba6:	79fb      	ldrb	r3, [r7, #7]
 800eba8:	3b03      	subs	r3, #3
 800ebaa:	2b06      	cmp	r3, #6
 800ebac:	f200 82c0 	bhi.w	800f130 <LidarSetPos+0x644>
 800ebb0:	a201      	add	r2, pc, #4	; (adr r2, 800ebb8 <LidarSetPos+0xcc>)
 800ebb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb6:	bf00      	nop
 800ebb8:	0800ebd5 	.word	0x0800ebd5
 800ebbc:	0800ec39 	.word	0x0800ec39
 800ebc0:	0800eced 	.word	0x0800eced
 800ebc4:	0800ee19 	.word	0x0800ee19
 800ebc8:	0800ef1d 	.word	0x0800ef1d
 800ebcc:	0800f021 	.word	0x0800f021
 800ebd0:	0800f0d5 	.word	0x0800f0d5
		{
			case UPPER_LEFT:
				switch(lidar->pos) // Self Pose
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	2b08      	cmp	r3, #8
 800ebde:	d829      	bhi.n	800ec34 <LidarSetPos+0x148>
 800ebe0:	a201      	add	r2, pc, #4	; (adr r2, 800ebe8 <LidarSetPos+0xfc>)
 800ebe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe6:	bf00      	nop
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec17 	.word	0x0800ec17
 800ebf0:	0800ec35 	.word	0x0800ec35
 800ebf4:	0800ec35 	.word	0x0800ec35
 800ebf8:	0800ec35 	.word	0x0800ec35
 800ebfc:	0800ec21 	.word	0x0800ec21
 800ec00:	0800ec35 	.word	0x0800ec35
 800ec04:	0800ec35 	.word	0x0800ec35
 800ec08:	0800ec2b 	.word	0x0800ec2b
				{
					case PICK_LEFT:
						lidar->pos = UPPER_LEFT;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	2203      	movs	r2, #3
 800ec10:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec14:	e00f      	b.n	800ec36 <LidarSetPos+0x14a>

					case PICK_RIGHT:
						lidar->pos = UPPER_LEFT;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2203      	movs	r2, #3
 800ec1a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec1e:	e00a      	b.n	800ec36 <LidarSetPos+0x14a>

					case CENTER:
						lidar->pos = UPPER_LEFT;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2203      	movs	r2, #3
 800ec24:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec28:	e005      	b.n	800ec36 <LidarSetPos+0x14a>

					case UPPER_RIGHT:
						lidar->pos = UPPER_LEFT;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	2203      	movs	r2, #3
 800ec2e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec32:	e000      	b.n	800ec36 <LidarSetPos+0x14a>

					default:
						break;
 800ec34:	bf00      	nop

				}
				break;
 800ec36:	e27c      	b.n	800f132 <LidarSetPos+0x646>

			case CENTER_1:
				switch(lidar->pos) // Self Pose
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d851      	bhi.n	800ece8 <LidarSetPos+0x1fc>
 800ec44:	a201      	add	r2, pc, #4	; (adr r2, 800ec4c <LidarSetPos+0x160>)
 800ec46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4a:	bf00      	nop
 800ec4c:	0800ec71 	.word	0x0800ec71
 800ec50:	0800ec7b 	.word	0x0800ec7b
 800ec54:	0800ec85 	.word	0x0800ec85
 800ec58:	0800ece9 	.word	0x0800ece9
 800ec5c:	0800ec99 	.word	0x0800ec99
 800ec60:	0800ece9 	.word	0x0800ece9
 800ec64:	0800ece9 	.word	0x0800ece9
 800ec68:	0800ece9 	.word	0x0800ece9
 800ec6c:	0800ec8f 	.word	0x0800ec8f
				{
					case PICK_LEFT:
						lidar->pos = CENTER_1;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2204      	movs	r2, #4
 800ec74:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec78:	e037      	b.n	800ecea <LidarSetPos+0x1fe>

					case PICK_RIGHT:
						lidar->pos = CENTER_1;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec82:	e032      	b.n	800ecea <LidarSetPos+0x1fe>

					case UPPER_LEFT:
						lidar->pos = CENTER_1;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2204      	movs	r2, #4
 800ec88:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec8c:	e02d      	b.n	800ecea <LidarSetPos+0x1fe>

					case UPPER_RIGHT:
						lidar->pos = CENTER_1;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2204      	movs	r2, #4
 800ec92:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ec96:	e028      	b.n	800ecea <LidarSetPos+0x1fe>

					case CENTER_2:
						ResetCoordinate();
 800ec98:	f7fd fb78 	bl	800c38c <ResetCoordinate>
						PP_start(center_2_to_center_1, 1, &pp);
 800ec9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800eca0:	4a5b      	ldr	r2, [pc, #364]	; (800ee10 <LidarSetPos+0x324>)
 800eca2:	2101      	movs	r1, #1
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7f7 fcca 	bl	800663e <PP_start>
						while(pp.pp_start)
 800ecaa:	e00d      	b.n	800ecc8 <LidarSetPos+0x1dc>
						{
							if(ps4.button == SQUARE)
 800ecac:	4b59      	ldr	r3, [pc, #356]	; (800ee14 <LidarSetPos+0x328>)
 800ecae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecb4:	d108      	bne.n	800ecc8 <LidarSetPos+0x1dc>
							{
								while(ps4.button == SQUARE);
 800ecb6:	bf00      	nop
 800ecb8:	4b56      	ldr	r3, [pc, #344]	; (800ee14 <LidarSetPos+0x328>)
 800ecba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecc0:	d0fa      	beq.n	800ecb8 <LidarSetPos+0x1cc>
								PP_stop(&pp);
 800ecc2:	4853      	ldr	r0, [pc, #332]	; (800ee10 <LidarSetPos+0x324>)
 800ecc4:	f7f7 fefc 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800ecc8:	4b51      	ldr	r3, [pc, #324]	; (800ee10 <LidarSetPos+0x324>)
 800ecca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1e9      	bne.n	800ecac <LidarSetPos+0x1c0>
							}
						}
						lidar->pos = CENTER_1;
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2204      	movs	r2, #4
 800ecdc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800ece0:	6838      	ldr	r0, [r7, #0]
 800ece2:	f000 fa2f 	bl	800f144 <LidarAdjust>
						break;
 800ece6:	e000      	b.n	800ecea <LidarSetPos+0x1fe>

					default:
						break;
 800ece8:	bf00      	nop
				}
				break;
 800ecea:	e222      	b.n	800f132 <LidarSetPos+0x646>

			case CENTER_2:
				switch(lidar->pos) // Self Pose
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	d879      	bhi.n	800edec <LidarSetPos+0x300>
 800ecf8:	a201      	add	r2, pc, #4	; (adr r2, 800ed00 <LidarSetPos+0x214>)
 800ecfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfe:	bf00      	nop
 800ed00:	0800ed25 	.word	0x0800ed25
 800ed04:	0800ed2f 	.word	0x0800ed2f
 800ed08:	0800ed39 	.word	0x0800ed39
 800ed0c:	0800ed4d 	.word	0x0800ed4d
 800ed10:	0800eded 	.word	0x0800eded
 800ed14:	0800ed9d 	.word	0x0800ed9d
 800ed18:	0800eded 	.word	0x0800eded
 800ed1c:	0800eded 	.word	0x0800eded
 800ed20:	0800ed43 	.word	0x0800ed43
				{
					case PICK_LEFT:
						lidar->pos = CENTER_2;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2205      	movs	r2, #5
 800ed28:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ed2c:	e05f      	b.n	800edee <LidarSetPos+0x302>

					case PICK_RIGHT:
						lidar->pos = CENTER_2;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	2205      	movs	r2, #5
 800ed32:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ed36:	e05a      	b.n	800edee <LidarSetPos+0x302>

					case UPPER_LEFT:
						lidar->pos = CENTER_2;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2205      	movs	r2, #5
 800ed3c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ed40:	e055      	b.n	800edee <LidarSetPos+0x302>

					case UPPER_RIGHT:
						lidar->pos = CENTER_2;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2205      	movs	r2, #5
 800ed46:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ed4a:	e050      	b.n	800edee <LidarSetPos+0x302>

					case CENTER_1:
						ResetCoordinate();
 800ed4c:	f7fd fb1e 	bl	800c38c <ResetCoordinate>
						PP_start(center_1_to_center_2, 1, &pp);
 800ed50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ed54:	4a2e      	ldr	r2, [pc, #184]	; (800ee10 <LidarSetPos+0x324>)
 800ed56:	2101      	movs	r1, #1
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7f7 fc70 	bl	800663e <PP_start>
						while(pp.pp_start)
 800ed5e:	e00d      	b.n	800ed7c <LidarSetPos+0x290>
						{
							if(ps4.button == SQUARE)
 800ed60:	4b2c      	ldr	r3, [pc, #176]	; (800ee14 <LidarSetPos+0x328>)
 800ed62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed68:	d108      	bne.n	800ed7c <LidarSetPos+0x290>
							{
								while(ps4.button == SQUARE);
 800ed6a:	bf00      	nop
 800ed6c:	4b29      	ldr	r3, [pc, #164]	; (800ee14 <LidarSetPos+0x328>)
 800ed6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed74:	d0fa      	beq.n	800ed6c <LidarSetPos+0x280>
								PP_stop(&pp);
 800ed76:	4826      	ldr	r0, [pc, #152]	; (800ee10 <LidarSetPos+0x324>)
 800ed78:	f7f7 fea2 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800ed7c:	4b24      	ldr	r3, [pc, #144]	; (800ee10 <LidarSetPos+0x324>)
 800ed7e:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1e9      	bne.n	800ed60 <LidarSetPos+0x274>
							}
						}
						lidar->pos = CENTER_2;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2205      	movs	r2, #5
 800ed90:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800ed94:	6838      	ldr	r0, [r7, #0]
 800ed96:	f000 f9d5 	bl	800f144 <LidarAdjust>
						break;
 800ed9a:	e028      	b.n	800edee <LidarSetPos+0x302>

					case CENTER:
						ResetCoordinate();
 800ed9c:	f7fd faf6 	bl	800c38c <ResetCoordinate>
						PP_start(center_to_center_2, 1, &pp);
 800eda0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800eda4:	4a1a      	ldr	r2, [pc, #104]	; (800ee10 <LidarSetPos+0x324>)
 800eda6:	2101      	movs	r1, #1
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f7 fc48 	bl	800663e <PP_start>
						while(pp.pp_start)
 800edae:	e00d      	b.n	800edcc <LidarSetPos+0x2e0>
						{
							if(ps4.button == SQUARE)
 800edb0:	4b18      	ldr	r3, [pc, #96]	; (800ee14 <LidarSetPos+0x328>)
 800edb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edb8:	d108      	bne.n	800edcc <LidarSetPos+0x2e0>
							{
								while(ps4.button == SQUARE);
 800edba:	bf00      	nop
 800edbc:	4b15      	ldr	r3, [pc, #84]	; (800ee14 <LidarSetPos+0x328>)
 800edbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edc4:	d0fa      	beq.n	800edbc <LidarSetPos+0x2d0>
								PP_stop(&pp);
 800edc6:	4812      	ldr	r0, [pc, #72]	; (800ee10 <LidarSetPos+0x324>)
 800edc8:	f7f7 fe7a 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800edcc:	4b10      	ldr	r3, [pc, #64]	; (800ee10 <LidarSetPos+0x324>)
 800edce:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1e9      	bne.n	800edb0 <LidarSetPos+0x2c4>
							}
						}
						lidar->pos = CENTER_2;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2205      	movs	r2, #5
 800ede0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800ede4:	6838      	ldr	r0, [r7, #0]
 800ede6:	f000 f9ad 	bl	800f144 <LidarAdjust>
						break;
 800edea:	e000      	b.n	800edee <LidarSetPos+0x302>

					default:
						break;
 800edec:	bf00      	nop
				}
				break;
 800edee:	e1a0      	b.n	800f132 <LidarSetPos+0x646>
 800edf0:	0801f3bc 	.word	0x0801f3bc
 800edf4:	0801f3d8 	.word	0x0801f3d8
 800edf8:	0801f3f4 	.word	0x0801f3f4
 800edfc:	0801f410 	.word	0x0801f410
 800ee00:	0801f42c 	.word	0x0801f42c
 800ee04:	0801f448 	.word	0x0801f448
 800ee08:	0801f464 	.word	0x0801f464
 800ee0c:	0801f480 	.word	0x0801f480
 800ee10:	20007150 	.word	0x20007150
 800ee14:	2000a300 	.word	0x2000a300

			case CENTER:
				switch(lidar->pos) // Self Pose
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	2b08      	cmp	r3, #8
 800ee22:	d879      	bhi.n	800ef18 <LidarSetPos+0x42c>
 800ee24:	a201      	add	r2, pc, #4	; (adr r2, 800ee2c <LidarSetPos+0x340>)
 800ee26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2a:	bf00      	nop
 800ee2c:	0800ee51 	.word	0x0800ee51
 800ee30:	0800ee5b 	.word	0x0800ee5b
 800ee34:	0800ee65 	.word	0x0800ee65
 800ee38:	0800ef19 	.word	0x0800ef19
 800ee3c:	0800ee79 	.word	0x0800ee79
 800ee40:	0800ef19 	.word	0x0800ef19
 800ee44:	0800eec9 	.word	0x0800eec9
 800ee48:	0800ef19 	.word	0x0800ef19
 800ee4c:	0800ee6f 	.word	0x0800ee6f
				{
					case PICK_LEFT:
						lidar->pos = CENTER;
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2206      	movs	r2, #6
 800ee54:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ee58:	e05f      	b.n	800ef1a <LidarSetPos+0x42e>

					case PICK_RIGHT:
						lidar->pos = CENTER;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2206      	movs	r2, #6
 800ee5e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ee62:	e05a      	b.n	800ef1a <LidarSetPos+0x42e>

					case UPPER_LEFT:
						lidar->pos = CENTER;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2206      	movs	r2, #6
 800ee68:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ee6c:	e055      	b.n	800ef1a <LidarSetPos+0x42e>

					case UPPER_RIGHT:
						lidar->pos = CENTER;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2206      	movs	r2, #6
 800ee72:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ee76:	e050      	b.n	800ef1a <LidarSetPos+0x42e>

					case CENTER_2:
						ResetCoordinate();
 800ee78:	f7fd fa88 	bl	800c38c <ResetCoordinate>
						PP_start(center_2_to_center, 1, &pp);
 800ee7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ee80:	4aae      	ldr	r2, [pc, #696]	; (800f13c <LidarSetPos+0x650>)
 800ee82:	2101      	movs	r1, #1
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7f7 fbda 	bl	800663e <PP_start>
						while(pp.pp_start)
 800ee8a:	e00d      	b.n	800eea8 <LidarSetPos+0x3bc>
						{
							if(ps4.button == SQUARE)
 800ee8c:	4bac      	ldr	r3, [pc, #688]	; (800f140 <LidarSetPos+0x654>)
 800ee8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee94:	d108      	bne.n	800eea8 <LidarSetPos+0x3bc>
							{
								while(ps4.button == SQUARE);
 800ee96:	bf00      	nop
 800ee98:	4ba9      	ldr	r3, [pc, #676]	; (800f140 <LidarSetPos+0x654>)
 800ee9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eea0:	d0fa      	beq.n	800ee98 <LidarSetPos+0x3ac>
								PP_stop(&pp);
 800eea2:	48a6      	ldr	r0, [pc, #664]	; (800f13c <LidarSetPos+0x650>)
 800eea4:	f7f7 fe0c 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800eea8:	4ba4      	ldr	r3, [pc, #656]	; (800f13c <LidarSetPos+0x650>)
 800eeaa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eeae:	f003 0301 	and.w	r3, r3, #1
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e9      	bne.n	800ee8c <LidarSetPos+0x3a0>
							}
						}
						lidar->pos = CENTER;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2206      	movs	r2, #6
 800eebc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800eec0:	6838      	ldr	r0, [r7, #0]
 800eec2:	f000 f93f 	bl	800f144 <LidarAdjust>
						break;
 800eec6:	e028      	b.n	800ef1a <LidarSetPos+0x42e>

					case CENTER_3:
					ResetCoordinate();
 800eec8:	f7fd fa60 	bl	800c38c <ResetCoordinate>
					PP_start(center_3_to_center, 1, &pp);
 800eecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eed0:	4a9a      	ldr	r2, [pc, #616]	; (800f13c <LidarSetPos+0x650>)
 800eed2:	2101      	movs	r1, #1
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f7 fbb2 	bl	800663e <PP_start>
					while(pp.pp_start)
 800eeda:	e00d      	b.n	800eef8 <LidarSetPos+0x40c>
					{
						if(ps4.button == SQUARE)
 800eedc:	4b98      	ldr	r3, [pc, #608]	; (800f140 <LidarSetPos+0x654>)
 800eede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eee4:	d108      	bne.n	800eef8 <LidarSetPos+0x40c>
						{
							while(ps4.button == SQUARE);
 800eee6:	bf00      	nop
 800eee8:	4b95      	ldr	r3, [pc, #596]	; (800f140 <LidarSetPos+0x654>)
 800eeea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eef0:	d0fa      	beq.n	800eee8 <LidarSetPos+0x3fc>
							PP_stop(&pp);
 800eef2:	4892      	ldr	r0, [pc, #584]	; (800f13c <LidarSetPos+0x650>)
 800eef4:	f7f7 fde4 	bl	8006ac0 <PP_stop>
					while(pp.pp_start)
 800eef8:	4b90      	ldr	r3, [pc, #576]	; (800f13c <LidarSetPos+0x650>)
 800eefa:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800eefe:	f003 0301 	and.w	r3, r3, #1
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1e9      	bne.n	800eedc <LidarSetPos+0x3f0>
						}
					}
					lidar->pos = CENTER;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2206      	movs	r2, #6
 800ef0c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LidarAdjust(lidar);
 800ef10:	6838      	ldr	r0, [r7, #0]
 800ef12:	f000 f917 	bl	800f144 <LidarAdjust>
					break;
 800ef16:	e000      	b.n	800ef1a <LidarSetPos+0x42e>

					default:
						break;
 800ef18:	bf00      	nop
				}
				break;
 800ef1a:	e10a      	b.n	800f132 <LidarSetPos+0x646>

			case CENTER_3:
				switch(lidar->pos) // Self Pose
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800ef22:	3b01      	subs	r3, #1
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d879      	bhi.n	800f01c <LidarSetPos+0x530>
 800ef28:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <LidarSetPos+0x444>)
 800ef2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2e:	bf00      	nop
 800ef30:	0800ef55 	.word	0x0800ef55
 800ef34:	0800ef5f 	.word	0x0800ef5f
 800ef38:	0800ef69 	.word	0x0800ef69
 800ef3c:	0800f01d 	.word	0x0800f01d
 800ef40:	0800f01d 	.word	0x0800f01d
 800ef44:	0800ef7d 	.word	0x0800ef7d
 800ef48:	0800f01d 	.word	0x0800f01d
 800ef4c:	0800efcd 	.word	0x0800efcd
 800ef50:	0800ef73 	.word	0x0800ef73
				{
					case PICK_LEFT:
						lidar->pos = CENTER_3;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2207      	movs	r2, #7
 800ef58:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ef5c:	e05f      	b.n	800f01e <LidarSetPos+0x532>

					case PICK_RIGHT:
						lidar->pos = CENTER_3;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2207      	movs	r2, #7
 800ef62:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ef66:	e05a      	b.n	800f01e <LidarSetPos+0x532>

					case UPPER_LEFT:
						lidar->pos = CENTER_3;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2207      	movs	r2, #7
 800ef6c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ef70:	e055      	b.n	800f01e <LidarSetPos+0x532>

					case UPPER_RIGHT:
						lidar->pos = CENTER_3;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	2207      	movs	r2, #7
 800ef76:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800ef7a:	e050      	b.n	800f01e <LidarSetPos+0x532>

					case CENTER:
						ResetCoordinate();
 800ef7c:	f7fd fa06 	bl	800c38c <ResetCoordinate>
						PP_start(center_to_center_3, 1, &pp);
 800ef80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ef84:	4a6d      	ldr	r2, [pc, #436]	; (800f13c <LidarSetPos+0x650>)
 800ef86:	2101      	movs	r1, #1
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7f7 fb58 	bl	800663e <PP_start>
						while(pp.pp_start)
 800ef8e:	e00d      	b.n	800efac <LidarSetPos+0x4c0>
						{
							if(ps4.button == SQUARE)
 800ef90:	4b6b      	ldr	r3, [pc, #428]	; (800f140 <LidarSetPos+0x654>)
 800ef92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef98:	d108      	bne.n	800efac <LidarSetPos+0x4c0>
							{
								while(ps4.button == SQUARE);
 800ef9a:	bf00      	nop
 800ef9c:	4b68      	ldr	r3, [pc, #416]	; (800f140 <LidarSetPos+0x654>)
 800ef9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa4:	d0fa      	beq.n	800ef9c <LidarSetPos+0x4b0>
								PP_stop(&pp);
 800efa6:	4865      	ldr	r0, [pc, #404]	; (800f13c <LidarSetPos+0x650>)
 800efa8:	f7f7 fd8a 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800efac:	4b63      	ldr	r3, [pc, #396]	; (800f13c <LidarSetPos+0x650>)
 800efae:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800efb2:	f003 0301 	and.w	r3, r3, #1
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1e9      	bne.n	800ef90 <LidarSetPos+0x4a4>
							}
						}
						lidar->pos = CENTER_3;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	2207      	movs	r2, #7
 800efc0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800efc4:	6838      	ldr	r0, [r7, #0]
 800efc6:	f000 f8bd 	bl	800f144 <LidarAdjust>
						break;
 800efca:	e028      	b.n	800f01e <LidarSetPos+0x532>

					case CENTER_4:
						ResetCoordinate();
 800efcc:	f7fd f9de 	bl	800c38c <ResetCoordinate>
						PP_start(center_4_to_center_3, 1, &pp);
 800efd0:	f107 0308 	add.w	r3, r7, #8
 800efd4:	4a59      	ldr	r2, [pc, #356]	; (800f13c <LidarSetPos+0x650>)
 800efd6:	2101      	movs	r1, #1
 800efd8:	4618      	mov	r0, r3
 800efda:	f7f7 fb30 	bl	800663e <PP_start>
						while(pp.pp_start)
 800efde:	e00d      	b.n	800effc <LidarSetPos+0x510>
						{
							if(ps4.button == SQUARE)
 800efe0:	4b57      	ldr	r3, [pc, #348]	; (800f140 <LidarSetPos+0x654>)
 800efe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efe8:	d108      	bne.n	800effc <LidarSetPos+0x510>
							{
								while(ps4.button == SQUARE);
 800efea:	bf00      	nop
 800efec:	4b54      	ldr	r3, [pc, #336]	; (800f140 <LidarSetPos+0x654>)
 800efee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eff4:	d0fa      	beq.n	800efec <LidarSetPos+0x500>
								PP_stop(&pp);
 800eff6:	4851      	ldr	r0, [pc, #324]	; (800f13c <LidarSetPos+0x650>)
 800eff8:	f7f7 fd62 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800effc:	4b4f      	ldr	r3, [pc, #316]	; (800f13c <LidarSetPos+0x650>)
 800effe:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	b2db      	uxtb	r3, r3
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d1e9      	bne.n	800efe0 <LidarSetPos+0x4f4>
							}
						}
						lidar->pos = CENTER_3;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2207      	movs	r2, #7
 800f010:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800f014:	6838      	ldr	r0, [r7, #0]
 800f016:	f000 f895 	bl	800f144 <LidarAdjust>
						break;
 800f01a:	e000      	b.n	800f01e <LidarSetPos+0x532>

					default:
						break;
 800f01c:	bf00      	nop
				}
				break;
 800f01e:	e088      	b.n	800f132 <LidarSetPos+0x646>

			case CENTER_4:
				switch(lidar->pos) // Self Pose
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f026:	3b01      	subs	r3, #1
 800f028:	2b08      	cmp	r3, #8
 800f02a:	d851      	bhi.n	800f0d0 <LidarSetPos+0x5e4>
 800f02c:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <LidarSetPos+0x548>)
 800f02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f032:	bf00      	nop
 800f034:	0800f059 	.word	0x0800f059
 800f038:	0800f063 	.word	0x0800f063
 800f03c:	0800f06d 	.word	0x0800f06d
 800f040:	0800f0d1 	.word	0x0800f0d1
 800f044:	0800f0d1 	.word	0x0800f0d1
 800f048:	0800f0d1 	.word	0x0800f0d1
 800f04c:	0800f081 	.word	0x0800f081
 800f050:	0800f0d1 	.word	0x0800f0d1
 800f054:	0800f077 	.word	0x0800f077
				{
					case PICK_LEFT:
						lidar->pos = CENTER_4;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2208      	movs	r2, #8
 800f05c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f060:	e037      	b.n	800f0d2 <LidarSetPos+0x5e6>

					case PICK_RIGHT:
						lidar->pos = CENTER_4;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2208      	movs	r2, #8
 800f066:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f06a:	e032      	b.n	800f0d2 <LidarSetPos+0x5e6>

					case UPPER_LEFT:
						lidar->pos = CENTER_4;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2208      	movs	r2, #8
 800f070:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f074:	e02d      	b.n	800f0d2 <LidarSetPos+0x5e6>

					case UPPER_RIGHT:
						lidar->pos = CENTER_4;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2208      	movs	r2, #8
 800f07a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f07e:	e028      	b.n	800f0d2 <LidarSetPos+0x5e6>

					case CENTER_3:
						ResetCoordinate();
 800f080:	f7fd f984 	bl	800c38c <ResetCoordinate>
						PP_start(center_3_to_center_4, 1, &pp);
 800f084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f088:	4a2c      	ldr	r2, [pc, #176]	; (800f13c <LidarSetPos+0x650>)
 800f08a:	2101      	movs	r1, #1
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f7 fad6 	bl	800663e <PP_start>
						while(pp.pp_start)
 800f092:	e00d      	b.n	800f0b0 <LidarSetPos+0x5c4>
						{
							if(ps4.button == SQUARE)
 800f094:	4b2a      	ldr	r3, [pc, #168]	; (800f140 <LidarSetPos+0x654>)
 800f096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f09c:	d108      	bne.n	800f0b0 <LidarSetPos+0x5c4>
							{
								while(ps4.button == SQUARE);
 800f09e:	bf00      	nop
 800f0a0:	4b27      	ldr	r3, [pc, #156]	; (800f140 <LidarSetPos+0x654>)
 800f0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0a8:	d0fa      	beq.n	800f0a0 <LidarSetPos+0x5b4>
								PP_stop(&pp);
 800f0aa:	4824      	ldr	r0, [pc, #144]	; (800f13c <LidarSetPos+0x650>)
 800f0ac:	f7f7 fd08 	bl	8006ac0 <PP_stop>
						while(pp.pp_start)
 800f0b0:	4b22      	ldr	r3, [pc, #136]	; (800f13c <LidarSetPos+0x650>)
 800f0b2:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f0b6:	f003 0301 	and.w	r3, r3, #1
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e9      	bne.n	800f094 <LidarSetPos+0x5a8>
							}
						}
						lidar->pos = CENTER_4;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	2208      	movs	r2, #8
 800f0c4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LidarAdjust(lidar);
 800f0c8:	6838      	ldr	r0, [r7, #0]
 800f0ca:	f000 f83b 	bl	800f144 <LidarAdjust>
						break;
 800f0ce:	e000      	b.n	800f0d2 <LidarSetPos+0x5e6>

					default:
						break;
 800f0d0:	bf00      	nop
				}
				break;
 800f0d2:	e02e      	b.n	800f132 <LidarSetPos+0x646>


			case UPPER_RIGHT:
				switch(lidar->pos) // Self Pose
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	2b05      	cmp	r3, #5
 800f0de:	d823      	bhi.n	800f128 <LidarSetPos+0x63c>
 800f0e0:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <LidarSetPos+0x5fc>)
 800f0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e6:	bf00      	nop
 800f0e8:	0800f101 	.word	0x0800f101
 800f0ec:	0800f10b 	.word	0x0800f10b
 800f0f0:	0800f115 	.word	0x0800f115
 800f0f4:	0800f129 	.word	0x0800f129
 800f0f8:	0800f129 	.word	0x0800f129
 800f0fc:	0800f11f 	.word	0x0800f11f
				{
					case PICK_LEFT:
						lidar->pos = UPPER_RIGHT;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2209      	movs	r2, #9
 800f104:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f108:	e00f      	b.n	800f12a <LidarSetPos+0x63e>

					case PICK_RIGHT:
						lidar->pos = UPPER_RIGHT;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2209      	movs	r2, #9
 800f10e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f112:	e00a      	b.n	800f12a <LidarSetPos+0x63e>

					case UPPER_LEFT:
						lidar->pos = UPPER_RIGHT;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2209      	movs	r2, #9
 800f118:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f11c:	e005      	b.n	800f12a <LidarSetPos+0x63e>

					case CENTER:
						lidar->pos = UPPER_RIGHT;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	2209      	movs	r2, #9
 800f122:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						break;
 800f126:	e000      	b.n	800f12a <LidarSetPos+0x63e>

					default:
						break;
 800f128:	bf00      	nop
				}
				break;
 800f12a:	e002      	b.n	800f132 <LidarSetPos+0x646>

			default:
				break;
		}

	}
 800f12c:	bf00      	nop
 800f12e:	e000      	b.n	800f132 <LidarSetPos+0x646>
				break;
 800f130:	bf00      	nop

}
 800f132:	bf00      	nop
 800f134:	37e8      	adds	r7, #232	; 0xe8
 800f136:	46bd      	mov	sp, r7
 800f138:	bdb0      	pop	{r4, r5, r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20007150 	.word	0x20007150
 800f140:	2000a300 	.word	0x2000a300

0800f144 <LidarAdjust>:
			break;
	}
}

void LidarAdjust(Lidar_t* lidar)
{
 800f144:	b5b0      	push	{r4, r5, r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
	// Only adjust after reached destination
	switch(lidar->pos)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800f152:	3b03      	subs	r3, #3
 800f154:	2b06      	cmp	r3, #6
 800f156:	f200 816a 	bhi.w	800f42e <LidarAdjust+0x2ea>
 800f15a:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <LidarAdjust+0x1c>)
 800f15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f160:	0800f42f 	.word	0x0800f42f
 800f164:	0800f17d 	.word	0x0800f17d
 800f168:	0800f207 	.word	0x0800f207
 800f16c:	0800f291 	.word	0x0800f291
 800f170:	0800f31b 	.word	0x0800f31b
 800f174:	0800f3a5 	.word	0x0800f3a5
 800f178:	0800f42f 	.word	0x0800f42f
			 * Path plan to desired position
			 */
			break;

		case CENTER_1:
			LidarSendIns(NEAR, lidar);
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	2001      	movs	r0, #1
 800f180:	f000 fa12 	bl	800f5a8 <LidarSendIns>
			lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f190:	4618      	mov	r0, r3
 800f192:	f7f1 f9d9 	bl	8000548 <__aeabi_f2d>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	4620      	mov	r0, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	f7f1 f873 	bl	8000288 <__aeabi_dsub>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	f7f1 fd1d 	bl	8000be8 <__aeabi_d2f>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f1 f9c0 	bl	8000548 <__aeabi_f2d>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	f7f1 f85a 	bl	8000288 <__aeabi_dsub>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4619      	mov	r1, r3
 800f1dc:	f7f1 fd04 	bl	8000be8 <__aeabi_d2f>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			LidarAdjustPP(lidar->adj_x, lidar->adj_y, 0);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800f1f4:	ed9f 1a90 	vldr	s2, [pc, #576]	; 800f438 <LidarAdjust+0x2f4>
 800f1f8:	eef0 0a47 	vmov.f32	s1, s14
 800f1fc:	eeb0 0a67 	vmov.f32	s0, s15
 800f200:	f000 f91c 	bl	800f43c <LidarAdjustPP>
			break;
 800f204:	e114      	b.n	800f430 <LidarAdjust+0x2ec>

		case CENTER_2:
			LidarSendIns(NEAR, lidar);
 800f206:	6879      	ldr	r1, [r7, #4]
 800f208:	2001      	movs	r0, #1
 800f20a:	f000 f9cd 	bl	800f5a8 <LidarSendIns>
			lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f1 f994 	bl	8000548 <__aeabi_f2d>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	4620      	mov	r0, r4
 800f226:	4629      	mov	r1, r5
 800f228:	f7f1 f82e 	bl	8000288 <__aeabi_dsub>
 800f22c:	4602      	mov	r2, r0
 800f22e:	460b      	mov	r3, r1
 800f230:	4610      	mov	r0, r2
 800f232:	4619      	mov	r1, r3
 800f234:	f7f1 fcd8 	bl	8000be8 <__aeabi_d2f>
 800f238:	4602      	mov	r2, r0
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7f1 f97b 	bl	8000548 <__aeabi_f2d>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	4620      	mov	r0, r4
 800f258:	4629      	mov	r1, r5
 800f25a:	f7f1 f815 	bl	8000288 <__aeabi_dsub>
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	4610      	mov	r0, r2
 800f264:	4619      	mov	r1, r3
 800f266:	f7f1 fcbf 	bl	8000be8 <__aeabi_d2f>
 800f26a:	4602      	mov	r2, r0
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			LidarAdjustPP(lidar->adj_x, lidar->adj_y, 0);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800f27e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800f438 <LidarAdjust+0x2f4>
 800f282:	eef0 0a47 	vmov.f32	s1, s14
 800f286:	eeb0 0a67 	vmov.f32	s0, s15
 800f28a:	f000 f8d7 	bl	800f43c <LidarAdjustPP>
			break;
 800f28e:	e0cf      	b.n	800f430 <LidarAdjust+0x2ec>

		case CENTER:
			LidarSendIns(NEAR, lidar);
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	2001      	movs	r0, #1
 800f294:	f000 f988 	bl	800f5a8 <LidarSendIns>
			lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7f1 f94f 	bl	8000548 <__aeabi_f2d>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	f7f0 ffe9 	bl	8000288 <__aeabi_dsub>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f7f1 fc93 	bl	8000be8 <__aeabi_d2f>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f1 f936 	bl	8000548 <__aeabi_f2d>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	460b      	mov	r3, r1
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	f7f0 ffd0 	bl	8000288 <__aeabi_dsub>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	f7f1 fc7a 	bl	8000be8 <__aeabi_d2f>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			LidarAdjustPP(lidar->adj_x, lidar->adj_y, 0);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800f308:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800f438 <LidarAdjust+0x2f4>
 800f30c:	eef0 0a47 	vmov.f32	s1, s14
 800f310:	eeb0 0a67 	vmov.f32	s0, s15
 800f314:	f000 f892 	bl	800f43c <LidarAdjustPP>
			break;
 800f318:	e08a      	b.n	800f430 <LidarAdjust+0x2ec>

		case CENTER_3:
			LidarSendIns(NEAR, lidar);
 800f31a:	6879      	ldr	r1, [r7, #4]
 800f31c:	2001      	movs	r0, #1
 800f31e:	f000 f943 	bl	800f5a8 <LidarSendIns>
			lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f32e:	4618      	mov	r0, r3
 800f330:	f7f1 f90a 	bl	8000548 <__aeabi_f2d>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4620      	mov	r0, r4
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f0 ffa4 	bl	8000288 <__aeabi_dsub>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4610      	mov	r0, r2
 800f346:	4619      	mov	r1, r3
 800f348:	f7f1 fc4e 	bl	8000be8 <__aeabi_d2f>
 800f34c:	4602      	mov	r2, r0
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f360:	4618      	mov	r0, r3
 800f362:	f7f1 f8f1 	bl	8000548 <__aeabi_f2d>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4620      	mov	r0, r4
 800f36c:	4629      	mov	r1, r5
 800f36e:	f7f0 ff8b 	bl	8000288 <__aeabi_dsub>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	4610      	mov	r0, r2
 800f378:	4619      	mov	r1, r3
 800f37a:	f7f1 fc35 	bl	8000be8 <__aeabi_d2f>
 800f37e:	4602      	mov	r2, r0
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			LidarAdjustPP(lidar->adj_x, lidar->adj_y, 0);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800f392:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800f438 <LidarAdjust+0x2f4>
 800f396:	eef0 0a47 	vmov.f32	s1, s14
 800f39a:	eeb0 0a67 	vmov.f32	s0, s15
 800f39e:	f000 f84d 	bl	800f43c <LidarAdjustPP>
			break;
 800f3a2:	e045      	b.n	800f430 <LidarAdjust+0x2ec>

		case CENTER_4:
			LidarSendIns(NEAR, lidar);
 800f3a4:	6879      	ldr	r1, [r7, #4]
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	f000 f8fe 	bl	800f5a8 <LidarSendIns>
			lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f1 f8c5 	bl	8000548 <__aeabi_f2d>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	f7f0 ff5f 	bl	8000288 <__aeabi_dsub>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4610      	mov	r0, r2
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	f7f1 fc09 	bl	8000be8 <__aeabi_d2f>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f1 f8ac 	bl	8000548 <__aeabi_f2d>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	f7f0 ff46 	bl	8000288 <__aeabi_dsub>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	460b      	mov	r3, r1
 800f400:	4610      	mov	r0, r2
 800f402:	4619      	mov	r1, r3
 800f404:	f7f1 fbf0 	bl	8000be8 <__aeabi_d2f>
 800f408:	4602      	mov	r2, r0
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
			LidarAdjustPP(lidar->adj_x, lidar->adj_y, 0);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 800f41c:	ed9f 1a06 	vldr	s2, [pc, #24]	; 800f438 <LidarAdjust+0x2f4>
 800f420:	eef0 0a47 	vmov.f32	s1, s14
 800f424:	eeb0 0a67 	vmov.f32	s0, s15
 800f428:	f000 f808 	bl	800f43c <LidarAdjustPP>
			break;
 800f42c:	e000      	b.n	800f430 <LidarAdjust+0x2ec>

		case UPPER_RIGHT:
			break;

		default:
			break;
 800f42e:	bf00      	nop
	}
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bdb0      	pop	{r4, r5, r7, pc}
 800f438:	00000000 	.word	0x00000000

0800f43c <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08c      	sub	sp, #48	; 0x30
 800f440:	af00      	add	r7, sp, #0
 800f442:	ed87 0a03 	vstr	s0, [r7, #12]
 800f446:	edc7 0a02 	vstr	s1, [r7, #8]
 800f44a:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 800f44e:	f7fc ff9d 	bl	800c38c <ResetCoordinate>

	float adj_point[1][7] = {{1.0, adj_x, adj_y, z, 0, 1, 0}};
 800f452:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f456:	617b      	str	r3, [r7, #20]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	61bb      	str	r3, [r7, #24]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	61fb      	str	r3, [r7, #28]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	623b      	str	r3, [r7, #32]
 800f464:	f04f 0300 	mov.w	r3, #0
 800f468:	627b      	str	r3, [r7, #36]	; 0x24
 800f46a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f470:	f04f 0300 	mov.w	r3, #0
 800f474:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 800f476:	f107 0314 	add.w	r3, r7, #20
 800f47a:	4a10      	ldr	r2, [pc, #64]	; (800f4bc <LidarAdjustPP+0x80>)
 800f47c:	2101      	movs	r1, #1
 800f47e:	4618      	mov	r0, r3
 800f480:	f7f7 f8dd 	bl	800663e <PP_start>

	while(pp.pp_start)
 800f484:	e00d      	b.n	800f4a2 <LidarAdjustPP+0x66>
	{
		if(ps4.button == SQUARE)
 800f486:	4b0e      	ldr	r3, [pc, #56]	; (800f4c0 <LidarAdjustPP+0x84>)
 800f488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f48e:	d108      	bne.n	800f4a2 <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 800f490:	bf00      	nop
 800f492:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <LidarAdjustPP+0x84>)
 800f494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f49a:	d0fa      	beq.n	800f492 <LidarAdjustPP+0x56>
			PP_stop(&pp);
 800f49c:	4807      	ldr	r0, [pc, #28]	; (800f4bc <LidarAdjustPP+0x80>)
 800f49e:	f7f7 fb0f 	bl	8006ac0 <PP_stop>
	while(pp.pp_start)
 800f4a2:	4b06      	ldr	r3, [pc, #24]	; (800f4bc <LidarAdjustPP+0x80>)
 800f4a4:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800f4a8:	f003 0301 	and.w	r3, r3, #1
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1e9      	bne.n	800f486 <LidarAdjustPP+0x4a>
		}
	}
}
 800f4b2:	bf00      	nop
 800f4b4:	bf00      	nop
 800f4b6:	3730      	adds	r7, #48	; 0x30
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20007150 	.word	0x20007150
 800f4c0:	2000a300 	.word	0x2000a300

0800f4c4 <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
	if(ps4.button == LEFT)
 800f4cc:	4b13      	ldr	r3, [pc, #76]	; (800f51c <LidarControl+0x58>)
 800f4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d0:	2b80      	cmp	r3, #128	; 0x80
 800f4d2:	d10b      	bne.n	800f4ec <LidarControl+0x28>
	{
		while(ps4.button == LEFT);
 800f4d4:	bf00      	nop
 800f4d6:	4b11      	ldr	r3, [pc, #68]	; (800f51c <LidarControl+0x58>)
 800f4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4da:	2b80      	cmp	r3, #128	; 0x80
 800f4dc:	d0fb      	beq.n	800f4d6 <LidarControl+0x12>
		lidar->pos_counter--;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800f4e4:	1e5a      	subs	r2, r3, #1
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	}

	if(ps4.button == RIGHT)
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	; (800f51c <LidarControl+0x58>)
 800f4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f0:	2b20      	cmp	r3, #32
 800f4f2:	d10b      	bne.n	800f50c <LidarControl+0x48>
	{
		while(ps4.button == RIGHT);
 800f4f4:	bf00      	nop
 800f4f6:	4b09      	ldr	r3, [pc, #36]	; (800f51c <LidarControl+0x58>)
 800f4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	d0fb      	beq.n	800f4f6 <LidarControl+0x32>
		lidar->pos_counter++;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800f504:	1c5a      	adds	r2, r3, #1
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	}

	LidarCheckPos(lidar);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f807 	bl	800f520 <LidarCheckPos>
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	2000a300 	.word	0x2000a300

0800f520 <LidarCheckPos>:

void LidarCheckPos(Lidar_t* lidar)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800f52e:	3b03      	subs	r3, #3
 800f530:	2b06      	cmp	r3, #6
 800f532:	d834      	bhi.n	800f59e <LidarCheckPos+0x7e>
 800f534:	a201      	add	r2, pc, #4	; (adr r2, 800f53c <LidarCheckPos+0x1c>)
 800f536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53a:	bf00      	nop
 800f53c:	0800f559 	.word	0x0800f559
 800f540:	0800f563 	.word	0x0800f563
 800f544:	0800f56d 	.word	0x0800f56d
 800f548:	0800f577 	.word	0x0800f577
 800f54c:	0800f581 	.word	0x0800f581
 800f550:	0800f58b 	.word	0x0800f58b
 800f554:	0800f595 	.word	0x0800f595
	{
		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 800f558:	6879      	ldr	r1, [r7, #4]
 800f55a:	2003      	movs	r0, #3
 800f55c:	f7ff fac6 	bl	800eaec <LidarSetPos>
			break;
 800f560:	e01e      	b.n	800f5a0 <LidarCheckPos+0x80>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	2004      	movs	r0, #4
 800f566:	f7ff fac1 	bl	800eaec <LidarSetPos>
			break;
 800f56a:	e019      	b.n	800f5a0 <LidarCheckPos+0x80>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 800f56c:	6879      	ldr	r1, [r7, #4]
 800f56e:	2005      	movs	r0, #5
 800f570:	f7ff fabc 	bl	800eaec <LidarSetPos>
			break;
 800f574:	e014      	b.n	800f5a0 <LidarCheckPos+0x80>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	2006      	movs	r0, #6
 800f57a:	f7ff fab7 	bl	800eaec <LidarSetPos>
			break;
 800f57e:	e00f      	b.n	800f5a0 <LidarCheckPos+0x80>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 800f580:	6879      	ldr	r1, [r7, #4]
 800f582:	2007      	movs	r0, #7
 800f584:	f7ff fab2 	bl	800eaec <LidarSetPos>
			break;
 800f588:	e00a      	b.n	800f5a0 <LidarCheckPos+0x80>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 800f58a:	6879      	ldr	r1, [r7, #4]
 800f58c:	2008      	movs	r0, #8
 800f58e:	f7ff faad 	bl	800eaec <LidarSetPos>
			break;
 800f592:	e005      	b.n	800f5a0 <LidarCheckPos+0x80>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	2009      	movs	r0, #9
 800f598:	f7ff faa8 	bl	800eaec <LidarSetPos>
			break;
 800f59c:	e000      	b.n	800f5a0 <LidarCheckPos+0x80>

		default:
			break;
 800f59e:	bf00      	nop
	}
}
 800f5a0:	bf00      	nop
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	6039      	str	r1, [r7, #0]
 800f5b2:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	79fa      	ldrb	r2, [r7, #7]
 800f5c0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	3302      	adds	r3, #2
 800f5ce:	683a      	ldr	r2, [r7, #0]
 800f5d0:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 800f5d4:	7812      	ldrb	r2, [r2, #0]
 800f5d6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	1c59      	adds	r1, r3, #1
 800f5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5e6:	2202      	movs	r2, #2
 800f5e8:	f005 ff6f 	bl	80154ca <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	33c9      	adds	r3, #201	; 0xc9
 800f5f6:	2219      	movs	r2, #25
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	f005 ffff 	bl	80155fc <HAL_UART_Receive_IT>

	while(lidar->response == NO); // Poll the user after got new data
 800f5fe:	bf00      	nop
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800f606:	2b01      	cmp	r3, #1
 800f608:	d0fa      	beq.n	800f600 <LidarSendIns+0x58>
}
 800f60a:	bf00      	nop
 800f60c:	bf00      	nop
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 800f614:	b5b0      	push	{r4, r5, r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800f622:	2b00      	cmp	r3, #0
 800f624:	f040 8115 	bne.w	800f852 <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 800f628:	4baa      	ldr	r3, [pc, #680]	; (800f8d4 <ObstacleHandler+0x2c0>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <ObstacleHandler+0x22>
 800f630:	2b01      	cmp	r3, #1
 800f632:	d061      	beq.n	800f6f8 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);

		}
	}
}
 800f634:	e1f1      	b.n	800fa1a <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	f040 81eb 	bne.w	800fa18 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	32ca      	adds	r2, #202	; 0xca
 800f64c:	6812      	ldr	r2, [r2, #0]
 800f64e:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d110      	bne.n	800f682 <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f666:	461a      	mov	r2, r3
 800f668:	4613      	mov	r3, r2
 800f66a:	005b      	lsls	r3, r3, #1
 800f66c:	4413      	add	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4618      	mov	r0, r3
 800f672:	f009 fcf5 	bl	8019060 <malloc>
 800f676:	4603      	mov	r3, r0
 800f678:	461a      	mov	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800f680:	e012      	b.n	800f6a8 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f68e:	4619      	mov	r1, r3
 800f690:	460b      	mov	r3, r1
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	440b      	add	r3, r1
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4619      	mov	r1, r3
 800f69a:	4610      	mov	r0, r2
 800f69c:	f00a fc22 	bl	8019ee4 <realloc>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 800f6b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6b8:	2204      	movs	r2, #4
 800f6ba:	f005 ff06 	bl	80154ca <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	0052      	lsls	r2, r2, #1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	461a      	mov	r2, r3
 800f6de:	f005 ff8d 	bl	80155fc <HAL_UART_Receive_IT>
					mode = 1;
 800f6e2:	4b7c      	ldr	r3, [pc, #496]	; (800f8d4 <ObstacleHandler+0x2c0>)
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
 800f6ee:	f043 0301 	orr.w	r3, r3, #1
 800f6f2:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240
				break;
 800f6f6:	e18f      	b.n	800fa18 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	e05b      	b.n	800f7b6 <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 800f704:	697a      	ldr	r2, [r7, #20]
 800f706:	4613      	mov	r3, r2
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	33c8      	adds	r3, #200	; 0xc8
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	4413      	add	r3, r2
 800f714:	3301      	adds	r3, #1
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	4613      	mov	r3, r2
 800f724:	005b      	lsls	r3, r3, #1
 800f726:	4413      	add	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	3304      	adds	r3, #4
 800f72c:	33c8      	adds	r3, #200	; 0xc8
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	4413      	add	r3, r2
 800f732:	3301      	adds	r3, #1
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	4613      	mov	r3, r2
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	4413      	add	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	3308      	adds	r3, #8
 800f74a:	33c8      	adds	r3, #200	; 0xc8
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	4413      	add	r3, r2
 800f750:	3301      	adds	r3, #1
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800f762:	f7f1 f873 	bl	800084c <__aeabi_ddiv>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	4610      	mov	r0, r2
 800f76c:	4619      	mov	r1, r3
 800f76e:	f7f1 fa3b 	bl	8000be8 <__aeabi_d2f>
 800f772:	4603      	mov	r3, r0
 800f774:	ee00 3a10 	vmov	s0, r3
 800f778:	f00e f95a 	bl	801da30 <atanf>
 800f77c:	ee10 3a10 	vmov	r3, s0
 800f780:	4618      	mov	r0, r3
 800f782:	f7f0 fee1 	bl	8000548 <__aeabi_f2d>
 800f786:	4602      	mov	r2, r0
 800f788:	460b      	mov	r3, r1
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	015b      	lsls	r3, r3, #5
 800f79a:	441a      	add	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4615      	mov	r5, r2
 800f7a0:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800f7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f7a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f7ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	617b      	str	r3, [r7, #20]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f7bc:	697a      	ldr	r2, [r7, #20]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	db9d      	blt.n	800f6fe <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	613b      	str	r3, [r7, #16]
 800f7c6:	e031      	b.n	800f82c <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	015b      	lsls	r3, r3, #5
 800f7d8:	4413      	add	r3, r2
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7e0:	2204      	movs	r2, #4
 800f7e2:	f005 fe72 	bl	80154ca <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	015b      	lsls	r3, r3, #5
 800f7f6:	4413      	add	r3, r2
 800f7f8:	f103 0108 	add.w	r1, r3, #8
 800f7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f800:	2204      	movs	r2, #4
 800f802:	f005 fe62 	bl	80154ca <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	015b      	lsls	r3, r3, #5
 800f816:	4413      	add	r3, r2
 800f818:	f103 0110 	add.w	r1, r3, #16
 800f81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f820:	2204      	movs	r2, #4
 800f822:	f005 fe52 	bl	80154ca <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	3301      	adds	r3, #1
 800f82a:	613b      	str	r3, [r7, #16]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	429a      	cmp	r2, r3
 800f836:	dbc7      	blt.n	800f7c8 <ObstacleHandler+0x1b4>
				mode = 0;
 800f838:	4b26      	ldr	r3, [pc, #152]	; (800f8d4 <ObstacleHandler+0x2c0>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	33c9      	adds	r3, #201	; 0xc9
 800f848:	2205      	movs	r2, #5
 800f84a:	4619      	mov	r1, r3
 800f84c:	f005 fed6 	bl	80155fc <HAL_UART_Receive_IT>
				break;
 800f850:	e0e3      	b.n	800fa1a <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 800f858:	f003 0304 	and.w	r3, r3, #4
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d13a      	bne.n	800f8d8 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800f868:	2b01      	cmp	r3, #1
 800f86a:	f040 80d6 	bne.w	800fa1a <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f203 1399 	addw	r3, r3, #409	; 0x199
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	32ca      	adds	r2, #202	; 0xca
 800f878:	7812      	ldrb	r2, [r2, #0]
 800f87a:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 80c3 	bne.w	800fa1a <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f203 1199 	addw	r1, r3, #409	; 0x199
 800f8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f005 fe10 	bl	80154ca <HAL_UART_Transmit>
					lidar->start = 1;
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
 800f8b0:	f043 0304 	orr.w	r3, r3, #4
 800f8b4:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240
					lidar->response = NO;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	33c9      	adds	r3, #201	; 0xc9
 800f8ca:	2219      	movs	r2, #25
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	f005 fe95 	bl	80155fc <HAL_UART_Receive_IT>
}
 800f8d2:	e0a2      	b.n	800fa1a <ObstacleHandler+0x406>
 800f8d4:	200015b8 	.word	0x200015b8
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f203 1399 	addw	r3, r3, #409	; 0x199
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	32c9      	adds	r2, #201	; 0xc9
 800f8e2:	7812      	ldrb	r2, [r2, #0]
 800f8e4:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d152      	bne.n	800f9a2 <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	33ca      	adds	r3, #202	; 0xca
 800f906:	2208      	movs	r2, #8
 800f908:	4619      	mov	r1, r3
 800f90a:	f009 fbb1 	bl	8019070 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	33d2      	adds	r3, #210	; 0xd2
 800f918:	2208      	movs	r2, #8
 800f91a:	4619      	mov	r1, r3
 800f91c:	f009 fba8 	bl	8019070 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	33da      	adds	r3, #218	; 0xda
 800f92a:	2208      	movs	r2, #8
 800f92c:	4619      	mov	r1, r3
 800f92e:	f009 fb9f 	bl	8019070 <memcpy>
				float temp = lidar->pole.x;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800f938:	4610      	mov	r0, r2
 800f93a:	4619      	mov	r1, r3
 800f93c:	f7f1 f954 	bl	8000be8 <__aeabi_d2f>
 800f940:	4603      	mov	r3, r0
 800f942:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 800f94a:	4614      	mov	r4, r2
 800f94c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7f0 fdf6 	bl	8000548 <__aeabi_f2d>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	6879      	ldr	r1, [r7, #4]
 800f962:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 800f972:	f7f0 ff6b 	bl	800084c <__aeabi_ddiv>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4610      	mov	r0, r2
 800f97c:	4619      	mov	r1, r3
 800f97e:	f7f1 f933 	bl	8000be8 <__aeabi_d2f>
 800f982:	4603      	mov	r3, r0
 800f984:	ee00 3a10 	vmov	s0, r3
 800f988:	f00e f852 	bl	801da30 <atanf>
 800f98c:	ee10 3a10 	vmov	r3, s0
 800f990:	4618      	mov	r0, r3
 800f992:	f7f0 fdd9 	bl	8000548 <__aeabi_f2d>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	6879      	ldr	r1, [r7, #4]
 800f99c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 800f9a0:	e00d      	b.n	800f9be <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	f892 3240 	ldrb.w	r3, [r2, #576]	; 0x240
 800f9a8:	f043 0302 	orr.w	r3, r3, #2
 800f9ac:	f882 3240 	strb.w	r3, [r2, #576]	; 0x240
				LidarSendIns(lidar->inst, lidar);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800f9b6:	6879      	ldr	r1, [r7, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fdf5 	bl	800f5a8 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f203 1199 	addw	r1, r3, #409	; 0x199
 800f9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	f005 fd7b 	bl	80154ca <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 800f9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9e4:	2208      	movs	r2, #8
 800f9e6:	f005 fd70 	bl	80154ca <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 800f9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9fa:	2208      	movs	r2, #8
 800f9fc:	f005 fd65 	bl	80154ca <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 800fa0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa10:	2208      	movs	r2, #8
 800fa12:	f005 fd5a 	bl	80154ca <HAL_UART_Transmit>
}
 800fa16:	e000      	b.n	800fa1a <ObstacleHandler+0x406>
				break;
 800fa18:	bf00      	nop
}
 800fa1a:	bf00      	nop
 800fa1c:	3718      	adds	r7, #24
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bdb0      	pop	{r4, r5, r7, pc}
 800fa22:	bf00      	nop

0800fa24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800fa24:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fa5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800fa28:	480d      	ldr	r0, [pc, #52]	; (800fa60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800fa2a:	490e      	ldr	r1, [pc, #56]	; (800fa64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800fa2c:	4a0e      	ldr	r2, [pc, #56]	; (800fa68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800fa2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fa30:	e002      	b.n	800fa38 <LoopCopyDataInit>

0800fa32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fa32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fa34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fa36:	3304      	adds	r3, #4

0800fa38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fa38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fa3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fa3c:	d3f9      	bcc.n	800fa32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fa3e:	4a0b      	ldr	r2, [pc, #44]	; (800fa6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800fa40:	4c0b      	ldr	r4, [pc, #44]	; (800fa70 <LoopFillZerobss+0x26>)
  movs r3, #0
 800fa42:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fa44:	e001      	b.n	800fa4a <LoopFillZerobss>

0800fa46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fa46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fa48:	3204      	adds	r2, #4

0800fa4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fa4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fa4c:	d3fb      	bcc.n	800fa46 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fa4e:	f7fc ff99 	bl	800c984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fa52:	f009 fae1 	bl	8019018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fa56:	f7f4 feab 	bl	80047b0 <main>
  bx  lr    
 800fa5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800fa5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800fa60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fa64:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 800fa68:	0801ffc4 	.word	0x0801ffc4
  ldr r2, =_sbss
 800fa6c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 800fa70:	2000a9cc 	.word	0x2000a9cc

0800fa74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fa74:	e7fe      	b.n	800fa74 <ADC_IRQHandler>
	...

0800fa78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fa7c:	4b0e      	ldr	r3, [pc, #56]	; (800fab8 <HAL_Init+0x40>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a0d      	ldr	r2, [pc, #52]	; (800fab8 <HAL_Init+0x40>)
 800fa82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fa88:	4b0b      	ldr	r3, [pc, #44]	; (800fab8 <HAL_Init+0x40>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a0a      	ldr	r2, [pc, #40]	; (800fab8 <HAL_Init+0x40>)
 800fa8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fa92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fa94:	4b08      	ldr	r3, [pc, #32]	; (800fab8 <HAL_Init+0x40>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a07      	ldr	r2, [pc, #28]	; (800fab8 <HAL_Init+0x40>)
 800fa9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800faa0:	2003      	movs	r0, #3
 800faa2:	f000 ffa8 	bl	80109f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800faa6:	2000      	movs	r0, #0
 800faa8:	f7fc fe4c 	bl	800c744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800faac:	f7f2 faf8 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	40023c00 	.word	0x40023c00

0800fabc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fabc:	b480      	push	{r7}
 800fabe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fac0:	4b06      	ldr	r3, [pc, #24]	; (800fadc <HAL_IncTick+0x20>)
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	461a      	mov	r2, r3
 800fac6:	4b06      	ldr	r3, [pc, #24]	; (800fae0 <HAL_IncTick+0x24>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4413      	add	r3, r2
 800facc:	4a04      	ldr	r2, [pc, #16]	; (800fae0 <HAL_IncTick+0x24>)
 800face:	6013      	str	r3, [r2, #0]
}
 800fad0:	bf00      	nop
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	20000040 	.word	0x20000040
 800fae0:	2000a978 	.word	0x2000a978

0800fae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0
  return uwTick;
 800fae8:	4b03      	ldr	r3, [pc, #12]	; (800faf8 <HAL_GetTick+0x14>)
 800faea:	681b      	ldr	r3, [r3, #0]
}
 800faec:	4618      	mov	r0, r3
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop
 800faf8:	2000a978 	.word	0x2000a978

0800fafc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e0ed      	b.n	800fcea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7f2 faec 	bl	80020f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f022 0202 	bic.w	r2, r2, #2
 800fb2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fb30:	f7ff ffd8 	bl	800fae4 <HAL_GetTick>
 800fb34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800fb36:	e012      	b.n	800fb5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800fb38:	f7ff ffd4 	bl	800fae4 <HAL_GetTick>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	2b0a      	cmp	r3, #10
 800fb44:	d90b      	bls.n	800fb5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2205      	movs	r2, #5
 800fb56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e0c5      	b.n	800fcea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	f003 0302 	and.w	r3, r3, #2
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1e5      	bne.n	800fb38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	f042 0201 	orr.w	r2, r2, #1
 800fb7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fb7c:	f7ff ffb2 	bl	800fae4 <HAL_GetTick>
 800fb80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800fb82:	e012      	b.n	800fbaa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800fb84:	f7ff ffae 	bl	800fae4 <HAL_GetTick>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	2b0a      	cmp	r3, #10
 800fb90:	d90b      	bls.n	800fbaa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2205      	movs	r2, #5
 800fba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
 800fba8:	e09f      	b.n	800fcea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0e5      	beq.n	800fb84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	7e1b      	ldrb	r3, [r3, #24]
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d108      	bne.n	800fbd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fbce:	601a      	str	r2, [r3, #0]
 800fbd0:	e007      	b.n	800fbe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	7e5b      	ldrb	r3, [r3, #25]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d108      	bne.n	800fbfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	e007      	b.n	800fc0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	7e9b      	ldrb	r3, [r3, #26]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d108      	bne.n	800fc26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f042 0220 	orr.w	r2, r2, #32
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	e007      	b.n	800fc36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f022 0220 	bic.w	r2, r2, #32
 800fc34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	7edb      	ldrb	r3, [r3, #27]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d108      	bne.n	800fc50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f022 0210 	bic.w	r2, r2, #16
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	e007      	b.n	800fc60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f042 0210 	orr.w	r2, r2, #16
 800fc5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	7f1b      	ldrb	r3, [r3, #28]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d108      	bne.n	800fc7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f042 0208 	orr.w	r2, r2, #8
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	e007      	b.n	800fc8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f022 0208 	bic.w	r2, r2, #8
 800fc88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	7f5b      	ldrb	r3, [r3, #29]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d108      	bne.n	800fca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f042 0204 	orr.w	r2, r2, #4
 800fca0:	601a      	str	r2, [r3, #0]
 800fca2:	e007      	b.n	800fcb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f022 0204 	bic.w	r2, r2, #4
 800fcb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	689a      	ldr	r2, [r3, #8]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	431a      	orrs	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	695b      	ldr	r3, [r3, #20]
 800fcc8:	ea42 0103 	orr.w	r1, r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	1e5a      	subs	r2, r3, #1
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	430a      	orrs	r2, r1
 800fcd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
	...

0800fcf4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b087      	sub	sp, #28
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd0a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800fd0c:	7cfb      	ldrb	r3, [r7, #19]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d003      	beq.n	800fd1a <HAL_CAN_ConfigFilter+0x26>
 800fd12:	7cfb      	ldrb	r3, [r7, #19]
 800fd14:	2b02      	cmp	r3, #2
 800fd16:	f040 80be 	bne.w	800fe96 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800fd1a:	4b65      	ldr	r3, [pc, #404]	; (800feb0 <HAL_CAN_ConfigFilter+0x1bc>)
 800fd1c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fd24:	f043 0201 	orr.w	r2, r3, #1
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fd34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd48:	021b      	lsls	r3, r3, #8
 800fd4a:	431a      	orrs	r2, r3
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	695b      	ldr	r3, [r3, #20]
 800fd56:	f003 031f 	and.w	r3, r3, #31
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	43db      	mvns	r3, r3
 800fd6c:	401a      	ands	r2, r3
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	69db      	ldr	r3, [r3, #28]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d123      	bne.n	800fdc4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	43db      	mvns	r3, r3
 800fd86:	401a      	ands	r2, r3
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800fd9a:	683a      	ldr	r2, [r7, #0]
 800fd9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800fd9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	3248      	adds	r2, #72	; 0x48
 800fda4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800fdb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800fdba:	6979      	ldr	r1, [r7, #20]
 800fdbc:	3348      	adds	r3, #72	; 0x48
 800fdbe:	00db      	lsls	r3, r3, #3
 800fdc0:	440b      	add	r3, r1
 800fdc2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d122      	bne.n	800fe12 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	431a      	orrs	r2, r3
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800fde8:	683a      	ldr	r2, [r7, #0]
 800fdea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800fdec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	3248      	adds	r2, #72	; 0x48
 800fdf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	689b      	ldr	r3, [r3, #8]
 800fdfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800fe06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800fe08:	6979      	ldr	r1, [r7, #20]
 800fe0a:	3348      	adds	r3, #72	; 0x48
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	440b      	add	r3, r1
 800fe10:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d109      	bne.n	800fe2e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	43db      	mvns	r3, r3
 800fe24:	401a      	ands	r2, r3
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800fe2c:	e007      	b.n	800fe3e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	431a      	orrs	r2, r3
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	691b      	ldr	r3, [r3, #16]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d109      	bne.n	800fe5a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	43db      	mvns	r3, r3
 800fe50:	401a      	ands	r2, r3
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800fe58:	e007      	b.n	800fe6a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	431a      	orrs	r2, r3
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d107      	bne.n	800fe82 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	431a      	orrs	r2, r3
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe88:	f023 0201 	bic.w	r2, r3, #1
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800fe92:	2300      	movs	r3, #0
 800fe94:	e006      	b.n	800fea4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800fea2:	2301      	movs	r3, #1
  }
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	371c      	adds	r7, #28
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr
 800feb0:	40006400 	.word	0x40006400

0800feb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d12e      	bne.n	800ff26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2202      	movs	r2, #2
 800fecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f022 0201 	bic.w	r2, r2, #1
 800fede:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fee0:	f7ff fe00 	bl	800fae4 <HAL_GetTick>
 800fee4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800fee6:	e012      	b.n	800ff0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800fee8:	f7ff fdfc 	bl	800fae4 <HAL_GetTick>
 800feec:	4602      	mov	r2, r0
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	2b0a      	cmp	r3, #10
 800fef4:	d90b      	bls.n	800ff0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2205      	movs	r2, #5
 800ff06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e012      	b.n	800ff34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1e5      	bne.n	800fee8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e006      	b.n	800ff34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
  }
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b089      	sub	sp, #36	; 0x24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
 800ff48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ff5a:	7ffb      	ldrb	r3, [r7, #31]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d003      	beq.n	800ff68 <HAL_CAN_AddTxMessage+0x2c>
 800ff60:	7ffb      	ldrb	r3, [r7, #31]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	f040 80b8 	bne.w	80100d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d10a      	bne.n	800ff88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d105      	bne.n	800ff88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f000 80a0 	beq.w	80100c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	0e1b      	lsrs	r3, r3, #24
 800ff8c:	f003 0303 	and.w	r3, r3, #3
 800ff90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d907      	bls.n	800ffa8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e09e      	b.n	80100e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	409a      	lsls	r2, r3
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10d      	bne.n	800ffd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ffc4:	68f9      	ldr	r1, [r7, #12]
 800ffc6:	6809      	ldr	r1, [r1, #0]
 800ffc8:	431a      	orrs	r2, r3
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	3318      	adds	r3, #24
 800ffce:	011b      	lsls	r3, r3, #4
 800ffd0:	440b      	add	r3, r1
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	e00f      	b.n	800fff6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ffe0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ffe6:	68f9      	ldr	r1, [r7, #12]
 800ffe8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800ffea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	3318      	adds	r3, #24
 800fff0:	011b      	lsls	r3, r3, #4
 800fff2:	440b      	add	r3, r1
 800fff4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6819      	ldr	r1, [r3, #0]
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	691a      	ldr	r2, [r3, #16]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	3318      	adds	r3, #24
 8010002:	011b      	lsls	r3, r3, #4
 8010004:	440b      	add	r3, r1
 8010006:	3304      	adds	r3, #4
 8010008:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	7d1b      	ldrb	r3, [r3, #20]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d111      	bne.n	8010036 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	3318      	adds	r3, #24
 801001a:	011b      	lsls	r3, r3, #4
 801001c:	4413      	add	r3, r2
 801001e:	3304      	adds	r3, #4
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	6811      	ldr	r1, [r2, #0]
 8010026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	3318      	adds	r3, #24
 801002e:	011b      	lsls	r3, r3, #4
 8010030:	440b      	add	r3, r1
 8010032:	3304      	adds	r3, #4
 8010034:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	3307      	adds	r3, #7
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	061a      	lsls	r2, r3, #24
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	3306      	adds	r3, #6
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	041b      	lsls	r3, r3, #16
 8010046:	431a      	orrs	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3305      	adds	r3, #5
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	021b      	lsls	r3, r3, #8
 8010050:	4313      	orrs	r3, r2
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	3204      	adds	r2, #4
 8010056:	7812      	ldrb	r2, [r2, #0]
 8010058:	4610      	mov	r0, r2
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	6811      	ldr	r1, [r2, #0]
 801005e:	ea43 0200 	orr.w	r2, r3, r0
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	011b      	lsls	r3, r3, #4
 8010066:	440b      	add	r3, r1
 8010068:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801006c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3303      	adds	r3, #3
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	061a      	lsls	r2, r3, #24
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	3302      	adds	r3, #2
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	041b      	lsls	r3, r3, #16
 801007e:	431a      	orrs	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3301      	adds	r3, #1
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	021b      	lsls	r3, r3, #8
 8010088:	4313      	orrs	r3, r2
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	7812      	ldrb	r2, [r2, #0]
 801008e:	4610      	mov	r0, r2
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	6811      	ldr	r1, [r2, #0]
 8010094:	ea43 0200 	orr.w	r2, r3, r0
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	011b      	lsls	r3, r3, #4
 801009c:	440b      	add	r3, r1
 801009e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80100a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	3318      	adds	r3, #24
 80100ac:	011b      	lsls	r3, r3, #4
 80100ae:	4413      	add	r3, r2
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	6811      	ldr	r1, [r2, #0]
 80100b6:	f043 0201 	orr.w	r2, r3, #1
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	3318      	adds	r3, #24
 80100be:	011b      	lsls	r3, r3, #4
 80100c0:	440b      	add	r3, r1
 80100c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	e00e      	b.n	80100e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	e006      	b.n	80100e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80100e4:	2301      	movs	r3, #1
  }
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3724      	adds	r7, #36	; 0x24
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80100f2:	b480      	push	{r7}
 80100f4:	b085      	sub	sp, #20
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80100fa:	2300      	movs	r3, #0
 80100fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010104:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8010106:	7afb      	ldrb	r3, [r7, #11]
 8010108:	2b01      	cmp	r3, #1
 801010a:	d002      	beq.n	8010112 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 801010c:	7afb      	ldrb	r3, [r7, #11]
 801010e:	2b02      	cmp	r3, #2
 8010110:	d11d      	bne.n	801014e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	3301      	adds	r3, #1
 8010124:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010130:	2b00      	cmp	r3, #0
 8010132:	d002      	beq.n	801013a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	3301      	adds	r3, #1
 8010138:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	689b      	ldr	r3, [r3, #8]
 8010140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d002      	beq.n	801014e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3301      	adds	r3, #1
 801014c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 801014e:	68fb      	ldr	r3, [r7, #12]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801015c:	b480      	push	{r7}
 801015e:	b087      	sub	sp, #28
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010170:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8010172:	7dfb      	ldrb	r3, [r7, #23]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d003      	beq.n	8010180 <HAL_CAN_GetRxMessage+0x24>
 8010178:	7dfb      	ldrb	r3, [r7, #23]
 801017a:	2b02      	cmp	r3, #2
 801017c:	f040 80f3 	bne.w	8010366 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10e      	bne.n	80101a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f003 0303 	and.w	r3, r3, #3
 8010190:	2b00      	cmp	r3, #0
 8010192:	d116      	bne.n	80101c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010198:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	e0e7      	b.n	8010374 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f003 0303 	and.w	r3, r3, #3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d107      	bne.n	80101c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e0d8      	b.n	8010374 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	331b      	adds	r3, #27
 80101ca:	011b      	lsls	r3, r3, #4
 80101cc:	4413      	add	r3, r2
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f003 0204 	and.w	r2, r3, #4
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d10c      	bne.n	80101fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	331b      	adds	r3, #27
 80101e8:	011b      	lsls	r3, r3, #4
 80101ea:	4413      	add	r3, r2
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	0d5b      	lsrs	r3, r3, #21
 80101f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	e00b      	b.n	8010212 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	331b      	adds	r3, #27
 8010202:	011b      	lsls	r3, r3, #4
 8010204:	4413      	add	r3, r2
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	08db      	lsrs	r3, r3, #3
 801020a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	331b      	adds	r3, #27
 801021a:	011b      	lsls	r3, r3, #4
 801021c:	4413      	add	r3, r2
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 0202 	and.w	r2, r3, #2
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	331b      	adds	r3, #27
 8010230:	011b      	lsls	r3, r3, #4
 8010232:	4413      	add	r3, r2
 8010234:	3304      	adds	r3, #4
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f003 020f 	and.w	r2, r3, #15
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	331b      	adds	r3, #27
 8010248:	011b      	lsls	r3, r3, #4
 801024a:	4413      	add	r3, r2
 801024c:	3304      	adds	r3, #4
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	0a1b      	lsrs	r3, r3, #8
 8010252:	b2da      	uxtb	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	331b      	adds	r3, #27
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	4413      	add	r3, r2
 8010264:	3304      	adds	r3, #4
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	0c1b      	lsrs	r3, r3, #16
 801026a:	b29a      	uxth	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	011b      	lsls	r3, r3, #4
 8010278:	4413      	add	r3, r2
 801027a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	b2da      	uxtb	r2, r3
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	011b      	lsls	r3, r3, #4
 801028e:	4413      	add	r3, r2
 8010290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	0a1a      	lsrs	r2, r3, #8
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	3301      	adds	r3, #1
 801029c:	b2d2      	uxtb	r2, r2
 801029e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	011b      	lsls	r3, r3, #4
 80102a8:	4413      	add	r3, r2
 80102aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	0c1a      	lsrs	r2, r3, #16
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	3302      	adds	r3, #2
 80102b6:	b2d2      	uxtb	r2, r2
 80102b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	011b      	lsls	r3, r3, #4
 80102c2:	4413      	add	r3, r2
 80102c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	0e1a      	lsrs	r2, r3, #24
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	3303      	adds	r3, #3
 80102d0:	b2d2      	uxtb	r2, r2
 80102d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	011b      	lsls	r3, r3, #4
 80102dc:	4413      	add	r3, r2
 80102de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	3304      	adds	r3, #4
 80102e8:	b2d2      	uxtb	r2, r2
 80102ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	4413      	add	r3, r2
 80102f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	0a1a      	lsrs	r2, r3, #8
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	3305      	adds	r3, #5
 8010302:	b2d2      	uxtb	r2, r2
 8010304:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	011b      	lsls	r3, r3, #4
 801030e:	4413      	add	r3, r2
 8010310:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	0c1a      	lsrs	r2, r3, #16
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	3306      	adds	r3, #6
 801031c:	b2d2      	uxtb	r2, r2
 801031e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	011b      	lsls	r3, r3, #4
 8010328:	4413      	add	r3, r2
 801032a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	0e1a      	lsrs	r2, r3, #24
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	3307      	adds	r3, #7
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d108      	bne.n	8010352 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	68da      	ldr	r2, [r3, #12]
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f042 0220 	orr.w	r2, r2, #32
 801034e:	60da      	str	r2, [r3, #12]
 8010350:	e007      	b.n	8010362 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	691a      	ldr	r2, [r3, #16]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f042 0220 	orr.w	r2, r2, #32
 8010360:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	e006      	b.n	8010374 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010372:	2301      	movs	r3, #1
  }
}
 8010374:	4618      	mov	r0, r3
 8010376:	371c      	adds	r7, #28
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8010380:	b480      	push	{r7}
 8010382:	b085      	sub	sp, #20
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010390:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8010392:	7bfb      	ldrb	r3, [r7, #15]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d002      	beq.n	801039e <HAL_CAN_ActivateNotification+0x1e>
 8010398:	7bfb      	ldrb	r3, [r7, #15]
 801039a:	2b02      	cmp	r3, #2
 801039c:	d109      	bne.n	80103b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6959      	ldr	r1, [r3, #20]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	430a      	orrs	r2, r1
 80103ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80103ae:	2300      	movs	r3, #0
 80103b0:	e006      	b.n	80103c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80103be:	2301      	movs	r3, #1
  }
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08a      	sub	sp, #40	; 0x28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80103d4:	2300      	movs	r3, #0
 80103d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	695b      	ldr	r3, [r3, #20]
 80103de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	699b      	ldr	r3, [r3, #24]
 8010406:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8010408:	6a3b      	ldr	r3, [r7, #32]
 801040a:	f003 0301 	and.w	r3, r3, #1
 801040e:	2b00      	cmp	r3, #0
 8010410:	d07c      	beq.n	801050c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	2b00      	cmp	r3, #0
 801041a:	d023      	beq.n	8010464 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2201      	movs	r2, #1
 8010422:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	f003 0302 	and.w	r3, r3, #2
 801042a:	2b00      	cmp	r3, #0
 801042c:	d003      	beq.n	8010436 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 f983 	bl	801073a <HAL_CAN_TxMailbox0CompleteCallback>
 8010434:	e016      	b.n	8010464 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	f003 0304 	and.w	r3, r3, #4
 801043c:	2b00      	cmp	r3, #0
 801043e:	d004      	beq.n	801044a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010446:	627b      	str	r3, [r7, #36]	; 0x24
 8010448:	e00c      	b.n	8010464 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	f003 0308 	and.w	r3, r3, #8
 8010450:	2b00      	cmp	r3, #0
 8010452:	d004      	beq.n	801045e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
 801045c:	e002      	b.n	8010464 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 f989 	bl	8010776 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801046a:	2b00      	cmp	r3, #0
 801046c:	d024      	beq.n	80104b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010476:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801047e:	2b00      	cmp	r3, #0
 8010480:	d003      	beq.n	801048a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f963 	bl	801074e <HAL_CAN_TxMailbox1CompleteCallback>
 8010488:	e016      	b.n	80104b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010490:	2b00      	cmp	r3, #0
 8010492:	d004      	beq.n	801049e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801049a:	627b      	str	r3, [r7, #36]	; 0x24
 801049c:	e00c      	b.n	80104b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d004      	beq.n	80104b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80104a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104ae:	627b      	str	r3, [r7, #36]	; 0x24
 80104b0:	e002      	b.n	80104b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f969 	bl	801078a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d024      	beq.n	801050c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80104ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d003      	beq.n	80104de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f943 	bl	8010762 <HAL_CAN_TxMailbox2CompleteCallback>
 80104dc:	e016      	b.n	801050c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d004      	beq.n	80104f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ee:	627b      	str	r3, [r7, #36]	; 0x24
 80104f0:	e00c      	b.n	801050c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010502:	627b      	str	r3, [r7, #36]	; 0x24
 8010504:	e002      	b.n	801050c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f949 	bl	801079e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	f003 0308 	and.w	r3, r3, #8
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00c      	beq.n	8010530 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f003 0310 	and.w	r3, r3, #16
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2210      	movs	r2, #16
 801052e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8010530:	6a3b      	ldr	r3, [r7, #32]
 8010532:	f003 0304 	and.w	r3, r3, #4
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00b      	beq.n	8010552 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	f003 0308 	and.w	r3, r3, #8
 8010540:	2b00      	cmp	r3, #0
 8010542:	d006      	beq.n	8010552 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2208      	movs	r2, #8
 801054a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f930 	bl	80107b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	f003 0302 	and.w	r3, r3, #2
 8010558:	2b00      	cmp	r3, #0
 801055a:	d009      	beq.n	8010570 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	f003 0303 	and.w	r3, r3, #3
 8010566:	2b00      	cmp	r3, #0
 8010568:	d002      	beq.n	8010570 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7fa fd08 	bl	800af80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8010570:	6a3b      	ldr	r3, [r7, #32]
 8010572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00c      	beq.n	8010594 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	f003 0310 	and.w	r3, r3, #16
 8010580:	2b00      	cmp	r3, #0
 8010582:	d007      	beq.n	8010594 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801058a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2210      	movs	r2, #16
 8010592:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	f003 0320 	and.w	r3, r3, #32
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00b      	beq.n	80105b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f003 0308 	and.w	r3, r3, #8
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d006      	beq.n	80105b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2208      	movs	r2, #8
 80105ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f908 	bl	80107c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80105b6:	6a3b      	ldr	r3, [r7, #32]
 80105b8:	f003 0310 	and.w	r3, r3, #16
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d009      	beq.n	80105d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	f003 0303 	and.w	r3, r3, #3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d002      	beq.n	80105d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7fa fe66 	bl	800b2a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00b      	beq.n	80105f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	f003 0310 	and.w	r3, r3, #16
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d006      	beq.n	80105f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2210      	movs	r2, #16
 80105ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f8f2 	bl	80107da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	f003 0308 	and.w	r3, r3, #8
 8010606:	2b00      	cmp	r3, #0
 8010608:	d006      	beq.n	8010618 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2208      	movs	r2, #8
 8010610:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f8eb 	bl	80107ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801061e:	2b00      	cmp	r3, #0
 8010620:	d07b      	beq.n	801071a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d072      	beq.n	8010712 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010632:	2b00      	cmp	r3, #0
 8010634:	d008      	beq.n	8010648 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	f043 0301 	orr.w	r3, r3, #1
 8010646:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801064e:	2b00      	cmp	r3, #0
 8010650:	d008      	beq.n	8010664 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8010658:	2b00      	cmp	r3, #0
 801065a:	d003      	beq.n	8010664 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 801065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065e:	f043 0302 	orr.w	r3, r3, #2
 8010662:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801066a:	2b00      	cmp	r3, #0
 801066c:	d008      	beq.n	8010680 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8010674:	2b00      	cmp	r3, #0
 8010676:	d003      	beq.n	8010680 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8010678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067a:	f043 0304 	orr.w	r3, r3, #4
 801067e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010686:	2b00      	cmp	r3, #0
 8010688:	d043      	beq.n	8010712 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010690:	2b00      	cmp	r3, #0
 8010692:	d03e      	beq.n	8010712 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801069a:	2b60      	cmp	r3, #96	; 0x60
 801069c:	d02b      	beq.n	80106f6 <HAL_CAN_IRQHandler+0x32a>
 801069e:	2b60      	cmp	r3, #96	; 0x60
 80106a0:	d82e      	bhi.n	8010700 <HAL_CAN_IRQHandler+0x334>
 80106a2:	2b50      	cmp	r3, #80	; 0x50
 80106a4:	d022      	beq.n	80106ec <HAL_CAN_IRQHandler+0x320>
 80106a6:	2b50      	cmp	r3, #80	; 0x50
 80106a8:	d82a      	bhi.n	8010700 <HAL_CAN_IRQHandler+0x334>
 80106aa:	2b40      	cmp	r3, #64	; 0x40
 80106ac:	d019      	beq.n	80106e2 <HAL_CAN_IRQHandler+0x316>
 80106ae:	2b40      	cmp	r3, #64	; 0x40
 80106b0:	d826      	bhi.n	8010700 <HAL_CAN_IRQHandler+0x334>
 80106b2:	2b30      	cmp	r3, #48	; 0x30
 80106b4:	d010      	beq.n	80106d8 <HAL_CAN_IRQHandler+0x30c>
 80106b6:	2b30      	cmp	r3, #48	; 0x30
 80106b8:	d822      	bhi.n	8010700 <HAL_CAN_IRQHandler+0x334>
 80106ba:	2b10      	cmp	r3, #16
 80106bc:	d002      	beq.n	80106c4 <HAL_CAN_IRQHandler+0x2f8>
 80106be:	2b20      	cmp	r3, #32
 80106c0:	d005      	beq.n	80106ce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80106c2:	e01d      	b.n	8010700 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	f043 0308 	orr.w	r3, r3, #8
 80106ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106cc:	e019      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	f043 0310 	orr.w	r3, r3, #16
 80106d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106d6:	e014      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	f043 0320 	orr.w	r3, r3, #32
 80106de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106e0:	e00f      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106ea:	e00a      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106f4:	e005      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80106f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80106fe:	e000      	b.n	8010702 <HAL_CAN_IRQHandler+0x336>
            break;
 8010700:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	699a      	ldr	r2, [r3, #24]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010710:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2204      	movs	r2, #4
 8010718:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	2b00      	cmp	r3, #0
 801071e:	d008      	beq.n	8010732 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010726:	431a      	orrs	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f000 f868 	bl	8010802 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8010732:	bf00      	nop
 8010734:	3728      	adds	r7, #40	; 0x28
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801073a:	b480      	push	{r7}
 801073c:	b083      	sub	sp, #12
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8010742:	bf00      	nop
 8010744:	370c      	adds	r7, #12
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr

0801074e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801074e:	b480      	push	{r7}
 8010750:	b083      	sub	sp, #12
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8010756:	bf00      	nop
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8010762:	b480      	push	{r7}
 8010764:	b083      	sub	sp, #12
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801076a:	bf00      	nop
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr

08010776 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010776:	b480      	push	{r7}
 8010778:	b083      	sub	sp, #12
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801077e:	bf00      	nop
 8010780:	370c      	adds	r7, #12
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801078a:	b480      	push	{r7}
 801078c:	b083      	sub	sp, #12
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8010792:	bf00      	nop
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr

0801079e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801079e:	b480      	push	{r7}
 80107a0:	b083      	sub	sp, #12
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80107ba:	bf00      	nop
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b083      	sub	sp, #12
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80107ce:	bf00      	nop
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80107da:	b480      	push	{r7}
 80107dc:	b083      	sub	sp, #12
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80107e2:	bf00      	nop
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80107ee:	b480      	push	{r7}
 80107f0:	b083      	sub	sp, #12
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80107f6:	bf00      	nop
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8010802:	b480      	push	{r7}
 8010804:	b083      	sub	sp, #12
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801080a:	bf00      	nop
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
	...

08010818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f003 0307 	and.w	r3, r3, #7
 8010826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010828:	4b0c      	ldr	r3, [pc, #48]	; (801085c <__NVIC_SetPriorityGrouping+0x44>)
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801082e:	68ba      	ldr	r2, [r7, #8]
 8010830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010834:	4013      	ands	r3, r2
 8010836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801084a:	4a04      	ldr	r2, [pc, #16]	; (801085c <__NVIC_SetPriorityGrouping+0x44>)
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	60d3      	str	r3, [r2, #12]
}
 8010850:	bf00      	nop
 8010852:	3714      	adds	r7, #20
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	e000ed00 	.word	0xe000ed00

08010860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010860:	b480      	push	{r7}
 8010862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010864:	4b04      	ldr	r3, [pc, #16]	; (8010878 <__NVIC_GetPriorityGrouping+0x18>)
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	0a1b      	lsrs	r3, r3, #8
 801086a:	f003 0307 	and.w	r3, r3, #7
}
 801086e:	4618      	mov	r0, r3
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	e000ed00 	.word	0xe000ed00

0801087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
 8010882:	4603      	mov	r3, r0
 8010884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801088a:	2b00      	cmp	r3, #0
 801088c:	db0b      	blt.n	80108a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	f003 021f 	and.w	r2, r3, #31
 8010894:	4907      	ldr	r1, [pc, #28]	; (80108b4 <__NVIC_EnableIRQ+0x38>)
 8010896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801089a:	095b      	lsrs	r3, r3, #5
 801089c:	2001      	movs	r0, #1
 801089e:	fa00 f202 	lsl.w	r2, r0, r2
 80108a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80108a6:	bf00      	nop
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	e000e100 	.word	0xe000e100

080108b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	4603      	mov	r3, r0
 80108c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80108c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	db12      	blt.n	80108f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	f003 021f 	and.w	r2, r3, #31
 80108d0:	490a      	ldr	r1, [pc, #40]	; (80108fc <__NVIC_DisableIRQ+0x44>)
 80108d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108d6:	095b      	lsrs	r3, r3, #5
 80108d8:	2001      	movs	r0, #1
 80108da:	fa00 f202 	lsl.w	r2, r0, r2
 80108de:	3320      	adds	r3, #32
 80108e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80108e4:	f3bf 8f4f 	dsb	sy
}
 80108e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80108ea:	f3bf 8f6f 	isb	sy
}
 80108ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80108f0:	bf00      	nop
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	e000e100 	.word	0xe000e100

08010900 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801090e:	2b00      	cmp	r3, #0
 8010910:	db0c      	blt.n	801092c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	f003 021f 	and.w	r2, r3, #31
 8010918:	4907      	ldr	r1, [pc, #28]	; (8010938 <__NVIC_ClearPendingIRQ+0x38>)
 801091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801091e:	095b      	lsrs	r3, r3, #5
 8010920:	2001      	movs	r0, #1
 8010922:	fa00 f202 	lsl.w	r2, r0, r2
 8010926:	3360      	adds	r3, #96	; 0x60
 8010928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr
 8010938:	e000e100 	.word	0xe000e100

0801093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	6039      	str	r1, [r7, #0]
 8010946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801094c:	2b00      	cmp	r3, #0
 801094e:	db0a      	blt.n	8010966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	b2da      	uxtb	r2, r3
 8010954:	490c      	ldr	r1, [pc, #48]	; (8010988 <__NVIC_SetPriority+0x4c>)
 8010956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801095a:	0112      	lsls	r2, r2, #4
 801095c:	b2d2      	uxtb	r2, r2
 801095e:	440b      	add	r3, r1
 8010960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010964:	e00a      	b.n	801097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	b2da      	uxtb	r2, r3
 801096a:	4908      	ldr	r1, [pc, #32]	; (801098c <__NVIC_SetPriority+0x50>)
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	f003 030f 	and.w	r3, r3, #15
 8010972:	3b04      	subs	r3, #4
 8010974:	0112      	lsls	r2, r2, #4
 8010976:	b2d2      	uxtb	r2, r2
 8010978:	440b      	add	r3, r1
 801097a:	761a      	strb	r2, [r3, #24]
}
 801097c:	bf00      	nop
 801097e:	370c      	adds	r7, #12
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	e000e100 	.word	0xe000e100
 801098c:	e000ed00 	.word	0xe000ed00

08010990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010990:	b480      	push	{r7}
 8010992:	b089      	sub	sp, #36	; 0x24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f003 0307 	and.w	r3, r3, #7
 80109a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	f1c3 0307 	rsb	r3, r3, #7
 80109aa:	2b04      	cmp	r3, #4
 80109ac:	bf28      	it	cs
 80109ae:	2304      	movcs	r3, #4
 80109b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	3304      	adds	r3, #4
 80109b6:	2b06      	cmp	r3, #6
 80109b8:	d902      	bls.n	80109c0 <NVIC_EncodePriority+0x30>
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	3b03      	subs	r3, #3
 80109be:	e000      	b.n	80109c2 <NVIC_EncodePriority+0x32>
 80109c0:	2300      	movs	r3, #0
 80109c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80109c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	fa02 f303 	lsl.w	r3, r2, r3
 80109ce:	43da      	mvns	r2, r3
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	401a      	ands	r2, r3
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80109d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	fa01 f303 	lsl.w	r3, r1, r3
 80109e2:	43d9      	mvns	r1, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80109e8:	4313      	orrs	r3, r2
         );
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3724      	adds	r7, #36	; 0x24
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b082      	sub	sp, #8
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7ff ff0a 	bl	8010818 <__NVIC_SetPriorityGrouping>
}
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010a1e:	f7ff ff1f 	bl	8010860 <__NVIC_GetPriorityGrouping>
 8010a22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	68b9      	ldr	r1, [r7, #8]
 8010a28:	6978      	ldr	r0, [r7, #20]
 8010a2a:	f7ff ffb1 	bl	8010990 <NVIC_EncodePriority>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a34:	4611      	mov	r1, r2
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7ff ff80 	bl	801093c <__NVIC_SetPriority>
}
 8010a3c:	bf00      	nop
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff ff12 	bl	801087c <__NVIC_EnableIRQ>
}
 8010a58:	bf00      	nop
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7ff ff22 	bl	80108b8 <__NVIC_DisableIRQ>
}
 8010a74:	bf00      	nop
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8010a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff ff38 	bl	8010900 <__NVIC_ClearPendingIRQ>
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b086      	sub	sp, #24
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010aa4:	f7ff f81e 	bl	800fae4 <HAL_GetTick>
 8010aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d101      	bne.n	8010ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e099      	b.n	8010be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2202      	movs	r2, #2
 8010ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f022 0201 	bic.w	r2, r2, #1
 8010ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010ad4:	e00f      	b.n	8010af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010ad6:	f7ff f805 	bl	800fae4 <HAL_GetTick>
 8010ada:	4602      	mov	r2, r0
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	2b05      	cmp	r3, #5
 8010ae2:	d908      	bls.n	8010af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2220      	movs	r2, #32
 8010ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2203      	movs	r2, #3
 8010aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010af2:	2303      	movs	r3, #3
 8010af4:	e078      	b.n	8010be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0301 	and.w	r3, r3, #1
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1e8      	bne.n	8010ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010b0c:	697a      	ldr	r2, [r7, #20]
 8010b0e:	4b38      	ldr	r3, [pc, #224]	; (8010bf0 <HAL_DMA_Init+0x158>)
 8010b10:	4013      	ands	r3, r2
 8010b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6a1b      	ldr	r3, [r3, #32]
 8010b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010b42:	697a      	ldr	r2, [r7, #20]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	d107      	bne.n	8010b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	697a      	ldr	r2, [r7, #20]
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	695b      	ldr	r3, [r3, #20]
 8010b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	f023 0307 	bic.w	r3, r3, #7
 8010b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7c:	697a      	ldr	r2, [r7, #20]
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b86:	2b04      	cmp	r3, #4
 8010b88:	d117      	bne.n	8010bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b8e:	697a      	ldr	r2, [r7, #20]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00e      	beq.n	8010bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f000 fb09 	bl	80111b4 <DMA_CheckFifoParam>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d008      	beq.n	8010bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2240      	movs	r2, #64	; 0x40
 8010bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e016      	b.n	8010be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fac0 	bl	8011148 <DMA_CalcBaseAndBitshift>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bd0:	223f      	movs	r2, #63	; 0x3f
 8010bd2:	409a      	lsls	r2, r3
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2201      	movs	r2, #1
 8010be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	f010803f 	.word	0xf010803f

08010bf4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e050      	b.n	8010ca8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d101      	bne.n	8010c16 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8010c12:	2302      	movs	r3, #2
 8010c14:	e048      	b.n	8010ca8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f022 0201 	bic.w	r2, r2, #1
 8010c24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2200      	movs	r2, #0
 8010c34:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2200      	movs	r2, #0
 8010c44:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2221      	movs	r2, #33	; 0x21
 8010c54:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fa76 	bl	8011148 <DMA_CalcBaseAndBitshift>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c88:	223f      	movs	r2, #63	; 0x3f
 8010c8a:	409a      	lsls	r2, r3
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8010ca6:	2300      	movs	r3, #0
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	607a      	str	r2, [r7, #4]
 8010cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d101      	bne.n	8010cd6 <HAL_DMA_Start_IT+0x26>
 8010cd2:	2302      	movs	r3, #2
 8010cd4:	e040      	b.n	8010d58 <HAL_DMA_Start_IT+0xa8>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2201      	movs	r2, #1
 8010cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d12f      	bne.n	8010d4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2202      	movs	r2, #2
 8010cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	68b9      	ldr	r1, [r7, #8]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f000 f9f4 	bl	80110ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d08:	223f      	movs	r2, #63	; 0x3f
 8010d0a:	409a      	lsls	r2, r3
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f042 0216 	orr.w	r2, r2, #22
 8010d1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d007      	beq.n	8010d38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	681a      	ldr	r2, [r3, #0]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f042 0208 	orr.w	r2, r2, #8
 8010d36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f042 0201 	orr.w	r2, r2, #1
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	e005      	b.n	8010d56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8010d52:	2302      	movs	r3, #2
 8010d54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3718      	adds	r7, #24
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b02      	cmp	r3, #2
 8010d72:	d004      	beq.n	8010d7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2280      	movs	r2, #128	; 0x80
 8010d78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e00c      	b.n	8010d98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2205      	movs	r2, #5
 8010d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f022 0201 	bic.w	r2, r2, #1
 8010d94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010d96:	2300      	movs	r3, #0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010dac:	2300      	movs	r3, #0
 8010dae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010db0:	4b92      	ldr	r3, [pc, #584]	; (8010ffc <HAL_DMA_IRQHandler+0x258>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a92      	ldr	r2, [pc, #584]	; (8011000 <HAL_DMA_IRQHandler+0x25c>)
 8010db6:	fba2 2303 	umull	r2, r3, r2, r3
 8010dba:	0a9b      	lsrs	r3, r3, #10
 8010dbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dce:	2208      	movs	r2, #8
 8010dd0:	409a      	lsls	r2, r3
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d01a      	beq.n	8010e10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f003 0304 	and.w	r3, r3, #4
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d013      	beq.n	8010e10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f022 0204 	bic.w	r2, r2, #4
 8010df6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dfc:	2208      	movs	r2, #8
 8010dfe:	409a      	lsls	r2, r3
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e08:	f043 0201 	orr.w	r2, r3, #1
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e14:	2201      	movs	r2, #1
 8010e16:	409a      	lsls	r2, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d012      	beq.n	8010e46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	695b      	ldr	r3, [r3, #20]
 8010e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00b      	beq.n	8010e46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e32:	2201      	movs	r2, #1
 8010e34:	409a      	lsls	r2, r3
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3e:	f043 0202 	orr.w	r2, r3, #2
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e4a:	2204      	movs	r2, #4
 8010e4c:	409a      	lsls	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	4013      	ands	r3, r2
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d012      	beq.n	8010e7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f003 0302 	and.w	r3, r3, #2
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00b      	beq.n	8010e7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e68:	2204      	movs	r2, #4
 8010e6a:	409a      	lsls	r2, r3
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e74:	f043 0204 	orr.w	r2, r3, #4
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e80:	2210      	movs	r2, #16
 8010e82:	409a      	lsls	r2, r3
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	4013      	ands	r3, r2
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d043      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f003 0308 	and.w	r3, r3, #8
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d03c      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e9e:	2210      	movs	r2, #16
 8010ea0:	409a      	lsls	r2, r3
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d018      	beq.n	8010ee6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d108      	bne.n	8010ed4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d024      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	4798      	blx	r3
 8010ed2:	e01f      	b.n	8010f14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d01b      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	4798      	blx	r3
 8010ee4:	e016      	b.n	8010f14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d107      	bne.n	8010f04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f022 0208 	bic.w	r2, r2, #8
 8010f02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f18:	2220      	movs	r2, #32
 8010f1a:	409a      	lsls	r2, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	4013      	ands	r3, r2
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 808e 	beq.w	8011042 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f003 0310 	and.w	r3, r3, #16
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 8086 	beq.w	8011042 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f3a:	2220      	movs	r2, #32
 8010f3c:	409a      	lsls	r2, r3
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	2b05      	cmp	r3, #5
 8010f4c:	d136      	bne.n	8010fbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f022 0216 	bic.w	r2, r2, #22
 8010f5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	695a      	ldr	r2, [r3, #20]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d103      	bne.n	8010f7e <HAL_DMA_IRQHandler+0x1da>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f022 0208 	bic.w	r2, r2, #8
 8010f8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f92:	223f      	movs	r2, #63	; 0x3f
 8010f94:	409a      	lsls	r2, r3
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d07d      	beq.n	80110ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	4798      	blx	r3
        }
        return;
 8010fba:	e078      	b.n	80110ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d01c      	beq.n	8011004 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d108      	bne.n	8010fea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d030      	beq.n	8011042 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	4798      	blx	r3
 8010fe8:	e02b      	b.n	8011042 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d027      	beq.n	8011042 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	4798      	blx	r3
 8010ffa:	e022      	b.n	8011042 <HAL_DMA_IRQHandler+0x29e>
 8010ffc:	20000000 	.word	0x20000000
 8011000:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10f      	bne.n	8011032 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f022 0210 	bic.w	r2, r2, #16
 8011020:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2201      	movs	r2, #1
 801102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011046:	2b00      	cmp	r3, #0
 8011048:	d032      	beq.n	80110b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801104e:	f003 0301 	and.w	r3, r3, #1
 8011052:	2b00      	cmp	r3, #0
 8011054:	d022      	beq.n	801109c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2205      	movs	r2, #5
 801105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f022 0201 	bic.w	r2, r2, #1
 801106c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	3301      	adds	r3, #1
 8011072:	60bb      	str	r3, [r7, #8]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	429a      	cmp	r2, r3
 8011078:	d307      	bcc.n	801108a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1f2      	bne.n	801106e <HAL_DMA_IRQHandler+0x2ca>
 8011088:	e000      	b.n	801108c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801108a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2201      	movs	r2, #1
 8011098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d005      	beq.n	80110b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	4798      	blx	r3
 80110ac:	e000      	b.n	80110b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80110ae:	bf00      	nop
    }
  }
}
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop

080110b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80110c6:	b2db      	uxtb	r3, r3
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	607a      	str	r2, [r7, #4]
 80110f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	683a      	ldr	r2, [r7, #0]
 8011110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	689b      	ldr	r3, [r3, #8]
 8011116:	2b40      	cmp	r3, #64	; 0x40
 8011118:	d108      	bne.n	801112c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68ba      	ldr	r2, [r7, #8]
 8011128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801112a:	e007      	b.n	801113c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	68ba      	ldr	r2, [r7, #8]
 8011132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	60da      	str	r2, [r3, #12]
}
 801113c:	bf00      	nop
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8011148:	b480      	push	{r7}
 801114a:	b085      	sub	sp, #20
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	b2db      	uxtb	r3, r3
 8011156:	3b10      	subs	r3, #16
 8011158:	4a14      	ldr	r2, [pc, #80]	; (80111ac <DMA_CalcBaseAndBitshift+0x64>)
 801115a:	fba2 2303 	umull	r2, r3, r2, r3
 801115e:	091b      	lsrs	r3, r3, #4
 8011160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8011162:	4a13      	ldr	r2, [pc, #76]	; (80111b0 <DMA_CalcBaseAndBitshift+0x68>)
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	4413      	add	r3, r2
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	461a      	mov	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b03      	cmp	r3, #3
 8011174:	d909      	bls.n	801118a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801117e:	f023 0303 	bic.w	r3, r3, #3
 8011182:	1d1a      	adds	r2, r3, #4
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	659a      	str	r2, [r3, #88]	; 0x58
 8011188:	e007      	b.n	801119a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8011192:	f023 0303 	bic.w	r3, r3, #3
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	aaaaaaab 	.word	0xaaaaaaab
 80111b0:	0801f6cc 	.word	0x0801f6cc

080111b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80111bc:	2300      	movs	r3, #0
 80111be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d11f      	bne.n	801120e <DMA_CheckFifoParam+0x5a>
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	2b03      	cmp	r3, #3
 80111d2:	d856      	bhi.n	8011282 <DMA_CheckFifoParam+0xce>
 80111d4:	a201      	add	r2, pc, #4	; (adr r2, 80111dc <DMA_CheckFifoParam+0x28>)
 80111d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111da:	bf00      	nop
 80111dc:	080111ed 	.word	0x080111ed
 80111e0:	080111ff 	.word	0x080111ff
 80111e4:	080111ed 	.word	0x080111ed
 80111e8:	08011283 	.word	0x08011283
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d046      	beq.n	8011286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80111f8:	2301      	movs	r3, #1
 80111fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80111fc:	e043      	b.n	8011286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011206:	d140      	bne.n	801128a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8011208:	2301      	movs	r3, #1
 801120a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801120c:	e03d      	b.n	801128a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	699b      	ldr	r3, [r3, #24]
 8011212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011216:	d121      	bne.n	801125c <DMA_CheckFifoParam+0xa8>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	2b03      	cmp	r3, #3
 801121c:	d837      	bhi.n	801128e <DMA_CheckFifoParam+0xda>
 801121e:	a201      	add	r2, pc, #4	; (adr r2, 8011224 <DMA_CheckFifoParam+0x70>)
 8011220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011224:	08011235 	.word	0x08011235
 8011228:	0801123b 	.word	0x0801123b
 801122c:	08011235 	.word	0x08011235
 8011230:	0801124d 	.word	0x0801124d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8011234:	2301      	movs	r3, #1
 8011236:	73fb      	strb	r3, [r7, #15]
      break;
 8011238:	e030      	b.n	801129c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801123e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d025      	beq.n	8011292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8011246:	2301      	movs	r3, #1
 8011248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801124a:	e022      	b.n	8011292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011250:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011254:	d11f      	bne.n	8011296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801125a:	e01c      	b.n	8011296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d903      	bls.n	801126a <DMA_CheckFifoParam+0xb6>
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	2b03      	cmp	r3, #3
 8011266:	d003      	beq.n	8011270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8011268:	e018      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	73fb      	strb	r3, [r7, #15]
      break;
 801126e:	e015      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00e      	beq.n	801129a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801127c:	2301      	movs	r3, #1
 801127e:	73fb      	strb	r3, [r7, #15]
      break;
 8011280:	e00b      	b.n	801129a <DMA_CheckFifoParam+0xe6>
      break;
 8011282:	bf00      	nop
 8011284:	e00a      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;
 8011286:	bf00      	nop
 8011288:	e008      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;
 801128a:	bf00      	nop
 801128c:	e006      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;
 801128e:	bf00      	nop
 8011290:	e004      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;
 8011292:	bf00      	nop
 8011294:	e002      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;   
 8011296:	bf00      	nop
 8011298:	e000      	b.n	801129c <DMA_CheckFifoParam+0xe8>
      break;
 801129a:	bf00      	nop
    }
  } 
  
  return status; 
 801129c:	7bfb      	ldrb	r3, [r7, #15]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop

080112ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b089      	sub	sp, #36	; 0x24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80112b6:	2300      	movs	r3, #0
 80112b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80112ba:	2300      	movs	r3, #0
 80112bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80112be:	2300      	movs	r3, #0
 80112c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80112c2:	2300      	movs	r3, #0
 80112c4:	61fb      	str	r3, [r7, #28]
 80112c6:	e16b      	b.n	80115a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80112c8:	2201      	movs	r2, #1
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	fa02 f303 	lsl.w	r3, r2, r3
 80112d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	4013      	ands	r3, r2
 80112da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80112dc:	693a      	ldr	r2, [r7, #16]
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	f040 815a 	bne.w	801159a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d00b      	beq.n	8011306 <HAL_GPIO_Init+0x5a>
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d007      	beq.n	8011306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80112fa:	2b11      	cmp	r3, #17
 80112fc:	d003      	beq.n	8011306 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	2b12      	cmp	r3, #18
 8011304:	d130      	bne.n	8011368 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	689b      	ldr	r3, [r3, #8]
 801130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	005b      	lsls	r3, r3, #1
 8011310:	2203      	movs	r2, #3
 8011312:	fa02 f303 	lsl.w	r3, r2, r3
 8011316:	43db      	mvns	r3, r3
 8011318:	69ba      	ldr	r2, [r7, #24]
 801131a:	4013      	ands	r3, r2
 801131c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	68da      	ldr	r2, [r3, #12]
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	005b      	lsls	r3, r3, #1
 8011326:	fa02 f303 	lsl.w	r3, r2, r3
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	4313      	orrs	r3, r2
 801132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801133c:	2201      	movs	r2, #1
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	fa02 f303 	lsl.w	r3, r2, r3
 8011344:	43db      	mvns	r3, r3
 8011346:	69ba      	ldr	r2, [r7, #24]
 8011348:	4013      	ands	r3, r2
 801134a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	091b      	lsrs	r3, r3, #4
 8011352:	f003 0201 	and.w	r2, r3, #1
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	fa02 f303 	lsl.w	r3, r2, r3
 801135c:	69ba      	ldr	r2, [r7, #24]
 801135e:	4313      	orrs	r3, r2
 8011360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	69ba      	ldr	r2, [r7, #24]
 8011366:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	005b      	lsls	r3, r3, #1
 8011372:	2203      	movs	r2, #3
 8011374:	fa02 f303 	lsl.w	r3, r2, r3
 8011378:	43db      	mvns	r3, r3
 801137a:	69ba      	ldr	r2, [r7, #24]
 801137c:	4013      	ands	r3, r2
 801137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	689a      	ldr	r2, [r3, #8]
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	fa02 f303 	lsl.w	r3, r2, r3
 801138c:	69ba      	ldr	r2, [r7, #24]
 801138e:	4313      	orrs	r3, r2
 8011390:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	69ba      	ldr	r2, [r7, #24]
 8011396:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	2b02      	cmp	r3, #2
 801139e:	d003      	beq.n	80113a8 <HAL_GPIO_Init+0xfc>
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	2b12      	cmp	r3, #18
 80113a6:	d123      	bne.n	80113f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	08da      	lsrs	r2, r3, #3
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	3208      	adds	r2, #8
 80113b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	f003 0307 	and.w	r3, r3, #7
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	220f      	movs	r2, #15
 80113c0:	fa02 f303 	lsl.w	r3, r2, r3
 80113c4:	43db      	mvns	r3, r3
 80113c6:	69ba      	ldr	r2, [r7, #24]
 80113c8:	4013      	ands	r3, r2
 80113ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	691a      	ldr	r2, [r3, #16]
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	f003 0307 	and.w	r3, r3, #7
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	fa02 f303 	lsl.w	r3, r2, r3
 80113dc:	69ba      	ldr	r2, [r7, #24]
 80113de:	4313      	orrs	r3, r2
 80113e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	08da      	lsrs	r2, r3, #3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3208      	adds	r2, #8
 80113ea:	69b9      	ldr	r1, [r7, #24]
 80113ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	2203      	movs	r2, #3
 80113fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011400:	43db      	mvns	r3, r3
 8011402:	69ba      	ldr	r2, [r7, #24]
 8011404:	4013      	ands	r3, r2
 8011406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	f003 0203 	and.w	r2, r3, #3
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	005b      	lsls	r3, r3, #1
 8011414:	fa02 f303 	lsl.w	r3, r2, r3
 8011418:	69ba      	ldr	r2, [r7, #24]
 801141a:	4313      	orrs	r3, r2
 801141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	69ba      	ldr	r2, [r7, #24]
 8011422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 80b4 	beq.w	801159a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011432:	2300      	movs	r3, #0
 8011434:	60fb      	str	r3, [r7, #12]
 8011436:	4b60      	ldr	r3, [pc, #384]	; (80115b8 <HAL_GPIO_Init+0x30c>)
 8011438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801143a:	4a5f      	ldr	r2, [pc, #380]	; (80115b8 <HAL_GPIO_Init+0x30c>)
 801143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011440:	6453      	str	r3, [r2, #68]	; 0x44
 8011442:	4b5d      	ldr	r3, [pc, #372]	; (80115b8 <HAL_GPIO_Init+0x30c>)
 8011444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801144a:	60fb      	str	r3, [r7, #12]
 801144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801144e:	4a5b      	ldr	r2, [pc, #364]	; (80115bc <HAL_GPIO_Init+0x310>)
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	089b      	lsrs	r3, r3, #2
 8011454:	3302      	adds	r3, #2
 8011456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	f003 0303 	and.w	r3, r3, #3
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	220f      	movs	r2, #15
 8011466:	fa02 f303 	lsl.w	r3, r2, r3
 801146a:	43db      	mvns	r3, r3
 801146c:	69ba      	ldr	r2, [r7, #24]
 801146e:	4013      	ands	r3, r2
 8011470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	4a52      	ldr	r2, [pc, #328]	; (80115c0 <HAL_GPIO_Init+0x314>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d02b      	beq.n	80114d2 <HAL_GPIO_Init+0x226>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	4a51      	ldr	r2, [pc, #324]	; (80115c4 <HAL_GPIO_Init+0x318>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d025      	beq.n	80114ce <HAL_GPIO_Init+0x222>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4a50      	ldr	r2, [pc, #320]	; (80115c8 <HAL_GPIO_Init+0x31c>)
 8011486:	4293      	cmp	r3, r2
 8011488:	d01f      	beq.n	80114ca <HAL_GPIO_Init+0x21e>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4a4f      	ldr	r2, [pc, #316]	; (80115cc <HAL_GPIO_Init+0x320>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d019      	beq.n	80114c6 <HAL_GPIO_Init+0x21a>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4a4e      	ldr	r2, [pc, #312]	; (80115d0 <HAL_GPIO_Init+0x324>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d013      	beq.n	80114c2 <HAL_GPIO_Init+0x216>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4a4d      	ldr	r2, [pc, #308]	; (80115d4 <HAL_GPIO_Init+0x328>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d00d      	beq.n	80114be <HAL_GPIO_Init+0x212>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4a4c      	ldr	r2, [pc, #304]	; (80115d8 <HAL_GPIO_Init+0x32c>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d007      	beq.n	80114ba <HAL_GPIO_Init+0x20e>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4a4b      	ldr	r2, [pc, #300]	; (80115dc <HAL_GPIO_Init+0x330>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d101      	bne.n	80114b6 <HAL_GPIO_Init+0x20a>
 80114b2:	2307      	movs	r3, #7
 80114b4:	e00e      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114b6:	2308      	movs	r3, #8
 80114b8:	e00c      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114ba:	2306      	movs	r3, #6
 80114bc:	e00a      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114be:	2305      	movs	r3, #5
 80114c0:	e008      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114c2:	2304      	movs	r3, #4
 80114c4:	e006      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114c6:	2303      	movs	r3, #3
 80114c8:	e004      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114ca:	2302      	movs	r3, #2
 80114cc:	e002      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114ce:	2301      	movs	r3, #1
 80114d0:	e000      	b.n	80114d4 <HAL_GPIO_Init+0x228>
 80114d2:	2300      	movs	r3, #0
 80114d4:	69fa      	ldr	r2, [r7, #28]
 80114d6:	f002 0203 	and.w	r2, r2, #3
 80114da:	0092      	lsls	r2, r2, #2
 80114dc:	4093      	lsls	r3, r2
 80114de:	69ba      	ldr	r2, [r7, #24]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80114e4:	4935      	ldr	r1, [pc, #212]	; (80115bc <HAL_GPIO_Init+0x310>)
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	089b      	lsrs	r3, r3, #2
 80114ea:	3302      	adds	r3, #2
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80114f2:	4b3b      	ldr	r3, [pc, #236]	; (80115e0 <HAL_GPIO_Init+0x334>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	43db      	mvns	r3, r3
 80114fc:	69ba      	ldr	r2, [r7, #24]
 80114fe:	4013      	ands	r3, r2
 8011500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	4313      	orrs	r3, r2
 8011514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011516:	4a32      	ldr	r2, [pc, #200]	; (80115e0 <HAL_GPIO_Init+0x334>)
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801151c:	4b30      	ldr	r3, [pc, #192]	; (80115e0 <HAL_GPIO_Init+0x334>)
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	43db      	mvns	r3, r3
 8011526:	69ba      	ldr	r2, [r7, #24]
 8011528:	4013      	ands	r3, r2
 801152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011534:	2b00      	cmp	r3, #0
 8011536:	d003      	beq.n	8011540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011538:	69ba      	ldr	r2, [r7, #24]
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	4313      	orrs	r3, r2
 801153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011540:	4a27      	ldr	r2, [pc, #156]	; (80115e0 <HAL_GPIO_Init+0x334>)
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011546:	4b26      	ldr	r3, [pc, #152]	; (80115e0 <HAL_GPIO_Init+0x334>)
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	43db      	mvns	r3, r3
 8011550:	69ba      	ldr	r2, [r7, #24]
 8011552:	4013      	ands	r3, r2
 8011554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801155e:	2b00      	cmp	r3, #0
 8011560:	d003      	beq.n	801156a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011562:	69ba      	ldr	r2, [r7, #24]
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	4313      	orrs	r3, r2
 8011568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801156a:	4a1d      	ldr	r2, [pc, #116]	; (80115e0 <HAL_GPIO_Init+0x334>)
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011570:	4b1b      	ldr	r3, [pc, #108]	; (80115e0 <HAL_GPIO_Init+0x334>)
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	43db      	mvns	r3, r3
 801157a:	69ba      	ldr	r2, [r7, #24]
 801157c:	4013      	ands	r3, r2
 801157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011588:	2b00      	cmp	r3, #0
 801158a:	d003      	beq.n	8011594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	4313      	orrs	r3, r2
 8011592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011594:	4a12      	ldr	r2, [pc, #72]	; (80115e0 <HAL_GPIO_Init+0x334>)
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801159a:	69fb      	ldr	r3, [r7, #28]
 801159c:	3301      	adds	r3, #1
 801159e:	61fb      	str	r3, [r7, #28]
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	2b0f      	cmp	r3, #15
 80115a4:	f67f ae90 	bls.w	80112c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80115a8:	bf00      	nop
 80115aa:	bf00      	nop
 80115ac:	3724      	adds	r7, #36	; 0x24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	40023800 	.word	0x40023800
 80115bc:	40013800 	.word	0x40013800
 80115c0:	40020000 	.word	0x40020000
 80115c4:	40020400 	.word	0x40020400
 80115c8:	40020800 	.word	0x40020800
 80115cc:	40020c00 	.word	0x40020c00
 80115d0:	40021000 	.word	0x40021000
 80115d4:	40021400 	.word	0x40021400
 80115d8:	40021800 	.word	0x40021800
 80115dc:	40021c00 	.word	0x40021c00
 80115e0:	40013c00 	.word	0x40013c00

080115e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b087      	sub	sp, #28
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80115ee:	2300      	movs	r3, #0
 80115f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80115f2:	2300      	movs	r3, #0
 80115f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115fa:	2300      	movs	r3, #0
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	e0cd      	b.n	801179c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011600:	2201      	movs	r2, #1
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	fa02 f303 	lsl.w	r3, r2, r3
 8011608:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	4013      	ands	r3, r2
 8011610:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	429a      	cmp	r2, r3
 8011618:	f040 80bd 	bne.w	8011796 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801161c:	4a65      	ldr	r2, [pc, #404]	; (80117b4 <HAL_GPIO_DeInit+0x1d0>)
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	089b      	lsrs	r3, r3, #2
 8011622:	3302      	adds	r3, #2
 8011624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011628:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	f003 0303 	and.w	r3, r3, #3
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	220f      	movs	r2, #15
 8011634:	fa02 f303 	lsl.w	r3, r2, r3
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	4013      	ands	r3, r2
 801163c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4a5d      	ldr	r2, [pc, #372]	; (80117b8 <HAL_GPIO_DeInit+0x1d4>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d02b      	beq.n	801169e <HAL_GPIO_DeInit+0xba>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4a5c      	ldr	r2, [pc, #368]	; (80117bc <HAL_GPIO_DeInit+0x1d8>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d025      	beq.n	801169a <HAL_GPIO_DeInit+0xb6>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4a5b      	ldr	r2, [pc, #364]	; (80117c0 <HAL_GPIO_DeInit+0x1dc>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d01f      	beq.n	8011696 <HAL_GPIO_DeInit+0xb2>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4a5a      	ldr	r2, [pc, #360]	; (80117c4 <HAL_GPIO_DeInit+0x1e0>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d019      	beq.n	8011692 <HAL_GPIO_DeInit+0xae>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4a59      	ldr	r2, [pc, #356]	; (80117c8 <HAL_GPIO_DeInit+0x1e4>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d013      	beq.n	801168e <HAL_GPIO_DeInit+0xaa>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a58      	ldr	r2, [pc, #352]	; (80117cc <HAL_GPIO_DeInit+0x1e8>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d00d      	beq.n	801168a <HAL_GPIO_DeInit+0xa6>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a57      	ldr	r2, [pc, #348]	; (80117d0 <HAL_GPIO_DeInit+0x1ec>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d007      	beq.n	8011686 <HAL_GPIO_DeInit+0xa2>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a56      	ldr	r2, [pc, #344]	; (80117d4 <HAL_GPIO_DeInit+0x1f0>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d101      	bne.n	8011682 <HAL_GPIO_DeInit+0x9e>
 801167e:	2307      	movs	r3, #7
 8011680:	e00e      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 8011682:	2308      	movs	r3, #8
 8011684:	e00c      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 8011686:	2306      	movs	r3, #6
 8011688:	e00a      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 801168a:	2305      	movs	r3, #5
 801168c:	e008      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 801168e:	2304      	movs	r3, #4
 8011690:	e006      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 8011692:	2303      	movs	r3, #3
 8011694:	e004      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 8011696:	2302      	movs	r3, #2
 8011698:	e002      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 801169a:	2301      	movs	r3, #1
 801169c:	e000      	b.n	80116a0 <HAL_GPIO_DeInit+0xbc>
 801169e:	2300      	movs	r3, #0
 80116a0:	697a      	ldr	r2, [r7, #20]
 80116a2:	f002 0203 	and.w	r2, r2, #3
 80116a6:	0092      	lsls	r2, r2, #2
 80116a8:	4093      	lsls	r3, r2
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d132      	bne.n	8011716 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80116b0:	4b49      	ldr	r3, [pc, #292]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	43db      	mvns	r3, r3
 80116b8:	4947      	ldr	r1, [pc, #284]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116ba:	4013      	ands	r3, r2
 80116bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80116be:	4b46      	ldr	r3, [pc, #280]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	43db      	mvns	r3, r3
 80116c6:	4944      	ldr	r1, [pc, #272]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116c8:	4013      	ands	r3, r2
 80116ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80116cc:	4b42      	ldr	r3, [pc, #264]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116ce:	689a      	ldr	r2, [r3, #8]
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	43db      	mvns	r3, r3
 80116d4:	4940      	ldr	r1, [pc, #256]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116d6:	4013      	ands	r3, r2
 80116d8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80116da:	4b3f      	ldr	r3, [pc, #252]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116dc:	68da      	ldr	r2, [r3, #12]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	43db      	mvns	r3, r3
 80116e2:	493d      	ldr	r1, [pc, #244]	; (80117d8 <HAL_GPIO_DeInit+0x1f4>)
 80116e4:	4013      	ands	r3, r2
 80116e6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	f003 0303 	and.w	r3, r3, #3
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	220f      	movs	r2, #15
 80116f2:	fa02 f303 	lsl.w	r3, r2, r3
 80116f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80116f8:	4a2e      	ldr	r2, [pc, #184]	; (80117b4 <HAL_GPIO_DeInit+0x1d0>)
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	089b      	lsrs	r3, r3, #2
 80116fe:	3302      	adds	r3, #2
 8011700:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	43da      	mvns	r2, r3
 8011708:	482a      	ldr	r0, [pc, #168]	; (80117b4 <HAL_GPIO_DeInit+0x1d0>)
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	089b      	lsrs	r3, r3, #2
 801170e:	400a      	ands	r2, r1
 8011710:	3302      	adds	r3, #2
 8011712:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	005b      	lsls	r3, r3, #1
 801171e:	2103      	movs	r1, #3
 8011720:	fa01 f303 	lsl.w	r3, r1, r3
 8011724:	43db      	mvns	r3, r3
 8011726:	401a      	ands	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	08da      	lsrs	r2, r3, #3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	3208      	adds	r2, #8
 8011734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f003 0307 	and.w	r3, r3, #7
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	220f      	movs	r2, #15
 8011742:	fa02 f303 	lsl.w	r3, r2, r3
 8011746:	43db      	mvns	r3, r3
 8011748:	697a      	ldr	r2, [r7, #20]
 801174a:	08d2      	lsrs	r2, r2, #3
 801174c:	4019      	ands	r1, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	3208      	adds	r2, #8
 8011752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	68da      	ldr	r2, [r3, #12]
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	2103      	movs	r1, #3
 8011760:	fa01 f303 	lsl.w	r3, r1, r3
 8011764:	43db      	mvns	r3, r3
 8011766:	401a      	ands	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	2101      	movs	r1, #1
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	fa01 f303 	lsl.w	r3, r1, r3
 8011778:	43db      	mvns	r3, r3
 801177a:	401a      	ands	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	689a      	ldr	r2, [r3, #8]
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	2103      	movs	r1, #3
 801178a:	fa01 f303 	lsl.w	r3, r1, r3
 801178e:	43db      	mvns	r3, r3
 8011790:	401a      	ands	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	3301      	adds	r3, #1
 801179a:	617b      	str	r3, [r7, #20]
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2b0f      	cmp	r3, #15
 80117a0:	f67f af2e 	bls.w	8011600 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80117a4:	bf00      	nop
 80117a6:	bf00      	nop
 80117a8:	371c      	adds	r7, #28
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	40013800 	.word	0x40013800
 80117b8:	40020000 	.word	0x40020000
 80117bc:	40020400 	.word	0x40020400
 80117c0:	40020800 	.word	0x40020800
 80117c4:	40020c00 	.word	0x40020c00
 80117c8:	40021000 	.word	0x40021000
 80117cc:	40021400 	.word	0x40021400
 80117d0:	40021800 	.word	0x40021800
 80117d4:	40021c00 	.word	0x40021c00
 80117d8:	40013c00 	.word	0x40013c00

080117dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	460b      	mov	r3, r1
 80117e6:	807b      	strh	r3, [r7, #2]
 80117e8:	4613      	mov	r3, r2
 80117ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80117ec:	787b      	ldrb	r3, [r7, #1]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80117f2:	887a      	ldrh	r2, [r7, #2]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80117f8:	e003      	b.n	8011802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80117fa:	887b      	ldrh	r3, [r7, #2]
 80117fc:	041a      	lsls	r2, r3, #16
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	619a      	str	r2, [r3, #24]
}
 8011802:	bf00      	nop
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
	...

08011810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d101      	bne.n	8011822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801181e:	2301      	movs	r3, #1
 8011820:	e12b      	b.n	8011a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011828:	b2db      	uxtb	r3, r3
 801182a:	2b00      	cmp	r3, #0
 801182c:	d106      	bne.n	801183c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7f0 fcfe 	bl	8002238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2224      	movs	r2, #36	; 0x24
 8011840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f022 0201 	bic.w	r2, r2, #1
 8011852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8011874:	f002 fc64 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 8011878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	4a81      	ldr	r2, [pc, #516]	; (8011a84 <HAL_I2C_Init+0x274>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d807      	bhi.n	8011894 <HAL_I2C_Init+0x84>
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	4a80      	ldr	r2, [pc, #512]	; (8011a88 <HAL_I2C_Init+0x278>)
 8011888:	4293      	cmp	r3, r2
 801188a:	bf94      	ite	ls
 801188c:	2301      	movls	r3, #1
 801188e:	2300      	movhi	r3, #0
 8011890:	b2db      	uxtb	r3, r3
 8011892:	e006      	b.n	80118a2 <HAL_I2C_Init+0x92>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	4a7d      	ldr	r2, [pc, #500]	; (8011a8c <HAL_I2C_Init+0x27c>)
 8011898:	4293      	cmp	r3, r2
 801189a:	bf94      	ite	ls
 801189c:	2301      	movls	r3, #1
 801189e:	2300      	movhi	r3, #0
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d001      	beq.n	80118aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80118a6:	2301      	movs	r3, #1
 80118a8:	e0e7      	b.n	8011a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	4a78      	ldr	r2, [pc, #480]	; (8011a90 <HAL_I2C_Init+0x280>)
 80118ae:	fba2 2303 	umull	r2, r3, r2, r3
 80118b2:	0c9b      	lsrs	r3, r3, #18
 80118b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	430a      	orrs	r2, r1
 80118c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	6a1b      	ldr	r3, [r3, #32]
 80118d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	4a6a      	ldr	r2, [pc, #424]	; (8011a84 <HAL_I2C_Init+0x274>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d802      	bhi.n	80118e4 <HAL_I2C_Init+0xd4>
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	3301      	adds	r3, #1
 80118e2:	e009      	b.n	80118f8 <HAL_I2C_Init+0xe8>
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80118ea:	fb02 f303 	mul.w	r3, r2, r3
 80118ee:	4a69      	ldr	r2, [pc, #420]	; (8011a94 <HAL_I2C_Init+0x284>)
 80118f0:	fba2 2303 	umull	r2, r3, r2, r3
 80118f4:	099b      	lsrs	r3, r3, #6
 80118f6:	3301      	adds	r3, #1
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	6812      	ldr	r2, [r2, #0]
 80118fc:	430b      	orrs	r3, r1
 80118fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	69db      	ldr	r3, [r3, #28]
 8011906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801190a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	495c      	ldr	r1, [pc, #368]	; (8011a84 <HAL_I2C_Init+0x274>)
 8011914:	428b      	cmp	r3, r1
 8011916:	d819      	bhi.n	801194c <HAL_I2C_Init+0x13c>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	1e59      	subs	r1, r3, #1
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	005b      	lsls	r3, r3, #1
 8011922:	fbb1 f3f3 	udiv	r3, r1, r3
 8011926:	1c59      	adds	r1, r3, #1
 8011928:	f640 73fc 	movw	r3, #4092	; 0xffc
 801192c:	400b      	ands	r3, r1
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00a      	beq.n	8011948 <HAL_I2C_Init+0x138>
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	1e59      	subs	r1, r3, #1
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	fbb1 f3f3 	udiv	r3, r1, r3
 8011940:	3301      	adds	r3, #1
 8011942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011946:	e051      	b.n	80119ec <HAL_I2C_Init+0x1dc>
 8011948:	2304      	movs	r3, #4
 801194a:	e04f      	b.n	80119ec <HAL_I2C_Init+0x1dc>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d111      	bne.n	8011978 <HAL_I2C_Init+0x168>
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	1e58      	subs	r0, r3, #1
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6859      	ldr	r1, [r3, #4]
 801195c:	460b      	mov	r3, r1
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	440b      	add	r3, r1
 8011962:	fbb0 f3f3 	udiv	r3, r0, r3
 8011966:	3301      	adds	r3, #1
 8011968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801196c:	2b00      	cmp	r3, #0
 801196e:	bf0c      	ite	eq
 8011970:	2301      	moveq	r3, #1
 8011972:	2300      	movne	r3, #0
 8011974:	b2db      	uxtb	r3, r3
 8011976:	e012      	b.n	801199e <HAL_I2C_Init+0x18e>
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	1e58      	subs	r0, r3, #1
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6859      	ldr	r1, [r3, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	440b      	add	r3, r1
 8011986:	0099      	lsls	r1, r3, #2
 8011988:	440b      	add	r3, r1
 801198a:	fbb0 f3f3 	udiv	r3, r0, r3
 801198e:	3301      	adds	r3, #1
 8011990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011994:	2b00      	cmp	r3, #0
 8011996:	bf0c      	ite	eq
 8011998:	2301      	moveq	r3, #1
 801199a:	2300      	movne	r3, #0
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d001      	beq.n	80119a6 <HAL_I2C_Init+0x196>
 80119a2:	2301      	movs	r3, #1
 80119a4:	e022      	b.n	80119ec <HAL_I2C_Init+0x1dc>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10e      	bne.n	80119cc <HAL_I2C_Init+0x1bc>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	1e58      	subs	r0, r3, #1
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6859      	ldr	r1, [r3, #4]
 80119b6:	460b      	mov	r3, r1
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	440b      	add	r3, r1
 80119bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80119c0:	3301      	adds	r3, #1
 80119c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119ca:	e00f      	b.n	80119ec <HAL_I2C_Init+0x1dc>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	1e58      	subs	r0, r3, #1
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6859      	ldr	r1, [r3, #4]
 80119d4:	460b      	mov	r3, r1
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	440b      	add	r3, r1
 80119da:	0099      	lsls	r1, r3, #2
 80119dc:	440b      	add	r3, r1
 80119de:	fbb0 f3f3 	udiv	r3, r0, r3
 80119e2:	3301      	adds	r3, #1
 80119e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	6809      	ldr	r1, [r1, #0]
 80119f0:	4313      	orrs	r3, r2
 80119f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	69da      	ldr	r2, [r3, #28]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	431a      	orrs	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	430a      	orrs	r2, r1
 8011a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8011a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	6911      	ldr	r1, [r2, #16]
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	68d2      	ldr	r2, [r2, #12]
 8011a26:	4311      	orrs	r1, r2
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	6812      	ldr	r2, [r2, #0]
 8011a2c:	430b      	orrs	r3, r1
 8011a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	695a      	ldr	r2, [r3, #20]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	431a      	orrs	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	430a      	orrs	r2, r1
 8011a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f042 0201 	orr.w	r2, r2, #1
 8011a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2220      	movs	r2, #32
 8011a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	000186a0 	.word	0x000186a0
 8011a88:	001e847f 	.word	0x001e847f
 8011a8c:	003d08ff 	.word	0x003d08ff
 8011a90:	431bde83 	.word	0x431bde83
 8011a94:	10624dd3 	.word	0x10624dd3

08011a98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e021      	b.n	8011aee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2224      	movs	r2, #36	; 0x24
 8011aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	f022 0201 	bic.w	r2, r2, #1
 8011ac0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7f0 fc8e 	bl	80023e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
	...

08011af8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b086      	sub	sp, #24
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	607a      	str	r2, [r7, #4]
 8011b02:	461a      	mov	r2, r3
 8011b04:	460b      	mov	r3, r1
 8011b06:	817b      	strh	r3, [r7, #10]
 8011b08:	4613      	mov	r3, r2
 8011b0a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b20      	cmp	r3, #32
 8011b1a:	f040 80f4 	bne.w	8011d06 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8011b1e:	4b7c      	ldr	r3, [pc, #496]	; (8011d10 <HAL_I2C_Master_Receive_DMA+0x218>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	08db      	lsrs	r3, r3, #3
 8011b24:	4a7b      	ldr	r2, [pc, #492]	; (8011d14 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8011b26:	fba2 2303 	umull	r2, r3, r2, r3
 8011b2a:	0a1a      	lsrs	r2, r3, #8
 8011b2c:	4613      	mov	r3, r2
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	4413      	add	r3, r2
 8011b32:	009a      	lsls	r2, r3, #2
 8011b34:	4413      	add	r3, r2
 8011b36:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d116      	bne.n	8011b72 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2200      	movs	r2, #0
 8011b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2220      	movs	r2, #32
 8011b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5e:	f043 0220 	orr.w	r2, r3, #32
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e0ca      	b.n	8011d08 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	699b      	ldr	r3, [r3, #24]
 8011b78:	f003 0302 	and.w	r3, r3, #2
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d0db      	beq.n	8011b38 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d101      	bne.n	8011b8e <HAL_I2C_Master_Receive_DMA+0x96>
 8011b8a:	2302      	movs	r3, #2
 8011b8c:	e0bc      	b.n	8011d08 <HAL_I2C_Master_Receive_DMA+0x210>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2201      	movs	r2, #1
 8011b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f003 0301 	and.w	r3, r3, #1
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d007      	beq.n	8011bb4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f042 0201 	orr.w	r2, r2, #1
 8011bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2222      	movs	r2, #34	; 0x22
 8011bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2210      	movs	r2, #16
 8011bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	893a      	ldrh	r2, [r7, #8]
 8011be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	4a49      	ldr	r2, [pc, #292]	; (8011d18 <HAL_I2C_Master_Receive_DMA+0x220>)
 8011bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8011bf6:	897a      	ldrh	r2, [r7, #10]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d062      	beq.n	8011cca <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c08:	4a44      	ldr	r2, [pc, #272]	; (8011d1c <HAL_I2C_Master_Receive_DMA+0x224>)
 8011c0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c10:	4a43      	ldr	r2, [pc, #268]	; (8011d20 <HAL_I2C_Master_Receive_DMA+0x228>)
 8011c12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c18:	2200      	movs	r2, #0
 8011c1a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c20:	2200      	movs	r2, #0
 8011c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c28:	2200      	movs	r2, #0
 8011c2a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c30:	2200      	movs	r2, #0
 8011c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3310      	adds	r3, #16
 8011c3e:	4619      	mov	r1, r3
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c44:	461a      	mov	r2, r3
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c4a:	f7ff f831 	bl	8010cb0 <HAL_DMA_Start_IT>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d124      	bne.n	8011ca2 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c66:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011c76:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	685a      	ldr	r2, [r3, #4]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8011c8e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	685a      	ldr	r2, [r3, #4]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c9e:	605a      	str	r2, [r3, #4]
 8011ca0:	e02f      	b.n	8011d02 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2220      	movs	r2, #32
 8011ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2200      	movs	r2, #0
 8011cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb6:	f043 0210 	orr.w	r2, r3, #16
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e01e      	b.n	8011d08 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011cd8:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ce8:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2200      	movs	r2, #0
 8011cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8011d00:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8011d02:	2300      	movs	r3, #0
 8011d04:	e000      	b.n	8011d08 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8011d06:	2302      	movs	r3, #2
  }
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	20000000 	.word	0x20000000
 8011d14:	14f8b589 	.word	0x14f8b589
 8011d18:	ffff0000 	.word	0xffff0000
 8011d1c:	08013491 	.word	0x08013491
 8011d20:	0801363b 	.word	0x0801363b

08011d24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b088      	sub	sp, #32
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011d44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8011d4e:	7bfb      	ldrb	r3, [r7, #15]
 8011d50:	2b10      	cmp	r3, #16
 8011d52:	d003      	beq.n	8011d5c <HAL_I2C_EV_IRQHandler+0x38>
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
 8011d56:	2b40      	cmp	r3, #64	; 0x40
 8011d58:	f040 80bd 	bne.w	8011ed6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	699b      	ldr	r3, [r3, #24]
 8011d62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	695b      	ldr	r3, [r3, #20]
 8011d6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	f003 0301 	and.w	r3, r3, #1
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10d      	bne.n	8011d92 <HAL_I2C_EV_IRQHandler+0x6e>
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011d7c:	d003      	beq.n	8011d86 <HAL_I2C_EV_IRQHandler+0x62>
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011d84:	d101      	bne.n	8011d8a <HAL_I2C_EV_IRQHandler+0x66>
 8011d86:	2301      	movs	r3, #1
 8011d88:	e000      	b.n	8011d8c <HAL_I2C_EV_IRQHandler+0x68>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	f000 812e 	beq.w	8011fee <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	f003 0301 	and.w	r3, r3, #1
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00c      	beq.n	8011db6 <HAL_I2C_EV_IRQHandler+0x92>
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	0a5b      	lsrs	r3, r3, #9
 8011da0:	f003 0301 	and.w	r3, r3, #1
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d006      	beq.n	8011db6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f001 fd5d 	bl	8013868 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 fd58 	bl	8012864 <I2C_Master_SB>
 8011db4:	e08e      	b.n	8011ed4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	08db      	lsrs	r3, r3, #3
 8011dba:	f003 0301 	and.w	r3, r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d009      	beq.n	8011dd6 <HAL_I2C_EV_IRQHandler+0xb2>
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	0a5b      	lsrs	r3, r3, #9
 8011dc6:	f003 0301 	and.w	r3, r3, #1
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d003      	beq.n	8011dd6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 fdce 	bl	8012970 <I2C_Master_ADD10>
 8011dd4:	e07e      	b.n	8011ed4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011dd6:	69fb      	ldr	r3, [r7, #28]
 8011dd8:	085b      	lsrs	r3, r3, #1
 8011dda:	f003 0301 	and.w	r3, r3, #1
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d009      	beq.n	8011df6 <HAL_I2C_EV_IRQHandler+0xd2>
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	0a5b      	lsrs	r3, r3, #9
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d003      	beq.n	8011df6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 fde8 	bl	80129c4 <I2C_Master_ADDR>
 8011df4:	e06e      	b.n	8011ed4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	089b      	lsrs	r3, r3, #2
 8011dfa:	f003 0301 	and.w	r3, r3, #1
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d037      	beq.n	8011e72 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e10:	f000 80ef 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	09db      	lsrs	r3, r3, #7
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00f      	beq.n	8011e40 <HAL_I2C_EV_IRQHandler+0x11c>
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	0a9b      	lsrs	r3, r3, #10
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d009      	beq.n	8011e40 <HAL_I2C_EV_IRQHandler+0x11c>
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	089b      	lsrs	r3, r3, #2
 8011e30:	f003 0301 	and.w	r3, r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d103      	bne.n	8011e40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8011e38:	6878      	ldr	r0, [r7, #4]
 8011e3a:	f000 f9e5 	bl	8012208 <I2C_MasterTransmit_TXE>
 8011e3e:	e049      	b.n	8011ed4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	089b      	lsrs	r3, r3, #2
 8011e44:	f003 0301 	and.w	r3, r3, #1
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f000 80d2 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	0a5b      	lsrs	r3, r3, #9
 8011e52:	f003 0301 	and.w	r3, r3, #1
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 80cb 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
 8011e5e:	2b10      	cmp	r3, #16
 8011e60:	d103      	bne.n	8011e6a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 fa6c 	bl	8012340 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011e68:	e0c3      	b.n	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fad0 	bl	8012410 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011e70:	e0bf      	b.n	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e80:	f000 80b7 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	099b      	lsrs	r3, r3, #6
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00f      	beq.n	8011eb0 <HAL_I2C_EV_IRQHandler+0x18c>
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	0a9b      	lsrs	r3, r3, #10
 8011e94:	f003 0301 	and.w	r3, r3, #1
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <HAL_I2C_EV_IRQHandler+0x18c>
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	089b      	lsrs	r3, r3, #2
 8011ea0:	f003 0301 	and.w	r3, r3, #1
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d103      	bne.n	8011eb0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 fb40 	bl	801252e <I2C_MasterReceive_RXNE>
 8011eae:	e011      	b.n	8011ed4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	089b      	lsrs	r3, r3, #2
 8011eb4:	f003 0301 	and.w	r3, r3, #1
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 809a 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	0a5b      	lsrs	r3, r3, #9
 8011ec2:	f003 0301 	and.w	r3, r3, #1
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f000 8093 	beq.w	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 fbdf 	bl	8012690 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011ed2:	e08e      	b.n	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8011ed4:	e08d      	b.n	8011ff2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d004      	beq.n	8011ee8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	695b      	ldr	r3, [r3, #20]
 8011ee4:	61fb      	str	r3, [r7, #28]
 8011ee6:	e007      	b.n	8011ef8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	699b      	ldr	r3, [r3, #24]
 8011eee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	695b      	ldr	r3, [r3, #20]
 8011ef6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	085b      	lsrs	r3, r3, #1
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d012      	beq.n	8011f2a <HAL_I2C_EV_IRQHandler+0x206>
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	0a5b      	lsrs	r3, r3, #9
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00c      	beq.n	8011f2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d003      	beq.n	8011f20 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	699b      	ldr	r3, [r3, #24]
 8011f1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8011f20:	69b9      	ldr	r1, [r7, #24]
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 ff9d 	bl	8012e62 <I2C_Slave_ADDR>
 8011f28:	e066      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	091b      	lsrs	r3, r3, #4
 8011f2e:	f003 0301 	and.w	r3, r3, #1
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d009      	beq.n	8011f4a <HAL_I2C_EV_IRQHandler+0x226>
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	0a5b      	lsrs	r3, r3, #9
 8011f3a:	f003 0301 	and.w	r3, r3, #1
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d003      	beq.n	8011f4a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 ffd2 	bl	8012eec <I2C_Slave_STOPF>
 8011f48:	e056      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011f4a:	7bbb      	ldrb	r3, [r7, #14]
 8011f4c:	2b21      	cmp	r3, #33	; 0x21
 8011f4e:	d002      	beq.n	8011f56 <HAL_I2C_EV_IRQHandler+0x232>
 8011f50:	7bbb      	ldrb	r3, [r7, #14]
 8011f52:	2b29      	cmp	r3, #41	; 0x29
 8011f54:	d125      	bne.n	8011fa2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	09db      	lsrs	r3, r3, #7
 8011f5a:	f003 0301 	and.w	r3, r3, #1
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00f      	beq.n	8011f82 <HAL_I2C_EV_IRQHandler+0x25e>
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	0a9b      	lsrs	r3, r3, #10
 8011f66:	f003 0301 	and.w	r3, r3, #1
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d009      	beq.n	8011f82 <HAL_I2C_EV_IRQHandler+0x25e>
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	089b      	lsrs	r3, r3, #2
 8011f72:	f003 0301 	and.w	r3, r3, #1
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d103      	bne.n	8011f82 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 feb3 	bl	8012ce6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011f80:	e039      	b.n	8011ff6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	089b      	lsrs	r3, r3, #2
 8011f86:	f003 0301 	and.w	r3, r3, #1
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d033      	beq.n	8011ff6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	0a5b      	lsrs	r3, r3, #9
 8011f92:	f003 0301 	and.w	r3, r3, #1
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d02d      	beq.n	8011ff6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fee0 	bl	8012d60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011fa0:	e029      	b.n	8011ff6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	099b      	lsrs	r3, r3, #6
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d00f      	beq.n	8011fce <HAL_I2C_EV_IRQHandler+0x2aa>
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	0a9b      	lsrs	r3, r3, #10
 8011fb2:	f003 0301 	and.w	r3, r3, #1
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d009      	beq.n	8011fce <HAL_I2C_EV_IRQHandler+0x2aa>
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	089b      	lsrs	r3, r3, #2
 8011fbe:	f003 0301 	and.w	r3, r3, #1
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d103      	bne.n	8011fce <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 feeb 	bl	8012da2 <I2C_SlaveReceive_RXNE>
 8011fcc:	e014      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	089b      	lsrs	r3, r3, #2
 8011fd2:	f003 0301 	and.w	r3, r3, #1
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d00e      	beq.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	0a5b      	lsrs	r3, r3, #9
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d008      	beq.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 ff19 	bl	8012e1e <I2C_SlaveReceive_BTF>
 8011fec:	e004      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8011fee:	bf00      	nop
 8011ff0:	e002      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011ff2:	bf00      	nop
 8011ff4:	e000      	b.n	8011ff8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011ff6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8011ff8:	3720      	adds	r7, #32
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b08a      	sub	sp, #40	; 0x28
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	695b      	ldr	r3, [r3, #20]
 801200c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8012016:	2300      	movs	r3, #0
 8012018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012020:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	0a1b      	lsrs	r3, r3, #8
 8012026:	f003 0301 	and.w	r3, r3, #1
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00e      	beq.n	801204c <HAL_I2C_ER_IRQHandler+0x4e>
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	0a1b      	lsrs	r3, r3, #8
 8012032:	f003 0301 	and.w	r3, r3, #1
 8012036:	2b00      	cmp	r3, #0
 8012038:	d008      	beq.n	801204c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203c:	f043 0301 	orr.w	r3, r3, #1
 8012040:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801204a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801204c:	6a3b      	ldr	r3, [r7, #32]
 801204e:	0a5b      	lsrs	r3, r3, #9
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00e      	beq.n	8012076 <HAL_I2C_ER_IRQHandler+0x78>
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	0a1b      	lsrs	r3, r3, #8
 801205c:	f003 0301 	and.w	r3, r3, #1
 8012060:	2b00      	cmp	r3, #0
 8012062:	d008      	beq.n	8012076 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	f043 0302 	orr.w	r3, r3, #2
 801206a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8012074:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	0a9b      	lsrs	r3, r3, #10
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	2b00      	cmp	r3, #0
 8012080:	d03f      	beq.n	8012102 <HAL_I2C_ER_IRQHandler+0x104>
 8012082:	69fb      	ldr	r3, [r7, #28]
 8012084:	0a1b      	lsrs	r3, r3, #8
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	d039      	beq.n	8012102 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801208e:	7efb      	ldrb	r3, [r7, #27]
 8012090:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012096:	b29b      	uxth	r3, r3
 8012098:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80120a8:	7ebb      	ldrb	r3, [r7, #26]
 80120aa:	2b20      	cmp	r3, #32
 80120ac:	d112      	bne.n	80120d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10f      	bne.n	80120d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80120b4:	7cfb      	ldrb	r3, [r7, #19]
 80120b6:	2b21      	cmp	r3, #33	; 0x21
 80120b8:	d008      	beq.n	80120cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80120ba:	7cfb      	ldrb	r3, [r7, #19]
 80120bc:	2b29      	cmp	r3, #41	; 0x29
 80120be:	d005      	beq.n	80120cc <HAL_I2C_ER_IRQHandler+0xce>
 80120c0:	7cfb      	ldrb	r3, [r7, #19]
 80120c2:	2b28      	cmp	r3, #40	; 0x28
 80120c4:	d106      	bne.n	80120d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b21      	cmp	r3, #33	; 0x21
 80120ca:	d103      	bne.n	80120d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f001 f83d 	bl	801314c <I2C_Slave_AF>
 80120d2:	e016      	b.n	8012102 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80120dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	f043 0304 	orr.w	r3, r3, #4
 80120e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80120e6:	7efb      	ldrb	r3, [r7, #27]
 80120e8:	2b10      	cmp	r3, #16
 80120ea:	d002      	beq.n	80120f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80120ec:	7efb      	ldrb	r3, [r7, #27]
 80120ee:	2b40      	cmp	r3, #64	; 0x40
 80120f0:	d107      	bne.n	8012102 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012100:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	0adb      	lsrs	r3, r3, #11
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00e      	beq.n	801212c <HAL_I2C_ER_IRQHandler+0x12e>
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	0a1b      	lsrs	r3, r3, #8
 8012112:	f003 0301 	and.w	r3, r3, #1
 8012116:	2b00      	cmp	r3, #0
 8012118:	d008      	beq.n	801212c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211c:	f043 0308 	orr.w	r3, r3, #8
 8012120:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801212a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212e:	2b00      	cmp	r3, #0
 8012130:	d008      	beq.n	8012144 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012138:	431a      	orrs	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f001 f874 	bl	801322c <I2C_ITError>
  }
}
 8012144:	bf00      	nop
 8012146:	3728      	adds	r7, #40	; 0x28
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8012154:	bf00      	nop
 8012156:	370c      	adds	r7, #12
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8012168:	bf00      	nop
 801216a:	370c      	adds	r7, #12
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr

08012174 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801217c:	bf00      	nop
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	460b      	mov	r3, r1
 8012192:	70fb      	strb	r3, [r7, #3]
 8012194:	4613      	mov	r3, r2
 8012196:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8012198:	bf00      	nop
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80121ac:	bf00      	nop
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80121d4:	bf00      	nop
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80121e8:	bf00      	nop
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b083      	sub	sp, #12
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80121fc:	bf00      	nop
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012216:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801221e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012224:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801222a:	2b00      	cmp	r3, #0
 801222c:	d150      	bne.n	80122d0 <I2C_MasterTransmit_TXE+0xc8>
 801222e:	7bfb      	ldrb	r3, [r7, #15]
 8012230:	2b21      	cmp	r3, #33	; 0x21
 8012232:	d14d      	bne.n	80122d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b08      	cmp	r3, #8
 8012238:	d01d      	beq.n	8012276 <I2C_MasterTransmit_TXE+0x6e>
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	2b20      	cmp	r3, #32
 801223e:	d01a      	beq.n	8012276 <I2C_MasterTransmit_TXE+0x6e>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012246:	d016      	beq.n	8012276 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	685a      	ldr	r2, [r3, #4]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012256:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2211      	movs	r2, #17
 801225c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2220      	movs	r2, #32
 801226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff ff6c 	bl	801214c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8012274:	e060      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012284:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012294:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b40      	cmp	r3, #64	; 0x40
 80122ae:	d107      	bne.n	80122c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7ff ff7d 	bl	80121b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80122be:	e03b      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ff ff3f 	bl	801214c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80122ce:	e033      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	2b21      	cmp	r3, #33	; 0x21
 80122d4:	d005      	beq.n	80122e2 <I2C_MasterTransmit_TXE+0xda>
 80122d6:	7bbb      	ldrb	r3, [r7, #14]
 80122d8:	2b40      	cmp	r3, #64	; 0x40
 80122da:	d12d      	bne.n	8012338 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
 80122de:	2b22      	cmp	r3, #34	; 0x22
 80122e0:	d12a      	bne.n	8012338 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d108      	bne.n	80122fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	685a      	ldr	r2, [r3, #4]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80122fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80122fc:	e01c      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012304:	b2db      	uxtb	r3, r3
 8012306:	2b40      	cmp	r3, #64	; 0x40
 8012308:	d103      	bne.n	8012312 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f880 	bl	8012410 <I2C_MemoryTransmit_TXE_BTF>
}
 8012310:	e012      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012316:	781a      	ldrb	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012322:	1c5a      	adds	r2, r3, #1
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801232c:	b29b      	uxth	r3, r3
 801232e:	3b01      	subs	r3, #1
 8012330:	b29a      	uxth	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012336:	e7ff      	b.n	8012338 <I2C_MasterTransmit_TXE+0x130>
 8012338:	bf00      	nop
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b21      	cmp	r3, #33	; 0x21
 8012358:	d156      	bne.n	8012408 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801235e:	b29b      	uxth	r3, r3
 8012360:	2b00      	cmp	r3, #0
 8012362:	d012      	beq.n	801238a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012368:	781a      	ldrb	r2, [r3, #0]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012374:	1c5a      	adds	r2, r3, #1
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801237e:	b29b      	uxth	r3, r3
 8012380:	3b01      	subs	r3, #1
 8012382:	b29a      	uxth	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8012388:	e03e      	b.n	8012408 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b08      	cmp	r3, #8
 801238e:	d01d      	beq.n	80123cc <I2C_MasterTransmit_BTF+0x8c>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b20      	cmp	r3, #32
 8012394:	d01a      	beq.n	80123cc <I2C_MasterTransmit_BTF+0x8c>
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801239c:	d016      	beq.n	80123cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	685a      	ldr	r2, [r3, #4]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80123ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2211      	movs	r2, #17
 80123b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2200      	movs	r2, #0
 80123b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2220      	movs	r2, #32
 80123c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7ff fec1 	bl	801214c <HAL_I2C_MasterTxCpltCallback>
}
 80123ca:	e01d      	b.n	8012408 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80123da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2220      	movs	r2, #32
 80123f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f7ff fea2 	bl	801214c <HAL_I2C_MasterTxCpltCallback>
}
 8012408:	bf00      	nop
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801241e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012424:	2b00      	cmp	r3, #0
 8012426:	d11d      	bne.n	8012464 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801242c:	2b01      	cmp	r3, #1
 801242e:	d10b      	bne.n	8012448 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012434:	b2da      	uxtb	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012440:	1c9a      	adds	r2, r3, #2
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8012446:	e06e      	b.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801244c:	b29b      	uxth	r3, r3
 801244e:	121b      	asrs	r3, r3, #8
 8012450:	b2da      	uxtb	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801245c:	1c5a      	adds	r2, r3, #1
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012462:	e060      	b.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012468:	2b01      	cmp	r3, #1
 801246a:	d10b      	bne.n	8012484 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012470:	b2da      	uxtb	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801247c:	1c5a      	adds	r2, r3, #1
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	651a      	str	r2, [r3, #80]	; 0x50
}
 8012482:	e050      	b.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012488:	2b02      	cmp	r3, #2
 801248a:	d14c      	bne.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801248c:	7bfb      	ldrb	r3, [r7, #15]
 801248e:	2b22      	cmp	r3, #34	; 0x22
 8012490:	d108      	bne.n	80124a4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80124a0:	601a      	str	r2, [r3, #0]
}
 80124a2:	e040      	b.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d015      	beq.n	80124da <I2C_MemoryTransmit_TXE_BTF+0xca>
 80124ae:	7bfb      	ldrb	r3, [r7, #15]
 80124b0:	2b21      	cmp	r3, #33	; 0x21
 80124b2:	d112      	bne.n	80124da <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b8:	781a      	ldrb	r2, [r3, #0]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c4:	1c5a      	adds	r2, r3, #1
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	3b01      	subs	r3, #1
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80124d8:	e025      	b.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80124de:	b29b      	uxth	r3, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d120      	bne.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80124e4:	7bfb      	ldrb	r3, [r7, #15]
 80124e6:	2b21      	cmp	r3, #33	; 0x21
 80124e8:	d11d      	bne.n	8012526 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	685a      	ldr	r2, [r3, #4]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80124f8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012508:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2220      	movs	r2, #32
 8012514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f7ff fe49 	bl	80121b8 <HAL_I2C_MemTxCpltCallback>
}
 8012526:	bf00      	nop
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801253c:	b2db      	uxtb	r3, r3
 801253e:	2b22      	cmp	r3, #34	; 0x22
 8012540:	f040 80a2 	bne.w	8012688 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012548:	b29b      	uxth	r3, r3
 801254a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2b03      	cmp	r3, #3
 8012550:	d921      	bls.n	8012596 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	691a      	ldr	r2, [r3, #16]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801255c:	b2d2      	uxtb	r2, r2
 801255e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012564:	1c5a      	adds	r2, r3, #1
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801256e:	b29b      	uxth	r3, r3
 8012570:	3b01      	subs	r3, #1
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801257c:	b29b      	uxth	r3, r3
 801257e:	2b03      	cmp	r3, #3
 8012580:	f040 8082 	bne.w	8012688 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	685a      	ldr	r2, [r3, #4]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012592:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8012594:	e078      	b.n	8012688 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259a:	2b02      	cmp	r3, #2
 801259c:	d074      	beq.n	8012688 <I2C_MasterReceive_RXNE+0x15a>
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d002      	beq.n	80125aa <I2C_MasterReceive_RXNE+0x7c>
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d16e      	bne.n	8012688 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f001 f92a 	bl	8013804 <I2C_WaitOnSTOPRequestThroughIT>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d142      	bne.n	801263c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80125c4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80125d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	691a      	ldr	r2, [r3, #16]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e0:	b2d2      	uxtb	r2, r2
 80125e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e8:	1c5a      	adds	r2, r3, #1
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	3b01      	subs	r3, #1
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2220      	movs	r2, #32
 8012600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801260a:	b2db      	uxtb	r3, r3
 801260c:	2b40      	cmp	r3, #64	; 0x40
 801260e:	d10a      	bne.n	8012626 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f7ff fdd4 	bl	80121cc <HAL_I2C_MemRxCpltCallback>
}
 8012624:	e030      	b.n	8012688 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2212      	movs	r2, #18
 8012632:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7fa f849 	bl	800c6cc <HAL_I2C_MasterRxCpltCallback>
}
 801263a:	e025      	b.n	8012688 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	685a      	ldr	r2, [r3, #4]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801264a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	691a      	ldr	r2, [r3, #16]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012656:	b2d2      	uxtb	r2, r2
 8012658:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012668:	b29b      	uxth	r3, r3
 801266a:	3b01      	subs	r3, #1
 801266c:	b29a      	uxth	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2220      	movs	r2, #32
 8012676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f7ff fdac 	bl	80121e0 <HAL_I2C_ErrorCallback>
}
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801269c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	2b04      	cmp	r3, #4
 80126a6:	d11b      	bne.n	80126e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	685a      	ldr	r2, [r3, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	691a      	ldr	r2, [r3, #16]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c2:	b2d2      	uxtb	r2, r2
 80126c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ca:	1c5a      	adds	r2, r3, #1
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	3b01      	subs	r3, #1
 80126d8:	b29a      	uxth	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80126de:	e0bd      	b.n	801285c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d129      	bne.n	801273e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	685a      	ldr	r2, [r3, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2b04      	cmp	r3, #4
 80126fe:	d00a      	beq.n	8012716 <I2C_MasterReceive_BTF+0x86>
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b02      	cmp	r3, #2
 8012704:	d007      	beq.n	8012716 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012714:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	691a      	ldr	r2, [r3, #16]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012720:	b2d2      	uxtb	r2, r2
 8012722:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012732:	b29b      	uxth	r3, r3
 8012734:	3b01      	subs	r3, #1
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801273c:	e08e      	b.n	801285c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012742:	b29b      	uxth	r3, r3
 8012744:	2b02      	cmp	r3, #2
 8012746:	d176      	bne.n	8012836 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d002      	beq.n	8012754 <I2C_MasterReceive_BTF+0xc4>
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2b10      	cmp	r3, #16
 8012752:	d108      	bne.n	8012766 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	e019      	b.n	801279a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2b04      	cmp	r3, #4
 801276a:	d002      	beq.n	8012772 <I2C_MasterReceive_BTF+0xe2>
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b02      	cmp	r3, #2
 8012770:	d108      	bne.n	8012784 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012780:	601a      	str	r2, [r3, #0]
 8012782:	e00a      	b.n	801279a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b10      	cmp	r3, #16
 8012788:	d007      	beq.n	801279a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012798:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	691a      	ldr	r2, [r3, #16]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a4:	b2d2      	uxtb	r2, r2
 80127a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	3b01      	subs	r3, #1
 80127ba:	b29a      	uxth	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	691a      	ldr	r2, [r3, #16]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ca:	b2d2      	uxtb	r2, r2
 80127cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d2:	1c5a      	adds	r2, r3, #1
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127dc:	b29b      	uxth	r3, r3
 80127de:	3b01      	subs	r3, #1
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80127f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2220      	movs	r2, #32
 80127fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012804:	b2db      	uxtb	r3, r3
 8012806:	2b40      	cmp	r3, #64	; 0x40
 8012808:	d10a      	bne.n	8012820 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2200      	movs	r2, #0
 801280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff fcd7 	bl	80121cc <HAL_I2C_MemRxCpltCallback>
}
 801281e:	e01d      	b.n	801285c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2200      	movs	r2, #0
 8012824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2212      	movs	r2, #18
 801282c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7f9 ff4c 	bl	800c6cc <HAL_I2C_MasterRxCpltCallback>
}
 8012834:	e012      	b.n	801285c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	691a      	ldr	r2, [r3, #16]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012840:	b2d2      	uxtb	r2, r2
 8012842:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012848:	1c5a      	adds	r2, r3, #1
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012852:	b29b      	uxth	r3, r3
 8012854:	3b01      	subs	r3, #1
 8012856:	b29a      	uxth	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801285c:	bf00      	nop
 801285e:	3710      	adds	r7, #16
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012872:	b2db      	uxtb	r3, r3
 8012874:	2b40      	cmp	r3, #64	; 0x40
 8012876:	d117      	bne.n	80128a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801287c:	2b00      	cmp	r3, #0
 801287e:	d109      	bne.n	8012894 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012884:	b2db      	uxtb	r3, r3
 8012886:	461a      	mov	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012890:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8012892:	e067      	b.n	8012964 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012898:	b2db      	uxtb	r3, r3
 801289a:	f043 0301 	orr.w	r3, r3, #1
 801289e:	b2da      	uxtb	r2, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	611a      	str	r2, [r3, #16]
}
 80128a6:	e05d      	b.n	8012964 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	691b      	ldr	r3, [r3, #16]
 80128ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80128b0:	d133      	bne.n	801291a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	2b21      	cmp	r3, #33	; 0x21
 80128bc:	d109      	bne.n	80128d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	461a      	mov	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80128ce:	611a      	str	r2, [r3, #16]
 80128d0:	e008      	b.n	80128e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	f043 0301 	orr.w	r3, r3, #1
 80128dc:	b2da      	uxtb	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d004      	beq.n	80128f6 <I2C_Master_SB+0x92>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d108      	bne.n	8012908 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d032      	beq.n	8012964 <I2C_Master_SB+0x100>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012904:	2b00      	cmp	r3, #0
 8012906:	d02d      	beq.n	8012964 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012916:	605a      	str	r2, [r3, #4]
}
 8012918:	e024      	b.n	8012964 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801291e:	2b00      	cmp	r3, #0
 8012920:	d10e      	bne.n	8012940 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012926:	b29b      	uxth	r3, r3
 8012928:	11db      	asrs	r3, r3, #7
 801292a:	b2db      	uxtb	r3, r3
 801292c:	f003 0306 	and.w	r3, r3, #6
 8012930:	b2db      	uxtb	r3, r3
 8012932:	f063 030f 	orn	r3, r3, #15
 8012936:	b2da      	uxtb	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	611a      	str	r2, [r3, #16]
}
 801293e:	e011      	b.n	8012964 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012944:	2b01      	cmp	r3, #1
 8012946:	d10d      	bne.n	8012964 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801294c:	b29b      	uxth	r3, r3
 801294e:	11db      	asrs	r3, r3, #7
 8012950:	b2db      	uxtb	r3, r3
 8012952:	f003 0306 	and.w	r3, r3, #6
 8012956:	b2db      	uxtb	r3, r3
 8012958:	f063 030e 	orn	r3, r3, #14
 801295c:	b2da      	uxtb	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	611a      	str	r2, [r3, #16]
}
 8012964:	bf00      	nop
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801297c:	b2da      	uxtb	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012988:	2b00      	cmp	r3, #0
 801298a:	d103      	bne.n	8012994 <I2C_Master_ADD10+0x24>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012990:	2b00      	cmp	r3, #0
 8012992:	d011      	beq.n	80129b8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801299a:	2b00      	cmp	r3, #0
 801299c:	d104      	bne.n	80129a8 <I2C_Master_ADD10+0x38>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d007      	beq.n	80129b8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80129b6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80129b8:	bf00      	nop
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b091      	sub	sp, #68	; 0x44
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80129d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b22      	cmp	r3, #34	; 0x22
 80129ec:	f040 8169 	bne.w	8012cc2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10f      	bne.n	8012a18 <I2C_Master_ADDR+0x54>
 80129f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80129fc:	2b40      	cmp	r3, #64	; 0x40
 80129fe:	d10b      	bne.n	8012a18 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a00:	2300      	movs	r3, #0
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	699b      	ldr	r3, [r3, #24]
 8012a12:	633b      	str	r3, [r7, #48]	; 0x30
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	e160      	b.n	8012cda <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d11d      	bne.n	8012a5c <I2C_Master_ADDR+0x98>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012a28:	d118      	bne.n	8012a5c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	695b      	ldr	r3, [r3, #20]
 8012a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	699b      	ldr	r3, [r3, #24]
 8012a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a4e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a54:	1c5a      	adds	r2, r3, #1
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	651a      	str	r2, [r3, #80]	; 0x50
 8012a5a:	e13e      	b.n	8012cda <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d113      	bne.n	8012a8e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a66:	2300      	movs	r3, #0
 8012a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	695b      	ldr	r3, [r3, #20]
 8012a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	699b      	ldr	r3, [r3, #24]
 8012a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a8a:	601a      	str	r2, [r3, #0]
 8012a8c:	e115      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	f040 808a 	bne.w	8012bae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012aa0:	d137      	bne.n	8012b12 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ab0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ac0:	d113      	bne.n	8012aea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012ad0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	695b      	ldr	r3, [r3, #20]
 8012adc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	699b      	ldr	r3, [r3, #24]
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	e0e7      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012aea:	2300      	movs	r3, #0
 8012aec:	623b      	str	r3, [r7, #32]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	695b      	ldr	r3, [r3, #20]
 8012af4:	623b      	str	r3, [r7, #32]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	699b      	ldr	r3, [r3, #24]
 8012afc:	623b      	str	r3, [r7, #32]
 8012afe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b0e:	601a      	str	r2, [r3, #0]
 8012b10:	e0d3      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8012b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b14:	2b08      	cmp	r3, #8
 8012b16:	d02e      	beq.n	8012b76 <I2C_Master_ADDR+0x1b2>
 8012b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1a:	2b20      	cmp	r3, #32
 8012b1c:	d02b      	beq.n	8012b76 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8012b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b20:	2b12      	cmp	r3, #18
 8012b22:	d102      	bne.n	8012b2a <I2C_Master_ADDR+0x166>
 8012b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d125      	bne.n	8012b76 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8012b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2c:	2b04      	cmp	r3, #4
 8012b2e:	d00e      	beq.n	8012b4e <I2C_Master_ADDR+0x18a>
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d00b      	beq.n	8012b4e <I2C_Master_ADDR+0x18a>
 8012b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b38:	2b10      	cmp	r3, #16
 8012b3a:	d008      	beq.n	8012b4e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012b4a:	601a      	str	r2, [r3, #0]
 8012b4c:	e007      	b.n	8012b5e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012b5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012b5e:	2300      	movs	r3, #0
 8012b60:	61fb      	str	r3, [r7, #28]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	695b      	ldr	r3, [r3, #20]
 8012b68:	61fb      	str	r3, [r7, #28]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	699b      	ldr	r3, [r3, #24]
 8012b70:	61fb      	str	r3, [r7, #28]
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	e0a1      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012b84:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012b86:	2300      	movs	r3, #0
 8012b88:	61bb      	str	r3, [r7, #24]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	61bb      	str	r3, [r7, #24]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	699b      	ldr	r3, [r3, #24]
 8012b98:	61bb      	str	r3, [r7, #24]
 8012b9a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012baa:	601a      	str	r2, [r3, #0]
 8012bac:	e085      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d14d      	bne.n	8012c54 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	2b04      	cmp	r3, #4
 8012bbc:	d016      	beq.n	8012bec <I2C_Master_ADDR+0x228>
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc0:	2b02      	cmp	r3, #2
 8012bc2:	d013      	beq.n	8012bec <I2C_Master_ADDR+0x228>
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	2b10      	cmp	r3, #16
 8012bc8:	d010      	beq.n	8012bec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012bd8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012be8:	601a      	str	r2, [r3, #0]
 8012bea:	e007      	b.n	8012bfc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012bfa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c0a:	d117      	bne.n	8012c3c <I2C_Master_ADDR+0x278>
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012c12:	d00b      	beq.n	8012c2c <I2C_Master_ADDR+0x268>
 8012c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d008      	beq.n	8012c2c <I2C_Master_ADDR+0x268>
 8012c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1c:	2b08      	cmp	r3, #8
 8012c1e:	d005      	beq.n	8012c2c <I2C_Master_ADDR+0x268>
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	2b10      	cmp	r3, #16
 8012c24:	d002      	beq.n	8012c2c <I2C_Master_ADDR+0x268>
 8012c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c28:	2b20      	cmp	r3, #32
 8012c2a:	d107      	bne.n	8012c3c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	685a      	ldr	r2, [r3, #4]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012c3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	617b      	str	r3, [r7, #20]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	617b      	str	r3, [r7, #20]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	699b      	ldr	r3, [r3, #24]
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	e032      	b.n	8012cba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012c62:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c72:	d117      	bne.n	8012ca4 <I2C_Master_ADDR+0x2e0>
 8012c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012c7a:	d00b      	beq.n	8012c94 <I2C_Master_ADDR+0x2d0>
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d008      	beq.n	8012c94 <I2C_Master_ADDR+0x2d0>
 8012c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c84:	2b08      	cmp	r3, #8
 8012c86:	d005      	beq.n	8012c94 <I2C_Master_ADDR+0x2d0>
 8012c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8a:	2b10      	cmp	r3, #16
 8012c8c:	d002      	beq.n	8012c94 <I2C_Master_ADDR+0x2d0>
 8012c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c90:	2b20      	cmp	r3, #32
 8012c92:	d107      	bne.n	8012ca4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	685a      	ldr	r2, [r3, #4]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012ca2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	613b      	str	r3, [r7, #16]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	695b      	ldr	r3, [r3, #20]
 8012cae:	613b      	str	r3, [r7, #16]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	699b      	ldr	r3, [r3, #24]
 8012cb6:	613b      	str	r3, [r7, #16]
 8012cb8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8012cc0:	e00b      	b.n	8012cda <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60fb      	str	r3, [r7, #12]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	695b      	ldr	r3, [r3, #20]
 8012ccc:	60fb      	str	r3, [r7, #12]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	699b      	ldr	r3, [r3, #24]
 8012cd4:	60fb      	str	r3, [r7, #12]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
}
 8012cd8:	e7ff      	b.n	8012cda <I2C_Master_ADDR+0x316>
 8012cda:	bf00      	nop
 8012cdc:	3744      	adds	r7, #68	; 0x44
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr

08012ce6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b084      	sub	sp, #16
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012cf4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d02b      	beq.n	8012d58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d04:	781a      	ldrb	r2, [r3, #0]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d10:	1c5a      	adds	r2, r3, #1
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	3b01      	subs	r3, #1
 8012d1e:	b29a      	uxth	r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d114      	bne.n	8012d58 <I2C_SlaveTransmit_TXE+0x72>
 8012d2e:	7bfb      	ldrb	r3, [r7, #15]
 8012d30:	2b29      	cmp	r3, #41	; 0x29
 8012d32:	d111      	bne.n	8012d58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	685a      	ldr	r2, [r3, #4]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2221      	movs	r2, #33	; 0x21
 8012d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2228      	movs	r2, #40	; 0x28
 8012d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff fa04 	bl	8012160 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8012d58:	bf00      	nop
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b083      	sub	sp, #12
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d011      	beq.n	8012d96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d76:	781a      	ldrb	r2, [r3, #0]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d82:	1c5a      	adds	r2, r3, #1
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8012d96:	bf00      	nop
 8012d98:	370c      	adds	r7, #12
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr

08012da2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b084      	sub	sp, #16
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012db0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d02c      	beq.n	8012e16 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	691a      	ldr	r2, [r3, #16]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc6:	b2d2      	uxtb	r2, r2
 8012dc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dce:	1c5a      	adds	r2, r3, #1
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d114      	bne.n	8012e16 <I2C_SlaveReceive_RXNE+0x74>
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
 8012dee:	2b2a      	cmp	r3, #42	; 0x2a
 8012df0:	d111      	bne.n	8012e16 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	685a      	ldr	r2, [r3, #4]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2222      	movs	r2, #34	; 0x22
 8012e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2228      	movs	r2, #40	; 0x28
 8012e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff f9af 	bl	8012174 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}

08012e1e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8012e1e:	b480      	push	{r7}
 8012e20:	b083      	sub	sp, #12
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d012      	beq.n	8012e56 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	691a      	ldr	r2, [r3, #16]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3a:	b2d2      	uxtb	r2, r2
 8012e3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e42:	1c5a      	adds	r2, r3, #1
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr

08012e62 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b084      	sub	sp, #16
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	6078      	str	r0, [r7, #4]
 8012e6a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012e7c:	2b28      	cmp	r3, #40	; 0x28
 8012e7e:	d127      	bne.n	8012ed0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	685a      	ldr	r2, [r3, #4]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e8e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	089b      	lsrs	r3, r3, #2
 8012e94:	f003 0301 	and.w	r3, r3, #1
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d101      	bne.n	8012ea0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	09db      	lsrs	r3, r3, #7
 8012ea4:	f003 0301 	and.w	r3, r3, #1
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d103      	bne.n	8012eb4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	81bb      	strh	r3, [r7, #12]
 8012eb2:	e002      	b.n	8012eba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	699b      	ldr	r3, [r3, #24]
 8012eb8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8012ec2:	89ba      	ldrh	r2, [r7, #12]
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7ff f95d 	bl	8012188 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8012ece:	e008      	b.n	8012ee2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	f06f 0202 	mvn.w	r2, #2
 8012ed8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2200      	movs	r2, #0
 8012ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8012ee2:	bf00      	nop
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
	...

08012eec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012efa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012f0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	60bb      	str	r3, [r7, #8]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	60bb      	str	r3, [r7, #8]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f042 0201 	orr.w	r2, r2, #1
 8012f26:	601a      	str	r2, [r3, #0]
 8012f28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f48:	d172      	bne.n	8013030 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012f4a:	7bfb      	ldrb	r3, [r7, #15]
 8012f4c:	2b22      	cmp	r3, #34	; 0x22
 8012f4e:	d002      	beq.n	8012f56 <I2C_Slave_STOPF+0x6a>
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
 8012f52:	2b2a      	cmp	r3, #42	; 0x2a
 8012f54:	d135      	bne.n	8012fc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d005      	beq.n	8012f7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f72:	f043 0204 	orr.w	r2, r3, #4
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	685a      	ldr	r2, [r3, #4]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe f892 	bl	80110b8 <HAL_DMA_GetState>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d049      	beq.n	801302e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f9e:	4a69      	ldr	r2, [pc, #420]	; (8013144 <I2C_Slave_STOPF+0x258>)
 8012fa0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fd feda 	bl	8010d60 <HAL_DMA_Abort_IT>
 8012fac:	4603      	mov	r3, r0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d03d      	beq.n	801302e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012fc0:	e035      	b.n	801302e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	685b      	ldr	r3, [r3, #4]
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d005      	beq.n	8012fe6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fde:	f043 0204 	orr.w	r2, r3, #4
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	685a      	ldr	r2, [r3, #4]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012ff4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fe f85c 	bl	80110b8 <HAL_DMA_GetState>
 8013000:	4603      	mov	r3, r0
 8013002:	2b01      	cmp	r3, #1
 8013004:	d014      	beq.n	8013030 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801300a:	4a4e      	ldr	r2, [pc, #312]	; (8013144 <I2C_Slave_STOPF+0x258>)
 801300c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013012:	4618      	mov	r0, r3
 8013014:	f7fd fea4 	bl	8010d60 <HAL_DMA_Abort_IT>
 8013018:	4603      	mov	r3, r0
 801301a:	2b00      	cmp	r3, #0
 801301c:	d008      	beq.n	8013030 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013028:	4610      	mov	r0, r2
 801302a:	4798      	blx	r3
 801302c:	e000      	b.n	8013030 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801302e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013034:	b29b      	uxth	r3, r3
 8013036:	2b00      	cmp	r3, #0
 8013038:	d03e      	beq.n	80130b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	695b      	ldr	r3, [r3, #20]
 8013040:	f003 0304 	and.w	r3, r3, #4
 8013044:	2b04      	cmp	r3, #4
 8013046:	d112      	bne.n	801306e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	691a      	ldr	r2, [r3, #16]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013052:	b2d2      	uxtb	r2, r2
 8013054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801305a:	1c5a      	adds	r2, r3, #1
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013064:	b29b      	uxth	r3, r3
 8013066:	3b01      	subs	r3, #1
 8013068:	b29a      	uxth	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	695b      	ldr	r3, [r3, #20]
 8013074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013078:	2b40      	cmp	r3, #64	; 0x40
 801307a:	d112      	bne.n	80130a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	691a      	ldr	r2, [r3, #16]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013086:	b2d2      	uxtb	r2, r2
 8013088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013098:	b29b      	uxth	r3, r3
 801309a:	3b01      	subs	r3, #1
 801309c:	b29a      	uxth	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d005      	beq.n	80130b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b0:	f043 0204 	orr.w	r2, r3, #4
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d003      	beq.n	80130c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f000 f8b3 	bl	801322c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80130c6:	e039      	b.n	801313c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80130c8:	7bfb      	ldrb	r3, [r7, #15]
 80130ca:	2b2a      	cmp	r3, #42	; 0x2a
 80130cc:	d109      	bne.n	80130e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2228      	movs	r2, #40	; 0x28
 80130d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ff f849 	bl	8012174 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	2b28      	cmp	r3, #40	; 0x28
 80130ec:	d111      	bne.n	8013112 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4a15      	ldr	r2, [pc, #84]	; (8013148 <I2C_Slave_STOPF+0x25c>)
 80130f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2220      	movs	r2, #32
 80130fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f7ff f84a 	bl	80121a4 <HAL_I2C_ListenCpltCallback>
}
 8013110:	e014      	b.n	801313c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013116:	2b22      	cmp	r3, #34	; 0x22
 8013118:	d002      	beq.n	8013120 <I2C_Slave_STOPF+0x234>
 801311a:	7bfb      	ldrb	r3, [r7, #15]
 801311c:	2b22      	cmp	r3, #34	; 0x22
 801311e:	d10d      	bne.n	801313c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2220      	movs	r2, #32
 801312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7ff f81c 	bl	8012174 <HAL_I2C_SlaveRxCpltCallback>
}
 801313c:	bf00      	nop
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	080136b5 	.word	0x080136b5
 8013148:	ffff0000 	.word	0xffff0000

0801314c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801315a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013160:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	2b08      	cmp	r3, #8
 8013166:	d002      	beq.n	801316e <I2C_Slave_AF+0x22>
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	2b20      	cmp	r3, #32
 801316c:	d129      	bne.n	80131c2 <I2C_Slave_AF+0x76>
 801316e:	7bfb      	ldrb	r3, [r7, #15]
 8013170:	2b28      	cmp	r3, #40	; 0x28
 8013172:	d126      	bne.n	80131c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	4a2c      	ldr	r2, [pc, #176]	; (8013228 <I2C_Slave_AF+0xdc>)
 8013178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013188:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013192:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80131a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2220      	movs	r2, #32
 80131ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f7fe fff2 	bl	80121a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80131c0:	e02e      	b.n	8013220 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
 80131c4:	2b21      	cmp	r3, #33	; 0x21
 80131c6:	d126      	bne.n	8013216 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4a17      	ldr	r2, [pc, #92]	; (8013228 <I2C_Slave_AF+0xdc>)
 80131cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2221      	movs	r2, #33	; 0x21
 80131d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2220      	movs	r2, #32
 80131d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2200      	movs	r2, #0
 80131e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	685a      	ldr	r2, [r3, #4]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80131f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80131fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801320c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7fe ffa6 	bl	8012160 <HAL_I2C_SlaveTxCpltCallback>
}
 8013214:	e004      	b.n	8013220 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801321e:	615a      	str	r2, [r3, #20]
}
 8013220:	bf00      	nop
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	ffff0000 	.word	0xffff0000

0801322c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801323a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013242:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8013244:	7bbb      	ldrb	r3, [r7, #14]
 8013246:	2b10      	cmp	r3, #16
 8013248:	d002      	beq.n	8013250 <I2C_ITError+0x24>
 801324a:	7bbb      	ldrb	r3, [r7, #14]
 801324c:	2b40      	cmp	r3, #64	; 0x40
 801324e:	d10a      	bne.n	8013266 <I2C_ITError+0x3a>
 8013250:	7bfb      	ldrb	r3, [r7, #15]
 8013252:	2b22      	cmp	r3, #34	; 0x22
 8013254:	d107      	bne.n	8013266 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013264:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801326c:	2b28      	cmp	r3, #40	; 0x28
 801326e:	d107      	bne.n	8013280 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2228      	movs	r2, #40	; 0x28
 801327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801327e:	e015      	b.n	80132ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801328a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801328e:	d00a      	beq.n	80132a6 <I2C_ITError+0x7a>
 8013290:	7bfb      	ldrb	r3, [r7, #15]
 8013292:	2b60      	cmp	r3, #96	; 0x60
 8013294:	d007      	beq.n	80132a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2220      	movs	r2, #32
 801329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80132b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80132ba:	d162      	bne.n	8013382 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	685a      	ldr	r2, [r3, #4]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80132ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d020      	beq.n	801331c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132de:	4a6a      	ldr	r2, [pc, #424]	; (8013488 <I2C_ITError+0x25c>)
 80132e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fd fd3a 	bl	8010d60 <HAL_DMA_Abort_IT>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 8089 	beq.w	8013406 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	f022 0201 	bic.w	r2, r2, #1
 8013302:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2220      	movs	r2, #32
 8013308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013316:	4610      	mov	r0, r2
 8013318:	4798      	blx	r3
 801331a:	e074      	b.n	8013406 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013320:	4a59      	ldr	r2, [pc, #356]	; (8013488 <I2C_ITError+0x25c>)
 8013322:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013328:	4618      	mov	r0, r3
 801332a:	f7fd fd19 	bl	8010d60 <HAL_DMA_Abort_IT>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d068      	beq.n	8013406 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	695b      	ldr	r3, [r3, #20]
 801333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801333e:	2b40      	cmp	r3, #64	; 0x40
 8013340:	d10b      	bne.n	801335a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	691a      	ldr	r2, [r3, #16]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334c:	b2d2      	uxtb	r2, r2
 801334e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013354:	1c5a      	adds	r2, r3, #1
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f022 0201 	bic.w	r2, r2, #1
 8013368:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2220      	movs	r2, #32
 801336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801337c:	4610      	mov	r0, r2
 801337e:	4798      	blx	r3
 8013380:	e041      	b.n	8013406 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b60      	cmp	r3, #96	; 0x60
 801338c:	d125      	bne.n	80133da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2220      	movs	r2, #32
 8013392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	695b      	ldr	r3, [r3, #20]
 80133a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133a6:	2b40      	cmp	r3, #64	; 0x40
 80133a8:	d10b      	bne.n	80133c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	691a      	ldr	r2, [r3, #16]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b4:	b2d2      	uxtb	r2, r2
 80133b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133bc:	1c5a      	adds	r2, r3, #1
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f022 0201 	bic.w	r2, r2, #1
 80133d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7fe ff0e 	bl	80121f4 <HAL_I2C_AbortCpltCallback>
 80133d8:	e015      	b.n	8013406 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	695b      	ldr	r3, [r3, #20]
 80133e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133e4:	2b40      	cmp	r3, #64	; 0x40
 80133e6:	d10b      	bne.n	8013400 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	691a      	ldr	r2, [r3, #16]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f2:	b2d2      	uxtb	r2, r2
 80133f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fa:	1c5a      	adds	r2, r3, #1
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7fe feed 	bl	80121e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10e      	bne.n	8013434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801341c:	2b00      	cmp	r3, #0
 801341e:	d109      	bne.n	8013434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8013426:	2b00      	cmp	r3, #0
 8013428:	d104      	bne.n	8013434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8013430:	2b00      	cmp	r3, #0
 8013432:	d007      	beq.n	8013444 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	685a      	ldr	r2, [r3, #4]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8013442:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801344a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013450:	f003 0304 	and.w	r3, r3, #4
 8013454:	2b04      	cmp	r3, #4
 8013456:	d113      	bne.n	8013480 <I2C_ITError+0x254>
 8013458:	7bfb      	ldrb	r3, [r7, #15]
 801345a:	2b28      	cmp	r3, #40	; 0x28
 801345c:	d110      	bne.n	8013480 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	4a0a      	ldr	r2, [pc, #40]	; (801348c <I2C_ITError+0x260>)
 8013462:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2220      	movs	r2, #32
 801346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2200      	movs	r2, #0
 8013476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7fe fe92 	bl	80121a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8013480:	bf00      	nop
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	080136b5 	.word	0x080136b5
 801348c:	ffff0000 	.word	0xffff0000

08013490 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801349c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80134a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80134ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80134c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d003      	beq.n	80134d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134d0:	2200      	movs	r2, #0
 80134d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d003      	beq.n	80134e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134e0:	2200      	movs	r2, #0
 80134e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80134e4:	7cfb      	ldrb	r3, [r7, #19]
 80134e6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80134ea:	2b21      	cmp	r3, #33	; 0x21
 80134ec:	d007      	beq.n	80134fe <I2C_DMAXferCplt+0x6e>
 80134ee:	7cfb      	ldrb	r3, [r7, #19]
 80134f0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80134f4:	2b22      	cmp	r3, #34	; 0x22
 80134f6:	d131      	bne.n	801355c <I2C_DMAXferCplt+0xcc>
 80134f8:	7cbb      	ldrb	r3, [r7, #18]
 80134fa:	2b20      	cmp	r3, #32
 80134fc:	d12e      	bne.n	801355c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	685a      	ldr	r2, [r3, #4]
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801350c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	2200      	movs	r2, #0
 8013512:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8013514:	7cfb      	ldrb	r3, [r7, #19]
 8013516:	2b29      	cmp	r3, #41	; 0x29
 8013518:	d10a      	bne.n	8013530 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2221      	movs	r2, #33	; 0x21
 801351e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	2228      	movs	r2, #40	; 0x28
 8013524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013528:	6978      	ldr	r0, [r7, #20]
 801352a:	f7fe fe19 	bl	8012160 <HAL_I2C_SlaveTxCpltCallback>
 801352e:	e00c      	b.n	801354a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013530:	7cfb      	ldrb	r3, [r7, #19]
 8013532:	2b2a      	cmp	r3, #42	; 0x2a
 8013534:	d109      	bne.n	801354a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	2222      	movs	r2, #34	; 0x22
 801353a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	2228      	movs	r2, #40	; 0x28
 8013540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8013544:	6978      	ldr	r0, [r7, #20]
 8013546:	f7fe fe15 	bl	8012174 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	685a      	ldr	r2, [r3, #4]
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8013558:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801355a:	e06a      	b.n	8013632 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013562:	b2db      	uxtb	r3, r3
 8013564:	2b00      	cmp	r3, #0
 8013566:	d064      	beq.n	8013632 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801356c:	b29b      	uxth	r3, r3
 801356e:	2b01      	cmp	r3, #1
 8013570:	d107      	bne.n	8013582 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013580:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	685a      	ldr	r2, [r3, #4]
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013590:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013598:	d009      	beq.n	80135ae <I2C_DMAXferCplt+0x11e>
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2b08      	cmp	r3, #8
 801359e:	d006      	beq.n	80135ae <I2C_DMAXferCplt+0x11e>
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80135a6:	d002      	beq.n	80135ae <I2C_DMAXferCplt+0x11e>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2b20      	cmp	r3, #32
 80135ac:	d107      	bne.n	80135be <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	685a      	ldr	r2, [r3, #4]
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80135cc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	685a      	ldr	r2, [r3, #4]
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80135dc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	2200      	movs	r2, #0
 80135e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d003      	beq.n	80135f4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80135ec:	6978      	ldr	r0, [r7, #20]
 80135ee:	f7fe fdf7 	bl	80121e0 <HAL_I2C_ErrorCallback>
}
 80135f2:	e01e      	b.n	8013632 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2220      	movs	r2, #32
 80135f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b40      	cmp	r3, #64	; 0x40
 8013606:	d10a      	bne.n	801361e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	2200      	movs	r2, #0
 801360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	2200      	movs	r2, #0
 8013614:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8013616:	6978      	ldr	r0, [r7, #20]
 8013618:	f7fe fdd8 	bl	80121cc <HAL_I2C_MemRxCpltCallback>
}
 801361c:	e009      	b.n	8013632 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	2200      	movs	r2, #0
 8013622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2212      	movs	r2, #18
 801362a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801362c:	6978      	ldr	r0, [r7, #20]
 801362e:	f7f9 f84d 	bl	800c6cc <HAL_I2C_MasterRxCpltCallback>
}
 8013632:	bf00      	nop
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b084      	sub	sp, #16
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013646:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801364c:	2b00      	cmp	r3, #0
 801364e:	d003      	beq.n	8013658 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013654:	2200      	movs	r2, #0
 8013656:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801365c:	2b00      	cmp	r3, #0
 801365e:	d003      	beq.n	8013668 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013664:	2200      	movs	r2, #0
 8013666:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7fd fd33 	bl	80110d4 <HAL_DMA_GetError>
 801366e:	4603      	mov	r3, r0
 8013670:	2b02      	cmp	r3, #2
 8013672:	d01b      	beq.n	80136ac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013682:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2220      	movs	r2, #32
 801368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2200      	movs	r2, #0
 8013696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801369e:	f043 0210 	orr.w	r2, r3, #16
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7fe fd9a 	bl	80121e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80136ac:	bf00      	nop
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80136bc:	2300      	movs	r3, #0
 80136be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80136cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80136ce:	4b4b      	ldr	r3, [pc, #300]	; (80137fc <I2C_DMAAbort+0x148>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	08db      	lsrs	r3, r3, #3
 80136d4:	4a4a      	ldr	r2, [pc, #296]	; (8013800 <I2C_DMAAbort+0x14c>)
 80136d6:	fba2 2303 	umull	r2, r3, r2, r3
 80136da:	0a1a      	lsrs	r2, r3, #8
 80136dc:	4613      	mov	r3, r2
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	4413      	add	r3, r2
 80136e2:	00da      	lsls	r2, r3, #3
 80136e4:	1ad3      	subs	r3, r2, r3
 80136e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f2:	f043 0220 	orr.w	r2, r3, #32
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80136fa:	e00a      	b.n	8013712 <I2C_DMAAbort+0x5e>
    }
    count--;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	3b01      	subs	r3, #1
 8013700:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013710:	d0ea      	beq.n	80136e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013716:	2b00      	cmp	r3, #0
 8013718:	d003      	beq.n	8013722 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801371e:	2200      	movs	r2, #0
 8013720:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801372e:	2200      	movs	r2, #0
 8013730:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013740:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	2200      	movs	r2, #0
 8013746:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801374c:	2b00      	cmp	r3, #0
 801374e:	d003      	beq.n	8013758 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013754:	2200      	movs	r2, #0
 8013756:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801375c:	2b00      	cmp	r3, #0
 801375e:	d003      	beq.n	8013768 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013764:	2200      	movs	r2, #0
 8013766:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f022 0201 	bic.w	r2, r2, #1
 8013776:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801377e:	b2db      	uxtb	r3, r3
 8013780:	2b60      	cmp	r3, #96	; 0x60
 8013782:	d10e      	bne.n	80137a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	2220      	movs	r2, #32
 8013788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	2200      	movs	r2, #0
 8013790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	2200      	movs	r2, #0
 8013798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801379a:	6978      	ldr	r0, [r7, #20]
 801379c:	f7fe fd2a 	bl	80121f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80137a0:	e027      	b.n	80137f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80137a2:	7cfb      	ldrb	r3, [r7, #19]
 80137a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80137a8:	2b28      	cmp	r3, #40	; 0x28
 80137aa:	d117      	bne.n	80137dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f042 0201 	orr.w	r2, r2, #1
 80137ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80137ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	2200      	movs	r2, #0
 80137d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2228      	movs	r2, #40	; 0x28
 80137d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80137da:	e007      	b.n	80137ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	2220      	movs	r2, #32
 80137e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80137ec:	6978      	ldr	r0, [r7, #20]
 80137ee:	f7fe fcf7 	bl	80121e0 <HAL_I2C_ErrorCallback>
}
 80137f2:	bf00      	nop
 80137f4:	3718      	adds	r7, #24
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	bf00      	nop
 80137fc:	20000000 	.word	0x20000000
 8013800:	14f8b589 	.word	0x14f8b589

08013804 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8013804:	b480      	push	{r7}
 8013806:	b085      	sub	sp, #20
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801380c:	2300      	movs	r3, #0
 801380e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8013810:	4b13      	ldr	r3, [pc, #76]	; (8013860 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	08db      	lsrs	r3, r3, #3
 8013816:	4a13      	ldr	r2, [pc, #76]	; (8013864 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8013818:	fba2 2303 	umull	r2, r3, r2, r3
 801381c:	0a1a      	lsrs	r2, r3, #8
 801381e:	4613      	mov	r3, r2
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	4413      	add	r3, r2
 8013824:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	3b01      	subs	r3, #1
 801382a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d107      	bne.n	8013842 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013836:	f043 0220 	orr.w	r2, r3, #32
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801383e:	2301      	movs	r3, #1
 8013840:	e008      	b.n	8013854 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013850:	d0e9      	beq.n	8013826 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3714      	adds	r7, #20
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr
 8013860:	20000000 	.word	0x20000000
 8013864:	14f8b589 	.word	0x14f8b589

08013868 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013874:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8013878:	d103      	bne.n	8013882 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2201      	movs	r2, #1
 801387e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8013880:	e007      	b.n	8013892 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013886:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801388a:	d102      	bne.n	8013892 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2208      	movs	r2, #8
 8013890:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8013892:	bf00      	nop
 8013894:	370c      	adds	r7, #12
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
	...

080138a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b086      	sub	sp, #24
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80138ae:	2301      	movs	r3, #1
 80138b0:	e25b      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d075      	beq.n	80139aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80138be:	4ba3      	ldr	r3, [pc, #652]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80138c0:	689b      	ldr	r3, [r3, #8]
 80138c2:	f003 030c 	and.w	r3, r3, #12
 80138c6:	2b04      	cmp	r3, #4
 80138c8:	d00c      	beq.n	80138e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80138ca:	4ba0      	ldr	r3, [pc, #640]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80138d2:	2b08      	cmp	r3, #8
 80138d4:	d112      	bne.n	80138fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80138d6:	4b9d      	ldr	r3, [pc, #628]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80138de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80138e2:	d10b      	bne.n	80138fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80138e4:	4b99      	ldr	r3, [pc, #612]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d05b      	beq.n	80139a8 <HAL_RCC_OscConfig+0x108>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d157      	bne.n	80139a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80138f8:	2301      	movs	r3, #1
 80138fa:	e236      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013904:	d106      	bne.n	8013914 <HAL_RCC_OscConfig+0x74>
 8013906:	4b91      	ldr	r3, [pc, #580]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a90      	ldr	r2, [pc, #576]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013910:	6013      	str	r3, [r2, #0]
 8013912:	e01d      	b.n	8013950 <HAL_RCC_OscConfig+0xb0>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801391c:	d10c      	bne.n	8013938 <HAL_RCC_OscConfig+0x98>
 801391e:	4b8b      	ldr	r3, [pc, #556]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4a8a      	ldr	r2, [pc, #552]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013928:	6013      	str	r3, [r2, #0]
 801392a:	4b88      	ldr	r3, [pc, #544]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a87      	ldr	r2, [pc, #540]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013934:	6013      	str	r3, [r2, #0]
 8013936:	e00b      	b.n	8013950 <HAL_RCC_OscConfig+0xb0>
 8013938:	4b84      	ldr	r3, [pc, #528]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a83      	ldr	r2, [pc, #524]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013942:	6013      	str	r3, [r2, #0]
 8013944:	4b81      	ldr	r3, [pc, #516]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	4a80      	ldr	r2, [pc, #512]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d013      	beq.n	8013980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013958:	f7fc f8c4 	bl	800fae4 <HAL_GetTick>
 801395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801395e:	e008      	b.n	8013972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013960:	f7fc f8c0 	bl	800fae4 <HAL_GetTick>
 8013964:	4602      	mov	r2, r0
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	2b64      	cmp	r3, #100	; 0x64
 801396c:	d901      	bls.n	8013972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801396e:	2303      	movs	r3, #3
 8013970:	e1fb      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013972:	4b76      	ldr	r3, [pc, #472]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0f0      	beq.n	8013960 <HAL_RCC_OscConfig+0xc0>
 801397e:	e014      	b.n	80139aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013980:	f7fc f8b0 	bl	800fae4 <HAL_GetTick>
 8013984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013986:	e008      	b.n	801399a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013988:	f7fc f8ac 	bl	800fae4 <HAL_GetTick>
 801398c:	4602      	mov	r2, r0
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	2b64      	cmp	r3, #100	; 0x64
 8013994:	d901      	bls.n	801399a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013996:	2303      	movs	r3, #3
 8013998:	e1e7      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801399a:	4b6c      	ldr	r3, [pc, #432]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1f0      	bne.n	8013988 <HAL_RCC_OscConfig+0xe8>
 80139a6:	e000      	b.n	80139aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80139a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	f003 0302 	and.w	r3, r3, #2
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d063      	beq.n	8013a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80139b6:	4b65      	ldr	r3, [pc, #404]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80139b8:	689b      	ldr	r3, [r3, #8]
 80139ba:	f003 030c 	and.w	r3, r3, #12
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d00b      	beq.n	80139da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80139c2:	4b62      	ldr	r3, [pc, #392]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80139ca:	2b08      	cmp	r3, #8
 80139cc:	d11c      	bne.n	8013a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80139ce:	4b5f      	ldr	r3, [pc, #380]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d116      	bne.n	8013a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80139da:	4b5c      	ldr	r3, [pc, #368]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f003 0302 	and.w	r3, r3, #2
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d005      	beq.n	80139f2 <HAL_RCC_OscConfig+0x152>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d001      	beq.n	80139f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80139ee:	2301      	movs	r3, #1
 80139f0:	e1bb      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80139f2:	4b56      	ldr	r3, [pc, #344]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	691b      	ldr	r3, [r3, #16]
 80139fe:	00db      	lsls	r3, r3, #3
 8013a00:	4952      	ldr	r1, [pc, #328]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013a02:	4313      	orrs	r3, r2
 8013a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013a06:	e03a      	b.n	8013a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d020      	beq.n	8013a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013a10:	4b4f      	ldr	r3, [pc, #316]	; (8013b50 <HAL_RCC_OscConfig+0x2b0>)
 8013a12:	2201      	movs	r2, #1
 8013a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a16:	f7fc f865 	bl	800fae4 <HAL_GetTick>
 8013a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013a1c:	e008      	b.n	8013a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013a1e:	f7fc f861 	bl	800fae4 <HAL_GetTick>
 8013a22:	4602      	mov	r2, r0
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	2b02      	cmp	r3, #2
 8013a2a:	d901      	bls.n	8013a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013a2c:	2303      	movs	r3, #3
 8013a2e:	e19c      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013a30:	4b46      	ldr	r3, [pc, #280]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f003 0302 	and.w	r3, r3, #2
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d0f0      	beq.n	8013a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a3c:	4b43      	ldr	r3, [pc, #268]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	691b      	ldr	r3, [r3, #16]
 8013a48:	00db      	lsls	r3, r3, #3
 8013a4a:	4940      	ldr	r1, [pc, #256]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013a4c:	4313      	orrs	r3, r2
 8013a4e:	600b      	str	r3, [r1, #0]
 8013a50:	e015      	b.n	8013a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013a52:	4b3f      	ldr	r3, [pc, #252]	; (8013b50 <HAL_RCC_OscConfig+0x2b0>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013a58:	f7fc f844 	bl	800fae4 <HAL_GetTick>
 8013a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013a5e:	e008      	b.n	8013a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013a60:	f7fc f840 	bl	800fae4 <HAL_GetTick>
 8013a64:	4602      	mov	r2, r0
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d901      	bls.n	8013a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013a6e:	2303      	movs	r3, #3
 8013a70:	e17b      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013a72:	4b36      	ldr	r3, [pc, #216]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f003 0302 	and.w	r3, r3, #2
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1f0      	bne.n	8013a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	f003 0308 	and.w	r3, r3, #8
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d030      	beq.n	8013aec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d016      	beq.n	8013ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013a92:	4b30      	ldr	r3, [pc, #192]	; (8013b54 <HAL_RCC_OscConfig+0x2b4>)
 8013a94:	2201      	movs	r2, #1
 8013a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a98:	f7fc f824 	bl	800fae4 <HAL_GetTick>
 8013a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013a9e:	e008      	b.n	8013ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013aa0:	f7fc f820 	bl	800fae4 <HAL_GetTick>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	1ad3      	subs	r3, r2, r3
 8013aaa:	2b02      	cmp	r3, #2
 8013aac:	d901      	bls.n	8013ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	e15b      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013ab2:	4b26      	ldr	r3, [pc, #152]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ab6:	f003 0302 	and.w	r3, r3, #2
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d0f0      	beq.n	8013aa0 <HAL_RCC_OscConfig+0x200>
 8013abe:	e015      	b.n	8013aec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013ac0:	4b24      	ldr	r3, [pc, #144]	; (8013b54 <HAL_RCC_OscConfig+0x2b4>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013ac6:	f7fc f80d 	bl	800fae4 <HAL_GetTick>
 8013aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013acc:	e008      	b.n	8013ae0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013ace:	f7fc f809 	bl	800fae4 <HAL_GetTick>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d901      	bls.n	8013ae0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013adc:	2303      	movs	r3, #3
 8013ade:	e144      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ae0:	4b1a      	ldr	r3, [pc, #104]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ae4:	f003 0302 	and.w	r3, r3, #2
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1f0      	bne.n	8013ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f003 0304 	and.w	r3, r3, #4
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f000 80a0 	beq.w	8013c3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013afa:	2300      	movs	r3, #0
 8013afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013afe:	4b13      	ldr	r3, [pc, #76]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d10f      	bne.n	8013b2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	60bb      	str	r3, [r7, #8]
 8013b0e:	4b0f      	ldr	r3, [pc, #60]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b12:	4a0e      	ldr	r2, [pc, #56]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b18:	6413      	str	r3, [r2, #64]	; 0x40
 8013b1a:	4b0c      	ldr	r3, [pc, #48]	; (8013b4c <HAL_RCC_OscConfig+0x2ac>)
 8013b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b22:	60bb      	str	r3, [r7, #8]
 8013b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013b26:	2301      	movs	r3, #1
 8013b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b2a:	4b0b      	ldr	r3, [pc, #44]	; (8013b58 <HAL_RCC_OscConfig+0x2b8>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d121      	bne.n	8013b7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013b36:	4b08      	ldr	r3, [pc, #32]	; (8013b58 <HAL_RCC_OscConfig+0x2b8>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	4a07      	ldr	r2, [pc, #28]	; (8013b58 <HAL_RCC_OscConfig+0x2b8>)
 8013b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b42:	f7fb ffcf 	bl	800fae4 <HAL_GetTick>
 8013b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b48:	e011      	b.n	8013b6e <HAL_RCC_OscConfig+0x2ce>
 8013b4a:	bf00      	nop
 8013b4c:	40023800 	.word	0x40023800
 8013b50:	42470000 	.word	0x42470000
 8013b54:	42470e80 	.word	0x42470e80
 8013b58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b5c:	f7fb ffc2 	bl	800fae4 <HAL_GetTick>
 8013b60:	4602      	mov	r2, r0
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	1ad3      	subs	r3, r2, r3
 8013b66:	2b02      	cmp	r3, #2
 8013b68:	d901      	bls.n	8013b6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013b6a:	2303      	movs	r3, #3
 8013b6c:	e0fd      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b6e:	4b81      	ldr	r3, [pc, #516]	; (8013d74 <HAL_RCC_OscConfig+0x4d4>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d0f0      	beq.n	8013b5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d106      	bne.n	8013b90 <HAL_RCC_OscConfig+0x2f0>
 8013b82:	4b7d      	ldr	r3, [pc, #500]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b86:	4a7c      	ldr	r2, [pc, #496]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013b88:	f043 0301 	orr.w	r3, r3, #1
 8013b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8013b8e:	e01c      	b.n	8013bca <HAL_RCC_OscConfig+0x32a>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	689b      	ldr	r3, [r3, #8]
 8013b94:	2b05      	cmp	r3, #5
 8013b96:	d10c      	bne.n	8013bb2 <HAL_RCC_OscConfig+0x312>
 8013b98:	4b77      	ldr	r3, [pc, #476]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b9c:	4a76      	ldr	r2, [pc, #472]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013b9e:	f043 0304 	orr.w	r3, r3, #4
 8013ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8013ba4:	4b74      	ldr	r3, [pc, #464]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ba8:	4a73      	ldr	r2, [pc, #460]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013baa:	f043 0301 	orr.w	r3, r3, #1
 8013bae:	6713      	str	r3, [r2, #112]	; 0x70
 8013bb0:	e00b      	b.n	8013bca <HAL_RCC_OscConfig+0x32a>
 8013bb2:	4b71      	ldr	r3, [pc, #452]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bb6:	4a70      	ldr	r2, [pc, #448]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013bb8:	f023 0301 	bic.w	r3, r3, #1
 8013bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8013bbe:	4b6e      	ldr	r3, [pc, #440]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bc2:	4a6d      	ldr	r2, [pc, #436]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013bc4:	f023 0304 	bic.w	r3, r3, #4
 8013bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d015      	beq.n	8013bfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013bd2:	f7fb ff87 	bl	800fae4 <HAL_GetTick>
 8013bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013bd8:	e00a      	b.n	8013bf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013bda:	f7fb ff83 	bl	800fae4 <HAL_GetTick>
 8013bde:	4602      	mov	r2, r0
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	1ad3      	subs	r3, r2, r3
 8013be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013be8:	4293      	cmp	r3, r2
 8013bea:	d901      	bls.n	8013bf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013bec:	2303      	movs	r3, #3
 8013bee:	e0bc      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013bf0:	4b61      	ldr	r3, [pc, #388]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bf4:	f003 0302 	and.w	r3, r3, #2
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d0ee      	beq.n	8013bda <HAL_RCC_OscConfig+0x33a>
 8013bfc:	e014      	b.n	8013c28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013bfe:	f7fb ff71 	bl	800fae4 <HAL_GetTick>
 8013c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013c04:	e00a      	b.n	8013c1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013c06:	f7fb ff6d 	bl	800fae4 <HAL_GetTick>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	1ad3      	subs	r3, r2, r3
 8013c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d901      	bls.n	8013c1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013c18:	2303      	movs	r3, #3
 8013c1a:	e0a6      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013c1c:	4b56      	ldr	r3, [pc, #344]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c20:	f003 0302 	and.w	r3, r3, #2
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d1ee      	bne.n	8013c06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013c28:	7dfb      	ldrb	r3, [r7, #23]
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d105      	bne.n	8013c3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013c2e:	4b52      	ldr	r3, [pc, #328]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c32:	4a51      	ldr	r2, [pc, #324]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	699b      	ldr	r3, [r3, #24]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	f000 8092 	beq.w	8013d68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013c44:	4b4c      	ldr	r3, [pc, #304]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013c46:	689b      	ldr	r3, [r3, #8]
 8013c48:	f003 030c 	and.w	r3, r3, #12
 8013c4c:	2b08      	cmp	r3, #8
 8013c4e:	d05c      	beq.n	8013d0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	699b      	ldr	r3, [r3, #24]
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	d141      	bne.n	8013cdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013c58:	4b48      	ldr	r3, [pc, #288]	; (8013d7c <HAL_RCC_OscConfig+0x4dc>)
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c5e:	f7fb ff41 	bl	800fae4 <HAL_GetTick>
 8013c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c64:	e008      	b.n	8013c78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013c66:	f7fb ff3d 	bl	800fae4 <HAL_GetTick>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	2b02      	cmp	r3, #2
 8013c72:	d901      	bls.n	8013c78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013c74:	2303      	movs	r3, #3
 8013c76:	e078      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c78:	4b3f      	ldr	r3, [pc, #252]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d1f0      	bne.n	8013c66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	69da      	ldr	r2, [r3, #28]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6a1b      	ldr	r3, [r3, #32]
 8013c8c:	431a      	orrs	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c92:	019b      	lsls	r3, r3, #6
 8013c94:	431a      	orrs	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c9a:	085b      	lsrs	r3, r3, #1
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	041b      	lsls	r3, r3, #16
 8013ca0:	431a      	orrs	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca6:	061b      	lsls	r3, r3, #24
 8013ca8:	4933      	ldr	r1, [pc, #204]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013caa:	4313      	orrs	r3, r2
 8013cac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013cae:	4b33      	ldr	r3, [pc, #204]	; (8013d7c <HAL_RCC_OscConfig+0x4dc>)
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013cb4:	f7fb ff16 	bl	800fae4 <HAL_GetTick>
 8013cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013cba:	e008      	b.n	8013cce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013cbc:	f7fb ff12 	bl	800fae4 <HAL_GetTick>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	693b      	ldr	r3, [r7, #16]
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	2b02      	cmp	r3, #2
 8013cc8:	d901      	bls.n	8013cce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013cca:	2303      	movs	r3, #3
 8013ccc:	e04d      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013cce:	4b2a      	ldr	r3, [pc, #168]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d0f0      	beq.n	8013cbc <HAL_RCC_OscConfig+0x41c>
 8013cda:	e045      	b.n	8013d68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013cdc:	4b27      	ldr	r3, [pc, #156]	; (8013d7c <HAL_RCC_OscConfig+0x4dc>)
 8013cde:	2200      	movs	r2, #0
 8013ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ce2:	f7fb feff 	bl	800fae4 <HAL_GetTick>
 8013ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013ce8:	e008      	b.n	8013cfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013cea:	f7fb fefb 	bl	800fae4 <HAL_GetTick>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	1ad3      	subs	r3, r2, r3
 8013cf4:	2b02      	cmp	r3, #2
 8013cf6:	d901      	bls.n	8013cfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	e036      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013cfc:	4b1e      	ldr	r3, [pc, #120]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d1f0      	bne.n	8013cea <HAL_RCC_OscConfig+0x44a>
 8013d08:	e02e      	b.n	8013d68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	699b      	ldr	r3, [r3, #24]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d101      	bne.n	8013d16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013d12:	2301      	movs	r3, #1
 8013d14:	e029      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013d16:	4b18      	ldr	r3, [pc, #96]	; (8013d78 <HAL_RCC_OscConfig+0x4d8>)
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	69db      	ldr	r3, [r3, #28]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d11c      	bne.n	8013d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d115      	bne.n	8013d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013d38:	68fa      	ldr	r2, [r7, #12]
 8013d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013d3e:	4013      	ands	r3, r2
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d10d      	bne.n	8013d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d106      	bne.n	8013d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d001      	beq.n	8013d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013d64:	2301      	movs	r3, #1
 8013d66:	e000      	b.n	8013d6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3718      	adds	r7, #24
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	40007000 	.word	0x40007000
 8013d78:	40023800 	.word	0x40023800
 8013d7c:	42470060 	.word	0x42470060

08013d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d101      	bne.n	8013d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013d90:	2301      	movs	r3, #1
 8013d92:	e0cc      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013d94:	4b68      	ldr	r3, [pc, #416]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f003 030f 	and.w	r3, r3, #15
 8013d9c:	683a      	ldr	r2, [r7, #0]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d90c      	bls.n	8013dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013da2:	4b65      	ldr	r3, [pc, #404]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	b2d2      	uxtb	r2, r2
 8013da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013daa:	4b63      	ldr	r3, [pc, #396]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f003 030f 	and.w	r3, r3, #15
 8013db2:	683a      	ldr	r2, [r7, #0]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d001      	beq.n	8013dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013db8:	2301      	movs	r3, #1
 8013dba:	e0b8      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	f003 0302 	and.w	r3, r3, #2
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d020      	beq.n	8013e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f003 0304 	and.w	r3, r3, #4
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d005      	beq.n	8013de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013dd4:	4b59      	ldr	r3, [pc, #356]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013dd6:	689b      	ldr	r3, [r3, #8]
 8013dd8:	4a58      	ldr	r2, [pc, #352]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f003 0308 	and.w	r3, r3, #8
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d005      	beq.n	8013df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013dec:	4b53      	ldr	r3, [pc, #332]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	4a52      	ldr	r2, [pc, #328]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013df8:	4b50      	ldr	r3, [pc, #320]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	689b      	ldr	r3, [r3, #8]
 8013e04:	494d      	ldr	r1, [pc, #308]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e06:	4313      	orrs	r3, r2
 8013e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f003 0301 	and.w	r3, r3, #1
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d044      	beq.n	8013ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d107      	bne.n	8013e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013e1e:	4b47      	ldr	r3, [pc, #284]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d119      	bne.n	8013e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	e07f      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d003      	beq.n	8013e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013e3a:	2b03      	cmp	r3, #3
 8013e3c:	d107      	bne.n	8013e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013e3e:	4b3f      	ldr	r3, [pc, #252]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d109      	bne.n	8013e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e06f      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e4e:	4b3b      	ldr	r3, [pc, #236]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f003 0302 	and.w	r3, r3, #2
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e067      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013e5e:	4b37      	ldr	r3, [pc, #220]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	f023 0203 	bic.w	r2, r3, #3
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	4934      	ldr	r1, [pc, #208]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e6c:	4313      	orrs	r3, r2
 8013e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013e70:	f7fb fe38 	bl	800fae4 <HAL_GetTick>
 8013e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e76:	e00a      	b.n	8013e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013e78:	f7fb fe34 	bl	800fae4 <HAL_GetTick>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	1ad3      	subs	r3, r2, r3
 8013e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d901      	bls.n	8013e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013e8a:	2303      	movs	r3, #3
 8013e8c:	e04f      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013e8e:	4b2b      	ldr	r3, [pc, #172]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013e90:	689b      	ldr	r3, [r3, #8]
 8013e92:	f003 020c 	and.w	r2, r3, #12
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d1eb      	bne.n	8013e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013ea0:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f003 030f 	and.w	r3, r3, #15
 8013ea8:	683a      	ldr	r2, [r7, #0]
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d20c      	bcs.n	8013ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013eae:	4b22      	ldr	r3, [pc, #136]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013eb0:	683a      	ldr	r2, [r7, #0]
 8013eb2:	b2d2      	uxtb	r2, r2
 8013eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013eb6:	4b20      	ldr	r3, [pc, #128]	; (8013f38 <HAL_RCC_ClockConfig+0x1b8>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	f003 030f 	and.w	r3, r3, #15
 8013ebe:	683a      	ldr	r2, [r7, #0]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d001      	beq.n	8013ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e032      	b.n	8013f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f003 0304 	and.w	r3, r3, #4
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d008      	beq.n	8013ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013ed4:	4b19      	ldr	r3, [pc, #100]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	4916      	ldr	r1, [pc, #88]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013ee2:	4313      	orrs	r3, r2
 8013ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f003 0308 	and.w	r3, r3, #8
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d009      	beq.n	8013f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013ef2:	4b12      	ldr	r3, [pc, #72]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	691b      	ldr	r3, [r3, #16]
 8013efe:	00db      	lsls	r3, r3, #3
 8013f00:	490e      	ldr	r1, [pc, #56]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013f02:	4313      	orrs	r3, r2
 8013f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013f06:	f000 f82d 	bl	8013f64 <HAL_RCC_GetSysClockFreq>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	4b0b      	ldr	r3, [pc, #44]	; (8013f3c <HAL_RCC_ClockConfig+0x1bc>)
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	091b      	lsrs	r3, r3, #4
 8013f12:	f003 030f 	and.w	r3, r3, #15
 8013f16:	490a      	ldr	r1, [pc, #40]	; (8013f40 <HAL_RCC_ClockConfig+0x1c0>)
 8013f18:	5ccb      	ldrb	r3, [r1, r3]
 8013f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8013f1e:	4a09      	ldr	r2, [pc, #36]	; (8013f44 <HAL_RCC_ClockConfig+0x1c4>)
 8013f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013f22:	4b09      	ldr	r3, [pc, #36]	; (8013f48 <HAL_RCC_ClockConfig+0x1c8>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7f8 fc0c 	bl	800c744 <HAL_InitTick>

  return HAL_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	40023c00 	.word	0x40023c00
 8013f3c:	40023800 	.word	0x40023800
 8013f40:	0801f4b4 	.word	0x0801f4b4
 8013f44:	20000000 	.word	0x20000000
 8013f48:	2000003c 	.word	0x2000003c

08013f4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8013f50:	4b03      	ldr	r3, [pc, #12]	; (8013f60 <HAL_RCC_EnableCSS+0x14>)
 8013f52:	2201      	movs	r2, #1
 8013f54:	601a      	str	r2, [r3, #0]
}
 8013f56:	bf00      	nop
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	4247004c 	.word	0x4247004c

08013f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013f64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013f68:	b084      	sub	sp, #16
 8013f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	607b      	str	r3, [r7, #4]
 8013f70:	2300      	movs	r3, #0
 8013f72:	60fb      	str	r3, [r7, #12]
 8013f74:	2300      	movs	r3, #0
 8013f76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013f7c:	4b67      	ldr	r3, [pc, #412]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	f003 030c 	and.w	r3, r3, #12
 8013f84:	2b08      	cmp	r3, #8
 8013f86:	d00d      	beq.n	8013fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8013f88:	2b08      	cmp	r3, #8
 8013f8a:	f200 80bd 	bhi.w	8014108 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <HAL_RCC_GetSysClockFreq+0x34>
 8013f92:	2b04      	cmp	r3, #4
 8013f94:	d003      	beq.n	8013f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8013f96:	e0b7      	b.n	8014108 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013f98:	4b61      	ldr	r3, [pc, #388]	; (8014120 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013f9a:	60bb      	str	r3, [r7, #8]
       break;
 8013f9c:	e0b7      	b.n	801410e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013f9e:	4b61      	ldr	r3, [pc, #388]	; (8014124 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013fa0:	60bb      	str	r3, [r7, #8]
      break;
 8013fa2:	e0b4      	b.n	801410e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013fa4:	4b5d      	ldr	r3, [pc, #372]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013fae:	4b5b      	ldr	r3, [pc, #364]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d04d      	beq.n	8014056 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013fba:	4b58      	ldr	r3, [pc, #352]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	099b      	lsrs	r3, r3, #6
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	f04f 0300 	mov.w	r3, #0
 8013fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013fca:	f04f 0100 	mov.w	r1, #0
 8013fce:	ea02 0800 	and.w	r8, r2, r0
 8013fd2:	ea03 0901 	and.w	r9, r3, r1
 8013fd6:	4640      	mov	r0, r8
 8013fd8:	4649      	mov	r1, r9
 8013fda:	f04f 0200 	mov.w	r2, #0
 8013fde:	f04f 0300 	mov.w	r3, #0
 8013fe2:	014b      	lsls	r3, r1, #5
 8013fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013fe8:	0142      	lsls	r2, r0, #5
 8013fea:	4610      	mov	r0, r2
 8013fec:	4619      	mov	r1, r3
 8013fee:	ebb0 0008 	subs.w	r0, r0, r8
 8013ff2:	eb61 0109 	sbc.w	r1, r1, r9
 8013ff6:	f04f 0200 	mov.w	r2, #0
 8013ffa:	f04f 0300 	mov.w	r3, #0
 8013ffe:	018b      	lsls	r3, r1, #6
 8014000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014004:	0182      	lsls	r2, r0, #6
 8014006:	1a12      	subs	r2, r2, r0
 8014008:	eb63 0301 	sbc.w	r3, r3, r1
 801400c:	f04f 0000 	mov.w	r0, #0
 8014010:	f04f 0100 	mov.w	r1, #0
 8014014:	00d9      	lsls	r1, r3, #3
 8014016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801401a:	00d0      	lsls	r0, r2, #3
 801401c:	4602      	mov	r2, r0
 801401e:	460b      	mov	r3, r1
 8014020:	eb12 0208 	adds.w	r2, r2, r8
 8014024:	eb43 0309 	adc.w	r3, r3, r9
 8014028:	f04f 0000 	mov.w	r0, #0
 801402c:	f04f 0100 	mov.w	r1, #0
 8014030:	0259      	lsls	r1, r3, #9
 8014032:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8014036:	0250      	lsls	r0, r2, #9
 8014038:	4602      	mov	r2, r0
 801403a:	460b      	mov	r3, r1
 801403c:	4610      	mov	r0, r2
 801403e:	4619      	mov	r1, r3
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	461a      	mov	r2, r3
 8014044:	f04f 0300 	mov.w	r3, #0
 8014048:	f7ec fe1e 	bl	8000c88 <__aeabi_uldivmod>
 801404c:	4602      	mov	r2, r0
 801404e:	460b      	mov	r3, r1
 8014050:	4613      	mov	r3, r2
 8014052:	60fb      	str	r3, [r7, #12]
 8014054:	e04a      	b.n	80140ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014056:	4b31      	ldr	r3, [pc, #196]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	099b      	lsrs	r3, r3, #6
 801405c:	461a      	mov	r2, r3
 801405e:	f04f 0300 	mov.w	r3, #0
 8014062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014066:	f04f 0100 	mov.w	r1, #0
 801406a:	ea02 0400 	and.w	r4, r2, r0
 801406e:	ea03 0501 	and.w	r5, r3, r1
 8014072:	4620      	mov	r0, r4
 8014074:	4629      	mov	r1, r5
 8014076:	f04f 0200 	mov.w	r2, #0
 801407a:	f04f 0300 	mov.w	r3, #0
 801407e:	014b      	lsls	r3, r1, #5
 8014080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014084:	0142      	lsls	r2, r0, #5
 8014086:	4610      	mov	r0, r2
 8014088:	4619      	mov	r1, r3
 801408a:	1b00      	subs	r0, r0, r4
 801408c:	eb61 0105 	sbc.w	r1, r1, r5
 8014090:	f04f 0200 	mov.w	r2, #0
 8014094:	f04f 0300 	mov.w	r3, #0
 8014098:	018b      	lsls	r3, r1, #6
 801409a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801409e:	0182      	lsls	r2, r0, #6
 80140a0:	1a12      	subs	r2, r2, r0
 80140a2:	eb63 0301 	sbc.w	r3, r3, r1
 80140a6:	f04f 0000 	mov.w	r0, #0
 80140aa:	f04f 0100 	mov.w	r1, #0
 80140ae:	00d9      	lsls	r1, r3, #3
 80140b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80140b4:	00d0      	lsls	r0, r2, #3
 80140b6:	4602      	mov	r2, r0
 80140b8:	460b      	mov	r3, r1
 80140ba:	1912      	adds	r2, r2, r4
 80140bc:	eb45 0303 	adc.w	r3, r5, r3
 80140c0:	f04f 0000 	mov.w	r0, #0
 80140c4:	f04f 0100 	mov.w	r1, #0
 80140c8:	0299      	lsls	r1, r3, #10
 80140ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80140ce:	0290      	lsls	r0, r2, #10
 80140d0:	4602      	mov	r2, r0
 80140d2:	460b      	mov	r3, r1
 80140d4:	4610      	mov	r0, r2
 80140d6:	4619      	mov	r1, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	461a      	mov	r2, r3
 80140dc:	f04f 0300 	mov.w	r3, #0
 80140e0:	f7ec fdd2 	bl	8000c88 <__aeabi_uldivmod>
 80140e4:	4602      	mov	r2, r0
 80140e6:	460b      	mov	r3, r1
 80140e8:	4613      	mov	r3, r2
 80140ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80140ec:	4b0b      	ldr	r3, [pc, #44]	; (801411c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	0c1b      	lsrs	r3, r3, #16
 80140f2:	f003 0303 	and.w	r3, r3, #3
 80140f6:	3301      	adds	r3, #1
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	fbb2 f3f3 	udiv	r3, r2, r3
 8014104:	60bb      	str	r3, [r7, #8]
      break;
 8014106:	e002      	b.n	801410e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014108:	4b05      	ldr	r3, [pc, #20]	; (8014120 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801410a:	60bb      	str	r3, [r7, #8]
      break;
 801410c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801410e:	68bb      	ldr	r3, [r7, #8]
}
 8014110:	4618      	mov	r0, r3
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801411a:	bf00      	nop
 801411c:	40023800 	.word	0x40023800
 8014120:	00f42400 	.word	0x00f42400
 8014124:	007a1200 	.word	0x007a1200

08014128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014128:	b480      	push	{r7}
 801412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801412c:	4b03      	ldr	r3, [pc, #12]	; (801413c <HAL_RCC_GetHCLKFreq+0x14>)
 801412e:	681b      	ldr	r3, [r3, #0]
}
 8014130:	4618      	mov	r0, r3
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop
 801413c:	20000000 	.word	0x20000000

08014140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014144:	f7ff fff0 	bl	8014128 <HAL_RCC_GetHCLKFreq>
 8014148:	4602      	mov	r2, r0
 801414a:	4b05      	ldr	r3, [pc, #20]	; (8014160 <HAL_RCC_GetPCLK1Freq+0x20>)
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	0a9b      	lsrs	r3, r3, #10
 8014150:	f003 0307 	and.w	r3, r3, #7
 8014154:	4903      	ldr	r1, [pc, #12]	; (8014164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014156:	5ccb      	ldrb	r3, [r1, r3]
 8014158:	fa22 f303 	lsr.w	r3, r2, r3
}
 801415c:	4618      	mov	r0, r3
 801415e:	bd80      	pop	{r7, pc}
 8014160:	40023800 	.word	0x40023800
 8014164:	0801f4c4 	.word	0x0801f4c4

08014168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801416c:	f7ff ffdc 	bl	8014128 <HAL_RCC_GetHCLKFreq>
 8014170:	4602      	mov	r2, r0
 8014172:	4b05      	ldr	r3, [pc, #20]	; (8014188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	0b5b      	lsrs	r3, r3, #13
 8014178:	f003 0307 	and.w	r3, r3, #7
 801417c:	4903      	ldr	r1, [pc, #12]	; (801418c <HAL_RCC_GetPCLK2Freq+0x24>)
 801417e:	5ccb      	ldrb	r3, [r1, r3]
 8014180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014184:	4618      	mov	r0, r3
 8014186:	bd80      	pop	{r7, pc}
 8014188:	40023800 	.word	0x40023800
 801418c:	0801f4c4 	.word	0x0801f4c4

08014190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014190:	b480      	push	{r7}
 8014192:	b083      	sub	sp, #12
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	220f      	movs	r2, #15
 801419e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80141a0:	4b12      	ldr	r3, [pc, #72]	; (80141ec <HAL_RCC_GetClockConfig+0x5c>)
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	f003 0203 	and.w	r2, r3, #3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80141ac:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <HAL_RCC_GetClockConfig+0x5c>)
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80141b8:	4b0c      	ldr	r3, [pc, #48]	; (80141ec <HAL_RCC_GetClockConfig+0x5c>)
 80141ba:	689b      	ldr	r3, [r3, #8]
 80141bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80141c4:	4b09      	ldr	r3, [pc, #36]	; (80141ec <HAL_RCC_GetClockConfig+0x5c>)
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	08db      	lsrs	r3, r3, #3
 80141ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80141d2:	4b07      	ldr	r3, [pc, #28]	; (80141f0 <HAL_RCC_GetClockConfig+0x60>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f003 020f 	and.w	r2, r3, #15
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	601a      	str	r2, [r3, #0]
}
 80141de:	bf00      	nop
 80141e0:	370c      	adds	r7, #12
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	40023800 	.word	0x40023800
 80141f0:	40023c00 	.word	0x40023c00

080141f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b088      	sub	sp, #32
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	689b      	ldr	r3, [r3, #8]
 801420a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	099b      	lsrs	r3, r3, #6
 8014210:	f003 0301 	and.w	r3, r3, #1
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10f      	bne.n	8014238 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014218:	69bb      	ldr	r3, [r7, #24]
 801421a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00a      	beq.n	8014238 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	099b      	lsrs	r3, r3, #6
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	2b00      	cmp	r3, #0
 801422c:	d004      	beq.n	8014238 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	4798      	blx	r3
    return;
 8014236:	e0d7      	b.n	80143e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	085b      	lsrs	r3, r3, #1
 801423c:	f003 0301 	and.w	r3, r3, #1
 8014240:	2b00      	cmp	r3, #0
 8014242:	d00a      	beq.n	801425a <HAL_SPI_IRQHandler+0x66>
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	09db      	lsrs	r3, r3, #7
 8014248:	f003 0301 	and.w	r3, r3, #1
 801424c:	2b00      	cmp	r3, #0
 801424e:	d004      	beq.n	801425a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	4798      	blx	r3
    return;
 8014258:	e0c6      	b.n	80143e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801425a:	69bb      	ldr	r3, [r7, #24]
 801425c:	095b      	lsrs	r3, r3, #5
 801425e:	f003 0301 	and.w	r3, r3, #1
 8014262:	2b00      	cmp	r3, #0
 8014264:	d10c      	bne.n	8014280 <HAL_SPI_IRQHandler+0x8c>
 8014266:	69bb      	ldr	r3, [r7, #24]
 8014268:	099b      	lsrs	r3, r3, #6
 801426a:	f003 0301 	and.w	r3, r3, #1
 801426e:	2b00      	cmp	r3, #0
 8014270:	d106      	bne.n	8014280 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	0a1b      	lsrs	r3, r3, #8
 8014276:	f003 0301 	and.w	r3, r3, #1
 801427a:	2b00      	cmp	r3, #0
 801427c:	f000 80b4 	beq.w	80143e8 <HAL_SPI_IRQHandler+0x1f4>
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	095b      	lsrs	r3, r3, #5
 8014284:	f003 0301 	and.w	r3, r3, #1
 8014288:	2b00      	cmp	r3, #0
 801428a:	f000 80ad 	beq.w	80143e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	099b      	lsrs	r3, r3, #6
 8014292:	f003 0301 	and.w	r3, r3, #1
 8014296:	2b00      	cmp	r3, #0
 8014298:	d023      	beq.n	80142e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	2b03      	cmp	r3, #3
 80142a4:	d011      	beq.n	80142ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142aa:	f043 0204 	orr.w	r2, r3, #4
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80142b2:	2300      	movs	r3, #0
 80142b4:	617b      	str	r3, [r7, #20]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	617b      	str	r3, [r7, #20]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	689b      	ldr	r3, [r3, #8]
 80142c4:	617b      	str	r3, [r7, #20]
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	e00b      	b.n	80142e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80142ca:	2300      	movs	r3, #0
 80142cc:	613b      	str	r3, [r7, #16]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	613b      	str	r3, [r7, #16]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	689b      	ldr	r3, [r3, #8]
 80142dc:	613b      	str	r3, [r7, #16]
 80142de:	693b      	ldr	r3, [r7, #16]
        return;
 80142e0:	e082      	b.n	80143e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	095b      	lsrs	r3, r3, #5
 80142e6:	f003 0301 	and.w	r3, r3, #1
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d014      	beq.n	8014318 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142f2:	f043 0201 	orr.w	r2, r3, #1
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80142fa:	2300      	movs	r3, #0
 80142fc:	60fb      	str	r3, [r7, #12]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	689b      	ldr	r3, [r3, #8]
 8014304:	60fb      	str	r3, [r7, #12]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014314:	601a      	str	r2, [r3, #0]
 8014316:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014318:	69bb      	ldr	r3, [r7, #24]
 801431a:	0a1b      	lsrs	r3, r3, #8
 801431c:	f003 0301 	and.w	r3, r3, #1
 8014320:	2b00      	cmp	r3, #0
 8014322:	d00c      	beq.n	801433e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014328:	f043 0208 	orr.w	r2, r3, #8
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014330:	2300      	movs	r3, #0
 8014332:	60bb      	str	r3, [r7, #8]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	689b      	ldr	r3, [r3, #8]
 801433a:	60bb      	str	r3, [r7, #8]
 801433c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014342:	2b00      	cmp	r3, #0
 8014344:	d04f      	beq.n	80143e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014354:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2201      	movs	r2, #1
 801435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	f003 0302 	and.w	r3, r3, #2
 8014364:	2b00      	cmp	r3, #0
 8014366:	d104      	bne.n	8014372 <HAL_SPI_IRQHandler+0x17e>
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	f003 0301 	and.w	r3, r3, #1
 801436e:	2b00      	cmp	r3, #0
 8014370:	d034      	beq.n	80143dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	685a      	ldr	r2, [r3, #4]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f022 0203 	bic.w	r2, r2, #3
 8014380:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014386:	2b00      	cmp	r3, #0
 8014388:	d011      	beq.n	80143ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801438e:	4a18      	ldr	r2, [pc, #96]	; (80143f0 <HAL_SPI_IRQHandler+0x1fc>)
 8014390:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014396:	4618      	mov	r0, r3
 8014398:	f7fc fce2 	bl	8010d60 <HAL_DMA_Abort_IT>
 801439c:	4603      	mov	r3, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d005      	beq.n	80143ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d016      	beq.n	80143e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143ba:	4a0d      	ldr	r2, [pc, #52]	; (80143f0 <HAL_SPI_IRQHandler+0x1fc>)
 80143bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fc fccc 	bl	8010d60 <HAL_DMA_Abort_IT>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00a      	beq.n	80143e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80143da:	e003      	b.n	80143e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 f809 	bl	80143f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80143e2:	e000      	b.n	80143e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80143e4:	bf00      	nop
    return;
 80143e6:	bf00      	nop
  }
}
 80143e8:	3720      	adds	r7, #32
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	08014409 	.word	0x08014409

080143f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80143fc:	bf00      	nop
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014414:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2200      	movs	r2, #0
 801441a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2200      	movs	r2, #0
 8014420:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	f7ff ffe6 	bl	80143f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014428:	bf00      	nop
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d101      	bne.n	8014442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801443e:	2301      	movs	r3, #1
 8014440:	e01d      	b.n	801447e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d106      	bne.n	801445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2200      	movs	r2, #0
 8014452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f7ee f96c 	bl	8002734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2202      	movs	r2, #2
 8014460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	3304      	adds	r3, #4
 801446c:	4619      	mov	r1, r3
 801446e:	4610      	mov	r0, r2
 8014470:	f000 fc3e 	bl	8014cf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2201      	movs	r2, #1
 8014478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}

08014486 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014486:	b480      	push	{r7}
 8014488:	b085      	sub	sp, #20
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2202      	movs	r2, #2
 8014492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	689b      	ldr	r3, [r3, #8]
 801449c:	f003 0307 	and.w	r3, r3, #7
 80144a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b06      	cmp	r3, #6
 80144a6:	d007      	beq.n	80144b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f042 0201 	orr.w	r2, r2, #1
 80144b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2201      	movs	r2, #1
 80144bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80144c0:	2300      	movs	r3, #0
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3714      	adds	r7, #20
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80144ce:	b480      	push	{r7}
 80144d0:	b085      	sub	sp, #20
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	68da      	ldr	r2, [r3, #12]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f042 0201 	orr.w	r2, r2, #1
 80144e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	689b      	ldr	r3, [r3, #8]
 80144ec:	f003 0307 	and.w	r3, r3, #7
 80144f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b06      	cmp	r3, #6
 80144f6:	d007      	beq.n	8014508 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	681a      	ldr	r2, [r3, #0]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f042 0201 	orr.w	r2, r2, #1
 8014506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014508:	2300      	movs	r3, #0
}
 801450a:	4618      	mov	r0, r3
 801450c:	3714      	adds	r7, #20
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr

08014516 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b082      	sub	sp, #8
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d101      	bne.n	8014528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014524:	2301      	movs	r3, #1
 8014526:	e01d      	b.n	8014564 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801452e:	b2db      	uxtb	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d106      	bne.n	8014542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2200      	movs	r2, #0
 8014538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ed ffbb 	bl	80024b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2202      	movs	r2, #2
 8014546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	3304      	adds	r3, #4
 8014552:	4619      	mov	r1, r3
 8014554:	4610      	mov	r0, r2
 8014556:	f000 fbcb 	bl	8014cf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2201      	movs	r2, #1
 801455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014562:	2300      	movs	r3, #0
}
 8014564:	4618      	mov	r0, r3
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2201      	movs	r2, #1
 801457c:	6839      	ldr	r1, [r7, #0]
 801457e:	4618      	mov	r0, r3
 8014580:	f000 fea0 	bl	80152c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a15      	ldr	r2, [pc, #84]	; (80145e0 <HAL_TIM_PWM_Start+0x74>)
 801458a:	4293      	cmp	r3, r2
 801458c:	d004      	beq.n	8014598 <HAL_TIM_PWM_Start+0x2c>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	4a14      	ldr	r2, [pc, #80]	; (80145e4 <HAL_TIM_PWM_Start+0x78>)
 8014594:	4293      	cmp	r3, r2
 8014596:	d101      	bne.n	801459c <HAL_TIM_PWM_Start+0x30>
 8014598:	2301      	movs	r3, #1
 801459a:	e000      	b.n	801459e <HAL_TIM_PWM_Start+0x32>
 801459c:	2300      	movs	r3, #0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d007      	beq.n	80145b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80145b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	f003 0307 	and.w	r3, r3, #7
 80145bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2b06      	cmp	r3, #6
 80145c2:	d007      	beq.n	80145d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f042 0201 	orr.w	r2, r2, #1
 80145d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80145d4:	2300      	movs	r3, #0
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3710      	adds	r7, #16
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	40010000 	.word	0x40010000
 80145e4:	40010400 	.word	0x40010400

080145e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b086      	sub	sp, #24
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d101      	bne.n	80145fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80145f8:	2301      	movs	r3, #1
 80145fa:	e083      	b.n	8014704 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	d106      	bne.n	8014616 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7ee fb43 	bl	8002c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2202      	movs	r2, #2
 801461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	6812      	ldr	r2, [r2, #0]
 8014628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801462c:	f023 0307 	bic.w	r3, r3, #7
 8014630:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681a      	ldr	r2, [r3, #0]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	3304      	adds	r3, #4
 801463a:	4619      	mov	r1, r3
 801463c:	4610      	mov	r0, r2
 801463e:	f000 fb57 	bl	8014cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	689b      	ldr	r3, [r3, #8]
 8014648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	699b      	ldr	r3, [r3, #24]
 8014650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	6a1b      	ldr	r3, [r3, #32]
 8014658:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	4313      	orrs	r3, r2
 8014662:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801466a:	f023 0303 	bic.w	r3, r3, #3
 801466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	689a      	ldr	r2, [r3, #8]
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	699b      	ldr	r3, [r3, #24]
 8014678:	021b      	lsls	r3, r3, #8
 801467a:	4313      	orrs	r3, r2
 801467c:	693a      	ldr	r2, [r7, #16]
 801467e:	4313      	orrs	r3, r2
 8014680:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014688:	f023 030c 	bic.w	r3, r3, #12
 801468c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	68da      	ldr	r2, [r3, #12]
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	69db      	ldr	r3, [r3, #28]
 80146a2:	021b      	lsls	r3, r3, #8
 80146a4:	4313      	orrs	r3, r2
 80146a6:	693a      	ldr	r2, [r7, #16]
 80146a8:	4313      	orrs	r3, r2
 80146aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	011a      	lsls	r2, r3, #4
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	6a1b      	ldr	r3, [r3, #32]
 80146b6:	031b      	lsls	r3, r3, #12
 80146b8:	4313      	orrs	r3, r2
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	4313      	orrs	r3, r2
 80146be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80146c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80146ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	685a      	ldr	r2, [r3, #4]
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	695b      	ldr	r3, [r3, #20]
 80146d8:	011b      	lsls	r3, r3, #4
 80146da:	4313      	orrs	r3, r2
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	4313      	orrs	r3, r2
 80146e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	697a      	ldr	r2, [r7, #20]
 80146e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	693a      	ldr	r2, [r7, #16]
 80146f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	68fa      	ldr	r2, [r7, #12]
 80146f8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2201      	movs	r2, #1
 80146fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014702:	2300      	movs	r3, #0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3718      	adds	r7, #24
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d003      	beq.n	8014724 <HAL_TIM_Encoder_Start+0x18>
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	2b04      	cmp	r3, #4
 8014720:	d008      	beq.n	8014734 <HAL_TIM_Encoder_Start+0x28>
 8014722:	e00f      	b.n	8014744 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2201      	movs	r2, #1
 801472a:	2100      	movs	r1, #0
 801472c:	4618      	mov	r0, r3
 801472e:	f000 fdc9 	bl	80152c4 <TIM_CCxChannelCmd>
      break;
 8014732:	e016      	b.n	8014762 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2201      	movs	r2, #1
 801473a:	2104      	movs	r1, #4
 801473c:	4618      	mov	r0, r3
 801473e:	f000 fdc1 	bl	80152c4 <TIM_CCxChannelCmd>
      break;
 8014742:	e00e      	b.n	8014762 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2201      	movs	r2, #1
 801474a:	2100      	movs	r1, #0
 801474c:	4618      	mov	r0, r3
 801474e:	f000 fdb9 	bl	80152c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2201      	movs	r2, #1
 8014758:	2104      	movs	r1, #4
 801475a:	4618      	mov	r0, r3
 801475c:	f000 fdb2 	bl	80152c4 <TIM_CCxChannelCmd>
      break;
 8014760:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f042 0201 	orr.w	r2, r2, #1
 8014770:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	691b      	ldr	r3, [r3, #16]
 801478a:	f003 0302 	and.w	r3, r3, #2
 801478e:	2b02      	cmp	r3, #2
 8014790:	d122      	bne.n	80147d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	f003 0302 	and.w	r3, r3, #2
 801479c:	2b02      	cmp	r3, #2
 801479e:	d11b      	bne.n	80147d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f06f 0202 	mvn.w	r2, #2
 80147a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2201      	movs	r2, #1
 80147ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	699b      	ldr	r3, [r3, #24]
 80147b6:	f003 0303 	and.w	r3, r3, #3
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d003      	beq.n	80147c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 fa78 	bl	8014cb4 <HAL_TIM_IC_CaptureCallback>
 80147c4:	e005      	b.n	80147d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 fa6a 	bl	8014ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f000 fa7b 	bl	8014cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2200      	movs	r2, #0
 80147d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	691b      	ldr	r3, [r3, #16]
 80147de:	f003 0304 	and.w	r3, r3, #4
 80147e2:	2b04      	cmp	r3, #4
 80147e4:	d122      	bne.n	801482c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	f003 0304 	and.w	r3, r3, #4
 80147f0:	2b04      	cmp	r3, #4
 80147f2:	d11b      	bne.n	801482c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	f06f 0204 	mvn.w	r2, #4
 80147fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2202      	movs	r2, #2
 8014802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	699b      	ldr	r3, [r3, #24]
 801480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801480e:	2b00      	cmp	r3, #0
 8014810:	d003      	beq.n	801481a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 fa4e 	bl	8014cb4 <HAL_TIM_IC_CaptureCallback>
 8014818:	e005      	b.n	8014826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f000 fa40 	bl	8014ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f000 fa51 	bl	8014cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	2200      	movs	r2, #0
 801482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	691b      	ldr	r3, [r3, #16]
 8014832:	f003 0308 	and.w	r3, r3, #8
 8014836:	2b08      	cmp	r3, #8
 8014838:	d122      	bne.n	8014880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	f003 0308 	and.w	r3, r3, #8
 8014844:	2b08      	cmp	r3, #8
 8014846:	d11b      	bne.n	8014880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	f06f 0208 	mvn.w	r2, #8
 8014850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2204      	movs	r2, #4
 8014856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	69db      	ldr	r3, [r3, #28]
 801485e:	f003 0303 	and.w	r3, r3, #3
 8014862:	2b00      	cmp	r3, #0
 8014864:	d003      	beq.n	801486e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f000 fa24 	bl	8014cb4 <HAL_TIM_IC_CaptureCallback>
 801486c:	e005      	b.n	801487a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f000 fa16 	bl	8014ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fa27 	bl	8014cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2200      	movs	r2, #0
 801487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	691b      	ldr	r3, [r3, #16]
 8014886:	f003 0310 	and.w	r3, r3, #16
 801488a:	2b10      	cmp	r3, #16
 801488c:	d122      	bne.n	80148d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	f003 0310 	and.w	r3, r3, #16
 8014898:	2b10      	cmp	r3, #16
 801489a:	d11b      	bne.n	80148d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f06f 0210 	mvn.w	r2, #16
 80148a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2208      	movs	r2, #8
 80148aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	69db      	ldr	r3, [r3, #28]
 80148b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d003      	beq.n	80148c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f000 f9fa 	bl	8014cb4 <HAL_TIM_IC_CaptureCallback>
 80148c0:	e005      	b.n	80148ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f000 f9ec 	bl	8014ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f9fd 	bl	8014cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	691b      	ldr	r3, [r3, #16]
 80148da:	f003 0301 	and.w	r3, r3, #1
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d10e      	bne.n	8014900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	f003 0301 	and.w	r3, r3, #1
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d107      	bne.n	8014900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f06f 0201 	mvn.w	r2, #1
 80148f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7f7 feca 	bl	800c694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801490a:	2b80      	cmp	r3, #128	; 0x80
 801490c:	d10e      	bne.n	801492c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	68db      	ldr	r3, [r3, #12]
 8014914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014918:	2b80      	cmp	r3, #128	; 0x80
 801491a:	d107      	bne.n	801492c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 fd78 	bl	801541c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	691b      	ldr	r3, [r3, #16]
 8014932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014936:	2b40      	cmp	r3, #64	; 0x40
 8014938:	d10e      	bne.n	8014958 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014944:	2b40      	cmp	r3, #64	; 0x40
 8014946:	d107      	bne.n	8014958 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 f9c2 	bl	8014cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	691b      	ldr	r3, [r3, #16]
 801495e:	f003 0320 	and.w	r3, r3, #32
 8014962:	2b20      	cmp	r3, #32
 8014964:	d10e      	bne.n	8014984 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	f003 0320 	and.w	r3, r3, #32
 8014970:	2b20      	cmp	r3, #32
 8014972:	d107      	bne.n	8014984 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	f06f 0220 	mvn.w	r2, #32
 801497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 fd42 	bl	8015408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014984:	bf00      	nop
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d101      	bne.n	80149a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80149a2:	2302      	movs	r3, #2
 80149a4:	e0b4      	b.n	8014b10 <HAL_TIM_PWM_ConfigChannel+0x184>
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	2201      	movs	r2, #1
 80149aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2202      	movs	r2, #2
 80149b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	2b0c      	cmp	r3, #12
 80149ba:	f200 809f 	bhi.w	8014afc <HAL_TIM_PWM_ConfigChannel+0x170>
 80149be:	a201      	add	r2, pc, #4	; (adr r2, 80149c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80149c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149c4:	080149f9 	.word	0x080149f9
 80149c8:	08014afd 	.word	0x08014afd
 80149cc:	08014afd 	.word	0x08014afd
 80149d0:	08014afd 	.word	0x08014afd
 80149d4:	08014a39 	.word	0x08014a39
 80149d8:	08014afd 	.word	0x08014afd
 80149dc:	08014afd 	.word	0x08014afd
 80149e0:	08014afd 	.word	0x08014afd
 80149e4:	08014a7b 	.word	0x08014a7b
 80149e8:	08014afd 	.word	0x08014afd
 80149ec:	08014afd 	.word	0x08014afd
 80149f0:	08014afd 	.word	0x08014afd
 80149f4:	08014abb 	.word	0x08014abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	68b9      	ldr	r1, [r7, #8]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f000 fa16 	bl	8014e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	699a      	ldr	r2, [r3, #24]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	f042 0208 	orr.w	r2, r2, #8
 8014a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	699a      	ldr	r2, [r3, #24]
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f022 0204 	bic.w	r2, r2, #4
 8014a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	6999      	ldr	r1, [r3, #24]
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	691a      	ldr	r2, [r3, #16]
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	430a      	orrs	r2, r1
 8014a34:	619a      	str	r2, [r3, #24]
      break;
 8014a36:	e062      	b.n	8014afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	68b9      	ldr	r1, [r7, #8]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f000 fa66 	bl	8014f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	699a      	ldr	r2, [r3, #24]
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	699a      	ldr	r2, [r3, #24]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	6999      	ldr	r1, [r3, #24]
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	691b      	ldr	r3, [r3, #16]
 8014a6e:	021a      	lsls	r2, r3, #8
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	430a      	orrs	r2, r1
 8014a76:	619a      	str	r2, [r3, #24]
      break;
 8014a78:	e041      	b.n	8014afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	68b9      	ldr	r1, [r7, #8]
 8014a80:	4618      	mov	r0, r3
 8014a82:	f000 fabb 	bl	8014ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	69da      	ldr	r2, [r3, #28]
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f042 0208 	orr.w	r2, r2, #8
 8014a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	69da      	ldr	r2, [r3, #28]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f022 0204 	bic.w	r2, r2, #4
 8014aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	69d9      	ldr	r1, [r3, #28]
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	691a      	ldr	r2, [r3, #16]
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	430a      	orrs	r2, r1
 8014ab6:	61da      	str	r2, [r3, #28]
      break;
 8014ab8:	e021      	b.n	8014afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	68b9      	ldr	r1, [r7, #8]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f000 fb0f 	bl	80150e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	69da      	ldr	r2, [r3, #28]
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	69da      	ldr	r2, [r3, #28]
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	69d9      	ldr	r1, [r3, #28]
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	691b      	ldr	r3, [r3, #16]
 8014af0:	021a      	lsls	r2, r3, #8
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	430a      	orrs	r2, r1
 8014af8:	61da      	str	r2, [r3, #28]
      break;
 8014afa:	e000      	b.n	8014afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014afc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2201      	movs	r2, #1
 8014b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014b0e:	2300      	movs	r3, #0
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	3710      	adds	r7, #16
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d101      	bne.n	8014b30 <HAL_TIM_ConfigClockSource+0x18>
 8014b2c:	2302      	movs	r3, #2
 8014b2e:	e0b3      	b.n	8014c98 <HAL_TIM_ConfigClockSource+0x180>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2201      	movs	r2, #1
 8014b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2202      	movs	r2, #2
 8014b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014b56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b68:	d03e      	beq.n	8014be8 <HAL_TIM_ConfigClockSource+0xd0>
 8014b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b6e:	f200 8087 	bhi.w	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b76:	f000 8085 	beq.w	8014c84 <HAL_TIM_ConfigClockSource+0x16c>
 8014b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b7e:	d87f      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014b80:	2b70      	cmp	r3, #112	; 0x70
 8014b82:	d01a      	beq.n	8014bba <HAL_TIM_ConfigClockSource+0xa2>
 8014b84:	2b70      	cmp	r3, #112	; 0x70
 8014b86:	d87b      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014b88:	2b60      	cmp	r3, #96	; 0x60
 8014b8a:	d050      	beq.n	8014c2e <HAL_TIM_ConfigClockSource+0x116>
 8014b8c:	2b60      	cmp	r3, #96	; 0x60
 8014b8e:	d877      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014b90:	2b50      	cmp	r3, #80	; 0x50
 8014b92:	d03c      	beq.n	8014c0e <HAL_TIM_ConfigClockSource+0xf6>
 8014b94:	2b50      	cmp	r3, #80	; 0x50
 8014b96:	d873      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014b98:	2b40      	cmp	r3, #64	; 0x40
 8014b9a:	d058      	beq.n	8014c4e <HAL_TIM_ConfigClockSource+0x136>
 8014b9c:	2b40      	cmp	r3, #64	; 0x40
 8014b9e:	d86f      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014ba0:	2b30      	cmp	r3, #48	; 0x30
 8014ba2:	d064      	beq.n	8014c6e <HAL_TIM_ConfigClockSource+0x156>
 8014ba4:	2b30      	cmp	r3, #48	; 0x30
 8014ba6:	d86b      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014ba8:	2b20      	cmp	r3, #32
 8014baa:	d060      	beq.n	8014c6e <HAL_TIM_ConfigClockSource+0x156>
 8014bac:	2b20      	cmp	r3, #32
 8014bae:	d867      	bhi.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d05c      	beq.n	8014c6e <HAL_TIM_ConfigClockSource+0x156>
 8014bb4:	2b10      	cmp	r3, #16
 8014bb6:	d05a      	beq.n	8014c6e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014bb8:	e062      	b.n	8014c80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6818      	ldr	r0, [r3, #0]
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	6899      	ldr	r1, [r3, #8]
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	685a      	ldr	r2, [r3, #4]
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	68db      	ldr	r3, [r3, #12]
 8014bca:	f000 fb5b 	bl	8015284 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	689b      	ldr	r3, [r3, #8]
 8014bd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014bdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	68fa      	ldr	r2, [r7, #12]
 8014be4:	609a      	str	r2, [r3, #8]
      break;
 8014be6:	e04e      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6818      	ldr	r0, [r3, #0]
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	6899      	ldr	r1, [r3, #8]
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	685a      	ldr	r2, [r3, #4]
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	f000 fb44 	bl	8015284 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689a      	ldr	r2, [r3, #8]
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014c0a:	609a      	str	r2, [r3, #8]
      break;
 8014c0c:	e03b      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6818      	ldr	r0, [r3, #0]
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	6859      	ldr	r1, [r3, #4]
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	68db      	ldr	r3, [r3, #12]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	f000 fab8 	bl	8015190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2150      	movs	r1, #80	; 0x50
 8014c26:	4618      	mov	r0, r3
 8014c28:	f000 fb11 	bl	801524e <TIM_ITRx_SetConfig>
      break;
 8014c2c:	e02b      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6818      	ldr	r0, [r3, #0]
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	6859      	ldr	r1, [r3, #4]
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	68db      	ldr	r3, [r3, #12]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	f000 fad7 	bl	80151ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2160      	movs	r1, #96	; 0x60
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 fb01 	bl	801524e <TIM_ITRx_SetConfig>
      break;
 8014c4c:	e01b      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	6859      	ldr	r1, [r3, #4]
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	f000 fa98 	bl	8015190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2140      	movs	r1, #64	; 0x40
 8014c66:	4618      	mov	r0, r3
 8014c68:	f000 faf1 	bl	801524e <TIM_ITRx_SetConfig>
      break;
 8014c6c:	e00b      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681a      	ldr	r2, [r3, #0]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4619      	mov	r1, r3
 8014c78:	4610      	mov	r0, r2
 8014c7a:	f000 fae8 	bl	801524e <TIM_ITRx_SetConfig>
      break;
 8014c7e:	e002      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8014c80:	bf00      	nop
 8014c82:	e000      	b.n	8014c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8014c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2201      	movs	r2, #1
 8014c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2200      	movs	r2, #0
 8014c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014c96:	2300      	movs	r3, #0
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3710      	adds	r7, #16
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014ca8:	bf00      	nop
 8014caa:	370c      	adds	r7, #12
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr

08014cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014cbc:	bf00      	nop
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014cd0:	bf00      	nop
 8014cd2:	370c      	adds	r7, #12
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cda:	4770      	bx	lr

08014cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014ce4:	bf00      	nop
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b085      	sub	sp, #20
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	4a40      	ldr	r2, [pc, #256]	; (8014e04 <TIM_Base_SetConfig+0x114>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d013      	beq.n	8014d30 <TIM_Base_SetConfig+0x40>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d0e:	d00f      	beq.n	8014d30 <TIM_Base_SetConfig+0x40>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4a3d      	ldr	r2, [pc, #244]	; (8014e08 <TIM_Base_SetConfig+0x118>)
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d00b      	beq.n	8014d30 <TIM_Base_SetConfig+0x40>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	4a3c      	ldr	r2, [pc, #240]	; (8014e0c <TIM_Base_SetConfig+0x11c>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d007      	beq.n	8014d30 <TIM_Base_SetConfig+0x40>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	4a3b      	ldr	r2, [pc, #236]	; (8014e10 <TIM_Base_SetConfig+0x120>)
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d003      	beq.n	8014d30 <TIM_Base_SetConfig+0x40>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4a3a      	ldr	r2, [pc, #232]	; (8014e14 <TIM_Base_SetConfig+0x124>)
 8014d2c:	4293      	cmp	r3, r2
 8014d2e:	d108      	bne.n	8014d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	4313      	orrs	r3, r2
 8014d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4a2f      	ldr	r2, [pc, #188]	; (8014e04 <TIM_Base_SetConfig+0x114>)
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d02b      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d50:	d027      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	4a2c      	ldr	r2, [pc, #176]	; (8014e08 <TIM_Base_SetConfig+0x118>)
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d023      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4a2b      	ldr	r2, [pc, #172]	; (8014e0c <TIM_Base_SetConfig+0x11c>)
 8014d5e:	4293      	cmp	r3, r2
 8014d60:	d01f      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4a2a      	ldr	r2, [pc, #168]	; (8014e10 <TIM_Base_SetConfig+0x120>)
 8014d66:	4293      	cmp	r3, r2
 8014d68:	d01b      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	4a29      	ldr	r2, [pc, #164]	; (8014e14 <TIM_Base_SetConfig+0x124>)
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	d017      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	4a28      	ldr	r2, [pc, #160]	; (8014e18 <TIM_Base_SetConfig+0x128>)
 8014d76:	4293      	cmp	r3, r2
 8014d78:	d013      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	4a27      	ldr	r2, [pc, #156]	; (8014e1c <TIM_Base_SetConfig+0x12c>)
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	d00f      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	4a26      	ldr	r2, [pc, #152]	; (8014e20 <TIM_Base_SetConfig+0x130>)
 8014d86:	4293      	cmp	r3, r2
 8014d88:	d00b      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	4a25      	ldr	r2, [pc, #148]	; (8014e24 <TIM_Base_SetConfig+0x134>)
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d007      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4a24      	ldr	r2, [pc, #144]	; (8014e28 <TIM_Base_SetConfig+0x138>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d003      	beq.n	8014da2 <TIM_Base_SetConfig+0xb2>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	4a23      	ldr	r2, [pc, #140]	; (8014e2c <TIM_Base_SetConfig+0x13c>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d108      	bne.n	8014db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	68db      	ldr	r3, [r3, #12]
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	4313      	orrs	r3, r2
 8014db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	695b      	ldr	r3, [r3, #20]
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	68fa      	ldr	r2, [r7, #12]
 8014dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	689a      	ldr	r2, [r3, #8]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4a0a      	ldr	r2, [pc, #40]	; (8014e04 <TIM_Base_SetConfig+0x114>)
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d003      	beq.n	8014de8 <TIM_Base_SetConfig+0xf8>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4a0c      	ldr	r2, [pc, #48]	; (8014e14 <TIM_Base_SetConfig+0x124>)
 8014de4:	4293      	cmp	r3, r2
 8014de6:	d103      	bne.n	8014df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	691a      	ldr	r2, [r3, #16]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2201      	movs	r2, #1
 8014df4:	615a      	str	r2, [r3, #20]
}
 8014df6:	bf00      	nop
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	40010000 	.word	0x40010000
 8014e08:	40000400 	.word	0x40000400
 8014e0c:	40000800 	.word	0x40000800
 8014e10:	40000c00 	.word	0x40000c00
 8014e14:	40010400 	.word	0x40010400
 8014e18:	40014000 	.word	0x40014000
 8014e1c:	40014400 	.word	0x40014400
 8014e20:	40014800 	.word	0x40014800
 8014e24:	40001800 	.word	0x40001800
 8014e28:	40001c00 	.word	0x40001c00
 8014e2c:	40002000 	.word	0x40002000

08014e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b087      	sub	sp, #28
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6a1b      	ldr	r3, [r3, #32]
 8014e3e:	f023 0201 	bic.w	r2, r3, #1
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6a1b      	ldr	r3, [r3, #32]
 8014e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f023 0303 	bic.w	r3, r3, #3
 8014e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	4313      	orrs	r3, r2
 8014e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	f023 0302 	bic.w	r3, r3, #2
 8014e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	689b      	ldr	r3, [r3, #8]
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	4313      	orrs	r3, r2
 8014e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	4a20      	ldr	r2, [pc, #128]	; (8014f08 <TIM_OC1_SetConfig+0xd8>)
 8014e88:	4293      	cmp	r3, r2
 8014e8a:	d003      	beq.n	8014e94 <TIM_OC1_SetConfig+0x64>
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	4a1f      	ldr	r2, [pc, #124]	; (8014f0c <TIM_OC1_SetConfig+0xdc>)
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d10c      	bne.n	8014eae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	f023 0308 	bic.w	r3, r3, #8
 8014e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	697a      	ldr	r2, [r7, #20]
 8014ea2:	4313      	orrs	r3, r2
 8014ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	f023 0304 	bic.w	r3, r3, #4
 8014eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	4a15      	ldr	r2, [pc, #84]	; (8014f08 <TIM_OC1_SetConfig+0xd8>)
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d003      	beq.n	8014ebe <TIM_OC1_SetConfig+0x8e>
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	4a14      	ldr	r2, [pc, #80]	; (8014f0c <TIM_OC1_SetConfig+0xdc>)
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	d111      	bne.n	8014ee2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	695b      	ldr	r3, [r3, #20]
 8014ed2:	693a      	ldr	r2, [r7, #16]
 8014ed4:	4313      	orrs	r3, r2
 8014ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	699b      	ldr	r3, [r3, #24]
 8014edc:	693a      	ldr	r2, [r7, #16]
 8014ede:	4313      	orrs	r3, r2
 8014ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	693a      	ldr	r2, [r7, #16]
 8014ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	685a      	ldr	r2, [r3, #4]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	697a      	ldr	r2, [r7, #20]
 8014efa:	621a      	str	r2, [r3, #32]
}
 8014efc:	bf00      	nop
 8014efe:	371c      	adds	r7, #28
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr
 8014f08:	40010000 	.word	0x40010000
 8014f0c:	40010400 	.word	0x40010400

08014f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014f10:	b480      	push	{r7}
 8014f12:	b087      	sub	sp, #28
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6a1b      	ldr	r3, [r3, #32]
 8014f1e:	f023 0210 	bic.w	r2, r3, #16
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6a1b      	ldr	r3, [r3, #32]
 8014f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	699b      	ldr	r3, [r3, #24]
 8014f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	021b      	lsls	r3, r3, #8
 8014f4e:	68fa      	ldr	r2, [r7, #12]
 8014f50:	4313      	orrs	r3, r2
 8014f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f023 0320 	bic.w	r3, r3, #32
 8014f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	011b      	lsls	r3, r3, #4
 8014f62:	697a      	ldr	r2, [r7, #20]
 8014f64:	4313      	orrs	r3, r2
 8014f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	4a22      	ldr	r2, [pc, #136]	; (8014ff4 <TIM_OC2_SetConfig+0xe4>)
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d003      	beq.n	8014f78 <TIM_OC2_SetConfig+0x68>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4a21      	ldr	r2, [pc, #132]	; (8014ff8 <TIM_OC2_SetConfig+0xe8>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d10d      	bne.n	8014f94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	011b      	lsls	r3, r3, #4
 8014f86:	697a      	ldr	r2, [r7, #20]
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	4a17      	ldr	r2, [pc, #92]	; (8014ff4 <TIM_OC2_SetConfig+0xe4>)
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	d003      	beq.n	8014fa4 <TIM_OC2_SetConfig+0x94>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	4a16      	ldr	r2, [pc, #88]	; (8014ff8 <TIM_OC2_SetConfig+0xe8>)
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d113      	bne.n	8014fcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	009b      	lsls	r3, r3, #2
 8014fba:	693a      	ldr	r2, [r7, #16]
 8014fbc:	4313      	orrs	r3, r2
 8014fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	699b      	ldr	r3, [r3, #24]
 8014fc4:	009b      	lsls	r3, r3, #2
 8014fc6:	693a      	ldr	r2, [r7, #16]
 8014fc8:	4313      	orrs	r3, r2
 8014fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	693a      	ldr	r2, [r7, #16]
 8014fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	68fa      	ldr	r2, [r7, #12]
 8014fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	697a      	ldr	r2, [r7, #20]
 8014fe4:	621a      	str	r2, [r3, #32]
}
 8014fe6:	bf00      	nop
 8014fe8:	371c      	adds	r7, #28
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	40010000 	.word	0x40010000
 8014ff8:	40010400 	.word	0x40010400

08014ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b087      	sub	sp, #28
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6a1b      	ldr	r3, [r3, #32]
 801500a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6a1b      	ldr	r3, [r3, #32]
 8015016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	69db      	ldr	r3, [r3, #28]
 8015022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	f023 0303 	bic.w	r3, r3, #3
 8015032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	68fa      	ldr	r2, [r7, #12]
 801503a:	4313      	orrs	r3, r2
 801503c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	021b      	lsls	r3, r3, #8
 801504c:	697a      	ldr	r2, [r7, #20]
 801504e:	4313      	orrs	r3, r2
 8015050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4a21      	ldr	r2, [pc, #132]	; (80150dc <TIM_OC3_SetConfig+0xe0>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d003      	beq.n	8015062 <TIM_OC3_SetConfig+0x66>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4a20      	ldr	r2, [pc, #128]	; (80150e0 <TIM_OC3_SetConfig+0xe4>)
 801505e:	4293      	cmp	r3, r2
 8015060:	d10d      	bne.n	801507e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	021b      	lsls	r3, r3, #8
 8015070:	697a      	ldr	r2, [r7, #20]
 8015072:	4313      	orrs	r3, r2
 8015074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801507c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	4a16      	ldr	r2, [pc, #88]	; (80150dc <TIM_OC3_SetConfig+0xe0>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d003      	beq.n	801508e <TIM_OC3_SetConfig+0x92>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4a15      	ldr	r2, [pc, #84]	; (80150e0 <TIM_OC3_SetConfig+0xe4>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d113      	bne.n	80150b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	695b      	ldr	r3, [r3, #20]
 80150a2:	011b      	lsls	r3, r3, #4
 80150a4:	693a      	ldr	r2, [r7, #16]
 80150a6:	4313      	orrs	r3, r2
 80150a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	699b      	ldr	r3, [r3, #24]
 80150ae:	011b      	lsls	r3, r3, #4
 80150b0:	693a      	ldr	r2, [r7, #16]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	693a      	ldr	r2, [r7, #16]
 80150ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	685a      	ldr	r2, [r3, #4]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	697a      	ldr	r2, [r7, #20]
 80150ce:	621a      	str	r2, [r3, #32]
}
 80150d0:	bf00      	nop
 80150d2:	371c      	adds	r7, #28
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	40010000 	.word	0x40010000
 80150e0:	40010400 	.word	0x40010400

080150e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80150e4:	b480      	push	{r7}
 80150e6:	b087      	sub	sp, #28
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6a1b      	ldr	r3, [r3, #32]
 80150f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6a1b      	ldr	r3, [r3, #32]
 80150fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	69db      	ldr	r3, [r3, #28]
 801510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801511a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	021b      	lsls	r3, r3, #8
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	4313      	orrs	r3, r2
 8015126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801512e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	689b      	ldr	r3, [r3, #8]
 8015134:	031b      	lsls	r3, r3, #12
 8015136:	693a      	ldr	r2, [r7, #16]
 8015138:	4313      	orrs	r3, r2
 801513a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4a12      	ldr	r2, [pc, #72]	; (8015188 <TIM_OC4_SetConfig+0xa4>)
 8015140:	4293      	cmp	r3, r2
 8015142:	d003      	beq.n	801514c <TIM_OC4_SetConfig+0x68>
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	4a11      	ldr	r2, [pc, #68]	; (801518c <TIM_OC4_SetConfig+0xa8>)
 8015148:	4293      	cmp	r3, r2
 801514a:	d109      	bne.n	8015160 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801514c:	697b      	ldr	r3, [r7, #20]
 801514e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	019b      	lsls	r3, r3, #6
 801515a:	697a      	ldr	r2, [r7, #20]
 801515c:	4313      	orrs	r3, r2
 801515e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	68fa      	ldr	r2, [r7, #12]
 801516a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	685a      	ldr	r2, [r3, #4]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	693a      	ldr	r2, [r7, #16]
 8015178:	621a      	str	r2, [r3, #32]
}
 801517a:	bf00      	nop
 801517c:	371c      	adds	r7, #28
 801517e:	46bd      	mov	sp, r7
 8015180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015184:	4770      	bx	lr
 8015186:	bf00      	nop
 8015188:	40010000 	.word	0x40010000
 801518c:	40010400 	.word	0x40010400

08015190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015190:	b480      	push	{r7}
 8015192:	b087      	sub	sp, #28
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	6a1b      	ldr	r3, [r3, #32]
 80151a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	6a1b      	ldr	r3, [r3, #32]
 80151a6:	f023 0201 	bic.w	r2, r3, #1
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	699b      	ldr	r3, [r3, #24]
 80151b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80151ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	011b      	lsls	r3, r3, #4
 80151c0:	693a      	ldr	r2, [r7, #16]
 80151c2:	4313      	orrs	r3, r2
 80151c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	f023 030a 	bic.w	r3, r3, #10
 80151cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80151ce:	697a      	ldr	r2, [r7, #20]
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	4313      	orrs	r3, r2
 80151d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	693a      	ldr	r2, [r7, #16]
 80151da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	697a      	ldr	r2, [r7, #20]
 80151e0:	621a      	str	r2, [r3, #32]
}
 80151e2:	bf00      	nop
 80151e4:	371c      	adds	r7, #28
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr

080151ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80151ee:	b480      	push	{r7}
 80151f0:	b087      	sub	sp, #28
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	60f8      	str	r0, [r7, #12]
 80151f6:	60b9      	str	r1, [r7, #8]
 80151f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	6a1b      	ldr	r3, [r3, #32]
 80151fe:	f023 0210 	bic.w	r2, r3, #16
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	699b      	ldr	r3, [r3, #24]
 801520a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	6a1b      	ldr	r3, [r3, #32]
 8015210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	031b      	lsls	r3, r3, #12
 801521e:	697a      	ldr	r2, [r7, #20]
 8015220:	4313      	orrs	r3, r2
 8015222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801522a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	011b      	lsls	r3, r3, #4
 8015230:	693a      	ldr	r2, [r7, #16]
 8015232:	4313      	orrs	r3, r2
 8015234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	697a      	ldr	r2, [r7, #20]
 801523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	621a      	str	r2, [r3, #32]
}
 8015242:	bf00      	nop
 8015244:	371c      	adds	r7, #28
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr

0801524e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801524e:	b480      	push	{r7}
 8015250:	b085      	sub	sp, #20
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
 8015256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	689b      	ldr	r3, [r3, #8]
 801525c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015266:	683a      	ldr	r2, [r7, #0]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	4313      	orrs	r3, r2
 801526c:	f043 0307 	orr.w	r3, r3, #7
 8015270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	68fa      	ldr	r2, [r7, #12]
 8015276:	609a      	str	r2, [r3, #8]
}
 8015278:	bf00      	nop
 801527a:	3714      	adds	r7, #20
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015284:	b480      	push	{r7}
 8015286:	b087      	sub	sp, #28
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
 8015290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801529e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	021a      	lsls	r2, r3, #8
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	431a      	orrs	r2, r3
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	4313      	orrs	r3, r2
 80152ac:	697a      	ldr	r2, [r7, #20]
 80152ae:	4313      	orrs	r3, r2
 80152b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	697a      	ldr	r2, [r7, #20]
 80152b6:	609a      	str	r2, [r3, #8]
}
 80152b8:	bf00      	nop
 80152ba:	371c      	adds	r7, #28
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b087      	sub	sp, #28
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	f003 031f 	and.w	r3, r3, #31
 80152d6:	2201      	movs	r2, #1
 80152d8:	fa02 f303 	lsl.w	r3, r2, r3
 80152dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	6a1a      	ldr	r2, [r3, #32]
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	43db      	mvns	r3, r3
 80152e6:	401a      	ands	r2, r3
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	6a1a      	ldr	r2, [r3, #32]
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	f003 031f 	and.w	r3, r3, #31
 80152f6:	6879      	ldr	r1, [r7, #4]
 80152f8:	fa01 f303 	lsl.w	r3, r1, r3
 80152fc:	431a      	orrs	r2, r3
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	621a      	str	r2, [r3, #32]
}
 8015302:	bf00      	nop
 8015304:	371c      	adds	r7, #28
 8015306:	46bd      	mov	sp, r7
 8015308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530c:	4770      	bx	lr
	...

08015310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015310:	b480      	push	{r7}
 8015312:	b085      	sub	sp, #20
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015320:	2b01      	cmp	r3, #1
 8015322:	d101      	bne.n	8015328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015324:	2302      	movs	r3, #2
 8015326:	e05a      	b.n	80153de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2201      	movs	r2, #1
 801532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	2202      	movs	r2, #2
 8015334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	685b      	ldr	r3, [r3, #4]
 801533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	689b      	ldr	r3, [r3, #8]
 8015346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	68fa      	ldr	r2, [r7, #12]
 8015356:	4313      	orrs	r3, r2
 8015358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4a21      	ldr	r2, [pc, #132]	; (80153ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015368:	4293      	cmp	r3, r2
 801536a:	d022      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015374:	d01d      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	4a1d      	ldr	r2, [pc, #116]	; (80153f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801537c:	4293      	cmp	r3, r2
 801537e:	d018      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4a1b      	ldr	r2, [pc, #108]	; (80153f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015386:	4293      	cmp	r3, r2
 8015388:	d013      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4a1a      	ldr	r2, [pc, #104]	; (80153f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015390:	4293      	cmp	r3, r2
 8015392:	d00e      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4a18      	ldr	r2, [pc, #96]	; (80153fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801539a:	4293      	cmp	r3, r2
 801539c:	d009      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	4a17      	ldr	r2, [pc, #92]	; (8015400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d004      	beq.n	80153b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a15      	ldr	r2, [pc, #84]	; (8015404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d10c      	bne.n	80153cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80153b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	68ba      	ldr	r2, [r7, #8]
 80153c0:	4313      	orrs	r3, r2
 80153c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	68ba      	ldr	r2, [r7, #8]
 80153ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2201      	movs	r2, #1
 80153d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2200      	movs	r2, #0
 80153d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3714      	adds	r7, #20
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr
 80153ea:	bf00      	nop
 80153ec:	40010000 	.word	0x40010000
 80153f0:	40000400 	.word	0x40000400
 80153f4:	40000800 	.word	0x40000800
 80153f8:	40000c00 	.word	0x40000c00
 80153fc:	40010400 	.word	0x40010400
 8015400:	40014000 	.word	0x40014000
 8015404:	40001800 	.word	0x40001800

08015408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015408:	b480      	push	{r7}
 801540a:	b083      	sub	sp, #12
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015410:	bf00      	nop
 8015412:	370c      	adds	r7, #12
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr

0801541c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801541c:	b480      	push	{r7}
 801541e:	b083      	sub	sp, #12
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015424:	bf00      	nop
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d101      	bne.n	8015442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801543e:	2301      	movs	r3, #1
 8015440:	e03f      	b.n	80154c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b00      	cmp	r3, #0
 801544c:	d106      	bne.n	801545c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	f7ed faaa 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2224      	movs	r2, #36	; 0x24
 8015460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	68da      	ldr	r2, [r3, #12]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f000 fb97 	bl	8015ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	691a      	ldr	r2, [r3, #16]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	695a      	ldr	r2, [r3, #20]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	68da      	ldr	r2, [r3, #12]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80154a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2200      	movs	r2, #0
 80154ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2220      	movs	r2, #32
 80154b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2220      	movs	r2, #32
 80154bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80154c0:	2300      	movs	r3, #0
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3708      	adds	r7, #8
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}

080154ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80154ca:	b580      	push	{r7, lr}
 80154cc:	b088      	sub	sp, #32
 80154ce:	af02      	add	r7, sp, #8
 80154d0:	60f8      	str	r0, [r7, #12]
 80154d2:	60b9      	str	r1, [r7, #8]
 80154d4:	603b      	str	r3, [r7, #0]
 80154d6:	4613      	mov	r3, r2
 80154d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80154da:	2300      	movs	r3, #0
 80154dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	2b20      	cmp	r3, #32
 80154e8:	f040 8083 	bne.w	80155f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d002      	beq.n	80154f8 <HAL_UART_Transmit+0x2e>
 80154f2:	88fb      	ldrh	r3, [r7, #6]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d101      	bne.n	80154fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80154f8:	2301      	movs	r3, #1
 80154fa:	e07b      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015502:	2b01      	cmp	r3, #1
 8015504:	d101      	bne.n	801550a <HAL_UART_Transmit+0x40>
 8015506:	2302      	movs	r3, #2
 8015508:	e074      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2201      	movs	r2, #1
 801550e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2200      	movs	r2, #0
 8015516:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2221      	movs	r2, #33	; 0x21
 801551c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8015520:	f7fa fae0 	bl	800fae4 <HAL_GetTick>
 8015524:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	88fa      	ldrh	r2, [r7, #6]
 801552a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	88fa      	ldrh	r2, [r7, #6]
 8015530:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	2200      	movs	r2, #0
 8015536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801553a:	e042      	b.n	80155c2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015540:	b29b      	uxth	r3, r3
 8015542:	3b01      	subs	r3, #1
 8015544:	b29a      	uxth	r2, r3
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015552:	d122      	bne.n	801559a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	9300      	str	r3, [sp, #0]
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	2200      	movs	r2, #0
 801555c:	2180      	movs	r1, #128	; 0x80
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f000 f9b6 	bl	80158d0 <UART_WaitOnFlagUntilTimeout>
 8015564:	4603      	mov	r3, r0
 8015566:	2b00      	cmp	r3, #0
 8015568:	d001      	beq.n	801556e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801556a:	2303      	movs	r3, #3
 801556c:	e042      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	881b      	ldrh	r3, [r3, #0]
 8015576:	461a      	mov	r2, r3
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015580:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	691b      	ldr	r3, [r3, #16]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d103      	bne.n	8015592 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	3302      	adds	r3, #2
 801558e:	60bb      	str	r3, [r7, #8]
 8015590:	e017      	b.n	80155c2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	3301      	adds	r3, #1
 8015596:	60bb      	str	r3, [r7, #8]
 8015598:	e013      	b.n	80155c2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	2200      	movs	r2, #0
 80155a2:	2180      	movs	r1, #128	; 0x80
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f000 f993 	bl	80158d0 <UART_WaitOnFlagUntilTimeout>
 80155aa:	4603      	mov	r3, r0
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d001      	beq.n	80155b4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80155b0:	2303      	movs	r3, #3
 80155b2:	e01f      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	1c5a      	adds	r2, r3, #1
 80155b8:	60ba      	str	r2, [r7, #8]
 80155ba:	781a      	ldrb	r2, [r3, #0]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d1b7      	bne.n	801553c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	2200      	movs	r2, #0
 80155d4:	2140      	movs	r1, #64	; 0x40
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f000 f97a 	bl	80158d0 <UART_WaitOnFlagUntilTimeout>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d001      	beq.n	80155e6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80155e2:	2303      	movs	r3, #3
 80155e4:	e006      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2220      	movs	r2, #32
 80155ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e000      	b.n	80155f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80155f2:	2302      	movs	r3, #2
  }
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	3718      	adds	r7, #24
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b085      	sub	sp, #20
 8015600:	af00      	add	r7, sp, #0
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	4613      	mov	r3, r2
 8015608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015610:	b2db      	uxtb	r3, r3
 8015612:	2b20      	cmp	r3, #32
 8015614:	d140      	bne.n	8015698 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d002      	beq.n	8015622 <HAL_UART_Receive_IT+0x26>
 801561c:	88fb      	ldrh	r3, [r7, #6]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d101      	bne.n	8015626 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015622:	2301      	movs	r3, #1
 8015624:	e039      	b.n	801569a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801562c:	2b01      	cmp	r3, #1
 801562e:	d101      	bne.n	8015634 <HAL_UART_Receive_IT+0x38>
 8015630:	2302      	movs	r3, #2
 8015632:	e032      	b.n	801569a <HAL_UART_Receive_IT+0x9e>
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	2201      	movs	r2, #1
 8015638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	68ba      	ldr	r2, [r7, #8]
 8015640:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	88fa      	ldrh	r2, [r7, #6]
 8015646:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	88fa      	ldrh	r2, [r7, #6]
 801564c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2200      	movs	r2, #0
 8015652:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2222      	movs	r2, #34	; 0x22
 8015658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	2200      	movs	r2, #0
 8015660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68da      	ldr	r2, [r3, #12]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015672:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	695a      	ldr	r2, [r3, #20]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f042 0201 	orr.w	r2, r2, #1
 8015682:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	68da      	ldr	r2, [r3, #12]
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	f042 0220 	orr.w	r2, r2, #32
 8015692:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015694:	2300      	movs	r3, #0
 8015696:	e000      	b.n	801569a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8015698:	2302      	movs	r3, #2
  }
}
 801569a:	4618      	mov	r0, r3
 801569c:	3714      	adds	r7, #20
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr
	...

080156a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b088      	sub	sp, #32
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	695b      	ldr	r3, [r3, #20]
 80156c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80156c8:	2300      	movs	r3, #0
 80156ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80156cc:	2300      	movs	r3, #0
 80156ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	f003 030f 	and.w	r3, r3, #15
 80156d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d10d      	bne.n	80156fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	f003 0320 	and.w	r3, r3, #32
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d008      	beq.n	80156fa <HAL_UART_IRQHandler+0x52>
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	f003 0320 	and.w	r3, r3, #32
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d003      	beq.n	80156fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 f9d6 	bl	8015aa4 <UART_Receive_IT>
      return;
 80156f8:	e0d0      	b.n	801589c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f000 80b0 	beq.w	8015862 <HAL_UART_IRQHandler+0x1ba>
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b00      	cmp	r3, #0
 801570a:	d105      	bne.n	8015718 <HAL_UART_IRQHandler+0x70>
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8015712:	2b00      	cmp	r3, #0
 8015714:	f000 80a5 	beq.w	8015862 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	f003 0301 	and.w	r3, r3, #1
 801571e:	2b00      	cmp	r3, #0
 8015720:	d00a      	beq.n	8015738 <HAL_UART_IRQHandler+0x90>
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015728:	2b00      	cmp	r3, #0
 801572a:	d005      	beq.n	8015738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015730:	f043 0201 	orr.w	r2, r3, #1
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	f003 0304 	and.w	r3, r3, #4
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00a      	beq.n	8015758 <HAL_UART_IRQHandler+0xb0>
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	f003 0301 	and.w	r3, r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	d005      	beq.n	8015758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015750:	f043 0202 	orr.w	r2, r3, #2
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015758:	69fb      	ldr	r3, [r7, #28]
 801575a:	f003 0302 	and.w	r3, r3, #2
 801575e:	2b00      	cmp	r3, #0
 8015760:	d00a      	beq.n	8015778 <HAL_UART_IRQHandler+0xd0>
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	f003 0301 	and.w	r3, r3, #1
 8015768:	2b00      	cmp	r3, #0
 801576a:	d005      	beq.n	8015778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015770:	f043 0204 	orr.w	r2, r3, #4
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	f003 0308 	and.w	r3, r3, #8
 801577e:	2b00      	cmp	r3, #0
 8015780:	d00f      	beq.n	80157a2 <HAL_UART_IRQHandler+0xfa>
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	f003 0320 	and.w	r3, r3, #32
 8015788:	2b00      	cmp	r3, #0
 801578a:	d104      	bne.n	8015796 <HAL_UART_IRQHandler+0xee>
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	f003 0301 	and.w	r3, r3, #1
 8015792:	2b00      	cmp	r3, #0
 8015794:	d005      	beq.n	80157a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801579a:	f043 0208 	orr.w	r2, r3, #8
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d077      	beq.n	801589a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	f003 0320 	and.w	r3, r3, #32
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d007      	beq.n	80157c4 <HAL_UART_IRQHandler+0x11c>
 80157b4:	69bb      	ldr	r3, [r7, #24]
 80157b6:	f003 0320 	and.w	r3, r3, #32
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d002      	beq.n	80157c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f000 f970 	bl	8015aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	695b      	ldr	r3, [r3, #20]
 80157ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157ce:	2b40      	cmp	r3, #64	; 0x40
 80157d0:	bf0c      	ite	eq
 80157d2:	2301      	moveq	r3, #1
 80157d4:	2300      	movne	r3, #0
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157de:	f003 0308 	and.w	r3, r3, #8
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d102      	bne.n	80157ec <HAL_UART_IRQHandler+0x144>
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d031      	beq.n	8015850 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 f8b9 	bl	8015964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	695b      	ldr	r3, [r3, #20]
 80157f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157fc:	2b40      	cmp	r3, #64	; 0x40
 80157fe:	d123      	bne.n	8015848 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	695a      	ldr	r2, [r3, #20]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801580e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015814:	2b00      	cmp	r3, #0
 8015816:	d013      	beq.n	8015840 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801581c:	4a21      	ldr	r2, [pc, #132]	; (80158a4 <HAL_UART_IRQHandler+0x1fc>)
 801581e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015824:	4618      	mov	r0, r3
 8015826:	f7fb fa9b 	bl	8010d60 <HAL_DMA_Abort_IT>
 801582a:	4603      	mov	r3, r0
 801582c:	2b00      	cmp	r3, #0
 801582e:	d016      	beq.n	801585e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801583a:	4610      	mov	r0, r2
 801583c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801583e:	e00e      	b.n	801585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f000 f83b 	bl	80158bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015846:	e00a      	b.n	801585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 f837 	bl	80158bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801584e:	e006      	b.n	801585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f000 f833 	bl	80158bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2200      	movs	r2, #0
 801585a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801585c:	e01d      	b.n	801589a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801585e:	bf00      	nop
    return;
 8015860:	e01b      	b.n	801589a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015868:	2b00      	cmp	r3, #0
 801586a:	d008      	beq.n	801587e <HAL_UART_IRQHandler+0x1d6>
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015872:	2b00      	cmp	r3, #0
 8015874:	d003      	beq.n	801587e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 f8a6 	bl	80159c8 <UART_Transmit_IT>
    return;
 801587c:	e00e      	b.n	801589c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015884:	2b00      	cmp	r3, #0
 8015886:	d009      	beq.n	801589c <HAL_UART_IRQHandler+0x1f4>
 8015888:	69bb      	ldr	r3, [r7, #24]
 801588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801588e:	2b00      	cmp	r3, #0
 8015890:	d004      	beq.n	801589c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 f8ee 	bl	8015a74 <UART_EndTransmit_IT>
    return;
 8015898:	e000      	b.n	801589c <HAL_UART_IRQHandler+0x1f4>
    return;
 801589a:	bf00      	nop
  }
}
 801589c:	3720      	adds	r7, #32
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}
 80158a2:	bf00      	nop
 80158a4:	080159a1 	.word	0x080159a1

080158a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80158b0:	bf00      	nop
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr

080158bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	603b      	str	r3, [r7, #0]
 80158dc:	4613      	mov	r3, r2
 80158de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80158e0:	e02c      	b.n	801593c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158e8:	d028      	beq.n	801593c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d007      	beq.n	8015900 <UART_WaitOnFlagUntilTimeout+0x30>
 80158f0:	f7fa f8f8 	bl	800fae4 <HAL_GetTick>
 80158f4:	4602      	mov	r2, r0
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	1ad3      	subs	r3, r2, r3
 80158fa:	69ba      	ldr	r2, [r7, #24]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d21d      	bcs.n	801593c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	68da      	ldr	r2, [r3, #12]
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801590e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	695a      	ldr	r2, [r3, #20]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f022 0201 	bic.w	r2, r2, #1
 801591e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2220      	movs	r2, #32
 8015924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2220      	movs	r2, #32
 801592c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	2200      	movs	r2, #0
 8015934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8015938:	2303      	movs	r3, #3
 801593a:	e00f      	b.n	801595c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	681a      	ldr	r2, [r3, #0]
 8015942:	68bb      	ldr	r3, [r7, #8]
 8015944:	4013      	ands	r3, r2
 8015946:	68ba      	ldr	r2, [r7, #8]
 8015948:	429a      	cmp	r2, r3
 801594a:	bf0c      	ite	eq
 801594c:	2301      	moveq	r3, #1
 801594e:	2300      	movne	r3, #0
 8015950:	b2db      	uxtb	r3, r3
 8015952:	461a      	mov	r2, r3
 8015954:	79fb      	ldrb	r3, [r7, #7]
 8015956:	429a      	cmp	r2, r3
 8015958:	d0c3      	beq.n	80158e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801595a:	2300      	movs	r3, #0
}
 801595c:	4618      	mov	r0, r3
 801595e:	3710      	adds	r7, #16
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015964:	b480      	push	{r7}
 8015966:	b083      	sub	sp, #12
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	68da      	ldr	r2, [r3, #12]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801597a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	695a      	ldr	r2, [r3, #20]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f022 0201 	bic.w	r2, r2, #1
 801598a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2220      	movs	r2, #32
 8015990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8015994:	bf00      	nop
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr

080159a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2200      	movs	r2, #0
 80159b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2200      	movs	r2, #0
 80159b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80159ba:	68f8      	ldr	r0, [r7, #12]
 80159bc:	f7ff ff7e 	bl	80158bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80159c0:	bf00      	nop
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b085      	sub	sp, #20
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	2b21      	cmp	r3, #33	; 0x21
 80159da:	d144      	bne.n	8015a66 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	689b      	ldr	r3, [r3, #8]
 80159e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159e4:	d11a      	bne.n	8015a1c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6a1b      	ldr	r3, [r3, #32]
 80159ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	881b      	ldrh	r3, [r3, #0]
 80159f0:	461a      	mov	r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80159fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	691b      	ldr	r3, [r3, #16]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d105      	bne.n	8015a10 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6a1b      	ldr	r3, [r3, #32]
 8015a08:	1c9a      	adds	r2, r3, #2
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	621a      	str	r2, [r3, #32]
 8015a0e:	e00e      	b.n	8015a2e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6a1b      	ldr	r3, [r3, #32]
 8015a14:	1c5a      	adds	r2, r3, #1
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	621a      	str	r2, [r3, #32]
 8015a1a:	e008      	b.n	8015a2e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	6a1b      	ldr	r3, [r3, #32]
 8015a20:	1c59      	adds	r1, r3, #1
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	6211      	str	r1, [r2, #32]
 8015a26:	781a      	ldrb	r2, [r3, #0]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	3b01      	subs	r3, #1
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	687a      	ldr	r2, [r7, #4]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d10f      	bne.n	8015a62 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	68da      	ldr	r2, [r3, #12]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	68da      	ldr	r2, [r3, #12]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8015a62:	2300      	movs	r3, #0
 8015a64:	e000      	b.n	8015a68 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015a66:	2302      	movs	r3, #2
  }
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3714      	adds	r7, #20
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	68da      	ldr	r2, [r3, #12]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2220      	movs	r2, #32
 8015a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f7ff ff07 	bl	80158a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8015a9a:	2300      	movs	r3, #0
}
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	2b22      	cmp	r3, #34	; 0x22
 8015ab6:	d171      	bne.n	8015b9c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ac0:	d123      	bne.n	8015b0a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ac6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	691b      	ldr	r3, [r3, #16]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d10e      	bne.n	8015aee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ae6:	1c9a      	adds	r2, r3, #2
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	629a      	str	r2, [r3, #40]	; 0x28
 8015aec:	e029      	b.n	8015b42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	b29a      	uxth	r2, r3
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b02:	1c5a      	adds	r2, r3, #1
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	629a      	str	r2, [r3, #40]	; 0x28
 8015b08:	e01b      	b.n	8015b42 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	691b      	ldr	r3, [r3, #16]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d10a      	bne.n	8015b28 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	6858      	ldr	r0, [r3, #4]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b1c:	1c59      	adds	r1, r3, #1
 8015b1e:	687a      	ldr	r2, [r7, #4]
 8015b20:	6291      	str	r1, [r2, #40]	; 0x28
 8015b22:	b2c2      	uxtb	r2, r0
 8015b24:	701a      	strb	r2, [r3, #0]
 8015b26:	e00c      	b.n	8015b42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	685b      	ldr	r3, [r3, #4]
 8015b2e:	b2da      	uxtb	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b34:	1c58      	adds	r0, r3, #1
 8015b36:	6879      	ldr	r1, [r7, #4]
 8015b38:	6288      	str	r0, [r1, #40]	; 0x28
 8015b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015b3e:	b2d2      	uxtb	r2, r2
 8015b40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d120      	bne.n	8015b98 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	68da      	ldr	r2, [r3, #12]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	f022 0220 	bic.w	r2, r2, #32
 8015b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	68da      	ldr	r2, [r3, #12]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	695a      	ldr	r2, [r3, #20]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f022 0201 	bic.w	r2, r2, #1
 8015b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2220      	movs	r2, #32
 8015b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f7ef f9b8 	bl	8004f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8015b94:	2300      	movs	r3, #0
 8015b96:	e002      	b.n	8015b9e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	e000      	b.n	8015b9e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8015b9c:	2302      	movs	r3, #2
  }
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
	...

08015ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	b0bd      	sub	sp, #244	; 0xf4
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	691b      	ldr	r3, [r3, #16]
 8015bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bc4:	68d9      	ldr	r1, [r3, #12]
 8015bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	ea40 0301 	orr.w	r3, r0, r1
 8015bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bd6:	689a      	ldr	r2, [r3, #8]
 8015bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bdc:	691b      	ldr	r3, [r3, #16]
 8015bde:	431a      	orrs	r2, r3
 8015be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015be4:	695b      	ldr	r3, [r3, #20]
 8015be6:	431a      	orrs	r2, r3
 8015be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bec:	69db      	ldr	r3, [r3, #28]
 8015bee:	4313      	orrs	r3, r2
 8015bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8015bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015c00:	f021 010c 	bic.w	r1, r1, #12
 8015c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015c0e:	430b      	orrs	r3, r1
 8015c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	695b      	ldr	r3, [r3, #20]
 8015c1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8015c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c22:	6999      	ldr	r1, [r3, #24]
 8015c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	ea40 0301 	orr.w	r3, r0, r1
 8015c2e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c34:	69db      	ldr	r3, [r3, #28]
 8015c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015c3a:	f040 81a5 	bne.w	8015f88 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	4bcd      	ldr	r3, [pc, #820]	; (8015f7c <UART_SetConfig+0x3d4>)
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d006      	beq.n	8015c58 <UART_SetConfig+0xb0>
 8015c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	4bcb      	ldr	r3, [pc, #812]	; (8015f80 <UART_SetConfig+0x3d8>)
 8015c52:	429a      	cmp	r2, r3
 8015c54:	f040 80cb 	bne.w	8015dee <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015c58:	f7fe fa86 	bl	8014168 <HAL_RCC_GetPCLK2Freq>
 8015c5c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015c60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015c64:	461c      	mov	r4, r3
 8015c66:	f04f 0500 	mov.w	r5, #0
 8015c6a:	4622      	mov	r2, r4
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	1891      	adds	r1, r2, r2
 8015c70:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8015c74:	415b      	adcs	r3, r3
 8015c76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8015c7e:	1912      	adds	r2, r2, r4
 8015c80:	eb45 0303 	adc.w	r3, r5, r3
 8015c84:	f04f 0000 	mov.w	r0, #0
 8015c88:	f04f 0100 	mov.w	r1, #0
 8015c8c:	00d9      	lsls	r1, r3, #3
 8015c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015c92:	00d0      	lsls	r0, r2, #3
 8015c94:	4602      	mov	r2, r0
 8015c96:	460b      	mov	r3, r1
 8015c98:	1911      	adds	r1, r2, r4
 8015c9a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8015c9e:	416b      	adcs	r3, r5
 8015ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8015ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	461a      	mov	r2, r3
 8015cac:	f04f 0300 	mov.w	r3, #0
 8015cb0:	1891      	adds	r1, r2, r2
 8015cb2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8015cb6:	415b      	adcs	r3, r3
 8015cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015cbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8015cc0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8015cc4:	f7ea ffe0 	bl	8000c88 <__aeabi_uldivmod>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	460b      	mov	r3, r1
 8015ccc:	4bad      	ldr	r3, [pc, #692]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015cce:	fba3 2302 	umull	r2, r3, r3, r2
 8015cd2:	095b      	lsrs	r3, r3, #5
 8015cd4:	011e      	lsls	r6, r3, #4
 8015cd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015cda:	461c      	mov	r4, r3
 8015cdc:	f04f 0500 	mov.w	r5, #0
 8015ce0:	4622      	mov	r2, r4
 8015ce2:	462b      	mov	r3, r5
 8015ce4:	1891      	adds	r1, r2, r2
 8015ce6:	67b9      	str	r1, [r7, #120]	; 0x78
 8015ce8:	415b      	adcs	r3, r3
 8015cea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015cec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8015cf0:	1912      	adds	r2, r2, r4
 8015cf2:	eb45 0303 	adc.w	r3, r5, r3
 8015cf6:	f04f 0000 	mov.w	r0, #0
 8015cfa:	f04f 0100 	mov.w	r1, #0
 8015cfe:	00d9      	lsls	r1, r3, #3
 8015d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015d04:	00d0      	lsls	r0, r2, #3
 8015d06:	4602      	mov	r2, r0
 8015d08:	460b      	mov	r3, r1
 8015d0a:	1911      	adds	r1, r2, r4
 8015d0c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8015d10:	416b      	adcs	r3, r5
 8015d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8015d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	f04f 0300 	mov.w	r3, #0
 8015d22:	1891      	adds	r1, r2, r2
 8015d24:	6739      	str	r1, [r7, #112]	; 0x70
 8015d26:	415b      	adcs	r3, r3
 8015d28:	677b      	str	r3, [r7, #116]	; 0x74
 8015d2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8015d2e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8015d32:	f7ea ffa9 	bl	8000c88 <__aeabi_uldivmod>
 8015d36:	4602      	mov	r2, r0
 8015d38:	460b      	mov	r3, r1
 8015d3a:	4b92      	ldr	r3, [pc, #584]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8015d40:	095b      	lsrs	r3, r3, #5
 8015d42:	2164      	movs	r1, #100	; 0x64
 8015d44:	fb01 f303 	mul.w	r3, r1, r3
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	00db      	lsls	r3, r3, #3
 8015d4c:	3332      	adds	r3, #50	; 0x32
 8015d4e:	4a8d      	ldr	r2, [pc, #564]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015d50:	fba2 2303 	umull	r2, r3, r2, r3
 8015d54:	095b      	lsrs	r3, r3, #5
 8015d56:	005b      	lsls	r3, r3, #1
 8015d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015d5c:	441e      	add	r6, r3
 8015d5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015d62:	4618      	mov	r0, r3
 8015d64:	f04f 0100 	mov.w	r1, #0
 8015d68:	4602      	mov	r2, r0
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	1894      	adds	r4, r2, r2
 8015d6e:	66bc      	str	r4, [r7, #104]	; 0x68
 8015d70:	415b      	adcs	r3, r3
 8015d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8015d78:	1812      	adds	r2, r2, r0
 8015d7a:	eb41 0303 	adc.w	r3, r1, r3
 8015d7e:	f04f 0400 	mov.w	r4, #0
 8015d82:	f04f 0500 	mov.w	r5, #0
 8015d86:	00dd      	lsls	r5, r3, #3
 8015d88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015d8c:	00d4      	lsls	r4, r2, #3
 8015d8e:	4622      	mov	r2, r4
 8015d90:	462b      	mov	r3, r5
 8015d92:	1814      	adds	r4, r2, r0
 8015d94:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8015d98:	414b      	adcs	r3, r1
 8015d9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	461a      	mov	r2, r3
 8015da6:	f04f 0300 	mov.w	r3, #0
 8015daa:	1891      	adds	r1, r2, r2
 8015dac:	6639      	str	r1, [r7, #96]	; 0x60
 8015dae:	415b      	adcs	r3, r3
 8015db0:	667b      	str	r3, [r7, #100]	; 0x64
 8015db2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8015db6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015dba:	f7ea ff65 	bl	8000c88 <__aeabi_uldivmod>
 8015dbe:	4602      	mov	r2, r0
 8015dc0:	460b      	mov	r3, r1
 8015dc2:	4b70      	ldr	r3, [pc, #448]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8015dc8:	095b      	lsrs	r3, r3, #5
 8015dca:	2164      	movs	r1, #100	; 0x64
 8015dcc:	fb01 f303 	mul.w	r3, r1, r3
 8015dd0:	1ad3      	subs	r3, r2, r3
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	3332      	adds	r3, #50	; 0x32
 8015dd6:	4a6b      	ldr	r2, [pc, #428]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8015ddc:	095b      	lsrs	r3, r3, #5
 8015dde:	f003 0207 	and.w	r2, r3, #7
 8015de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4432      	add	r2, r6
 8015dea:	609a      	str	r2, [r3, #8]
 8015dec:	e26d      	b.n	80162ca <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015dee:	f7fe f9a7 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 8015df2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015df6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015dfa:	461c      	mov	r4, r3
 8015dfc:	f04f 0500 	mov.w	r5, #0
 8015e00:	4622      	mov	r2, r4
 8015e02:	462b      	mov	r3, r5
 8015e04:	1891      	adds	r1, r2, r2
 8015e06:	65b9      	str	r1, [r7, #88]	; 0x58
 8015e08:	415b      	adcs	r3, r3
 8015e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015e0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8015e10:	1912      	adds	r2, r2, r4
 8015e12:	eb45 0303 	adc.w	r3, r5, r3
 8015e16:	f04f 0000 	mov.w	r0, #0
 8015e1a:	f04f 0100 	mov.w	r1, #0
 8015e1e:	00d9      	lsls	r1, r3, #3
 8015e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015e24:	00d0      	lsls	r0, r2, #3
 8015e26:	4602      	mov	r2, r0
 8015e28:	460b      	mov	r3, r1
 8015e2a:	1911      	adds	r1, r2, r4
 8015e2c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8015e30:	416b      	adcs	r3, r5
 8015e32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	f04f 0300 	mov.w	r3, #0
 8015e42:	1891      	adds	r1, r2, r2
 8015e44:	6539      	str	r1, [r7, #80]	; 0x50
 8015e46:	415b      	adcs	r3, r3
 8015e48:	657b      	str	r3, [r7, #84]	; 0x54
 8015e4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015e4e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8015e52:	f7ea ff19 	bl	8000c88 <__aeabi_uldivmod>
 8015e56:	4602      	mov	r2, r0
 8015e58:	460b      	mov	r3, r1
 8015e5a:	4b4a      	ldr	r3, [pc, #296]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8015e60:	095b      	lsrs	r3, r3, #5
 8015e62:	011e      	lsls	r6, r3, #4
 8015e64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015e68:	461c      	mov	r4, r3
 8015e6a:	f04f 0500 	mov.w	r5, #0
 8015e6e:	4622      	mov	r2, r4
 8015e70:	462b      	mov	r3, r5
 8015e72:	1891      	adds	r1, r2, r2
 8015e74:	64b9      	str	r1, [r7, #72]	; 0x48
 8015e76:	415b      	adcs	r3, r3
 8015e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015e7e:	1912      	adds	r2, r2, r4
 8015e80:	eb45 0303 	adc.w	r3, r5, r3
 8015e84:	f04f 0000 	mov.w	r0, #0
 8015e88:	f04f 0100 	mov.w	r1, #0
 8015e8c:	00d9      	lsls	r1, r3, #3
 8015e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015e92:	00d0      	lsls	r0, r2, #3
 8015e94:	4602      	mov	r2, r0
 8015e96:	460b      	mov	r3, r1
 8015e98:	1911      	adds	r1, r2, r4
 8015e9a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8015e9e:	416b      	adcs	r3, r5
 8015ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	461a      	mov	r2, r3
 8015eac:	f04f 0300 	mov.w	r3, #0
 8015eb0:	1891      	adds	r1, r2, r2
 8015eb2:	6439      	str	r1, [r7, #64]	; 0x40
 8015eb4:	415b      	adcs	r3, r3
 8015eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8015eb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015ebc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8015ec0:	f7ea fee2 	bl	8000c88 <__aeabi_uldivmod>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	460b      	mov	r3, r1
 8015ec8:	4b2e      	ldr	r3, [pc, #184]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015eca:	fba3 1302 	umull	r1, r3, r3, r2
 8015ece:	095b      	lsrs	r3, r3, #5
 8015ed0:	2164      	movs	r1, #100	; 0x64
 8015ed2:	fb01 f303 	mul.w	r3, r1, r3
 8015ed6:	1ad3      	subs	r3, r2, r3
 8015ed8:	00db      	lsls	r3, r3, #3
 8015eda:	3332      	adds	r3, #50	; 0x32
 8015edc:	4a29      	ldr	r2, [pc, #164]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015ede:	fba2 2303 	umull	r2, r3, r2, r3
 8015ee2:	095b      	lsrs	r3, r3, #5
 8015ee4:	005b      	lsls	r3, r3, #1
 8015ee6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015eea:	441e      	add	r6, r3
 8015eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f04f 0100 	mov.w	r1, #0
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	460b      	mov	r3, r1
 8015efa:	1894      	adds	r4, r2, r2
 8015efc:	63bc      	str	r4, [r7, #56]	; 0x38
 8015efe:	415b      	adcs	r3, r3
 8015f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015f02:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015f06:	1812      	adds	r2, r2, r0
 8015f08:	eb41 0303 	adc.w	r3, r1, r3
 8015f0c:	f04f 0400 	mov.w	r4, #0
 8015f10:	f04f 0500 	mov.w	r5, #0
 8015f14:	00dd      	lsls	r5, r3, #3
 8015f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015f1a:	00d4      	lsls	r4, r2, #3
 8015f1c:	4622      	mov	r2, r4
 8015f1e:	462b      	mov	r3, r5
 8015f20:	1814      	adds	r4, r2, r0
 8015f22:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8015f26:	414b      	adcs	r3, r1
 8015f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f30:	685b      	ldr	r3, [r3, #4]
 8015f32:	461a      	mov	r2, r3
 8015f34:	f04f 0300 	mov.w	r3, #0
 8015f38:	1891      	adds	r1, r2, r2
 8015f3a:	6339      	str	r1, [r7, #48]	; 0x30
 8015f3c:	415b      	adcs	r3, r3
 8015f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8015f40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8015f44:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8015f48:	f7ea fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	460b      	mov	r3, r1
 8015f50:	4b0c      	ldr	r3, [pc, #48]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015f52:	fba3 1302 	umull	r1, r3, r3, r2
 8015f56:	095b      	lsrs	r3, r3, #5
 8015f58:	2164      	movs	r1, #100	; 0x64
 8015f5a:	fb01 f303 	mul.w	r3, r1, r3
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	00db      	lsls	r3, r3, #3
 8015f62:	3332      	adds	r3, #50	; 0x32
 8015f64:	4a07      	ldr	r2, [pc, #28]	; (8015f84 <UART_SetConfig+0x3dc>)
 8015f66:	fba2 2303 	umull	r2, r3, r2, r3
 8015f6a:	095b      	lsrs	r3, r3, #5
 8015f6c:	f003 0207 	and.w	r2, r3, #7
 8015f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	4432      	add	r2, r6
 8015f78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8015f7a:	e1a6      	b.n	80162ca <UART_SetConfig+0x722>
 8015f7c:	40011000 	.word	0x40011000
 8015f80:	40011400 	.word	0x40011400
 8015f84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	4bd1      	ldr	r3, [pc, #836]	; (80162d4 <UART_SetConfig+0x72c>)
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d006      	beq.n	8015fa2 <UART_SetConfig+0x3fa>
 8015f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	4bcf      	ldr	r3, [pc, #828]	; (80162d8 <UART_SetConfig+0x730>)
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	f040 80ca 	bne.w	8016136 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015fa2:	f7fe f8e1 	bl	8014168 <HAL_RCC_GetPCLK2Freq>
 8015fa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015fae:	461c      	mov	r4, r3
 8015fb0:	f04f 0500 	mov.w	r5, #0
 8015fb4:	4622      	mov	r2, r4
 8015fb6:	462b      	mov	r3, r5
 8015fb8:	1891      	adds	r1, r2, r2
 8015fba:	62b9      	str	r1, [r7, #40]	; 0x28
 8015fbc:	415b      	adcs	r3, r3
 8015fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015fc4:	1912      	adds	r2, r2, r4
 8015fc6:	eb45 0303 	adc.w	r3, r5, r3
 8015fca:	f04f 0000 	mov.w	r0, #0
 8015fce:	f04f 0100 	mov.w	r1, #0
 8015fd2:	00d9      	lsls	r1, r3, #3
 8015fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015fd8:	00d0      	lsls	r0, r2, #3
 8015fda:	4602      	mov	r2, r0
 8015fdc:	460b      	mov	r3, r1
 8015fde:	eb12 0a04 	adds.w	sl, r2, r4
 8015fe2:	eb43 0b05 	adc.w	fp, r3, r5
 8015fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015fea:	685b      	ldr	r3, [r3, #4]
 8015fec:	4618      	mov	r0, r3
 8015fee:	f04f 0100 	mov.w	r1, #0
 8015ff2:	f04f 0200 	mov.w	r2, #0
 8015ff6:	f04f 0300 	mov.w	r3, #0
 8015ffa:	008b      	lsls	r3, r1, #2
 8015ffc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016000:	0082      	lsls	r2, r0, #2
 8016002:	4650      	mov	r0, sl
 8016004:	4659      	mov	r1, fp
 8016006:	f7ea fe3f 	bl	8000c88 <__aeabi_uldivmod>
 801600a:	4602      	mov	r2, r0
 801600c:	460b      	mov	r3, r1
 801600e:	4bb3      	ldr	r3, [pc, #716]	; (80162dc <UART_SetConfig+0x734>)
 8016010:	fba3 2302 	umull	r2, r3, r3, r2
 8016014:	095b      	lsrs	r3, r3, #5
 8016016:	011e      	lsls	r6, r3, #4
 8016018:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801601c:	4618      	mov	r0, r3
 801601e:	f04f 0100 	mov.w	r1, #0
 8016022:	4602      	mov	r2, r0
 8016024:	460b      	mov	r3, r1
 8016026:	1894      	adds	r4, r2, r2
 8016028:	623c      	str	r4, [r7, #32]
 801602a:	415b      	adcs	r3, r3
 801602c:	627b      	str	r3, [r7, #36]	; 0x24
 801602e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016032:	1812      	adds	r2, r2, r0
 8016034:	eb41 0303 	adc.w	r3, r1, r3
 8016038:	f04f 0400 	mov.w	r4, #0
 801603c:	f04f 0500 	mov.w	r5, #0
 8016040:	00dd      	lsls	r5, r3, #3
 8016042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016046:	00d4      	lsls	r4, r2, #3
 8016048:	4622      	mov	r2, r4
 801604a:	462b      	mov	r3, r5
 801604c:	1814      	adds	r4, r2, r0
 801604e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8016052:	414b      	adcs	r3, r1
 8016054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	4618      	mov	r0, r3
 8016060:	f04f 0100 	mov.w	r1, #0
 8016064:	f04f 0200 	mov.w	r2, #0
 8016068:	f04f 0300 	mov.w	r3, #0
 801606c:	008b      	lsls	r3, r1, #2
 801606e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016072:	0082      	lsls	r2, r0, #2
 8016074:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8016078:	f7ea fe06 	bl	8000c88 <__aeabi_uldivmod>
 801607c:	4602      	mov	r2, r0
 801607e:	460b      	mov	r3, r1
 8016080:	4b96      	ldr	r3, [pc, #600]	; (80162dc <UART_SetConfig+0x734>)
 8016082:	fba3 1302 	umull	r1, r3, r3, r2
 8016086:	095b      	lsrs	r3, r3, #5
 8016088:	2164      	movs	r1, #100	; 0x64
 801608a:	fb01 f303 	mul.w	r3, r1, r3
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	011b      	lsls	r3, r3, #4
 8016092:	3332      	adds	r3, #50	; 0x32
 8016094:	4a91      	ldr	r2, [pc, #580]	; (80162dc <UART_SetConfig+0x734>)
 8016096:	fba2 2303 	umull	r2, r3, r2, r3
 801609a:	095b      	lsrs	r3, r3, #5
 801609c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160a0:	441e      	add	r6, r3
 80160a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80160a6:	4618      	mov	r0, r3
 80160a8:	f04f 0100 	mov.w	r1, #0
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	1894      	adds	r4, r2, r2
 80160b2:	61bc      	str	r4, [r7, #24]
 80160b4:	415b      	adcs	r3, r3
 80160b6:	61fb      	str	r3, [r7, #28]
 80160b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80160bc:	1812      	adds	r2, r2, r0
 80160be:	eb41 0303 	adc.w	r3, r1, r3
 80160c2:	f04f 0400 	mov.w	r4, #0
 80160c6:	f04f 0500 	mov.w	r5, #0
 80160ca:	00dd      	lsls	r5, r3, #3
 80160cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80160d0:	00d4      	lsls	r4, r2, #3
 80160d2:	4622      	mov	r2, r4
 80160d4:	462b      	mov	r3, r5
 80160d6:	1814      	adds	r4, r2, r0
 80160d8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80160dc:	414b      	adcs	r3, r1
 80160de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80160e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f04f 0100 	mov.w	r1, #0
 80160ee:	f04f 0200 	mov.w	r2, #0
 80160f2:	f04f 0300 	mov.w	r3, #0
 80160f6:	008b      	lsls	r3, r1, #2
 80160f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80160fc:	0082      	lsls	r2, r0, #2
 80160fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8016102:	f7ea fdc1 	bl	8000c88 <__aeabi_uldivmod>
 8016106:	4602      	mov	r2, r0
 8016108:	460b      	mov	r3, r1
 801610a:	4b74      	ldr	r3, [pc, #464]	; (80162dc <UART_SetConfig+0x734>)
 801610c:	fba3 1302 	umull	r1, r3, r3, r2
 8016110:	095b      	lsrs	r3, r3, #5
 8016112:	2164      	movs	r1, #100	; 0x64
 8016114:	fb01 f303 	mul.w	r3, r1, r3
 8016118:	1ad3      	subs	r3, r2, r3
 801611a:	011b      	lsls	r3, r3, #4
 801611c:	3332      	adds	r3, #50	; 0x32
 801611e:	4a6f      	ldr	r2, [pc, #444]	; (80162dc <UART_SetConfig+0x734>)
 8016120:	fba2 2303 	umull	r2, r3, r2, r3
 8016124:	095b      	lsrs	r3, r3, #5
 8016126:	f003 020f 	and.w	r2, r3, #15
 801612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4432      	add	r2, r6
 8016132:	609a      	str	r2, [r3, #8]
 8016134:	e0c9      	b.n	80162ca <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8016136:	f7fe f803 	bl	8014140 <HAL_RCC_GetPCLK1Freq>
 801613a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801613e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016142:	461c      	mov	r4, r3
 8016144:	f04f 0500 	mov.w	r5, #0
 8016148:	4622      	mov	r2, r4
 801614a:	462b      	mov	r3, r5
 801614c:	1891      	adds	r1, r2, r2
 801614e:	6139      	str	r1, [r7, #16]
 8016150:	415b      	adcs	r3, r3
 8016152:	617b      	str	r3, [r7, #20]
 8016154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016158:	1912      	adds	r2, r2, r4
 801615a:	eb45 0303 	adc.w	r3, r5, r3
 801615e:	f04f 0000 	mov.w	r0, #0
 8016162:	f04f 0100 	mov.w	r1, #0
 8016166:	00d9      	lsls	r1, r3, #3
 8016168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801616c:	00d0      	lsls	r0, r2, #3
 801616e:	4602      	mov	r2, r0
 8016170:	460b      	mov	r3, r1
 8016172:	eb12 0804 	adds.w	r8, r2, r4
 8016176:	eb43 0905 	adc.w	r9, r3, r5
 801617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	4618      	mov	r0, r3
 8016182:	f04f 0100 	mov.w	r1, #0
 8016186:	f04f 0200 	mov.w	r2, #0
 801618a:	f04f 0300 	mov.w	r3, #0
 801618e:	008b      	lsls	r3, r1, #2
 8016190:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016194:	0082      	lsls	r2, r0, #2
 8016196:	4640      	mov	r0, r8
 8016198:	4649      	mov	r1, r9
 801619a:	f7ea fd75 	bl	8000c88 <__aeabi_uldivmod>
 801619e:	4602      	mov	r2, r0
 80161a0:	460b      	mov	r3, r1
 80161a2:	4b4e      	ldr	r3, [pc, #312]	; (80162dc <UART_SetConfig+0x734>)
 80161a4:	fba3 2302 	umull	r2, r3, r3, r2
 80161a8:	095b      	lsrs	r3, r3, #5
 80161aa:	011e      	lsls	r6, r3, #4
 80161ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80161b0:	4618      	mov	r0, r3
 80161b2:	f04f 0100 	mov.w	r1, #0
 80161b6:	4602      	mov	r2, r0
 80161b8:	460b      	mov	r3, r1
 80161ba:	1894      	adds	r4, r2, r2
 80161bc:	60bc      	str	r4, [r7, #8]
 80161be:	415b      	adcs	r3, r3
 80161c0:	60fb      	str	r3, [r7, #12]
 80161c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80161c6:	1812      	adds	r2, r2, r0
 80161c8:	eb41 0303 	adc.w	r3, r1, r3
 80161cc:	f04f 0400 	mov.w	r4, #0
 80161d0:	f04f 0500 	mov.w	r5, #0
 80161d4:	00dd      	lsls	r5, r3, #3
 80161d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80161da:	00d4      	lsls	r4, r2, #3
 80161dc:	4622      	mov	r2, r4
 80161de:	462b      	mov	r3, r5
 80161e0:	1814      	adds	r4, r2, r0
 80161e2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80161e6:	414b      	adcs	r3, r1
 80161e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80161ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	4618      	mov	r0, r3
 80161f4:	f04f 0100 	mov.w	r1, #0
 80161f8:	f04f 0200 	mov.w	r2, #0
 80161fc:	f04f 0300 	mov.w	r3, #0
 8016200:	008b      	lsls	r3, r1, #2
 8016202:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016206:	0082      	lsls	r2, r0, #2
 8016208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801620c:	f7ea fd3c 	bl	8000c88 <__aeabi_uldivmod>
 8016210:	4602      	mov	r2, r0
 8016212:	460b      	mov	r3, r1
 8016214:	4b31      	ldr	r3, [pc, #196]	; (80162dc <UART_SetConfig+0x734>)
 8016216:	fba3 1302 	umull	r1, r3, r3, r2
 801621a:	095b      	lsrs	r3, r3, #5
 801621c:	2164      	movs	r1, #100	; 0x64
 801621e:	fb01 f303 	mul.w	r3, r1, r3
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	011b      	lsls	r3, r3, #4
 8016226:	3332      	adds	r3, #50	; 0x32
 8016228:	4a2c      	ldr	r2, [pc, #176]	; (80162dc <UART_SetConfig+0x734>)
 801622a:	fba2 2303 	umull	r2, r3, r2, r3
 801622e:	095b      	lsrs	r3, r3, #5
 8016230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016234:	441e      	add	r6, r3
 8016236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801623a:	4618      	mov	r0, r3
 801623c:	f04f 0100 	mov.w	r1, #0
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	1894      	adds	r4, r2, r2
 8016246:	603c      	str	r4, [r7, #0]
 8016248:	415b      	adcs	r3, r3
 801624a:	607b      	str	r3, [r7, #4]
 801624c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016250:	1812      	adds	r2, r2, r0
 8016252:	eb41 0303 	adc.w	r3, r1, r3
 8016256:	f04f 0400 	mov.w	r4, #0
 801625a:	f04f 0500 	mov.w	r5, #0
 801625e:	00dd      	lsls	r5, r3, #3
 8016260:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8016264:	00d4      	lsls	r4, r2, #3
 8016266:	4622      	mov	r2, r4
 8016268:	462b      	mov	r3, r5
 801626a:	1814      	adds	r4, r2, r0
 801626c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8016270:	414b      	adcs	r3, r1
 8016272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	f04f 0100 	mov.w	r1, #0
 8016282:	f04f 0200 	mov.w	r2, #0
 8016286:	f04f 0300 	mov.w	r3, #0
 801628a:	008b      	lsls	r3, r1, #2
 801628c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8016290:	0082      	lsls	r2, r0, #2
 8016292:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8016296:	f7ea fcf7 	bl	8000c88 <__aeabi_uldivmod>
 801629a:	4602      	mov	r2, r0
 801629c:	460b      	mov	r3, r1
 801629e:	4b0f      	ldr	r3, [pc, #60]	; (80162dc <UART_SetConfig+0x734>)
 80162a0:	fba3 1302 	umull	r1, r3, r3, r2
 80162a4:	095b      	lsrs	r3, r3, #5
 80162a6:	2164      	movs	r1, #100	; 0x64
 80162a8:	fb01 f303 	mul.w	r3, r1, r3
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	011b      	lsls	r3, r3, #4
 80162b0:	3332      	adds	r3, #50	; 0x32
 80162b2:	4a0a      	ldr	r2, [pc, #40]	; (80162dc <UART_SetConfig+0x734>)
 80162b4:	fba2 2303 	umull	r2, r3, r2, r3
 80162b8:	095b      	lsrs	r3, r3, #5
 80162ba:	f003 020f 	and.w	r2, r3, #15
 80162be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	4432      	add	r2, r6
 80162c6:	609a      	str	r2, [r3, #8]
}
 80162c8:	e7ff      	b.n	80162ca <UART_SetConfig+0x722>
 80162ca:	bf00      	nop
 80162cc:	37f4      	adds	r7, #244	; 0xf4
 80162ce:	46bd      	mov	sp, r7
 80162d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d4:	40011000 	.word	0x40011000
 80162d8:	40011400 	.word	0x40011400
 80162dc:	51eb851f 	.word	0x51eb851f

080162e0 <__NVIC_SetPriority>:
{
 80162e0:	b480      	push	{r7}
 80162e2:	b083      	sub	sp, #12
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	4603      	mov	r3, r0
 80162e8:	6039      	str	r1, [r7, #0]
 80162ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80162ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	db0a      	blt.n	801630a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	b2da      	uxtb	r2, r3
 80162f8:	490c      	ldr	r1, [pc, #48]	; (801632c <__NVIC_SetPriority+0x4c>)
 80162fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162fe:	0112      	lsls	r2, r2, #4
 8016300:	b2d2      	uxtb	r2, r2
 8016302:	440b      	add	r3, r1
 8016304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016308:	e00a      	b.n	8016320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	b2da      	uxtb	r2, r3
 801630e:	4908      	ldr	r1, [pc, #32]	; (8016330 <__NVIC_SetPriority+0x50>)
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	f003 030f 	and.w	r3, r3, #15
 8016316:	3b04      	subs	r3, #4
 8016318:	0112      	lsls	r2, r2, #4
 801631a:	b2d2      	uxtb	r2, r2
 801631c:	440b      	add	r3, r1
 801631e:	761a      	strb	r2, [r3, #24]
}
 8016320:	bf00      	nop
 8016322:	370c      	adds	r7, #12
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr
 801632c:	e000e100 	.word	0xe000e100
 8016330:	e000ed00 	.word	0xe000ed00

08016334 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016334:	b580      	push	{r7, lr}
 8016336:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016338:	4b05      	ldr	r3, [pc, #20]	; (8016350 <SysTick_Handler+0x1c>)
 801633a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801633c:	f001 fe02 	bl	8017f44 <xTaskGetSchedulerState>
 8016340:	4603      	mov	r3, r0
 8016342:	2b01      	cmp	r3, #1
 8016344:	d001      	beq.n	801634a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016346:	f002 fbe7 	bl	8018b18 <xPortSysTickHandler>
  }
}
 801634a:	bf00      	nop
 801634c:	bd80      	pop	{r7, pc}
 801634e:	bf00      	nop
 8016350:	e000e010 	.word	0xe000e010

08016354 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016354:	b580      	push	{r7, lr}
 8016356:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016358:	2100      	movs	r1, #0
 801635a:	f06f 0004 	mvn.w	r0, #4
 801635e:	f7ff ffbf 	bl	80162e0 <__NVIC_SetPriority>
#endif
}
 8016362:	bf00      	nop
 8016364:	bd80      	pop	{r7, pc}
	...

08016368 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801636e:	f3ef 8305 	mrs	r3, IPSR
 8016372:	603b      	str	r3, [r7, #0]
  return(result);
 8016374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016376:	2b00      	cmp	r3, #0
 8016378:	d003      	beq.n	8016382 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801637a:	f06f 0305 	mvn.w	r3, #5
 801637e:	607b      	str	r3, [r7, #4]
 8016380:	e00c      	b.n	801639c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016382:	4b0a      	ldr	r3, [pc, #40]	; (80163ac <osKernelInitialize+0x44>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d105      	bne.n	8016396 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801638a:	4b08      	ldr	r3, [pc, #32]	; (80163ac <osKernelInitialize+0x44>)
 801638c:	2201      	movs	r2, #1
 801638e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016390:	2300      	movs	r3, #0
 8016392:	607b      	str	r3, [r7, #4]
 8016394:	e002      	b.n	801639c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801639a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801639c:	687b      	ldr	r3, [r7, #4]
}
 801639e:	4618      	mov	r0, r3
 80163a0:	370c      	adds	r7, #12
 80163a2:	46bd      	mov	sp, r7
 80163a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a8:	4770      	bx	lr
 80163aa:	bf00      	nop
 80163ac:	200015bc 	.word	0x200015bc

080163b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163b6:	f3ef 8305 	mrs	r3, IPSR
 80163ba:	603b      	str	r3, [r7, #0]
  return(result);
 80163bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d003      	beq.n	80163ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80163c2:	f06f 0305 	mvn.w	r3, #5
 80163c6:	607b      	str	r3, [r7, #4]
 80163c8:	e010      	b.n	80163ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80163ca:	4b0b      	ldr	r3, [pc, #44]	; (80163f8 <osKernelStart+0x48>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2b01      	cmp	r3, #1
 80163d0:	d109      	bne.n	80163e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80163d2:	f7ff ffbf 	bl	8016354 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80163d6:	4b08      	ldr	r3, [pc, #32]	; (80163f8 <osKernelStart+0x48>)
 80163d8:	2202      	movs	r2, #2
 80163da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80163dc:	f001 f96a 	bl	80176b4 <vTaskStartScheduler>
      stat = osOK;
 80163e0:	2300      	movs	r3, #0
 80163e2:	607b      	str	r3, [r7, #4]
 80163e4:	e002      	b.n	80163ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80163e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80163ec:	687b      	ldr	r3, [r7, #4]
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3708      	adds	r7, #8
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	200015bc 	.word	0x200015bc

080163fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b08e      	sub	sp, #56	; 0x38
 8016400:	af04      	add	r7, sp, #16
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	60b9      	str	r1, [r7, #8]
 8016406:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016408:	2300      	movs	r3, #0
 801640a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801640c:	f3ef 8305 	mrs	r3, IPSR
 8016410:	617b      	str	r3, [r7, #20]
  return(result);
 8016412:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016414:	2b00      	cmp	r3, #0
 8016416:	d17e      	bne.n	8016516 <osThreadNew+0x11a>
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d07b      	beq.n	8016516 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801641e:	2380      	movs	r3, #128	; 0x80
 8016420:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016422:	2318      	movs	r3, #24
 8016424:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016426:	2300      	movs	r3, #0
 8016428:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801642a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801642e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d045      	beq.n	80164c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d002      	beq.n	8016444 <osThreadNew+0x48>
        name = attr->name;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	699b      	ldr	r3, [r3, #24]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d002      	beq.n	8016452 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	699b      	ldr	r3, [r3, #24]
 8016450:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016452:	69fb      	ldr	r3, [r7, #28]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d008      	beq.n	801646a <osThreadNew+0x6e>
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	2b38      	cmp	r3, #56	; 0x38
 801645c:	d805      	bhi.n	801646a <osThreadNew+0x6e>
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	f003 0301 	and.w	r3, r3, #1
 8016466:	2b00      	cmp	r3, #0
 8016468:	d001      	beq.n	801646e <osThreadNew+0x72>
        return (NULL);
 801646a:	2300      	movs	r3, #0
 801646c:	e054      	b.n	8016518 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	695b      	ldr	r3, [r3, #20]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d003      	beq.n	801647e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	695b      	ldr	r3, [r3, #20]
 801647a:	089b      	lsrs	r3, r3, #2
 801647c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d00e      	beq.n	80164a4 <osThreadNew+0xa8>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	68db      	ldr	r3, [r3, #12]
 801648a:	2b5b      	cmp	r3, #91	; 0x5b
 801648c:	d90a      	bls.n	80164a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016492:	2b00      	cmp	r3, #0
 8016494:	d006      	beq.n	80164a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	695b      	ldr	r3, [r3, #20]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d002      	beq.n	80164a4 <osThreadNew+0xa8>
        mem = 1;
 801649e:	2301      	movs	r3, #1
 80164a0:	61bb      	str	r3, [r7, #24]
 80164a2:	e010      	b.n	80164c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	689b      	ldr	r3, [r3, #8]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d10c      	bne.n	80164c6 <osThreadNew+0xca>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d108      	bne.n	80164c6 <osThreadNew+0xca>
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	691b      	ldr	r3, [r3, #16]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d104      	bne.n	80164c6 <osThreadNew+0xca>
          mem = 0;
 80164bc:	2300      	movs	r3, #0
 80164be:	61bb      	str	r3, [r7, #24]
 80164c0:	e001      	b.n	80164c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80164c2:	2300      	movs	r3, #0
 80164c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80164c6:	69bb      	ldr	r3, [r7, #24]
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d110      	bne.n	80164ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80164d4:	9202      	str	r2, [sp, #8]
 80164d6:	9301      	str	r3, [sp, #4]
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	9300      	str	r3, [sp, #0]
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	6a3a      	ldr	r2, [r7, #32]
 80164e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164e2:	68f8      	ldr	r0, [r7, #12]
 80164e4:	f000 fe38 	bl	8017158 <xTaskCreateStatic>
 80164e8:	4603      	mov	r3, r0
 80164ea:	613b      	str	r3, [r7, #16]
 80164ec:	e013      	b.n	8016516 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80164ee:	69bb      	ldr	r3, [r7, #24]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d110      	bne.n	8016516 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80164f4:	6a3b      	ldr	r3, [r7, #32]
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	f107 0310 	add.w	r3, r7, #16
 80164fc:	9301      	str	r3, [sp, #4]
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	9300      	str	r3, [sp, #0]
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016506:	68f8      	ldr	r0, [r7, #12]
 8016508:	f000 fe83 	bl	8017212 <xTaskCreate>
 801650c:	4603      	mov	r3, r0
 801650e:	2b01      	cmp	r3, #1
 8016510:	d001      	beq.n	8016516 <osThreadNew+0x11a>
            hTask = NULL;
 8016512:	2300      	movs	r3, #0
 8016514:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016516:	693b      	ldr	r3, [r7, #16]
}
 8016518:	4618      	mov	r0, r3
 801651a:	3728      	adds	r7, #40	; 0x28
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8016520:	b580      	push	{r7, lr}
 8016522:	b086      	sub	sp, #24
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801652c:	f3ef 8305 	mrs	r3, IPSR
 8016530:	60bb      	str	r3, [r7, #8]
  return(result);
 8016532:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8016534:	2b00      	cmp	r3, #0
 8016536:	d003      	beq.n	8016540 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8016538:	f06f 0305 	mvn.w	r3, #5
 801653c:	617b      	str	r3, [r7, #20]
 801653e:	e017      	b.n	8016570 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d103      	bne.n	801654e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8016546:	f06f 0303 	mvn.w	r3, #3
 801654a:	617b      	str	r3, [r7, #20]
 801654c:	e010      	b.n	8016570 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801654e:	6938      	ldr	r0, [r7, #16]
 8016550:	f001 f84a 	bl	80175e8 <eTaskGetState>
 8016554:	4603      	mov	r3, r0
 8016556:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8016558:	7bfb      	ldrb	r3, [r7, #15]
 801655a:	2b04      	cmp	r3, #4
 801655c:	d005      	beq.n	801656a <osThreadTerminate+0x4a>
      stat = osOK;
 801655e:	2300      	movs	r3, #0
 8016560:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8016562:	6938      	ldr	r0, [r7, #16]
 8016564:	f000 ff9a 	bl	801749c <vTaskDelete>
 8016568:	e002      	b.n	8016570 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 801656a:	f06f 0302 	mvn.w	r3, #2
 801656e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8016570:	697b      	ldr	r3, [r7, #20]
}
 8016572:	4618      	mov	r0, r3
 8016574:	3718      	adds	r7, #24
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}

0801657a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801657a:	b580      	push	{r7, lr}
 801657c:	b084      	sub	sp, #16
 801657e:	af00      	add	r7, sp, #0
 8016580:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016582:	f3ef 8305 	mrs	r3, IPSR
 8016586:	60bb      	str	r3, [r7, #8]
  return(result);
 8016588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801658a:	2b00      	cmp	r3, #0
 801658c:	d003      	beq.n	8016596 <osDelay+0x1c>
    stat = osErrorISR;
 801658e:	f06f 0305 	mvn.w	r3, #5
 8016592:	60fb      	str	r3, [r7, #12]
 8016594:	e007      	b.n	80165a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016596:	2300      	movs	r3, #0
 8016598:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d002      	beq.n	80165a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 ffed 	bl	8017580 <vTaskDelay>
    }
  }

  return (stat);
 80165a6:	68fb      	ldr	r3, [r7, #12]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80165b0:	b480      	push	{r7}
 80165b2:	b085      	sub	sp, #20
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	4a07      	ldr	r2, [pc, #28]	; (80165dc <vApplicationGetIdleTaskMemory+0x2c>)
 80165c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	4a06      	ldr	r2, [pc, #24]	; (80165e0 <vApplicationGetIdleTaskMemory+0x30>)
 80165c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2280      	movs	r2, #128	; 0x80
 80165cc:	601a      	str	r2, [r3, #0]
}
 80165ce:	bf00      	nop
 80165d0:	3714      	adds	r7, #20
 80165d2:	46bd      	mov	sp, r7
 80165d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop
 80165dc:	200015c0 	.word	0x200015c0
 80165e0:	2000161c 	.word	0x2000161c

080165e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80165e4:	b480      	push	{r7}
 80165e6:	b085      	sub	sp, #20
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	4a07      	ldr	r2, [pc, #28]	; (8016610 <vApplicationGetTimerTaskMemory+0x2c>)
 80165f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80165f6:	68bb      	ldr	r3, [r7, #8]
 80165f8:	4a06      	ldr	r2, [pc, #24]	; (8016614 <vApplicationGetTimerTaskMemory+0x30>)
 80165fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016602:	601a      	str	r2, [r3, #0]
}
 8016604:	bf00      	nop
 8016606:	3714      	adds	r7, #20
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr
 8016610:	2000181c 	.word	0x2000181c
 8016614:	20001878 	.word	0x20001878

08016618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016618:	b480      	push	{r7}
 801661a:	b083      	sub	sp, #12
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f103 0208 	add.w	r2, r3, #8
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f103 0208 	add.w	r2, r3, #8
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f103 0208 	add.w	r2, r3, #8
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2200      	movs	r2, #0
 801664a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801664c:	bf00      	nop
 801664e:	370c      	adds	r7, #12
 8016650:	46bd      	mov	sp, r7
 8016652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016656:	4770      	bx	lr

08016658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016658:	b480      	push	{r7}
 801665a:	b083      	sub	sp, #12
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016666:	bf00      	nop
 8016668:	370c      	adds	r7, #12
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr

08016672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016672:	b480      	push	{r7}
 8016674:	b085      	sub	sp, #20
 8016676:	af00      	add	r7, sp, #0
 8016678:	6078      	str	r0, [r7, #4]
 801667a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	68fa      	ldr	r2, [r7, #12]
 8016686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	689a      	ldr	r2, [r3, #8]
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	683a      	ldr	r2, [r7, #0]
 8016696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	683a      	ldr	r2, [r7, #0]
 801669c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	1c5a      	adds	r2, r3, #1
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	601a      	str	r2, [r3, #0]
}
 80166ae:	bf00      	nop
 80166b0:	3714      	adds	r7, #20
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80166ba:	b480      	push	{r7}
 80166bc:	b085      	sub	sp, #20
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
 80166c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80166d0:	d103      	bne.n	80166da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	691b      	ldr	r3, [r3, #16]
 80166d6:	60fb      	str	r3, [r7, #12]
 80166d8:	e00c      	b.n	80166f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	3308      	adds	r3, #8
 80166de:	60fb      	str	r3, [r7, #12]
 80166e0:	e002      	b.n	80166e8 <vListInsert+0x2e>
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	60fb      	str	r3, [r7, #12]
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	68ba      	ldr	r2, [r7, #8]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d2f6      	bcs.n	80166e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	685a      	ldr	r2, [r3, #4]
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	683a      	ldr	r2, [r7, #0]
 8016702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	68fa      	ldr	r2, [r7, #12]
 8016708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	683a      	ldr	r2, [r7, #0]
 801670e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	687a      	ldr	r2, [r7, #4]
 8016714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	1c5a      	adds	r2, r3, #1
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	601a      	str	r2, [r3, #0]
}
 8016720:	bf00      	nop
 8016722:	3714      	adds	r7, #20
 8016724:	46bd      	mov	sp, r7
 8016726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672a:	4770      	bx	lr

0801672c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801672c:	b480      	push	{r7}
 801672e:	b085      	sub	sp, #20
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	691b      	ldr	r3, [r3, #16]
 8016738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	6892      	ldr	r2, [r2, #8]
 8016742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	689b      	ldr	r3, [r3, #8]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	6852      	ldr	r2, [r2, #4]
 801674c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	429a      	cmp	r2, r3
 8016756:	d103      	bne.n	8016760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	689a      	ldr	r2, [r3, #8]
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2200      	movs	r2, #0
 8016764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	1e5a      	subs	r2, r3, #1
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	681b      	ldr	r3, [r3, #0]
}
 8016774:	4618      	mov	r0, r3
 8016776:	3714      	adds	r7, #20
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr

08016780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d10a      	bne.n	80167aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016798:	f383 8811 	msr	BASEPRI, r3
 801679c:	f3bf 8f6f 	isb	sy
 80167a0:	f3bf 8f4f 	dsb	sy
 80167a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80167a6:	bf00      	nop
 80167a8:	e7fe      	b.n	80167a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80167aa:	f002 f923 	bl	80189f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167b6:	68f9      	ldr	r1, [r7, #12]
 80167b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80167ba:	fb01 f303 	mul.w	r3, r1, r3
 80167be:	441a      	add	r2, r3
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2200      	movs	r2, #0
 80167c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	681a      	ldr	r2, [r3, #0]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167da:	3b01      	subs	r3, #1
 80167dc:	68f9      	ldr	r1, [r7, #12]
 80167de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80167e0:	fb01 f303 	mul.w	r3, r1, r3
 80167e4:	441a      	add	r2, r3
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	22ff      	movs	r2, #255	; 0xff
 80167ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	22ff      	movs	r2, #255	; 0xff
 80167f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d114      	bne.n	801682a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	691b      	ldr	r3, [r3, #16]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d01a      	beq.n	801683e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	3310      	adds	r3, #16
 801680c:	4618      	mov	r0, r3
 801680e:	f001 f9db 	bl	8017bc8 <xTaskRemoveFromEventList>
 8016812:	4603      	mov	r3, r0
 8016814:	2b00      	cmp	r3, #0
 8016816:	d012      	beq.n	801683e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016818:	4b0c      	ldr	r3, [pc, #48]	; (801684c <xQueueGenericReset+0xcc>)
 801681a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801681e:	601a      	str	r2, [r3, #0]
 8016820:	f3bf 8f4f 	dsb	sy
 8016824:	f3bf 8f6f 	isb	sy
 8016828:	e009      	b.n	801683e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	3310      	adds	r3, #16
 801682e:	4618      	mov	r0, r3
 8016830:	f7ff fef2 	bl	8016618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	3324      	adds	r3, #36	; 0x24
 8016838:	4618      	mov	r0, r3
 801683a:	f7ff feed 	bl	8016618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801683e:	f002 f909 	bl	8018a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016842:	2301      	movs	r3, #1
}
 8016844:	4618      	mov	r0, r3
 8016846:	3710      	adds	r7, #16
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	e000ed04 	.word	0xe000ed04

08016850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08e      	sub	sp, #56	; 0x38
 8016854:	af02      	add	r7, sp, #8
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
 801685c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d10a      	bne.n	801687a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016868:	f383 8811 	msr	BASEPRI, r3
 801686c:	f3bf 8f6f 	isb	sy
 8016870:	f3bf 8f4f 	dsb	sy
 8016874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016876:	bf00      	nop
 8016878:	e7fe      	b.n	8016878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d10a      	bne.n	8016896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016884:	f383 8811 	msr	BASEPRI, r3
 8016888:	f3bf 8f6f 	isb	sy
 801688c:	f3bf 8f4f 	dsb	sy
 8016890:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016892:	bf00      	nop
 8016894:	e7fe      	b.n	8016894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d002      	beq.n	80168a2 <xQueueGenericCreateStatic+0x52>
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d001      	beq.n	80168a6 <xQueueGenericCreateStatic+0x56>
 80168a2:	2301      	movs	r3, #1
 80168a4:	e000      	b.n	80168a8 <xQueueGenericCreateStatic+0x58>
 80168a6:	2300      	movs	r3, #0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d10a      	bne.n	80168c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80168ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168b0:	f383 8811 	msr	BASEPRI, r3
 80168b4:	f3bf 8f6f 	isb	sy
 80168b8:	f3bf 8f4f 	dsb	sy
 80168bc:	623b      	str	r3, [r7, #32]
}
 80168be:	bf00      	nop
 80168c0:	e7fe      	b.n	80168c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d102      	bne.n	80168ce <xQueueGenericCreateStatic+0x7e>
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <xQueueGenericCreateStatic+0x82>
 80168ce:	2301      	movs	r3, #1
 80168d0:	e000      	b.n	80168d4 <xQueueGenericCreateStatic+0x84>
 80168d2:	2300      	movs	r3, #0
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d10a      	bne.n	80168ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80168d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168dc:	f383 8811 	msr	BASEPRI, r3
 80168e0:	f3bf 8f6f 	isb	sy
 80168e4:	f3bf 8f4f 	dsb	sy
 80168e8:	61fb      	str	r3, [r7, #28]
}
 80168ea:	bf00      	nop
 80168ec:	e7fe      	b.n	80168ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80168ee:	2350      	movs	r3, #80	; 0x50
 80168f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	2b50      	cmp	r3, #80	; 0x50
 80168f6:	d00a      	beq.n	801690e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80168f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168fc:	f383 8811 	msr	BASEPRI, r3
 8016900:	f3bf 8f6f 	isb	sy
 8016904:	f3bf 8f4f 	dsb	sy
 8016908:	61bb      	str	r3, [r7, #24]
}
 801690a:	bf00      	nop
 801690c:	e7fe      	b.n	801690c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801690e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00d      	beq.n	8016936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691c:	2201      	movs	r2, #1
 801691e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016928:	9300      	str	r3, [sp, #0]
 801692a:	4613      	mov	r3, r2
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	68b9      	ldr	r1, [r7, #8]
 8016930:	68f8      	ldr	r0, [r7, #12]
 8016932:	f000 f805 	bl	8016940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016938:	4618      	mov	r0, r3
 801693a:	3730      	adds	r7, #48	; 0x30
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
 801694c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d103      	bne.n	801695c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	69ba      	ldr	r2, [r7, #24]
 8016958:	601a      	str	r2, [r3, #0]
 801695a:	e002      	b.n	8016962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	68fa      	ldr	r2, [r7, #12]
 8016966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	68ba      	ldr	r2, [r7, #8]
 801696c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801696e:	2101      	movs	r1, #1
 8016970:	69b8      	ldr	r0, [r7, #24]
 8016972:	f7ff ff05 	bl	8016780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	78fa      	ldrb	r2, [r7, #3]
 801697a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801697e:	bf00      	nop
 8016980:	3710      	adds	r7, #16
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
	...

08016988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b08e      	sub	sp, #56	; 0x38
 801698c:	af00      	add	r7, sp, #0
 801698e:	60f8      	str	r0, [r7, #12]
 8016990:	60b9      	str	r1, [r7, #8]
 8016992:	607a      	str	r2, [r7, #4]
 8016994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016996:	2300      	movs	r3, #0
 8016998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d10a      	bne.n	80169ba <xQueueGenericSend+0x32>
	__asm volatile
 80169a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a8:	f383 8811 	msr	BASEPRI, r3
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	f3bf 8f4f 	dsb	sy
 80169b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80169b6:	bf00      	nop
 80169b8:	e7fe      	b.n	80169b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d103      	bne.n	80169c8 <xQueueGenericSend+0x40>
 80169c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d101      	bne.n	80169cc <xQueueGenericSend+0x44>
 80169c8:	2301      	movs	r3, #1
 80169ca:	e000      	b.n	80169ce <xQueueGenericSend+0x46>
 80169cc:	2300      	movs	r3, #0
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d10a      	bne.n	80169e8 <xQueueGenericSend+0x60>
	__asm volatile
 80169d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d6:	f383 8811 	msr	BASEPRI, r3
 80169da:	f3bf 8f6f 	isb	sy
 80169de:	f3bf 8f4f 	dsb	sy
 80169e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80169e4:	bf00      	nop
 80169e6:	e7fe      	b.n	80169e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	2b02      	cmp	r3, #2
 80169ec:	d103      	bne.n	80169f6 <xQueueGenericSend+0x6e>
 80169ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d101      	bne.n	80169fa <xQueueGenericSend+0x72>
 80169f6:	2301      	movs	r3, #1
 80169f8:	e000      	b.n	80169fc <xQueueGenericSend+0x74>
 80169fa:	2300      	movs	r3, #0
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d10a      	bne.n	8016a16 <xQueueGenericSend+0x8e>
	__asm volatile
 8016a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a04:	f383 8811 	msr	BASEPRI, r3
 8016a08:	f3bf 8f6f 	isb	sy
 8016a0c:	f3bf 8f4f 	dsb	sy
 8016a10:	623b      	str	r3, [r7, #32]
}
 8016a12:	bf00      	nop
 8016a14:	e7fe      	b.n	8016a14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a16:	f001 fa95 	bl	8017f44 <xTaskGetSchedulerState>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d102      	bne.n	8016a26 <xQueueGenericSend+0x9e>
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d101      	bne.n	8016a2a <xQueueGenericSend+0xa2>
 8016a26:	2301      	movs	r3, #1
 8016a28:	e000      	b.n	8016a2c <xQueueGenericSend+0xa4>
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10a      	bne.n	8016a46 <xQueueGenericSend+0xbe>
	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a34:	f383 8811 	msr	BASEPRI, r3
 8016a38:	f3bf 8f6f 	isb	sy
 8016a3c:	f3bf 8f4f 	dsb	sy
 8016a40:	61fb      	str	r3, [r7, #28]
}
 8016a42:	bf00      	nop
 8016a44:	e7fe      	b.n	8016a44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016a46:	f001 ffd5 	bl	80189f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d302      	bcc.n	8016a5c <xQueueGenericSend+0xd4>
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	2b02      	cmp	r3, #2
 8016a5a:	d129      	bne.n	8016ab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016a5c:	683a      	ldr	r2, [r7, #0]
 8016a5e:	68b9      	ldr	r1, [r7, #8]
 8016a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a62:	f000 fa0b 	bl	8016e7c <prvCopyDataToQueue>
 8016a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d010      	beq.n	8016a92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a72:	3324      	adds	r3, #36	; 0x24
 8016a74:	4618      	mov	r0, r3
 8016a76:	f001 f8a7 	bl	8017bc8 <xTaskRemoveFromEventList>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d013      	beq.n	8016aa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016a80:	4b3f      	ldr	r3, [pc, #252]	; (8016b80 <xQueueGenericSend+0x1f8>)
 8016a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a86:	601a      	str	r2, [r3, #0]
 8016a88:	f3bf 8f4f 	dsb	sy
 8016a8c:	f3bf 8f6f 	isb	sy
 8016a90:	e00a      	b.n	8016aa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d007      	beq.n	8016aa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016a98:	4b39      	ldr	r3, [pc, #228]	; (8016b80 <xQueueGenericSend+0x1f8>)
 8016a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a9e:	601a      	str	r2, [r3, #0]
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016aa8:	f001 ffd4 	bl	8018a54 <vPortExitCritical>
				return pdPASS;
 8016aac:	2301      	movs	r3, #1
 8016aae:	e063      	b.n	8016b78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d103      	bne.n	8016abe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016ab6:	f001 ffcd 	bl	8018a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016aba:	2300      	movs	r3, #0
 8016abc:	e05c      	b.n	8016b78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d106      	bne.n	8016ad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016ac4:	f107 0314 	add.w	r3, r7, #20
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f001 f8e1 	bl	8017c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016ad2:	f001 ffbf 	bl	8018a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016ad6:	f000 fe53 	bl	8017780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016ada:	f001 ff8b 	bl	80189f4 <vPortEnterCritical>
 8016ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ae4:	b25b      	sxtb	r3, r3
 8016ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016aea:	d103      	bne.n	8016af4 <xQueueGenericSend+0x16c>
 8016aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aee:	2200      	movs	r2, #0
 8016af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016afa:	b25b      	sxtb	r3, r3
 8016afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b00:	d103      	bne.n	8016b0a <xQueueGenericSend+0x182>
 8016b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b04:	2200      	movs	r2, #0
 8016b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b0a:	f001 ffa3 	bl	8018a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016b0e:	1d3a      	adds	r2, r7, #4
 8016b10:	f107 0314 	add.w	r3, r7, #20
 8016b14:	4611      	mov	r1, r2
 8016b16:	4618      	mov	r0, r3
 8016b18:	f001 f8d0 	bl	8017cbc <xTaskCheckForTimeOut>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d124      	bne.n	8016b6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b24:	f000 faa2 	bl	801706c <prvIsQueueFull>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d018      	beq.n	8016b60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b30:	3310      	adds	r3, #16
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	4611      	mov	r1, r2
 8016b36:	4618      	mov	r0, r3
 8016b38:	f000 fff6 	bl	8017b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b3e:	f000 fa2d 	bl	8016f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016b42:	f000 fe2b 	bl	801779c <xTaskResumeAll>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	f47f af7c 	bne.w	8016a46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016b4e:	4b0c      	ldr	r3, [pc, #48]	; (8016b80 <xQueueGenericSend+0x1f8>)
 8016b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b54:	601a      	str	r2, [r3, #0]
 8016b56:	f3bf 8f4f 	dsb	sy
 8016b5a:	f3bf 8f6f 	isb	sy
 8016b5e:	e772      	b.n	8016a46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b62:	f000 fa1b 	bl	8016f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016b66:	f000 fe19 	bl	801779c <xTaskResumeAll>
 8016b6a:	e76c      	b.n	8016a46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b6e:	f000 fa15 	bl	8016f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016b72:	f000 fe13 	bl	801779c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3738      	adds	r7, #56	; 0x38
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}
 8016b80:	e000ed04 	.word	0xe000ed04

08016b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b090      	sub	sp, #64	; 0x40
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
 8016b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d10a      	bne.n	8016bb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba0:	f383 8811 	msr	BASEPRI, r3
 8016ba4:	f3bf 8f6f 	isb	sy
 8016ba8:	f3bf 8f4f 	dsb	sy
 8016bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016bae:	bf00      	nop
 8016bb0:	e7fe      	b.n	8016bb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d103      	bne.n	8016bc0 <xQueueGenericSendFromISR+0x3c>
 8016bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d101      	bne.n	8016bc4 <xQueueGenericSendFromISR+0x40>
 8016bc0:	2301      	movs	r3, #1
 8016bc2:	e000      	b.n	8016bc6 <xQueueGenericSendFromISR+0x42>
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10a      	bne.n	8016be0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016bdc:	bf00      	nop
 8016bde:	e7fe      	b.n	8016bde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	2b02      	cmp	r3, #2
 8016be4:	d103      	bne.n	8016bee <xQueueGenericSendFromISR+0x6a>
 8016be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bea:	2b01      	cmp	r3, #1
 8016bec:	d101      	bne.n	8016bf2 <xQueueGenericSendFromISR+0x6e>
 8016bee:	2301      	movs	r3, #1
 8016bf0:	e000      	b.n	8016bf4 <xQueueGenericSendFromISR+0x70>
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d10a      	bne.n	8016c0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bfc:	f383 8811 	msr	BASEPRI, r3
 8016c00:	f3bf 8f6f 	isb	sy
 8016c04:	f3bf 8f4f 	dsb	sy
 8016c08:	623b      	str	r3, [r7, #32]
}
 8016c0a:	bf00      	nop
 8016c0c:	e7fe      	b.n	8016c0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c0e:	f001 ffd3 	bl	8018bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016c12:	f3ef 8211 	mrs	r2, BASEPRI
 8016c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c1a:	f383 8811 	msr	BASEPRI, r3
 8016c1e:	f3bf 8f6f 	isb	sy
 8016c22:	f3bf 8f4f 	dsb	sy
 8016c26:	61fa      	str	r2, [r7, #28]
 8016c28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016c2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016c2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d302      	bcc.n	8016c40 <xQueueGenericSendFromISR+0xbc>
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	2b02      	cmp	r3, #2
 8016c3e:	d12f      	bne.n	8016ca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c50:	683a      	ldr	r2, [r7, #0]
 8016c52:	68b9      	ldr	r1, [r7, #8]
 8016c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016c56:	f000 f911 	bl	8016e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c62:	d112      	bne.n	8016c8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d016      	beq.n	8016c9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c6e:	3324      	adds	r3, #36	; 0x24
 8016c70:	4618      	mov	r0, r3
 8016c72:	f000 ffa9 	bl	8017bc8 <xTaskRemoveFromEventList>
 8016c76:	4603      	mov	r3, r0
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d00e      	beq.n	8016c9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d00b      	beq.n	8016c9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2201      	movs	r2, #1
 8016c86:	601a      	str	r2, [r3, #0]
 8016c88:	e007      	b.n	8016c9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016c8e:	3301      	adds	r3, #1
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	b25a      	sxtb	r2, r3
 8016c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016c9e:	e001      	b.n	8016ca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3740      	adds	r7, #64	; 0x40
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
	...

08016cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b08c      	sub	sp, #48	; 0x30
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	60f8      	str	r0, [r7, #12]
 8016cc4:	60b9      	str	r1, [r7, #8]
 8016cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016cc8:	2300      	movs	r3, #0
 8016cca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d10a      	bne.n	8016cec <xQueueReceive+0x30>
	__asm volatile
 8016cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cda:	f383 8811 	msr	BASEPRI, r3
 8016cde:	f3bf 8f6f 	isb	sy
 8016ce2:	f3bf 8f4f 	dsb	sy
 8016ce6:	623b      	str	r3, [r7, #32]
}
 8016ce8:	bf00      	nop
 8016cea:	e7fe      	b.n	8016cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d103      	bne.n	8016cfa <xQueueReceive+0x3e>
 8016cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d101      	bne.n	8016cfe <xQueueReceive+0x42>
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	e000      	b.n	8016d00 <xQueueReceive+0x44>
 8016cfe:	2300      	movs	r3, #0
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10a      	bne.n	8016d1a <xQueueReceive+0x5e>
	__asm volatile
 8016d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	61fb      	str	r3, [r7, #28]
}
 8016d16:	bf00      	nop
 8016d18:	e7fe      	b.n	8016d18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d1a:	f001 f913 	bl	8017f44 <xTaskGetSchedulerState>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d102      	bne.n	8016d2a <xQueueReceive+0x6e>
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d101      	bne.n	8016d2e <xQueueReceive+0x72>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <xQueueReceive+0x74>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d10a      	bne.n	8016d4a <xQueueReceive+0x8e>
	__asm volatile
 8016d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d38:	f383 8811 	msr	BASEPRI, r3
 8016d3c:	f3bf 8f6f 	isb	sy
 8016d40:	f3bf 8f4f 	dsb	sy
 8016d44:	61bb      	str	r3, [r7, #24]
}
 8016d46:	bf00      	nop
 8016d48:	e7fe      	b.n	8016d48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016d4a:	f001 fe53 	bl	80189f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d01f      	beq.n	8016d9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016d5a:	68b9      	ldr	r1, [r7, #8]
 8016d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d5e:	f000 f8f7 	bl	8016f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d64:	1e5a      	subs	r2, r3, #1
 8016d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6c:	691b      	ldr	r3, [r3, #16]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d00f      	beq.n	8016d92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d74:	3310      	adds	r3, #16
 8016d76:	4618      	mov	r0, r3
 8016d78:	f000 ff26 	bl	8017bc8 <xTaskRemoveFromEventList>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d007      	beq.n	8016d92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016d82:	4b3d      	ldr	r3, [pc, #244]	; (8016e78 <xQueueReceive+0x1bc>)
 8016d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d88:	601a      	str	r2, [r3, #0]
 8016d8a:	f3bf 8f4f 	dsb	sy
 8016d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016d92:	f001 fe5f 	bl	8018a54 <vPortExitCritical>
				return pdPASS;
 8016d96:	2301      	movs	r3, #1
 8016d98:	e069      	b.n	8016e6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d103      	bne.n	8016da8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016da0:	f001 fe58 	bl	8018a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016da4:	2300      	movs	r3, #0
 8016da6:	e062      	b.n	8016e6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d106      	bne.n	8016dbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016dae:	f107 0310 	add.w	r3, r7, #16
 8016db2:	4618      	mov	r0, r3
 8016db4:	f000 ff6c 	bl	8017c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016db8:	2301      	movs	r3, #1
 8016dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016dbc:	f001 fe4a 	bl	8018a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016dc0:	f000 fcde 	bl	8017780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016dc4:	f001 fe16 	bl	80189f4 <vPortEnterCritical>
 8016dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016dce:	b25b      	sxtb	r3, r3
 8016dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dd4:	d103      	bne.n	8016dde <xQueueReceive+0x122>
 8016dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd8:	2200      	movs	r2, #0
 8016dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016de4:	b25b      	sxtb	r3, r3
 8016de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dea:	d103      	bne.n	8016df4 <xQueueReceive+0x138>
 8016dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dee:	2200      	movs	r2, #0
 8016df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016df4:	f001 fe2e 	bl	8018a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016df8:	1d3a      	adds	r2, r7, #4
 8016dfa:	f107 0310 	add.w	r3, r7, #16
 8016dfe:	4611      	mov	r1, r2
 8016e00:	4618      	mov	r0, r3
 8016e02:	f000 ff5b 	bl	8017cbc <xTaskCheckForTimeOut>
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d123      	bne.n	8016e54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e0e:	f000 f917 	bl	8017040 <prvIsQueueEmpty>
 8016e12:	4603      	mov	r3, r0
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d017      	beq.n	8016e48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e1a:	3324      	adds	r3, #36	; 0x24
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	4611      	mov	r1, r2
 8016e20:	4618      	mov	r0, r3
 8016e22:	f000 fe81 	bl	8017b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e28:	f000 f8b8 	bl	8016f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e2c:	f000 fcb6 	bl	801779c <xTaskResumeAll>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d189      	bne.n	8016d4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016e36:	4b10      	ldr	r3, [pc, #64]	; (8016e78 <xQueueReceive+0x1bc>)
 8016e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e3c:	601a      	str	r2, [r3, #0]
 8016e3e:	f3bf 8f4f 	dsb	sy
 8016e42:	f3bf 8f6f 	isb	sy
 8016e46:	e780      	b.n	8016d4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e4a:	f000 f8a7 	bl	8016f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016e4e:	f000 fca5 	bl	801779c <xTaskResumeAll>
 8016e52:	e77a      	b.n	8016d4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e56:	f000 f8a1 	bl	8016f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e5a:	f000 fc9f 	bl	801779c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e60:	f000 f8ee 	bl	8017040 <prvIsQueueEmpty>
 8016e64:	4603      	mov	r3, r0
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f43f af6f 	beq.w	8016d4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3730      	adds	r7, #48	; 0x30
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	e000ed04 	.word	0xe000ed04

08016e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b086      	sub	sp, #24
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d10d      	bne.n	8016eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d14d      	bne.n	8016f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	689b      	ldr	r3, [r3, #8]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f001 f86a 	bl	8017f80 <xTaskPriorityDisinherit>
 8016eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	609a      	str	r2, [r3, #8]
 8016eb4:	e043      	b.n	8016f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d119      	bne.n	8016ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	6858      	ldr	r0, [r3, #4]
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ec4:	461a      	mov	r2, r3
 8016ec6:	68b9      	ldr	r1, [r7, #8]
 8016ec8:	f002 f8d2 	bl	8019070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	685a      	ldr	r2, [r3, #4]
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ed4:	441a      	add	r2, r3
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	685a      	ldr	r2, [r3, #4]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	d32b      	bcc.n	8016f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	681a      	ldr	r2, [r3, #0]
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	e026      	b.n	8016f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	68d8      	ldr	r0, [r3, #12]
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ef8:	461a      	mov	r2, r3
 8016efa:	68b9      	ldr	r1, [r7, #8]
 8016efc:	f002 f8b8 	bl	8019070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	68da      	ldr	r2, [r3, #12]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f08:	425b      	negs	r3, r3
 8016f0a:	441a      	add	r2, r3
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	68da      	ldr	r2, [r3, #12]
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d207      	bcs.n	8016f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	689a      	ldr	r2, [r3, #8]
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f24:	425b      	negs	r3, r3
 8016f26:	441a      	add	r2, r3
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b02      	cmp	r3, #2
 8016f30:	d105      	bne.n	8016f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d002      	beq.n	8016f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	1c5a      	adds	r2, r3, #1
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016f46:	697b      	ldr	r3, [r7, #20]
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3718      	adds	r7, #24
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}

08016f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d018      	beq.n	8016f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	68da      	ldr	r2, [r3, #12]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f6a:	441a      	add	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	68da      	ldr	r2, [r3, #12]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	689b      	ldr	r3, [r3, #8]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d303      	bcc.n	8016f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681a      	ldr	r2, [r3, #0]
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	68d9      	ldr	r1, [r3, #12]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	6838      	ldr	r0, [r7, #0]
 8016f90:	f002 f86e 	bl	8019070 <memcpy>
	}
}
 8016f94:	bf00      	nop
 8016f96:	3708      	adds	r7, #8
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016fa4:	f001 fd26 	bl	80189f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016fb0:	e011      	b.n	8016fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d012      	beq.n	8016fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	3324      	adds	r3, #36	; 0x24
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f000 fe02 	bl	8017bc8 <xTaskRemoveFromEventList>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d001      	beq.n	8016fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016fca:	f000 fed9 	bl	8017d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016fce:	7bfb      	ldrb	r3, [r7, #15]
 8016fd0:	3b01      	subs	r3, #1
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	dce9      	bgt.n	8016fb2 <prvUnlockQueue+0x16>
 8016fde:	e000      	b.n	8016fe2 <prvUnlockQueue+0x46>
					break;
 8016fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	22ff      	movs	r2, #255	; 0xff
 8016fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016fea:	f001 fd33 	bl	8018a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016fee:	f001 fd01 	bl	80189f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ffa:	e011      	b.n	8017020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	691b      	ldr	r3, [r3, #16]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d012      	beq.n	801702a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	3310      	adds	r3, #16
 8017008:	4618      	mov	r0, r3
 801700a:	f000 fddd 	bl	8017bc8 <xTaskRemoveFromEventList>
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d001      	beq.n	8017018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017014:	f000 feb4 	bl	8017d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017018:	7bbb      	ldrb	r3, [r7, #14]
 801701a:	3b01      	subs	r3, #1
 801701c:	b2db      	uxtb	r3, r3
 801701e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017024:	2b00      	cmp	r3, #0
 8017026:	dce9      	bgt.n	8016ffc <prvUnlockQueue+0x60>
 8017028:	e000      	b.n	801702c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801702a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	22ff      	movs	r2, #255	; 0xff
 8017030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017034:	f001 fd0e 	bl	8018a54 <vPortExitCritical>
}
 8017038:	bf00      	nop
 801703a:	3710      	adds	r7, #16
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}

08017040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b084      	sub	sp, #16
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017048:	f001 fcd4 	bl	80189f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017050:	2b00      	cmp	r3, #0
 8017052:	d102      	bne.n	801705a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017054:	2301      	movs	r3, #1
 8017056:	60fb      	str	r3, [r7, #12]
 8017058:	e001      	b.n	801705e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801705a:	2300      	movs	r3, #0
 801705c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801705e:	f001 fcf9 	bl	8018a54 <vPortExitCritical>

	return xReturn;
 8017062:	68fb      	ldr	r3, [r7, #12]
}
 8017064:	4618      	mov	r0, r3
 8017066:	3710      	adds	r7, #16
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}

0801706c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017074:	f001 fcbe 	bl	80189f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017080:	429a      	cmp	r2, r3
 8017082:	d102      	bne.n	801708a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017084:	2301      	movs	r3, #1
 8017086:	60fb      	str	r3, [r7, #12]
 8017088:	e001      	b.n	801708e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801708a:	2300      	movs	r3, #0
 801708c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801708e:	f001 fce1 	bl	8018a54 <vPortExitCritical>

	return xReturn;
 8017092:	68fb      	ldr	r3, [r7, #12]
}
 8017094:	4618      	mov	r0, r3
 8017096:	3710      	adds	r7, #16
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801709c:	b480      	push	{r7}
 801709e:	b085      	sub	sp, #20
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80170a6:	2300      	movs	r3, #0
 80170a8:	60fb      	str	r3, [r7, #12]
 80170aa:	e014      	b.n	80170d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80170ac:	4a0f      	ldr	r2, [pc, #60]	; (80170ec <vQueueAddToRegistry+0x50>)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d10b      	bne.n	80170d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80170b8:	490c      	ldr	r1, [pc, #48]	; (80170ec <vQueueAddToRegistry+0x50>)
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	683a      	ldr	r2, [r7, #0]
 80170be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80170c2:	4a0a      	ldr	r2, [pc, #40]	; (80170ec <vQueueAddToRegistry+0x50>)
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	4413      	add	r3, r2
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80170ce:	e006      	b.n	80170de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	3301      	adds	r3, #1
 80170d4:	60fb      	str	r3, [r7, #12]
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	2b07      	cmp	r3, #7
 80170da:	d9e7      	bls.n	80170ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80170dc:	bf00      	nop
 80170de:	bf00      	nop
 80170e0:	3714      	adds	r7, #20
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr
 80170ea:	bf00      	nop
 80170ec:	2000a97c 	.word	0x2000a97c

080170f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b086      	sub	sp, #24
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	60b9      	str	r1, [r7, #8]
 80170fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017100:	f001 fc78 	bl	80189f4 <vPortEnterCritical>
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801710a:	b25b      	sxtb	r3, r3
 801710c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017110:	d103      	bne.n	801711a <vQueueWaitForMessageRestricted+0x2a>
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	2200      	movs	r2, #0
 8017116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017120:	b25b      	sxtb	r3, r3
 8017122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017126:	d103      	bne.n	8017130 <vQueueWaitForMessageRestricted+0x40>
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	2200      	movs	r2, #0
 801712c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017130:	f001 fc90 	bl	8018a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017138:	2b00      	cmp	r3, #0
 801713a:	d106      	bne.n	801714a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	3324      	adds	r3, #36	; 0x24
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	68b9      	ldr	r1, [r7, #8]
 8017144:	4618      	mov	r0, r3
 8017146:	f000 fd13 	bl	8017b70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801714a:	6978      	ldr	r0, [r7, #20]
 801714c:	f7ff ff26 	bl	8016f9c <prvUnlockQueue>
	}
 8017150:	bf00      	nop
 8017152:	3718      	adds	r7, #24
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017158:	b580      	push	{r7, lr}
 801715a:	b08e      	sub	sp, #56	; 0x38
 801715c:	af04      	add	r7, sp, #16
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	607a      	str	r2, [r7, #4]
 8017164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017168:	2b00      	cmp	r3, #0
 801716a:	d10a      	bne.n	8017182 <xTaskCreateStatic+0x2a>
	__asm volatile
 801716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017170:	f383 8811 	msr	BASEPRI, r3
 8017174:	f3bf 8f6f 	isb	sy
 8017178:	f3bf 8f4f 	dsb	sy
 801717c:	623b      	str	r3, [r7, #32]
}
 801717e:	bf00      	nop
 8017180:	e7fe      	b.n	8017180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017184:	2b00      	cmp	r3, #0
 8017186:	d10a      	bne.n	801719e <xTaskCreateStatic+0x46>
	__asm volatile
 8017188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801718c:	f383 8811 	msr	BASEPRI, r3
 8017190:	f3bf 8f6f 	isb	sy
 8017194:	f3bf 8f4f 	dsb	sy
 8017198:	61fb      	str	r3, [r7, #28]
}
 801719a:	bf00      	nop
 801719c:	e7fe      	b.n	801719c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801719e:	235c      	movs	r3, #92	; 0x5c
 80171a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	2b5c      	cmp	r3, #92	; 0x5c
 80171a6:	d00a      	beq.n	80171be <xTaskCreateStatic+0x66>
	__asm volatile
 80171a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ac:	f383 8811 	msr	BASEPRI, r3
 80171b0:	f3bf 8f6f 	isb	sy
 80171b4:	f3bf 8f4f 	dsb	sy
 80171b8:	61bb      	str	r3, [r7, #24]
}
 80171ba:	bf00      	nop
 80171bc:	e7fe      	b.n	80171bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80171be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80171c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d01e      	beq.n	8017204 <xTaskCreateStatic+0xac>
 80171c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d01b      	beq.n	8017204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80171cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80171d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80171d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80171d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d8:	2202      	movs	r2, #2
 80171da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80171de:	2300      	movs	r3, #0
 80171e0:	9303      	str	r3, [sp, #12]
 80171e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e4:	9302      	str	r3, [sp, #8]
 80171e6:	f107 0314 	add.w	r3, r7, #20
 80171ea:	9301      	str	r3, [sp, #4]
 80171ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ee:	9300      	str	r3, [sp, #0]
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	687a      	ldr	r2, [r7, #4]
 80171f4:	68b9      	ldr	r1, [r7, #8]
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	f000 f850 	bl	801729c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80171fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171fe:	f000 f8dd 	bl	80173bc <prvAddNewTaskToReadyList>
 8017202:	e001      	b.n	8017208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017204:	2300      	movs	r3, #0
 8017206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017208:	697b      	ldr	r3, [r7, #20]
	}
 801720a:	4618      	mov	r0, r3
 801720c:	3728      	adds	r7, #40	; 0x28
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}

08017212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017212:	b580      	push	{r7, lr}
 8017214:	b08c      	sub	sp, #48	; 0x30
 8017216:	af04      	add	r7, sp, #16
 8017218:	60f8      	str	r0, [r7, #12]
 801721a:	60b9      	str	r1, [r7, #8]
 801721c:	603b      	str	r3, [r7, #0]
 801721e:	4613      	mov	r3, r2
 8017220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017222:	88fb      	ldrh	r3, [r7, #6]
 8017224:	009b      	lsls	r3, r3, #2
 8017226:	4618      	mov	r0, r3
 8017228:	f001 fd06 	bl	8018c38 <pvPortMalloc>
 801722c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801722e:	697b      	ldr	r3, [r7, #20]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d00e      	beq.n	8017252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017234:	205c      	movs	r0, #92	; 0x5c
 8017236:	f001 fcff 	bl	8018c38 <pvPortMalloc>
 801723a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d003      	beq.n	801724a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	697a      	ldr	r2, [r7, #20]
 8017246:	631a      	str	r2, [r3, #48]	; 0x30
 8017248:	e005      	b.n	8017256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801724a:	6978      	ldr	r0, [r7, #20]
 801724c:	f001 fdc0 	bl	8018dd0 <vPortFree>
 8017250:	e001      	b.n	8017256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017252:	2300      	movs	r3, #0
 8017254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d017      	beq.n	801728c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801725c:	69fb      	ldr	r3, [r7, #28]
 801725e:	2200      	movs	r2, #0
 8017260:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017264:	88fa      	ldrh	r2, [r7, #6]
 8017266:	2300      	movs	r3, #0
 8017268:	9303      	str	r3, [sp, #12]
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	9302      	str	r3, [sp, #8]
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	9301      	str	r3, [sp, #4]
 8017272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017274:	9300      	str	r3, [sp, #0]
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	f000 f80e 	bl	801729c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017280:	69f8      	ldr	r0, [r7, #28]
 8017282:	f000 f89b 	bl	80173bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017286:	2301      	movs	r3, #1
 8017288:	61bb      	str	r3, [r7, #24]
 801728a:	e002      	b.n	8017292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801728c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017292:	69bb      	ldr	r3, [r7, #24]
	}
 8017294:	4618      	mov	r0, r3
 8017296:	3720      	adds	r7, #32
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}

0801729c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b088      	sub	sp, #32
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
 80172a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80172aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	009b      	lsls	r3, r3, #2
 80172b2:	461a      	mov	r2, r3
 80172b4:	21a5      	movs	r1, #165	; 0xa5
 80172b6:	f001 fee9 	bl	801908c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80172ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80172c4:	3b01      	subs	r3, #1
 80172c6:	009b      	lsls	r3, r3, #2
 80172c8:	4413      	add	r3, r2
 80172ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	f023 0307 	bic.w	r3, r3, #7
 80172d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	f003 0307 	and.w	r3, r3, #7
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d00a      	beq.n	80172f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80172de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e2:	f383 8811 	msr	BASEPRI, r3
 80172e6:	f3bf 8f6f 	isb	sy
 80172ea:	f3bf 8f4f 	dsb	sy
 80172ee:	617b      	str	r3, [r7, #20]
}
 80172f0:	bf00      	nop
 80172f2:	e7fe      	b.n	80172f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d01f      	beq.n	801733a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80172fa:	2300      	movs	r3, #0
 80172fc:	61fb      	str	r3, [r7, #28]
 80172fe:	e012      	b.n	8017326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017300:	68ba      	ldr	r2, [r7, #8]
 8017302:	69fb      	ldr	r3, [r7, #28]
 8017304:	4413      	add	r3, r2
 8017306:	7819      	ldrb	r1, [r3, #0]
 8017308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801730a:	69fb      	ldr	r3, [r7, #28]
 801730c:	4413      	add	r3, r2
 801730e:	3334      	adds	r3, #52	; 0x34
 8017310:	460a      	mov	r2, r1
 8017312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017314:	68ba      	ldr	r2, [r7, #8]
 8017316:	69fb      	ldr	r3, [r7, #28]
 8017318:	4413      	add	r3, r2
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d006      	beq.n	801732e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017320:	69fb      	ldr	r3, [r7, #28]
 8017322:	3301      	adds	r3, #1
 8017324:	61fb      	str	r3, [r7, #28]
 8017326:	69fb      	ldr	r3, [r7, #28]
 8017328:	2b0f      	cmp	r3, #15
 801732a:	d9e9      	bls.n	8017300 <prvInitialiseNewTask+0x64>
 801732c:	e000      	b.n	8017330 <prvInitialiseNewTask+0x94>
			{
				break;
 801732e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017332:	2200      	movs	r2, #0
 8017334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017338:	e003      	b.n	8017342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733c:	2200      	movs	r2, #0
 801733e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017344:	2b37      	cmp	r3, #55	; 0x37
 8017346:	d901      	bls.n	801734c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017348:	2337      	movs	r3, #55	; 0x37
 801734a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801735a:	2200      	movs	r2, #0
 801735c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017360:	3304      	adds	r3, #4
 8017362:	4618      	mov	r0, r3
 8017364:	f7ff f978 	bl	8016658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801736a:	3318      	adds	r3, #24
 801736c:	4618      	mov	r0, r3
 801736e:	f7ff f973 	bl	8016658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738a:	2200      	movs	r2, #0
 801738c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017390:	2200      	movs	r2, #0
 8017392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017396:	683a      	ldr	r2, [r7, #0]
 8017398:	68f9      	ldr	r1, [r7, #12]
 801739a:	69b8      	ldr	r0, [r7, #24]
 801739c:	f001 fa00 	bl	80187a0 <pxPortInitialiseStack>
 80173a0:	4602      	mov	r2, r0
 80173a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80173a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d002      	beq.n	80173b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80173ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80173b2:	bf00      	nop
 80173b4:	3720      	adds	r7, #32
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
	...

080173bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80173c4:	f001 fb16 	bl	80189f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80173c8:	4b2d      	ldr	r3, [pc, #180]	; (8017480 <prvAddNewTaskToReadyList+0xc4>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	3301      	adds	r3, #1
 80173ce:	4a2c      	ldr	r2, [pc, #176]	; (8017480 <prvAddNewTaskToReadyList+0xc4>)
 80173d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80173d2:	4b2c      	ldr	r3, [pc, #176]	; (8017484 <prvAddNewTaskToReadyList+0xc8>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d109      	bne.n	80173ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80173da:	4a2a      	ldr	r2, [pc, #168]	; (8017484 <prvAddNewTaskToReadyList+0xc8>)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80173e0:	4b27      	ldr	r3, [pc, #156]	; (8017480 <prvAddNewTaskToReadyList+0xc4>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d110      	bne.n	801740a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80173e8:	f000 fcee 	bl	8017dc8 <prvInitialiseTaskLists>
 80173ec:	e00d      	b.n	801740a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80173ee:	4b26      	ldr	r3, [pc, #152]	; (8017488 <prvAddNewTaskToReadyList+0xcc>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d109      	bne.n	801740a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80173f6:	4b23      	ldr	r3, [pc, #140]	; (8017484 <prvAddNewTaskToReadyList+0xc8>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017400:	429a      	cmp	r2, r3
 8017402:	d802      	bhi.n	801740a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017404:	4a1f      	ldr	r2, [pc, #124]	; (8017484 <prvAddNewTaskToReadyList+0xc8>)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801740a:	4b20      	ldr	r3, [pc, #128]	; (801748c <prvAddNewTaskToReadyList+0xd0>)
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	3301      	adds	r3, #1
 8017410:	4a1e      	ldr	r2, [pc, #120]	; (801748c <prvAddNewTaskToReadyList+0xd0>)
 8017412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017414:	4b1d      	ldr	r3, [pc, #116]	; (801748c <prvAddNewTaskToReadyList+0xd0>)
 8017416:	681a      	ldr	r2, [r3, #0]
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017420:	4b1b      	ldr	r3, [pc, #108]	; (8017490 <prvAddNewTaskToReadyList+0xd4>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	429a      	cmp	r2, r3
 8017426:	d903      	bls.n	8017430 <prvAddNewTaskToReadyList+0x74>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801742c:	4a18      	ldr	r2, [pc, #96]	; (8017490 <prvAddNewTaskToReadyList+0xd4>)
 801742e:	6013      	str	r3, [r2, #0]
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017434:	4613      	mov	r3, r2
 8017436:	009b      	lsls	r3, r3, #2
 8017438:	4413      	add	r3, r2
 801743a:	009b      	lsls	r3, r3, #2
 801743c:	4a15      	ldr	r2, [pc, #84]	; (8017494 <prvAddNewTaskToReadyList+0xd8>)
 801743e:	441a      	add	r2, r3
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	3304      	adds	r3, #4
 8017444:	4619      	mov	r1, r3
 8017446:	4610      	mov	r0, r2
 8017448:	f7ff f913 	bl	8016672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801744c:	f001 fb02 	bl	8018a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017450:	4b0d      	ldr	r3, [pc, #52]	; (8017488 <prvAddNewTaskToReadyList+0xcc>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d00e      	beq.n	8017476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017458:	4b0a      	ldr	r3, [pc, #40]	; (8017484 <prvAddNewTaskToReadyList+0xc8>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017462:	429a      	cmp	r2, r3
 8017464:	d207      	bcs.n	8017476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <prvAddNewTaskToReadyList+0xdc>)
 8017468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801746c:	601a      	str	r2, [r3, #0]
 801746e:	f3bf 8f4f 	dsb	sy
 8017472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017476:	bf00      	nop
 8017478:	3708      	adds	r7, #8
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	2000214c 	.word	0x2000214c
 8017484:	20001c78 	.word	0x20001c78
 8017488:	20002158 	.word	0x20002158
 801748c:	20002168 	.word	0x20002168
 8017490:	20002154 	.word	0x20002154
 8017494:	20001c7c 	.word	0x20001c7c
 8017498:	e000ed04 	.word	0xe000ed04

0801749c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80174a4:	f001 faa6 	bl	80189f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d102      	bne.n	80174b4 <vTaskDelete+0x18>
 80174ae:	4b2c      	ldr	r3, [pc, #176]	; (8017560 <vTaskDelete+0xc4>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	e000      	b.n	80174b6 <vTaskDelete+0x1a>
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	3304      	adds	r3, #4
 80174bc:	4618      	mov	r0, r3
 80174be:	f7ff f935 	bl	801672c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d004      	beq.n	80174d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	3318      	adds	r3, #24
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7ff f92c 	bl	801672c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80174d4:	4b23      	ldr	r3, [pc, #140]	; (8017564 <vTaskDelete+0xc8>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	3301      	adds	r3, #1
 80174da:	4a22      	ldr	r2, [pc, #136]	; (8017564 <vTaskDelete+0xc8>)
 80174dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80174de:	4b20      	ldr	r3, [pc, #128]	; (8017560 <vTaskDelete+0xc4>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	68fa      	ldr	r2, [r7, #12]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d10b      	bne.n	8017500 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	3304      	adds	r3, #4
 80174ec:	4619      	mov	r1, r3
 80174ee:	481e      	ldr	r0, [pc, #120]	; (8017568 <vTaskDelete+0xcc>)
 80174f0:	f7ff f8bf 	bl	8016672 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80174f4:	4b1d      	ldr	r3, [pc, #116]	; (801756c <vTaskDelete+0xd0>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	3301      	adds	r3, #1
 80174fa:	4a1c      	ldr	r2, [pc, #112]	; (801756c <vTaskDelete+0xd0>)
 80174fc:	6013      	str	r3, [r2, #0]
 80174fe:	e009      	b.n	8017514 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8017500:	4b1b      	ldr	r3, [pc, #108]	; (8017570 <vTaskDelete+0xd4>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	3b01      	subs	r3, #1
 8017506:	4a1a      	ldr	r2, [pc, #104]	; (8017570 <vTaskDelete+0xd4>)
 8017508:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f000 fcca 	bl	8017ea4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8017510:	f000 fcf8 	bl	8017f04 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8017514:	f001 fa9e 	bl	8018a54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8017518:	4b16      	ldr	r3, [pc, #88]	; (8017574 <vTaskDelete+0xd8>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d01b      	beq.n	8017558 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8017520:	4b0f      	ldr	r3, [pc, #60]	; (8017560 <vTaskDelete+0xc4>)
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	68fa      	ldr	r2, [r7, #12]
 8017526:	429a      	cmp	r2, r3
 8017528:	d116      	bne.n	8017558 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801752a:	4b13      	ldr	r3, [pc, #76]	; (8017578 <vTaskDelete+0xdc>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d00a      	beq.n	8017548 <vTaskDelete+0xac>
	__asm volatile
 8017532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017536:	f383 8811 	msr	BASEPRI, r3
 801753a:	f3bf 8f6f 	isb	sy
 801753e:	f3bf 8f4f 	dsb	sy
 8017542:	60bb      	str	r3, [r7, #8]
}
 8017544:	bf00      	nop
 8017546:	e7fe      	b.n	8017546 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8017548:	4b0c      	ldr	r3, [pc, #48]	; (801757c <vTaskDelete+0xe0>)
 801754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801754e:	601a      	str	r2, [r3, #0]
 8017550:	f3bf 8f4f 	dsb	sy
 8017554:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017558:	bf00      	nop
 801755a:	3710      	adds	r7, #16
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}
 8017560:	20001c78 	.word	0x20001c78
 8017564:	20002168 	.word	0x20002168
 8017568:	20002120 	.word	0x20002120
 801756c:	20002134 	.word	0x20002134
 8017570:	2000214c 	.word	0x2000214c
 8017574:	20002158 	.word	0x20002158
 8017578:	20002174 	.word	0x20002174
 801757c:	e000ed04 	.word	0xe000ed04

08017580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017588:	2300      	movs	r3, #0
 801758a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d017      	beq.n	80175c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017592:	4b13      	ldr	r3, [pc, #76]	; (80175e0 <vTaskDelay+0x60>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d00a      	beq.n	80175b0 <vTaskDelay+0x30>
	__asm volatile
 801759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801759e:	f383 8811 	msr	BASEPRI, r3
 80175a2:	f3bf 8f6f 	isb	sy
 80175a6:	f3bf 8f4f 	dsb	sy
 80175aa:	60bb      	str	r3, [r7, #8]
}
 80175ac:	bf00      	nop
 80175ae:	e7fe      	b.n	80175ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80175b0:	f000 f8e6 	bl	8017780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80175b4:	2100      	movs	r1, #0
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f000 fd50 	bl	801805c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80175bc:	f000 f8ee 	bl	801779c <xTaskResumeAll>
 80175c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d107      	bne.n	80175d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80175c8:	4b06      	ldr	r3, [pc, #24]	; (80175e4 <vTaskDelay+0x64>)
 80175ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175ce:	601a      	str	r2, [r3, #0]
 80175d0:	f3bf 8f4f 	dsb	sy
 80175d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80175d8:	bf00      	nop
 80175da:	3710      	adds	r7, #16
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}
 80175e0:	20002174 	.word	0x20002174
 80175e4:	e000ed04 	.word	0xe000ed04

080175e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b088      	sub	sp, #32
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d10a      	bne.n	8017610 <eTaskGetState+0x28>
	__asm volatile
 80175fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175fe:	f383 8811 	msr	BASEPRI, r3
 8017602:	f3bf 8f6f 	isb	sy
 8017606:	f3bf 8f4f 	dsb	sy
 801760a:	60bb      	str	r3, [r7, #8]
}
 801760c:	bf00      	nop
 801760e:	e7fe      	b.n	801760e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017610:	4b23      	ldr	r3, [pc, #140]	; (80176a0 <eTaskGetState+0xb8>)
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	69ba      	ldr	r2, [r7, #24]
 8017616:	429a      	cmp	r2, r3
 8017618:	d102      	bne.n	8017620 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801761a:	2300      	movs	r3, #0
 801761c:	77fb      	strb	r3, [r7, #31]
 801761e:	e03a      	b.n	8017696 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8017620:	f001 f9e8 	bl	80189f4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8017624:	69bb      	ldr	r3, [r7, #24]
 8017626:	695b      	ldr	r3, [r3, #20]
 8017628:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801762a:	4b1e      	ldr	r3, [pc, #120]	; (80176a4 <eTaskGetState+0xbc>)
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8017630:	4b1d      	ldr	r3, [pc, #116]	; (80176a8 <eTaskGetState+0xc0>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8017636:	f001 fa0d 	bl	8018a54 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801763a:	697a      	ldr	r2, [r7, #20]
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	429a      	cmp	r2, r3
 8017640:	d003      	beq.n	801764a <eTaskGetState+0x62>
 8017642:	697a      	ldr	r2, [r7, #20]
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	429a      	cmp	r2, r3
 8017648:	d102      	bne.n	8017650 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801764a:	2302      	movs	r3, #2
 801764c:	77fb      	strb	r3, [r7, #31]
 801764e:	e022      	b.n	8017696 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	4a16      	ldr	r2, [pc, #88]	; (80176ac <eTaskGetState+0xc4>)
 8017654:	4293      	cmp	r3, r2
 8017656:	d112      	bne.n	801767e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017658:	69bb      	ldr	r3, [r7, #24]
 801765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10b      	bne.n	8017678 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017660:	69bb      	ldr	r3, [r7, #24]
 8017662:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8017666:	b2db      	uxtb	r3, r3
 8017668:	2b01      	cmp	r3, #1
 801766a:	d102      	bne.n	8017672 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801766c:	2302      	movs	r3, #2
 801766e:	77fb      	strb	r3, [r7, #31]
 8017670:	e011      	b.n	8017696 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8017672:	2303      	movs	r3, #3
 8017674:	77fb      	strb	r3, [r7, #31]
 8017676:	e00e      	b.n	8017696 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017678:	2302      	movs	r3, #2
 801767a:	77fb      	strb	r3, [r7, #31]
 801767c:	e00b      	b.n	8017696 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	4a0b      	ldr	r2, [pc, #44]	; (80176b0 <eTaskGetState+0xc8>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d002      	beq.n	801768c <eTaskGetState+0xa4>
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d102      	bne.n	8017692 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801768c:	2304      	movs	r3, #4
 801768e:	77fb      	strb	r3, [r7, #31]
 8017690:	e001      	b.n	8017696 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8017692:	2301      	movs	r3, #1
 8017694:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8017696:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017698:	4618      	mov	r0, r3
 801769a:	3720      	adds	r7, #32
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}
 80176a0:	20001c78 	.word	0x20001c78
 80176a4:	20002104 	.word	0x20002104
 80176a8:	20002108 	.word	0x20002108
 80176ac:	20002138 	.word	0x20002138
 80176b0:	20002120 	.word	0x20002120

080176b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b08a      	sub	sp, #40	; 0x28
 80176b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80176ba:	2300      	movs	r3, #0
 80176bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80176be:	2300      	movs	r3, #0
 80176c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80176c2:	463a      	mov	r2, r7
 80176c4:	1d39      	adds	r1, r7, #4
 80176c6:	f107 0308 	add.w	r3, r7, #8
 80176ca:	4618      	mov	r0, r3
 80176cc:	f7fe ff70 	bl	80165b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80176d0:	6839      	ldr	r1, [r7, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	68ba      	ldr	r2, [r7, #8]
 80176d6:	9202      	str	r2, [sp, #8]
 80176d8:	9301      	str	r3, [sp, #4]
 80176da:	2300      	movs	r3, #0
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	2300      	movs	r3, #0
 80176e0:	460a      	mov	r2, r1
 80176e2:	4921      	ldr	r1, [pc, #132]	; (8017768 <vTaskStartScheduler+0xb4>)
 80176e4:	4821      	ldr	r0, [pc, #132]	; (801776c <vTaskStartScheduler+0xb8>)
 80176e6:	f7ff fd37 	bl	8017158 <xTaskCreateStatic>
 80176ea:	4603      	mov	r3, r0
 80176ec:	4a20      	ldr	r2, [pc, #128]	; (8017770 <vTaskStartScheduler+0xbc>)
 80176ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80176f0:	4b1f      	ldr	r3, [pc, #124]	; (8017770 <vTaskStartScheduler+0xbc>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d002      	beq.n	80176fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80176f8:	2301      	movs	r3, #1
 80176fa:	617b      	str	r3, [r7, #20]
 80176fc:	e001      	b.n	8017702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80176fe:	2300      	movs	r3, #0
 8017700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	2b01      	cmp	r3, #1
 8017706:	d102      	bne.n	801770e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017708:	f000 fcfc 	bl	8018104 <xTimerCreateTimerTask>
 801770c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	2b01      	cmp	r3, #1
 8017712:	d116      	bne.n	8017742 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	613b      	str	r3, [r7, #16]
}
 8017726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017728:	4b12      	ldr	r3, [pc, #72]	; (8017774 <vTaskStartScheduler+0xc0>)
 801772a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801772e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017730:	4b11      	ldr	r3, [pc, #68]	; (8017778 <vTaskStartScheduler+0xc4>)
 8017732:	2201      	movs	r2, #1
 8017734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017736:	4b11      	ldr	r3, [pc, #68]	; (801777c <vTaskStartScheduler+0xc8>)
 8017738:	2200      	movs	r2, #0
 801773a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801773c:	f001 f8b8 	bl	80188b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017740:	e00e      	b.n	8017760 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017748:	d10a      	bne.n	8017760 <vTaskStartScheduler+0xac>
	__asm volatile
 801774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801774e:	f383 8811 	msr	BASEPRI, r3
 8017752:	f3bf 8f6f 	isb	sy
 8017756:	f3bf 8f4f 	dsb	sy
 801775a:	60fb      	str	r3, [r7, #12]
}
 801775c:	bf00      	nop
 801775e:	e7fe      	b.n	801775e <vTaskStartScheduler+0xaa>
}
 8017760:	bf00      	nop
 8017762:	3718      	adds	r7, #24
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}
 8017768:	0801f49c 	.word	0x0801f49c
 801776c:	08017d99 	.word	0x08017d99
 8017770:	20002170 	.word	0x20002170
 8017774:	2000216c 	.word	0x2000216c
 8017778:	20002158 	.word	0x20002158
 801777c:	20002150 	.word	0x20002150

08017780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017780:	b480      	push	{r7}
 8017782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017784:	4b04      	ldr	r3, [pc, #16]	; (8017798 <vTaskSuspendAll+0x18>)
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	3301      	adds	r3, #1
 801778a:	4a03      	ldr	r2, [pc, #12]	; (8017798 <vTaskSuspendAll+0x18>)
 801778c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801778e:	bf00      	nop
 8017790:	46bd      	mov	sp, r7
 8017792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017796:	4770      	bx	lr
 8017798:	20002174 	.word	0x20002174

0801779c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b084      	sub	sp, #16
 80177a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80177a2:	2300      	movs	r3, #0
 80177a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80177a6:	2300      	movs	r3, #0
 80177a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80177aa:	4b42      	ldr	r3, [pc, #264]	; (80178b4 <xTaskResumeAll+0x118>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d10a      	bne.n	80177c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80177b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177b6:	f383 8811 	msr	BASEPRI, r3
 80177ba:	f3bf 8f6f 	isb	sy
 80177be:	f3bf 8f4f 	dsb	sy
 80177c2:	603b      	str	r3, [r7, #0]
}
 80177c4:	bf00      	nop
 80177c6:	e7fe      	b.n	80177c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80177c8:	f001 f914 	bl	80189f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80177cc:	4b39      	ldr	r3, [pc, #228]	; (80178b4 <xTaskResumeAll+0x118>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	3b01      	subs	r3, #1
 80177d2:	4a38      	ldr	r2, [pc, #224]	; (80178b4 <xTaskResumeAll+0x118>)
 80177d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80177d6:	4b37      	ldr	r3, [pc, #220]	; (80178b4 <xTaskResumeAll+0x118>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d162      	bne.n	80178a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80177de:	4b36      	ldr	r3, [pc, #216]	; (80178b8 <xTaskResumeAll+0x11c>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d05e      	beq.n	80178a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177e6:	e02f      	b.n	8017848 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177e8:	4b34      	ldr	r3, [pc, #208]	; (80178bc <xTaskResumeAll+0x120>)
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	3318      	adds	r3, #24
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7fe ff99 	bl	801672c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	3304      	adds	r3, #4
 80177fe:	4618      	mov	r0, r3
 8017800:	f7fe ff94 	bl	801672c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017808:	4b2d      	ldr	r3, [pc, #180]	; (80178c0 <xTaskResumeAll+0x124>)
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	429a      	cmp	r2, r3
 801780e:	d903      	bls.n	8017818 <xTaskResumeAll+0x7c>
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017814:	4a2a      	ldr	r2, [pc, #168]	; (80178c0 <xTaskResumeAll+0x124>)
 8017816:	6013      	str	r3, [r2, #0]
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801781c:	4613      	mov	r3, r2
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	4413      	add	r3, r2
 8017822:	009b      	lsls	r3, r3, #2
 8017824:	4a27      	ldr	r2, [pc, #156]	; (80178c4 <xTaskResumeAll+0x128>)
 8017826:	441a      	add	r2, r3
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	3304      	adds	r3, #4
 801782c:	4619      	mov	r1, r3
 801782e:	4610      	mov	r0, r2
 8017830:	f7fe ff1f 	bl	8016672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017838:	4b23      	ldr	r3, [pc, #140]	; (80178c8 <xTaskResumeAll+0x12c>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801783e:	429a      	cmp	r2, r3
 8017840:	d302      	bcc.n	8017848 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017842:	4b22      	ldr	r3, [pc, #136]	; (80178cc <xTaskResumeAll+0x130>)
 8017844:	2201      	movs	r2, #1
 8017846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017848:	4b1c      	ldr	r3, [pc, #112]	; (80178bc <xTaskResumeAll+0x120>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d1cb      	bne.n	80177e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d001      	beq.n	801785a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017856:	f000 fb55 	bl	8017f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801785a:	4b1d      	ldr	r3, [pc, #116]	; (80178d0 <xTaskResumeAll+0x134>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d010      	beq.n	8017888 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017866:	f000 f847 	bl	80178f8 <xTaskIncrementTick>
 801786a:	4603      	mov	r3, r0
 801786c:	2b00      	cmp	r3, #0
 801786e:	d002      	beq.n	8017876 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017870:	4b16      	ldr	r3, [pc, #88]	; (80178cc <xTaskResumeAll+0x130>)
 8017872:	2201      	movs	r2, #1
 8017874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	3b01      	subs	r3, #1
 801787a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1f1      	bne.n	8017866 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017882:	4b13      	ldr	r3, [pc, #76]	; (80178d0 <xTaskResumeAll+0x134>)
 8017884:	2200      	movs	r2, #0
 8017886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017888:	4b10      	ldr	r3, [pc, #64]	; (80178cc <xTaskResumeAll+0x130>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d009      	beq.n	80178a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017890:	2301      	movs	r3, #1
 8017892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017894:	4b0f      	ldr	r3, [pc, #60]	; (80178d4 <xTaskResumeAll+0x138>)
 8017896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801789a:	601a      	str	r2, [r3, #0]
 801789c:	f3bf 8f4f 	dsb	sy
 80178a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80178a4:	f001 f8d6 	bl	8018a54 <vPortExitCritical>

	return xAlreadyYielded;
 80178a8:	68bb      	ldr	r3, [r7, #8]
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	20002174 	.word	0x20002174
 80178b8:	2000214c 	.word	0x2000214c
 80178bc:	2000210c 	.word	0x2000210c
 80178c0:	20002154 	.word	0x20002154
 80178c4:	20001c7c 	.word	0x20001c7c
 80178c8:	20001c78 	.word	0x20001c78
 80178cc:	20002160 	.word	0x20002160
 80178d0:	2000215c 	.word	0x2000215c
 80178d4:	e000ed04 	.word	0xe000ed04

080178d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80178d8:	b480      	push	{r7}
 80178da:	b083      	sub	sp, #12
 80178dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80178de:	4b05      	ldr	r3, [pc, #20]	; (80178f4 <xTaskGetTickCount+0x1c>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80178e4:	687b      	ldr	r3, [r7, #4]
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	370c      	adds	r7, #12
 80178ea:	46bd      	mov	sp, r7
 80178ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f0:	4770      	bx	lr
 80178f2:	bf00      	nop
 80178f4:	20002150 	.word	0x20002150

080178f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80178fe:	2300      	movs	r3, #0
 8017900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017902:	4b4f      	ldr	r3, [pc, #316]	; (8017a40 <xTaskIncrementTick+0x148>)
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2b00      	cmp	r3, #0
 8017908:	f040 808f 	bne.w	8017a2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801790c:	4b4d      	ldr	r3, [pc, #308]	; (8017a44 <xTaskIncrementTick+0x14c>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	3301      	adds	r3, #1
 8017912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017914:	4a4b      	ldr	r2, [pc, #300]	; (8017a44 <xTaskIncrementTick+0x14c>)
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801791a:	693b      	ldr	r3, [r7, #16]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d120      	bne.n	8017962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017920:	4b49      	ldr	r3, [pc, #292]	; (8017a48 <xTaskIncrementTick+0x150>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00a      	beq.n	8017940 <xTaskIncrementTick+0x48>
	__asm volatile
 801792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801792e:	f383 8811 	msr	BASEPRI, r3
 8017932:	f3bf 8f6f 	isb	sy
 8017936:	f3bf 8f4f 	dsb	sy
 801793a:	603b      	str	r3, [r7, #0]
}
 801793c:	bf00      	nop
 801793e:	e7fe      	b.n	801793e <xTaskIncrementTick+0x46>
 8017940:	4b41      	ldr	r3, [pc, #260]	; (8017a48 <xTaskIncrementTick+0x150>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	60fb      	str	r3, [r7, #12]
 8017946:	4b41      	ldr	r3, [pc, #260]	; (8017a4c <xTaskIncrementTick+0x154>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	4a3f      	ldr	r2, [pc, #252]	; (8017a48 <xTaskIncrementTick+0x150>)
 801794c:	6013      	str	r3, [r2, #0]
 801794e:	4a3f      	ldr	r2, [pc, #252]	; (8017a4c <xTaskIncrementTick+0x154>)
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	6013      	str	r3, [r2, #0]
 8017954:	4b3e      	ldr	r3, [pc, #248]	; (8017a50 <xTaskIncrementTick+0x158>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	3301      	adds	r3, #1
 801795a:	4a3d      	ldr	r2, [pc, #244]	; (8017a50 <xTaskIncrementTick+0x158>)
 801795c:	6013      	str	r3, [r2, #0]
 801795e:	f000 fad1 	bl	8017f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017962:	4b3c      	ldr	r3, [pc, #240]	; (8017a54 <xTaskIncrementTick+0x15c>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	693a      	ldr	r2, [r7, #16]
 8017968:	429a      	cmp	r2, r3
 801796a:	d349      	bcc.n	8017a00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801796c:	4b36      	ldr	r3, [pc, #216]	; (8017a48 <xTaskIncrementTick+0x150>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d104      	bne.n	8017980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017976:	4b37      	ldr	r3, [pc, #220]	; (8017a54 <xTaskIncrementTick+0x15c>)
 8017978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801797c:	601a      	str	r2, [r3, #0]
					break;
 801797e:	e03f      	b.n	8017a00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017980:	4b31      	ldr	r3, [pc, #196]	; (8017a48 <xTaskIncrementTick+0x150>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	68db      	ldr	r3, [r3, #12]
 8017988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017990:	693a      	ldr	r2, [r7, #16]
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	429a      	cmp	r2, r3
 8017996:	d203      	bcs.n	80179a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017998:	4a2e      	ldr	r2, [pc, #184]	; (8017a54 <xTaskIncrementTick+0x15c>)
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801799e:	e02f      	b.n	8017a00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	3304      	adds	r3, #4
 80179a4:	4618      	mov	r0, r3
 80179a6:	f7fe fec1 	bl	801672c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d004      	beq.n	80179bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	3318      	adds	r3, #24
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7fe feb8 	bl	801672c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179c0:	4b25      	ldr	r3, [pc, #148]	; (8017a58 <xTaskIncrementTick+0x160>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d903      	bls.n	80179d0 <xTaskIncrementTick+0xd8>
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179cc:	4a22      	ldr	r2, [pc, #136]	; (8017a58 <xTaskIncrementTick+0x160>)
 80179ce:	6013      	str	r3, [r2, #0]
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d4:	4613      	mov	r3, r2
 80179d6:	009b      	lsls	r3, r3, #2
 80179d8:	4413      	add	r3, r2
 80179da:	009b      	lsls	r3, r3, #2
 80179dc:	4a1f      	ldr	r2, [pc, #124]	; (8017a5c <xTaskIncrementTick+0x164>)
 80179de:	441a      	add	r2, r3
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	3304      	adds	r3, #4
 80179e4:	4619      	mov	r1, r3
 80179e6:	4610      	mov	r0, r2
 80179e8:	f7fe fe43 	bl	8016672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f0:	4b1b      	ldr	r3, [pc, #108]	; (8017a60 <xTaskIncrementTick+0x168>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d3b8      	bcc.n	801796c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80179fa:	2301      	movs	r3, #1
 80179fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80179fe:	e7b5      	b.n	801796c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017a00:	4b17      	ldr	r3, [pc, #92]	; (8017a60 <xTaskIncrementTick+0x168>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a06:	4915      	ldr	r1, [pc, #84]	; (8017a5c <xTaskIncrementTick+0x164>)
 8017a08:	4613      	mov	r3, r2
 8017a0a:	009b      	lsls	r3, r3, #2
 8017a0c:	4413      	add	r3, r2
 8017a0e:	009b      	lsls	r3, r3, #2
 8017a10:	440b      	add	r3, r1
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b01      	cmp	r3, #1
 8017a16:	d901      	bls.n	8017a1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017a1c:	4b11      	ldr	r3, [pc, #68]	; (8017a64 <xTaskIncrementTick+0x16c>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d007      	beq.n	8017a34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017a24:	2301      	movs	r3, #1
 8017a26:	617b      	str	r3, [r7, #20]
 8017a28:	e004      	b.n	8017a34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017a2a:	4b0f      	ldr	r3, [pc, #60]	; (8017a68 <xTaskIncrementTick+0x170>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	3301      	adds	r3, #1
 8017a30:	4a0d      	ldr	r2, [pc, #52]	; (8017a68 <xTaskIncrementTick+0x170>)
 8017a32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017a34:	697b      	ldr	r3, [r7, #20]
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3718      	adds	r7, #24
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}
 8017a3e:	bf00      	nop
 8017a40:	20002174 	.word	0x20002174
 8017a44:	20002150 	.word	0x20002150
 8017a48:	20002104 	.word	0x20002104
 8017a4c:	20002108 	.word	0x20002108
 8017a50:	20002164 	.word	0x20002164
 8017a54:	2000216c 	.word	0x2000216c
 8017a58:	20002154 	.word	0x20002154
 8017a5c:	20001c7c 	.word	0x20001c7c
 8017a60:	20001c78 	.word	0x20001c78
 8017a64:	20002160 	.word	0x20002160
 8017a68:	2000215c 	.word	0x2000215c

08017a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b085      	sub	sp, #20
 8017a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017a72:	4b28      	ldr	r3, [pc, #160]	; (8017b14 <vTaskSwitchContext+0xa8>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d003      	beq.n	8017a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017a7a:	4b27      	ldr	r3, [pc, #156]	; (8017b18 <vTaskSwitchContext+0xac>)
 8017a7c:	2201      	movs	r2, #1
 8017a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017a80:	e041      	b.n	8017b06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8017a82:	4b25      	ldr	r3, [pc, #148]	; (8017b18 <vTaskSwitchContext+0xac>)
 8017a84:	2200      	movs	r2, #0
 8017a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a88:	4b24      	ldr	r3, [pc, #144]	; (8017b1c <vTaskSwitchContext+0xb0>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	60fb      	str	r3, [r7, #12]
 8017a8e:	e010      	b.n	8017ab2 <vTaskSwitchContext+0x46>
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d10a      	bne.n	8017aac <vTaskSwitchContext+0x40>
	__asm volatile
 8017a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a9a:	f383 8811 	msr	BASEPRI, r3
 8017a9e:	f3bf 8f6f 	isb	sy
 8017aa2:	f3bf 8f4f 	dsb	sy
 8017aa6:	607b      	str	r3, [r7, #4]
}
 8017aa8:	bf00      	nop
 8017aaa:	e7fe      	b.n	8017aaa <vTaskSwitchContext+0x3e>
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	3b01      	subs	r3, #1
 8017ab0:	60fb      	str	r3, [r7, #12]
 8017ab2:	491b      	ldr	r1, [pc, #108]	; (8017b20 <vTaskSwitchContext+0xb4>)
 8017ab4:	68fa      	ldr	r2, [r7, #12]
 8017ab6:	4613      	mov	r3, r2
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	4413      	add	r3, r2
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	440b      	add	r3, r1
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d0e4      	beq.n	8017a90 <vTaskSwitchContext+0x24>
 8017ac6:	68fa      	ldr	r2, [r7, #12]
 8017ac8:	4613      	mov	r3, r2
 8017aca:	009b      	lsls	r3, r3, #2
 8017acc:	4413      	add	r3, r2
 8017ace:	009b      	lsls	r3, r3, #2
 8017ad0:	4a13      	ldr	r2, [pc, #76]	; (8017b20 <vTaskSwitchContext+0xb4>)
 8017ad2:	4413      	add	r3, r2
 8017ad4:	60bb      	str	r3, [r7, #8]
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	685a      	ldr	r2, [r3, #4]
 8017adc:	68bb      	ldr	r3, [r7, #8]
 8017ade:	605a      	str	r2, [r3, #4]
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	685a      	ldr	r2, [r3, #4]
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	3308      	adds	r3, #8
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d104      	bne.n	8017af6 <vTaskSwitchContext+0x8a>
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	685a      	ldr	r2, [r3, #4]
 8017af2:	68bb      	ldr	r3, [r7, #8]
 8017af4:	605a      	str	r2, [r3, #4]
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	685b      	ldr	r3, [r3, #4]
 8017afa:	68db      	ldr	r3, [r3, #12]
 8017afc:	4a09      	ldr	r2, [pc, #36]	; (8017b24 <vTaskSwitchContext+0xb8>)
 8017afe:	6013      	str	r3, [r2, #0]
 8017b00:	4a06      	ldr	r2, [pc, #24]	; (8017b1c <vTaskSwitchContext+0xb0>)
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	6013      	str	r3, [r2, #0]
}
 8017b06:	bf00      	nop
 8017b08:	3714      	adds	r7, #20
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	20002174 	.word	0x20002174
 8017b18:	20002160 	.word	0x20002160
 8017b1c:	20002154 	.word	0x20002154
 8017b20:	20001c7c 	.word	0x20001c7c
 8017b24:	20001c78 	.word	0x20001c78

08017b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d10a      	bne.n	8017b4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3c:	f383 8811 	msr	BASEPRI, r3
 8017b40:	f3bf 8f6f 	isb	sy
 8017b44:	f3bf 8f4f 	dsb	sy
 8017b48:	60fb      	str	r3, [r7, #12]
}
 8017b4a:	bf00      	nop
 8017b4c:	e7fe      	b.n	8017b4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b4e:	4b07      	ldr	r3, [pc, #28]	; (8017b6c <vTaskPlaceOnEventList+0x44>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	3318      	adds	r3, #24
 8017b54:	4619      	mov	r1, r3
 8017b56:	6878      	ldr	r0, [r7, #4]
 8017b58:	f7fe fdaf 	bl	80166ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b5c:	2101      	movs	r1, #1
 8017b5e:	6838      	ldr	r0, [r7, #0]
 8017b60:	f000 fa7c 	bl	801805c <prvAddCurrentTaskToDelayedList>
}
 8017b64:	bf00      	nop
 8017b66:	3710      	adds	r7, #16
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}
 8017b6c:	20001c78 	.word	0x20001c78

08017b70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b086      	sub	sp, #24
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d10a      	bne.n	8017b98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b86:	f383 8811 	msr	BASEPRI, r3
 8017b8a:	f3bf 8f6f 	isb	sy
 8017b8e:	f3bf 8f4f 	dsb	sy
 8017b92:	617b      	str	r3, [r7, #20]
}
 8017b94:	bf00      	nop
 8017b96:	e7fe      	b.n	8017b96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b98:	4b0a      	ldr	r3, [pc, #40]	; (8017bc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	3318      	adds	r3, #24
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	68f8      	ldr	r0, [r7, #12]
 8017ba2:	f7fe fd66 	bl	8016672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d002      	beq.n	8017bb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017bb2:	6879      	ldr	r1, [r7, #4]
 8017bb4:	68b8      	ldr	r0, [r7, #8]
 8017bb6:	f000 fa51 	bl	801805c <prvAddCurrentTaskToDelayedList>
	}
 8017bba:	bf00      	nop
 8017bbc:	3718      	adds	r7, #24
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	20001c78 	.word	0x20001c78

08017bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b086      	sub	sp, #24
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	68db      	ldr	r3, [r3, #12]
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d10a      	bne.n	8017bf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017be2:	f383 8811 	msr	BASEPRI, r3
 8017be6:	f3bf 8f6f 	isb	sy
 8017bea:	f3bf 8f4f 	dsb	sy
 8017bee:	60fb      	str	r3, [r7, #12]
}
 8017bf0:	bf00      	nop
 8017bf2:	e7fe      	b.n	8017bf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	3318      	adds	r3, #24
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fe fd97 	bl	801672c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bfe:	4b1e      	ldr	r3, [pc, #120]	; (8017c78 <xTaskRemoveFromEventList+0xb0>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d11d      	bne.n	8017c42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	3304      	adds	r3, #4
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fe fd8e 	bl	801672c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c14:	4b19      	ldr	r3, [pc, #100]	; (8017c7c <xTaskRemoveFromEventList+0xb4>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	d903      	bls.n	8017c24 <xTaskRemoveFromEventList+0x5c>
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c20:	4a16      	ldr	r2, [pc, #88]	; (8017c7c <xTaskRemoveFromEventList+0xb4>)
 8017c22:	6013      	str	r3, [r2, #0]
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c28:	4613      	mov	r3, r2
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	4413      	add	r3, r2
 8017c2e:	009b      	lsls	r3, r3, #2
 8017c30:	4a13      	ldr	r2, [pc, #76]	; (8017c80 <xTaskRemoveFromEventList+0xb8>)
 8017c32:	441a      	add	r2, r3
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	3304      	adds	r3, #4
 8017c38:	4619      	mov	r1, r3
 8017c3a:	4610      	mov	r0, r2
 8017c3c:	f7fe fd19 	bl	8016672 <vListInsertEnd>
 8017c40:	e005      	b.n	8017c4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	3318      	adds	r3, #24
 8017c46:	4619      	mov	r1, r3
 8017c48:	480e      	ldr	r0, [pc, #56]	; (8017c84 <xTaskRemoveFromEventList+0xbc>)
 8017c4a:	f7fe fd12 	bl	8016672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017c4e:	693b      	ldr	r3, [r7, #16]
 8017c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c52:	4b0d      	ldr	r3, [pc, #52]	; (8017c88 <xTaskRemoveFromEventList+0xc0>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d905      	bls.n	8017c68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017c60:	4b0a      	ldr	r3, [pc, #40]	; (8017c8c <xTaskRemoveFromEventList+0xc4>)
 8017c62:	2201      	movs	r2, #1
 8017c64:	601a      	str	r2, [r3, #0]
 8017c66:	e001      	b.n	8017c6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017c6c:	697b      	ldr	r3, [r7, #20]
}
 8017c6e:	4618      	mov	r0, r3
 8017c70:	3718      	adds	r7, #24
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	20002174 	.word	0x20002174
 8017c7c:	20002154 	.word	0x20002154
 8017c80:	20001c7c 	.word	0x20001c7c
 8017c84:	2000210c 	.word	0x2000210c
 8017c88:	20001c78 	.word	0x20001c78
 8017c8c:	20002160 	.word	0x20002160

08017c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c98:	4b06      	ldr	r3, [pc, #24]	; (8017cb4 <vTaskInternalSetTimeOutState+0x24>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017ca0:	4b05      	ldr	r3, [pc, #20]	; (8017cb8 <vTaskInternalSetTimeOutState+0x28>)
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	605a      	str	r2, [r3, #4]
}
 8017ca8:	bf00      	nop
 8017caa:	370c      	adds	r7, #12
 8017cac:	46bd      	mov	sp, r7
 8017cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb2:	4770      	bx	lr
 8017cb4:	20002164 	.word	0x20002164
 8017cb8:	20002150 	.word	0x20002150

08017cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b088      	sub	sp, #32
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d10a      	bne.n	8017ce2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd0:	f383 8811 	msr	BASEPRI, r3
 8017cd4:	f3bf 8f6f 	isb	sy
 8017cd8:	f3bf 8f4f 	dsb	sy
 8017cdc:	613b      	str	r3, [r7, #16]
}
 8017cde:	bf00      	nop
 8017ce0:	e7fe      	b.n	8017ce0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d10a      	bne.n	8017cfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cec:	f383 8811 	msr	BASEPRI, r3
 8017cf0:	f3bf 8f6f 	isb	sy
 8017cf4:	f3bf 8f4f 	dsb	sy
 8017cf8:	60fb      	str	r3, [r7, #12]
}
 8017cfa:	bf00      	nop
 8017cfc:	e7fe      	b.n	8017cfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017cfe:	f000 fe79 	bl	80189f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017d02:	4b1d      	ldr	r3, [pc, #116]	; (8017d78 <xTaskCheckForTimeOut+0xbc>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	69ba      	ldr	r2, [r7, #24]
 8017d0e:	1ad3      	subs	r3, r2, r3
 8017d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d1a:	d102      	bne.n	8017d22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	61fb      	str	r3, [r7, #28]
 8017d20:	e023      	b.n	8017d6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	4b15      	ldr	r3, [pc, #84]	; (8017d7c <xTaskCheckForTimeOut+0xc0>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d007      	beq.n	8017d3e <xTaskCheckForTimeOut+0x82>
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	685b      	ldr	r3, [r3, #4]
 8017d32:	69ba      	ldr	r2, [r7, #24]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d302      	bcc.n	8017d3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017d38:	2301      	movs	r3, #1
 8017d3a:	61fb      	str	r3, [r7, #28]
 8017d3c:	e015      	b.n	8017d6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017d3e:	683b      	ldr	r3, [r7, #0]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	697a      	ldr	r2, [r7, #20]
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d20b      	bcs.n	8017d60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	681a      	ldr	r2, [r3, #0]
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	1ad2      	subs	r2, r2, r3
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7ff ff9b 	bl	8017c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	61fb      	str	r3, [r7, #28]
 8017d5e:	e004      	b.n	8017d6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	2200      	movs	r2, #0
 8017d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017d66:	2301      	movs	r3, #1
 8017d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017d6a:	f000 fe73 	bl	8018a54 <vPortExitCritical>

	return xReturn;
 8017d6e:	69fb      	ldr	r3, [r7, #28]
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	3720      	adds	r7, #32
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}
 8017d78:	20002150 	.word	0x20002150
 8017d7c:	20002164 	.word	0x20002164

08017d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017d80:	b480      	push	{r7}
 8017d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017d84:	4b03      	ldr	r3, [pc, #12]	; (8017d94 <vTaskMissedYield+0x14>)
 8017d86:	2201      	movs	r2, #1
 8017d88:	601a      	str	r2, [r3, #0]
}
 8017d8a:	bf00      	nop
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d92:	4770      	bx	lr
 8017d94:	20002160 	.word	0x20002160

08017d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017da0:	f000 f852 	bl	8017e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017da4:	4b06      	ldr	r3, [pc, #24]	; (8017dc0 <prvIdleTask+0x28>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d9f9      	bls.n	8017da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017dac:	4b05      	ldr	r3, [pc, #20]	; (8017dc4 <prvIdleTask+0x2c>)
 8017dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	f3bf 8f4f 	dsb	sy
 8017db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017dbc:	e7f0      	b.n	8017da0 <prvIdleTask+0x8>
 8017dbe:	bf00      	nop
 8017dc0:	20001c7c 	.word	0x20001c7c
 8017dc4:	e000ed04 	.word	0xe000ed04

08017dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017dce:	2300      	movs	r3, #0
 8017dd0:	607b      	str	r3, [r7, #4]
 8017dd2:	e00c      	b.n	8017dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017dd4:	687a      	ldr	r2, [r7, #4]
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	009b      	lsls	r3, r3, #2
 8017dda:	4413      	add	r3, r2
 8017ddc:	009b      	lsls	r3, r3, #2
 8017dde:	4a12      	ldr	r2, [pc, #72]	; (8017e28 <prvInitialiseTaskLists+0x60>)
 8017de0:	4413      	add	r3, r2
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7fe fc18 	bl	8016618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	3301      	adds	r3, #1
 8017dec:	607b      	str	r3, [r7, #4]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2b37      	cmp	r3, #55	; 0x37
 8017df2:	d9ef      	bls.n	8017dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017df4:	480d      	ldr	r0, [pc, #52]	; (8017e2c <prvInitialiseTaskLists+0x64>)
 8017df6:	f7fe fc0f 	bl	8016618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017dfa:	480d      	ldr	r0, [pc, #52]	; (8017e30 <prvInitialiseTaskLists+0x68>)
 8017dfc:	f7fe fc0c 	bl	8016618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017e00:	480c      	ldr	r0, [pc, #48]	; (8017e34 <prvInitialiseTaskLists+0x6c>)
 8017e02:	f7fe fc09 	bl	8016618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017e06:	480c      	ldr	r0, [pc, #48]	; (8017e38 <prvInitialiseTaskLists+0x70>)
 8017e08:	f7fe fc06 	bl	8016618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017e0c:	480b      	ldr	r0, [pc, #44]	; (8017e3c <prvInitialiseTaskLists+0x74>)
 8017e0e:	f7fe fc03 	bl	8016618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017e12:	4b0b      	ldr	r3, [pc, #44]	; (8017e40 <prvInitialiseTaskLists+0x78>)
 8017e14:	4a05      	ldr	r2, [pc, #20]	; (8017e2c <prvInitialiseTaskLists+0x64>)
 8017e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017e18:	4b0a      	ldr	r3, [pc, #40]	; (8017e44 <prvInitialiseTaskLists+0x7c>)
 8017e1a:	4a05      	ldr	r2, [pc, #20]	; (8017e30 <prvInitialiseTaskLists+0x68>)
 8017e1c:	601a      	str	r2, [r3, #0]
}
 8017e1e:	bf00      	nop
 8017e20:	3708      	adds	r7, #8
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bd80      	pop	{r7, pc}
 8017e26:	bf00      	nop
 8017e28:	20001c7c 	.word	0x20001c7c
 8017e2c:	200020dc 	.word	0x200020dc
 8017e30:	200020f0 	.word	0x200020f0
 8017e34:	2000210c 	.word	0x2000210c
 8017e38:	20002120 	.word	0x20002120
 8017e3c:	20002138 	.word	0x20002138
 8017e40:	20002104 	.word	0x20002104
 8017e44:	20002108 	.word	0x20002108

08017e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e4e:	e019      	b.n	8017e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017e50:	f000 fdd0 	bl	80189f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e54:	4b10      	ldr	r3, [pc, #64]	; (8017e98 <prvCheckTasksWaitingTermination+0x50>)
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	68db      	ldr	r3, [r3, #12]
 8017e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	3304      	adds	r3, #4
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7fe fc63 	bl	801672c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017e66:	4b0d      	ldr	r3, [pc, #52]	; (8017e9c <prvCheckTasksWaitingTermination+0x54>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	3b01      	subs	r3, #1
 8017e6c:	4a0b      	ldr	r2, [pc, #44]	; (8017e9c <prvCheckTasksWaitingTermination+0x54>)
 8017e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017e70:	4b0b      	ldr	r3, [pc, #44]	; (8017ea0 <prvCheckTasksWaitingTermination+0x58>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	3b01      	subs	r3, #1
 8017e76:	4a0a      	ldr	r2, [pc, #40]	; (8017ea0 <prvCheckTasksWaitingTermination+0x58>)
 8017e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017e7a:	f000 fdeb 	bl	8018a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f000 f810 	bl	8017ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e84:	4b06      	ldr	r3, [pc, #24]	; (8017ea0 <prvCheckTasksWaitingTermination+0x58>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d1e1      	bne.n	8017e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017e8c:	bf00      	nop
 8017e8e:	bf00      	nop
 8017e90:	3708      	adds	r7, #8
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	20002120 	.word	0x20002120
 8017e9c:	2000214c 	.word	0x2000214c
 8017ea0:	20002134 	.word	0x20002134

08017ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b084      	sub	sp, #16
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d108      	bne.n	8017ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f000 ff88 	bl	8018dd0 <vPortFree>
				vPortFree( pxTCB );
 8017ec0:	6878      	ldr	r0, [r7, #4]
 8017ec2:	f000 ff85 	bl	8018dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017ec6:	e018      	b.n	8017efa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017ece:	2b01      	cmp	r3, #1
 8017ed0:	d103      	bne.n	8017eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f000 ff7c 	bl	8018dd0 <vPortFree>
	}
 8017ed8:	e00f      	b.n	8017efa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017ee0:	2b02      	cmp	r3, #2
 8017ee2:	d00a      	beq.n	8017efa <prvDeleteTCB+0x56>
	__asm volatile
 8017ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee8:	f383 8811 	msr	BASEPRI, r3
 8017eec:	f3bf 8f6f 	isb	sy
 8017ef0:	f3bf 8f4f 	dsb	sy
 8017ef4:	60fb      	str	r3, [r7, #12]
}
 8017ef6:	bf00      	nop
 8017ef8:	e7fe      	b.n	8017ef8 <prvDeleteTCB+0x54>
	}
 8017efa:	bf00      	nop
 8017efc:	3710      	adds	r7, #16
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
	...

08017f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017f04:	b480      	push	{r7}
 8017f06:	b083      	sub	sp, #12
 8017f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f0a:	4b0c      	ldr	r3, [pc, #48]	; (8017f3c <prvResetNextTaskUnblockTime+0x38>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d104      	bne.n	8017f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017f14:	4b0a      	ldr	r3, [pc, #40]	; (8017f40 <prvResetNextTaskUnblockTime+0x3c>)
 8017f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017f1c:	e008      	b.n	8017f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f1e:	4b07      	ldr	r3, [pc, #28]	; (8017f3c <prvResetNextTaskUnblockTime+0x38>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	4a04      	ldr	r2, [pc, #16]	; (8017f40 <prvResetNextTaskUnblockTime+0x3c>)
 8017f2e:	6013      	str	r3, [r2, #0]
}
 8017f30:	bf00      	nop
 8017f32:	370c      	adds	r7, #12
 8017f34:	46bd      	mov	sp, r7
 8017f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3a:	4770      	bx	lr
 8017f3c:	20002104 	.word	0x20002104
 8017f40:	2000216c 	.word	0x2000216c

08017f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017f4a:	4b0b      	ldr	r3, [pc, #44]	; (8017f78 <xTaskGetSchedulerState+0x34>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d102      	bne.n	8017f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017f52:	2301      	movs	r3, #1
 8017f54:	607b      	str	r3, [r7, #4]
 8017f56:	e008      	b.n	8017f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f58:	4b08      	ldr	r3, [pc, #32]	; (8017f7c <xTaskGetSchedulerState+0x38>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d102      	bne.n	8017f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017f60:	2302      	movs	r3, #2
 8017f62:	607b      	str	r3, [r7, #4]
 8017f64:	e001      	b.n	8017f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017f66:	2300      	movs	r3, #0
 8017f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017f6a:	687b      	ldr	r3, [r7, #4]
	}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	370c      	adds	r7, #12
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr
 8017f78:	20002158 	.word	0x20002158
 8017f7c:	20002174 	.word	0x20002174

08017f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b086      	sub	sp, #24
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d056      	beq.n	8018044 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017f96:	4b2e      	ldr	r3, [pc, #184]	; (8018050 <xTaskPriorityDisinherit+0xd0>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	693a      	ldr	r2, [r7, #16]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d00a      	beq.n	8017fb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa4:	f383 8811 	msr	BASEPRI, r3
 8017fa8:	f3bf 8f6f 	isb	sy
 8017fac:	f3bf 8f4f 	dsb	sy
 8017fb0:	60fb      	str	r3, [r7, #12]
}
 8017fb2:	bf00      	nop
 8017fb4:	e7fe      	b.n	8017fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017fb6:	693b      	ldr	r3, [r7, #16]
 8017fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d10a      	bne.n	8017fd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc2:	f383 8811 	msr	BASEPRI, r3
 8017fc6:	f3bf 8f6f 	isb	sy
 8017fca:	f3bf 8f4f 	dsb	sy
 8017fce:	60bb      	str	r3, [r7, #8]
}
 8017fd0:	bf00      	nop
 8017fd2:	e7fe      	b.n	8017fd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017fd4:	693b      	ldr	r3, [r7, #16]
 8017fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fd8:	1e5a      	subs	r2, r3, #1
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	d02c      	beq.n	8018044 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d128      	bne.n	8018044 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	3304      	adds	r3, #4
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fe fb98 	bl	801672c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017ffc:	693b      	ldr	r3, [r7, #16]
 8017ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018010:	693b      	ldr	r3, [r7, #16]
 8018012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018014:	4b0f      	ldr	r3, [pc, #60]	; (8018054 <xTaskPriorityDisinherit+0xd4>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	429a      	cmp	r2, r3
 801801a:	d903      	bls.n	8018024 <xTaskPriorityDisinherit+0xa4>
 801801c:	693b      	ldr	r3, [r7, #16]
 801801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018020:	4a0c      	ldr	r2, [pc, #48]	; (8018054 <xTaskPriorityDisinherit+0xd4>)
 8018022:	6013      	str	r3, [r2, #0]
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018028:	4613      	mov	r3, r2
 801802a:	009b      	lsls	r3, r3, #2
 801802c:	4413      	add	r3, r2
 801802e:	009b      	lsls	r3, r3, #2
 8018030:	4a09      	ldr	r2, [pc, #36]	; (8018058 <xTaskPriorityDisinherit+0xd8>)
 8018032:	441a      	add	r2, r3
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	3304      	adds	r3, #4
 8018038:	4619      	mov	r1, r3
 801803a:	4610      	mov	r0, r2
 801803c:	f7fe fb19 	bl	8016672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018040:	2301      	movs	r3, #1
 8018042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018044:	697b      	ldr	r3, [r7, #20]
	}
 8018046:	4618      	mov	r0, r3
 8018048:	3718      	adds	r7, #24
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}
 801804e:	bf00      	nop
 8018050:	20001c78 	.word	0x20001c78
 8018054:	20002154 	.word	0x20002154
 8018058:	20001c7c 	.word	0x20001c7c

0801805c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801805c:	b580      	push	{r7, lr}
 801805e:	b084      	sub	sp, #16
 8018060:	af00      	add	r7, sp, #0
 8018062:	6078      	str	r0, [r7, #4]
 8018064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018066:	4b21      	ldr	r3, [pc, #132]	; (80180ec <prvAddCurrentTaskToDelayedList+0x90>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801806c:	4b20      	ldr	r3, [pc, #128]	; (80180f0 <prvAddCurrentTaskToDelayedList+0x94>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	3304      	adds	r3, #4
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe fb5a 	bl	801672c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801807e:	d10a      	bne.n	8018096 <prvAddCurrentTaskToDelayedList+0x3a>
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d007      	beq.n	8018096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018086:	4b1a      	ldr	r3, [pc, #104]	; (80180f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	3304      	adds	r3, #4
 801808c:	4619      	mov	r1, r3
 801808e:	4819      	ldr	r0, [pc, #100]	; (80180f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8018090:	f7fe faef 	bl	8016672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018094:	e026      	b.n	80180e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018096:	68fa      	ldr	r2, [r7, #12]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	4413      	add	r3, r2
 801809c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801809e:	4b14      	ldr	r3, [pc, #80]	; (80180f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80180a6:	68ba      	ldr	r2, [r7, #8]
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d209      	bcs.n	80180c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80180ae:	4b12      	ldr	r3, [pc, #72]	; (80180f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	4b0f      	ldr	r3, [pc, #60]	; (80180f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	3304      	adds	r3, #4
 80180b8:	4619      	mov	r1, r3
 80180ba:	4610      	mov	r0, r2
 80180bc:	f7fe fafd 	bl	80166ba <vListInsert>
}
 80180c0:	e010      	b.n	80180e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80180c2:	4b0e      	ldr	r3, [pc, #56]	; (80180fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80180c4:	681a      	ldr	r2, [r3, #0]
 80180c6:	4b0a      	ldr	r3, [pc, #40]	; (80180f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	3304      	adds	r3, #4
 80180cc:	4619      	mov	r1, r3
 80180ce:	4610      	mov	r0, r2
 80180d0:	f7fe faf3 	bl	80166ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80180d4:	4b0a      	ldr	r3, [pc, #40]	; (8018100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	68ba      	ldr	r2, [r7, #8]
 80180da:	429a      	cmp	r2, r3
 80180dc:	d202      	bcs.n	80180e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80180de:	4a08      	ldr	r2, [pc, #32]	; (8018100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	6013      	str	r3, [r2, #0]
}
 80180e4:	bf00      	nop
 80180e6:	3710      	adds	r7, #16
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	20002150 	.word	0x20002150
 80180f0:	20001c78 	.word	0x20001c78
 80180f4:	20002138 	.word	0x20002138
 80180f8:	20002108 	.word	0x20002108
 80180fc:	20002104 	.word	0x20002104
 8018100:	2000216c 	.word	0x2000216c

08018104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b08a      	sub	sp, #40	; 0x28
 8018108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801810a:	2300      	movs	r3, #0
 801810c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801810e:	f000 fb07 	bl	8018720 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018112:	4b1c      	ldr	r3, [pc, #112]	; (8018184 <xTimerCreateTimerTask+0x80>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d021      	beq.n	801815e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801811a:	2300      	movs	r3, #0
 801811c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801811e:	2300      	movs	r3, #0
 8018120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018122:	1d3a      	adds	r2, r7, #4
 8018124:	f107 0108 	add.w	r1, r7, #8
 8018128:	f107 030c 	add.w	r3, r7, #12
 801812c:	4618      	mov	r0, r3
 801812e:	f7fe fa59 	bl	80165e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018132:	6879      	ldr	r1, [r7, #4]
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	68fa      	ldr	r2, [r7, #12]
 8018138:	9202      	str	r2, [sp, #8]
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	2302      	movs	r3, #2
 801813e:	9300      	str	r3, [sp, #0]
 8018140:	2300      	movs	r3, #0
 8018142:	460a      	mov	r2, r1
 8018144:	4910      	ldr	r1, [pc, #64]	; (8018188 <xTimerCreateTimerTask+0x84>)
 8018146:	4811      	ldr	r0, [pc, #68]	; (801818c <xTimerCreateTimerTask+0x88>)
 8018148:	f7ff f806 	bl	8017158 <xTaskCreateStatic>
 801814c:	4603      	mov	r3, r0
 801814e:	4a10      	ldr	r2, [pc, #64]	; (8018190 <xTimerCreateTimerTask+0x8c>)
 8018150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018152:	4b0f      	ldr	r3, [pc, #60]	; (8018190 <xTimerCreateTimerTask+0x8c>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d001      	beq.n	801815e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801815a:	2301      	movs	r3, #1
 801815c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d10a      	bne.n	801817a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018168:	f383 8811 	msr	BASEPRI, r3
 801816c:	f3bf 8f6f 	isb	sy
 8018170:	f3bf 8f4f 	dsb	sy
 8018174:	613b      	str	r3, [r7, #16]
}
 8018176:	bf00      	nop
 8018178:	e7fe      	b.n	8018178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801817a:	697b      	ldr	r3, [r7, #20]
}
 801817c:	4618      	mov	r0, r3
 801817e:	3718      	adds	r7, #24
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	200021a8 	.word	0x200021a8
 8018188:	0801f4a4 	.word	0x0801f4a4
 801818c:	080182c9 	.word	0x080182c9
 8018190:	200021ac 	.word	0x200021ac

08018194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b08a      	sub	sp, #40	; 0x28
 8018198:	af00      	add	r7, sp, #0
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	60b9      	str	r1, [r7, #8]
 801819e:	607a      	str	r2, [r7, #4]
 80181a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80181a2:	2300      	movs	r3, #0
 80181a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d10a      	bne.n	80181c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80181ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b0:	f383 8811 	msr	BASEPRI, r3
 80181b4:	f3bf 8f6f 	isb	sy
 80181b8:	f3bf 8f4f 	dsb	sy
 80181bc:	623b      	str	r3, [r7, #32]
}
 80181be:	bf00      	nop
 80181c0:	e7fe      	b.n	80181c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80181c2:	4b1a      	ldr	r3, [pc, #104]	; (801822c <xTimerGenericCommand+0x98>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d02a      	beq.n	8018220 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	2b05      	cmp	r3, #5
 80181da:	dc18      	bgt.n	801820e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80181dc:	f7ff feb2 	bl	8017f44 <xTaskGetSchedulerState>
 80181e0:	4603      	mov	r3, r0
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d109      	bne.n	80181fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80181e6:	4b11      	ldr	r3, [pc, #68]	; (801822c <xTimerGenericCommand+0x98>)
 80181e8:	6818      	ldr	r0, [r3, #0]
 80181ea:	f107 0110 	add.w	r1, r7, #16
 80181ee:	2300      	movs	r3, #0
 80181f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181f2:	f7fe fbc9 	bl	8016988 <xQueueGenericSend>
 80181f6:	6278      	str	r0, [r7, #36]	; 0x24
 80181f8:	e012      	b.n	8018220 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80181fa:	4b0c      	ldr	r3, [pc, #48]	; (801822c <xTimerGenericCommand+0x98>)
 80181fc:	6818      	ldr	r0, [r3, #0]
 80181fe:	f107 0110 	add.w	r1, r7, #16
 8018202:	2300      	movs	r3, #0
 8018204:	2200      	movs	r2, #0
 8018206:	f7fe fbbf 	bl	8016988 <xQueueGenericSend>
 801820a:	6278      	str	r0, [r7, #36]	; 0x24
 801820c:	e008      	b.n	8018220 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801820e:	4b07      	ldr	r3, [pc, #28]	; (801822c <xTimerGenericCommand+0x98>)
 8018210:	6818      	ldr	r0, [r3, #0]
 8018212:	f107 0110 	add.w	r1, r7, #16
 8018216:	2300      	movs	r3, #0
 8018218:	683a      	ldr	r2, [r7, #0]
 801821a:	f7fe fcb3 	bl	8016b84 <xQueueGenericSendFromISR>
 801821e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018222:	4618      	mov	r0, r3
 8018224:	3728      	adds	r7, #40	; 0x28
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	200021a8 	.word	0x200021a8

08018230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b088      	sub	sp, #32
 8018234:	af02      	add	r7, sp, #8
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801823a:	4b22      	ldr	r3, [pc, #136]	; (80182c4 <prvProcessExpiredTimer+0x94>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	68db      	ldr	r3, [r3, #12]
 8018242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	3304      	adds	r3, #4
 8018248:	4618      	mov	r0, r3
 801824a:	f7fe fa6f 	bl	801672c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018254:	f003 0304 	and.w	r3, r3, #4
 8018258:	2b00      	cmp	r3, #0
 801825a:	d022      	beq.n	80182a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	699a      	ldr	r2, [r3, #24]
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	18d1      	adds	r1, r2, r3
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	683a      	ldr	r2, [r7, #0]
 8018268:	6978      	ldr	r0, [r7, #20]
 801826a:	f000 f8d1 	bl	8018410 <prvInsertTimerInActiveList>
 801826e:	4603      	mov	r3, r0
 8018270:	2b00      	cmp	r3, #0
 8018272:	d01f      	beq.n	80182b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018274:	2300      	movs	r3, #0
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	2300      	movs	r3, #0
 801827a:	687a      	ldr	r2, [r7, #4]
 801827c:	2100      	movs	r1, #0
 801827e:	6978      	ldr	r0, [r7, #20]
 8018280:	f7ff ff88 	bl	8018194 <xTimerGenericCommand>
 8018284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d113      	bne.n	80182b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018290:	f383 8811 	msr	BASEPRI, r3
 8018294:	f3bf 8f6f 	isb	sy
 8018298:	f3bf 8f4f 	dsb	sy
 801829c:	60fb      	str	r3, [r7, #12]
}
 801829e:	bf00      	nop
 80182a0:	e7fe      	b.n	80182a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80182a8:	f023 0301 	bic.w	r3, r3, #1
 80182ac:	b2da      	uxtb	r2, r3
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	6a1b      	ldr	r3, [r3, #32]
 80182b8:	6978      	ldr	r0, [r7, #20]
 80182ba:	4798      	blx	r3
}
 80182bc:	bf00      	nop
 80182be:	3718      	adds	r7, #24
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bd80      	pop	{r7, pc}
 80182c4:	200021a0 	.word	0x200021a0

080182c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80182d0:	f107 0308 	add.w	r3, r7, #8
 80182d4:	4618      	mov	r0, r3
 80182d6:	f000 f857 	bl	8018388 <prvGetNextExpireTime>
 80182da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	4619      	mov	r1, r3
 80182e0:	68f8      	ldr	r0, [r7, #12]
 80182e2:	f000 f803 	bl	80182ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80182e6:	f000 f8d5 	bl	8018494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80182ea:	e7f1      	b.n	80182d0 <prvTimerTask+0x8>

080182ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
 80182f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80182f6:	f7ff fa43 	bl	8017780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80182fa:	f107 0308 	add.w	r3, r7, #8
 80182fe:	4618      	mov	r0, r3
 8018300:	f000 f866 	bl	80183d0 <prvSampleTimeNow>
 8018304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d130      	bne.n	801836e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d10a      	bne.n	8018328 <prvProcessTimerOrBlockTask+0x3c>
 8018312:	687a      	ldr	r2, [r7, #4]
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	429a      	cmp	r2, r3
 8018318:	d806      	bhi.n	8018328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801831a:	f7ff fa3f 	bl	801779c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801831e:	68f9      	ldr	r1, [r7, #12]
 8018320:	6878      	ldr	r0, [r7, #4]
 8018322:	f7ff ff85 	bl	8018230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018326:	e024      	b.n	8018372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018328:	683b      	ldr	r3, [r7, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d008      	beq.n	8018340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801832e:	4b13      	ldr	r3, [pc, #76]	; (801837c <prvProcessTimerOrBlockTask+0x90>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d101      	bne.n	801833c <prvProcessTimerOrBlockTask+0x50>
 8018338:	2301      	movs	r3, #1
 801833a:	e000      	b.n	801833e <prvProcessTimerOrBlockTask+0x52>
 801833c:	2300      	movs	r3, #0
 801833e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018340:	4b0f      	ldr	r3, [pc, #60]	; (8018380 <prvProcessTimerOrBlockTask+0x94>)
 8018342:	6818      	ldr	r0, [r3, #0]
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	1ad3      	subs	r3, r2, r3
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	4619      	mov	r1, r3
 801834e:	f7fe fecf 	bl	80170f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018352:	f7ff fa23 	bl	801779c <xTaskResumeAll>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	d10a      	bne.n	8018372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801835c:	4b09      	ldr	r3, [pc, #36]	; (8018384 <prvProcessTimerOrBlockTask+0x98>)
 801835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018362:	601a      	str	r2, [r3, #0]
 8018364:	f3bf 8f4f 	dsb	sy
 8018368:	f3bf 8f6f 	isb	sy
}
 801836c:	e001      	b.n	8018372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801836e:	f7ff fa15 	bl	801779c <xTaskResumeAll>
}
 8018372:	bf00      	nop
 8018374:	3710      	adds	r7, #16
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	200021a4 	.word	0x200021a4
 8018380:	200021a8 	.word	0x200021a8
 8018384:	e000ed04 	.word	0xe000ed04

08018388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018388:	b480      	push	{r7}
 801838a:	b085      	sub	sp, #20
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018390:	4b0e      	ldr	r3, [pc, #56]	; (80183cc <prvGetNextExpireTime+0x44>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d101      	bne.n	801839e <prvGetNextExpireTime+0x16>
 801839a:	2201      	movs	r2, #1
 801839c:	e000      	b.n	80183a0 <prvGetNextExpireTime+0x18>
 801839e:	2200      	movs	r2, #0
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d105      	bne.n	80183b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80183ac:	4b07      	ldr	r3, [pc, #28]	; (80183cc <prvGetNextExpireTime+0x44>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	68db      	ldr	r3, [r3, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	60fb      	str	r3, [r7, #12]
 80183b6:	e001      	b.n	80183bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80183b8:	2300      	movs	r3, #0
 80183ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80183bc:	68fb      	ldr	r3, [r7, #12]
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3714      	adds	r7, #20
 80183c2:	46bd      	mov	sp, r7
 80183c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	200021a0 	.word	0x200021a0

080183d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b084      	sub	sp, #16
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80183d8:	f7ff fa7e 	bl	80178d8 <xTaskGetTickCount>
 80183dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80183de:	4b0b      	ldr	r3, [pc, #44]	; (801840c <prvSampleTimeNow+0x3c>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	68fa      	ldr	r2, [r7, #12]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d205      	bcs.n	80183f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80183e8:	f000 f936 	bl	8018658 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2201      	movs	r2, #1
 80183f0:	601a      	str	r2, [r3, #0]
 80183f2:	e002      	b.n	80183fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2200      	movs	r2, #0
 80183f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80183fa:	4a04      	ldr	r2, [pc, #16]	; (801840c <prvSampleTimeNow+0x3c>)
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018400:	68fb      	ldr	r3, [r7, #12]
}
 8018402:	4618      	mov	r0, r3
 8018404:	3710      	adds	r7, #16
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}
 801840a:	bf00      	nop
 801840c:	200021b0 	.word	0x200021b0

08018410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b086      	sub	sp, #24
 8018414:	af00      	add	r7, sp, #0
 8018416:	60f8      	str	r0, [r7, #12]
 8018418:	60b9      	str	r1, [r7, #8]
 801841a:	607a      	str	r2, [r7, #4]
 801841c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801841e:	2300      	movs	r3, #0
 8018420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	68ba      	ldr	r2, [r7, #8]
 8018426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	68fa      	ldr	r2, [r7, #12]
 801842c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801842e:	68ba      	ldr	r2, [r7, #8]
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	429a      	cmp	r2, r3
 8018434:	d812      	bhi.n	801845c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018436:	687a      	ldr	r2, [r7, #4]
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	1ad2      	subs	r2, r2, r3
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	699b      	ldr	r3, [r3, #24]
 8018440:	429a      	cmp	r2, r3
 8018442:	d302      	bcc.n	801844a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018444:	2301      	movs	r3, #1
 8018446:	617b      	str	r3, [r7, #20]
 8018448:	e01b      	b.n	8018482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801844a:	4b10      	ldr	r3, [pc, #64]	; (801848c <prvInsertTimerInActiveList+0x7c>)
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	3304      	adds	r3, #4
 8018452:	4619      	mov	r1, r3
 8018454:	4610      	mov	r0, r2
 8018456:	f7fe f930 	bl	80166ba <vListInsert>
 801845a:	e012      	b.n	8018482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	429a      	cmp	r2, r3
 8018462:	d206      	bcs.n	8018472 <prvInsertTimerInActiveList+0x62>
 8018464:	68ba      	ldr	r2, [r7, #8]
 8018466:	683b      	ldr	r3, [r7, #0]
 8018468:	429a      	cmp	r2, r3
 801846a:	d302      	bcc.n	8018472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801846c:	2301      	movs	r3, #1
 801846e:	617b      	str	r3, [r7, #20]
 8018470:	e007      	b.n	8018482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018472:	4b07      	ldr	r3, [pc, #28]	; (8018490 <prvInsertTimerInActiveList+0x80>)
 8018474:	681a      	ldr	r2, [r3, #0]
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	3304      	adds	r3, #4
 801847a:	4619      	mov	r1, r3
 801847c:	4610      	mov	r0, r2
 801847e:	f7fe f91c 	bl	80166ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018482:	697b      	ldr	r3, [r7, #20]
}
 8018484:	4618      	mov	r0, r3
 8018486:	3718      	adds	r7, #24
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	200021a4 	.word	0x200021a4
 8018490:	200021a0 	.word	0x200021a0

08018494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b08e      	sub	sp, #56	; 0x38
 8018498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801849a:	e0ca      	b.n	8018632 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	da18      	bge.n	80184d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80184a2:	1d3b      	adds	r3, r7, #4
 80184a4:	3304      	adds	r3, #4
 80184a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80184a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d10a      	bne.n	80184c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80184ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b2:	f383 8811 	msr	BASEPRI, r3
 80184b6:	f3bf 8f6f 	isb	sy
 80184ba:	f3bf 8f4f 	dsb	sy
 80184be:	61fb      	str	r3, [r7, #28]
}
 80184c0:	bf00      	nop
 80184c2:	e7fe      	b.n	80184c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80184c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184ca:	6850      	ldr	r0, [r2, #4]
 80184cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184ce:	6892      	ldr	r2, [r2, #8]
 80184d0:	4611      	mov	r1, r2
 80184d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f2c0 80aa 	blt.w	8018630 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80184e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e2:	695b      	ldr	r3, [r3, #20]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d004      	beq.n	80184f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80184e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ea:	3304      	adds	r3, #4
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7fe f91d 	bl	801672c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80184f2:	463b      	mov	r3, r7
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7ff ff6b 	bl	80183d0 <prvSampleTimeNow>
 80184fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2b09      	cmp	r3, #9
 8018500:	f200 8097 	bhi.w	8018632 <prvProcessReceivedCommands+0x19e>
 8018504:	a201      	add	r2, pc, #4	; (adr r2, 801850c <prvProcessReceivedCommands+0x78>)
 8018506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801850a:	bf00      	nop
 801850c:	08018535 	.word	0x08018535
 8018510:	08018535 	.word	0x08018535
 8018514:	08018535 	.word	0x08018535
 8018518:	080185a9 	.word	0x080185a9
 801851c:	080185bd 	.word	0x080185bd
 8018520:	08018607 	.word	0x08018607
 8018524:	08018535 	.word	0x08018535
 8018528:	08018535 	.word	0x08018535
 801852c:	080185a9 	.word	0x080185a9
 8018530:	080185bd 	.word	0x080185bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801853a:	f043 0301 	orr.w	r3, r3, #1
 801853e:	b2da      	uxtb	r2, r3
 8018540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018546:	68ba      	ldr	r2, [r7, #8]
 8018548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854a:	699b      	ldr	r3, [r3, #24]
 801854c:	18d1      	adds	r1, r2, r3
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018554:	f7ff ff5c 	bl	8018410 <prvInsertTimerInActiveList>
 8018558:	4603      	mov	r3, r0
 801855a:	2b00      	cmp	r3, #0
 801855c:	d069      	beq.n	8018632 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018560:	6a1b      	ldr	r3, [r3, #32]
 8018562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018564:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801856c:	f003 0304 	and.w	r3, r3, #4
 8018570:	2b00      	cmp	r3, #0
 8018572:	d05e      	beq.n	8018632 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018574:	68ba      	ldr	r2, [r7, #8]
 8018576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018578:	699b      	ldr	r3, [r3, #24]
 801857a:	441a      	add	r2, r3
 801857c:	2300      	movs	r3, #0
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	2300      	movs	r3, #0
 8018582:	2100      	movs	r1, #0
 8018584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018586:	f7ff fe05 	bl	8018194 <xTimerGenericCommand>
 801858a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801858c:	6a3b      	ldr	r3, [r7, #32]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d14f      	bne.n	8018632 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018596:	f383 8811 	msr	BASEPRI, r3
 801859a:	f3bf 8f6f 	isb	sy
 801859e:	f3bf 8f4f 	dsb	sy
 80185a2:	61bb      	str	r3, [r7, #24]
}
 80185a4:	bf00      	nop
 80185a6:	e7fe      	b.n	80185a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80185a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185ae:	f023 0301 	bic.w	r3, r3, #1
 80185b2:	b2da      	uxtb	r2, r3
 80185b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80185ba:	e03a      	b.n	8018632 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80185bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80185c2:	f043 0301 	orr.w	r3, r3, #1
 80185c6:	b2da      	uxtb	r2, r3
 80185c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80185ce:	68ba      	ldr	r2, [r7, #8]
 80185d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80185d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d6:	699b      	ldr	r3, [r3, #24]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d10a      	bne.n	80185f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80185dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185e0:	f383 8811 	msr	BASEPRI, r3
 80185e4:	f3bf 8f6f 	isb	sy
 80185e8:	f3bf 8f4f 	dsb	sy
 80185ec:	617b      	str	r3, [r7, #20]
}
 80185ee:	bf00      	nop
 80185f0:	e7fe      	b.n	80185f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80185f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f4:	699a      	ldr	r2, [r3, #24]
 80185f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f8:	18d1      	adds	r1, r2, r3
 80185fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018600:	f7ff ff06 	bl	8018410 <prvInsertTimerInActiveList>
					break;
 8018604:	e015      	b.n	8018632 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801860c:	f003 0302 	and.w	r3, r3, #2
 8018610:	2b00      	cmp	r3, #0
 8018612:	d103      	bne.n	801861c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018616:	f000 fbdb 	bl	8018dd0 <vPortFree>
 801861a:	e00a      	b.n	8018632 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018622:	f023 0301 	bic.w	r3, r3, #1
 8018626:	b2da      	uxtb	r2, r3
 8018628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801862a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801862e:	e000      	b.n	8018632 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018630:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018632:	4b08      	ldr	r3, [pc, #32]	; (8018654 <prvProcessReceivedCommands+0x1c0>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	1d39      	adds	r1, r7, #4
 8018638:	2200      	movs	r2, #0
 801863a:	4618      	mov	r0, r3
 801863c:	f7fe fb3e 	bl	8016cbc <xQueueReceive>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	f47f af2a 	bne.w	801849c <prvProcessReceivedCommands+0x8>
	}
}
 8018648:	bf00      	nop
 801864a:	bf00      	nop
 801864c:	3730      	adds	r7, #48	; 0x30
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	200021a8 	.word	0x200021a8

08018658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801865e:	e048      	b.n	80186f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018660:	4b2d      	ldr	r3, [pc, #180]	; (8018718 <prvSwitchTimerLists+0xc0>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	68db      	ldr	r3, [r3, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801866a:	4b2b      	ldr	r3, [pc, #172]	; (8018718 <prvSwitchTimerLists+0xc0>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	68db      	ldr	r3, [r3, #12]
 8018672:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	3304      	adds	r3, #4
 8018678:	4618      	mov	r0, r3
 801867a:	f7fe f857 	bl	801672c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	6a1b      	ldr	r3, [r3, #32]
 8018682:	68f8      	ldr	r0, [r7, #12]
 8018684:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801868c:	f003 0304 	and.w	r3, r3, #4
 8018690:	2b00      	cmp	r3, #0
 8018692:	d02e      	beq.n	80186f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	699b      	ldr	r3, [r3, #24]
 8018698:	693a      	ldr	r2, [r7, #16]
 801869a:	4413      	add	r3, r2
 801869c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801869e:	68ba      	ldr	r2, [r7, #8]
 80186a0:	693b      	ldr	r3, [r7, #16]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d90e      	bls.n	80186c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	68fa      	ldr	r2, [r7, #12]
 80186b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80186b2:	4b19      	ldr	r3, [pc, #100]	; (8018718 <prvSwitchTimerLists+0xc0>)
 80186b4:	681a      	ldr	r2, [r3, #0]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	3304      	adds	r3, #4
 80186ba:	4619      	mov	r1, r3
 80186bc:	4610      	mov	r0, r2
 80186be:	f7fd fffc 	bl	80166ba <vListInsert>
 80186c2:	e016      	b.n	80186f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80186c4:	2300      	movs	r3, #0
 80186c6:	9300      	str	r3, [sp, #0]
 80186c8:	2300      	movs	r3, #0
 80186ca:	693a      	ldr	r2, [r7, #16]
 80186cc:	2100      	movs	r1, #0
 80186ce:	68f8      	ldr	r0, [r7, #12]
 80186d0:	f7ff fd60 	bl	8018194 <xTimerGenericCommand>
 80186d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d10a      	bne.n	80186f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80186dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e0:	f383 8811 	msr	BASEPRI, r3
 80186e4:	f3bf 8f6f 	isb	sy
 80186e8:	f3bf 8f4f 	dsb	sy
 80186ec:	603b      	str	r3, [r7, #0]
}
 80186ee:	bf00      	nop
 80186f0:	e7fe      	b.n	80186f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80186f2:	4b09      	ldr	r3, [pc, #36]	; (8018718 <prvSwitchTimerLists+0xc0>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d1b1      	bne.n	8018660 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80186fc:	4b06      	ldr	r3, [pc, #24]	; (8018718 <prvSwitchTimerLists+0xc0>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018702:	4b06      	ldr	r3, [pc, #24]	; (801871c <prvSwitchTimerLists+0xc4>)
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	4a04      	ldr	r2, [pc, #16]	; (8018718 <prvSwitchTimerLists+0xc0>)
 8018708:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801870a:	4a04      	ldr	r2, [pc, #16]	; (801871c <prvSwitchTimerLists+0xc4>)
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	6013      	str	r3, [r2, #0]
}
 8018710:	bf00      	nop
 8018712:	3718      	adds	r7, #24
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}
 8018718:	200021a0 	.word	0x200021a0
 801871c:	200021a4 	.word	0x200021a4

08018720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018726:	f000 f965 	bl	80189f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801872a:	4b15      	ldr	r3, [pc, #84]	; (8018780 <prvCheckForValidListAndQueue+0x60>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d120      	bne.n	8018774 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018732:	4814      	ldr	r0, [pc, #80]	; (8018784 <prvCheckForValidListAndQueue+0x64>)
 8018734:	f7fd ff70 	bl	8016618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018738:	4813      	ldr	r0, [pc, #76]	; (8018788 <prvCheckForValidListAndQueue+0x68>)
 801873a:	f7fd ff6d 	bl	8016618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801873e:	4b13      	ldr	r3, [pc, #76]	; (801878c <prvCheckForValidListAndQueue+0x6c>)
 8018740:	4a10      	ldr	r2, [pc, #64]	; (8018784 <prvCheckForValidListAndQueue+0x64>)
 8018742:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018744:	4b12      	ldr	r3, [pc, #72]	; (8018790 <prvCheckForValidListAndQueue+0x70>)
 8018746:	4a10      	ldr	r2, [pc, #64]	; (8018788 <prvCheckForValidListAndQueue+0x68>)
 8018748:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801874a:	2300      	movs	r3, #0
 801874c:	9300      	str	r3, [sp, #0]
 801874e:	4b11      	ldr	r3, [pc, #68]	; (8018794 <prvCheckForValidListAndQueue+0x74>)
 8018750:	4a11      	ldr	r2, [pc, #68]	; (8018798 <prvCheckForValidListAndQueue+0x78>)
 8018752:	2110      	movs	r1, #16
 8018754:	200a      	movs	r0, #10
 8018756:	f7fe f87b 	bl	8016850 <xQueueGenericCreateStatic>
 801875a:	4603      	mov	r3, r0
 801875c:	4a08      	ldr	r2, [pc, #32]	; (8018780 <prvCheckForValidListAndQueue+0x60>)
 801875e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018760:	4b07      	ldr	r3, [pc, #28]	; (8018780 <prvCheckForValidListAndQueue+0x60>)
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d005      	beq.n	8018774 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018768:	4b05      	ldr	r3, [pc, #20]	; (8018780 <prvCheckForValidListAndQueue+0x60>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	490b      	ldr	r1, [pc, #44]	; (801879c <prvCheckForValidListAndQueue+0x7c>)
 801876e:	4618      	mov	r0, r3
 8018770:	f7fe fc94 	bl	801709c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018774:	f000 f96e 	bl	8018a54 <vPortExitCritical>
}
 8018778:	bf00      	nop
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	200021a8 	.word	0x200021a8
 8018784:	20002178 	.word	0x20002178
 8018788:	2000218c 	.word	0x2000218c
 801878c:	200021a0 	.word	0x200021a0
 8018790:	200021a4 	.word	0x200021a4
 8018794:	20002254 	.word	0x20002254
 8018798:	200021b4 	.word	0x200021b4
 801879c:	0801f4ac 	.word	0x0801f4ac

080187a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80187a0:	b480      	push	{r7}
 80187a2:	b085      	sub	sp, #20
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	60f8      	str	r0, [r7, #12]
 80187a8:	60b9      	str	r1, [r7, #8]
 80187aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	3b04      	subs	r3, #4
 80187b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80187b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	3b04      	subs	r3, #4
 80187be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	f023 0201 	bic.w	r2, r3, #1
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	3b04      	subs	r3, #4
 80187ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80187d0:	4a0c      	ldr	r2, [pc, #48]	; (8018804 <pxPortInitialiseStack+0x64>)
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	3b14      	subs	r3, #20
 80187da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80187dc:	687a      	ldr	r2, [r7, #4]
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	3b04      	subs	r3, #4
 80187e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	f06f 0202 	mvn.w	r2, #2
 80187ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	3b20      	subs	r3, #32
 80187f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80187f6:	68fb      	ldr	r3, [r7, #12]
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	3714      	adds	r7, #20
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr
 8018804:	08018809 	.word	0x08018809

08018808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018808:	b480      	push	{r7}
 801880a:	b085      	sub	sp, #20
 801880c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801880e:	2300      	movs	r3, #0
 8018810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018812:	4b12      	ldr	r3, [pc, #72]	; (801885c <prvTaskExitError+0x54>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801881a:	d00a      	beq.n	8018832 <prvTaskExitError+0x2a>
	__asm volatile
 801881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018820:	f383 8811 	msr	BASEPRI, r3
 8018824:	f3bf 8f6f 	isb	sy
 8018828:	f3bf 8f4f 	dsb	sy
 801882c:	60fb      	str	r3, [r7, #12]
}
 801882e:	bf00      	nop
 8018830:	e7fe      	b.n	8018830 <prvTaskExitError+0x28>
	__asm volatile
 8018832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018836:	f383 8811 	msr	BASEPRI, r3
 801883a:	f3bf 8f6f 	isb	sy
 801883e:	f3bf 8f4f 	dsb	sy
 8018842:	60bb      	str	r3, [r7, #8]
}
 8018844:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018846:	bf00      	nop
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d0fc      	beq.n	8018848 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801884e:	bf00      	nop
 8018850:	bf00      	nop
 8018852:	3714      	adds	r7, #20
 8018854:	46bd      	mov	sp, r7
 8018856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885a:	4770      	bx	lr
 801885c:	20000044 	.word	0x20000044

08018860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018860:	4b07      	ldr	r3, [pc, #28]	; (8018880 <pxCurrentTCBConst2>)
 8018862:	6819      	ldr	r1, [r3, #0]
 8018864:	6808      	ldr	r0, [r1, #0]
 8018866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886a:	f380 8809 	msr	PSP, r0
 801886e:	f3bf 8f6f 	isb	sy
 8018872:	f04f 0000 	mov.w	r0, #0
 8018876:	f380 8811 	msr	BASEPRI, r0
 801887a:	4770      	bx	lr
 801887c:	f3af 8000 	nop.w

08018880 <pxCurrentTCBConst2>:
 8018880:	20001c78 	.word	0x20001c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018884:	bf00      	nop
 8018886:	bf00      	nop

08018888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018888:	4808      	ldr	r0, [pc, #32]	; (80188ac <prvPortStartFirstTask+0x24>)
 801888a:	6800      	ldr	r0, [r0, #0]
 801888c:	6800      	ldr	r0, [r0, #0]
 801888e:	f380 8808 	msr	MSP, r0
 8018892:	f04f 0000 	mov.w	r0, #0
 8018896:	f380 8814 	msr	CONTROL, r0
 801889a:	b662      	cpsie	i
 801889c:	b661      	cpsie	f
 801889e:	f3bf 8f4f 	dsb	sy
 80188a2:	f3bf 8f6f 	isb	sy
 80188a6:	df00      	svc	0
 80188a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80188aa:	bf00      	nop
 80188ac:	e000ed08 	.word	0xe000ed08

080188b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b086      	sub	sp, #24
 80188b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80188b6:	4b46      	ldr	r3, [pc, #280]	; (80189d0 <xPortStartScheduler+0x120>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	4a46      	ldr	r2, [pc, #280]	; (80189d4 <xPortStartScheduler+0x124>)
 80188bc:	4293      	cmp	r3, r2
 80188be:	d10a      	bne.n	80188d6 <xPortStartScheduler+0x26>
	__asm volatile
 80188c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188c4:	f383 8811 	msr	BASEPRI, r3
 80188c8:	f3bf 8f6f 	isb	sy
 80188cc:	f3bf 8f4f 	dsb	sy
 80188d0:	613b      	str	r3, [r7, #16]
}
 80188d2:	bf00      	nop
 80188d4:	e7fe      	b.n	80188d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80188d6:	4b3e      	ldr	r3, [pc, #248]	; (80189d0 <xPortStartScheduler+0x120>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4a3f      	ldr	r2, [pc, #252]	; (80189d8 <xPortStartScheduler+0x128>)
 80188dc:	4293      	cmp	r3, r2
 80188de:	d10a      	bne.n	80188f6 <xPortStartScheduler+0x46>
	__asm volatile
 80188e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188e4:	f383 8811 	msr	BASEPRI, r3
 80188e8:	f3bf 8f6f 	isb	sy
 80188ec:	f3bf 8f4f 	dsb	sy
 80188f0:	60fb      	str	r3, [r7, #12]
}
 80188f2:	bf00      	nop
 80188f4:	e7fe      	b.n	80188f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80188f6:	4b39      	ldr	r3, [pc, #228]	; (80189dc <xPortStartScheduler+0x12c>)
 80188f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	b2db      	uxtb	r3, r3
 8018900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	22ff      	movs	r2, #255	; 0xff
 8018906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	b2db      	uxtb	r3, r3
 801890e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018910:	78fb      	ldrb	r3, [r7, #3]
 8018912:	b2db      	uxtb	r3, r3
 8018914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018918:	b2da      	uxtb	r2, r3
 801891a:	4b31      	ldr	r3, [pc, #196]	; (80189e0 <xPortStartScheduler+0x130>)
 801891c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801891e:	4b31      	ldr	r3, [pc, #196]	; (80189e4 <xPortStartScheduler+0x134>)
 8018920:	2207      	movs	r2, #7
 8018922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018924:	e009      	b.n	801893a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018926:	4b2f      	ldr	r3, [pc, #188]	; (80189e4 <xPortStartScheduler+0x134>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	3b01      	subs	r3, #1
 801892c:	4a2d      	ldr	r2, [pc, #180]	; (80189e4 <xPortStartScheduler+0x134>)
 801892e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018930:	78fb      	ldrb	r3, [r7, #3]
 8018932:	b2db      	uxtb	r3, r3
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	b2db      	uxtb	r3, r3
 8018938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801893a:	78fb      	ldrb	r3, [r7, #3]
 801893c:	b2db      	uxtb	r3, r3
 801893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018942:	2b80      	cmp	r3, #128	; 0x80
 8018944:	d0ef      	beq.n	8018926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018946:	4b27      	ldr	r3, [pc, #156]	; (80189e4 <xPortStartScheduler+0x134>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f1c3 0307 	rsb	r3, r3, #7
 801894e:	2b04      	cmp	r3, #4
 8018950:	d00a      	beq.n	8018968 <xPortStartScheduler+0xb8>
	__asm volatile
 8018952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018956:	f383 8811 	msr	BASEPRI, r3
 801895a:	f3bf 8f6f 	isb	sy
 801895e:	f3bf 8f4f 	dsb	sy
 8018962:	60bb      	str	r3, [r7, #8]
}
 8018964:	bf00      	nop
 8018966:	e7fe      	b.n	8018966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018968:	4b1e      	ldr	r3, [pc, #120]	; (80189e4 <xPortStartScheduler+0x134>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	021b      	lsls	r3, r3, #8
 801896e:	4a1d      	ldr	r2, [pc, #116]	; (80189e4 <xPortStartScheduler+0x134>)
 8018970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018972:	4b1c      	ldr	r3, [pc, #112]	; (80189e4 <xPortStartScheduler+0x134>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801897a:	4a1a      	ldr	r2, [pc, #104]	; (80189e4 <xPortStartScheduler+0x134>)
 801897c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	b2da      	uxtb	r2, r3
 8018982:	697b      	ldr	r3, [r7, #20]
 8018984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018986:	4b18      	ldr	r3, [pc, #96]	; (80189e8 <xPortStartScheduler+0x138>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	4a17      	ldr	r2, [pc, #92]	; (80189e8 <xPortStartScheduler+0x138>)
 801898c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018992:	4b15      	ldr	r3, [pc, #84]	; (80189e8 <xPortStartScheduler+0x138>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	4a14      	ldr	r2, [pc, #80]	; (80189e8 <xPortStartScheduler+0x138>)
 8018998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801899c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801899e:	f000 f8dd 	bl	8018b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80189a2:	4b12      	ldr	r3, [pc, #72]	; (80189ec <xPortStartScheduler+0x13c>)
 80189a4:	2200      	movs	r2, #0
 80189a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80189a8:	f000 f8fc 	bl	8018ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80189ac:	4b10      	ldr	r3, [pc, #64]	; (80189f0 <xPortStartScheduler+0x140>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	4a0f      	ldr	r2, [pc, #60]	; (80189f0 <xPortStartScheduler+0x140>)
 80189b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80189b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80189b8:	f7ff ff66 	bl	8018888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80189bc:	f7ff f856 	bl	8017a6c <vTaskSwitchContext>
	prvTaskExitError();
 80189c0:	f7ff ff22 	bl	8018808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3718      	adds	r7, #24
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}
 80189ce:	bf00      	nop
 80189d0:	e000ed00 	.word	0xe000ed00
 80189d4:	410fc271 	.word	0x410fc271
 80189d8:	410fc270 	.word	0x410fc270
 80189dc:	e000e400 	.word	0xe000e400
 80189e0:	200022a4 	.word	0x200022a4
 80189e4:	200022a8 	.word	0x200022a8
 80189e8:	e000ed20 	.word	0xe000ed20
 80189ec:	20000044 	.word	0x20000044
 80189f0:	e000ef34 	.word	0xe000ef34

080189f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
	__asm volatile
 80189fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189fe:	f383 8811 	msr	BASEPRI, r3
 8018a02:	f3bf 8f6f 	isb	sy
 8018a06:	f3bf 8f4f 	dsb	sy
 8018a0a:	607b      	str	r3, [r7, #4]
}
 8018a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018a0e:	4b0f      	ldr	r3, [pc, #60]	; (8018a4c <vPortEnterCritical+0x58>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	3301      	adds	r3, #1
 8018a14:	4a0d      	ldr	r2, [pc, #52]	; (8018a4c <vPortEnterCritical+0x58>)
 8018a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018a18:	4b0c      	ldr	r3, [pc, #48]	; (8018a4c <vPortEnterCritical+0x58>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	d10f      	bne.n	8018a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018a20:	4b0b      	ldr	r3, [pc, #44]	; (8018a50 <vPortEnterCritical+0x5c>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d00a      	beq.n	8018a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8018a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a2e:	f383 8811 	msr	BASEPRI, r3
 8018a32:	f3bf 8f6f 	isb	sy
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	603b      	str	r3, [r7, #0]
}
 8018a3c:	bf00      	nop
 8018a3e:	e7fe      	b.n	8018a3e <vPortEnterCritical+0x4a>
	}
}
 8018a40:	bf00      	nop
 8018a42:	370c      	adds	r7, #12
 8018a44:	46bd      	mov	sp, r7
 8018a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4a:	4770      	bx	lr
 8018a4c:	20000044 	.word	0x20000044
 8018a50:	e000ed04 	.word	0xe000ed04

08018a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018a54:	b480      	push	{r7}
 8018a56:	b083      	sub	sp, #12
 8018a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018a5a:	4b12      	ldr	r3, [pc, #72]	; (8018aa4 <vPortExitCritical+0x50>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d10a      	bne.n	8018a78 <vPortExitCritical+0x24>
	__asm volatile
 8018a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	607b      	str	r3, [r7, #4]
}
 8018a74:	bf00      	nop
 8018a76:	e7fe      	b.n	8018a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018a78:	4b0a      	ldr	r3, [pc, #40]	; (8018aa4 <vPortExitCritical+0x50>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	4a09      	ldr	r2, [pc, #36]	; (8018aa4 <vPortExitCritical+0x50>)
 8018a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018a82:	4b08      	ldr	r3, [pc, #32]	; (8018aa4 <vPortExitCritical+0x50>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d105      	bne.n	8018a96 <vPortExitCritical+0x42>
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	f383 8811 	msr	BASEPRI, r3
}
 8018a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018a96:	bf00      	nop
 8018a98:	370c      	adds	r7, #12
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa0:	4770      	bx	lr
 8018aa2:	bf00      	nop
 8018aa4:	20000044 	.word	0x20000044
	...

08018ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018ab0:	f3ef 8009 	mrs	r0, PSP
 8018ab4:	f3bf 8f6f 	isb	sy
 8018ab8:	4b15      	ldr	r3, [pc, #84]	; (8018b10 <pxCurrentTCBConst>)
 8018aba:	681a      	ldr	r2, [r3, #0]
 8018abc:	f01e 0f10 	tst.w	lr, #16
 8018ac0:	bf08      	it	eq
 8018ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aca:	6010      	str	r0, [r2, #0]
 8018acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018ad4:	f380 8811 	msr	BASEPRI, r0
 8018ad8:	f3bf 8f4f 	dsb	sy
 8018adc:	f3bf 8f6f 	isb	sy
 8018ae0:	f7fe ffc4 	bl	8017a6c <vTaskSwitchContext>
 8018ae4:	f04f 0000 	mov.w	r0, #0
 8018ae8:	f380 8811 	msr	BASEPRI, r0
 8018aec:	bc09      	pop	{r0, r3}
 8018aee:	6819      	ldr	r1, [r3, #0]
 8018af0:	6808      	ldr	r0, [r1, #0]
 8018af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af6:	f01e 0f10 	tst.w	lr, #16
 8018afa:	bf08      	it	eq
 8018afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018b00:	f380 8809 	msr	PSP, r0
 8018b04:	f3bf 8f6f 	isb	sy
 8018b08:	4770      	bx	lr
 8018b0a:	bf00      	nop
 8018b0c:	f3af 8000 	nop.w

08018b10 <pxCurrentTCBConst>:
 8018b10:	20001c78 	.word	0x20001c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018b14:	bf00      	nop
 8018b16:	bf00      	nop

08018b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8018b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b22:	f383 8811 	msr	BASEPRI, r3
 8018b26:	f3bf 8f6f 	isb	sy
 8018b2a:	f3bf 8f4f 	dsb	sy
 8018b2e:	607b      	str	r3, [r7, #4]
}
 8018b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018b32:	f7fe fee1 	bl	80178f8 <xTaskIncrementTick>
 8018b36:	4603      	mov	r3, r0
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d003      	beq.n	8018b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018b3c:	4b06      	ldr	r3, [pc, #24]	; (8018b58 <xPortSysTickHandler+0x40>)
 8018b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b42:	601a      	str	r2, [r3, #0]
 8018b44:	2300      	movs	r3, #0
 8018b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	f383 8811 	msr	BASEPRI, r3
}
 8018b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018b50:	bf00      	nop
 8018b52:	3708      	adds	r7, #8
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	e000ed04 	.word	0xe000ed04

08018b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018b60:	4b0b      	ldr	r3, [pc, #44]	; (8018b90 <vPortSetupTimerInterrupt+0x34>)
 8018b62:	2200      	movs	r2, #0
 8018b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018b66:	4b0b      	ldr	r3, [pc, #44]	; (8018b94 <vPortSetupTimerInterrupt+0x38>)
 8018b68:	2200      	movs	r2, #0
 8018b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018b6c:	4b0a      	ldr	r3, [pc, #40]	; (8018b98 <vPortSetupTimerInterrupt+0x3c>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	4a0a      	ldr	r2, [pc, #40]	; (8018b9c <vPortSetupTimerInterrupt+0x40>)
 8018b72:	fba2 2303 	umull	r2, r3, r2, r3
 8018b76:	099b      	lsrs	r3, r3, #6
 8018b78:	4a09      	ldr	r2, [pc, #36]	; (8018ba0 <vPortSetupTimerInterrupt+0x44>)
 8018b7a:	3b01      	subs	r3, #1
 8018b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018b7e:	4b04      	ldr	r3, [pc, #16]	; (8018b90 <vPortSetupTimerInterrupt+0x34>)
 8018b80:	2207      	movs	r2, #7
 8018b82:	601a      	str	r2, [r3, #0]
}
 8018b84:	bf00      	nop
 8018b86:	46bd      	mov	sp, r7
 8018b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop
 8018b90:	e000e010 	.word	0xe000e010
 8018b94:	e000e018 	.word	0xe000e018
 8018b98:	20000000 	.word	0x20000000
 8018b9c:	10624dd3 	.word	0x10624dd3
 8018ba0:	e000e014 	.word	0xe000e014

08018ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018bb4 <vPortEnableVFP+0x10>
 8018ba8:	6801      	ldr	r1, [r0, #0]
 8018baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018bae:	6001      	str	r1, [r0, #0]
 8018bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018bb2:	bf00      	nop
 8018bb4:	e000ed88 	.word	0xe000ed88

08018bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018bb8:	b480      	push	{r7}
 8018bba:	b085      	sub	sp, #20
 8018bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018bbe:	f3ef 8305 	mrs	r3, IPSR
 8018bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2b0f      	cmp	r3, #15
 8018bc8:	d914      	bls.n	8018bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018bca:	4a17      	ldr	r2, [pc, #92]	; (8018c28 <vPortValidateInterruptPriority+0x70>)
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	4413      	add	r3, r2
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018bd4:	4b15      	ldr	r3, [pc, #84]	; (8018c2c <vPortValidateInterruptPriority+0x74>)
 8018bd6:	781b      	ldrb	r3, [r3, #0]
 8018bd8:	7afa      	ldrb	r2, [r7, #11]
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d20a      	bcs.n	8018bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be2:	f383 8811 	msr	BASEPRI, r3
 8018be6:	f3bf 8f6f 	isb	sy
 8018bea:	f3bf 8f4f 	dsb	sy
 8018bee:	607b      	str	r3, [r7, #4]
}
 8018bf0:	bf00      	nop
 8018bf2:	e7fe      	b.n	8018bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018bf4:	4b0e      	ldr	r3, [pc, #56]	; (8018c30 <vPortValidateInterruptPriority+0x78>)
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018bfc:	4b0d      	ldr	r3, [pc, #52]	; (8018c34 <vPortValidateInterruptPriority+0x7c>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	429a      	cmp	r2, r3
 8018c02:	d90a      	bls.n	8018c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c08:	f383 8811 	msr	BASEPRI, r3
 8018c0c:	f3bf 8f6f 	isb	sy
 8018c10:	f3bf 8f4f 	dsb	sy
 8018c14:	603b      	str	r3, [r7, #0]
}
 8018c16:	bf00      	nop
 8018c18:	e7fe      	b.n	8018c18 <vPortValidateInterruptPriority+0x60>
	}
 8018c1a:	bf00      	nop
 8018c1c:	3714      	adds	r7, #20
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c24:	4770      	bx	lr
 8018c26:	bf00      	nop
 8018c28:	e000e3f0 	.word	0xe000e3f0
 8018c2c:	200022a4 	.word	0x200022a4
 8018c30:	e000ed0c 	.word	0xe000ed0c
 8018c34:	200022a8 	.word	0x200022a8

08018c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b08a      	sub	sp, #40	; 0x28
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018c40:	2300      	movs	r3, #0
 8018c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018c44:	f7fe fd9c 	bl	8017780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018c48:	4b5b      	ldr	r3, [pc, #364]	; (8018db8 <pvPortMalloc+0x180>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d101      	bne.n	8018c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018c50:	f000 f920 	bl	8018e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018c54:	4b59      	ldr	r3, [pc, #356]	; (8018dbc <pvPortMalloc+0x184>)
 8018c56:	681a      	ldr	r2, [r3, #0]
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	4013      	ands	r3, r2
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f040 8093 	bne.w	8018d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d01d      	beq.n	8018ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018c68:	2208      	movs	r2, #8
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	4413      	add	r3, r2
 8018c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	f003 0307 	and.w	r3, r3, #7
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d014      	beq.n	8018ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f023 0307 	bic.w	r3, r3, #7
 8018c80:	3308      	adds	r3, #8
 8018c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	f003 0307 	and.w	r3, r3, #7
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00a      	beq.n	8018ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8018c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c92:	f383 8811 	msr	BASEPRI, r3
 8018c96:	f3bf 8f6f 	isb	sy
 8018c9a:	f3bf 8f4f 	dsb	sy
 8018c9e:	617b      	str	r3, [r7, #20]
}
 8018ca0:	bf00      	nop
 8018ca2:	e7fe      	b.n	8018ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d06e      	beq.n	8018d88 <pvPortMalloc+0x150>
 8018caa:	4b45      	ldr	r3, [pc, #276]	; (8018dc0 <pvPortMalloc+0x188>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d869      	bhi.n	8018d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018cb4:	4b43      	ldr	r3, [pc, #268]	; (8018dc4 <pvPortMalloc+0x18c>)
 8018cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018cb8:	4b42      	ldr	r3, [pc, #264]	; (8018dc4 <pvPortMalloc+0x18c>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018cbe:	e004      	b.n	8018cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ccc:	685b      	ldr	r3, [r3, #4]
 8018cce:	687a      	ldr	r2, [r7, #4]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d903      	bls.n	8018cdc <pvPortMalloc+0xa4>
 8018cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d1f1      	bne.n	8018cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018cdc:	4b36      	ldr	r3, [pc, #216]	; (8018db8 <pvPortMalloc+0x180>)
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d050      	beq.n	8018d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018ce6:	6a3b      	ldr	r3, [r7, #32]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	2208      	movs	r2, #8
 8018cec:	4413      	add	r3, r2
 8018cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cf2:	681a      	ldr	r2, [r3, #0]
 8018cf4:	6a3b      	ldr	r3, [r7, #32]
 8018cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cfa:	685a      	ldr	r2, [r3, #4]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	1ad2      	subs	r2, r2, r3
 8018d00:	2308      	movs	r3, #8
 8018d02:	005b      	lsls	r3, r3, #1
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d91f      	bls.n	8018d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	4413      	add	r3, r2
 8018d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d10:	69bb      	ldr	r3, [r7, #24]
 8018d12:	f003 0307 	and.w	r3, r3, #7
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d00a      	beq.n	8018d30 <pvPortMalloc+0xf8>
	__asm volatile
 8018d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d1e:	f383 8811 	msr	BASEPRI, r3
 8018d22:	f3bf 8f6f 	isb	sy
 8018d26:	f3bf 8f4f 	dsb	sy
 8018d2a:	613b      	str	r3, [r7, #16]
}
 8018d2c:	bf00      	nop
 8018d2e:	e7fe      	b.n	8018d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d32:	685a      	ldr	r2, [r3, #4]
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	1ad2      	subs	r2, r2, r3
 8018d38:	69bb      	ldr	r3, [r7, #24]
 8018d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d3e:	687a      	ldr	r2, [r7, #4]
 8018d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018d42:	69b8      	ldr	r0, [r7, #24]
 8018d44:	f000 f908 	bl	8018f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018d48:	4b1d      	ldr	r3, [pc, #116]	; (8018dc0 <pvPortMalloc+0x188>)
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4e:	685b      	ldr	r3, [r3, #4]
 8018d50:	1ad3      	subs	r3, r2, r3
 8018d52:	4a1b      	ldr	r2, [pc, #108]	; (8018dc0 <pvPortMalloc+0x188>)
 8018d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018d56:	4b1a      	ldr	r3, [pc, #104]	; (8018dc0 <pvPortMalloc+0x188>)
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	4b1b      	ldr	r3, [pc, #108]	; (8018dc8 <pvPortMalloc+0x190>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	429a      	cmp	r2, r3
 8018d60:	d203      	bcs.n	8018d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018d62:	4b17      	ldr	r3, [pc, #92]	; (8018dc0 <pvPortMalloc+0x188>)
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	4a18      	ldr	r2, [pc, #96]	; (8018dc8 <pvPortMalloc+0x190>)
 8018d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6c:	685a      	ldr	r2, [r3, #4]
 8018d6e:	4b13      	ldr	r3, [pc, #76]	; (8018dbc <pvPortMalloc+0x184>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	431a      	orrs	r2, r3
 8018d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018d7e:	4b13      	ldr	r3, [pc, #76]	; (8018dcc <pvPortMalloc+0x194>)
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	3301      	adds	r3, #1
 8018d84:	4a11      	ldr	r2, [pc, #68]	; (8018dcc <pvPortMalloc+0x194>)
 8018d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018d88:	f7fe fd08 	bl	801779c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	f003 0307 	and.w	r3, r3, #7
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d00a      	beq.n	8018dac <pvPortMalloc+0x174>
	__asm volatile
 8018d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9a:	f383 8811 	msr	BASEPRI, r3
 8018d9e:	f3bf 8f6f 	isb	sy
 8018da2:	f3bf 8f4f 	dsb	sy
 8018da6:	60fb      	str	r3, [r7, #12]
}
 8018da8:	bf00      	nop
 8018daa:	e7fe      	b.n	8018daa <pvPortMalloc+0x172>
	return pvReturn;
 8018dac:	69fb      	ldr	r3, [r7, #28]
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3728      	adds	r7, #40	; 0x28
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	20005eb4 	.word	0x20005eb4
 8018dbc:	20005ec8 	.word	0x20005ec8
 8018dc0:	20005eb8 	.word	0x20005eb8
 8018dc4:	20005eac 	.word	0x20005eac
 8018dc8:	20005ebc 	.word	0x20005ebc
 8018dcc:	20005ec0 	.word	0x20005ec0

08018dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b086      	sub	sp, #24
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d04d      	beq.n	8018e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018de2:	2308      	movs	r3, #8
 8018de4:	425b      	negs	r3, r3
 8018de6:	697a      	ldr	r2, [r7, #20]
 8018de8:	4413      	add	r3, r2
 8018dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018df0:	693b      	ldr	r3, [r7, #16]
 8018df2:	685a      	ldr	r2, [r3, #4]
 8018df4:	4b24      	ldr	r3, [pc, #144]	; (8018e88 <vPortFree+0xb8>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	4013      	ands	r3, r2
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d10a      	bne.n	8018e14 <vPortFree+0x44>
	__asm volatile
 8018dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e02:	f383 8811 	msr	BASEPRI, r3
 8018e06:	f3bf 8f6f 	isb	sy
 8018e0a:	f3bf 8f4f 	dsb	sy
 8018e0e:	60fb      	str	r3, [r7, #12]
}
 8018e10:	bf00      	nop
 8018e12:	e7fe      	b.n	8018e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018e14:	693b      	ldr	r3, [r7, #16]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d00a      	beq.n	8018e32 <vPortFree+0x62>
	__asm volatile
 8018e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e20:	f383 8811 	msr	BASEPRI, r3
 8018e24:	f3bf 8f6f 	isb	sy
 8018e28:	f3bf 8f4f 	dsb	sy
 8018e2c:	60bb      	str	r3, [r7, #8]
}
 8018e2e:	bf00      	nop
 8018e30:	e7fe      	b.n	8018e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	685a      	ldr	r2, [r3, #4]
 8018e36:	4b14      	ldr	r3, [pc, #80]	; (8018e88 <vPortFree+0xb8>)
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	4013      	ands	r3, r2
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d01e      	beq.n	8018e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018e40:	693b      	ldr	r3, [r7, #16]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d11a      	bne.n	8018e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018e48:	693b      	ldr	r3, [r7, #16]
 8018e4a:	685a      	ldr	r2, [r3, #4]
 8018e4c:	4b0e      	ldr	r3, [pc, #56]	; (8018e88 <vPortFree+0xb8>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	43db      	mvns	r3, r3
 8018e52:	401a      	ands	r2, r3
 8018e54:	693b      	ldr	r3, [r7, #16]
 8018e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018e58:	f7fe fc92 	bl	8017780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	685a      	ldr	r2, [r3, #4]
 8018e60:	4b0a      	ldr	r3, [pc, #40]	; (8018e8c <vPortFree+0xbc>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	4413      	add	r3, r2
 8018e66:	4a09      	ldr	r2, [pc, #36]	; (8018e8c <vPortFree+0xbc>)
 8018e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018e6a:	6938      	ldr	r0, [r7, #16]
 8018e6c:	f000 f874 	bl	8018f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018e70:	4b07      	ldr	r3, [pc, #28]	; (8018e90 <vPortFree+0xc0>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	3301      	adds	r3, #1
 8018e76:	4a06      	ldr	r2, [pc, #24]	; (8018e90 <vPortFree+0xc0>)
 8018e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018e7a:	f7fe fc8f 	bl	801779c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018e7e:	bf00      	nop
 8018e80:	3718      	adds	r7, #24
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	20005ec8 	.word	0x20005ec8
 8018e8c:	20005eb8 	.word	0x20005eb8
 8018e90:	20005ec4 	.word	0x20005ec4

08018e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018e94:	b480      	push	{r7}
 8018e96:	b085      	sub	sp, #20
 8018e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018ea0:	4b27      	ldr	r3, [pc, #156]	; (8018f40 <prvHeapInit+0xac>)
 8018ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	f003 0307 	and.w	r3, r3, #7
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d00c      	beq.n	8018ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	3307      	adds	r3, #7
 8018eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	f023 0307 	bic.w	r3, r3, #7
 8018eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018ebc:	68ba      	ldr	r2, [r7, #8]
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	1ad3      	subs	r3, r2, r3
 8018ec2:	4a1f      	ldr	r2, [pc, #124]	; (8018f40 <prvHeapInit+0xac>)
 8018ec4:	4413      	add	r3, r2
 8018ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018ecc:	4a1d      	ldr	r2, [pc, #116]	; (8018f44 <prvHeapInit+0xb0>)
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018ed2:	4b1c      	ldr	r3, [pc, #112]	; (8018f44 <prvHeapInit+0xb0>)
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	68ba      	ldr	r2, [r7, #8]
 8018edc:	4413      	add	r3, r2
 8018ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018ee0:	2208      	movs	r2, #8
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	1a9b      	subs	r3, r3, r2
 8018ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	f023 0307 	bic.w	r3, r3, #7
 8018eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	4a15      	ldr	r2, [pc, #84]	; (8018f48 <prvHeapInit+0xb4>)
 8018ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018ef6:	4b14      	ldr	r3, [pc, #80]	; (8018f48 <prvHeapInit+0xb4>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	2200      	movs	r2, #0
 8018efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018efe:	4b12      	ldr	r3, [pc, #72]	; (8018f48 <prvHeapInit+0xb4>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	2200      	movs	r2, #0
 8018f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	68fa      	ldr	r2, [r7, #12]
 8018f0e:	1ad2      	subs	r2, r2, r3
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018f14:	4b0c      	ldr	r3, [pc, #48]	; (8018f48 <prvHeapInit+0xb4>)
 8018f16:	681a      	ldr	r2, [r3, #0]
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018f1c:	683b      	ldr	r3, [r7, #0]
 8018f1e:	685b      	ldr	r3, [r3, #4]
 8018f20:	4a0a      	ldr	r2, [pc, #40]	; (8018f4c <prvHeapInit+0xb8>)
 8018f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	4a09      	ldr	r2, [pc, #36]	; (8018f50 <prvHeapInit+0xbc>)
 8018f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018f2c:	4b09      	ldr	r3, [pc, #36]	; (8018f54 <prvHeapInit+0xc0>)
 8018f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018f32:	601a      	str	r2, [r3, #0]
}
 8018f34:	bf00      	nop
 8018f36:	3714      	adds	r7, #20
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3e:	4770      	bx	lr
 8018f40:	200022ac 	.word	0x200022ac
 8018f44:	20005eac 	.word	0x20005eac
 8018f48:	20005eb4 	.word	0x20005eb4
 8018f4c:	20005ebc 	.word	0x20005ebc
 8018f50:	20005eb8 	.word	0x20005eb8
 8018f54:	20005ec8 	.word	0x20005ec8

08018f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018f58:	b480      	push	{r7}
 8018f5a:	b085      	sub	sp, #20
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018f60:	4b28      	ldr	r3, [pc, #160]	; (8019004 <prvInsertBlockIntoFreeList+0xac>)
 8018f62:	60fb      	str	r3, [r7, #12]
 8018f64:	e002      	b.n	8018f6c <prvInsertBlockIntoFreeList+0x14>
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	60fb      	str	r3, [r7, #12]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	687a      	ldr	r2, [r7, #4]
 8018f72:	429a      	cmp	r2, r3
 8018f74:	d8f7      	bhi.n	8018f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	685b      	ldr	r3, [r3, #4]
 8018f7e:	68ba      	ldr	r2, [r7, #8]
 8018f80:	4413      	add	r3, r2
 8018f82:	687a      	ldr	r2, [r7, #4]
 8018f84:	429a      	cmp	r2, r3
 8018f86:	d108      	bne.n	8018f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	685a      	ldr	r2, [r3, #4]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	441a      	add	r2, r3
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	68ba      	ldr	r2, [r7, #8]
 8018fa4:	441a      	add	r2, r3
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d118      	bne.n	8018fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681a      	ldr	r2, [r3, #0]
 8018fb2:	4b15      	ldr	r3, [pc, #84]	; (8019008 <prvInsertBlockIntoFreeList+0xb0>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d00d      	beq.n	8018fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	685a      	ldr	r2, [r3, #4]
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	441a      	add	r2, r3
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	601a      	str	r2, [r3, #0]
 8018fd4:	e008      	b.n	8018fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018fd6:	4b0c      	ldr	r3, [pc, #48]	; (8019008 <prvInsertBlockIntoFreeList+0xb0>)
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	601a      	str	r2, [r3, #0]
 8018fde:	e003      	b.n	8018fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	681a      	ldr	r2, [r3, #0]
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018fe8:	68fa      	ldr	r2, [r7, #12]
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d002      	beq.n	8018ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018ff6:	bf00      	nop
 8018ff8:	3714      	adds	r7, #20
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019000:	4770      	bx	lr
 8019002:	bf00      	nop
 8019004:	20005eac 	.word	0x20005eac
 8019008:	20005eb4 	.word	0x20005eb4

0801900c <__errno>:
 801900c:	4b01      	ldr	r3, [pc, #4]	; (8019014 <__errno+0x8>)
 801900e:	6818      	ldr	r0, [r3, #0]
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop
 8019014:	20000048 	.word	0x20000048

08019018 <__libc_init_array>:
 8019018:	b570      	push	{r4, r5, r6, lr}
 801901a:	4d0d      	ldr	r5, [pc, #52]	; (8019050 <__libc_init_array+0x38>)
 801901c:	4c0d      	ldr	r4, [pc, #52]	; (8019054 <__libc_init_array+0x3c>)
 801901e:	1b64      	subs	r4, r4, r5
 8019020:	10a4      	asrs	r4, r4, #2
 8019022:	2600      	movs	r6, #0
 8019024:	42a6      	cmp	r6, r4
 8019026:	d109      	bne.n	801903c <__libc_init_array+0x24>
 8019028:	4d0b      	ldr	r5, [pc, #44]	; (8019058 <__libc_init_array+0x40>)
 801902a:	4c0c      	ldr	r4, [pc, #48]	; (801905c <__libc_init_array+0x44>)
 801902c:	f005 ff68 	bl	801ef00 <_init>
 8019030:	1b64      	subs	r4, r4, r5
 8019032:	10a4      	asrs	r4, r4, #2
 8019034:	2600      	movs	r6, #0
 8019036:	42a6      	cmp	r6, r4
 8019038:	d105      	bne.n	8019046 <__libc_init_array+0x2e>
 801903a:	bd70      	pop	{r4, r5, r6, pc}
 801903c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019040:	4798      	blx	r3
 8019042:	3601      	adds	r6, #1
 8019044:	e7ee      	b.n	8019024 <__libc_init_array+0xc>
 8019046:	f855 3b04 	ldr.w	r3, [r5], #4
 801904a:	4798      	blx	r3
 801904c:	3601      	adds	r6, #1
 801904e:	e7f2      	b.n	8019036 <__libc_init_array+0x1e>
 8019050:	0801ffbc 	.word	0x0801ffbc
 8019054:	0801ffbc 	.word	0x0801ffbc
 8019058:	0801ffbc 	.word	0x0801ffbc
 801905c:	0801ffc0 	.word	0x0801ffc0

08019060 <malloc>:
 8019060:	4b02      	ldr	r3, [pc, #8]	; (801906c <malloc+0xc>)
 8019062:	4601      	mov	r1, r0
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	f000 b869 	b.w	801913c <_malloc_r>
 801906a:	bf00      	nop
 801906c:	20000048 	.word	0x20000048

08019070 <memcpy>:
 8019070:	440a      	add	r2, r1
 8019072:	4291      	cmp	r1, r2
 8019074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019078:	d100      	bne.n	801907c <memcpy+0xc>
 801907a:	4770      	bx	lr
 801907c:	b510      	push	{r4, lr}
 801907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019086:	4291      	cmp	r1, r2
 8019088:	d1f9      	bne.n	801907e <memcpy+0xe>
 801908a:	bd10      	pop	{r4, pc}

0801908c <memset>:
 801908c:	4402      	add	r2, r0
 801908e:	4603      	mov	r3, r0
 8019090:	4293      	cmp	r3, r2
 8019092:	d100      	bne.n	8019096 <memset+0xa>
 8019094:	4770      	bx	lr
 8019096:	f803 1b01 	strb.w	r1, [r3], #1
 801909a:	e7f9      	b.n	8019090 <memset+0x4>

0801909c <_free_r>:
 801909c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801909e:	2900      	cmp	r1, #0
 80190a0:	d048      	beq.n	8019134 <_free_r+0x98>
 80190a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190a6:	9001      	str	r0, [sp, #4]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	f1a1 0404 	sub.w	r4, r1, #4
 80190ae:	bfb8      	it	lt
 80190b0:	18e4      	addlt	r4, r4, r3
 80190b2:	f003 f925 	bl	801c300 <__malloc_lock>
 80190b6:	4a20      	ldr	r2, [pc, #128]	; (8019138 <_free_r+0x9c>)
 80190b8:	9801      	ldr	r0, [sp, #4]
 80190ba:	6813      	ldr	r3, [r2, #0]
 80190bc:	4615      	mov	r5, r2
 80190be:	b933      	cbnz	r3, 80190ce <_free_r+0x32>
 80190c0:	6063      	str	r3, [r4, #4]
 80190c2:	6014      	str	r4, [r2, #0]
 80190c4:	b003      	add	sp, #12
 80190c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190ca:	f003 b91f 	b.w	801c30c <__malloc_unlock>
 80190ce:	42a3      	cmp	r3, r4
 80190d0:	d90b      	bls.n	80190ea <_free_r+0x4e>
 80190d2:	6821      	ldr	r1, [r4, #0]
 80190d4:	1862      	adds	r2, r4, r1
 80190d6:	4293      	cmp	r3, r2
 80190d8:	bf04      	itt	eq
 80190da:	681a      	ldreq	r2, [r3, #0]
 80190dc:	685b      	ldreq	r3, [r3, #4]
 80190de:	6063      	str	r3, [r4, #4]
 80190e0:	bf04      	itt	eq
 80190e2:	1852      	addeq	r2, r2, r1
 80190e4:	6022      	streq	r2, [r4, #0]
 80190e6:	602c      	str	r4, [r5, #0]
 80190e8:	e7ec      	b.n	80190c4 <_free_r+0x28>
 80190ea:	461a      	mov	r2, r3
 80190ec:	685b      	ldr	r3, [r3, #4]
 80190ee:	b10b      	cbz	r3, 80190f4 <_free_r+0x58>
 80190f0:	42a3      	cmp	r3, r4
 80190f2:	d9fa      	bls.n	80190ea <_free_r+0x4e>
 80190f4:	6811      	ldr	r1, [r2, #0]
 80190f6:	1855      	adds	r5, r2, r1
 80190f8:	42a5      	cmp	r5, r4
 80190fa:	d10b      	bne.n	8019114 <_free_r+0x78>
 80190fc:	6824      	ldr	r4, [r4, #0]
 80190fe:	4421      	add	r1, r4
 8019100:	1854      	adds	r4, r2, r1
 8019102:	42a3      	cmp	r3, r4
 8019104:	6011      	str	r1, [r2, #0]
 8019106:	d1dd      	bne.n	80190c4 <_free_r+0x28>
 8019108:	681c      	ldr	r4, [r3, #0]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	6053      	str	r3, [r2, #4]
 801910e:	4421      	add	r1, r4
 8019110:	6011      	str	r1, [r2, #0]
 8019112:	e7d7      	b.n	80190c4 <_free_r+0x28>
 8019114:	d902      	bls.n	801911c <_free_r+0x80>
 8019116:	230c      	movs	r3, #12
 8019118:	6003      	str	r3, [r0, #0]
 801911a:	e7d3      	b.n	80190c4 <_free_r+0x28>
 801911c:	6825      	ldr	r5, [r4, #0]
 801911e:	1961      	adds	r1, r4, r5
 8019120:	428b      	cmp	r3, r1
 8019122:	bf04      	itt	eq
 8019124:	6819      	ldreq	r1, [r3, #0]
 8019126:	685b      	ldreq	r3, [r3, #4]
 8019128:	6063      	str	r3, [r4, #4]
 801912a:	bf04      	itt	eq
 801912c:	1949      	addeq	r1, r1, r5
 801912e:	6021      	streq	r1, [r4, #0]
 8019130:	6054      	str	r4, [r2, #4]
 8019132:	e7c7      	b.n	80190c4 <_free_r+0x28>
 8019134:	b003      	add	sp, #12
 8019136:	bd30      	pop	{r4, r5, pc}
 8019138:	20005ecc 	.word	0x20005ecc

0801913c <_malloc_r>:
 801913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801913e:	1ccd      	adds	r5, r1, #3
 8019140:	f025 0503 	bic.w	r5, r5, #3
 8019144:	3508      	adds	r5, #8
 8019146:	2d0c      	cmp	r5, #12
 8019148:	bf38      	it	cc
 801914a:	250c      	movcc	r5, #12
 801914c:	2d00      	cmp	r5, #0
 801914e:	4606      	mov	r6, r0
 8019150:	db01      	blt.n	8019156 <_malloc_r+0x1a>
 8019152:	42a9      	cmp	r1, r5
 8019154:	d903      	bls.n	801915e <_malloc_r+0x22>
 8019156:	230c      	movs	r3, #12
 8019158:	6033      	str	r3, [r6, #0]
 801915a:	2000      	movs	r0, #0
 801915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801915e:	f003 f8cf 	bl	801c300 <__malloc_lock>
 8019162:	4921      	ldr	r1, [pc, #132]	; (80191e8 <_malloc_r+0xac>)
 8019164:	680a      	ldr	r2, [r1, #0]
 8019166:	4614      	mov	r4, r2
 8019168:	b99c      	cbnz	r4, 8019192 <_malloc_r+0x56>
 801916a:	4f20      	ldr	r7, [pc, #128]	; (80191ec <_malloc_r+0xb0>)
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	b923      	cbnz	r3, 801917a <_malloc_r+0x3e>
 8019170:	4621      	mov	r1, r4
 8019172:	4630      	mov	r0, r6
 8019174:	f000 febe 	bl	8019ef4 <_sbrk_r>
 8019178:	6038      	str	r0, [r7, #0]
 801917a:	4629      	mov	r1, r5
 801917c:	4630      	mov	r0, r6
 801917e:	f000 feb9 	bl	8019ef4 <_sbrk_r>
 8019182:	1c43      	adds	r3, r0, #1
 8019184:	d123      	bne.n	80191ce <_malloc_r+0x92>
 8019186:	230c      	movs	r3, #12
 8019188:	6033      	str	r3, [r6, #0]
 801918a:	4630      	mov	r0, r6
 801918c:	f003 f8be 	bl	801c30c <__malloc_unlock>
 8019190:	e7e3      	b.n	801915a <_malloc_r+0x1e>
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	1b5b      	subs	r3, r3, r5
 8019196:	d417      	bmi.n	80191c8 <_malloc_r+0x8c>
 8019198:	2b0b      	cmp	r3, #11
 801919a:	d903      	bls.n	80191a4 <_malloc_r+0x68>
 801919c:	6023      	str	r3, [r4, #0]
 801919e:	441c      	add	r4, r3
 80191a0:	6025      	str	r5, [r4, #0]
 80191a2:	e004      	b.n	80191ae <_malloc_r+0x72>
 80191a4:	6863      	ldr	r3, [r4, #4]
 80191a6:	42a2      	cmp	r2, r4
 80191a8:	bf0c      	ite	eq
 80191aa:	600b      	streq	r3, [r1, #0]
 80191ac:	6053      	strne	r3, [r2, #4]
 80191ae:	4630      	mov	r0, r6
 80191b0:	f003 f8ac 	bl	801c30c <__malloc_unlock>
 80191b4:	f104 000b 	add.w	r0, r4, #11
 80191b8:	1d23      	adds	r3, r4, #4
 80191ba:	f020 0007 	bic.w	r0, r0, #7
 80191be:	1ac2      	subs	r2, r0, r3
 80191c0:	d0cc      	beq.n	801915c <_malloc_r+0x20>
 80191c2:	1a1b      	subs	r3, r3, r0
 80191c4:	50a3      	str	r3, [r4, r2]
 80191c6:	e7c9      	b.n	801915c <_malloc_r+0x20>
 80191c8:	4622      	mov	r2, r4
 80191ca:	6864      	ldr	r4, [r4, #4]
 80191cc:	e7cc      	b.n	8019168 <_malloc_r+0x2c>
 80191ce:	1cc4      	adds	r4, r0, #3
 80191d0:	f024 0403 	bic.w	r4, r4, #3
 80191d4:	42a0      	cmp	r0, r4
 80191d6:	d0e3      	beq.n	80191a0 <_malloc_r+0x64>
 80191d8:	1a21      	subs	r1, r4, r0
 80191da:	4630      	mov	r0, r6
 80191dc:	f000 fe8a 	bl	8019ef4 <_sbrk_r>
 80191e0:	3001      	adds	r0, #1
 80191e2:	d1dd      	bne.n	80191a0 <_malloc_r+0x64>
 80191e4:	e7cf      	b.n	8019186 <_malloc_r+0x4a>
 80191e6:	bf00      	nop
 80191e8:	20005ecc 	.word	0x20005ecc
 80191ec:	20005ed0 	.word	0x20005ed0

080191f0 <__cvt>:
 80191f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80191f4:	ec55 4b10 	vmov	r4, r5, d0
 80191f8:	2d00      	cmp	r5, #0
 80191fa:	460e      	mov	r6, r1
 80191fc:	4619      	mov	r1, r3
 80191fe:	462b      	mov	r3, r5
 8019200:	bfbb      	ittet	lt
 8019202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019206:	461d      	movlt	r5, r3
 8019208:	2300      	movge	r3, #0
 801920a:	232d      	movlt	r3, #45	; 0x2d
 801920c:	700b      	strb	r3, [r1, #0]
 801920e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019214:	4691      	mov	r9, r2
 8019216:	f023 0820 	bic.w	r8, r3, #32
 801921a:	bfbc      	itt	lt
 801921c:	4622      	movlt	r2, r4
 801921e:	4614      	movlt	r4, r2
 8019220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019224:	d005      	beq.n	8019232 <__cvt+0x42>
 8019226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801922a:	d100      	bne.n	801922e <__cvt+0x3e>
 801922c:	3601      	adds	r6, #1
 801922e:	2102      	movs	r1, #2
 8019230:	e000      	b.n	8019234 <__cvt+0x44>
 8019232:	2103      	movs	r1, #3
 8019234:	ab03      	add	r3, sp, #12
 8019236:	9301      	str	r3, [sp, #4]
 8019238:	ab02      	add	r3, sp, #8
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	ec45 4b10 	vmov	d0, r4, r5
 8019240:	4653      	mov	r3, sl
 8019242:	4632      	mov	r2, r6
 8019244:	f001 fed8 	bl	801aff8 <_dtoa_r>
 8019248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801924c:	4607      	mov	r7, r0
 801924e:	d102      	bne.n	8019256 <__cvt+0x66>
 8019250:	f019 0f01 	tst.w	r9, #1
 8019254:	d022      	beq.n	801929c <__cvt+0xac>
 8019256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801925a:	eb07 0906 	add.w	r9, r7, r6
 801925e:	d110      	bne.n	8019282 <__cvt+0x92>
 8019260:	783b      	ldrb	r3, [r7, #0]
 8019262:	2b30      	cmp	r3, #48	; 0x30
 8019264:	d10a      	bne.n	801927c <__cvt+0x8c>
 8019266:	2200      	movs	r2, #0
 8019268:	2300      	movs	r3, #0
 801926a:	4620      	mov	r0, r4
 801926c:	4629      	mov	r1, r5
 801926e:	f7e7 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8019272:	b918      	cbnz	r0, 801927c <__cvt+0x8c>
 8019274:	f1c6 0601 	rsb	r6, r6, #1
 8019278:	f8ca 6000 	str.w	r6, [sl]
 801927c:	f8da 3000 	ldr.w	r3, [sl]
 8019280:	4499      	add	r9, r3
 8019282:	2200      	movs	r2, #0
 8019284:	2300      	movs	r3, #0
 8019286:	4620      	mov	r0, r4
 8019288:	4629      	mov	r1, r5
 801928a:	f7e7 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801928e:	b108      	cbz	r0, 8019294 <__cvt+0xa4>
 8019290:	f8cd 900c 	str.w	r9, [sp, #12]
 8019294:	2230      	movs	r2, #48	; 0x30
 8019296:	9b03      	ldr	r3, [sp, #12]
 8019298:	454b      	cmp	r3, r9
 801929a:	d307      	bcc.n	80192ac <__cvt+0xbc>
 801929c:	9b03      	ldr	r3, [sp, #12]
 801929e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192a0:	1bdb      	subs	r3, r3, r7
 80192a2:	4638      	mov	r0, r7
 80192a4:	6013      	str	r3, [r2, #0]
 80192a6:	b004      	add	sp, #16
 80192a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ac:	1c59      	adds	r1, r3, #1
 80192ae:	9103      	str	r1, [sp, #12]
 80192b0:	701a      	strb	r2, [r3, #0]
 80192b2:	e7f0      	b.n	8019296 <__cvt+0xa6>

080192b4 <__exponent>:
 80192b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192b6:	4603      	mov	r3, r0
 80192b8:	2900      	cmp	r1, #0
 80192ba:	bfb8      	it	lt
 80192bc:	4249      	neglt	r1, r1
 80192be:	f803 2b02 	strb.w	r2, [r3], #2
 80192c2:	bfb4      	ite	lt
 80192c4:	222d      	movlt	r2, #45	; 0x2d
 80192c6:	222b      	movge	r2, #43	; 0x2b
 80192c8:	2909      	cmp	r1, #9
 80192ca:	7042      	strb	r2, [r0, #1]
 80192cc:	dd2a      	ble.n	8019324 <__exponent+0x70>
 80192ce:	f10d 0407 	add.w	r4, sp, #7
 80192d2:	46a4      	mov	ip, r4
 80192d4:	270a      	movs	r7, #10
 80192d6:	46a6      	mov	lr, r4
 80192d8:	460a      	mov	r2, r1
 80192da:	fb91 f6f7 	sdiv	r6, r1, r7
 80192de:	fb07 1516 	mls	r5, r7, r6, r1
 80192e2:	3530      	adds	r5, #48	; 0x30
 80192e4:	2a63      	cmp	r2, #99	; 0x63
 80192e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80192ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80192ee:	4631      	mov	r1, r6
 80192f0:	dcf1      	bgt.n	80192d6 <__exponent+0x22>
 80192f2:	3130      	adds	r1, #48	; 0x30
 80192f4:	f1ae 0502 	sub.w	r5, lr, #2
 80192f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80192fc:	1c44      	adds	r4, r0, #1
 80192fe:	4629      	mov	r1, r5
 8019300:	4561      	cmp	r1, ip
 8019302:	d30a      	bcc.n	801931a <__exponent+0x66>
 8019304:	f10d 0209 	add.w	r2, sp, #9
 8019308:	eba2 020e 	sub.w	r2, r2, lr
 801930c:	4565      	cmp	r5, ip
 801930e:	bf88      	it	hi
 8019310:	2200      	movhi	r2, #0
 8019312:	4413      	add	r3, r2
 8019314:	1a18      	subs	r0, r3, r0
 8019316:	b003      	add	sp, #12
 8019318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801931a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801931e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019322:	e7ed      	b.n	8019300 <__exponent+0x4c>
 8019324:	2330      	movs	r3, #48	; 0x30
 8019326:	3130      	adds	r1, #48	; 0x30
 8019328:	7083      	strb	r3, [r0, #2]
 801932a:	70c1      	strb	r1, [r0, #3]
 801932c:	1d03      	adds	r3, r0, #4
 801932e:	e7f1      	b.n	8019314 <__exponent+0x60>

08019330 <_printf_float>:
 8019330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019334:	ed2d 8b02 	vpush	{d8}
 8019338:	b08d      	sub	sp, #52	; 0x34
 801933a:	460c      	mov	r4, r1
 801933c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019340:	4616      	mov	r6, r2
 8019342:	461f      	mov	r7, r3
 8019344:	4605      	mov	r5, r0
 8019346:	f002 ffb3 	bl	801c2b0 <_localeconv_r>
 801934a:	f8d0 a000 	ldr.w	sl, [r0]
 801934e:	4650      	mov	r0, sl
 8019350:	f7e6 ff3e 	bl	80001d0 <strlen>
 8019354:	2300      	movs	r3, #0
 8019356:	930a      	str	r3, [sp, #40]	; 0x28
 8019358:	6823      	ldr	r3, [r4, #0]
 801935a:	9305      	str	r3, [sp, #20]
 801935c:	f8d8 3000 	ldr.w	r3, [r8]
 8019360:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019364:	3307      	adds	r3, #7
 8019366:	f023 0307 	bic.w	r3, r3, #7
 801936a:	f103 0208 	add.w	r2, r3, #8
 801936e:	f8c8 2000 	str.w	r2, [r8]
 8019372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019376:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801937a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801937e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019382:	9307      	str	r3, [sp, #28]
 8019384:	f8cd 8018 	str.w	r8, [sp, #24]
 8019388:	ee08 0a10 	vmov	s16, r0
 801938c:	4b9f      	ldr	r3, [pc, #636]	; (801960c <_printf_float+0x2dc>)
 801938e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019396:	f7e7 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 801939a:	bb88      	cbnz	r0, 8019400 <_printf_float+0xd0>
 801939c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80193a0:	4b9a      	ldr	r3, [pc, #616]	; (801960c <_printf_float+0x2dc>)
 80193a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80193a6:	f7e7 fba3 	bl	8000af0 <__aeabi_dcmple>
 80193aa:	bb48      	cbnz	r0, 8019400 <_printf_float+0xd0>
 80193ac:	2200      	movs	r2, #0
 80193ae:	2300      	movs	r3, #0
 80193b0:	4640      	mov	r0, r8
 80193b2:	4649      	mov	r1, r9
 80193b4:	f7e7 fb92 	bl	8000adc <__aeabi_dcmplt>
 80193b8:	b110      	cbz	r0, 80193c0 <_printf_float+0x90>
 80193ba:	232d      	movs	r3, #45	; 0x2d
 80193bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193c0:	4b93      	ldr	r3, [pc, #588]	; (8019610 <_printf_float+0x2e0>)
 80193c2:	4894      	ldr	r0, [pc, #592]	; (8019614 <_printf_float+0x2e4>)
 80193c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80193c8:	bf94      	ite	ls
 80193ca:	4698      	movls	r8, r3
 80193cc:	4680      	movhi	r8, r0
 80193ce:	2303      	movs	r3, #3
 80193d0:	6123      	str	r3, [r4, #16]
 80193d2:	9b05      	ldr	r3, [sp, #20]
 80193d4:	f023 0204 	bic.w	r2, r3, #4
 80193d8:	6022      	str	r2, [r4, #0]
 80193da:	f04f 0900 	mov.w	r9, #0
 80193de:	9700      	str	r7, [sp, #0]
 80193e0:	4633      	mov	r3, r6
 80193e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80193e4:	4621      	mov	r1, r4
 80193e6:	4628      	mov	r0, r5
 80193e8:	f000 f9d8 	bl	801979c <_printf_common>
 80193ec:	3001      	adds	r0, #1
 80193ee:	f040 8090 	bne.w	8019512 <_printf_float+0x1e2>
 80193f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193f6:	b00d      	add	sp, #52	; 0x34
 80193f8:	ecbd 8b02 	vpop	{d8}
 80193fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019400:	4642      	mov	r2, r8
 8019402:	464b      	mov	r3, r9
 8019404:	4640      	mov	r0, r8
 8019406:	4649      	mov	r1, r9
 8019408:	f7e7 fb90 	bl	8000b2c <__aeabi_dcmpun>
 801940c:	b140      	cbz	r0, 8019420 <_printf_float+0xf0>
 801940e:	464b      	mov	r3, r9
 8019410:	2b00      	cmp	r3, #0
 8019412:	bfbc      	itt	lt
 8019414:	232d      	movlt	r3, #45	; 0x2d
 8019416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801941a:	487f      	ldr	r0, [pc, #508]	; (8019618 <_printf_float+0x2e8>)
 801941c:	4b7f      	ldr	r3, [pc, #508]	; (801961c <_printf_float+0x2ec>)
 801941e:	e7d1      	b.n	80193c4 <_printf_float+0x94>
 8019420:	6863      	ldr	r3, [r4, #4]
 8019422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019426:	9206      	str	r2, [sp, #24]
 8019428:	1c5a      	adds	r2, r3, #1
 801942a:	d13f      	bne.n	80194ac <_printf_float+0x17c>
 801942c:	2306      	movs	r3, #6
 801942e:	6063      	str	r3, [r4, #4]
 8019430:	9b05      	ldr	r3, [sp, #20]
 8019432:	6861      	ldr	r1, [r4, #4]
 8019434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019438:	2300      	movs	r3, #0
 801943a:	9303      	str	r3, [sp, #12]
 801943c:	ab0a      	add	r3, sp, #40	; 0x28
 801943e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019442:	ab09      	add	r3, sp, #36	; 0x24
 8019444:	ec49 8b10 	vmov	d0, r8, r9
 8019448:	9300      	str	r3, [sp, #0]
 801944a:	6022      	str	r2, [r4, #0]
 801944c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019450:	4628      	mov	r0, r5
 8019452:	f7ff fecd 	bl	80191f0 <__cvt>
 8019456:	9b06      	ldr	r3, [sp, #24]
 8019458:	9909      	ldr	r1, [sp, #36]	; 0x24
 801945a:	2b47      	cmp	r3, #71	; 0x47
 801945c:	4680      	mov	r8, r0
 801945e:	d108      	bne.n	8019472 <_printf_float+0x142>
 8019460:	1cc8      	adds	r0, r1, #3
 8019462:	db02      	blt.n	801946a <_printf_float+0x13a>
 8019464:	6863      	ldr	r3, [r4, #4]
 8019466:	4299      	cmp	r1, r3
 8019468:	dd41      	ble.n	80194ee <_printf_float+0x1be>
 801946a:	f1ab 0b02 	sub.w	fp, fp, #2
 801946e:	fa5f fb8b 	uxtb.w	fp, fp
 8019472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019476:	d820      	bhi.n	80194ba <_printf_float+0x18a>
 8019478:	3901      	subs	r1, #1
 801947a:	465a      	mov	r2, fp
 801947c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019480:	9109      	str	r1, [sp, #36]	; 0x24
 8019482:	f7ff ff17 	bl	80192b4 <__exponent>
 8019486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019488:	1813      	adds	r3, r2, r0
 801948a:	2a01      	cmp	r2, #1
 801948c:	4681      	mov	r9, r0
 801948e:	6123      	str	r3, [r4, #16]
 8019490:	dc02      	bgt.n	8019498 <_printf_float+0x168>
 8019492:	6822      	ldr	r2, [r4, #0]
 8019494:	07d2      	lsls	r2, r2, #31
 8019496:	d501      	bpl.n	801949c <_printf_float+0x16c>
 8019498:	3301      	adds	r3, #1
 801949a:	6123      	str	r3, [r4, #16]
 801949c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d09c      	beq.n	80193de <_printf_float+0xae>
 80194a4:	232d      	movs	r3, #45	; 0x2d
 80194a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194aa:	e798      	b.n	80193de <_printf_float+0xae>
 80194ac:	9a06      	ldr	r2, [sp, #24]
 80194ae:	2a47      	cmp	r2, #71	; 0x47
 80194b0:	d1be      	bne.n	8019430 <_printf_float+0x100>
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d1bc      	bne.n	8019430 <_printf_float+0x100>
 80194b6:	2301      	movs	r3, #1
 80194b8:	e7b9      	b.n	801942e <_printf_float+0xfe>
 80194ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80194be:	d118      	bne.n	80194f2 <_printf_float+0x1c2>
 80194c0:	2900      	cmp	r1, #0
 80194c2:	6863      	ldr	r3, [r4, #4]
 80194c4:	dd0b      	ble.n	80194de <_printf_float+0x1ae>
 80194c6:	6121      	str	r1, [r4, #16]
 80194c8:	b913      	cbnz	r3, 80194d0 <_printf_float+0x1a0>
 80194ca:	6822      	ldr	r2, [r4, #0]
 80194cc:	07d0      	lsls	r0, r2, #31
 80194ce:	d502      	bpl.n	80194d6 <_printf_float+0x1a6>
 80194d0:	3301      	adds	r3, #1
 80194d2:	440b      	add	r3, r1
 80194d4:	6123      	str	r3, [r4, #16]
 80194d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80194d8:	f04f 0900 	mov.w	r9, #0
 80194dc:	e7de      	b.n	801949c <_printf_float+0x16c>
 80194de:	b913      	cbnz	r3, 80194e6 <_printf_float+0x1b6>
 80194e0:	6822      	ldr	r2, [r4, #0]
 80194e2:	07d2      	lsls	r2, r2, #31
 80194e4:	d501      	bpl.n	80194ea <_printf_float+0x1ba>
 80194e6:	3302      	adds	r3, #2
 80194e8:	e7f4      	b.n	80194d4 <_printf_float+0x1a4>
 80194ea:	2301      	movs	r3, #1
 80194ec:	e7f2      	b.n	80194d4 <_printf_float+0x1a4>
 80194ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80194f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194f4:	4299      	cmp	r1, r3
 80194f6:	db05      	blt.n	8019504 <_printf_float+0x1d4>
 80194f8:	6823      	ldr	r3, [r4, #0]
 80194fa:	6121      	str	r1, [r4, #16]
 80194fc:	07d8      	lsls	r0, r3, #31
 80194fe:	d5ea      	bpl.n	80194d6 <_printf_float+0x1a6>
 8019500:	1c4b      	adds	r3, r1, #1
 8019502:	e7e7      	b.n	80194d4 <_printf_float+0x1a4>
 8019504:	2900      	cmp	r1, #0
 8019506:	bfd4      	ite	le
 8019508:	f1c1 0202 	rsble	r2, r1, #2
 801950c:	2201      	movgt	r2, #1
 801950e:	4413      	add	r3, r2
 8019510:	e7e0      	b.n	80194d4 <_printf_float+0x1a4>
 8019512:	6823      	ldr	r3, [r4, #0]
 8019514:	055a      	lsls	r2, r3, #21
 8019516:	d407      	bmi.n	8019528 <_printf_float+0x1f8>
 8019518:	6923      	ldr	r3, [r4, #16]
 801951a:	4642      	mov	r2, r8
 801951c:	4631      	mov	r1, r6
 801951e:	4628      	mov	r0, r5
 8019520:	47b8      	blx	r7
 8019522:	3001      	adds	r0, #1
 8019524:	d12c      	bne.n	8019580 <_printf_float+0x250>
 8019526:	e764      	b.n	80193f2 <_printf_float+0xc2>
 8019528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801952c:	f240 80e0 	bls.w	80196f0 <_printf_float+0x3c0>
 8019530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019534:	2200      	movs	r2, #0
 8019536:	2300      	movs	r3, #0
 8019538:	f7e7 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 801953c:	2800      	cmp	r0, #0
 801953e:	d034      	beq.n	80195aa <_printf_float+0x27a>
 8019540:	4a37      	ldr	r2, [pc, #220]	; (8019620 <_printf_float+0x2f0>)
 8019542:	2301      	movs	r3, #1
 8019544:	4631      	mov	r1, r6
 8019546:	4628      	mov	r0, r5
 8019548:	47b8      	blx	r7
 801954a:	3001      	adds	r0, #1
 801954c:	f43f af51 	beq.w	80193f2 <_printf_float+0xc2>
 8019550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019554:	429a      	cmp	r2, r3
 8019556:	db02      	blt.n	801955e <_printf_float+0x22e>
 8019558:	6823      	ldr	r3, [r4, #0]
 801955a:	07d8      	lsls	r0, r3, #31
 801955c:	d510      	bpl.n	8019580 <_printf_float+0x250>
 801955e:	ee18 3a10 	vmov	r3, s16
 8019562:	4652      	mov	r2, sl
 8019564:	4631      	mov	r1, r6
 8019566:	4628      	mov	r0, r5
 8019568:	47b8      	blx	r7
 801956a:	3001      	adds	r0, #1
 801956c:	f43f af41 	beq.w	80193f2 <_printf_float+0xc2>
 8019570:	f04f 0800 	mov.w	r8, #0
 8019574:	f104 091a 	add.w	r9, r4, #26
 8019578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801957a:	3b01      	subs	r3, #1
 801957c:	4543      	cmp	r3, r8
 801957e:	dc09      	bgt.n	8019594 <_printf_float+0x264>
 8019580:	6823      	ldr	r3, [r4, #0]
 8019582:	079b      	lsls	r3, r3, #30
 8019584:	f100 8105 	bmi.w	8019792 <_printf_float+0x462>
 8019588:	68e0      	ldr	r0, [r4, #12]
 801958a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801958c:	4298      	cmp	r0, r3
 801958e:	bfb8      	it	lt
 8019590:	4618      	movlt	r0, r3
 8019592:	e730      	b.n	80193f6 <_printf_float+0xc6>
 8019594:	2301      	movs	r3, #1
 8019596:	464a      	mov	r2, r9
 8019598:	4631      	mov	r1, r6
 801959a:	4628      	mov	r0, r5
 801959c:	47b8      	blx	r7
 801959e:	3001      	adds	r0, #1
 80195a0:	f43f af27 	beq.w	80193f2 <_printf_float+0xc2>
 80195a4:	f108 0801 	add.w	r8, r8, #1
 80195a8:	e7e6      	b.n	8019578 <_printf_float+0x248>
 80195aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	dc39      	bgt.n	8019624 <_printf_float+0x2f4>
 80195b0:	4a1b      	ldr	r2, [pc, #108]	; (8019620 <_printf_float+0x2f0>)
 80195b2:	2301      	movs	r3, #1
 80195b4:	4631      	mov	r1, r6
 80195b6:	4628      	mov	r0, r5
 80195b8:	47b8      	blx	r7
 80195ba:	3001      	adds	r0, #1
 80195bc:	f43f af19 	beq.w	80193f2 <_printf_float+0xc2>
 80195c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80195c4:	4313      	orrs	r3, r2
 80195c6:	d102      	bne.n	80195ce <_printf_float+0x29e>
 80195c8:	6823      	ldr	r3, [r4, #0]
 80195ca:	07d9      	lsls	r1, r3, #31
 80195cc:	d5d8      	bpl.n	8019580 <_printf_float+0x250>
 80195ce:	ee18 3a10 	vmov	r3, s16
 80195d2:	4652      	mov	r2, sl
 80195d4:	4631      	mov	r1, r6
 80195d6:	4628      	mov	r0, r5
 80195d8:	47b8      	blx	r7
 80195da:	3001      	adds	r0, #1
 80195dc:	f43f af09 	beq.w	80193f2 <_printf_float+0xc2>
 80195e0:	f04f 0900 	mov.w	r9, #0
 80195e4:	f104 0a1a 	add.w	sl, r4, #26
 80195e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ea:	425b      	negs	r3, r3
 80195ec:	454b      	cmp	r3, r9
 80195ee:	dc01      	bgt.n	80195f4 <_printf_float+0x2c4>
 80195f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195f2:	e792      	b.n	801951a <_printf_float+0x1ea>
 80195f4:	2301      	movs	r3, #1
 80195f6:	4652      	mov	r2, sl
 80195f8:	4631      	mov	r1, r6
 80195fa:	4628      	mov	r0, r5
 80195fc:	47b8      	blx	r7
 80195fe:	3001      	adds	r0, #1
 8019600:	f43f aef7 	beq.w	80193f2 <_printf_float+0xc2>
 8019604:	f109 0901 	add.w	r9, r9, #1
 8019608:	e7ee      	b.n	80195e8 <_printf_float+0x2b8>
 801960a:	bf00      	nop
 801960c:	7fefffff 	.word	0x7fefffff
 8019610:	0801f6d8 	.word	0x0801f6d8
 8019614:	0801f6dc 	.word	0x0801f6dc
 8019618:	0801f6e4 	.word	0x0801f6e4
 801961c:	0801f6e0 	.word	0x0801f6e0
 8019620:	0801f6e8 	.word	0x0801f6e8
 8019624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019628:	429a      	cmp	r2, r3
 801962a:	bfa8      	it	ge
 801962c:	461a      	movge	r2, r3
 801962e:	2a00      	cmp	r2, #0
 8019630:	4691      	mov	r9, r2
 8019632:	dc37      	bgt.n	80196a4 <_printf_float+0x374>
 8019634:	f04f 0b00 	mov.w	fp, #0
 8019638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801963c:	f104 021a 	add.w	r2, r4, #26
 8019640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019642:	9305      	str	r3, [sp, #20]
 8019644:	eba3 0309 	sub.w	r3, r3, r9
 8019648:	455b      	cmp	r3, fp
 801964a:	dc33      	bgt.n	80196b4 <_printf_float+0x384>
 801964c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019650:	429a      	cmp	r2, r3
 8019652:	db3b      	blt.n	80196cc <_printf_float+0x39c>
 8019654:	6823      	ldr	r3, [r4, #0]
 8019656:	07da      	lsls	r2, r3, #31
 8019658:	d438      	bmi.n	80196cc <_printf_float+0x39c>
 801965a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801965c:	9b05      	ldr	r3, [sp, #20]
 801965e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019660:	1ad3      	subs	r3, r2, r3
 8019662:	eba2 0901 	sub.w	r9, r2, r1
 8019666:	4599      	cmp	r9, r3
 8019668:	bfa8      	it	ge
 801966a:	4699      	movge	r9, r3
 801966c:	f1b9 0f00 	cmp.w	r9, #0
 8019670:	dc35      	bgt.n	80196de <_printf_float+0x3ae>
 8019672:	f04f 0800 	mov.w	r8, #0
 8019676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801967a:	f104 0a1a 	add.w	sl, r4, #26
 801967e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019682:	1a9b      	subs	r3, r3, r2
 8019684:	eba3 0309 	sub.w	r3, r3, r9
 8019688:	4543      	cmp	r3, r8
 801968a:	f77f af79 	ble.w	8019580 <_printf_float+0x250>
 801968e:	2301      	movs	r3, #1
 8019690:	4652      	mov	r2, sl
 8019692:	4631      	mov	r1, r6
 8019694:	4628      	mov	r0, r5
 8019696:	47b8      	blx	r7
 8019698:	3001      	adds	r0, #1
 801969a:	f43f aeaa 	beq.w	80193f2 <_printf_float+0xc2>
 801969e:	f108 0801 	add.w	r8, r8, #1
 80196a2:	e7ec      	b.n	801967e <_printf_float+0x34e>
 80196a4:	4613      	mov	r3, r2
 80196a6:	4631      	mov	r1, r6
 80196a8:	4642      	mov	r2, r8
 80196aa:	4628      	mov	r0, r5
 80196ac:	47b8      	blx	r7
 80196ae:	3001      	adds	r0, #1
 80196b0:	d1c0      	bne.n	8019634 <_printf_float+0x304>
 80196b2:	e69e      	b.n	80193f2 <_printf_float+0xc2>
 80196b4:	2301      	movs	r3, #1
 80196b6:	4631      	mov	r1, r6
 80196b8:	4628      	mov	r0, r5
 80196ba:	9205      	str	r2, [sp, #20]
 80196bc:	47b8      	blx	r7
 80196be:	3001      	adds	r0, #1
 80196c0:	f43f ae97 	beq.w	80193f2 <_printf_float+0xc2>
 80196c4:	9a05      	ldr	r2, [sp, #20]
 80196c6:	f10b 0b01 	add.w	fp, fp, #1
 80196ca:	e7b9      	b.n	8019640 <_printf_float+0x310>
 80196cc:	ee18 3a10 	vmov	r3, s16
 80196d0:	4652      	mov	r2, sl
 80196d2:	4631      	mov	r1, r6
 80196d4:	4628      	mov	r0, r5
 80196d6:	47b8      	blx	r7
 80196d8:	3001      	adds	r0, #1
 80196da:	d1be      	bne.n	801965a <_printf_float+0x32a>
 80196dc:	e689      	b.n	80193f2 <_printf_float+0xc2>
 80196de:	9a05      	ldr	r2, [sp, #20]
 80196e0:	464b      	mov	r3, r9
 80196e2:	4442      	add	r2, r8
 80196e4:	4631      	mov	r1, r6
 80196e6:	4628      	mov	r0, r5
 80196e8:	47b8      	blx	r7
 80196ea:	3001      	adds	r0, #1
 80196ec:	d1c1      	bne.n	8019672 <_printf_float+0x342>
 80196ee:	e680      	b.n	80193f2 <_printf_float+0xc2>
 80196f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196f2:	2a01      	cmp	r2, #1
 80196f4:	dc01      	bgt.n	80196fa <_printf_float+0x3ca>
 80196f6:	07db      	lsls	r3, r3, #31
 80196f8:	d538      	bpl.n	801976c <_printf_float+0x43c>
 80196fa:	2301      	movs	r3, #1
 80196fc:	4642      	mov	r2, r8
 80196fe:	4631      	mov	r1, r6
 8019700:	4628      	mov	r0, r5
 8019702:	47b8      	blx	r7
 8019704:	3001      	adds	r0, #1
 8019706:	f43f ae74 	beq.w	80193f2 <_printf_float+0xc2>
 801970a:	ee18 3a10 	vmov	r3, s16
 801970e:	4652      	mov	r2, sl
 8019710:	4631      	mov	r1, r6
 8019712:	4628      	mov	r0, r5
 8019714:	47b8      	blx	r7
 8019716:	3001      	adds	r0, #1
 8019718:	f43f ae6b 	beq.w	80193f2 <_printf_float+0xc2>
 801971c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019720:	2200      	movs	r2, #0
 8019722:	2300      	movs	r3, #0
 8019724:	f7e7 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8019728:	b9d8      	cbnz	r0, 8019762 <_printf_float+0x432>
 801972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801972c:	f108 0201 	add.w	r2, r8, #1
 8019730:	3b01      	subs	r3, #1
 8019732:	4631      	mov	r1, r6
 8019734:	4628      	mov	r0, r5
 8019736:	47b8      	blx	r7
 8019738:	3001      	adds	r0, #1
 801973a:	d10e      	bne.n	801975a <_printf_float+0x42a>
 801973c:	e659      	b.n	80193f2 <_printf_float+0xc2>
 801973e:	2301      	movs	r3, #1
 8019740:	4652      	mov	r2, sl
 8019742:	4631      	mov	r1, r6
 8019744:	4628      	mov	r0, r5
 8019746:	47b8      	blx	r7
 8019748:	3001      	adds	r0, #1
 801974a:	f43f ae52 	beq.w	80193f2 <_printf_float+0xc2>
 801974e:	f108 0801 	add.w	r8, r8, #1
 8019752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019754:	3b01      	subs	r3, #1
 8019756:	4543      	cmp	r3, r8
 8019758:	dcf1      	bgt.n	801973e <_printf_float+0x40e>
 801975a:	464b      	mov	r3, r9
 801975c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019760:	e6dc      	b.n	801951c <_printf_float+0x1ec>
 8019762:	f04f 0800 	mov.w	r8, #0
 8019766:	f104 0a1a 	add.w	sl, r4, #26
 801976a:	e7f2      	b.n	8019752 <_printf_float+0x422>
 801976c:	2301      	movs	r3, #1
 801976e:	4642      	mov	r2, r8
 8019770:	e7df      	b.n	8019732 <_printf_float+0x402>
 8019772:	2301      	movs	r3, #1
 8019774:	464a      	mov	r2, r9
 8019776:	4631      	mov	r1, r6
 8019778:	4628      	mov	r0, r5
 801977a:	47b8      	blx	r7
 801977c:	3001      	adds	r0, #1
 801977e:	f43f ae38 	beq.w	80193f2 <_printf_float+0xc2>
 8019782:	f108 0801 	add.w	r8, r8, #1
 8019786:	68e3      	ldr	r3, [r4, #12]
 8019788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801978a:	1a5b      	subs	r3, r3, r1
 801978c:	4543      	cmp	r3, r8
 801978e:	dcf0      	bgt.n	8019772 <_printf_float+0x442>
 8019790:	e6fa      	b.n	8019588 <_printf_float+0x258>
 8019792:	f04f 0800 	mov.w	r8, #0
 8019796:	f104 0919 	add.w	r9, r4, #25
 801979a:	e7f4      	b.n	8019786 <_printf_float+0x456>

0801979c <_printf_common>:
 801979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a0:	4616      	mov	r6, r2
 80197a2:	4699      	mov	r9, r3
 80197a4:	688a      	ldr	r2, [r1, #8]
 80197a6:	690b      	ldr	r3, [r1, #16]
 80197a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197ac:	4293      	cmp	r3, r2
 80197ae:	bfb8      	it	lt
 80197b0:	4613      	movlt	r3, r2
 80197b2:	6033      	str	r3, [r6, #0]
 80197b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197b8:	4607      	mov	r7, r0
 80197ba:	460c      	mov	r4, r1
 80197bc:	b10a      	cbz	r2, 80197c2 <_printf_common+0x26>
 80197be:	3301      	adds	r3, #1
 80197c0:	6033      	str	r3, [r6, #0]
 80197c2:	6823      	ldr	r3, [r4, #0]
 80197c4:	0699      	lsls	r1, r3, #26
 80197c6:	bf42      	ittt	mi
 80197c8:	6833      	ldrmi	r3, [r6, #0]
 80197ca:	3302      	addmi	r3, #2
 80197cc:	6033      	strmi	r3, [r6, #0]
 80197ce:	6825      	ldr	r5, [r4, #0]
 80197d0:	f015 0506 	ands.w	r5, r5, #6
 80197d4:	d106      	bne.n	80197e4 <_printf_common+0x48>
 80197d6:	f104 0a19 	add.w	sl, r4, #25
 80197da:	68e3      	ldr	r3, [r4, #12]
 80197dc:	6832      	ldr	r2, [r6, #0]
 80197de:	1a9b      	subs	r3, r3, r2
 80197e0:	42ab      	cmp	r3, r5
 80197e2:	dc26      	bgt.n	8019832 <_printf_common+0x96>
 80197e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80197e8:	1e13      	subs	r3, r2, #0
 80197ea:	6822      	ldr	r2, [r4, #0]
 80197ec:	bf18      	it	ne
 80197ee:	2301      	movne	r3, #1
 80197f0:	0692      	lsls	r2, r2, #26
 80197f2:	d42b      	bmi.n	801984c <_printf_common+0xb0>
 80197f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80197f8:	4649      	mov	r1, r9
 80197fa:	4638      	mov	r0, r7
 80197fc:	47c0      	blx	r8
 80197fe:	3001      	adds	r0, #1
 8019800:	d01e      	beq.n	8019840 <_printf_common+0xa4>
 8019802:	6823      	ldr	r3, [r4, #0]
 8019804:	68e5      	ldr	r5, [r4, #12]
 8019806:	6832      	ldr	r2, [r6, #0]
 8019808:	f003 0306 	and.w	r3, r3, #6
 801980c:	2b04      	cmp	r3, #4
 801980e:	bf08      	it	eq
 8019810:	1aad      	subeq	r5, r5, r2
 8019812:	68a3      	ldr	r3, [r4, #8]
 8019814:	6922      	ldr	r2, [r4, #16]
 8019816:	bf0c      	ite	eq
 8019818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801981c:	2500      	movne	r5, #0
 801981e:	4293      	cmp	r3, r2
 8019820:	bfc4      	itt	gt
 8019822:	1a9b      	subgt	r3, r3, r2
 8019824:	18ed      	addgt	r5, r5, r3
 8019826:	2600      	movs	r6, #0
 8019828:	341a      	adds	r4, #26
 801982a:	42b5      	cmp	r5, r6
 801982c:	d11a      	bne.n	8019864 <_printf_common+0xc8>
 801982e:	2000      	movs	r0, #0
 8019830:	e008      	b.n	8019844 <_printf_common+0xa8>
 8019832:	2301      	movs	r3, #1
 8019834:	4652      	mov	r2, sl
 8019836:	4649      	mov	r1, r9
 8019838:	4638      	mov	r0, r7
 801983a:	47c0      	blx	r8
 801983c:	3001      	adds	r0, #1
 801983e:	d103      	bne.n	8019848 <_printf_common+0xac>
 8019840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019848:	3501      	adds	r5, #1
 801984a:	e7c6      	b.n	80197da <_printf_common+0x3e>
 801984c:	18e1      	adds	r1, r4, r3
 801984e:	1c5a      	adds	r2, r3, #1
 8019850:	2030      	movs	r0, #48	; 0x30
 8019852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019856:	4422      	add	r2, r4
 8019858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801985c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019860:	3302      	adds	r3, #2
 8019862:	e7c7      	b.n	80197f4 <_printf_common+0x58>
 8019864:	2301      	movs	r3, #1
 8019866:	4622      	mov	r2, r4
 8019868:	4649      	mov	r1, r9
 801986a:	4638      	mov	r0, r7
 801986c:	47c0      	blx	r8
 801986e:	3001      	adds	r0, #1
 8019870:	d0e6      	beq.n	8019840 <_printf_common+0xa4>
 8019872:	3601      	adds	r6, #1
 8019874:	e7d9      	b.n	801982a <_printf_common+0x8e>
	...

08019878 <_printf_i>:
 8019878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801987c:	460c      	mov	r4, r1
 801987e:	4691      	mov	r9, r2
 8019880:	7e27      	ldrb	r7, [r4, #24]
 8019882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019884:	2f78      	cmp	r7, #120	; 0x78
 8019886:	4680      	mov	r8, r0
 8019888:	469a      	mov	sl, r3
 801988a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801988e:	d807      	bhi.n	80198a0 <_printf_i+0x28>
 8019890:	2f62      	cmp	r7, #98	; 0x62
 8019892:	d80a      	bhi.n	80198aa <_printf_i+0x32>
 8019894:	2f00      	cmp	r7, #0
 8019896:	f000 80d8 	beq.w	8019a4a <_printf_i+0x1d2>
 801989a:	2f58      	cmp	r7, #88	; 0x58
 801989c:	f000 80a3 	beq.w	80199e6 <_printf_i+0x16e>
 80198a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80198a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80198a8:	e03a      	b.n	8019920 <_printf_i+0xa8>
 80198aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80198ae:	2b15      	cmp	r3, #21
 80198b0:	d8f6      	bhi.n	80198a0 <_printf_i+0x28>
 80198b2:	a001      	add	r0, pc, #4	; (adr r0, 80198b8 <_printf_i+0x40>)
 80198b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80198b8:	08019911 	.word	0x08019911
 80198bc:	08019925 	.word	0x08019925
 80198c0:	080198a1 	.word	0x080198a1
 80198c4:	080198a1 	.word	0x080198a1
 80198c8:	080198a1 	.word	0x080198a1
 80198cc:	080198a1 	.word	0x080198a1
 80198d0:	08019925 	.word	0x08019925
 80198d4:	080198a1 	.word	0x080198a1
 80198d8:	080198a1 	.word	0x080198a1
 80198dc:	080198a1 	.word	0x080198a1
 80198e0:	080198a1 	.word	0x080198a1
 80198e4:	08019a31 	.word	0x08019a31
 80198e8:	08019955 	.word	0x08019955
 80198ec:	08019a13 	.word	0x08019a13
 80198f0:	080198a1 	.word	0x080198a1
 80198f4:	080198a1 	.word	0x080198a1
 80198f8:	08019a53 	.word	0x08019a53
 80198fc:	080198a1 	.word	0x080198a1
 8019900:	08019955 	.word	0x08019955
 8019904:	080198a1 	.word	0x080198a1
 8019908:	080198a1 	.word	0x080198a1
 801990c:	08019a1b 	.word	0x08019a1b
 8019910:	680b      	ldr	r3, [r1, #0]
 8019912:	1d1a      	adds	r2, r3, #4
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	600a      	str	r2, [r1, #0]
 8019918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801991c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019920:	2301      	movs	r3, #1
 8019922:	e0a3      	b.n	8019a6c <_printf_i+0x1f4>
 8019924:	6825      	ldr	r5, [r4, #0]
 8019926:	6808      	ldr	r0, [r1, #0]
 8019928:	062e      	lsls	r6, r5, #24
 801992a:	f100 0304 	add.w	r3, r0, #4
 801992e:	d50a      	bpl.n	8019946 <_printf_i+0xce>
 8019930:	6805      	ldr	r5, [r0, #0]
 8019932:	600b      	str	r3, [r1, #0]
 8019934:	2d00      	cmp	r5, #0
 8019936:	da03      	bge.n	8019940 <_printf_i+0xc8>
 8019938:	232d      	movs	r3, #45	; 0x2d
 801993a:	426d      	negs	r5, r5
 801993c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019940:	485e      	ldr	r0, [pc, #376]	; (8019abc <_printf_i+0x244>)
 8019942:	230a      	movs	r3, #10
 8019944:	e019      	b.n	801997a <_printf_i+0x102>
 8019946:	f015 0f40 	tst.w	r5, #64	; 0x40
 801994a:	6805      	ldr	r5, [r0, #0]
 801994c:	600b      	str	r3, [r1, #0]
 801994e:	bf18      	it	ne
 8019950:	b22d      	sxthne	r5, r5
 8019952:	e7ef      	b.n	8019934 <_printf_i+0xbc>
 8019954:	680b      	ldr	r3, [r1, #0]
 8019956:	6825      	ldr	r5, [r4, #0]
 8019958:	1d18      	adds	r0, r3, #4
 801995a:	6008      	str	r0, [r1, #0]
 801995c:	0628      	lsls	r0, r5, #24
 801995e:	d501      	bpl.n	8019964 <_printf_i+0xec>
 8019960:	681d      	ldr	r5, [r3, #0]
 8019962:	e002      	b.n	801996a <_printf_i+0xf2>
 8019964:	0669      	lsls	r1, r5, #25
 8019966:	d5fb      	bpl.n	8019960 <_printf_i+0xe8>
 8019968:	881d      	ldrh	r5, [r3, #0]
 801996a:	4854      	ldr	r0, [pc, #336]	; (8019abc <_printf_i+0x244>)
 801996c:	2f6f      	cmp	r7, #111	; 0x6f
 801996e:	bf0c      	ite	eq
 8019970:	2308      	moveq	r3, #8
 8019972:	230a      	movne	r3, #10
 8019974:	2100      	movs	r1, #0
 8019976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801997a:	6866      	ldr	r6, [r4, #4]
 801997c:	60a6      	str	r6, [r4, #8]
 801997e:	2e00      	cmp	r6, #0
 8019980:	bfa2      	ittt	ge
 8019982:	6821      	ldrge	r1, [r4, #0]
 8019984:	f021 0104 	bicge.w	r1, r1, #4
 8019988:	6021      	strge	r1, [r4, #0]
 801998a:	b90d      	cbnz	r5, 8019990 <_printf_i+0x118>
 801998c:	2e00      	cmp	r6, #0
 801998e:	d04d      	beq.n	8019a2c <_printf_i+0x1b4>
 8019990:	4616      	mov	r6, r2
 8019992:	fbb5 f1f3 	udiv	r1, r5, r3
 8019996:	fb03 5711 	mls	r7, r3, r1, r5
 801999a:	5dc7      	ldrb	r7, [r0, r7]
 801999c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80199a0:	462f      	mov	r7, r5
 80199a2:	42bb      	cmp	r3, r7
 80199a4:	460d      	mov	r5, r1
 80199a6:	d9f4      	bls.n	8019992 <_printf_i+0x11a>
 80199a8:	2b08      	cmp	r3, #8
 80199aa:	d10b      	bne.n	80199c4 <_printf_i+0x14c>
 80199ac:	6823      	ldr	r3, [r4, #0]
 80199ae:	07df      	lsls	r7, r3, #31
 80199b0:	d508      	bpl.n	80199c4 <_printf_i+0x14c>
 80199b2:	6923      	ldr	r3, [r4, #16]
 80199b4:	6861      	ldr	r1, [r4, #4]
 80199b6:	4299      	cmp	r1, r3
 80199b8:	bfde      	ittt	le
 80199ba:	2330      	movle	r3, #48	; 0x30
 80199bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80199c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80199c4:	1b92      	subs	r2, r2, r6
 80199c6:	6122      	str	r2, [r4, #16]
 80199c8:	f8cd a000 	str.w	sl, [sp]
 80199cc:	464b      	mov	r3, r9
 80199ce:	aa03      	add	r2, sp, #12
 80199d0:	4621      	mov	r1, r4
 80199d2:	4640      	mov	r0, r8
 80199d4:	f7ff fee2 	bl	801979c <_printf_common>
 80199d8:	3001      	adds	r0, #1
 80199da:	d14c      	bne.n	8019a76 <_printf_i+0x1fe>
 80199dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80199e0:	b004      	add	sp, #16
 80199e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199e6:	4835      	ldr	r0, [pc, #212]	; (8019abc <_printf_i+0x244>)
 80199e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80199ec:	6823      	ldr	r3, [r4, #0]
 80199ee:	680e      	ldr	r6, [r1, #0]
 80199f0:	061f      	lsls	r7, r3, #24
 80199f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80199f6:	600e      	str	r6, [r1, #0]
 80199f8:	d514      	bpl.n	8019a24 <_printf_i+0x1ac>
 80199fa:	07d9      	lsls	r1, r3, #31
 80199fc:	bf44      	itt	mi
 80199fe:	f043 0320 	orrmi.w	r3, r3, #32
 8019a02:	6023      	strmi	r3, [r4, #0]
 8019a04:	b91d      	cbnz	r5, 8019a0e <_printf_i+0x196>
 8019a06:	6823      	ldr	r3, [r4, #0]
 8019a08:	f023 0320 	bic.w	r3, r3, #32
 8019a0c:	6023      	str	r3, [r4, #0]
 8019a0e:	2310      	movs	r3, #16
 8019a10:	e7b0      	b.n	8019974 <_printf_i+0xfc>
 8019a12:	6823      	ldr	r3, [r4, #0]
 8019a14:	f043 0320 	orr.w	r3, r3, #32
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	2378      	movs	r3, #120	; 0x78
 8019a1c:	4828      	ldr	r0, [pc, #160]	; (8019ac0 <_printf_i+0x248>)
 8019a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019a22:	e7e3      	b.n	80199ec <_printf_i+0x174>
 8019a24:	065e      	lsls	r6, r3, #25
 8019a26:	bf48      	it	mi
 8019a28:	b2ad      	uxthmi	r5, r5
 8019a2a:	e7e6      	b.n	80199fa <_printf_i+0x182>
 8019a2c:	4616      	mov	r6, r2
 8019a2e:	e7bb      	b.n	80199a8 <_printf_i+0x130>
 8019a30:	680b      	ldr	r3, [r1, #0]
 8019a32:	6826      	ldr	r6, [r4, #0]
 8019a34:	6960      	ldr	r0, [r4, #20]
 8019a36:	1d1d      	adds	r5, r3, #4
 8019a38:	600d      	str	r5, [r1, #0]
 8019a3a:	0635      	lsls	r5, r6, #24
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	d501      	bpl.n	8019a44 <_printf_i+0x1cc>
 8019a40:	6018      	str	r0, [r3, #0]
 8019a42:	e002      	b.n	8019a4a <_printf_i+0x1d2>
 8019a44:	0671      	lsls	r1, r6, #25
 8019a46:	d5fb      	bpl.n	8019a40 <_printf_i+0x1c8>
 8019a48:	8018      	strh	r0, [r3, #0]
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	6123      	str	r3, [r4, #16]
 8019a4e:	4616      	mov	r6, r2
 8019a50:	e7ba      	b.n	80199c8 <_printf_i+0x150>
 8019a52:	680b      	ldr	r3, [r1, #0]
 8019a54:	1d1a      	adds	r2, r3, #4
 8019a56:	600a      	str	r2, [r1, #0]
 8019a58:	681e      	ldr	r6, [r3, #0]
 8019a5a:	6862      	ldr	r2, [r4, #4]
 8019a5c:	2100      	movs	r1, #0
 8019a5e:	4630      	mov	r0, r6
 8019a60:	f7e6 fbbe 	bl	80001e0 <memchr>
 8019a64:	b108      	cbz	r0, 8019a6a <_printf_i+0x1f2>
 8019a66:	1b80      	subs	r0, r0, r6
 8019a68:	6060      	str	r0, [r4, #4]
 8019a6a:	6863      	ldr	r3, [r4, #4]
 8019a6c:	6123      	str	r3, [r4, #16]
 8019a6e:	2300      	movs	r3, #0
 8019a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a74:	e7a8      	b.n	80199c8 <_printf_i+0x150>
 8019a76:	6923      	ldr	r3, [r4, #16]
 8019a78:	4632      	mov	r2, r6
 8019a7a:	4649      	mov	r1, r9
 8019a7c:	4640      	mov	r0, r8
 8019a7e:	47d0      	blx	sl
 8019a80:	3001      	adds	r0, #1
 8019a82:	d0ab      	beq.n	80199dc <_printf_i+0x164>
 8019a84:	6823      	ldr	r3, [r4, #0]
 8019a86:	079b      	lsls	r3, r3, #30
 8019a88:	d413      	bmi.n	8019ab2 <_printf_i+0x23a>
 8019a8a:	68e0      	ldr	r0, [r4, #12]
 8019a8c:	9b03      	ldr	r3, [sp, #12]
 8019a8e:	4298      	cmp	r0, r3
 8019a90:	bfb8      	it	lt
 8019a92:	4618      	movlt	r0, r3
 8019a94:	e7a4      	b.n	80199e0 <_printf_i+0x168>
 8019a96:	2301      	movs	r3, #1
 8019a98:	4632      	mov	r2, r6
 8019a9a:	4649      	mov	r1, r9
 8019a9c:	4640      	mov	r0, r8
 8019a9e:	47d0      	blx	sl
 8019aa0:	3001      	adds	r0, #1
 8019aa2:	d09b      	beq.n	80199dc <_printf_i+0x164>
 8019aa4:	3501      	adds	r5, #1
 8019aa6:	68e3      	ldr	r3, [r4, #12]
 8019aa8:	9903      	ldr	r1, [sp, #12]
 8019aaa:	1a5b      	subs	r3, r3, r1
 8019aac:	42ab      	cmp	r3, r5
 8019aae:	dcf2      	bgt.n	8019a96 <_printf_i+0x21e>
 8019ab0:	e7eb      	b.n	8019a8a <_printf_i+0x212>
 8019ab2:	2500      	movs	r5, #0
 8019ab4:	f104 0619 	add.w	r6, r4, #25
 8019ab8:	e7f5      	b.n	8019aa6 <_printf_i+0x22e>
 8019aba:	bf00      	nop
 8019abc:	0801f6ea 	.word	0x0801f6ea
 8019ac0:	0801f6fb 	.word	0x0801f6fb

08019ac4 <_scanf_float>:
 8019ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac8:	b087      	sub	sp, #28
 8019aca:	4617      	mov	r7, r2
 8019acc:	9303      	str	r3, [sp, #12]
 8019ace:	688b      	ldr	r3, [r1, #8]
 8019ad0:	1e5a      	subs	r2, r3, #1
 8019ad2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019ad6:	bf83      	ittte	hi
 8019ad8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019adc:	195b      	addhi	r3, r3, r5
 8019ade:	9302      	strhi	r3, [sp, #8]
 8019ae0:	2300      	movls	r3, #0
 8019ae2:	bf86      	itte	hi
 8019ae4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019ae8:	608b      	strhi	r3, [r1, #8]
 8019aea:	9302      	strls	r3, [sp, #8]
 8019aec:	680b      	ldr	r3, [r1, #0]
 8019aee:	468b      	mov	fp, r1
 8019af0:	2500      	movs	r5, #0
 8019af2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019af6:	f84b 3b1c 	str.w	r3, [fp], #28
 8019afa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019afe:	4680      	mov	r8, r0
 8019b00:	460c      	mov	r4, r1
 8019b02:	465e      	mov	r6, fp
 8019b04:	46aa      	mov	sl, r5
 8019b06:	46a9      	mov	r9, r5
 8019b08:	9501      	str	r5, [sp, #4]
 8019b0a:	68a2      	ldr	r2, [r4, #8]
 8019b0c:	b152      	cbz	r2, 8019b24 <_scanf_float+0x60>
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	2b4e      	cmp	r3, #78	; 0x4e
 8019b14:	d864      	bhi.n	8019be0 <_scanf_float+0x11c>
 8019b16:	2b40      	cmp	r3, #64	; 0x40
 8019b18:	d83c      	bhi.n	8019b94 <_scanf_float+0xd0>
 8019b1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019b1e:	b2c8      	uxtb	r0, r1
 8019b20:	280e      	cmp	r0, #14
 8019b22:	d93a      	bls.n	8019b9a <_scanf_float+0xd6>
 8019b24:	f1b9 0f00 	cmp.w	r9, #0
 8019b28:	d003      	beq.n	8019b32 <_scanf_float+0x6e>
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019b30:	6023      	str	r3, [r4, #0]
 8019b32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019b36:	f1ba 0f01 	cmp.w	sl, #1
 8019b3a:	f200 8113 	bhi.w	8019d64 <_scanf_float+0x2a0>
 8019b3e:	455e      	cmp	r6, fp
 8019b40:	f200 8105 	bhi.w	8019d4e <_scanf_float+0x28a>
 8019b44:	2501      	movs	r5, #1
 8019b46:	4628      	mov	r0, r5
 8019b48:	b007      	add	sp, #28
 8019b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019b52:	2a0d      	cmp	r2, #13
 8019b54:	d8e6      	bhi.n	8019b24 <_scanf_float+0x60>
 8019b56:	a101      	add	r1, pc, #4	; (adr r1, 8019b5c <_scanf_float+0x98>)
 8019b58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019b5c:	08019c9b 	.word	0x08019c9b
 8019b60:	08019b25 	.word	0x08019b25
 8019b64:	08019b25 	.word	0x08019b25
 8019b68:	08019b25 	.word	0x08019b25
 8019b6c:	08019cfb 	.word	0x08019cfb
 8019b70:	08019cd3 	.word	0x08019cd3
 8019b74:	08019b25 	.word	0x08019b25
 8019b78:	08019b25 	.word	0x08019b25
 8019b7c:	08019ca9 	.word	0x08019ca9
 8019b80:	08019b25 	.word	0x08019b25
 8019b84:	08019b25 	.word	0x08019b25
 8019b88:	08019b25 	.word	0x08019b25
 8019b8c:	08019b25 	.word	0x08019b25
 8019b90:	08019c61 	.word	0x08019c61
 8019b94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019b98:	e7db      	b.n	8019b52 <_scanf_float+0x8e>
 8019b9a:	290e      	cmp	r1, #14
 8019b9c:	d8c2      	bhi.n	8019b24 <_scanf_float+0x60>
 8019b9e:	a001      	add	r0, pc, #4	; (adr r0, 8019ba4 <_scanf_float+0xe0>)
 8019ba0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019ba4:	08019c53 	.word	0x08019c53
 8019ba8:	08019b25 	.word	0x08019b25
 8019bac:	08019c53 	.word	0x08019c53
 8019bb0:	08019ce7 	.word	0x08019ce7
 8019bb4:	08019b25 	.word	0x08019b25
 8019bb8:	08019c01 	.word	0x08019c01
 8019bbc:	08019c3d 	.word	0x08019c3d
 8019bc0:	08019c3d 	.word	0x08019c3d
 8019bc4:	08019c3d 	.word	0x08019c3d
 8019bc8:	08019c3d 	.word	0x08019c3d
 8019bcc:	08019c3d 	.word	0x08019c3d
 8019bd0:	08019c3d 	.word	0x08019c3d
 8019bd4:	08019c3d 	.word	0x08019c3d
 8019bd8:	08019c3d 	.word	0x08019c3d
 8019bdc:	08019c3d 	.word	0x08019c3d
 8019be0:	2b6e      	cmp	r3, #110	; 0x6e
 8019be2:	d809      	bhi.n	8019bf8 <_scanf_float+0x134>
 8019be4:	2b60      	cmp	r3, #96	; 0x60
 8019be6:	d8b2      	bhi.n	8019b4e <_scanf_float+0x8a>
 8019be8:	2b54      	cmp	r3, #84	; 0x54
 8019bea:	d077      	beq.n	8019cdc <_scanf_float+0x218>
 8019bec:	2b59      	cmp	r3, #89	; 0x59
 8019bee:	d199      	bne.n	8019b24 <_scanf_float+0x60>
 8019bf0:	2d07      	cmp	r5, #7
 8019bf2:	d197      	bne.n	8019b24 <_scanf_float+0x60>
 8019bf4:	2508      	movs	r5, #8
 8019bf6:	e029      	b.n	8019c4c <_scanf_float+0x188>
 8019bf8:	2b74      	cmp	r3, #116	; 0x74
 8019bfa:	d06f      	beq.n	8019cdc <_scanf_float+0x218>
 8019bfc:	2b79      	cmp	r3, #121	; 0x79
 8019bfe:	e7f6      	b.n	8019bee <_scanf_float+0x12a>
 8019c00:	6821      	ldr	r1, [r4, #0]
 8019c02:	05c8      	lsls	r0, r1, #23
 8019c04:	d51a      	bpl.n	8019c3c <_scanf_float+0x178>
 8019c06:	9b02      	ldr	r3, [sp, #8]
 8019c08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019c0c:	6021      	str	r1, [r4, #0]
 8019c0e:	f109 0901 	add.w	r9, r9, #1
 8019c12:	b11b      	cbz	r3, 8019c1c <_scanf_float+0x158>
 8019c14:	3b01      	subs	r3, #1
 8019c16:	3201      	adds	r2, #1
 8019c18:	9302      	str	r3, [sp, #8]
 8019c1a:	60a2      	str	r2, [r4, #8]
 8019c1c:	68a3      	ldr	r3, [r4, #8]
 8019c1e:	3b01      	subs	r3, #1
 8019c20:	60a3      	str	r3, [r4, #8]
 8019c22:	6923      	ldr	r3, [r4, #16]
 8019c24:	3301      	adds	r3, #1
 8019c26:	6123      	str	r3, [r4, #16]
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	3b01      	subs	r3, #1
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	607b      	str	r3, [r7, #4]
 8019c30:	f340 8084 	ble.w	8019d3c <_scanf_float+0x278>
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	3301      	adds	r3, #1
 8019c38:	603b      	str	r3, [r7, #0]
 8019c3a:	e766      	b.n	8019b0a <_scanf_float+0x46>
 8019c3c:	eb1a 0f05 	cmn.w	sl, r5
 8019c40:	f47f af70 	bne.w	8019b24 <_scanf_float+0x60>
 8019c44:	6822      	ldr	r2, [r4, #0]
 8019c46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019c4a:	6022      	str	r2, [r4, #0]
 8019c4c:	f806 3b01 	strb.w	r3, [r6], #1
 8019c50:	e7e4      	b.n	8019c1c <_scanf_float+0x158>
 8019c52:	6822      	ldr	r2, [r4, #0]
 8019c54:	0610      	lsls	r0, r2, #24
 8019c56:	f57f af65 	bpl.w	8019b24 <_scanf_float+0x60>
 8019c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019c5e:	e7f4      	b.n	8019c4a <_scanf_float+0x186>
 8019c60:	f1ba 0f00 	cmp.w	sl, #0
 8019c64:	d10e      	bne.n	8019c84 <_scanf_float+0x1c0>
 8019c66:	f1b9 0f00 	cmp.w	r9, #0
 8019c6a:	d10e      	bne.n	8019c8a <_scanf_float+0x1c6>
 8019c6c:	6822      	ldr	r2, [r4, #0]
 8019c6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019c72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019c76:	d108      	bne.n	8019c8a <_scanf_float+0x1c6>
 8019c78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019c7c:	6022      	str	r2, [r4, #0]
 8019c7e:	f04f 0a01 	mov.w	sl, #1
 8019c82:	e7e3      	b.n	8019c4c <_scanf_float+0x188>
 8019c84:	f1ba 0f02 	cmp.w	sl, #2
 8019c88:	d055      	beq.n	8019d36 <_scanf_float+0x272>
 8019c8a:	2d01      	cmp	r5, #1
 8019c8c:	d002      	beq.n	8019c94 <_scanf_float+0x1d0>
 8019c8e:	2d04      	cmp	r5, #4
 8019c90:	f47f af48 	bne.w	8019b24 <_scanf_float+0x60>
 8019c94:	3501      	adds	r5, #1
 8019c96:	b2ed      	uxtb	r5, r5
 8019c98:	e7d8      	b.n	8019c4c <_scanf_float+0x188>
 8019c9a:	f1ba 0f01 	cmp.w	sl, #1
 8019c9e:	f47f af41 	bne.w	8019b24 <_scanf_float+0x60>
 8019ca2:	f04f 0a02 	mov.w	sl, #2
 8019ca6:	e7d1      	b.n	8019c4c <_scanf_float+0x188>
 8019ca8:	b97d      	cbnz	r5, 8019cca <_scanf_float+0x206>
 8019caa:	f1b9 0f00 	cmp.w	r9, #0
 8019cae:	f47f af3c 	bne.w	8019b2a <_scanf_float+0x66>
 8019cb2:	6822      	ldr	r2, [r4, #0]
 8019cb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019cb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019cbc:	f47f af39 	bne.w	8019b32 <_scanf_float+0x6e>
 8019cc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019cc4:	6022      	str	r2, [r4, #0]
 8019cc6:	2501      	movs	r5, #1
 8019cc8:	e7c0      	b.n	8019c4c <_scanf_float+0x188>
 8019cca:	2d03      	cmp	r5, #3
 8019ccc:	d0e2      	beq.n	8019c94 <_scanf_float+0x1d0>
 8019cce:	2d05      	cmp	r5, #5
 8019cd0:	e7de      	b.n	8019c90 <_scanf_float+0x1cc>
 8019cd2:	2d02      	cmp	r5, #2
 8019cd4:	f47f af26 	bne.w	8019b24 <_scanf_float+0x60>
 8019cd8:	2503      	movs	r5, #3
 8019cda:	e7b7      	b.n	8019c4c <_scanf_float+0x188>
 8019cdc:	2d06      	cmp	r5, #6
 8019cde:	f47f af21 	bne.w	8019b24 <_scanf_float+0x60>
 8019ce2:	2507      	movs	r5, #7
 8019ce4:	e7b2      	b.n	8019c4c <_scanf_float+0x188>
 8019ce6:	6822      	ldr	r2, [r4, #0]
 8019ce8:	0591      	lsls	r1, r2, #22
 8019cea:	f57f af1b 	bpl.w	8019b24 <_scanf_float+0x60>
 8019cee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019cf2:	6022      	str	r2, [r4, #0]
 8019cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8019cf8:	e7a8      	b.n	8019c4c <_scanf_float+0x188>
 8019cfa:	6822      	ldr	r2, [r4, #0]
 8019cfc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019d00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019d04:	d006      	beq.n	8019d14 <_scanf_float+0x250>
 8019d06:	0550      	lsls	r0, r2, #21
 8019d08:	f57f af0c 	bpl.w	8019b24 <_scanf_float+0x60>
 8019d0c:	f1b9 0f00 	cmp.w	r9, #0
 8019d10:	f43f af0f 	beq.w	8019b32 <_scanf_float+0x6e>
 8019d14:	0591      	lsls	r1, r2, #22
 8019d16:	bf58      	it	pl
 8019d18:	9901      	ldrpl	r1, [sp, #4]
 8019d1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019d1e:	bf58      	it	pl
 8019d20:	eba9 0101 	subpl.w	r1, r9, r1
 8019d24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019d28:	bf58      	it	pl
 8019d2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019d2e:	6022      	str	r2, [r4, #0]
 8019d30:	f04f 0900 	mov.w	r9, #0
 8019d34:	e78a      	b.n	8019c4c <_scanf_float+0x188>
 8019d36:	f04f 0a03 	mov.w	sl, #3
 8019d3a:	e787      	b.n	8019c4c <_scanf_float+0x188>
 8019d3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019d40:	4639      	mov	r1, r7
 8019d42:	4640      	mov	r0, r8
 8019d44:	4798      	blx	r3
 8019d46:	2800      	cmp	r0, #0
 8019d48:	f43f aedf 	beq.w	8019b0a <_scanf_float+0x46>
 8019d4c:	e6ea      	b.n	8019b24 <_scanf_float+0x60>
 8019d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d56:	463a      	mov	r2, r7
 8019d58:	4640      	mov	r0, r8
 8019d5a:	4798      	blx	r3
 8019d5c:	6923      	ldr	r3, [r4, #16]
 8019d5e:	3b01      	subs	r3, #1
 8019d60:	6123      	str	r3, [r4, #16]
 8019d62:	e6ec      	b.n	8019b3e <_scanf_float+0x7a>
 8019d64:	1e6b      	subs	r3, r5, #1
 8019d66:	2b06      	cmp	r3, #6
 8019d68:	d825      	bhi.n	8019db6 <_scanf_float+0x2f2>
 8019d6a:	2d02      	cmp	r5, #2
 8019d6c:	d836      	bhi.n	8019ddc <_scanf_float+0x318>
 8019d6e:	455e      	cmp	r6, fp
 8019d70:	f67f aee8 	bls.w	8019b44 <_scanf_float+0x80>
 8019d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d7c:	463a      	mov	r2, r7
 8019d7e:	4640      	mov	r0, r8
 8019d80:	4798      	blx	r3
 8019d82:	6923      	ldr	r3, [r4, #16]
 8019d84:	3b01      	subs	r3, #1
 8019d86:	6123      	str	r3, [r4, #16]
 8019d88:	e7f1      	b.n	8019d6e <_scanf_float+0x2aa>
 8019d8a:	9802      	ldr	r0, [sp, #8]
 8019d8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019d94:	9002      	str	r0, [sp, #8]
 8019d96:	463a      	mov	r2, r7
 8019d98:	4640      	mov	r0, r8
 8019d9a:	4798      	blx	r3
 8019d9c:	6923      	ldr	r3, [r4, #16]
 8019d9e:	3b01      	subs	r3, #1
 8019da0:	6123      	str	r3, [r4, #16]
 8019da2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019da6:	fa5f fa8a 	uxtb.w	sl, sl
 8019daa:	f1ba 0f02 	cmp.w	sl, #2
 8019dae:	d1ec      	bne.n	8019d8a <_scanf_float+0x2c6>
 8019db0:	3d03      	subs	r5, #3
 8019db2:	b2ed      	uxtb	r5, r5
 8019db4:	1b76      	subs	r6, r6, r5
 8019db6:	6823      	ldr	r3, [r4, #0]
 8019db8:	05da      	lsls	r2, r3, #23
 8019dba:	d52f      	bpl.n	8019e1c <_scanf_float+0x358>
 8019dbc:	055b      	lsls	r3, r3, #21
 8019dbe:	d510      	bpl.n	8019de2 <_scanf_float+0x31e>
 8019dc0:	455e      	cmp	r6, fp
 8019dc2:	f67f aebf 	bls.w	8019b44 <_scanf_float+0x80>
 8019dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019dce:	463a      	mov	r2, r7
 8019dd0:	4640      	mov	r0, r8
 8019dd2:	4798      	blx	r3
 8019dd4:	6923      	ldr	r3, [r4, #16]
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	6123      	str	r3, [r4, #16]
 8019dda:	e7f1      	b.n	8019dc0 <_scanf_float+0x2fc>
 8019ddc:	46aa      	mov	sl, r5
 8019dde:	9602      	str	r6, [sp, #8]
 8019de0:	e7df      	b.n	8019da2 <_scanf_float+0x2de>
 8019de2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019de6:	6923      	ldr	r3, [r4, #16]
 8019de8:	2965      	cmp	r1, #101	; 0x65
 8019dea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019dee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8019df2:	6123      	str	r3, [r4, #16]
 8019df4:	d00c      	beq.n	8019e10 <_scanf_float+0x34c>
 8019df6:	2945      	cmp	r1, #69	; 0x45
 8019df8:	d00a      	beq.n	8019e10 <_scanf_float+0x34c>
 8019dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019dfe:	463a      	mov	r2, r7
 8019e00:	4640      	mov	r0, r8
 8019e02:	4798      	blx	r3
 8019e04:	6923      	ldr	r3, [r4, #16]
 8019e06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019e0a:	3b01      	subs	r3, #1
 8019e0c:	1eb5      	subs	r5, r6, #2
 8019e0e:	6123      	str	r3, [r4, #16]
 8019e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e14:	463a      	mov	r2, r7
 8019e16:	4640      	mov	r0, r8
 8019e18:	4798      	blx	r3
 8019e1a:	462e      	mov	r6, r5
 8019e1c:	6825      	ldr	r5, [r4, #0]
 8019e1e:	f015 0510 	ands.w	r5, r5, #16
 8019e22:	d158      	bne.n	8019ed6 <_scanf_float+0x412>
 8019e24:	7035      	strb	r5, [r6, #0]
 8019e26:	6823      	ldr	r3, [r4, #0]
 8019e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e30:	d11c      	bne.n	8019e6c <_scanf_float+0x3a8>
 8019e32:	9b01      	ldr	r3, [sp, #4]
 8019e34:	454b      	cmp	r3, r9
 8019e36:	eba3 0209 	sub.w	r2, r3, r9
 8019e3a:	d124      	bne.n	8019e86 <_scanf_float+0x3c2>
 8019e3c:	2200      	movs	r2, #0
 8019e3e:	4659      	mov	r1, fp
 8019e40:	4640      	mov	r0, r8
 8019e42:	f000 ff9f 	bl	801ad84 <_strtod_r>
 8019e46:	9b03      	ldr	r3, [sp, #12]
 8019e48:	6821      	ldr	r1, [r4, #0]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	f011 0f02 	tst.w	r1, #2
 8019e50:	ec57 6b10 	vmov	r6, r7, d0
 8019e54:	f103 0204 	add.w	r2, r3, #4
 8019e58:	d020      	beq.n	8019e9c <_scanf_float+0x3d8>
 8019e5a:	9903      	ldr	r1, [sp, #12]
 8019e5c:	600a      	str	r2, [r1, #0]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	e9c3 6700 	strd	r6, r7, [r3]
 8019e64:	68e3      	ldr	r3, [r4, #12]
 8019e66:	3301      	adds	r3, #1
 8019e68:	60e3      	str	r3, [r4, #12]
 8019e6a:	e66c      	b.n	8019b46 <_scanf_float+0x82>
 8019e6c:	9b04      	ldr	r3, [sp, #16]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d0e4      	beq.n	8019e3c <_scanf_float+0x378>
 8019e72:	9905      	ldr	r1, [sp, #20]
 8019e74:	230a      	movs	r3, #10
 8019e76:	462a      	mov	r2, r5
 8019e78:	3101      	adds	r1, #1
 8019e7a:	4640      	mov	r0, r8
 8019e7c:	f001 f80c 	bl	801ae98 <_strtol_r>
 8019e80:	9b04      	ldr	r3, [sp, #16]
 8019e82:	9e05      	ldr	r6, [sp, #20]
 8019e84:	1ac2      	subs	r2, r0, r3
 8019e86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019e8a:	429e      	cmp	r6, r3
 8019e8c:	bf28      	it	cs
 8019e8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019e92:	4912      	ldr	r1, [pc, #72]	; (8019edc <_scanf_float+0x418>)
 8019e94:	4630      	mov	r0, r6
 8019e96:	f000 f8db 	bl	801a050 <siprintf>
 8019e9a:	e7cf      	b.n	8019e3c <_scanf_float+0x378>
 8019e9c:	f011 0f04 	tst.w	r1, #4
 8019ea0:	9903      	ldr	r1, [sp, #12]
 8019ea2:	600a      	str	r2, [r1, #0]
 8019ea4:	d1db      	bne.n	8019e5e <_scanf_float+0x39a>
 8019ea6:	f8d3 8000 	ldr.w	r8, [r3]
 8019eaa:	ee10 2a10 	vmov	r2, s0
 8019eae:	ee10 0a10 	vmov	r0, s0
 8019eb2:	463b      	mov	r3, r7
 8019eb4:	4639      	mov	r1, r7
 8019eb6:	f7e6 fe39 	bl	8000b2c <__aeabi_dcmpun>
 8019eba:	b128      	cbz	r0, 8019ec8 <_scanf_float+0x404>
 8019ebc:	4808      	ldr	r0, [pc, #32]	; (8019ee0 <_scanf_float+0x41c>)
 8019ebe:	f000 f84f 	bl	8019f60 <nanf>
 8019ec2:	ed88 0a00 	vstr	s0, [r8]
 8019ec6:	e7cd      	b.n	8019e64 <_scanf_float+0x3a0>
 8019ec8:	4630      	mov	r0, r6
 8019eca:	4639      	mov	r1, r7
 8019ecc:	f7e6 fe8c 	bl	8000be8 <__aeabi_d2f>
 8019ed0:	f8c8 0000 	str.w	r0, [r8]
 8019ed4:	e7c6      	b.n	8019e64 <_scanf_float+0x3a0>
 8019ed6:	2500      	movs	r5, #0
 8019ed8:	e635      	b.n	8019b46 <_scanf_float+0x82>
 8019eda:	bf00      	nop
 8019edc:	0801f70c 	.word	0x0801f70c
 8019ee0:	0801fb28 	.word	0x0801fb28

08019ee4 <realloc>:
 8019ee4:	4b02      	ldr	r3, [pc, #8]	; (8019ef0 <realloc+0xc>)
 8019ee6:	460a      	mov	r2, r1
 8019ee8:	4601      	mov	r1, r0
 8019eea:	6818      	ldr	r0, [r3, #0]
 8019eec:	f002 bede 	b.w	801ccac <_realloc_r>
 8019ef0:	20000048 	.word	0x20000048

08019ef4 <_sbrk_r>:
 8019ef4:	b538      	push	{r3, r4, r5, lr}
 8019ef6:	4d06      	ldr	r5, [pc, #24]	; (8019f10 <_sbrk_r+0x1c>)
 8019ef8:	2300      	movs	r3, #0
 8019efa:	4604      	mov	r4, r0
 8019efc:	4608      	mov	r0, r1
 8019efe:	602b      	str	r3, [r5, #0]
 8019f00:	f7f2 fd0a 	bl	800c918 <_sbrk>
 8019f04:	1c43      	adds	r3, r0, #1
 8019f06:	d102      	bne.n	8019f0e <_sbrk_r+0x1a>
 8019f08:	682b      	ldr	r3, [r5, #0]
 8019f0a:	b103      	cbz	r3, 8019f0e <_sbrk_r+0x1a>
 8019f0c:	6023      	str	r3, [r4, #0]
 8019f0e:	bd38      	pop	{r3, r4, r5, pc}
 8019f10:	2000a9bc 	.word	0x2000a9bc

08019f14 <ldexpf>:
 8019f14:	b510      	push	{r4, lr}
 8019f16:	ed2d 8b02 	vpush	{d8}
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	eeb0 8a40 	vmov.f32	s16, s0
 8019f20:	f003 f862 	bl	801cfe8 <finitef>
 8019f24:	b1b8      	cbz	r0, 8019f56 <ldexpf+0x42>
 8019f26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f2e:	d012      	beq.n	8019f56 <ldexpf+0x42>
 8019f30:	eeb0 0a48 	vmov.f32	s0, s16
 8019f34:	4620      	mov	r0, r4
 8019f36:	f000 f819 	bl	8019f6c <scalbnf>
 8019f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8019f3e:	f003 f853 	bl	801cfe8 <finitef>
 8019f42:	b120      	cbz	r0, 8019f4e <ldexpf+0x3a>
 8019f44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f4c:	d103      	bne.n	8019f56 <ldexpf+0x42>
 8019f4e:	f7ff f85d 	bl	801900c <__errno>
 8019f52:	2322      	movs	r3, #34	; 0x22
 8019f54:	6003      	str	r3, [r0, #0]
 8019f56:	eeb0 0a48 	vmov.f32	s0, s16
 8019f5a:	ecbd 8b02 	vpop	{d8}
 8019f5e:	bd10      	pop	{r4, pc}

08019f60 <nanf>:
 8019f60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019f68 <nanf+0x8>
 8019f64:	4770      	bx	lr
 8019f66:	bf00      	nop
 8019f68:	7fc00000 	.word	0x7fc00000

08019f6c <scalbnf>:
 8019f6c:	ee10 3a10 	vmov	r3, s0
 8019f70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019f74:	d025      	beq.n	8019fc2 <scalbnf+0x56>
 8019f76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019f7a:	d302      	bcc.n	8019f82 <scalbnf+0x16>
 8019f7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f80:	4770      	bx	lr
 8019f82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019f86:	d122      	bne.n	8019fce <scalbnf+0x62>
 8019f88:	4b2a      	ldr	r3, [pc, #168]	; (801a034 <scalbnf+0xc8>)
 8019f8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a038 <scalbnf+0xcc>
 8019f8e:	4298      	cmp	r0, r3
 8019f90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019f94:	db16      	blt.n	8019fc4 <scalbnf+0x58>
 8019f96:	ee10 3a10 	vmov	r3, s0
 8019f9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019f9e:	3a19      	subs	r2, #25
 8019fa0:	4402      	add	r2, r0
 8019fa2:	2afe      	cmp	r2, #254	; 0xfe
 8019fa4:	dd15      	ble.n	8019fd2 <scalbnf+0x66>
 8019fa6:	ee10 3a10 	vmov	r3, s0
 8019faa:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a03c <scalbnf+0xd0>
 8019fae:	eddf 6a24 	vldr	s13, [pc, #144]	; 801a040 <scalbnf+0xd4>
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	eeb0 7a67 	vmov.f32	s14, s15
 8019fb8:	bfb8      	it	lt
 8019fba:	eef0 7a66 	vmovlt.f32	s15, s13
 8019fbe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8019fc2:	4770      	bx	lr
 8019fc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a044 <scalbnf+0xd8>
 8019fc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019fcc:	4770      	bx	lr
 8019fce:	0dd2      	lsrs	r2, r2, #23
 8019fd0:	e7e6      	b.n	8019fa0 <scalbnf+0x34>
 8019fd2:	2a00      	cmp	r2, #0
 8019fd4:	dd06      	ble.n	8019fe4 <scalbnf+0x78>
 8019fd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019fda:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019fde:	ee00 3a10 	vmov	s0, r3
 8019fe2:	4770      	bx	lr
 8019fe4:	f112 0f16 	cmn.w	r2, #22
 8019fe8:	da1a      	bge.n	801a020 <scalbnf+0xb4>
 8019fea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019fee:	4298      	cmp	r0, r3
 8019ff0:	ee10 3a10 	vmov	r3, s0
 8019ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019ff8:	dd0a      	ble.n	801a010 <scalbnf+0xa4>
 8019ffa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801a03c <scalbnf+0xd0>
 8019ffe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801a040 <scalbnf+0xd4>
 801a002:	eef0 7a40 	vmov.f32	s15, s0
 801a006:	2b00      	cmp	r3, #0
 801a008:	bf18      	it	ne
 801a00a:	eeb0 0a47 	vmovne.f32	s0, s14
 801a00e:	e7db      	b.n	8019fc8 <scalbnf+0x5c>
 801a010:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801a044 <scalbnf+0xd8>
 801a014:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801a048 <scalbnf+0xdc>
 801a018:	eef0 7a40 	vmov.f32	s15, s0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	e7f3      	b.n	801a008 <scalbnf+0x9c>
 801a020:	3219      	adds	r2, #25
 801a022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a026:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801a02a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a04c <scalbnf+0xe0>
 801a02e:	ee07 3a10 	vmov	s14, r3
 801a032:	e7c4      	b.n	8019fbe <scalbnf+0x52>
 801a034:	ffff3cb0 	.word	0xffff3cb0
 801a038:	4c000000 	.word	0x4c000000
 801a03c:	7149f2ca 	.word	0x7149f2ca
 801a040:	f149f2ca 	.word	0xf149f2ca
 801a044:	0da24260 	.word	0x0da24260
 801a048:	8da24260 	.word	0x8da24260
 801a04c:	33000000 	.word	0x33000000

0801a050 <siprintf>:
 801a050:	b40e      	push	{r1, r2, r3}
 801a052:	b500      	push	{lr}
 801a054:	b09c      	sub	sp, #112	; 0x70
 801a056:	ab1d      	add	r3, sp, #116	; 0x74
 801a058:	9002      	str	r0, [sp, #8]
 801a05a:	9006      	str	r0, [sp, #24]
 801a05c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a060:	4809      	ldr	r0, [pc, #36]	; (801a088 <siprintf+0x38>)
 801a062:	9107      	str	r1, [sp, #28]
 801a064:	9104      	str	r1, [sp, #16]
 801a066:	4909      	ldr	r1, [pc, #36]	; (801a08c <siprintf+0x3c>)
 801a068:	f853 2b04 	ldr.w	r2, [r3], #4
 801a06c:	9105      	str	r1, [sp, #20]
 801a06e:	6800      	ldr	r0, [r0, #0]
 801a070:	9301      	str	r3, [sp, #4]
 801a072:	a902      	add	r1, sp, #8
 801a074:	f002 fe9c 	bl	801cdb0 <_svfiprintf_r>
 801a078:	9b02      	ldr	r3, [sp, #8]
 801a07a:	2200      	movs	r2, #0
 801a07c:	701a      	strb	r2, [r3, #0]
 801a07e:	b01c      	add	sp, #112	; 0x70
 801a080:	f85d eb04 	ldr.w	lr, [sp], #4
 801a084:	b003      	add	sp, #12
 801a086:	4770      	bx	lr
 801a088:	20000048 	.word	0x20000048
 801a08c:	ffff0208 	.word	0xffff0208

0801a090 <__sread>:
 801a090:	b510      	push	{r4, lr}
 801a092:	460c      	mov	r4, r1
 801a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a098:	f002 ff8a 	bl	801cfb0 <_read_r>
 801a09c:	2800      	cmp	r0, #0
 801a09e:	bfab      	itete	ge
 801a0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0a2:	89a3      	ldrhlt	r3, [r4, #12]
 801a0a4:	181b      	addge	r3, r3, r0
 801a0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a0aa:	bfac      	ite	ge
 801a0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 801a0ae:	81a3      	strhlt	r3, [r4, #12]
 801a0b0:	bd10      	pop	{r4, pc}

0801a0b2 <__swrite>:
 801a0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b6:	461f      	mov	r7, r3
 801a0b8:	898b      	ldrh	r3, [r1, #12]
 801a0ba:	05db      	lsls	r3, r3, #23
 801a0bc:	4605      	mov	r5, r0
 801a0be:	460c      	mov	r4, r1
 801a0c0:	4616      	mov	r6, r2
 801a0c2:	d505      	bpl.n	801a0d0 <__swrite+0x1e>
 801a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0c8:	2302      	movs	r3, #2
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	f002 f8f4 	bl	801c2b8 <_lseek_r>
 801a0d0:	89a3      	ldrh	r3, [r4, #12]
 801a0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a0da:	81a3      	strh	r3, [r4, #12]
 801a0dc:	4632      	mov	r2, r6
 801a0de:	463b      	mov	r3, r7
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e6:	f000 bed9 	b.w	801ae9c <_write_r>

0801a0ea <__sseek>:
 801a0ea:	b510      	push	{r4, lr}
 801a0ec:	460c      	mov	r4, r1
 801a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f2:	f002 f8e1 	bl	801c2b8 <_lseek_r>
 801a0f6:	1c43      	adds	r3, r0, #1
 801a0f8:	89a3      	ldrh	r3, [r4, #12]
 801a0fa:	bf15      	itete	ne
 801a0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 801a0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a106:	81a3      	strheq	r3, [r4, #12]
 801a108:	bf18      	it	ne
 801a10a:	81a3      	strhne	r3, [r4, #12]
 801a10c:	bd10      	pop	{r4, pc}

0801a10e <__sclose>:
 801a10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a112:	f000 bed5 	b.w	801aec0 <_close_r>

0801a116 <strcat>:
 801a116:	b510      	push	{r4, lr}
 801a118:	4602      	mov	r2, r0
 801a11a:	7814      	ldrb	r4, [r2, #0]
 801a11c:	4613      	mov	r3, r2
 801a11e:	3201      	adds	r2, #1
 801a120:	2c00      	cmp	r4, #0
 801a122:	d1fa      	bne.n	801a11a <strcat+0x4>
 801a124:	3b01      	subs	r3, #1
 801a126:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a12e:	2a00      	cmp	r2, #0
 801a130:	d1f9      	bne.n	801a126 <strcat+0x10>
 801a132:	bd10      	pop	{r4, pc}

0801a134 <sulp>:
 801a134:	b570      	push	{r4, r5, r6, lr}
 801a136:	4604      	mov	r4, r0
 801a138:	460d      	mov	r5, r1
 801a13a:	ec45 4b10 	vmov	d0, r4, r5
 801a13e:	4616      	mov	r6, r2
 801a140:	f002 fc56 	bl	801c9f0 <__ulp>
 801a144:	ec51 0b10 	vmov	r0, r1, d0
 801a148:	b17e      	cbz	r6, 801a16a <sulp+0x36>
 801a14a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a14e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a152:	2b00      	cmp	r3, #0
 801a154:	dd09      	ble.n	801a16a <sulp+0x36>
 801a156:	051b      	lsls	r3, r3, #20
 801a158:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a15c:	2400      	movs	r4, #0
 801a15e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a162:	4622      	mov	r2, r4
 801a164:	462b      	mov	r3, r5
 801a166:	f7e6 fa47 	bl	80005f8 <__aeabi_dmul>
 801a16a:	bd70      	pop	{r4, r5, r6, pc}
 801a16c:	0000      	movs	r0, r0
	...

0801a170 <_strtod_l>:
 801a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a174:	b0a3      	sub	sp, #140	; 0x8c
 801a176:	461f      	mov	r7, r3
 801a178:	2300      	movs	r3, #0
 801a17a:	931e      	str	r3, [sp, #120]	; 0x78
 801a17c:	4ba4      	ldr	r3, [pc, #656]	; (801a410 <_strtod_l+0x2a0>)
 801a17e:	9219      	str	r2, [sp, #100]	; 0x64
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	9307      	str	r3, [sp, #28]
 801a184:	4604      	mov	r4, r0
 801a186:	4618      	mov	r0, r3
 801a188:	4688      	mov	r8, r1
 801a18a:	f7e6 f821 	bl	80001d0 <strlen>
 801a18e:	f04f 0a00 	mov.w	sl, #0
 801a192:	4605      	mov	r5, r0
 801a194:	f04f 0b00 	mov.w	fp, #0
 801a198:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a19e:	781a      	ldrb	r2, [r3, #0]
 801a1a0:	2a2b      	cmp	r2, #43	; 0x2b
 801a1a2:	d04c      	beq.n	801a23e <_strtod_l+0xce>
 801a1a4:	d839      	bhi.n	801a21a <_strtod_l+0xaa>
 801a1a6:	2a0d      	cmp	r2, #13
 801a1a8:	d832      	bhi.n	801a210 <_strtod_l+0xa0>
 801a1aa:	2a08      	cmp	r2, #8
 801a1ac:	d832      	bhi.n	801a214 <_strtod_l+0xa4>
 801a1ae:	2a00      	cmp	r2, #0
 801a1b0:	d03c      	beq.n	801a22c <_strtod_l+0xbc>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	930e      	str	r3, [sp, #56]	; 0x38
 801a1b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a1b8:	7833      	ldrb	r3, [r6, #0]
 801a1ba:	2b30      	cmp	r3, #48	; 0x30
 801a1bc:	f040 80b4 	bne.w	801a328 <_strtod_l+0x1b8>
 801a1c0:	7873      	ldrb	r3, [r6, #1]
 801a1c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a1c6:	2b58      	cmp	r3, #88	; 0x58
 801a1c8:	d16c      	bne.n	801a2a4 <_strtod_l+0x134>
 801a1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1cc:	9301      	str	r3, [sp, #4]
 801a1ce:	ab1e      	add	r3, sp, #120	; 0x78
 801a1d0:	9702      	str	r7, [sp, #8]
 801a1d2:	9300      	str	r3, [sp, #0]
 801a1d4:	4a8f      	ldr	r2, [pc, #572]	; (801a414 <_strtod_l+0x2a4>)
 801a1d6:	ab1f      	add	r3, sp, #124	; 0x7c
 801a1d8:	a91d      	add	r1, sp, #116	; 0x74
 801a1da:	4620      	mov	r0, r4
 801a1dc:	f001 fd60 	bl	801bca0 <__gethex>
 801a1e0:	f010 0707 	ands.w	r7, r0, #7
 801a1e4:	4605      	mov	r5, r0
 801a1e6:	d005      	beq.n	801a1f4 <_strtod_l+0x84>
 801a1e8:	2f06      	cmp	r7, #6
 801a1ea:	d12a      	bne.n	801a242 <_strtod_l+0xd2>
 801a1ec:	3601      	adds	r6, #1
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	961d      	str	r6, [sp, #116]	; 0x74
 801a1f2:	930e      	str	r3, [sp, #56]	; 0x38
 801a1f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	f040 8596 	bne.w	801ad28 <_strtod_l+0xbb8>
 801a1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1fe:	b1db      	cbz	r3, 801a238 <_strtod_l+0xc8>
 801a200:	4652      	mov	r2, sl
 801a202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a206:	ec43 2b10 	vmov	d0, r2, r3
 801a20a:	b023      	add	sp, #140	; 0x8c
 801a20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a210:	2a20      	cmp	r2, #32
 801a212:	d1ce      	bne.n	801a1b2 <_strtod_l+0x42>
 801a214:	3301      	adds	r3, #1
 801a216:	931d      	str	r3, [sp, #116]	; 0x74
 801a218:	e7c0      	b.n	801a19c <_strtod_l+0x2c>
 801a21a:	2a2d      	cmp	r2, #45	; 0x2d
 801a21c:	d1c9      	bne.n	801a1b2 <_strtod_l+0x42>
 801a21e:	2201      	movs	r2, #1
 801a220:	920e      	str	r2, [sp, #56]	; 0x38
 801a222:	1c5a      	adds	r2, r3, #1
 801a224:	921d      	str	r2, [sp, #116]	; 0x74
 801a226:	785b      	ldrb	r3, [r3, #1]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d1c4      	bne.n	801a1b6 <_strtod_l+0x46>
 801a22c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a22e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a232:	2b00      	cmp	r3, #0
 801a234:	f040 8576 	bne.w	801ad24 <_strtod_l+0xbb4>
 801a238:	4652      	mov	r2, sl
 801a23a:	465b      	mov	r3, fp
 801a23c:	e7e3      	b.n	801a206 <_strtod_l+0x96>
 801a23e:	2200      	movs	r2, #0
 801a240:	e7ee      	b.n	801a220 <_strtod_l+0xb0>
 801a242:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a244:	b13a      	cbz	r2, 801a256 <_strtod_l+0xe6>
 801a246:	2135      	movs	r1, #53	; 0x35
 801a248:	a820      	add	r0, sp, #128	; 0x80
 801a24a:	f002 fcdc 	bl	801cc06 <__copybits>
 801a24e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a250:	4620      	mov	r0, r4
 801a252:	f002 f8a1 	bl	801c398 <_Bfree>
 801a256:	3f01      	subs	r7, #1
 801a258:	2f05      	cmp	r7, #5
 801a25a:	d807      	bhi.n	801a26c <_strtod_l+0xfc>
 801a25c:	e8df f007 	tbb	[pc, r7]
 801a260:	1d180b0e 	.word	0x1d180b0e
 801a264:	030e      	.short	0x030e
 801a266:	f04f 0b00 	mov.w	fp, #0
 801a26a:	46da      	mov	sl, fp
 801a26c:	0728      	lsls	r0, r5, #28
 801a26e:	d5c1      	bpl.n	801a1f4 <_strtod_l+0x84>
 801a270:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a274:	e7be      	b.n	801a1f4 <_strtod_l+0x84>
 801a276:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a27a:	e7f7      	b.n	801a26c <_strtod_l+0xfc>
 801a27c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a280:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a286:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a28a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a28e:	e7ed      	b.n	801a26c <_strtod_l+0xfc>
 801a290:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a418 <_strtod_l+0x2a8>
 801a294:	f04f 0a00 	mov.w	sl, #0
 801a298:	e7e8      	b.n	801a26c <_strtod_l+0xfc>
 801a29a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a29e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a2a2:	e7e3      	b.n	801a26c <_strtod_l+0xfc>
 801a2a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a2a6:	1c5a      	adds	r2, r3, #1
 801a2a8:	921d      	str	r2, [sp, #116]	; 0x74
 801a2aa:	785b      	ldrb	r3, [r3, #1]
 801a2ac:	2b30      	cmp	r3, #48	; 0x30
 801a2ae:	d0f9      	beq.n	801a2a4 <_strtod_l+0x134>
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d09f      	beq.n	801a1f4 <_strtod_l+0x84>
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	f04f 0900 	mov.w	r9, #0
 801a2ba:	9304      	str	r3, [sp, #16]
 801a2bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a2be:	930a      	str	r3, [sp, #40]	; 0x28
 801a2c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a2c4:	464f      	mov	r7, r9
 801a2c6:	220a      	movs	r2, #10
 801a2c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a2ca:	7806      	ldrb	r6, [r0, #0]
 801a2cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a2d0:	b2d9      	uxtb	r1, r3
 801a2d2:	2909      	cmp	r1, #9
 801a2d4:	d92a      	bls.n	801a32c <_strtod_l+0x1bc>
 801a2d6:	9907      	ldr	r1, [sp, #28]
 801a2d8:	462a      	mov	r2, r5
 801a2da:	f002 fe92 	bl	801d002 <strncmp>
 801a2de:	b398      	cbz	r0, 801a348 <_strtod_l+0x1d8>
 801a2e0:	2000      	movs	r0, #0
 801a2e2:	4633      	mov	r3, r6
 801a2e4:	463d      	mov	r5, r7
 801a2e6:	9007      	str	r0, [sp, #28]
 801a2e8:	4602      	mov	r2, r0
 801a2ea:	2b65      	cmp	r3, #101	; 0x65
 801a2ec:	d001      	beq.n	801a2f2 <_strtod_l+0x182>
 801a2ee:	2b45      	cmp	r3, #69	; 0x45
 801a2f0:	d118      	bne.n	801a324 <_strtod_l+0x1b4>
 801a2f2:	b91d      	cbnz	r5, 801a2fc <_strtod_l+0x18c>
 801a2f4:	9b04      	ldr	r3, [sp, #16]
 801a2f6:	4303      	orrs	r3, r0
 801a2f8:	d098      	beq.n	801a22c <_strtod_l+0xbc>
 801a2fa:	2500      	movs	r5, #0
 801a2fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a300:	f108 0301 	add.w	r3, r8, #1
 801a304:	931d      	str	r3, [sp, #116]	; 0x74
 801a306:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a30a:	2b2b      	cmp	r3, #43	; 0x2b
 801a30c:	d075      	beq.n	801a3fa <_strtod_l+0x28a>
 801a30e:	2b2d      	cmp	r3, #45	; 0x2d
 801a310:	d07b      	beq.n	801a40a <_strtod_l+0x29a>
 801a312:	f04f 0c00 	mov.w	ip, #0
 801a316:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a31a:	2909      	cmp	r1, #9
 801a31c:	f240 8082 	bls.w	801a424 <_strtod_l+0x2b4>
 801a320:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a324:	2600      	movs	r6, #0
 801a326:	e09d      	b.n	801a464 <_strtod_l+0x2f4>
 801a328:	2300      	movs	r3, #0
 801a32a:	e7c4      	b.n	801a2b6 <_strtod_l+0x146>
 801a32c:	2f08      	cmp	r7, #8
 801a32e:	bfd8      	it	le
 801a330:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a332:	f100 0001 	add.w	r0, r0, #1
 801a336:	bfda      	itte	le
 801a338:	fb02 3301 	mlale	r3, r2, r1, r3
 801a33c:	9309      	strle	r3, [sp, #36]	; 0x24
 801a33e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a342:	3701      	adds	r7, #1
 801a344:	901d      	str	r0, [sp, #116]	; 0x74
 801a346:	e7bf      	b.n	801a2c8 <_strtod_l+0x158>
 801a348:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a34a:	195a      	adds	r2, r3, r5
 801a34c:	921d      	str	r2, [sp, #116]	; 0x74
 801a34e:	5d5b      	ldrb	r3, [r3, r5]
 801a350:	2f00      	cmp	r7, #0
 801a352:	d037      	beq.n	801a3c4 <_strtod_l+0x254>
 801a354:	9007      	str	r0, [sp, #28]
 801a356:	463d      	mov	r5, r7
 801a358:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a35c:	2a09      	cmp	r2, #9
 801a35e:	d912      	bls.n	801a386 <_strtod_l+0x216>
 801a360:	2201      	movs	r2, #1
 801a362:	e7c2      	b.n	801a2ea <_strtod_l+0x17a>
 801a364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a366:	1c5a      	adds	r2, r3, #1
 801a368:	921d      	str	r2, [sp, #116]	; 0x74
 801a36a:	785b      	ldrb	r3, [r3, #1]
 801a36c:	3001      	adds	r0, #1
 801a36e:	2b30      	cmp	r3, #48	; 0x30
 801a370:	d0f8      	beq.n	801a364 <_strtod_l+0x1f4>
 801a372:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a376:	2a08      	cmp	r2, #8
 801a378:	f200 84db 	bhi.w	801ad32 <_strtod_l+0xbc2>
 801a37c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a37e:	9007      	str	r0, [sp, #28]
 801a380:	2000      	movs	r0, #0
 801a382:	920a      	str	r2, [sp, #40]	; 0x28
 801a384:	4605      	mov	r5, r0
 801a386:	3b30      	subs	r3, #48	; 0x30
 801a388:	f100 0201 	add.w	r2, r0, #1
 801a38c:	d014      	beq.n	801a3b8 <_strtod_l+0x248>
 801a38e:	9907      	ldr	r1, [sp, #28]
 801a390:	4411      	add	r1, r2
 801a392:	9107      	str	r1, [sp, #28]
 801a394:	462a      	mov	r2, r5
 801a396:	eb00 0e05 	add.w	lr, r0, r5
 801a39a:	210a      	movs	r1, #10
 801a39c:	4572      	cmp	r2, lr
 801a39e:	d113      	bne.n	801a3c8 <_strtod_l+0x258>
 801a3a0:	182a      	adds	r2, r5, r0
 801a3a2:	2a08      	cmp	r2, #8
 801a3a4:	f105 0501 	add.w	r5, r5, #1
 801a3a8:	4405      	add	r5, r0
 801a3aa:	dc1c      	bgt.n	801a3e6 <_strtod_l+0x276>
 801a3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3ae:	220a      	movs	r2, #10
 801a3b0:	fb02 3301 	mla	r3, r2, r1, r3
 801a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3ba:	1c59      	adds	r1, r3, #1
 801a3bc:	911d      	str	r1, [sp, #116]	; 0x74
 801a3be:	785b      	ldrb	r3, [r3, #1]
 801a3c0:	4610      	mov	r0, r2
 801a3c2:	e7c9      	b.n	801a358 <_strtod_l+0x1e8>
 801a3c4:	4638      	mov	r0, r7
 801a3c6:	e7d2      	b.n	801a36e <_strtod_l+0x1fe>
 801a3c8:	2a08      	cmp	r2, #8
 801a3ca:	dc04      	bgt.n	801a3d6 <_strtod_l+0x266>
 801a3cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a3ce:	434e      	muls	r6, r1
 801a3d0:	9609      	str	r6, [sp, #36]	; 0x24
 801a3d2:	3201      	adds	r2, #1
 801a3d4:	e7e2      	b.n	801a39c <_strtod_l+0x22c>
 801a3d6:	f102 0c01 	add.w	ip, r2, #1
 801a3da:	f1bc 0f10 	cmp.w	ip, #16
 801a3de:	bfd8      	it	le
 801a3e0:	fb01 f909 	mulle.w	r9, r1, r9
 801a3e4:	e7f5      	b.n	801a3d2 <_strtod_l+0x262>
 801a3e6:	2d10      	cmp	r5, #16
 801a3e8:	bfdc      	itt	le
 801a3ea:	220a      	movle	r2, #10
 801a3ec:	fb02 3909 	mlale	r9, r2, r9, r3
 801a3f0:	e7e1      	b.n	801a3b6 <_strtod_l+0x246>
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	9307      	str	r3, [sp, #28]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	e77c      	b.n	801a2f4 <_strtod_l+0x184>
 801a3fa:	f04f 0c00 	mov.w	ip, #0
 801a3fe:	f108 0302 	add.w	r3, r8, #2
 801a402:	931d      	str	r3, [sp, #116]	; 0x74
 801a404:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a408:	e785      	b.n	801a316 <_strtod_l+0x1a6>
 801a40a:	f04f 0c01 	mov.w	ip, #1
 801a40e:	e7f6      	b.n	801a3fe <_strtod_l+0x28e>
 801a410:	0801f968 	.word	0x0801f968
 801a414:	0801f714 	.word	0x0801f714
 801a418:	7ff00000 	.word	0x7ff00000
 801a41c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a41e:	1c59      	adds	r1, r3, #1
 801a420:	911d      	str	r1, [sp, #116]	; 0x74
 801a422:	785b      	ldrb	r3, [r3, #1]
 801a424:	2b30      	cmp	r3, #48	; 0x30
 801a426:	d0f9      	beq.n	801a41c <_strtod_l+0x2ac>
 801a428:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a42c:	2908      	cmp	r1, #8
 801a42e:	f63f af79 	bhi.w	801a324 <_strtod_l+0x1b4>
 801a432:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a436:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a438:	9308      	str	r3, [sp, #32]
 801a43a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a43c:	1c59      	adds	r1, r3, #1
 801a43e:	911d      	str	r1, [sp, #116]	; 0x74
 801a440:	785b      	ldrb	r3, [r3, #1]
 801a442:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801a446:	2e09      	cmp	r6, #9
 801a448:	d937      	bls.n	801a4ba <_strtod_l+0x34a>
 801a44a:	9e08      	ldr	r6, [sp, #32]
 801a44c:	1b89      	subs	r1, r1, r6
 801a44e:	2908      	cmp	r1, #8
 801a450:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a454:	dc02      	bgt.n	801a45c <_strtod_l+0x2ec>
 801a456:	4576      	cmp	r6, lr
 801a458:	bfa8      	it	ge
 801a45a:	4676      	movge	r6, lr
 801a45c:	f1bc 0f00 	cmp.w	ip, #0
 801a460:	d000      	beq.n	801a464 <_strtod_l+0x2f4>
 801a462:	4276      	negs	r6, r6
 801a464:	2d00      	cmp	r5, #0
 801a466:	d14f      	bne.n	801a508 <_strtod_l+0x398>
 801a468:	9904      	ldr	r1, [sp, #16]
 801a46a:	4301      	orrs	r1, r0
 801a46c:	f47f aec2 	bne.w	801a1f4 <_strtod_l+0x84>
 801a470:	2a00      	cmp	r2, #0
 801a472:	f47f aedb 	bne.w	801a22c <_strtod_l+0xbc>
 801a476:	2b69      	cmp	r3, #105	; 0x69
 801a478:	d027      	beq.n	801a4ca <_strtod_l+0x35a>
 801a47a:	dc24      	bgt.n	801a4c6 <_strtod_l+0x356>
 801a47c:	2b49      	cmp	r3, #73	; 0x49
 801a47e:	d024      	beq.n	801a4ca <_strtod_l+0x35a>
 801a480:	2b4e      	cmp	r3, #78	; 0x4e
 801a482:	f47f aed3 	bne.w	801a22c <_strtod_l+0xbc>
 801a486:	499e      	ldr	r1, [pc, #632]	; (801a700 <_strtod_l+0x590>)
 801a488:	a81d      	add	r0, sp, #116	; 0x74
 801a48a:	f001 fe61 	bl	801c150 <__match>
 801a48e:	2800      	cmp	r0, #0
 801a490:	f43f aecc 	beq.w	801a22c <_strtod_l+0xbc>
 801a494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a496:	781b      	ldrb	r3, [r3, #0]
 801a498:	2b28      	cmp	r3, #40	; 0x28
 801a49a:	d12d      	bne.n	801a4f8 <_strtod_l+0x388>
 801a49c:	4999      	ldr	r1, [pc, #612]	; (801a704 <_strtod_l+0x594>)
 801a49e:	aa20      	add	r2, sp, #128	; 0x80
 801a4a0:	a81d      	add	r0, sp, #116	; 0x74
 801a4a2:	f001 fe69 	bl	801c178 <__hexnan>
 801a4a6:	2805      	cmp	r0, #5
 801a4a8:	d126      	bne.n	801a4f8 <_strtod_l+0x388>
 801a4aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a4ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a4b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a4b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a4b8:	e69c      	b.n	801a1f4 <_strtod_l+0x84>
 801a4ba:	210a      	movs	r1, #10
 801a4bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a4c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a4c4:	e7b9      	b.n	801a43a <_strtod_l+0x2ca>
 801a4c6:	2b6e      	cmp	r3, #110	; 0x6e
 801a4c8:	e7db      	b.n	801a482 <_strtod_l+0x312>
 801a4ca:	498f      	ldr	r1, [pc, #572]	; (801a708 <_strtod_l+0x598>)
 801a4cc:	a81d      	add	r0, sp, #116	; 0x74
 801a4ce:	f001 fe3f 	bl	801c150 <__match>
 801a4d2:	2800      	cmp	r0, #0
 801a4d4:	f43f aeaa 	beq.w	801a22c <_strtod_l+0xbc>
 801a4d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4da:	498c      	ldr	r1, [pc, #560]	; (801a70c <_strtod_l+0x59c>)
 801a4dc:	3b01      	subs	r3, #1
 801a4de:	a81d      	add	r0, sp, #116	; 0x74
 801a4e0:	931d      	str	r3, [sp, #116]	; 0x74
 801a4e2:	f001 fe35 	bl	801c150 <__match>
 801a4e6:	b910      	cbnz	r0, 801a4ee <_strtod_l+0x37e>
 801a4e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	931d      	str	r3, [sp, #116]	; 0x74
 801a4ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801a71c <_strtod_l+0x5ac>
 801a4f2:	f04f 0a00 	mov.w	sl, #0
 801a4f6:	e67d      	b.n	801a1f4 <_strtod_l+0x84>
 801a4f8:	4885      	ldr	r0, [pc, #532]	; (801a710 <_strtod_l+0x5a0>)
 801a4fa:	f002 fd6d 	bl	801cfd8 <nan>
 801a4fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a502:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a506:	e675      	b.n	801a1f4 <_strtod_l+0x84>
 801a508:	9b07      	ldr	r3, [sp, #28]
 801a50a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a50c:	1af3      	subs	r3, r6, r3
 801a50e:	2f00      	cmp	r7, #0
 801a510:	bf08      	it	eq
 801a512:	462f      	moveq	r7, r5
 801a514:	2d10      	cmp	r5, #16
 801a516:	9308      	str	r3, [sp, #32]
 801a518:	46a8      	mov	r8, r5
 801a51a:	bfa8      	it	ge
 801a51c:	f04f 0810 	movge.w	r8, #16
 801a520:	f7e5 fff0 	bl	8000504 <__aeabi_ui2d>
 801a524:	2d09      	cmp	r5, #9
 801a526:	4682      	mov	sl, r0
 801a528:	468b      	mov	fp, r1
 801a52a:	dd13      	ble.n	801a554 <_strtod_l+0x3e4>
 801a52c:	4b79      	ldr	r3, [pc, #484]	; (801a714 <_strtod_l+0x5a4>)
 801a52e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a532:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a536:	f7e6 f85f 	bl	80005f8 <__aeabi_dmul>
 801a53a:	4682      	mov	sl, r0
 801a53c:	4648      	mov	r0, r9
 801a53e:	468b      	mov	fp, r1
 801a540:	f7e5 ffe0 	bl	8000504 <__aeabi_ui2d>
 801a544:	4602      	mov	r2, r0
 801a546:	460b      	mov	r3, r1
 801a548:	4650      	mov	r0, sl
 801a54a:	4659      	mov	r1, fp
 801a54c:	f7e5 fe9e 	bl	800028c <__adddf3>
 801a550:	4682      	mov	sl, r0
 801a552:	468b      	mov	fp, r1
 801a554:	2d0f      	cmp	r5, #15
 801a556:	dc38      	bgt.n	801a5ca <_strtod_l+0x45a>
 801a558:	9b08      	ldr	r3, [sp, #32]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	f43f ae4a 	beq.w	801a1f4 <_strtod_l+0x84>
 801a560:	dd24      	ble.n	801a5ac <_strtod_l+0x43c>
 801a562:	2b16      	cmp	r3, #22
 801a564:	dc0b      	bgt.n	801a57e <_strtod_l+0x40e>
 801a566:	4d6b      	ldr	r5, [pc, #428]	; (801a714 <_strtod_l+0x5a4>)
 801a568:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801a56c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a570:	4652      	mov	r2, sl
 801a572:	465b      	mov	r3, fp
 801a574:	f7e6 f840 	bl	80005f8 <__aeabi_dmul>
 801a578:	4682      	mov	sl, r0
 801a57a:	468b      	mov	fp, r1
 801a57c:	e63a      	b.n	801a1f4 <_strtod_l+0x84>
 801a57e:	9a08      	ldr	r2, [sp, #32]
 801a580:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a584:	4293      	cmp	r3, r2
 801a586:	db20      	blt.n	801a5ca <_strtod_l+0x45a>
 801a588:	4c62      	ldr	r4, [pc, #392]	; (801a714 <_strtod_l+0x5a4>)
 801a58a:	f1c5 050f 	rsb	r5, r5, #15
 801a58e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a592:	4652      	mov	r2, sl
 801a594:	465b      	mov	r3, fp
 801a596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a59a:	f7e6 f82d 	bl	80005f8 <__aeabi_dmul>
 801a59e:	9b08      	ldr	r3, [sp, #32]
 801a5a0:	1b5d      	subs	r5, r3, r5
 801a5a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a5a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a5aa:	e7e3      	b.n	801a574 <_strtod_l+0x404>
 801a5ac:	9b08      	ldr	r3, [sp, #32]
 801a5ae:	3316      	adds	r3, #22
 801a5b0:	db0b      	blt.n	801a5ca <_strtod_l+0x45a>
 801a5b2:	9b07      	ldr	r3, [sp, #28]
 801a5b4:	4a57      	ldr	r2, [pc, #348]	; (801a714 <_strtod_l+0x5a4>)
 801a5b6:	1b9e      	subs	r6, r3, r6
 801a5b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a5bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a5c0:	4650      	mov	r0, sl
 801a5c2:	4659      	mov	r1, fp
 801a5c4:	f7e6 f942 	bl	800084c <__aeabi_ddiv>
 801a5c8:	e7d6      	b.n	801a578 <_strtod_l+0x408>
 801a5ca:	9b08      	ldr	r3, [sp, #32]
 801a5cc:	eba5 0808 	sub.w	r8, r5, r8
 801a5d0:	4498      	add	r8, r3
 801a5d2:	f1b8 0f00 	cmp.w	r8, #0
 801a5d6:	dd71      	ble.n	801a6bc <_strtod_l+0x54c>
 801a5d8:	f018 030f 	ands.w	r3, r8, #15
 801a5dc:	d00a      	beq.n	801a5f4 <_strtod_l+0x484>
 801a5de:	494d      	ldr	r1, [pc, #308]	; (801a714 <_strtod_l+0x5a4>)
 801a5e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a5e4:	4652      	mov	r2, sl
 801a5e6:	465b      	mov	r3, fp
 801a5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a5ec:	f7e6 f804 	bl	80005f8 <__aeabi_dmul>
 801a5f0:	4682      	mov	sl, r0
 801a5f2:	468b      	mov	fp, r1
 801a5f4:	f038 080f 	bics.w	r8, r8, #15
 801a5f8:	d04d      	beq.n	801a696 <_strtod_l+0x526>
 801a5fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a5fe:	dd22      	ble.n	801a646 <_strtod_l+0x4d6>
 801a600:	2500      	movs	r5, #0
 801a602:	462e      	mov	r6, r5
 801a604:	9509      	str	r5, [sp, #36]	; 0x24
 801a606:	9507      	str	r5, [sp, #28]
 801a608:	2322      	movs	r3, #34	; 0x22
 801a60a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801a71c <_strtod_l+0x5ac>
 801a60e:	6023      	str	r3, [r4, #0]
 801a610:	f04f 0a00 	mov.w	sl, #0
 801a614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a616:	2b00      	cmp	r3, #0
 801a618:	f43f adec 	beq.w	801a1f4 <_strtod_l+0x84>
 801a61c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a61e:	4620      	mov	r0, r4
 801a620:	f001 feba 	bl	801c398 <_Bfree>
 801a624:	9907      	ldr	r1, [sp, #28]
 801a626:	4620      	mov	r0, r4
 801a628:	f001 feb6 	bl	801c398 <_Bfree>
 801a62c:	4631      	mov	r1, r6
 801a62e:	4620      	mov	r0, r4
 801a630:	f001 feb2 	bl	801c398 <_Bfree>
 801a634:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a636:	4620      	mov	r0, r4
 801a638:	f001 feae 	bl	801c398 <_Bfree>
 801a63c:	4629      	mov	r1, r5
 801a63e:	4620      	mov	r0, r4
 801a640:	f001 feaa 	bl	801c398 <_Bfree>
 801a644:	e5d6      	b.n	801a1f4 <_strtod_l+0x84>
 801a646:	2300      	movs	r3, #0
 801a648:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a64c:	4650      	mov	r0, sl
 801a64e:	4659      	mov	r1, fp
 801a650:	4699      	mov	r9, r3
 801a652:	f1b8 0f01 	cmp.w	r8, #1
 801a656:	dc21      	bgt.n	801a69c <_strtod_l+0x52c>
 801a658:	b10b      	cbz	r3, 801a65e <_strtod_l+0x4ee>
 801a65a:	4682      	mov	sl, r0
 801a65c:	468b      	mov	fp, r1
 801a65e:	4b2e      	ldr	r3, [pc, #184]	; (801a718 <_strtod_l+0x5a8>)
 801a660:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a664:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a668:	4652      	mov	r2, sl
 801a66a:	465b      	mov	r3, fp
 801a66c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a670:	f7e5 ffc2 	bl	80005f8 <__aeabi_dmul>
 801a674:	4b29      	ldr	r3, [pc, #164]	; (801a71c <_strtod_l+0x5ac>)
 801a676:	460a      	mov	r2, r1
 801a678:	400b      	ands	r3, r1
 801a67a:	4929      	ldr	r1, [pc, #164]	; (801a720 <_strtod_l+0x5b0>)
 801a67c:	428b      	cmp	r3, r1
 801a67e:	4682      	mov	sl, r0
 801a680:	d8be      	bhi.n	801a600 <_strtod_l+0x490>
 801a682:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a686:	428b      	cmp	r3, r1
 801a688:	bf86      	itte	hi
 801a68a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a724 <_strtod_l+0x5b4>
 801a68e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801a692:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a696:	2300      	movs	r3, #0
 801a698:	9304      	str	r3, [sp, #16]
 801a69a:	e081      	b.n	801a7a0 <_strtod_l+0x630>
 801a69c:	f018 0f01 	tst.w	r8, #1
 801a6a0:	d007      	beq.n	801a6b2 <_strtod_l+0x542>
 801a6a2:	4b1d      	ldr	r3, [pc, #116]	; (801a718 <_strtod_l+0x5a8>)
 801a6a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ac:	f7e5 ffa4 	bl	80005f8 <__aeabi_dmul>
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	f109 0901 	add.w	r9, r9, #1
 801a6b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a6ba:	e7ca      	b.n	801a652 <_strtod_l+0x4e2>
 801a6bc:	d0eb      	beq.n	801a696 <_strtod_l+0x526>
 801a6be:	f1c8 0800 	rsb	r8, r8, #0
 801a6c2:	f018 020f 	ands.w	r2, r8, #15
 801a6c6:	d00a      	beq.n	801a6de <_strtod_l+0x56e>
 801a6c8:	4b12      	ldr	r3, [pc, #72]	; (801a714 <_strtod_l+0x5a4>)
 801a6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a6ce:	4650      	mov	r0, sl
 801a6d0:	4659      	mov	r1, fp
 801a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d6:	f7e6 f8b9 	bl	800084c <__aeabi_ddiv>
 801a6da:	4682      	mov	sl, r0
 801a6dc:	468b      	mov	fp, r1
 801a6de:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a6e2:	d0d8      	beq.n	801a696 <_strtod_l+0x526>
 801a6e4:	f1b8 0f1f 	cmp.w	r8, #31
 801a6e8:	dd1e      	ble.n	801a728 <_strtod_l+0x5b8>
 801a6ea:	2500      	movs	r5, #0
 801a6ec:	462e      	mov	r6, r5
 801a6ee:	9509      	str	r5, [sp, #36]	; 0x24
 801a6f0:	9507      	str	r5, [sp, #28]
 801a6f2:	2322      	movs	r3, #34	; 0x22
 801a6f4:	f04f 0a00 	mov.w	sl, #0
 801a6f8:	f04f 0b00 	mov.w	fp, #0
 801a6fc:	6023      	str	r3, [r4, #0]
 801a6fe:	e789      	b.n	801a614 <_strtod_l+0x4a4>
 801a700:	0801f6e5 	.word	0x0801f6e5
 801a704:	0801f728 	.word	0x0801f728
 801a708:	0801f6dd 	.word	0x0801f6dd
 801a70c:	0801f86c 	.word	0x0801f86c
 801a710:	0801fb28 	.word	0x0801fb28
 801a714:	0801fa08 	.word	0x0801fa08
 801a718:	0801f9e0 	.word	0x0801f9e0
 801a71c:	7ff00000 	.word	0x7ff00000
 801a720:	7ca00000 	.word	0x7ca00000
 801a724:	7fefffff 	.word	0x7fefffff
 801a728:	f018 0310 	ands.w	r3, r8, #16
 801a72c:	bf18      	it	ne
 801a72e:	236a      	movne	r3, #106	; 0x6a
 801a730:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801aae8 <_strtod_l+0x978>
 801a734:	9304      	str	r3, [sp, #16]
 801a736:	4650      	mov	r0, sl
 801a738:	4659      	mov	r1, fp
 801a73a:	2300      	movs	r3, #0
 801a73c:	f018 0f01 	tst.w	r8, #1
 801a740:	d004      	beq.n	801a74c <_strtod_l+0x5dc>
 801a742:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a746:	f7e5 ff57 	bl	80005f8 <__aeabi_dmul>
 801a74a:	2301      	movs	r3, #1
 801a74c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a750:	f109 0908 	add.w	r9, r9, #8
 801a754:	d1f2      	bne.n	801a73c <_strtod_l+0x5cc>
 801a756:	b10b      	cbz	r3, 801a75c <_strtod_l+0x5ec>
 801a758:	4682      	mov	sl, r0
 801a75a:	468b      	mov	fp, r1
 801a75c:	9b04      	ldr	r3, [sp, #16]
 801a75e:	b1bb      	cbz	r3, 801a790 <_strtod_l+0x620>
 801a760:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a764:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a768:	2b00      	cmp	r3, #0
 801a76a:	4659      	mov	r1, fp
 801a76c:	dd10      	ble.n	801a790 <_strtod_l+0x620>
 801a76e:	2b1f      	cmp	r3, #31
 801a770:	f340 8128 	ble.w	801a9c4 <_strtod_l+0x854>
 801a774:	2b34      	cmp	r3, #52	; 0x34
 801a776:	bfde      	ittt	le
 801a778:	3b20      	suble	r3, #32
 801a77a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801a77e:	fa02 f303 	lslle.w	r3, r2, r3
 801a782:	f04f 0a00 	mov.w	sl, #0
 801a786:	bfcc      	ite	gt
 801a788:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a78c:	ea03 0b01 	andle.w	fp, r3, r1
 801a790:	2200      	movs	r2, #0
 801a792:	2300      	movs	r3, #0
 801a794:	4650      	mov	r0, sl
 801a796:	4659      	mov	r1, fp
 801a798:	f7e6 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	d1a4      	bne.n	801a6ea <_strtod_l+0x57a>
 801a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a7a6:	462b      	mov	r3, r5
 801a7a8:	463a      	mov	r2, r7
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f001 fe60 	bl	801c470 <__s2b>
 801a7b0:	9009      	str	r0, [sp, #36]	; 0x24
 801a7b2:	2800      	cmp	r0, #0
 801a7b4:	f43f af24 	beq.w	801a600 <_strtod_l+0x490>
 801a7b8:	9b07      	ldr	r3, [sp, #28]
 801a7ba:	1b9e      	subs	r6, r3, r6
 801a7bc:	9b08      	ldr	r3, [sp, #32]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	bfb4      	ite	lt
 801a7c2:	4633      	movlt	r3, r6
 801a7c4:	2300      	movge	r3, #0
 801a7c6:	9310      	str	r3, [sp, #64]	; 0x40
 801a7c8:	9b08      	ldr	r3, [sp, #32]
 801a7ca:	2500      	movs	r5, #0
 801a7cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a7d0:	9318      	str	r3, [sp, #96]	; 0x60
 801a7d2:	462e      	mov	r6, r5
 801a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	6859      	ldr	r1, [r3, #4]
 801a7da:	f001 fd9d 	bl	801c318 <_Balloc>
 801a7de:	9007      	str	r0, [sp, #28]
 801a7e0:	2800      	cmp	r0, #0
 801a7e2:	f43f af11 	beq.w	801a608 <_strtod_l+0x498>
 801a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7e8:	691a      	ldr	r2, [r3, #16]
 801a7ea:	3202      	adds	r2, #2
 801a7ec:	f103 010c 	add.w	r1, r3, #12
 801a7f0:	0092      	lsls	r2, r2, #2
 801a7f2:	300c      	adds	r0, #12
 801a7f4:	f7fe fc3c 	bl	8019070 <memcpy>
 801a7f8:	ec4b ab10 	vmov	d0, sl, fp
 801a7fc:	aa20      	add	r2, sp, #128	; 0x80
 801a7fe:	a91f      	add	r1, sp, #124	; 0x7c
 801a800:	4620      	mov	r0, r4
 801a802:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a806:	f002 f96f 	bl	801cae8 <__d2b>
 801a80a:	901e      	str	r0, [sp, #120]	; 0x78
 801a80c:	2800      	cmp	r0, #0
 801a80e:	f43f aefb 	beq.w	801a608 <_strtod_l+0x498>
 801a812:	2101      	movs	r1, #1
 801a814:	4620      	mov	r0, r4
 801a816:	f001 fec5 	bl	801c5a4 <__i2b>
 801a81a:	4606      	mov	r6, r0
 801a81c:	2800      	cmp	r0, #0
 801a81e:	f43f aef3 	beq.w	801a608 <_strtod_l+0x498>
 801a822:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a824:	9904      	ldr	r1, [sp, #16]
 801a826:	2b00      	cmp	r3, #0
 801a828:	bfab      	itete	ge
 801a82a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801a82c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801a82e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801a830:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801a834:	bfac      	ite	ge
 801a836:	eb03 0902 	addge.w	r9, r3, r2
 801a83a:	1ad7      	sublt	r7, r2, r3
 801a83c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a83e:	eba3 0801 	sub.w	r8, r3, r1
 801a842:	4490      	add	r8, r2
 801a844:	4ba3      	ldr	r3, [pc, #652]	; (801aad4 <_strtod_l+0x964>)
 801a846:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801a84a:	4598      	cmp	r8, r3
 801a84c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a850:	f280 80cc 	bge.w	801a9ec <_strtod_l+0x87c>
 801a854:	eba3 0308 	sub.w	r3, r3, r8
 801a858:	2b1f      	cmp	r3, #31
 801a85a:	eba2 0203 	sub.w	r2, r2, r3
 801a85e:	f04f 0101 	mov.w	r1, #1
 801a862:	f300 80b6 	bgt.w	801a9d2 <_strtod_l+0x862>
 801a866:	fa01 f303 	lsl.w	r3, r1, r3
 801a86a:	9311      	str	r3, [sp, #68]	; 0x44
 801a86c:	2300      	movs	r3, #0
 801a86e:	930c      	str	r3, [sp, #48]	; 0x30
 801a870:	eb09 0802 	add.w	r8, r9, r2
 801a874:	9b04      	ldr	r3, [sp, #16]
 801a876:	45c1      	cmp	r9, r8
 801a878:	4417      	add	r7, r2
 801a87a:	441f      	add	r7, r3
 801a87c:	464b      	mov	r3, r9
 801a87e:	bfa8      	it	ge
 801a880:	4643      	movge	r3, r8
 801a882:	42bb      	cmp	r3, r7
 801a884:	bfa8      	it	ge
 801a886:	463b      	movge	r3, r7
 801a888:	2b00      	cmp	r3, #0
 801a88a:	bfc2      	ittt	gt
 801a88c:	eba8 0803 	subgt.w	r8, r8, r3
 801a890:	1aff      	subgt	r7, r7, r3
 801a892:	eba9 0903 	subgt.w	r9, r9, r3
 801a896:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a898:	2b00      	cmp	r3, #0
 801a89a:	dd17      	ble.n	801a8cc <_strtod_l+0x75c>
 801a89c:	4631      	mov	r1, r6
 801a89e:	461a      	mov	r2, r3
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f001 ff3b 	bl	801c71c <__pow5mult>
 801a8a6:	4606      	mov	r6, r0
 801a8a8:	2800      	cmp	r0, #0
 801a8aa:	f43f aead 	beq.w	801a608 <_strtod_l+0x498>
 801a8ae:	4601      	mov	r1, r0
 801a8b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	f001 fe8c 	bl	801c5d0 <__multiply>
 801a8b8:	900f      	str	r0, [sp, #60]	; 0x3c
 801a8ba:	2800      	cmp	r0, #0
 801a8bc:	f43f aea4 	beq.w	801a608 <_strtod_l+0x498>
 801a8c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	f001 fd68 	bl	801c398 <_Bfree>
 801a8c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8ca:	931e      	str	r3, [sp, #120]	; 0x78
 801a8cc:	f1b8 0f00 	cmp.w	r8, #0
 801a8d0:	f300 8091 	bgt.w	801a9f6 <_strtod_l+0x886>
 801a8d4:	9b08      	ldr	r3, [sp, #32]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	dd08      	ble.n	801a8ec <_strtod_l+0x77c>
 801a8da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a8dc:	9907      	ldr	r1, [sp, #28]
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f001 ff1c 	bl	801c71c <__pow5mult>
 801a8e4:	9007      	str	r0, [sp, #28]
 801a8e6:	2800      	cmp	r0, #0
 801a8e8:	f43f ae8e 	beq.w	801a608 <_strtod_l+0x498>
 801a8ec:	2f00      	cmp	r7, #0
 801a8ee:	dd08      	ble.n	801a902 <_strtod_l+0x792>
 801a8f0:	9907      	ldr	r1, [sp, #28]
 801a8f2:	463a      	mov	r2, r7
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	f001 ff6b 	bl	801c7d0 <__lshift>
 801a8fa:	9007      	str	r0, [sp, #28]
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	f43f ae83 	beq.w	801a608 <_strtod_l+0x498>
 801a902:	f1b9 0f00 	cmp.w	r9, #0
 801a906:	dd08      	ble.n	801a91a <_strtod_l+0x7aa>
 801a908:	4631      	mov	r1, r6
 801a90a:	464a      	mov	r2, r9
 801a90c:	4620      	mov	r0, r4
 801a90e:	f001 ff5f 	bl	801c7d0 <__lshift>
 801a912:	4606      	mov	r6, r0
 801a914:	2800      	cmp	r0, #0
 801a916:	f43f ae77 	beq.w	801a608 <_strtod_l+0x498>
 801a91a:	9a07      	ldr	r2, [sp, #28]
 801a91c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a91e:	4620      	mov	r0, r4
 801a920:	f001 ffde 	bl	801c8e0 <__mdiff>
 801a924:	4605      	mov	r5, r0
 801a926:	2800      	cmp	r0, #0
 801a928:	f43f ae6e 	beq.w	801a608 <_strtod_l+0x498>
 801a92c:	68c3      	ldr	r3, [r0, #12]
 801a92e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a930:	2300      	movs	r3, #0
 801a932:	60c3      	str	r3, [r0, #12]
 801a934:	4631      	mov	r1, r6
 801a936:	f001 ffb7 	bl	801c8a8 <__mcmp>
 801a93a:	2800      	cmp	r0, #0
 801a93c:	da65      	bge.n	801aa0a <_strtod_l+0x89a>
 801a93e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a940:	ea53 030a 	orrs.w	r3, r3, sl
 801a944:	f040 8087 	bne.w	801aa56 <_strtod_l+0x8e6>
 801a948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	f040 8082 	bne.w	801aa56 <_strtod_l+0x8e6>
 801a952:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a956:	0d1b      	lsrs	r3, r3, #20
 801a958:	051b      	lsls	r3, r3, #20
 801a95a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a95e:	d97a      	bls.n	801aa56 <_strtod_l+0x8e6>
 801a960:	696b      	ldr	r3, [r5, #20]
 801a962:	b913      	cbnz	r3, 801a96a <_strtod_l+0x7fa>
 801a964:	692b      	ldr	r3, [r5, #16]
 801a966:	2b01      	cmp	r3, #1
 801a968:	dd75      	ble.n	801aa56 <_strtod_l+0x8e6>
 801a96a:	4629      	mov	r1, r5
 801a96c:	2201      	movs	r2, #1
 801a96e:	4620      	mov	r0, r4
 801a970:	f001 ff2e 	bl	801c7d0 <__lshift>
 801a974:	4631      	mov	r1, r6
 801a976:	4605      	mov	r5, r0
 801a978:	f001 ff96 	bl	801c8a8 <__mcmp>
 801a97c:	2800      	cmp	r0, #0
 801a97e:	dd6a      	ble.n	801aa56 <_strtod_l+0x8e6>
 801a980:	9904      	ldr	r1, [sp, #16]
 801a982:	4a55      	ldr	r2, [pc, #340]	; (801aad8 <_strtod_l+0x968>)
 801a984:	465b      	mov	r3, fp
 801a986:	2900      	cmp	r1, #0
 801a988:	f000 8085 	beq.w	801aa96 <_strtod_l+0x926>
 801a98c:	ea02 010b 	and.w	r1, r2, fp
 801a990:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a994:	dc7f      	bgt.n	801aa96 <_strtod_l+0x926>
 801a996:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a99a:	f77f aeaa 	ble.w	801a6f2 <_strtod_l+0x582>
 801a99e:	4a4f      	ldr	r2, [pc, #316]	; (801aadc <_strtod_l+0x96c>)
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801a9a6:	4650      	mov	r0, sl
 801a9a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801a9ac:	4659      	mov	r1, fp
 801a9ae:	f7e5 fe23 	bl	80005f8 <__aeabi_dmul>
 801a9b2:	460b      	mov	r3, r1
 801a9b4:	4303      	orrs	r3, r0
 801a9b6:	bf08      	it	eq
 801a9b8:	2322      	moveq	r3, #34	; 0x22
 801a9ba:	4682      	mov	sl, r0
 801a9bc:	468b      	mov	fp, r1
 801a9be:	bf08      	it	eq
 801a9c0:	6023      	streq	r3, [r4, #0]
 801a9c2:	e62b      	b.n	801a61c <_strtod_l+0x4ac>
 801a9c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9c8:	fa02 f303 	lsl.w	r3, r2, r3
 801a9cc:	ea03 0a0a 	and.w	sl, r3, sl
 801a9d0:	e6de      	b.n	801a790 <_strtod_l+0x620>
 801a9d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a9d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a9da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a9de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a9e2:	fa01 f308 	lsl.w	r3, r1, r8
 801a9e6:	930c      	str	r3, [sp, #48]	; 0x30
 801a9e8:	9111      	str	r1, [sp, #68]	; 0x44
 801a9ea:	e741      	b.n	801a870 <_strtod_l+0x700>
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	930c      	str	r3, [sp, #48]	; 0x30
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	9311      	str	r3, [sp, #68]	; 0x44
 801a9f4:	e73c      	b.n	801a870 <_strtod_l+0x700>
 801a9f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a9f8:	4642      	mov	r2, r8
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f001 fee8 	bl	801c7d0 <__lshift>
 801aa00:	901e      	str	r0, [sp, #120]	; 0x78
 801aa02:	2800      	cmp	r0, #0
 801aa04:	f47f af66 	bne.w	801a8d4 <_strtod_l+0x764>
 801aa08:	e5fe      	b.n	801a608 <_strtod_l+0x498>
 801aa0a:	465f      	mov	r7, fp
 801aa0c:	d16e      	bne.n	801aaec <_strtod_l+0x97c>
 801aa0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aa14:	b342      	cbz	r2, 801aa68 <_strtod_l+0x8f8>
 801aa16:	4a32      	ldr	r2, [pc, #200]	; (801aae0 <_strtod_l+0x970>)
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	d128      	bne.n	801aa6e <_strtod_l+0x8fe>
 801aa1c:	9b04      	ldr	r3, [sp, #16]
 801aa1e:	4650      	mov	r0, sl
 801aa20:	b1eb      	cbz	r3, 801aa5e <_strtod_l+0x8ee>
 801aa22:	4a2d      	ldr	r2, [pc, #180]	; (801aad8 <_strtod_l+0x968>)
 801aa24:	403a      	ands	r2, r7
 801aa26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801aa2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801aa2e:	d819      	bhi.n	801aa64 <_strtod_l+0x8f4>
 801aa30:	0d12      	lsrs	r2, r2, #20
 801aa32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801aa36:	fa01 f303 	lsl.w	r3, r1, r3
 801aa3a:	4298      	cmp	r0, r3
 801aa3c:	d117      	bne.n	801aa6e <_strtod_l+0x8fe>
 801aa3e:	4b29      	ldr	r3, [pc, #164]	; (801aae4 <_strtod_l+0x974>)
 801aa40:	429f      	cmp	r7, r3
 801aa42:	d102      	bne.n	801aa4a <_strtod_l+0x8da>
 801aa44:	3001      	adds	r0, #1
 801aa46:	f43f addf 	beq.w	801a608 <_strtod_l+0x498>
 801aa4a:	4b23      	ldr	r3, [pc, #140]	; (801aad8 <_strtod_l+0x968>)
 801aa4c:	403b      	ands	r3, r7
 801aa4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801aa52:	f04f 0a00 	mov.w	sl, #0
 801aa56:	9b04      	ldr	r3, [sp, #16]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d1a0      	bne.n	801a99e <_strtod_l+0x82e>
 801aa5c:	e5de      	b.n	801a61c <_strtod_l+0x4ac>
 801aa5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa62:	e7ea      	b.n	801aa3a <_strtod_l+0x8ca>
 801aa64:	460b      	mov	r3, r1
 801aa66:	e7e8      	b.n	801aa3a <_strtod_l+0x8ca>
 801aa68:	ea53 030a 	orrs.w	r3, r3, sl
 801aa6c:	d088      	beq.n	801a980 <_strtod_l+0x810>
 801aa6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa70:	b1db      	cbz	r3, 801aaaa <_strtod_l+0x93a>
 801aa72:	423b      	tst	r3, r7
 801aa74:	d0ef      	beq.n	801aa56 <_strtod_l+0x8e6>
 801aa76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa78:	9a04      	ldr	r2, [sp, #16]
 801aa7a:	4650      	mov	r0, sl
 801aa7c:	4659      	mov	r1, fp
 801aa7e:	b1c3      	cbz	r3, 801aab2 <_strtod_l+0x942>
 801aa80:	f7ff fb58 	bl	801a134 <sulp>
 801aa84:	4602      	mov	r2, r0
 801aa86:	460b      	mov	r3, r1
 801aa88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801aa8c:	f7e5 fbfe 	bl	800028c <__adddf3>
 801aa90:	4682      	mov	sl, r0
 801aa92:	468b      	mov	fp, r1
 801aa94:	e7df      	b.n	801aa56 <_strtod_l+0x8e6>
 801aa96:	4013      	ands	r3, r2
 801aa98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aa9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801aaa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801aaa4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801aaa8:	e7d5      	b.n	801aa56 <_strtod_l+0x8e6>
 801aaaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aaac:	ea13 0f0a 	tst.w	r3, sl
 801aab0:	e7e0      	b.n	801aa74 <_strtod_l+0x904>
 801aab2:	f7ff fb3f 	bl	801a134 <sulp>
 801aab6:	4602      	mov	r2, r0
 801aab8:	460b      	mov	r3, r1
 801aaba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801aabe:	f7e5 fbe3 	bl	8000288 <__aeabi_dsub>
 801aac2:	2200      	movs	r2, #0
 801aac4:	2300      	movs	r3, #0
 801aac6:	4682      	mov	sl, r0
 801aac8:	468b      	mov	fp, r1
 801aaca:	f7e5 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 801aace:	2800      	cmp	r0, #0
 801aad0:	d0c1      	beq.n	801aa56 <_strtod_l+0x8e6>
 801aad2:	e60e      	b.n	801a6f2 <_strtod_l+0x582>
 801aad4:	fffffc02 	.word	0xfffffc02
 801aad8:	7ff00000 	.word	0x7ff00000
 801aadc:	39500000 	.word	0x39500000
 801aae0:	000fffff 	.word	0x000fffff
 801aae4:	7fefffff 	.word	0x7fefffff
 801aae8:	0801f740 	.word	0x0801f740
 801aaec:	4631      	mov	r1, r6
 801aaee:	4628      	mov	r0, r5
 801aaf0:	f002 f856 	bl	801cba0 <__ratio>
 801aaf4:	ec59 8b10 	vmov	r8, r9, d0
 801aaf8:	ee10 0a10 	vmov	r0, s0
 801aafc:	2200      	movs	r2, #0
 801aafe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ab02:	4649      	mov	r1, r9
 801ab04:	f7e5 fff4 	bl	8000af0 <__aeabi_dcmple>
 801ab08:	2800      	cmp	r0, #0
 801ab0a:	d07c      	beq.n	801ac06 <_strtod_l+0xa96>
 801ab0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d04c      	beq.n	801abac <_strtod_l+0xa3c>
 801ab12:	4b95      	ldr	r3, [pc, #596]	; (801ad68 <_strtod_l+0xbf8>)
 801ab14:	2200      	movs	r2, #0
 801ab16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ab1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ad68 <_strtod_l+0xbf8>
 801ab1e:	f04f 0800 	mov.w	r8, #0
 801ab22:	4b92      	ldr	r3, [pc, #584]	; (801ad6c <_strtod_l+0xbfc>)
 801ab24:	403b      	ands	r3, r7
 801ab26:	9311      	str	r3, [sp, #68]	; 0x44
 801ab28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab2a:	4b91      	ldr	r3, [pc, #580]	; (801ad70 <_strtod_l+0xc00>)
 801ab2c:	429a      	cmp	r2, r3
 801ab2e:	f040 80b2 	bne.w	801ac96 <_strtod_l+0xb26>
 801ab32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ab36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ab3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ab3e:	ec4b ab10 	vmov	d0, sl, fp
 801ab42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801ab46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ab4a:	f001 ff51 	bl	801c9f0 <__ulp>
 801ab4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ab52:	ec53 2b10 	vmov	r2, r3, d0
 801ab56:	f7e5 fd4f 	bl	80005f8 <__aeabi_dmul>
 801ab5a:	4652      	mov	r2, sl
 801ab5c:	465b      	mov	r3, fp
 801ab5e:	f7e5 fb95 	bl	800028c <__adddf3>
 801ab62:	460b      	mov	r3, r1
 801ab64:	4981      	ldr	r1, [pc, #516]	; (801ad6c <_strtod_l+0xbfc>)
 801ab66:	4a83      	ldr	r2, [pc, #524]	; (801ad74 <_strtod_l+0xc04>)
 801ab68:	4019      	ands	r1, r3
 801ab6a:	4291      	cmp	r1, r2
 801ab6c:	4682      	mov	sl, r0
 801ab6e:	d95e      	bls.n	801ac2e <_strtod_l+0xabe>
 801ab70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ab76:	4293      	cmp	r3, r2
 801ab78:	d103      	bne.n	801ab82 <_strtod_l+0xa12>
 801ab7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab7c:	3301      	adds	r3, #1
 801ab7e:	f43f ad43 	beq.w	801a608 <_strtod_l+0x498>
 801ab82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801ad80 <_strtod_l+0xc10>
 801ab86:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ab8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f001 fc03 	bl	801c398 <_Bfree>
 801ab92:	9907      	ldr	r1, [sp, #28]
 801ab94:	4620      	mov	r0, r4
 801ab96:	f001 fbff 	bl	801c398 <_Bfree>
 801ab9a:	4631      	mov	r1, r6
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	f001 fbfb 	bl	801c398 <_Bfree>
 801aba2:	4629      	mov	r1, r5
 801aba4:	4620      	mov	r0, r4
 801aba6:	f001 fbf7 	bl	801c398 <_Bfree>
 801abaa:	e613      	b.n	801a7d4 <_strtod_l+0x664>
 801abac:	f1ba 0f00 	cmp.w	sl, #0
 801abb0:	d11b      	bne.n	801abea <_strtod_l+0xa7a>
 801abb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801abb6:	b9f3      	cbnz	r3, 801abf6 <_strtod_l+0xa86>
 801abb8:	4b6b      	ldr	r3, [pc, #428]	; (801ad68 <_strtod_l+0xbf8>)
 801abba:	2200      	movs	r2, #0
 801abbc:	4640      	mov	r0, r8
 801abbe:	4649      	mov	r1, r9
 801abc0:	f7e5 ff8c 	bl	8000adc <__aeabi_dcmplt>
 801abc4:	b9d0      	cbnz	r0, 801abfc <_strtod_l+0xa8c>
 801abc6:	4640      	mov	r0, r8
 801abc8:	4649      	mov	r1, r9
 801abca:	4b6b      	ldr	r3, [pc, #428]	; (801ad78 <_strtod_l+0xc08>)
 801abcc:	2200      	movs	r2, #0
 801abce:	f7e5 fd13 	bl	80005f8 <__aeabi_dmul>
 801abd2:	4680      	mov	r8, r0
 801abd4:	4689      	mov	r9, r1
 801abd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801abda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801abde:	931b      	str	r3, [sp, #108]	; 0x6c
 801abe0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801abe4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801abe8:	e79b      	b.n	801ab22 <_strtod_l+0x9b2>
 801abea:	f1ba 0f01 	cmp.w	sl, #1
 801abee:	d102      	bne.n	801abf6 <_strtod_l+0xa86>
 801abf0:	2f00      	cmp	r7, #0
 801abf2:	f43f ad7e 	beq.w	801a6f2 <_strtod_l+0x582>
 801abf6:	4b61      	ldr	r3, [pc, #388]	; (801ad7c <_strtod_l+0xc0c>)
 801abf8:	2200      	movs	r2, #0
 801abfa:	e78c      	b.n	801ab16 <_strtod_l+0x9a6>
 801abfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ad78 <_strtod_l+0xc08>
 801ac00:	f04f 0800 	mov.w	r8, #0
 801ac04:	e7e7      	b.n	801abd6 <_strtod_l+0xa66>
 801ac06:	4b5c      	ldr	r3, [pc, #368]	; (801ad78 <_strtod_l+0xc08>)
 801ac08:	4640      	mov	r0, r8
 801ac0a:	4649      	mov	r1, r9
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	f7e5 fcf3 	bl	80005f8 <__aeabi_dmul>
 801ac12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac14:	4680      	mov	r8, r0
 801ac16:	4689      	mov	r9, r1
 801ac18:	b933      	cbnz	r3, 801ac28 <_strtod_l+0xab8>
 801ac1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac1e:	9012      	str	r0, [sp, #72]	; 0x48
 801ac20:	9313      	str	r3, [sp, #76]	; 0x4c
 801ac22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ac26:	e7dd      	b.n	801abe4 <_strtod_l+0xa74>
 801ac28:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801ac2c:	e7f9      	b.n	801ac22 <_strtod_l+0xab2>
 801ac2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ac32:	9b04      	ldr	r3, [sp, #16]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d1a8      	bne.n	801ab8a <_strtod_l+0xa1a>
 801ac38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ac3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ac3e:	0d1b      	lsrs	r3, r3, #20
 801ac40:	051b      	lsls	r3, r3, #20
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d1a1      	bne.n	801ab8a <_strtod_l+0xa1a>
 801ac46:	4640      	mov	r0, r8
 801ac48:	4649      	mov	r1, r9
 801ac4a:	f7e6 f835 	bl	8000cb8 <__aeabi_d2lz>
 801ac4e:	f7e5 fca5 	bl	800059c <__aeabi_l2d>
 801ac52:	4602      	mov	r2, r0
 801ac54:	460b      	mov	r3, r1
 801ac56:	4640      	mov	r0, r8
 801ac58:	4649      	mov	r1, r9
 801ac5a:	f7e5 fb15 	bl	8000288 <__aeabi_dsub>
 801ac5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ac60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ac64:	ea43 030a 	orr.w	r3, r3, sl
 801ac68:	4313      	orrs	r3, r2
 801ac6a:	4680      	mov	r8, r0
 801ac6c:	4689      	mov	r9, r1
 801ac6e:	d053      	beq.n	801ad18 <_strtod_l+0xba8>
 801ac70:	a335      	add	r3, pc, #212	; (adr r3, 801ad48 <_strtod_l+0xbd8>)
 801ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac76:	f7e5 ff31 	bl	8000adc <__aeabi_dcmplt>
 801ac7a:	2800      	cmp	r0, #0
 801ac7c:	f47f acce 	bne.w	801a61c <_strtod_l+0x4ac>
 801ac80:	a333      	add	r3, pc, #204	; (adr r3, 801ad50 <_strtod_l+0xbe0>)
 801ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac86:	4640      	mov	r0, r8
 801ac88:	4649      	mov	r1, r9
 801ac8a:	f7e5 ff45 	bl	8000b18 <__aeabi_dcmpgt>
 801ac8e:	2800      	cmp	r0, #0
 801ac90:	f43f af7b 	beq.w	801ab8a <_strtod_l+0xa1a>
 801ac94:	e4c2      	b.n	801a61c <_strtod_l+0x4ac>
 801ac96:	9b04      	ldr	r3, [sp, #16]
 801ac98:	b333      	cbz	r3, 801ace8 <_strtod_l+0xb78>
 801ac9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ac9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aca0:	d822      	bhi.n	801ace8 <_strtod_l+0xb78>
 801aca2:	a32d      	add	r3, pc, #180	; (adr r3, 801ad58 <_strtod_l+0xbe8>)
 801aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca8:	4640      	mov	r0, r8
 801acaa:	4649      	mov	r1, r9
 801acac:	f7e5 ff20 	bl	8000af0 <__aeabi_dcmple>
 801acb0:	b1a0      	cbz	r0, 801acdc <_strtod_l+0xb6c>
 801acb2:	4649      	mov	r1, r9
 801acb4:	4640      	mov	r0, r8
 801acb6:	f7e5 ff77 	bl	8000ba8 <__aeabi_d2uiz>
 801acba:	2801      	cmp	r0, #1
 801acbc:	bf38      	it	cc
 801acbe:	2001      	movcc	r0, #1
 801acc0:	f7e5 fc20 	bl	8000504 <__aeabi_ui2d>
 801acc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acc6:	4680      	mov	r8, r0
 801acc8:	4689      	mov	r9, r1
 801acca:	bb13      	cbnz	r3, 801ad12 <_strtod_l+0xba2>
 801accc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801acd0:	9014      	str	r0, [sp, #80]	; 0x50
 801acd2:	9315      	str	r3, [sp, #84]	; 0x54
 801acd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801acd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801acdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ace0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ace4:	1a9b      	subs	r3, r3, r2
 801ace6:	930d      	str	r3, [sp, #52]	; 0x34
 801ace8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801acec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801acf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801acf4:	f001 fe7c 	bl	801c9f0 <__ulp>
 801acf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801acfc:	ec53 2b10 	vmov	r2, r3, d0
 801ad00:	f7e5 fc7a 	bl	80005f8 <__aeabi_dmul>
 801ad04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad08:	f7e5 fac0 	bl	800028c <__adddf3>
 801ad0c:	4682      	mov	sl, r0
 801ad0e:	468b      	mov	fp, r1
 801ad10:	e78f      	b.n	801ac32 <_strtod_l+0xac2>
 801ad12:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801ad16:	e7dd      	b.n	801acd4 <_strtod_l+0xb64>
 801ad18:	a311      	add	r3, pc, #68	; (adr r3, 801ad60 <_strtod_l+0xbf0>)
 801ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad1e:	f7e5 fedd 	bl	8000adc <__aeabi_dcmplt>
 801ad22:	e7b4      	b.n	801ac8e <_strtod_l+0xb1e>
 801ad24:	2300      	movs	r3, #0
 801ad26:	930e      	str	r3, [sp, #56]	; 0x38
 801ad28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ad2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad2c:	6013      	str	r3, [r2, #0]
 801ad2e:	f7ff ba65 	b.w	801a1fc <_strtod_l+0x8c>
 801ad32:	2b65      	cmp	r3, #101	; 0x65
 801ad34:	f43f ab5d 	beq.w	801a3f2 <_strtod_l+0x282>
 801ad38:	2b45      	cmp	r3, #69	; 0x45
 801ad3a:	f43f ab5a 	beq.w	801a3f2 <_strtod_l+0x282>
 801ad3e:	2201      	movs	r2, #1
 801ad40:	f7ff bb92 	b.w	801a468 <_strtod_l+0x2f8>
 801ad44:	f3af 8000 	nop.w
 801ad48:	94a03595 	.word	0x94a03595
 801ad4c:	3fdfffff 	.word	0x3fdfffff
 801ad50:	35afe535 	.word	0x35afe535
 801ad54:	3fe00000 	.word	0x3fe00000
 801ad58:	ffc00000 	.word	0xffc00000
 801ad5c:	41dfffff 	.word	0x41dfffff
 801ad60:	94a03595 	.word	0x94a03595
 801ad64:	3fcfffff 	.word	0x3fcfffff
 801ad68:	3ff00000 	.word	0x3ff00000
 801ad6c:	7ff00000 	.word	0x7ff00000
 801ad70:	7fe00000 	.word	0x7fe00000
 801ad74:	7c9fffff 	.word	0x7c9fffff
 801ad78:	3fe00000 	.word	0x3fe00000
 801ad7c:	bff00000 	.word	0xbff00000
 801ad80:	7fefffff 	.word	0x7fefffff

0801ad84 <_strtod_r>:
 801ad84:	4b01      	ldr	r3, [pc, #4]	; (801ad8c <_strtod_r+0x8>)
 801ad86:	f7ff b9f3 	b.w	801a170 <_strtod_l>
 801ad8a:	bf00      	nop
 801ad8c:	200000b0 	.word	0x200000b0

0801ad90 <_strtol_l.isra.0>:
 801ad90:	2b01      	cmp	r3, #1
 801ad92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad96:	d001      	beq.n	801ad9c <_strtol_l.isra.0+0xc>
 801ad98:	2b24      	cmp	r3, #36	; 0x24
 801ad9a:	d906      	bls.n	801adaa <_strtol_l.isra.0+0x1a>
 801ad9c:	f7fe f936 	bl	801900c <__errno>
 801ada0:	2316      	movs	r3, #22
 801ada2:	6003      	str	r3, [r0, #0]
 801ada4:	2000      	movs	r0, #0
 801ada6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adaa:	4f3a      	ldr	r7, [pc, #232]	; (801ae94 <_strtol_l.isra.0+0x104>)
 801adac:	468e      	mov	lr, r1
 801adae:	4676      	mov	r6, lr
 801adb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801adb4:	5de5      	ldrb	r5, [r4, r7]
 801adb6:	f015 0508 	ands.w	r5, r5, #8
 801adba:	d1f8      	bne.n	801adae <_strtol_l.isra.0+0x1e>
 801adbc:	2c2d      	cmp	r4, #45	; 0x2d
 801adbe:	d134      	bne.n	801ae2a <_strtol_l.isra.0+0x9a>
 801adc0:	f89e 4000 	ldrb.w	r4, [lr]
 801adc4:	f04f 0801 	mov.w	r8, #1
 801adc8:	f106 0e02 	add.w	lr, r6, #2
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d05c      	beq.n	801ae8a <_strtol_l.isra.0+0xfa>
 801add0:	2b10      	cmp	r3, #16
 801add2:	d10c      	bne.n	801adee <_strtol_l.isra.0+0x5e>
 801add4:	2c30      	cmp	r4, #48	; 0x30
 801add6:	d10a      	bne.n	801adee <_strtol_l.isra.0+0x5e>
 801add8:	f89e 4000 	ldrb.w	r4, [lr]
 801addc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ade0:	2c58      	cmp	r4, #88	; 0x58
 801ade2:	d14d      	bne.n	801ae80 <_strtol_l.isra.0+0xf0>
 801ade4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ade8:	2310      	movs	r3, #16
 801adea:	f10e 0e02 	add.w	lr, lr, #2
 801adee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801adf2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801adf6:	2600      	movs	r6, #0
 801adf8:	fbbc f9f3 	udiv	r9, ip, r3
 801adfc:	4635      	mov	r5, r6
 801adfe:	fb03 ca19 	mls	sl, r3, r9, ip
 801ae02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ae06:	2f09      	cmp	r7, #9
 801ae08:	d818      	bhi.n	801ae3c <_strtol_l.isra.0+0xac>
 801ae0a:	463c      	mov	r4, r7
 801ae0c:	42a3      	cmp	r3, r4
 801ae0e:	dd24      	ble.n	801ae5a <_strtol_l.isra.0+0xca>
 801ae10:	2e00      	cmp	r6, #0
 801ae12:	db1f      	blt.n	801ae54 <_strtol_l.isra.0+0xc4>
 801ae14:	45a9      	cmp	r9, r5
 801ae16:	d31d      	bcc.n	801ae54 <_strtol_l.isra.0+0xc4>
 801ae18:	d101      	bne.n	801ae1e <_strtol_l.isra.0+0x8e>
 801ae1a:	45a2      	cmp	sl, r4
 801ae1c:	db1a      	blt.n	801ae54 <_strtol_l.isra.0+0xc4>
 801ae1e:	fb05 4503 	mla	r5, r5, r3, r4
 801ae22:	2601      	movs	r6, #1
 801ae24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ae28:	e7eb      	b.n	801ae02 <_strtol_l.isra.0+0x72>
 801ae2a:	2c2b      	cmp	r4, #43	; 0x2b
 801ae2c:	bf08      	it	eq
 801ae2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ae32:	46a8      	mov	r8, r5
 801ae34:	bf08      	it	eq
 801ae36:	f106 0e02 	addeq.w	lr, r6, #2
 801ae3a:	e7c7      	b.n	801adcc <_strtol_l.isra.0+0x3c>
 801ae3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ae40:	2f19      	cmp	r7, #25
 801ae42:	d801      	bhi.n	801ae48 <_strtol_l.isra.0+0xb8>
 801ae44:	3c37      	subs	r4, #55	; 0x37
 801ae46:	e7e1      	b.n	801ae0c <_strtol_l.isra.0+0x7c>
 801ae48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ae4c:	2f19      	cmp	r7, #25
 801ae4e:	d804      	bhi.n	801ae5a <_strtol_l.isra.0+0xca>
 801ae50:	3c57      	subs	r4, #87	; 0x57
 801ae52:	e7db      	b.n	801ae0c <_strtol_l.isra.0+0x7c>
 801ae54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801ae58:	e7e4      	b.n	801ae24 <_strtol_l.isra.0+0x94>
 801ae5a:	2e00      	cmp	r6, #0
 801ae5c:	da05      	bge.n	801ae6a <_strtol_l.isra.0+0xda>
 801ae5e:	2322      	movs	r3, #34	; 0x22
 801ae60:	6003      	str	r3, [r0, #0]
 801ae62:	4665      	mov	r5, ip
 801ae64:	b942      	cbnz	r2, 801ae78 <_strtol_l.isra.0+0xe8>
 801ae66:	4628      	mov	r0, r5
 801ae68:	e79d      	b.n	801ada6 <_strtol_l.isra.0+0x16>
 801ae6a:	f1b8 0f00 	cmp.w	r8, #0
 801ae6e:	d000      	beq.n	801ae72 <_strtol_l.isra.0+0xe2>
 801ae70:	426d      	negs	r5, r5
 801ae72:	2a00      	cmp	r2, #0
 801ae74:	d0f7      	beq.n	801ae66 <_strtol_l.isra.0+0xd6>
 801ae76:	b10e      	cbz	r6, 801ae7c <_strtol_l.isra.0+0xec>
 801ae78:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801ae7c:	6011      	str	r1, [r2, #0]
 801ae7e:	e7f2      	b.n	801ae66 <_strtol_l.isra.0+0xd6>
 801ae80:	2430      	movs	r4, #48	; 0x30
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d1b3      	bne.n	801adee <_strtol_l.isra.0+0x5e>
 801ae86:	2308      	movs	r3, #8
 801ae88:	e7b1      	b.n	801adee <_strtol_l.isra.0+0x5e>
 801ae8a:	2c30      	cmp	r4, #48	; 0x30
 801ae8c:	d0a4      	beq.n	801add8 <_strtol_l.isra.0+0x48>
 801ae8e:	230a      	movs	r3, #10
 801ae90:	e7ad      	b.n	801adee <_strtol_l.isra.0+0x5e>
 801ae92:	bf00      	nop
 801ae94:	0801f769 	.word	0x0801f769

0801ae98 <_strtol_r>:
 801ae98:	f7ff bf7a 	b.w	801ad90 <_strtol_l.isra.0>

0801ae9c <_write_r>:
 801ae9c:	b538      	push	{r3, r4, r5, lr}
 801ae9e:	4d07      	ldr	r5, [pc, #28]	; (801aebc <_write_r+0x20>)
 801aea0:	4604      	mov	r4, r0
 801aea2:	4608      	mov	r0, r1
 801aea4:	4611      	mov	r1, r2
 801aea6:	2200      	movs	r2, #0
 801aea8:	602a      	str	r2, [r5, #0]
 801aeaa:	461a      	mov	r2, r3
 801aeac:	f7f1 fce3 	bl	800c876 <_write>
 801aeb0:	1c43      	adds	r3, r0, #1
 801aeb2:	d102      	bne.n	801aeba <_write_r+0x1e>
 801aeb4:	682b      	ldr	r3, [r5, #0]
 801aeb6:	b103      	cbz	r3, 801aeba <_write_r+0x1e>
 801aeb8:	6023      	str	r3, [r4, #0]
 801aeba:	bd38      	pop	{r3, r4, r5, pc}
 801aebc:	2000a9bc 	.word	0x2000a9bc

0801aec0 <_close_r>:
 801aec0:	b538      	push	{r3, r4, r5, lr}
 801aec2:	4d06      	ldr	r5, [pc, #24]	; (801aedc <_close_r+0x1c>)
 801aec4:	2300      	movs	r3, #0
 801aec6:	4604      	mov	r4, r0
 801aec8:	4608      	mov	r0, r1
 801aeca:	602b      	str	r3, [r5, #0]
 801aecc:	f7f1 fcef 	bl	800c8ae <_close>
 801aed0:	1c43      	adds	r3, r0, #1
 801aed2:	d102      	bne.n	801aeda <_close_r+0x1a>
 801aed4:	682b      	ldr	r3, [r5, #0]
 801aed6:	b103      	cbz	r3, 801aeda <_close_r+0x1a>
 801aed8:	6023      	str	r3, [r4, #0]
 801aeda:	bd38      	pop	{r3, r4, r5, pc}
 801aedc:	2000a9bc 	.word	0x2000a9bc

0801aee0 <quorem>:
 801aee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aee4:	6903      	ldr	r3, [r0, #16]
 801aee6:	690c      	ldr	r4, [r1, #16]
 801aee8:	42a3      	cmp	r3, r4
 801aeea:	4607      	mov	r7, r0
 801aeec:	f2c0 8081 	blt.w	801aff2 <quorem+0x112>
 801aef0:	3c01      	subs	r4, #1
 801aef2:	f101 0814 	add.w	r8, r1, #20
 801aef6:	f100 0514 	add.w	r5, r0, #20
 801aefa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aefe:	9301      	str	r3, [sp, #4]
 801af00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801af04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801af08:	3301      	adds	r3, #1
 801af0a:	429a      	cmp	r2, r3
 801af0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801af10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801af14:	fbb2 f6f3 	udiv	r6, r2, r3
 801af18:	d331      	bcc.n	801af7e <quorem+0x9e>
 801af1a:	f04f 0e00 	mov.w	lr, #0
 801af1e:	4640      	mov	r0, r8
 801af20:	46ac      	mov	ip, r5
 801af22:	46f2      	mov	sl, lr
 801af24:	f850 2b04 	ldr.w	r2, [r0], #4
 801af28:	b293      	uxth	r3, r2
 801af2a:	fb06 e303 	mla	r3, r6, r3, lr
 801af2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801af32:	b29b      	uxth	r3, r3
 801af34:	ebaa 0303 	sub.w	r3, sl, r3
 801af38:	0c12      	lsrs	r2, r2, #16
 801af3a:	f8dc a000 	ldr.w	sl, [ip]
 801af3e:	fb06 e202 	mla	r2, r6, r2, lr
 801af42:	fa13 f38a 	uxtah	r3, r3, sl
 801af46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801af4a:	fa1f fa82 	uxth.w	sl, r2
 801af4e:	f8dc 2000 	ldr.w	r2, [ip]
 801af52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801af56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801af5a:	b29b      	uxth	r3, r3
 801af5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af60:	4581      	cmp	r9, r0
 801af62:	f84c 3b04 	str.w	r3, [ip], #4
 801af66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801af6a:	d2db      	bcs.n	801af24 <quorem+0x44>
 801af6c:	f855 300b 	ldr.w	r3, [r5, fp]
 801af70:	b92b      	cbnz	r3, 801af7e <quorem+0x9e>
 801af72:	9b01      	ldr	r3, [sp, #4]
 801af74:	3b04      	subs	r3, #4
 801af76:	429d      	cmp	r5, r3
 801af78:	461a      	mov	r2, r3
 801af7a:	d32e      	bcc.n	801afda <quorem+0xfa>
 801af7c:	613c      	str	r4, [r7, #16]
 801af7e:	4638      	mov	r0, r7
 801af80:	f001 fc92 	bl	801c8a8 <__mcmp>
 801af84:	2800      	cmp	r0, #0
 801af86:	db24      	blt.n	801afd2 <quorem+0xf2>
 801af88:	3601      	adds	r6, #1
 801af8a:	4628      	mov	r0, r5
 801af8c:	f04f 0c00 	mov.w	ip, #0
 801af90:	f858 2b04 	ldr.w	r2, [r8], #4
 801af94:	f8d0 e000 	ldr.w	lr, [r0]
 801af98:	b293      	uxth	r3, r2
 801af9a:	ebac 0303 	sub.w	r3, ip, r3
 801af9e:	0c12      	lsrs	r2, r2, #16
 801afa0:	fa13 f38e 	uxtah	r3, r3, lr
 801afa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801afa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801afac:	b29b      	uxth	r3, r3
 801afae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801afb2:	45c1      	cmp	r9, r8
 801afb4:	f840 3b04 	str.w	r3, [r0], #4
 801afb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801afbc:	d2e8      	bcs.n	801af90 <quorem+0xb0>
 801afbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801afc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801afc6:	b922      	cbnz	r2, 801afd2 <quorem+0xf2>
 801afc8:	3b04      	subs	r3, #4
 801afca:	429d      	cmp	r5, r3
 801afcc:	461a      	mov	r2, r3
 801afce:	d30a      	bcc.n	801afe6 <quorem+0x106>
 801afd0:	613c      	str	r4, [r7, #16]
 801afd2:	4630      	mov	r0, r6
 801afd4:	b003      	add	sp, #12
 801afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afda:	6812      	ldr	r2, [r2, #0]
 801afdc:	3b04      	subs	r3, #4
 801afde:	2a00      	cmp	r2, #0
 801afe0:	d1cc      	bne.n	801af7c <quorem+0x9c>
 801afe2:	3c01      	subs	r4, #1
 801afe4:	e7c7      	b.n	801af76 <quorem+0x96>
 801afe6:	6812      	ldr	r2, [r2, #0]
 801afe8:	3b04      	subs	r3, #4
 801afea:	2a00      	cmp	r2, #0
 801afec:	d1f0      	bne.n	801afd0 <quorem+0xf0>
 801afee:	3c01      	subs	r4, #1
 801aff0:	e7eb      	b.n	801afca <quorem+0xea>
 801aff2:	2000      	movs	r0, #0
 801aff4:	e7ee      	b.n	801afd4 <quorem+0xf4>
	...

0801aff8 <_dtoa_r>:
 801aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801affc:	ed2d 8b02 	vpush	{d8}
 801b000:	ec57 6b10 	vmov	r6, r7, d0
 801b004:	b095      	sub	sp, #84	; 0x54
 801b006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b00c:	9105      	str	r1, [sp, #20]
 801b00e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b012:	4604      	mov	r4, r0
 801b014:	9209      	str	r2, [sp, #36]	; 0x24
 801b016:	930f      	str	r3, [sp, #60]	; 0x3c
 801b018:	b975      	cbnz	r5, 801b038 <_dtoa_r+0x40>
 801b01a:	2010      	movs	r0, #16
 801b01c:	f7fe f820 	bl	8019060 <malloc>
 801b020:	4602      	mov	r2, r0
 801b022:	6260      	str	r0, [r4, #36]	; 0x24
 801b024:	b920      	cbnz	r0, 801b030 <_dtoa_r+0x38>
 801b026:	4bb2      	ldr	r3, [pc, #712]	; (801b2f0 <_dtoa_r+0x2f8>)
 801b028:	21ea      	movs	r1, #234	; 0xea
 801b02a:	48b2      	ldr	r0, [pc, #712]	; (801b2f4 <_dtoa_r+0x2fc>)
 801b02c:	f002 f808 	bl	801d040 <__assert_func>
 801b030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b034:	6005      	str	r5, [r0, #0]
 801b036:	60c5      	str	r5, [r0, #12]
 801b038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b03a:	6819      	ldr	r1, [r3, #0]
 801b03c:	b151      	cbz	r1, 801b054 <_dtoa_r+0x5c>
 801b03e:	685a      	ldr	r2, [r3, #4]
 801b040:	604a      	str	r2, [r1, #4]
 801b042:	2301      	movs	r3, #1
 801b044:	4093      	lsls	r3, r2
 801b046:	608b      	str	r3, [r1, #8]
 801b048:	4620      	mov	r0, r4
 801b04a:	f001 f9a5 	bl	801c398 <_Bfree>
 801b04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b050:	2200      	movs	r2, #0
 801b052:	601a      	str	r2, [r3, #0]
 801b054:	1e3b      	subs	r3, r7, #0
 801b056:	bfb9      	ittee	lt
 801b058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b05c:	9303      	strlt	r3, [sp, #12]
 801b05e:	2300      	movge	r3, #0
 801b060:	f8c8 3000 	strge.w	r3, [r8]
 801b064:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b068:	4ba3      	ldr	r3, [pc, #652]	; (801b2f8 <_dtoa_r+0x300>)
 801b06a:	bfbc      	itt	lt
 801b06c:	2201      	movlt	r2, #1
 801b06e:	f8c8 2000 	strlt.w	r2, [r8]
 801b072:	ea33 0309 	bics.w	r3, r3, r9
 801b076:	d11b      	bne.n	801b0b0 <_dtoa_r+0xb8>
 801b078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b07a:	f242 730f 	movw	r3, #9999	; 0x270f
 801b07e:	6013      	str	r3, [r2, #0]
 801b080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b084:	4333      	orrs	r3, r6
 801b086:	f000 857a 	beq.w	801bb7e <_dtoa_r+0xb86>
 801b08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b08c:	b963      	cbnz	r3, 801b0a8 <_dtoa_r+0xb0>
 801b08e:	4b9b      	ldr	r3, [pc, #620]	; (801b2fc <_dtoa_r+0x304>)
 801b090:	e024      	b.n	801b0dc <_dtoa_r+0xe4>
 801b092:	4b9b      	ldr	r3, [pc, #620]	; (801b300 <_dtoa_r+0x308>)
 801b094:	9300      	str	r3, [sp, #0]
 801b096:	3308      	adds	r3, #8
 801b098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b09a:	6013      	str	r3, [r2, #0]
 801b09c:	9800      	ldr	r0, [sp, #0]
 801b09e:	b015      	add	sp, #84	; 0x54
 801b0a0:	ecbd 8b02 	vpop	{d8}
 801b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a8:	4b94      	ldr	r3, [pc, #592]	; (801b2fc <_dtoa_r+0x304>)
 801b0aa:	9300      	str	r3, [sp, #0]
 801b0ac:	3303      	adds	r3, #3
 801b0ae:	e7f3      	b.n	801b098 <_dtoa_r+0xa0>
 801b0b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	ec51 0b17 	vmov	r0, r1, d7
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b0c0:	f7e5 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 801b0c4:	4680      	mov	r8, r0
 801b0c6:	b158      	cbz	r0, 801b0e0 <_dtoa_r+0xe8>
 801b0c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	6013      	str	r3, [r2, #0]
 801b0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	f000 8551 	beq.w	801bb78 <_dtoa_r+0xb80>
 801b0d6:	488b      	ldr	r0, [pc, #556]	; (801b304 <_dtoa_r+0x30c>)
 801b0d8:	6018      	str	r0, [r3, #0]
 801b0da:	1e43      	subs	r3, r0, #1
 801b0dc:	9300      	str	r3, [sp, #0]
 801b0de:	e7dd      	b.n	801b09c <_dtoa_r+0xa4>
 801b0e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b0e4:	aa12      	add	r2, sp, #72	; 0x48
 801b0e6:	a913      	add	r1, sp, #76	; 0x4c
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f001 fcfd 	bl	801cae8 <__d2b>
 801b0ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b0f2:	4683      	mov	fp, r0
 801b0f4:	2d00      	cmp	r5, #0
 801b0f6:	d07c      	beq.n	801b1f2 <_dtoa_r+0x1fa>
 801b0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b0fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b102:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b106:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b10a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b10e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b112:	4b7d      	ldr	r3, [pc, #500]	; (801b308 <_dtoa_r+0x310>)
 801b114:	2200      	movs	r2, #0
 801b116:	4630      	mov	r0, r6
 801b118:	4639      	mov	r1, r7
 801b11a:	f7e5 f8b5 	bl	8000288 <__aeabi_dsub>
 801b11e:	a36e      	add	r3, pc, #440	; (adr r3, 801b2d8 <_dtoa_r+0x2e0>)
 801b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b124:	f7e5 fa68 	bl	80005f8 <__aeabi_dmul>
 801b128:	a36d      	add	r3, pc, #436	; (adr r3, 801b2e0 <_dtoa_r+0x2e8>)
 801b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12e:	f7e5 f8ad 	bl	800028c <__adddf3>
 801b132:	4606      	mov	r6, r0
 801b134:	4628      	mov	r0, r5
 801b136:	460f      	mov	r7, r1
 801b138:	f7e5 f9f4 	bl	8000524 <__aeabi_i2d>
 801b13c:	a36a      	add	r3, pc, #424	; (adr r3, 801b2e8 <_dtoa_r+0x2f0>)
 801b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b142:	f7e5 fa59 	bl	80005f8 <__aeabi_dmul>
 801b146:	4602      	mov	r2, r0
 801b148:	460b      	mov	r3, r1
 801b14a:	4630      	mov	r0, r6
 801b14c:	4639      	mov	r1, r7
 801b14e:	f7e5 f89d 	bl	800028c <__adddf3>
 801b152:	4606      	mov	r6, r0
 801b154:	460f      	mov	r7, r1
 801b156:	f7e5 fcff 	bl	8000b58 <__aeabi_d2iz>
 801b15a:	2200      	movs	r2, #0
 801b15c:	4682      	mov	sl, r0
 801b15e:	2300      	movs	r3, #0
 801b160:	4630      	mov	r0, r6
 801b162:	4639      	mov	r1, r7
 801b164:	f7e5 fcba 	bl	8000adc <__aeabi_dcmplt>
 801b168:	b148      	cbz	r0, 801b17e <_dtoa_r+0x186>
 801b16a:	4650      	mov	r0, sl
 801b16c:	f7e5 f9da 	bl	8000524 <__aeabi_i2d>
 801b170:	4632      	mov	r2, r6
 801b172:	463b      	mov	r3, r7
 801b174:	f7e5 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 801b178:	b908      	cbnz	r0, 801b17e <_dtoa_r+0x186>
 801b17a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b17e:	f1ba 0f16 	cmp.w	sl, #22
 801b182:	d854      	bhi.n	801b22e <_dtoa_r+0x236>
 801b184:	4b61      	ldr	r3, [pc, #388]	; (801b30c <_dtoa_r+0x314>)
 801b186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b18e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b192:	f7e5 fca3 	bl	8000adc <__aeabi_dcmplt>
 801b196:	2800      	cmp	r0, #0
 801b198:	d04b      	beq.n	801b232 <_dtoa_r+0x23a>
 801b19a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b19e:	2300      	movs	r3, #0
 801b1a0:	930e      	str	r3, [sp, #56]	; 0x38
 801b1a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b1a4:	1b5d      	subs	r5, r3, r5
 801b1a6:	1e6b      	subs	r3, r5, #1
 801b1a8:	9304      	str	r3, [sp, #16]
 801b1aa:	bf43      	ittte	mi
 801b1ac:	2300      	movmi	r3, #0
 801b1ae:	f1c5 0801 	rsbmi	r8, r5, #1
 801b1b2:	9304      	strmi	r3, [sp, #16]
 801b1b4:	f04f 0800 	movpl.w	r8, #0
 801b1b8:	f1ba 0f00 	cmp.w	sl, #0
 801b1bc:	db3b      	blt.n	801b236 <_dtoa_r+0x23e>
 801b1be:	9b04      	ldr	r3, [sp, #16]
 801b1c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b1c4:	4453      	add	r3, sl
 801b1c6:	9304      	str	r3, [sp, #16]
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	9306      	str	r3, [sp, #24]
 801b1cc:	9b05      	ldr	r3, [sp, #20]
 801b1ce:	2b09      	cmp	r3, #9
 801b1d0:	d869      	bhi.n	801b2a6 <_dtoa_r+0x2ae>
 801b1d2:	2b05      	cmp	r3, #5
 801b1d4:	bfc4      	itt	gt
 801b1d6:	3b04      	subgt	r3, #4
 801b1d8:	9305      	strgt	r3, [sp, #20]
 801b1da:	9b05      	ldr	r3, [sp, #20]
 801b1dc:	f1a3 0302 	sub.w	r3, r3, #2
 801b1e0:	bfcc      	ite	gt
 801b1e2:	2500      	movgt	r5, #0
 801b1e4:	2501      	movle	r5, #1
 801b1e6:	2b03      	cmp	r3, #3
 801b1e8:	d869      	bhi.n	801b2be <_dtoa_r+0x2c6>
 801b1ea:	e8df f003 	tbb	[pc, r3]
 801b1ee:	4e2c      	.short	0x4e2c
 801b1f0:	5a4c      	.short	0x5a4c
 801b1f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b1f6:	441d      	add	r5, r3
 801b1f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b1fc:	2b20      	cmp	r3, #32
 801b1fe:	bfc1      	itttt	gt
 801b200:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b204:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b208:	fa09 f303 	lslgt.w	r3, r9, r3
 801b20c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b210:	bfda      	itte	le
 801b212:	f1c3 0320 	rsble	r3, r3, #32
 801b216:	fa06 f003 	lslle.w	r0, r6, r3
 801b21a:	4318      	orrgt	r0, r3
 801b21c:	f7e5 f972 	bl	8000504 <__aeabi_ui2d>
 801b220:	2301      	movs	r3, #1
 801b222:	4606      	mov	r6, r0
 801b224:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b228:	3d01      	subs	r5, #1
 801b22a:	9310      	str	r3, [sp, #64]	; 0x40
 801b22c:	e771      	b.n	801b112 <_dtoa_r+0x11a>
 801b22e:	2301      	movs	r3, #1
 801b230:	e7b6      	b.n	801b1a0 <_dtoa_r+0x1a8>
 801b232:	900e      	str	r0, [sp, #56]	; 0x38
 801b234:	e7b5      	b.n	801b1a2 <_dtoa_r+0x1aa>
 801b236:	f1ca 0300 	rsb	r3, sl, #0
 801b23a:	9306      	str	r3, [sp, #24]
 801b23c:	2300      	movs	r3, #0
 801b23e:	eba8 080a 	sub.w	r8, r8, sl
 801b242:	930d      	str	r3, [sp, #52]	; 0x34
 801b244:	e7c2      	b.n	801b1cc <_dtoa_r+0x1d4>
 801b246:	2300      	movs	r3, #0
 801b248:	9308      	str	r3, [sp, #32]
 801b24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	dc39      	bgt.n	801b2c4 <_dtoa_r+0x2cc>
 801b250:	f04f 0901 	mov.w	r9, #1
 801b254:	f8cd 9004 	str.w	r9, [sp, #4]
 801b258:	464b      	mov	r3, r9
 801b25a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b25e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b260:	2200      	movs	r2, #0
 801b262:	6042      	str	r2, [r0, #4]
 801b264:	2204      	movs	r2, #4
 801b266:	f102 0614 	add.w	r6, r2, #20
 801b26a:	429e      	cmp	r6, r3
 801b26c:	6841      	ldr	r1, [r0, #4]
 801b26e:	d92f      	bls.n	801b2d0 <_dtoa_r+0x2d8>
 801b270:	4620      	mov	r0, r4
 801b272:	f001 f851 	bl	801c318 <_Balloc>
 801b276:	9000      	str	r0, [sp, #0]
 801b278:	2800      	cmp	r0, #0
 801b27a:	d14b      	bne.n	801b314 <_dtoa_r+0x31c>
 801b27c:	4b24      	ldr	r3, [pc, #144]	; (801b310 <_dtoa_r+0x318>)
 801b27e:	4602      	mov	r2, r0
 801b280:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b284:	e6d1      	b.n	801b02a <_dtoa_r+0x32>
 801b286:	2301      	movs	r3, #1
 801b288:	e7de      	b.n	801b248 <_dtoa_r+0x250>
 801b28a:	2300      	movs	r3, #0
 801b28c:	9308      	str	r3, [sp, #32]
 801b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b290:	eb0a 0903 	add.w	r9, sl, r3
 801b294:	f109 0301 	add.w	r3, r9, #1
 801b298:	2b01      	cmp	r3, #1
 801b29a:	9301      	str	r3, [sp, #4]
 801b29c:	bfb8      	it	lt
 801b29e:	2301      	movlt	r3, #1
 801b2a0:	e7dd      	b.n	801b25e <_dtoa_r+0x266>
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	e7f2      	b.n	801b28c <_dtoa_r+0x294>
 801b2a6:	2501      	movs	r5, #1
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	9305      	str	r3, [sp, #20]
 801b2ac:	9508      	str	r5, [sp, #32]
 801b2ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b2b8:	2312      	movs	r3, #18
 801b2ba:	9209      	str	r2, [sp, #36]	; 0x24
 801b2bc:	e7cf      	b.n	801b25e <_dtoa_r+0x266>
 801b2be:	2301      	movs	r3, #1
 801b2c0:	9308      	str	r3, [sp, #32]
 801b2c2:	e7f4      	b.n	801b2ae <_dtoa_r+0x2b6>
 801b2c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b2c8:	f8cd 9004 	str.w	r9, [sp, #4]
 801b2cc:	464b      	mov	r3, r9
 801b2ce:	e7c6      	b.n	801b25e <_dtoa_r+0x266>
 801b2d0:	3101      	adds	r1, #1
 801b2d2:	6041      	str	r1, [r0, #4]
 801b2d4:	0052      	lsls	r2, r2, #1
 801b2d6:	e7c6      	b.n	801b266 <_dtoa_r+0x26e>
 801b2d8:	636f4361 	.word	0x636f4361
 801b2dc:	3fd287a7 	.word	0x3fd287a7
 801b2e0:	8b60c8b3 	.word	0x8b60c8b3
 801b2e4:	3fc68a28 	.word	0x3fc68a28
 801b2e8:	509f79fb 	.word	0x509f79fb
 801b2ec:	3fd34413 	.word	0x3fd34413
 801b2f0:	0801f876 	.word	0x0801f876
 801b2f4:	0801f88d 	.word	0x0801f88d
 801b2f8:	7ff00000 	.word	0x7ff00000
 801b2fc:	0801f872 	.word	0x0801f872
 801b300:	0801f869 	.word	0x0801f869
 801b304:	0801f6e9 	.word	0x0801f6e9
 801b308:	3ff80000 	.word	0x3ff80000
 801b30c:	0801fa08 	.word	0x0801fa08
 801b310:	0801f8ec 	.word	0x0801f8ec
 801b314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b316:	9a00      	ldr	r2, [sp, #0]
 801b318:	601a      	str	r2, [r3, #0]
 801b31a:	9b01      	ldr	r3, [sp, #4]
 801b31c:	2b0e      	cmp	r3, #14
 801b31e:	f200 80ad 	bhi.w	801b47c <_dtoa_r+0x484>
 801b322:	2d00      	cmp	r5, #0
 801b324:	f000 80aa 	beq.w	801b47c <_dtoa_r+0x484>
 801b328:	f1ba 0f00 	cmp.w	sl, #0
 801b32c:	dd36      	ble.n	801b39c <_dtoa_r+0x3a4>
 801b32e:	4ac3      	ldr	r2, [pc, #780]	; (801b63c <_dtoa_r+0x644>)
 801b330:	f00a 030f 	and.w	r3, sl, #15
 801b334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b338:	ed93 7b00 	vldr	d7, [r3]
 801b33c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801b340:	ea4f 172a 	mov.w	r7, sl, asr #4
 801b344:	eeb0 8a47 	vmov.f32	s16, s14
 801b348:	eef0 8a67 	vmov.f32	s17, s15
 801b34c:	d016      	beq.n	801b37c <_dtoa_r+0x384>
 801b34e:	4bbc      	ldr	r3, [pc, #752]	; (801b640 <_dtoa_r+0x648>)
 801b350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b358:	f7e5 fa78 	bl	800084c <__aeabi_ddiv>
 801b35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b360:	f007 070f 	and.w	r7, r7, #15
 801b364:	2503      	movs	r5, #3
 801b366:	4eb6      	ldr	r6, [pc, #728]	; (801b640 <_dtoa_r+0x648>)
 801b368:	b957      	cbnz	r7, 801b380 <_dtoa_r+0x388>
 801b36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b36e:	ec53 2b18 	vmov	r2, r3, d8
 801b372:	f7e5 fa6b 	bl	800084c <__aeabi_ddiv>
 801b376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b37a:	e029      	b.n	801b3d0 <_dtoa_r+0x3d8>
 801b37c:	2502      	movs	r5, #2
 801b37e:	e7f2      	b.n	801b366 <_dtoa_r+0x36e>
 801b380:	07f9      	lsls	r1, r7, #31
 801b382:	d508      	bpl.n	801b396 <_dtoa_r+0x39e>
 801b384:	ec51 0b18 	vmov	r0, r1, d8
 801b388:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b38c:	f7e5 f934 	bl	80005f8 <__aeabi_dmul>
 801b390:	ec41 0b18 	vmov	d8, r0, r1
 801b394:	3501      	adds	r5, #1
 801b396:	107f      	asrs	r7, r7, #1
 801b398:	3608      	adds	r6, #8
 801b39a:	e7e5      	b.n	801b368 <_dtoa_r+0x370>
 801b39c:	f000 80a6 	beq.w	801b4ec <_dtoa_r+0x4f4>
 801b3a0:	f1ca 0600 	rsb	r6, sl, #0
 801b3a4:	4ba5      	ldr	r3, [pc, #660]	; (801b63c <_dtoa_r+0x644>)
 801b3a6:	4fa6      	ldr	r7, [pc, #664]	; (801b640 <_dtoa_r+0x648>)
 801b3a8:	f006 020f 	and.w	r2, r6, #15
 801b3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b3b8:	f7e5 f91e 	bl	80005f8 <__aeabi_dmul>
 801b3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3c0:	1136      	asrs	r6, r6, #4
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	2502      	movs	r5, #2
 801b3c6:	2e00      	cmp	r6, #0
 801b3c8:	f040 8085 	bne.w	801b4d6 <_dtoa_r+0x4de>
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d1d2      	bne.n	801b376 <_dtoa_r+0x37e>
 801b3d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	f000 808c 	beq.w	801b4f0 <_dtoa_r+0x4f8>
 801b3d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b3dc:	4b99      	ldr	r3, [pc, #612]	; (801b644 <_dtoa_r+0x64c>)
 801b3de:	2200      	movs	r2, #0
 801b3e0:	4630      	mov	r0, r6
 801b3e2:	4639      	mov	r1, r7
 801b3e4:	f7e5 fb7a 	bl	8000adc <__aeabi_dcmplt>
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	f000 8081 	beq.w	801b4f0 <_dtoa_r+0x4f8>
 801b3ee:	9b01      	ldr	r3, [sp, #4]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d07d      	beq.n	801b4f0 <_dtoa_r+0x4f8>
 801b3f4:	f1b9 0f00 	cmp.w	r9, #0
 801b3f8:	dd3c      	ble.n	801b474 <_dtoa_r+0x47c>
 801b3fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801b3fe:	9307      	str	r3, [sp, #28]
 801b400:	2200      	movs	r2, #0
 801b402:	4b91      	ldr	r3, [pc, #580]	; (801b648 <_dtoa_r+0x650>)
 801b404:	4630      	mov	r0, r6
 801b406:	4639      	mov	r1, r7
 801b408:	f7e5 f8f6 	bl	80005f8 <__aeabi_dmul>
 801b40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b410:	3501      	adds	r5, #1
 801b412:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801b416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b41a:	4628      	mov	r0, r5
 801b41c:	f7e5 f882 	bl	8000524 <__aeabi_i2d>
 801b420:	4632      	mov	r2, r6
 801b422:	463b      	mov	r3, r7
 801b424:	f7e5 f8e8 	bl	80005f8 <__aeabi_dmul>
 801b428:	4b88      	ldr	r3, [pc, #544]	; (801b64c <_dtoa_r+0x654>)
 801b42a:	2200      	movs	r2, #0
 801b42c:	f7e4 ff2e 	bl	800028c <__adddf3>
 801b430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b438:	9303      	str	r3, [sp, #12]
 801b43a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d15c      	bne.n	801b4fa <_dtoa_r+0x502>
 801b440:	4b83      	ldr	r3, [pc, #524]	; (801b650 <_dtoa_r+0x658>)
 801b442:	2200      	movs	r2, #0
 801b444:	4630      	mov	r0, r6
 801b446:	4639      	mov	r1, r7
 801b448:	f7e4 ff1e 	bl	8000288 <__aeabi_dsub>
 801b44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b450:	4606      	mov	r6, r0
 801b452:	460f      	mov	r7, r1
 801b454:	f7e5 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 801b458:	2800      	cmp	r0, #0
 801b45a:	f040 8296 	bne.w	801b98a <_dtoa_r+0x992>
 801b45e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b462:	4630      	mov	r0, r6
 801b464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b468:	4639      	mov	r1, r7
 801b46a:	f7e5 fb37 	bl	8000adc <__aeabi_dcmplt>
 801b46e:	2800      	cmp	r0, #0
 801b470:	f040 8288 	bne.w	801b984 <_dtoa_r+0x98c>
 801b474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b47c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b47e:	2b00      	cmp	r3, #0
 801b480:	f2c0 8158 	blt.w	801b734 <_dtoa_r+0x73c>
 801b484:	f1ba 0f0e 	cmp.w	sl, #14
 801b488:	f300 8154 	bgt.w	801b734 <_dtoa_r+0x73c>
 801b48c:	4b6b      	ldr	r3, [pc, #428]	; (801b63c <_dtoa_r+0x644>)
 801b48e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b492:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b498:	2b00      	cmp	r3, #0
 801b49a:	f280 80e3 	bge.w	801b664 <_dtoa_r+0x66c>
 801b49e:	9b01      	ldr	r3, [sp, #4]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	f300 80df 	bgt.w	801b664 <_dtoa_r+0x66c>
 801b4a6:	f040 826d 	bne.w	801b984 <_dtoa_r+0x98c>
 801b4aa:	4b69      	ldr	r3, [pc, #420]	; (801b650 <_dtoa_r+0x658>)
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	4640      	mov	r0, r8
 801b4b0:	4649      	mov	r1, r9
 801b4b2:	f7e5 f8a1 	bl	80005f8 <__aeabi_dmul>
 801b4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b4ba:	f7e5 fb23 	bl	8000b04 <__aeabi_dcmpge>
 801b4be:	9e01      	ldr	r6, [sp, #4]
 801b4c0:	4637      	mov	r7, r6
 801b4c2:	2800      	cmp	r0, #0
 801b4c4:	f040 8243 	bne.w	801b94e <_dtoa_r+0x956>
 801b4c8:	9d00      	ldr	r5, [sp, #0]
 801b4ca:	2331      	movs	r3, #49	; 0x31
 801b4cc:	f805 3b01 	strb.w	r3, [r5], #1
 801b4d0:	f10a 0a01 	add.w	sl, sl, #1
 801b4d4:	e23f      	b.n	801b956 <_dtoa_r+0x95e>
 801b4d6:	07f2      	lsls	r2, r6, #31
 801b4d8:	d505      	bpl.n	801b4e6 <_dtoa_r+0x4ee>
 801b4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b4de:	f7e5 f88b 	bl	80005f8 <__aeabi_dmul>
 801b4e2:	3501      	adds	r5, #1
 801b4e4:	2301      	movs	r3, #1
 801b4e6:	1076      	asrs	r6, r6, #1
 801b4e8:	3708      	adds	r7, #8
 801b4ea:	e76c      	b.n	801b3c6 <_dtoa_r+0x3ce>
 801b4ec:	2502      	movs	r5, #2
 801b4ee:	e76f      	b.n	801b3d0 <_dtoa_r+0x3d8>
 801b4f0:	9b01      	ldr	r3, [sp, #4]
 801b4f2:	f8cd a01c 	str.w	sl, [sp, #28]
 801b4f6:	930c      	str	r3, [sp, #48]	; 0x30
 801b4f8:	e78d      	b.n	801b416 <_dtoa_r+0x41e>
 801b4fa:	9900      	ldr	r1, [sp, #0]
 801b4fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b500:	4b4e      	ldr	r3, [pc, #312]	; (801b63c <_dtoa_r+0x644>)
 801b502:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b506:	4401      	add	r1, r0
 801b508:	9102      	str	r1, [sp, #8]
 801b50a:	9908      	ldr	r1, [sp, #32]
 801b50c:	eeb0 8a47 	vmov.f32	s16, s14
 801b510:	eef0 8a67 	vmov.f32	s17, s15
 801b514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b51c:	2900      	cmp	r1, #0
 801b51e:	d045      	beq.n	801b5ac <_dtoa_r+0x5b4>
 801b520:	494c      	ldr	r1, [pc, #304]	; (801b654 <_dtoa_r+0x65c>)
 801b522:	2000      	movs	r0, #0
 801b524:	f7e5 f992 	bl	800084c <__aeabi_ddiv>
 801b528:	ec53 2b18 	vmov	r2, r3, d8
 801b52c:	f7e4 feac 	bl	8000288 <__aeabi_dsub>
 801b530:	9d00      	ldr	r5, [sp, #0]
 801b532:	ec41 0b18 	vmov	d8, r0, r1
 801b536:	4639      	mov	r1, r7
 801b538:	4630      	mov	r0, r6
 801b53a:	f7e5 fb0d 	bl	8000b58 <__aeabi_d2iz>
 801b53e:	900c      	str	r0, [sp, #48]	; 0x30
 801b540:	f7e4 fff0 	bl	8000524 <__aeabi_i2d>
 801b544:	4602      	mov	r2, r0
 801b546:	460b      	mov	r3, r1
 801b548:	4630      	mov	r0, r6
 801b54a:	4639      	mov	r1, r7
 801b54c:	f7e4 fe9c 	bl	8000288 <__aeabi_dsub>
 801b550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b552:	3330      	adds	r3, #48	; 0x30
 801b554:	f805 3b01 	strb.w	r3, [r5], #1
 801b558:	ec53 2b18 	vmov	r2, r3, d8
 801b55c:	4606      	mov	r6, r0
 801b55e:	460f      	mov	r7, r1
 801b560:	f7e5 fabc 	bl	8000adc <__aeabi_dcmplt>
 801b564:	2800      	cmp	r0, #0
 801b566:	d165      	bne.n	801b634 <_dtoa_r+0x63c>
 801b568:	4632      	mov	r2, r6
 801b56a:	463b      	mov	r3, r7
 801b56c:	4935      	ldr	r1, [pc, #212]	; (801b644 <_dtoa_r+0x64c>)
 801b56e:	2000      	movs	r0, #0
 801b570:	f7e4 fe8a 	bl	8000288 <__aeabi_dsub>
 801b574:	ec53 2b18 	vmov	r2, r3, d8
 801b578:	f7e5 fab0 	bl	8000adc <__aeabi_dcmplt>
 801b57c:	2800      	cmp	r0, #0
 801b57e:	f040 80b9 	bne.w	801b6f4 <_dtoa_r+0x6fc>
 801b582:	9b02      	ldr	r3, [sp, #8]
 801b584:	429d      	cmp	r5, r3
 801b586:	f43f af75 	beq.w	801b474 <_dtoa_r+0x47c>
 801b58a:	4b2f      	ldr	r3, [pc, #188]	; (801b648 <_dtoa_r+0x650>)
 801b58c:	ec51 0b18 	vmov	r0, r1, d8
 801b590:	2200      	movs	r2, #0
 801b592:	f7e5 f831 	bl	80005f8 <__aeabi_dmul>
 801b596:	4b2c      	ldr	r3, [pc, #176]	; (801b648 <_dtoa_r+0x650>)
 801b598:	ec41 0b18 	vmov	d8, r0, r1
 801b59c:	2200      	movs	r2, #0
 801b59e:	4630      	mov	r0, r6
 801b5a0:	4639      	mov	r1, r7
 801b5a2:	f7e5 f829 	bl	80005f8 <__aeabi_dmul>
 801b5a6:	4606      	mov	r6, r0
 801b5a8:	460f      	mov	r7, r1
 801b5aa:	e7c4      	b.n	801b536 <_dtoa_r+0x53e>
 801b5ac:	ec51 0b17 	vmov	r0, r1, d7
 801b5b0:	f7e5 f822 	bl	80005f8 <__aeabi_dmul>
 801b5b4:	9b02      	ldr	r3, [sp, #8]
 801b5b6:	9d00      	ldr	r5, [sp, #0]
 801b5b8:	930c      	str	r3, [sp, #48]	; 0x30
 801b5ba:	ec41 0b18 	vmov	d8, r0, r1
 801b5be:	4639      	mov	r1, r7
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f7e5 fac9 	bl	8000b58 <__aeabi_d2iz>
 801b5c6:	9011      	str	r0, [sp, #68]	; 0x44
 801b5c8:	f7e4 ffac 	bl	8000524 <__aeabi_i2d>
 801b5cc:	4602      	mov	r2, r0
 801b5ce:	460b      	mov	r3, r1
 801b5d0:	4630      	mov	r0, r6
 801b5d2:	4639      	mov	r1, r7
 801b5d4:	f7e4 fe58 	bl	8000288 <__aeabi_dsub>
 801b5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b5da:	3330      	adds	r3, #48	; 0x30
 801b5dc:	f805 3b01 	strb.w	r3, [r5], #1
 801b5e0:	9b02      	ldr	r3, [sp, #8]
 801b5e2:	429d      	cmp	r5, r3
 801b5e4:	4606      	mov	r6, r0
 801b5e6:	460f      	mov	r7, r1
 801b5e8:	f04f 0200 	mov.w	r2, #0
 801b5ec:	d134      	bne.n	801b658 <_dtoa_r+0x660>
 801b5ee:	4b19      	ldr	r3, [pc, #100]	; (801b654 <_dtoa_r+0x65c>)
 801b5f0:	ec51 0b18 	vmov	r0, r1, d8
 801b5f4:	f7e4 fe4a 	bl	800028c <__adddf3>
 801b5f8:	4602      	mov	r2, r0
 801b5fa:	460b      	mov	r3, r1
 801b5fc:	4630      	mov	r0, r6
 801b5fe:	4639      	mov	r1, r7
 801b600:	f7e5 fa8a 	bl	8000b18 <__aeabi_dcmpgt>
 801b604:	2800      	cmp	r0, #0
 801b606:	d175      	bne.n	801b6f4 <_dtoa_r+0x6fc>
 801b608:	ec53 2b18 	vmov	r2, r3, d8
 801b60c:	4911      	ldr	r1, [pc, #68]	; (801b654 <_dtoa_r+0x65c>)
 801b60e:	2000      	movs	r0, #0
 801b610:	f7e4 fe3a 	bl	8000288 <__aeabi_dsub>
 801b614:	4602      	mov	r2, r0
 801b616:	460b      	mov	r3, r1
 801b618:	4630      	mov	r0, r6
 801b61a:	4639      	mov	r1, r7
 801b61c:	f7e5 fa5e 	bl	8000adc <__aeabi_dcmplt>
 801b620:	2800      	cmp	r0, #0
 801b622:	f43f af27 	beq.w	801b474 <_dtoa_r+0x47c>
 801b626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b628:	1e6b      	subs	r3, r5, #1
 801b62a:	930c      	str	r3, [sp, #48]	; 0x30
 801b62c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b630:	2b30      	cmp	r3, #48	; 0x30
 801b632:	d0f8      	beq.n	801b626 <_dtoa_r+0x62e>
 801b634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b638:	e04a      	b.n	801b6d0 <_dtoa_r+0x6d8>
 801b63a:	bf00      	nop
 801b63c:	0801fa08 	.word	0x0801fa08
 801b640:	0801f9e0 	.word	0x0801f9e0
 801b644:	3ff00000 	.word	0x3ff00000
 801b648:	40240000 	.word	0x40240000
 801b64c:	401c0000 	.word	0x401c0000
 801b650:	40140000 	.word	0x40140000
 801b654:	3fe00000 	.word	0x3fe00000
 801b658:	4baf      	ldr	r3, [pc, #700]	; (801b918 <_dtoa_r+0x920>)
 801b65a:	f7e4 ffcd 	bl	80005f8 <__aeabi_dmul>
 801b65e:	4606      	mov	r6, r0
 801b660:	460f      	mov	r7, r1
 801b662:	e7ac      	b.n	801b5be <_dtoa_r+0x5c6>
 801b664:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b668:	9d00      	ldr	r5, [sp, #0]
 801b66a:	4642      	mov	r2, r8
 801b66c:	464b      	mov	r3, r9
 801b66e:	4630      	mov	r0, r6
 801b670:	4639      	mov	r1, r7
 801b672:	f7e5 f8eb 	bl	800084c <__aeabi_ddiv>
 801b676:	f7e5 fa6f 	bl	8000b58 <__aeabi_d2iz>
 801b67a:	9002      	str	r0, [sp, #8]
 801b67c:	f7e4 ff52 	bl	8000524 <__aeabi_i2d>
 801b680:	4642      	mov	r2, r8
 801b682:	464b      	mov	r3, r9
 801b684:	f7e4 ffb8 	bl	80005f8 <__aeabi_dmul>
 801b688:	4602      	mov	r2, r0
 801b68a:	460b      	mov	r3, r1
 801b68c:	4630      	mov	r0, r6
 801b68e:	4639      	mov	r1, r7
 801b690:	f7e4 fdfa 	bl	8000288 <__aeabi_dsub>
 801b694:	9e02      	ldr	r6, [sp, #8]
 801b696:	9f01      	ldr	r7, [sp, #4]
 801b698:	3630      	adds	r6, #48	; 0x30
 801b69a:	f805 6b01 	strb.w	r6, [r5], #1
 801b69e:	9e00      	ldr	r6, [sp, #0]
 801b6a0:	1bae      	subs	r6, r5, r6
 801b6a2:	42b7      	cmp	r7, r6
 801b6a4:	4602      	mov	r2, r0
 801b6a6:	460b      	mov	r3, r1
 801b6a8:	d137      	bne.n	801b71a <_dtoa_r+0x722>
 801b6aa:	f7e4 fdef 	bl	800028c <__adddf3>
 801b6ae:	4642      	mov	r2, r8
 801b6b0:	464b      	mov	r3, r9
 801b6b2:	4606      	mov	r6, r0
 801b6b4:	460f      	mov	r7, r1
 801b6b6:	f7e5 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 801b6ba:	b9c8      	cbnz	r0, 801b6f0 <_dtoa_r+0x6f8>
 801b6bc:	4642      	mov	r2, r8
 801b6be:	464b      	mov	r3, r9
 801b6c0:	4630      	mov	r0, r6
 801b6c2:	4639      	mov	r1, r7
 801b6c4:	f7e5 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 801b6c8:	b110      	cbz	r0, 801b6d0 <_dtoa_r+0x6d8>
 801b6ca:	9b02      	ldr	r3, [sp, #8]
 801b6cc:	07d9      	lsls	r1, r3, #31
 801b6ce:	d40f      	bmi.n	801b6f0 <_dtoa_r+0x6f8>
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	4659      	mov	r1, fp
 801b6d4:	f000 fe60 	bl	801c398 <_Bfree>
 801b6d8:	2300      	movs	r3, #0
 801b6da:	702b      	strb	r3, [r5, #0]
 801b6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b6de:	f10a 0001 	add.w	r0, sl, #1
 801b6e2:	6018      	str	r0, [r3, #0]
 801b6e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	f43f acd8 	beq.w	801b09c <_dtoa_r+0xa4>
 801b6ec:	601d      	str	r5, [r3, #0]
 801b6ee:	e4d5      	b.n	801b09c <_dtoa_r+0xa4>
 801b6f0:	f8cd a01c 	str.w	sl, [sp, #28]
 801b6f4:	462b      	mov	r3, r5
 801b6f6:	461d      	mov	r5, r3
 801b6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b6fc:	2a39      	cmp	r2, #57	; 0x39
 801b6fe:	d108      	bne.n	801b712 <_dtoa_r+0x71a>
 801b700:	9a00      	ldr	r2, [sp, #0]
 801b702:	429a      	cmp	r2, r3
 801b704:	d1f7      	bne.n	801b6f6 <_dtoa_r+0x6fe>
 801b706:	9a07      	ldr	r2, [sp, #28]
 801b708:	9900      	ldr	r1, [sp, #0]
 801b70a:	3201      	adds	r2, #1
 801b70c:	9207      	str	r2, [sp, #28]
 801b70e:	2230      	movs	r2, #48	; 0x30
 801b710:	700a      	strb	r2, [r1, #0]
 801b712:	781a      	ldrb	r2, [r3, #0]
 801b714:	3201      	adds	r2, #1
 801b716:	701a      	strb	r2, [r3, #0]
 801b718:	e78c      	b.n	801b634 <_dtoa_r+0x63c>
 801b71a:	4b7f      	ldr	r3, [pc, #508]	; (801b918 <_dtoa_r+0x920>)
 801b71c:	2200      	movs	r2, #0
 801b71e:	f7e4 ff6b 	bl	80005f8 <__aeabi_dmul>
 801b722:	2200      	movs	r2, #0
 801b724:	2300      	movs	r3, #0
 801b726:	4606      	mov	r6, r0
 801b728:	460f      	mov	r7, r1
 801b72a:	f7e5 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 801b72e:	2800      	cmp	r0, #0
 801b730:	d09b      	beq.n	801b66a <_dtoa_r+0x672>
 801b732:	e7cd      	b.n	801b6d0 <_dtoa_r+0x6d8>
 801b734:	9a08      	ldr	r2, [sp, #32]
 801b736:	2a00      	cmp	r2, #0
 801b738:	f000 80c4 	beq.w	801b8c4 <_dtoa_r+0x8cc>
 801b73c:	9a05      	ldr	r2, [sp, #20]
 801b73e:	2a01      	cmp	r2, #1
 801b740:	f300 80a8 	bgt.w	801b894 <_dtoa_r+0x89c>
 801b744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b746:	2a00      	cmp	r2, #0
 801b748:	f000 80a0 	beq.w	801b88c <_dtoa_r+0x894>
 801b74c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b750:	9e06      	ldr	r6, [sp, #24]
 801b752:	4645      	mov	r5, r8
 801b754:	9a04      	ldr	r2, [sp, #16]
 801b756:	2101      	movs	r1, #1
 801b758:	441a      	add	r2, r3
 801b75a:	4620      	mov	r0, r4
 801b75c:	4498      	add	r8, r3
 801b75e:	9204      	str	r2, [sp, #16]
 801b760:	f000 ff20 	bl	801c5a4 <__i2b>
 801b764:	4607      	mov	r7, r0
 801b766:	2d00      	cmp	r5, #0
 801b768:	dd0b      	ble.n	801b782 <_dtoa_r+0x78a>
 801b76a:	9b04      	ldr	r3, [sp, #16]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	dd08      	ble.n	801b782 <_dtoa_r+0x78a>
 801b770:	42ab      	cmp	r3, r5
 801b772:	9a04      	ldr	r2, [sp, #16]
 801b774:	bfa8      	it	ge
 801b776:	462b      	movge	r3, r5
 801b778:	eba8 0803 	sub.w	r8, r8, r3
 801b77c:	1aed      	subs	r5, r5, r3
 801b77e:	1ad3      	subs	r3, r2, r3
 801b780:	9304      	str	r3, [sp, #16]
 801b782:	9b06      	ldr	r3, [sp, #24]
 801b784:	b1fb      	cbz	r3, 801b7c6 <_dtoa_r+0x7ce>
 801b786:	9b08      	ldr	r3, [sp, #32]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	f000 809f 	beq.w	801b8cc <_dtoa_r+0x8d4>
 801b78e:	2e00      	cmp	r6, #0
 801b790:	dd11      	ble.n	801b7b6 <_dtoa_r+0x7be>
 801b792:	4639      	mov	r1, r7
 801b794:	4632      	mov	r2, r6
 801b796:	4620      	mov	r0, r4
 801b798:	f000 ffc0 	bl	801c71c <__pow5mult>
 801b79c:	465a      	mov	r2, fp
 801b79e:	4601      	mov	r1, r0
 801b7a0:	4607      	mov	r7, r0
 801b7a2:	4620      	mov	r0, r4
 801b7a4:	f000 ff14 	bl	801c5d0 <__multiply>
 801b7a8:	4659      	mov	r1, fp
 801b7aa:	9007      	str	r0, [sp, #28]
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f000 fdf3 	bl	801c398 <_Bfree>
 801b7b2:	9b07      	ldr	r3, [sp, #28]
 801b7b4:	469b      	mov	fp, r3
 801b7b6:	9b06      	ldr	r3, [sp, #24]
 801b7b8:	1b9a      	subs	r2, r3, r6
 801b7ba:	d004      	beq.n	801b7c6 <_dtoa_r+0x7ce>
 801b7bc:	4659      	mov	r1, fp
 801b7be:	4620      	mov	r0, r4
 801b7c0:	f000 ffac 	bl	801c71c <__pow5mult>
 801b7c4:	4683      	mov	fp, r0
 801b7c6:	2101      	movs	r1, #1
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f000 feeb 	bl	801c5a4 <__i2b>
 801b7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	4606      	mov	r6, r0
 801b7d4:	dd7c      	ble.n	801b8d0 <_dtoa_r+0x8d8>
 801b7d6:	461a      	mov	r2, r3
 801b7d8:	4601      	mov	r1, r0
 801b7da:	4620      	mov	r0, r4
 801b7dc:	f000 ff9e 	bl	801c71c <__pow5mult>
 801b7e0:	9b05      	ldr	r3, [sp, #20]
 801b7e2:	2b01      	cmp	r3, #1
 801b7e4:	4606      	mov	r6, r0
 801b7e6:	dd76      	ble.n	801b8d6 <_dtoa_r+0x8de>
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	9306      	str	r3, [sp, #24]
 801b7ec:	6933      	ldr	r3, [r6, #16]
 801b7ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b7f2:	6918      	ldr	r0, [r3, #16]
 801b7f4:	f000 fe86 	bl	801c504 <__hi0bits>
 801b7f8:	f1c0 0020 	rsb	r0, r0, #32
 801b7fc:	9b04      	ldr	r3, [sp, #16]
 801b7fe:	4418      	add	r0, r3
 801b800:	f010 001f 	ands.w	r0, r0, #31
 801b804:	f000 8086 	beq.w	801b914 <_dtoa_r+0x91c>
 801b808:	f1c0 0320 	rsb	r3, r0, #32
 801b80c:	2b04      	cmp	r3, #4
 801b80e:	dd7f      	ble.n	801b910 <_dtoa_r+0x918>
 801b810:	f1c0 001c 	rsb	r0, r0, #28
 801b814:	9b04      	ldr	r3, [sp, #16]
 801b816:	4403      	add	r3, r0
 801b818:	4480      	add	r8, r0
 801b81a:	4405      	add	r5, r0
 801b81c:	9304      	str	r3, [sp, #16]
 801b81e:	f1b8 0f00 	cmp.w	r8, #0
 801b822:	dd05      	ble.n	801b830 <_dtoa_r+0x838>
 801b824:	4659      	mov	r1, fp
 801b826:	4642      	mov	r2, r8
 801b828:	4620      	mov	r0, r4
 801b82a:	f000 ffd1 	bl	801c7d0 <__lshift>
 801b82e:	4683      	mov	fp, r0
 801b830:	9b04      	ldr	r3, [sp, #16]
 801b832:	2b00      	cmp	r3, #0
 801b834:	dd05      	ble.n	801b842 <_dtoa_r+0x84a>
 801b836:	4631      	mov	r1, r6
 801b838:	461a      	mov	r2, r3
 801b83a:	4620      	mov	r0, r4
 801b83c:	f000 ffc8 	bl	801c7d0 <__lshift>
 801b840:	4606      	mov	r6, r0
 801b842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b844:	2b00      	cmp	r3, #0
 801b846:	d069      	beq.n	801b91c <_dtoa_r+0x924>
 801b848:	4631      	mov	r1, r6
 801b84a:	4658      	mov	r0, fp
 801b84c:	f001 f82c 	bl	801c8a8 <__mcmp>
 801b850:	2800      	cmp	r0, #0
 801b852:	da63      	bge.n	801b91c <_dtoa_r+0x924>
 801b854:	2300      	movs	r3, #0
 801b856:	4659      	mov	r1, fp
 801b858:	220a      	movs	r2, #10
 801b85a:	4620      	mov	r0, r4
 801b85c:	f000 fdbe 	bl	801c3dc <__multadd>
 801b860:	9b08      	ldr	r3, [sp, #32]
 801b862:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b866:	4683      	mov	fp, r0
 801b868:	2b00      	cmp	r3, #0
 801b86a:	f000 818f 	beq.w	801bb8c <_dtoa_r+0xb94>
 801b86e:	4639      	mov	r1, r7
 801b870:	2300      	movs	r3, #0
 801b872:	220a      	movs	r2, #10
 801b874:	4620      	mov	r0, r4
 801b876:	f000 fdb1 	bl	801c3dc <__multadd>
 801b87a:	f1b9 0f00 	cmp.w	r9, #0
 801b87e:	4607      	mov	r7, r0
 801b880:	f300 808e 	bgt.w	801b9a0 <_dtoa_r+0x9a8>
 801b884:	9b05      	ldr	r3, [sp, #20]
 801b886:	2b02      	cmp	r3, #2
 801b888:	dc50      	bgt.n	801b92c <_dtoa_r+0x934>
 801b88a:	e089      	b.n	801b9a0 <_dtoa_r+0x9a8>
 801b88c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b88e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b892:	e75d      	b.n	801b750 <_dtoa_r+0x758>
 801b894:	9b01      	ldr	r3, [sp, #4]
 801b896:	1e5e      	subs	r6, r3, #1
 801b898:	9b06      	ldr	r3, [sp, #24]
 801b89a:	42b3      	cmp	r3, r6
 801b89c:	bfbf      	itttt	lt
 801b89e:	9b06      	ldrlt	r3, [sp, #24]
 801b8a0:	9606      	strlt	r6, [sp, #24]
 801b8a2:	1af2      	sublt	r2, r6, r3
 801b8a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801b8a6:	bfb6      	itet	lt
 801b8a8:	189b      	addlt	r3, r3, r2
 801b8aa:	1b9e      	subge	r6, r3, r6
 801b8ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 801b8ae:	9b01      	ldr	r3, [sp, #4]
 801b8b0:	bfb8      	it	lt
 801b8b2:	2600      	movlt	r6, #0
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	bfb5      	itete	lt
 801b8b8:	eba8 0503 	sublt.w	r5, r8, r3
 801b8bc:	9b01      	ldrge	r3, [sp, #4]
 801b8be:	2300      	movlt	r3, #0
 801b8c0:	4645      	movge	r5, r8
 801b8c2:	e747      	b.n	801b754 <_dtoa_r+0x75c>
 801b8c4:	9e06      	ldr	r6, [sp, #24]
 801b8c6:	9f08      	ldr	r7, [sp, #32]
 801b8c8:	4645      	mov	r5, r8
 801b8ca:	e74c      	b.n	801b766 <_dtoa_r+0x76e>
 801b8cc:	9a06      	ldr	r2, [sp, #24]
 801b8ce:	e775      	b.n	801b7bc <_dtoa_r+0x7c4>
 801b8d0:	9b05      	ldr	r3, [sp, #20]
 801b8d2:	2b01      	cmp	r3, #1
 801b8d4:	dc18      	bgt.n	801b908 <_dtoa_r+0x910>
 801b8d6:	9b02      	ldr	r3, [sp, #8]
 801b8d8:	b9b3      	cbnz	r3, 801b908 <_dtoa_r+0x910>
 801b8da:	9b03      	ldr	r3, [sp, #12]
 801b8dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b8e0:	b9a3      	cbnz	r3, 801b90c <_dtoa_r+0x914>
 801b8e2:	9b03      	ldr	r3, [sp, #12]
 801b8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b8e8:	0d1b      	lsrs	r3, r3, #20
 801b8ea:	051b      	lsls	r3, r3, #20
 801b8ec:	b12b      	cbz	r3, 801b8fa <_dtoa_r+0x902>
 801b8ee:	9b04      	ldr	r3, [sp, #16]
 801b8f0:	3301      	adds	r3, #1
 801b8f2:	9304      	str	r3, [sp, #16]
 801b8f4:	f108 0801 	add.w	r8, r8, #1
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	9306      	str	r3, [sp, #24]
 801b8fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	f47f af74 	bne.w	801b7ec <_dtoa_r+0x7f4>
 801b904:	2001      	movs	r0, #1
 801b906:	e779      	b.n	801b7fc <_dtoa_r+0x804>
 801b908:	2300      	movs	r3, #0
 801b90a:	e7f6      	b.n	801b8fa <_dtoa_r+0x902>
 801b90c:	9b02      	ldr	r3, [sp, #8]
 801b90e:	e7f4      	b.n	801b8fa <_dtoa_r+0x902>
 801b910:	d085      	beq.n	801b81e <_dtoa_r+0x826>
 801b912:	4618      	mov	r0, r3
 801b914:	301c      	adds	r0, #28
 801b916:	e77d      	b.n	801b814 <_dtoa_r+0x81c>
 801b918:	40240000 	.word	0x40240000
 801b91c:	9b01      	ldr	r3, [sp, #4]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	dc38      	bgt.n	801b994 <_dtoa_r+0x99c>
 801b922:	9b05      	ldr	r3, [sp, #20]
 801b924:	2b02      	cmp	r3, #2
 801b926:	dd35      	ble.n	801b994 <_dtoa_r+0x99c>
 801b928:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b92c:	f1b9 0f00 	cmp.w	r9, #0
 801b930:	d10d      	bne.n	801b94e <_dtoa_r+0x956>
 801b932:	4631      	mov	r1, r6
 801b934:	464b      	mov	r3, r9
 801b936:	2205      	movs	r2, #5
 801b938:	4620      	mov	r0, r4
 801b93a:	f000 fd4f 	bl	801c3dc <__multadd>
 801b93e:	4601      	mov	r1, r0
 801b940:	4606      	mov	r6, r0
 801b942:	4658      	mov	r0, fp
 801b944:	f000 ffb0 	bl	801c8a8 <__mcmp>
 801b948:	2800      	cmp	r0, #0
 801b94a:	f73f adbd 	bgt.w	801b4c8 <_dtoa_r+0x4d0>
 801b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b950:	9d00      	ldr	r5, [sp, #0]
 801b952:	ea6f 0a03 	mvn.w	sl, r3
 801b956:	f04f 0800 	mov.w	r8, #0
 801b95a:	4631      	mov	r1, r6
 801b95c:	4620      	mov	r0, r4
 801b95e:	f000 fd1b 	bl	801c398 <_Bfree>
 801b962:	2f00      	cmp	r7, #0
 801b964:	f43f aeb4 	beq.w	801b6d0 <_dtoa_r+0x6d8>
 801b968:	f1b8 0f00 	cmp.w	r8, #0
 801b96c:	d005      	beq.n	801b97a <_dtoa_r+0x982>
 801b96e:	45b8      	cmp	r8, r7
 801b970:	d003      	beq.n	801b97a <_dtoa_r+0x982>
 801b972:	4641      	mov	r1, r8
 801b974:	4620      	mov	r0, r4
 801b976:	f000 fd0f 	bl	801c398 <_Bfree>
 801b97a:	4639      	mov	r1, r7
 801b97c:	4620      	mov	r0, r4
 801b97e:	f000 fd0b 	bl	801c398 <_Bfree>
 801b982:	e6a5      	b.n	801b6d0 <_dtoa_r+0x6d8>
 801b984:	2600      	movs	r6, #0
 801b986:	4637      	mov	r7, r6
 801b988:	e7e1      	b.n	801b94e <_dtoa_r+0x956>
 801b98a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b98c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b990:	4637      	mov	r7, r6
 801b992:	e599      	b.n	801b4c8 <_dtoa_r+0x4d0>
 801b994:	9b08      	ldr	r3, [sp, #32]
 801b996:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	f000 80fd 	beq.w	801bb9a <_dtoa_r+0xba2>
 801b9a0:	2d00      	cmp	r5, #0
 801b9a2:	dd05      	ble.n	801b9b0 <_dtoa_r+0x9b8>
 801b9a4:	4639      	mov	r1, r7
 801b9a6:	462a      	mov	r2, r5
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	f000 ff11 	bl	801c7d0 <__lshift>
 801b9ae:	4607      	mov	r7, r0
 801b9b0:	9b06      	ldr	r3, [sp, #24]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d05c      	beq.n	801ba70 <_dtoa_r+0xa78>
 801b9b6:	6879      	ldr	r1, [r7, #4]
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	f000 fcad 	bl	801c318 <_Balloc>
 801b9be:	4605      	mov	r5, r0
 801b9c0:	b928      	cbnz	r0, 801b9ce <_dtoa_r+0x9d6>
 801b9c2:	4b80      	ldr	r3, [pc, #512]	; (801bbc4 <_dtoa_r+0xbcc>)
 801b9c4:	4602      	mov	r2, r0
 801b9c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b9ca:	f7ff bb2e 	b.w	801b02a <_dtoa_r+0x32>
 801b9ce:	693a      	ldr	r2, [r7, #16]
 801b9d0:	3202      	adds	r2, #2
 801b9d2:	0092      	lsls	r2, r2, #2
 801b9d4:	f107 010c 	add.w	r1, r7, #12
 801b9d8:	300c      	adds	r0, #12
 801b9da:	f7fd fb49 	bl	8019070 <memcpy>
 801b9de:	2201      	movs	r2, #1
 801b9e0:	4629      	mov	r1, r5
 801b9e2:	4620      	mov	r0, r4
 801b9e4:	f000 fef4 	bl	801c7d0 <__lshift>
 801b9e8:	9b00      	ldr	r3, [sp, #0]
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	9301      	str	r3, [sp, #4]
 801b9ee:	9b00      	ldr	r3, [sp, #0]
 801b9f0:	444b      	add	r3, r9
 801b9f2:	9307      	str	r3, [sp, #28]
 801b9f4:	9b02      	ldr	r3, [sp, #8]
 801b9f6:	f003 0301 	and.w	r3, r3, #1
 801b9fa:	46b8      	mov	r8, r7
 801b9fc:	9306      	str	r3, [sp, #24]
 801b9fe:	4607      	mov	r7, r0
 801ba00:	9b01      	ldr	r3, [sp, #4]
 801ba02:	4631      	mov	r1, r6
 801ba04:	3b01      	subs	r3, #1
 801ba06:	4658      	mov	r0, fp
 801ba08:	9302      	str	r3, [sp, #8]
 801ba0a:	f7ff fa69 	bl	801aee0 <quorem>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	3330      	adds	r3, #48	; 0x30
 801ba12:	9004      	str	r0, [sp, #16]
 801ba14:	4641      	mov	r1, r8
 801ba16:	4658      	mov	r0, fp
 801ba18:	9308      	str	r3, [sp, #32]
 801ba1a:	f000 ff45 	bl	801c8a8 <__mcmp>
 801ba1e:	463a      	mov	r2, r7
 801ba20:	4681      	mov	r9, r0
 801ba22:	4631      	mov	r1, r6
 801ba24:	4620      	mov	r0, r4
 801ba26:	f000 ff5b 	bl	801c8e0 <__mdiff>
 801ba2a:	68c2      	ldr	r2, [r0, #12]
 801ba2c:	9b08      	ldr	r3, [sp, #32]
 801ba2e:	4605      	mov	r5, r0
 801ba30:	bb02      	cbnz	r2, 801ba74 <_dtoa_r+0xa7c>
 801ba32:	4601      	mov	r1, r0
 801ba34:	4658      	mov	r0, fp
 801ba36:	f000 ff37 	bl	801c8a8 <__mcmp>
 801ba3a:	9b08      	ldr	r3, [sp, #32]
 801ba3c:	4602      	mov	r2, r0
 801ba3e:	4629      	mov	r1, r5
 801ba40:	4620      	mov	r0, r4
 801ba42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ba46:	f000 fca7 	bl	801c398 <_Bfree>
 801ba4a:	9b05      	ldr	r3, [sp, #20]
 801ba4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba4e:	9d01      	ldr	r5, [sp, #4]
 801ba50:	ea43 0102 	orr.w	r1, r3, r2
 801ba54:	9b06      	ldr	r3, [sp, #24]
 801ba56:	430b      	orrs	r3, r1
 801ba58:	9b08      	ldr	r3, [sp, #32]
 801ba5a:	d10d      	bne.n	801ba78 <_dtoa_r+0xa80>
 801ba5c:	2b39      	cmp	r3, #57	; 0x39
 801ba5e:	d029      	beq.n	801bab4 <_dtoa_r+0xabc>
 801ba60:	f1b9 0f00 	cmp.w	r9, #0
 801ba64:	dd01      	ble.n	801ba6a <_dtoa_r+0xa72>
 801ba66:	9b04      	ldr	r3, [sp, #16]
 801ba68:	3331      	adds	r3, #49	; 0x31
 801ba6a:	9a02      	ldr	r2, [sp, #8]
 801ba6c:	7013      	strb	r3, [r2, #0]
 801ba6e:	e774      	b.n	801b95a <_dtoa_r+0x962>
 801ba70:	4638      	mov	r0, r7
 801ba72:	e7b9      	b.n	801b9e8 <_dtoa_r+0x9f0>
 801ba74:	2201      	movs	r2, #1
 801ba76:	e7e2      	b.n	801ba3e <_dtoa_r+0xa46>
 801ba78:	f1b9 0f00 	cmp.w	r9, #0
 801ba7c:	db06      	blt.n	801ba8c <_dtoa_r+0xa94>
 801ba7e:	9905      	ldr	r1, [sp, #20]
 801ba80:	ea41 0909 	orr.w	r9, r1, r9
 801ba84:	9906      	ldr	r1, [sp, #24]
 801ba86:	ea59 0101 	orrs.w	r1, r9, r1
 801ba8a:	d120      	bne.n	801bace <_dtoa_r+0xad6>
 801ba8c:	2a00      	cmp	r2, #0
 801ba8e:	ddec      	ble.n	801ba6a <_dtoa_r+0xa72>
 801ba90:	4659      	mov	r1, fp
 801ba92:	2201      	movs	r2, #1
 801ba94:	4620      	mov	r0, r4
 801ba96:	9301      	str	r3, [sp, #4]
 801ba98:	f000 fe9a 	bl	801c7d0 <__lshift>
 801ba9c:	4631      	mov	r1, r6
 801ba9e:	4683      	mov	fp, r0
 801baa0:	f000 ff02 	bl	801c8a8 <__mcmp>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	9b01      	ldr	r3, [sp, #4]
 801baa8:	dc02      	bgt.n	801bab0 <_dtoa_r+0xab8>
 801baaa:	d1de      	bne.n	801ba6a <_dtoa_r+0xa72>
 801baac:	07da      	lsls	r2, r3, #31
 801baae:	d5dc      	bpl.n	801ba6a <_dtoa_r+0xa72>
 801bab0:	2b39      	cmp	r3, #57	; 0x39
 801bab2:	d1d8      	bne.n	801ba66 <_dtoa_r+0xa6e>
 801bab4:	9a02      	ldr	r2, [sp, #8]
 801bab6:	2339      	movs	r3, #57	; 0x39
 801bab8:	7013      	strb	r3, [r2, #0]
 801baba:	462b      	mov	r3, r5
 801babc:	461d      	mov	r5, r3
 801babe:	3b01      	subs	r3, #1
 801bac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bac4:	2a39      	cmp	r2, #57	; 0x39
 801bac6:	d050      	beq.n	801bb6a <_dtoa_r+0xb72>
 801bac8:	3201      	adds	r2, #1
 801baca:	701a      	strb	r2, [r3, #0]
 801bacc:	e745      	b.n	801b95a <_dtoa_r+0x962>
 801bace:	2a00      	cmp	r2, #0
 801bad0:	dd03      	ble.n	801bada <_dtoa_r+0xae2>
 801bad2:	2b39      	cmp	r3, #57	; 0x39
 801bad4:	d0ee      	beq.n	801bab4 <_dtoa_r+0xabc>
 801bad6:	3301      	adds	r3, #1
 801bad8:	e7c7      	b.n	801ba6a <_dtoa_r+0xa72>
 801bada:	9a01      	ldr	r2, [sp, #4]
 801badc:	9907      	ldr	r1, [sp, #28]
 801bade:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bae2:	428a      	cmp	r2, r1
 801bae4:	d02a      	beq.n	801bb3c <_dtoa_r+0xb44>
 801bae6:	4659      	mov	r1, fp
 801bae8:	2300      	movs	r3, #0
 801baea:	220a      	movs	r2, #10
 801baec:	4620      	mov	r0, r4
 801baee:	f000 fc75 	bl	801c3dc <__multadd>
 801baf2:	45b8      	cmp	r8, r7
 801baf4:	4683      	mov	fp, r0
 801baf6:	f04f 0300 	mov.w	r3, #0
 801bafa:	f04f 020a 	mov.w	r2, #10
 801bafe:	4641      	mov	r1, r8
 801bb00:	4620      	mov	r0, r4
 801bb02:	d107      	bne.n	801bb14 <_dtoa_r+0xb1c>
 801bb04:	f000 fc6a 	bl	801c3dc <__multadd>
 801bb08:	4680      	mov	r8, r0
 801bb0a:	4607      	mov	r7, r0
 801bb0c:	9b01      	ldr	r3, [sp, #4]
 801bb0e:	3301      	adds	r3, #1
 801bb10:	9301      	str	r3, [sp, #4]
 801bb12:	e775      	b.n	801ba00 <_dtoa_r+0xa08>
 801bb14:	f000 fc62 	bl	801c3dc <__multadd>
 801bb18:	4639      	mov	r1, r7
 801bb1a:	4680      	mov	r8, r0
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	220a      	movs	r2, #10
 801bb20:	4620      	mov	r0, r4
 801bb22:	f000 fc5b 	bl	801c3dc <__multadd>
 801bb26:	4607      	mov	r7, r0
 801bb28:	e7f0      	b.n	801bb0c <_dtoa_r+0xb14>
 801bb2a:	f1b9 0f00 	cmp.w	r9, #0
 801bb2e:	9a00      	ldr	r2, [sp, #0]
 801bb30:	bfcc      	ite	gt
 801bb32:	464d      	movgt	r5, r9
 801bb34:	2501      	movle	r5, #1
 801bb36:	4415      	add	r5, r2
 801bb38:	f04f 0800 	mov.w	r8, #0
 801bb3c:	4659      	mov	r1, fp
 801bb3e:	2201      	movs	r2, #1
 801bb40:	4620      	mov	r0, r4
 801bb42:	9301      	str	r3, [sp, #4]
 801bb44:	f000 fe44 	bl	801c7d0 <__lshift>
 801bb48:	4631      	mov	r1, r6
 801bb4a:	4683      	mov	fp, r0
 801bb4c:	f000 feac 	bl	801c8a8 <__mcmp>
 801bb50:	2800      	cmp	r0, #0
 801bb52:	dcb2      	bgt.n	801baba <_dtoa_r+0xac2>
 801bb54:	d102      	bne.n	801bb5c <_dtoa_r+0xb64>
 801bb56:	9b01      	ldr	r3, [sp, #4]
 801bb58:	07db      	lsls	r3, r3, #31
 801bb5a:	d4ae      	bmi.n	801baba <_dtoa_r+0xac2>
 801bb5c:	462b      	mov	r3, r5
 801bb5e:	461d      	mov	r5, r3
 801bb60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bb64:	2a30      	cmp	r2, #48	; 0x30
 801bb66:	d0fa      	beq.n	801bb5e <_dtoa_r+0xb66>
 801bb68:	e6f7      	b.n	801b95a <_dtoa_r+0x962>
 801bb6a:	9a00      	ldr	r2, [sp, #0]
 801bb6c:	429a      	cmp	r2, r3
 801bb6e:	d1a5      	bne.n	801babc <_dtoa_r+0xac4>
 801bb70:	f10a 0a01 	add.w	sl, sl, #1
 801bb74:	2331      	movs	r3, #49	; 0x31
 801bb76:	e779      	b.n	801ba6c <_dtoa_r+0xa74>
 801bb78:	4b13      	ldr	r3, [pc, #76]	; (801bbc8 <_dtoa_r+0xbd0>)
 801bb7a:	f7ff baaf 	b.w	801b0dc <_dtoa_r+0xe4>
 801bb7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f47f aa86 	bne.w	801b092 <_dtoa_r+0x9a>
 801bb86:	4b11      	ldr	r3, [pc, #68]	; (801bbcc <_dtoa_r+0xbd4>)
 801bb88:	f7ff baa8 	b.w	801b0dc <_dtoa_r+0xe4>
 801bb8c:	f1b9 0f00 	cmp.w	r9, #0
 801bb90:	dc03      	bgt.n	801bb9a <_dtoa_r+0xba2>
 801bb92:	9b05      	ldr	r3, [sp, #20]
 801bb94:	2b02      	cmp	r3, #2
 801bb96:	f73f aec9 	bgt.w	801b92c <_dtoa_r+0x934>
 801bb9a:	9d00      	ldr	r5, [sp, #0]
 801bb9c:	4631      	mov	r1, r6
 801bb9e:	4658      	mov	r0, fp
 801bba0:	f7ff f99e 	bl	801aee0 <quorem>
 801bba4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801bba8:	f805 3b01 	strb.w	r3, [r5], #1
 801bbac:	9a00      	ldr	r2, [sp, #0]
 801bbae:	1aaa      	subs	r2, r5, r2
 801bbb0:	4591      	cmp	r9, r2
 801bbb2:	ddba      	ble.n	801bb2a <_dtoa_r+0xb32>
 801bbb4:	4659      	mov	r1, fp
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	220a      	movs	r2, #10
 801bbba:	4620      	mov	r0, r4
 801bbbc:	f000 fc0e 	bl	801c3dc <__multadd>
 801bbc0:	4683      	mov	fp, r0
 801bbc2:	e7eb      	b.n	801bb9c <_dtoa_r+0xba4>
 801bbc4:	0801f8ec 	.word	0x0801f8ec
 801bbc8:	0801f6e8 	.word	0x0801f6e8
 801bbcc:	0801f869 	.word	0x0801f869

0801bbd0 <rshift>:
 801bbd0:	6903      	ldr	r3, [r0, #16]
 801bbd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801bbd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbda:	ea4f 1261 	mov.w	r2, r1, asr #5
 801bbde:	f100 0414 	add.w	r4, r0, #20
 801bbe2:	dd45      	ble.n	801bc70 <rshift+0xa0>
 801bbe4:	f011 011f 	ands.w	r1, r1, #31
 801bbe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801bbec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801bbf0:	d10c      	bne.n	801bc0c <rshift+0x3c>
 801bbf2:	f100 0710 	add.w	r7, r0, #16
 801bbf6:	4629      	mov	r1, r5
 801bbf8:	42b1      	cmp	r1, r6
 801bbfa:	d334      	bcc.n	801bc66 <rshift+0x96>
 801bbfc:	1a9b      	subs	r3, r3, r2
 801bbfe:	009b      	lsls	r3, r3, #2
 801bc00:	1eea      	subs	r2, r5, #3
 801bc02:	4296      	cmp	r6, r2
 801bc04:	bf38      	it	cc
 801bc06:	2300      	movcc	r3, #0
 801bc08:	4423      	add	r3, r4
 801bc0a:	e015      	b.n	801bc38 <rshift+0x68>
 801bc0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801bc10:	f1c1 0820 	rsb	r8, r1, #32
 801bc14:	40cf      	lsrs	r7, r1
 801bc16:	f105 0e04 	add.w	lr, r5, #4
 801bc1a:	46a1      	mov	r9, r4
 801bc1c:	4576      	cmp	r6, lr
 801bc1e:	46f4      	mov	ip, lr
 801bc20:	d815      	bhi.n	801bc4e <rshift+0x7e>
 801bc22:	1a9b      	subs	r3, r3, r2
 801bc24:	009a      	lsls	r2, r3, #2
 801bc26:	3a04      	subs	r2, #4
 801bc28:	3501      	adds	r5, #1
 801bc2a:	42ae      	cmp	r6, r5
 801bc2c:	bf38      	it	cc
 801bc2e:	2200      	movcc	r2, #0
 801bc30:	18a3      	adds	r3, r4, r2
 801bc32:	50a7      	str	r7, [r4, r2]
 801bc34:	b107      	cbz	r7, 801bc38 <rshift+0x68>
 801bc36:	3304      	adds	r3, #4
 801bc38:	1b1a      	subs	r2, r3, r4
 801bc3a:	42a3      	cmp	r3, r4
 801bc3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bc40:	bf08      	it	eq
 801bc42:	2300      	moveq	r3, #0
 801bc44:	6102      	str	r2, [r0, #16]
 801bc46:	bf08      	it	eq
 801bc48:	6143      	streq	r3, [r0, #20]
 801bc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc4e:	f8dc c000 	ldr.w	ip, [ip]
 801bc52:	fa0c fc08 	lsl.w	ip, ip, r8
 801bc56:	ea4c 0707 	orr.w	r7, ip, r7
 801bc5a:	f849 7b04 	str.w	r7, [r9], #4
 801bc5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bc62:	40cf      	lsrs	r7, r1
 801bc64:	e7da      	b.n	801bc1c <rshift+0x4c>
 801bc66:	f851 cb04 	ldr.w	ip, [r1], #4
 801bc6a:	f847 cf04 	str.w	ip, [r7, #4]!
 801bc6e:	e7c3      	b.n	801bbf8 <rshift+0x28>
 801bc70:	4623      	mov	r3, r4
 801bc72:	e7e1      	b.n	801bc38 <rshift+0x68>

0801bc74 <__hexdig_fun>:
 801bc74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bc78:	2b09      	cmp	r3, #9
 801bc7a:	d802      	bhi.n	801bc82 <__hexdig_fun+0xe>
 801bc7c:	3820      	subs	r0, #32
 801bc7e:	b2c0      	uxtb	r0, r0
 801bc80:	4770      	bx	lr
 801bc82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801bc86:	2b05      	cmp	r3, #5
 801bc88:	d801      	bhi.n	801bc8e <__hexdig_fun+0x1a>
 801bc8a:	3847      	subs	r0, #71	; 0x47
 801bc8c:	e7f7      	b.n	801bc7e <__hexdig_fun+0xa>
 801bc8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bc92:	2b05      	cmp	r3, #5
 801bc94:	d801      	bhi.n	801bc9a <__hexdig_fun+0x26>
 801bc96:	3827      	subs	r0, #39	; 0x27
 801bc98:	e7f1      	b.n	801bc7e <__hexdig_fun+0xa>
 801bc9a:	2000      	movs	r0, #0
 801bc9c:	4770      	bx	lr
	...

0801bca0 <__gethex>:
 801bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca4:	ed2d 8b02 	vpush	{d8}
 801bca8:	b089      	sub	sp, #36	; 0x24
 801bcaa:	ee08 0a10 	vmov	s16, r0
 801bcae:	9304      	str	r3, [sp, #16]
 801bcb0:	4bbc      	ldr	r3, [pc, #752]	; (801bfa4 <__gethex+0x304>)
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	9301      	str	r3, [sp, #4]
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	468b      	mov	fp, r1
 801bcba:	4690      	mov	r8, r2
 801bcbc:	f7e4 fa88 	bl	80001d0 <strlen>
 801bcc0:	9b01      	ldr	r3, [sp, #4]
 801bcc2:	f8db 2000 	ldr.w	r2, [fp]
 801bcc6:	4403      	add	r3, r0
 801bcc8:	4682      	mov	sl, r0
 801bcca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bcce:	9305      	str	r3, [sp, #20]
 801bcd0:	1c93      	adds	r3, r2, #2
 801bcd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bcd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bcda:	32fe      	adds	r2, #254	; 0xfe
 801bcdc:	18d1      	adds	r1, r2, r3
 801bcde:	461f      	mov	r7, r3
 801bce0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bce4:	9100      	str	r1, [sp, #0]
 801bce6:	2830      	cmp	r0, #48	; 0x30
 801bce8:	d0f8      	beq.n	801bcdc <__gethex+0x3c>
 801bcea:	f7ff ffc3 	bl	801bc74 <__hexdig_fun>
 801bcee:	4604      	mov	r4, r0
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	d13a      	bne.n	801bd6a <__gethex+0xca>
 801bcf4:	9901      	ldr	r1, [sp, #4]
 801bcf6:	4652      	mov	r2, sl
 801bcf8:	4638      	mov	r0, r7
 801bcfa:	f001 f982 	bl	801d002 <strncmp>
 801bcfe:	4605      	mov	r5, r0
 801bd00:	2800      	cmp	r0, #0
 801bd02:	d168      	bne.n	801bdd6 <__gethex+0x136>
 801bd04:	f817 000a 	ldrb.w	r0, [r7, sl]
 801bd08:	eb07 060a 	add.w	r6, r7, sl
 801bd0c:	f7ff ffb2 	bl	801bc74 <__hexdig_fun>
 801bd10:	2800      	cmp	r0, #0
 801bd12:	d062      	beq.n	801bdda <__gethex+0x13a>
 801bd14:	4633      	mov	r3, r6
 801bd16:	7818      	ldrb	r0, [r3, #0]
 801bd18:	2830      	cmp	r0, #48	; 0x30
 801bd1a:	461f      	mov	r7, r3
 801bd1c:	f103 0301 	add.w	r3, r3, #1
 801bd20:	d0f9      	beq.n	801bd16 <__gethex+0x76>
 801bd22:	f7ff ffa7 	bl	801bc74 <__hexdig_fun>
 801bd26:	2301      	movs	r3, #1
 801bd28:	fab0 f480 	clz	r4, r0
 801bd2c:	0964      	lsrs	r4, r4, #5
 801bd2e:	4635      	mov	r5, r6
 801bd30:	9300      	str	r3, [sp, #0]
 801bd32:	463a      	mov	r2, r7
 801bd34:	4616      	mov	r6, r2
 801bd36:	3201      	adds	r2, #1
 801bd38:	7830      	ldrb	r0, [r6, #0]
 801bd3a:	f7ff ff9b 	bl	801bc74 <__hexdig_fun>
 801bd3e:	2800      	cmp	r0, #0
 801bd40:	d1f8      	bne.n	801bd34 <__gethex+0x94>
 801bd42:	9901      	ldr	r1, [sp, #4]
 801bd44:	4652      	mov	r2, sl
 801bd46:	4630      	mov	r0, r6
 801bd48:	f001 f95b 	bl	801d002 <strncmp>
 801bd4c:	b980      	cbnz	r0, 801bd70 <__gethex+0xd0>
 801bd4e:	b94d      	cbnz	r5, 801bd64 <__gethex+0xc4>
 801bd50:	eb06 050a 	add.w	r5, r6, sl
 801bd54:	462a      	mov	r2, r5
 801bd56:	4616      	mov	r6, r2
 801bd58:	3201      	adds	r2, #1
 801bd5a:	7830      	ldrb	r0, [r6, #0]
 801bd5c:	f7ff ff8a 	bl	801bc74 <__hexdig_fun>
 801bd60:	2800      	cmp	r0, #0
 801bd62:	d1f8      	bne.n	801bd56 <__gethex+0xb6>
 801bd64:	1bad      	subs	r5, r5, r6
 801bd66:	00ad      	lsls	r5, r5, #2
 801bd68:	e004      	b.n	801bd74 <__gethex+0xd4>
 801bd6a:	2400      	movs	r4, #0
 801bd6c:	4625      	mov	r5, r4
 801bd6e:	e7e0      	b.n	801bd32 <__gethex+0x92>
 801bd70:	2d00      	cmp	r5, #0
 801bd72:	d1f7      	bne.n	801bd64 <__gethex+0xc4>
 801bd74:	7833      	ldrb	r3, [r6, #0]
 801bd76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bd7a:	2b50      	cmp	r3, #80	; 0x50
 801bd7c:	d13b      	bne.n	801bdf6 <__gethex+0x156>
 801bd7e:	7873      	ldrb	r3, [r6, #1]
 801bd80:	2b2b      	cmp	r3, #43	; 0x2b
 801bd82:	d02c      	beq.n	801bdde <__gethex+0x13e>
 801bd84:	2b2d      	cmp	r3, #45	; 0x2d
 801bd86:	d02e      	beq.n	801bde6 <__gethex+0x146>
 801bd88:	1c71      	adds	r1, r6, #1
 801bd8a:	f04f 0900 	mov.w	r9, #0
 801bd8e:	7808      	ldrb	r0, [r1, #0]
 801bd90:	f7ff ff70 	bl	801bc74 <__hexdig_fun>
 801bd94:	1e43      	subs	r3, r0, #1
 801bd96:	b2db      	uxtb	r3, r3
 801bd98:	2b18      	cmp	r3, #24
 801bd9a:	d82c      	bhi.n	801bdf6 <__gethex+0x156>
 801bd9c:	f1a0 0210 	sub.w	r2, r0, #16
 801bda0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bda4:	f7ff ff66 	bl	801bc74 <__hexdig_fun>
 801bda8:	1e43      	subs	r3, r0, #1
 801bdaa:	b2db      	uxtb	r3, r3
 801bdac:	2b18      	cmp	r3, #24
 801bdae:	d91d      	bls.n	801bdec <__gethex+0x14c>
 801bdb0:	f1b9 0f00 	cmp.w	r9, #0
 801bdb4:	d000      	beq.n	801bdb8 <__gethex+0x118>
 801bdb6:	4252      	negs	r2, r2
 801bdb8:	4415      	add	r5, r2
 801bdba:	f8cb 1000 	str.w	r1, [fp]
 801bdbe:	b1e4      	cbz	r4, 801bdfa <__gethex+0x15a>
 801bdc0:	9b00      	ldr	r3, [sp, #0]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	bf14      	ite	ne
 801bdc6:	2700      	movne	r7, #0
 801bdc8:	2706      	moveq	r7, #6
 801bdca:	4638      	mov	r0, r7
 801bdcc:	b009      	add	sp, #36	; 0x24
 801bdce:	ecbd 8b02 	vpop	{d8}
 801bdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd6:	463e      	mov	r6, r7
 801bdd8:	4625      	mov	r5, r4
 801bdda:	2401      	movs	r4, #1
 801bddc:	e7ca      	b.n	801bd74 <__gethex+0xd4>
 801bdde:	f04f 0900 	mov.w	r9, #0
 801bde2:	1cb1      	adds	r1, r6, #2
 801bde4:	e7d3      	b.n	801bd8e <__gethex+0xee>
 801bde6:	f04f 0901 	mov.w	r9, #1
 801bdea:	e7fa      	b.n	801bde2 <__gethex+0x142>
 801bdec:	230a      	movs	r3, #10
 801bdee:	fb03 0202 	mla	r2, r3, r2, r0
 801bdf2:	3a10      	subs	r2, #16
 801bdf4:	e7d4      	b.n	801bda0 <__gethex+0x100>
 801bdf6:	4631      	mov	r1, r6
 801bdf8:	e7df      	b.n	801bdba <__gethex+0x11a>
 801bdfa:	1bf3      	subs	r3, r6, r7
 801bdfc:	3b01      	subs	r3, #1
 801bdfe:	4621      	mov	r1, r4
 801be00:	2b07      	cmp	r3, #7
 801be02:	dc0b      	bgt.n	801be1c <__gethex+0x17c>
 801be04:	ee18 0a10 	vmov	r0, s16
 801be08:	f000 fa86 	bl	801c318 <_Balloc>
 801be0c:	4604      	mov	r4, r0
 801be0e:	b940      	cbnz	r0, 801be22 <__gethex+0x182>
 801be10:	4b65      	ldr	r3, [pc, #404]	; (801bfa8 <__gethex+0x308>)
 801be12:	4602      	mov	r2, r0
 801be14:	21de      	movs	r1, #222	; 0xde
 801be16:	4865      	ldr	r0, [pc, #404]	; (801bfac <__gethex+0x30c>)
 801be18:	f001 f912 	bl	801d040 <__assert_func>
 801be1c:	3101      	adds	r1, #1
 801be1e:	105b      	asrs	r3, r3, #1
 801be20:	e7ee      	b.n	801be00 <__gethex+0x160>
 801be22:	f100 0914 	add.w	r9, r0, #20
 801be26:	f04f 0b00 	mov.w	fp, #0
 801be2a:	f1ca 0301 	rsb	r3, sl, #1
 801be2e:	f8cd 9008 	str.w	r9, [sp, #8]
 801be32:	f8cd b000 	str.w	fp, [sp]
 801be36:	9306      	str	r3, [sp, #24]
 801be38:	42b7      	cmp	r7, r6
 801be3a:	d340      	bcc.n	801bebe <__gethex+0x21e>
 801be3c:	9802      	ldr	r0, [sp, #8]
 801be3e:	9b00      	ldr	r3, [sp, #0]
 801be40:	f840 3b04 	str.w	r3, [r0], #4
 801be44:	eba0 0009 	sub.w	r0, r0, r9
 801be48:	1080      	asrs	r0, r0, #2
 801be4a:	0146      	lsls	r6, r0, #5
 801be4c:	6120      	str	r0, [r4, #16]
 801be4e:	4618      	mov	r0, r3
 801be50:	f000 fb58 	bl	801c504 <__hi0bits>
 801be54:	1a30      	subs	r0, r6, r0
 801be56:	f8d8 6000 	ldr.w	r6, [r8]
 801be5a:	42b0      	cmp	r0, r6
 801be5c:	dd63      	ble.n	801bf26 <__gethex+0x286>
 801be5e:	1b87      	subs	r7, r0, r6
 801be60:	4639      	mov	r1, r7
 801be62:	4620      	mov	r0, r4
 801be64:	f000 fef2 	bl	801cc4c <__any_on>
 801be68:	4682      	mov	sl, r0
 801be6a:	b1a8      	cbz	r0, 801be98 <__gethex+0x1f8>
 801be6c:	1e7b      	subs	r3, r7, #1
 801be6e:	1159      	asrs	r1, r3, #5
 801be70:	f003 021f 	and.w	r2, r3, #31
 801be74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801be78:	f04f 0a01 	mov.w	sl, #1
 801be7c:	fa0a f202 	lsl.w	r2, sl, r2
 801be80:	420a      	tst	r2, r1
 801be82:	d009      	beq.n	801be98 <__gethex+0x1f8>
 801be84:	4553      	cmp	r3, sl
 801be86:	dd05      	ble.n	801be94 <__gethex+0x1f4>
 801be88:	1eb9      	subs	r1, r7, #2
 801be8a:	4620      	mov	r0, r4
 801be8c:	f000 fede 	bl	801cc4c <__any_on>
 801be90:	2800      	cmp	r0, #0
 801be92:	d145      	bne.n	801bf20 <__gethex+0x280>
 801be94:	f04f 0a02 	mov.w	sl, #2
 801be98:	4639      	mov	r1, r7
 801be9a:	4620      	mov	r0, r4
 801be9c:	f7ff fe98 	bl	801bbd0 <rshift>
 801bea0:	443d      	add	r5, r7
 801bea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bea6:	42ab      	cmp	r3, r5
 801bea8:	da4c      	bge.n	801bf44 <__gethex+0x2a4>
 801beaa:	ee18 0a10 	vmov	r0, s16
 801beae:	4621      	mov	r1, r4
 801beb0:	f000 fa72 	bl	801c398 <_Bfree>
 801beb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801beb6:	2300      	movs	r3, #0
 801beb8:	6013      	str	r3, [r2, #0]
 801beba:	27a3      	movs	r7, #163	; 0xa3
 801bebc:	e785      	b.n	801bdca <__gethex+0x12a>
 801bebe:	1e73      	subs	r3, r6, #1
 801bec0:	9a05      	ldr	r2, [sp, #20]
 801bec2:	9303      	str	r3, [sp, #12]
 801bec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bec8:	4293      	cmp	r3, r2
 801beca:	d019      	beq.n	801bf00 <__gethex+0x260>
 801becc:	f1bb 0f20 	cmp.w	fp, #32
 801bed0:	d107      	bne.n	801bee2 <__gethex+0x242>
 801bed2:	9b02      	ldr	r3, [sp, #8]
 801bed4:	9a00      	ldr	r2, [sp, #0]
 801bed6:	f843 2b04 	str.w	r2, [r3], #4
 801beda:	9302      	str	r3, [sp, #8]
 801bedc:	2300      	movs	r3, #0
 801bede:	9300      	str	r3, [sp, #0]
 801bee0:	469b      	mov	fp, r3
 801bee2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bee6:	f7ff fec5 	bl	801bc74 <__hexdig_fun>
 801beea:	9b00      	ldr	r3, [sp, #0]
 801beec:	f000 000f 	and.w	r0, r0, #15
 801bef0:	fa00 f00b 	lsl.w	r0, r0, fp
 801bef4:	4303      	orrs	r3, r0
 801bef6:	9300      	str	r3, [sp, #0]
 801bef8:	f10b 0b04 	add.w	fp, fp, #4
 801befc:	9b03      	ldr	r3, [sp, #12]
 801befe:	e00d      	b.n	801bf1c <__gethex+0x27c>
 801bf00:	9b03      	ldr	r3, [sp, #12]
 801bf02:	9a06      	ldr	r2, [sp, #24]
 801bf04:	4413      	add	r3, r2
 801bf06:	42bb      	cmp	r3, r7
 801bf08:	d3e0      	bcc.n	801becc <__gethex+0x22c>
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	9901      	ldr	r1, [sp, #4]
 801bf0e:	9307      	str	r3, [sp, #28]
 801bf10:	4652      	mov	r2, sl
 801bf12:	f001 f876 	bl	801d002 <strncmp>
 801bf16:	9b07      	ldr	r3, [sp, #28]
 801bf18:	2800      	cmp	r0, #0
 801bf1a:	d1d7      	bne.n	801becc <__gethex+0x22c>
 801bf1c:	461e      	mov	r6, r3
 801bf1e:	e78b      	b.n	801be38 <__gethex+0x198>
 801bf20:	f04f 0a03 	mov.w	sl, #3
 801bf24:	e7b8      	b.n	801be98 <__gethex+0x1f8>
 801bf26:	da0a      	bge.n	801bf3e <__gethex+0x29e>
 801bf28:	1a37      	subs	r7, r6, r0
 801bf2a:	4621      	mov	r1, r4
 801bf2c:	ee18 0a10 	vmov	r0, s16
 801bf30:	463a      	mov	r2, r7
 801bf32:	f000 fc4d 	bl	801c7d0 <__lshift>
 801bf36:	1bed      	subs	r5, r5, r7
 801bf38:	4604      	mov	r4, r0
 801bf3a:	f100 0914 	add.w	r9, r0, #20
 801bf3e:	f04f 0a00 	mov.w	sl, #0
 801bf42:	e7ae      	b.n	801bea2 <__gethex+0x202>
 801bf44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bf48:	42a8      	cmp	r0, r5
 801bf4a:	dd72      	ble.n	801c032 <__gethex+0x392>
 801bf4c:	1b45      	subs	r5, r0, r5
 801bf4e:	42ae      	cmp	r6, r5
 801bf50:	dc36      	bgt.n	801bfc0 <__gethex+0x320>
 801bf52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bf56:	2b02      	cmp	r3, #2
 801bf58:	d02a      	beq.n	801bfb0 <__gethex+0x310>
 801bf5a:	2b03      	cmp	r3, #3
 801bf5c:	d02c      	beq.n	801bfb8 <__gethex+0x318>
 801bf5e:	2b01      	cmp	r3, #1
 801bf60:	d115      	bne.n	801bf8e <__gethex+0x2ee>
 801bf62:	42ae      	cmp	r6, r5
 801bf64:	d113      	bne.n	801bf8e <__gethex+0x2ee>
 801bf66:	2e01      	cmp	r6, #1
 801bf68:	d10b      	bne.n	801bf82 <__gethex+0x2e2>
 801bf6a:	9a04      	ldr	r2, [sp, #16]
 801bf6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bf70:	6013      	str	r3, [r2, #0]
 801bf72:	2301      	movs	r3, #1
 801bf74:	6123      	str	r3, [r4, #16]
 801bf76:	f8c9 3000 	str.w	r3, [r9]
 801bf7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bf7c:	2762      	movs	r7, #98	; 0x62
 801bf7e:	601c      	str	r4, [r3, #0]
 801bf80:	e723      	b.n	801bdca <__gethex+0x12a>
 801bf82:	1e71      	subs	r1, r6, #1
 801bf84:	4620      	mov	r0, r4
 801bf86:	f000 fe61 	bl	801cc4c <__any_on>
 801bf8a:	2800      	cmp	r0, #0
 801bf8c:	d1ed      	bne.n	801bf6a <__gethex+0x2ca>
 801bf8e:	ee18 0a10 	vmov	r0, s16
 801bf92:	4621      	mov	r1, r4
 801bf94:	f000 fa00 	bl	801c398 <_Bfree>
 801bf98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bf9a:	2300      	movs	r3, #0
 801bf9c:	6013      	str	r3, [r2, #0]
 801bf9e:	2750      	movs	r7, #80	; 0x50
 801bfa0:	e713      	b.n	801bdca <__gethex+0x12a>
 801bfa2:	bf00      	nop
 801bfa4:	0801f968 	.word	0x0801f968
 801bfa8:	0801f8ec 	.word	0x0801f8ec
 801bfac:	0801f8fd 	.word	0x0801f8fd
 801bfb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d1eb      	bne.n	801bf8e <__gethex+0x2ee>
 801bfb6:	e7d8      	b.n	801bf6a <__gethex+0x2ca>
 801bfb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d1d5      	bne.n	801bf6a <__gethex+0x2ca>
 801bfbe:	e7e6      	b.n	801bf8e <__gethex+0x2ee>
 801bfc0:	1e6f      	subs	r7, r5, #1
 801bfc2:	f1ba 0f00 	cmp.w	sl, #0
 801bfc6:	d131      	bne.n	801c02c <__gethex+0x38c>
 801bfc8:	b127      	cbz	r7, 801bfd4 <__gethex+0x334>
 801bfca:	4639      	mov	r1, r7
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f000 fe3d 	bl	801cc4c <__any_on>
 801bfd2:	4682      	mov	sl, r0
 801bfd4:	117b      	asrs	r3, r7, #5
 801bfd6:	2101      	movs	r1, #1
 801bfd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801bfdc:	f007 071f 	and.w	r7, r7, #31
 801bfe0:	fa01 f707 	lsl.w	r7, r1, r7
 801bfe4:	421f      	tst	r7, r3
 801bfe6:	4629      	mov	r1, r5
 801bfe8:	4620      	mov	r0, r4
 801bfea:	bf18      	it	ne
 801bfec:	f04a 0a02 	orrne.w	sl, sl, #2
 801bff0:	1b76      	subs	r6, r6, r5
 801bff2:	f7ff fded 	bl	801bbd0 <rshift>
 801bff6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bffa:	2702      	movs	r7, #2
 801bffc:	f1ba 0f00 	cmp.w	sl, #0
 801c000:	d048      	beq.n	801c094 <__gethex+0x3f4>
 801c002:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c006:	2b02      	cmp	r3, #2
 801c008:	d015      	beq.n	801c036 <__gethex+0x396>
 801c00a:	2b03      	cmp	r3, #3
 801c00c:	d017      	beq.n	801c03e <__gethex+0x39e>
 801c00e:	2b01      	cmp	r3, #1
 801c010:	d109      	bne.n	801c026 <__gethex+0x386>
 801c012:	f01a 0f02 	tst.w	sl, #2
 801c016:	d006      	beq.n	801c026 <__gethex+0x386>
 801c018:	f8d9 0000 	ldr.w	r0, [r9]
 801c01c:	ea4a 0a00 	orr.w	sl, sl, r0
 801c020:	f01a 0f01 	tst.w	sl, #1
 801c024:	d10e      	bne.n	801c044 <__gethex+0x3a4>
 801c026:	f047 0710 	orr.w	r7, r7, #16
 801c02a:	e033      	b.n	801c094 <__gethex+0x3f4>
 801c02c:	f04f 0a01 	mov.w	sl, #1
 801c030:	e7d0      	b.n	801bfd4 <__gethex+0x334>
 801c032:	2701      	movs	r7, #1
 801c034:	e7e2      	b.n	801bffc <__gethex+0x35c>
 801c036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c038:	f1c3 0301 	rsb	r3, r3, #1
 801c03c:	9315      	str	r3, [sp, #84]	; 0x54
 801c03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c040:	2b00      	cmp	r3, #0
 801c042:	d0f0      	beq.n	801c026 <__gethex+0x386>
 801c044:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c048:	f104 0314 	add.w	r3, r4, #20
 801c04c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c050:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c054:	f04f 0c00 	mov.w	ip, #0
 801c058:	4618      	mov	r0, r3
 801c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c05e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c062:	d01c      	beq.n	801c09e <__gethex+0x3fe>
 801c064:	3201      	adds	r2, #1
 801c066:	6002      	str	r2, [r0, #0]
 801c068:	2f02      	cmp	r7, #2
 801c06a:	f104 0314 	add.w	r3, r4, #20
 801c06e:	d13f      	bne.n	801c0f0 <__gethex+0x450>
 801c070:	f8d8 2000 	ldr.w	r2, [r8]
 801c074:	3a01      	subs	r2, #1
 801c076:	42b2      	cmp	r2, r6
 801c078:	d10a      	bne.n	801c090 <__gethex+0x3f0>
 801c07a:	1171      	asrs	r1, r6, #5
 801c07c:	2201      	movs	r2, #1
 801c07e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c082:	f006 061f 	and.w	r6, r6, #31
 801c086:	fa02 f606 	lsl.w	r6, r2, r6
 801c08a:	421e      	tst	r6, r3
 801c08c:	bf18      	it	ne
 801c08e:	4617      	movne	r7, r2
 801c090:	f047 0720 	orr.w	r7, r7, #32
 801c094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c096:	601c      	str	r4, [r3, #0]
 801c098:	9b04      	ldr	r3, [sp, #16]
 801c09a:	601d      	str	r5, [r3, #0]
 801c09c:	e695      	b.n	801bdca <__gethex+0x12a>
 801c09e:	4299      	cmp	r1, r3
 801c0a0:	f843 cc04 	str.w	ip, [r3, #-4]
 801c0a4:	d8d8      	bhi.n	801c058 <__gethex+0x3b8>
 801c0a6:	68a3      	ldr	r3, [r4, #8]
 801c0a8:	459b      	cmp	fp, r3
 801c0aa:	db19      	blt.n	801c0e0 <__gethex+0x440>
 801c0ac:	6861      	ldr	r1, [r4, #4]
 801c0ae:	ee18 0a10 	vmov	r0, s16
 801c0b2:	3101      	adds	r1, #1
 801c0b4:	f000 f930 	bl	801c318 <_Balloc>
 801c0b8:	4681      	mov	r9, r0
 801c0ba:	b918      	cbnz	r0, 801c0c4 <__gethex+0x424>
 801c0bc:	4b1a      	ldr	r3, [pc, #104]	; (801c128 <__gethex+0x488>)
 801c0be:	4602      	mov	r2, r0
 801c0c0:	2184      	movs	r1, #132	; 0x84
 801c0c2:	e6a8      	b.n	801be16 <__gethex+0x176>
 801c0c4:	6922      	ldr	r2, [r4, #16]
 801c0c6:	3202      	adds	r2, #2
 801c0c8:	f104 010c 	add.w	r1, r4, #12
 801c0cc:	0092      	lsls	r2, r2, #2
 801c0ce:	300c      	adds	r0, #12
 801c0d0:	f7fc ffce 	bl	8019070 <memcpy>
 801c0d4:	4621      	mov	r1, r4
 801c0d6:	ee18 0a10 	vmov	r0, s16
 801c0da:	f000 f95d 	bl	801c398 <_Bfree>
 801c0de:	464c      	mov	r4, r9
 801c0e0:	6923      	ldr	r3, [r4, #16]
 801c0e2:	1c5a      	adds	r2, r3, #1
 801c0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c0e8:	6122      	str	r2, [r4, #16]
 801c0ea:	2201      	movs	r2, #1
 801c0ec:	615a      	str	r2, [r3, #20]
 801c0ee:	e7bb      	b.n	801c068 <__gethex+0x3c8>
 801c0f0:	6922      	ldr	r2, [r4, #16]
 801c0f2:	455a      	cmp	r2, fp
 801c0f4:	dd0b      	ble.n	801c10e <__gethex+0x46e>
 801c0f6:	2101      	movs	r1, #1
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	f7ff fd69 	bl	801bbd0 <rshift>
 801c0fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c102:	3501      	adds	r5, #1
 801c104:	42ab      	cmp	r3, r5
 801c106:	f6ff aed0 	blt.w	801beaa <__gethex+0x20a>
 801c10a:	2701      	movs	r7, #1
 801c10c:	e7c0      	b.n	801c090 <__gethex+0x3f0>
 801c10e:	f016 061f 	ands.w	r6, r6, #31
 801c112:	d0fa      	beq.n	801c10a <__gethex+0x46a>
 801c114:	449a      	add	sl, r3
 801c116:	f1c6 0620 	rsb	r6, r6, #32
 801c11a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c11e:	f000 f9f1 	bl	801c504 <__hi0bits>
 801c122:	42b0      	cmp	r0, r6
 801c124:	dbe7      	blt.n	801c0f6 <__gethex+0x456>
 801c126:	e7f0      	b.n	801c10a <__gethex+0x46a>
 801c128:	0801f8ec 	.word	0x0801f8ec

0801c12c <L_shift>:
 801c12c:	f1c2 0208 	rsb	r2, r2, #8
 801c130:	0092      	lsls	r2, r2, #2
 801c132:	b570      	push	{r4, r5, r6, lr}
 801c134:	f1c2 0620 	rsb	r6, r2, #32
 801c138:	6843      	ldr	r3, [r0, #4]
 801c13a:	6804      	ldr	r4, [r0, #0]
 801c13c:	fa03 f506 	lsl.w	r5, r3, r6
 801c140:	432c      	orrs	r4, r5
 801c142:	40d3      	lsrs	r3, r2
 801c144:	6004      	str	r4, [r0, #0]
 801c146:	f840 3f04 	str.w	r3, [r0, #4]!
 801c14a:	4288      	cmp	r0, r1
 801c14c:	d3f4      	bcc.n	801c138 <L_shift+0xc>
 801c14e:	bd70      	pop	{r4, r5, r6, pc}

0801c150 <__match>:
 801c150:	b530      	push	{r4, r5, lr}
 801c152:	6803      	ldr	r3, [r0, #0]
 801c154:	3301      	adds	r3, #1
 801c156:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c15a:	b914      	cbnz	r4, 801c162 <__match+0x12>
 801c15c:	6003      	str	r3, [r0, #0]
 801c15e:	2001      	movs	r0, #1
 801c160:	bd30      	pop	{r4, r5, pc}
 801c162:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c166:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c16a:	2d19      	cmp	r5, #25
 801c16c:	bf98      	it	ls
 801c16e:	3220      	addls	r2, #32
 801c170:	42a2      	cmp	r2, r4
 801c172:	d0f0      	beq.n	801c156 <__match+0x6>
 801c174:	2000      	movs	r0, #0
 801c176:	e7f3      	b.n	801c160 <__match+0x10>

0801c178 <__hexnan>:
 801c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c17c:	680b      	ldr	r3, [r1, #0]
 801c17e:	6801      	ldr	r1, [r0, #0]
 801c180:	115e      	asrs	r6, r3, #5
 801c182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c186:	f013 031f 	ands.w	r3, r3, #31
 801c18a:	b087      	sub	sp, #28
 801c18c:	bf18      	it	ne
 801c18e:	3604      	addne	r6, #4
 801c190:	2500      	movs	r5, #0
 801c192:	1f37      	subs	r7, r6, #4
 801c194:	4682      	mov	sl, r0
 801c196:	4690      	mov	r8, r2
 801c198:	9301      	str	r3, [sp, #4]
 801c19a:	f846 5c04 	str.w	r5, [r6, #-4]
 801c19e:	46b9      	mov	r9, r7
 801c1a0:	463c      	mov	r4, r7
 801c1a2:	9502      	str	r5, [sp, #8]
 801c1a4:	46ab      	mov	fp, r5
 801c1a6:	784a      	ldrb	r2, [r1, #1]
 801c1a8:	1c4b      	adds	r3, r1, #1
 801c1aa:	9303      	str	r3, [sp, #12]
 801c1ac:	b342      	cbz	r2, 801c200 <__hexnan+0x88>
 801c1ae:	4610      	mov	r0, r2
 801c1b0:	9105      	str	r1, [sp, #20]
 801c1b2:	9204      	str	r2, [sp, #16]
 801c1b4:	f7ff fd5e 	bl	801bc74 <__hexdig_fun>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d14f      	bne.n	801c25c <__hexnan+0xe4>
 801c1bc:	9a04      	ldr	r2, [sp, #16]
 801c1be:	9905      	ldr	r1, [sp, #20]
 801c1c0:	2a20      	cmp	r2, #32
 801c1c2:	d818      	bhi.n	801c1f6 <__hexnan+0x7e>
 801c1c4:	9b02      	ldr	r3, [sp, #8]
 801c1c6:	459b      	cmp	fp, r3
 801c1c8:	dd13      	ble.n	801c1f2 <__hexnan+0x7a>
 801c1ca:	454c      	cmp	r4, r9
 801c1cc:	d206      	bcs.n	801c1dc <__hexnan+0x64>
 801c1ce:	2d07      	cmp	r5, #7
 801c1d0:	dc04      	bgt.n	801c1dc <__hexnan+0x64>
 801c1d2:	462a      	mov	r2, r5
 801c1d4:	4649      	mov	r1, r9
 801c1d6:	4620      	mov	r0, r4
 801c1d8:	f7ff ffa8 	bl	801c12c <L_shift>
 801c1dc:	4544      	cmp	r4, r8
 801c1de:	d950      	bls.n	801c282 <__hexnan+0x10a>
 801c1e0:	2300      	movs	r3, #0
 801c1e2:	f1a4 0904 	sub.w	r9, r4, #4
 801c1e6:	f844 3c04 	str.w	r3, [r4, #-4]
 801c1ea:	f8cd b008 	str.w	fp, [sp, #8]
 801c1ee:	464c      	mov	r4, r9
 801c1f0:	461d      	mov	r5, r3
 801c1f2:	9903      	ldr	r1, [sp, #12]
 801c1f4:	e7d7      	b.n	801c1a6 <__hexnan+0x2e>
 801c1f6:	2a29      	cmp	r2, #41	; 0x29
 801c1f8:	d156      	bne.n	801c2a8 <__hexnan+0x130>
 801c1fa:	3102      	adds	r1, #2
 801c1fc:	f8ca 1000 	str.w	r1, [sl]
 801c200:	f1bb 0f00 	cmp.w	fp, #0
 801c204:	d050      	beq.n	801c2a8 <__hexnan+0x130>
 801c206:	454c      	cmp	r4, r9
 801c208:	d206      	bcs.n	801c218 <__hexnan+0xa0>
 801c20a:	2d07      	cmp	r5, #7
 801c20c:	dc04      	bgt.n	801c218 <__hexnan+0xa0>
 801c20e:	462a      	mov	r2, r5
 801c210:	4649      	mov	r1, r9
 801c212:	4620      	mov	r0, r4
 801c214:	f7ff ff8a 	bl	801c12c <L_shift>
 801c218:	4544      	cmp	r4, r8
 801c21a:	d934      	bls.n	801c286 <__hexnan+0x10e>
 801c21c:	f1a8 0204 	sub.w	r2, r8, #4
 801c220:	4623      	mov	r3, r4
 801c222:	f853 1b04 	ldr.w	r1, [r3], #4
 801c226:	f842 1f04 	str.w	r1, [r2, #4]!
 801c22a:	429f      	cmp	r7, r3
 801c22c:	d2f9      	bcs.n	801c222 <__hexnan+0xaa>
 801c22e:	1b3b      	subs	r3, r7, r4
 801c230:	f023 0303 	bic.w	r3, r3, #3
 801c234:	3304      	adds	r3, #4
 801c236:	3401      	adds	r4, #1
 801c238:	3e03      	subs	r6, #3
 801c23a:	42b4      	cmp	r4, r6
 801c23c:	bf88      	it	hi
 801c23e:	2304      	movhi	r3, #4
 801c240:	4443      	add	r3, r8
 801c242:	2200      	movs	r2, #0
 801c244:	f843 2b04 	str.w	r2, [r3], #4
 801c248:	429f      	cmp	r7, r3
 801c24a:	d2fb      	bcs.n	801c244 <__hexnan+0xcc>
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	b91b      	cbnz	r3, 801c258 <__hexnan+0xe0>
 801c250:	4547      	cmp	r7, r8
 801c252:	d127      	bne.n	801c2a4 <__hexnan+0x12c>
 801c254:	2301      	movs	r3, #1
 801c256:	603b      	str	r3, [r7, #0]
 801c258:	2005      	movs	r0, #5
 801c25a:	e026      	b.n	801c2aa <__hexnan+0x132>
 801c25c:	3501      	adds	r5, #1
 801c25e:	2d08      	cmp	r5, #8
 801c260:	f10b 0b01 	add.w	fp, fp, #1
 801c264:	dd06      	ble.n	801c274 <__hexnan+0xfc>
 801c266:	4544      	cmp	r4, r8
 801c268:	d9c3      	bls.n	801c1f2 <__hexnan+0x7a>
 801c26a:	2300      	movs	r3, #0
 801c26c:	f844 3c04 	str.w	r3, [r4, #-4]
 801c270:	2501      	movs	r5, #1
 801c272:	3c04      	subs	r4, #4
 801c274:	6822      	ldr	r2, [r4, #0]
 801c276:	f000 000f 	and.w	r0, r0, #15
 801c27a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c27e:	6022      	str	r2, [r4, #0]
 801c280:	e7b7      	b.n	801c1f2 <__hexnan+0x7a>
 801c282:	2508      	movs	r5, #8
 801c284:	e7b5      	b.n	801c1f2 <__hexnan+0x7a>
 801c286:	9b01      	ldr	r3, [sp, #4]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d0df      	beq.n	801c24c <__hexnan+0xd4>
 801c28c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c290:	f1c3 0320 	rsb	r3, r3, #32
 801c294:	fa22 f303 	lsr.w	r3, r2, r3
 801c298:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c29c:	401a      	ands	r2, r3
 801c29e:	f846 2c04 	str.w	r2, [r6, #-4]
 801c2a2:	e7d3      	b.n	801c24c <__hexnan+0xd4>
 801c2a4:	3f04      	subs	r7, #4
 801c2a6:	e7d1      	b.n	801c24c <__hexnan+0xd4>
 801c2a8:	2004      	movs	r0, #4
 801c2aa:	b007      	add	sp, #28
 801c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2b0 <_localeconv_r>:
 801c2b0:	4800      	ldr	r0, [pc, #0]	; (801c2b4 <_localeconv_r+0x4>)
 801c2b2:	4770      	bx	lr
 801c2b4:	200001a0 	.word	0x200001a0

0801c2b8 <_lseek_r>:
 801c2b8:	b538      	push	{r3, r4, r5, lr}
 801c2ba:	4d07      	ldr	r5, [pc, #28]	; (801c2d8 <_lseek_r+0x20>)
 801c2bc:	4604      	mov	r4, r0
 801c2be:	4608      	mov	r0, r1
 801c2c0:	4611      	mov	r1, r2
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	602a      	str	r2, [r5, #0]
 801c2c6:	461a      	mov	r2, r3
 801c2c8:	f7f0 fb18 	bl	800c8fc <_lseek>
 801c2cc:	1c43      	adds	r3, r0, #1
 801c2ce:	d102      	bne.n	801c2d6 <_lseek_r+0x1e>
 801c2d0:	682b      	ldr	r3, [r5, #0]
 801c2d2:	b103      	cbz	r3, 801c2d6 <_lseek_r+0x1e>
 801c2d4:	6023      	str	r3, [r4, #0]
 801c2d6:	bd38      	pop	{r3, r4, r5, pc}
 801c2d8:	2000a9bc 	.word	0x2000a9bc

0801c2dc <__ascii_mbtowc>:
 801c2dc:	b082      	sub	sp, #8
 801c2de:	b901      	cbnz	r1, 801c2e2 <__ascii_mbtowc+0x6>
 801c2e0:	a901      	add	r1, sp, #4
 801c2e2:	b142      	cbz	r2, 801c2f6 <__ascii_mbtowc+0x1a>
 801c2e4:	b14b      	cbz	r3, 801c2fa <__ascii_mbtowc+0x1e>
 801c2e6:	7813      	ldrb	r3, [r2, #0]
 801c2e8:	600b      	str	r3, [r1, #0]
 801c2ea:	7812      	ldrb	r2, [r2, #0]
 801c2ec:	1e10      	subs	r0, r2, #0
 801c2ee:	bf18      	it	ne
 801c2f0:	2001      	movne	r0, #1
 801c2f2:	b002      	add	sp, #8
 801c2f4:	4770      	bx	lr
 801c2f6:	4610      	mov	r0, r2
 801c2f8:	e7fb      	b.n	801c2f2 <__ascii_mbtowc+0x16>
 801c2fa:	f06f 0001 	mvn.w	r0, #1
 801c2fe:	e7f8      	b.n	801c2f2 <__ascii_mbtowc+0x16>

0801c300 <__malloc_lock>:
 801c300:	4801      	ldr	r0, [pc, #4]	; (801c308 <__malloc_lock+0x8>)
 801c302:	f001 b885 	b.w	801d410 <__retarget_lock_acquire_recursive>
 801c306:	bf00      	nop
 801c308:	2000a9c4 	.word	0x2000a9c4

0801c30c <__malloc_unlock>:
 801c30c:	4801      	ldr	r0, [pc, #4]	; (801c314 <__malloc_unlock+0x8>)
 801c30e:	f001 b880 	b.w	801d412 <__retarget_lock_release_recursive>
 801c312:	bf00      	nop
 801c314:	2000a9c4 	.word	0x2000a9c4

0801c318 <_Balloc>:
 801c318:	b570      	push	{r4, r5, r6, lr}
 801c31a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c31c:	4604      	mov	r4, r0
 801c31e:	460d      	mov	r5, r1
 801c320:	b976      	cbnz	r6, 801c340 <_Balloc+0x28>
 801c322:	2010      	movs	r0, #16
 801c324:	f7fc fe9c 	bl	8019060 <malloc>
 801c328:	4602      	mov	r2, r0
 801c32a:	6260      	str	r0, [r4, #36]	; 0x24
 801c32c:	b920      	cbnz	r0, 801c338 <_Balloc+0x20>
 801c32e:	4b18      	ldr	r3, [pc, #96]	; (801c390 <_Balloc+0x78>)
 801c330:	4818      	ldr	r0, [pc, #96]	; (801c394 <_Balloc+0x7c>)
 801c332:	2166      	movs	r1, #102	; 0x66
 801c334:	f000 fe84 	bl	801d040 <__assert_func>
 801c338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c33c:	6006      	str	r6, [r0, #0]
 801c33e:	60c6      	str	r6, [r0, #12]
 801c340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c342:	68f3      	ldr	r3, [r6, #12]
 801c344:	b183      	cbz	r3, 801c368 <_Balloc+0x50>
 801c346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c348:	68db      	ldr	r3, [r3, #12]
 801c34a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c34e:	b9b8      	cbnz	r0, 801c380 <_Balloc+0x68>
 801c350:	2101      	movs	r1, #1
 801c352:	fa01 f605 	lsl.w	r6, r1, r5
 801c356:	1d72      	adds	r2, r6, #5
 801c358:	0092      	lsls	r2, r2, #2
 801c35a:	4620      	mov	r0, r4
 801c35c:	f000 fc97 	bl	801cc8e <_calloc_r>
 801c360:	b160      	cbz	r0, 801c37c <_Balloc+0x64>
 801c362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c366:	e00e      	b.n	801c386 <_Balloc+0x6e>
 801c368:	2221      	movs	r2, #33	; 0x21
 801c36a:	2104      	movs	r1, #4
 801c36c:	4620      	mov	r0, r4
 801c36e:	f000 fc8e 	bl	801cc8e <_calloc_r>
 801c372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c374:	60f0      	str	r0, [r6, #12]
 801c376:	68db      	ldr	r3, [r3, #12]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d1e4      	bne.n	801c346 <_Balloc+0x2e>
 801c37c:	2000      	movs	r0, #0
 801c37e:	bd70      	pop	{r4, r5, r6, pc}
 801c380:	6802      	ldr	r2, [r0, #0]
 801c382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c386:	2300      	movs	r3, #0
 801c388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c38c:	e7f7      	b.n	801c37e <_Balloc+0x66>
 801c38e:	bf00      	nop
 801c390:	0801f876 	.word	0x0801f876
 801c394:	0801f97c 	.word	0x0801f97c

0801c398 <_Bfree>:
 801c398:	b570      	push	{r4, r5, r6, lr}
 801c39a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c39c:	4605      	mov	r5, r0
 801c39e:	460c      	mov	r4, r1
 801c3a0:	b976      	cbnz	r6, 801c3c0 <_Bfree+0x28>
 801c3a2:	2010      	movs	r0, #16
 801c3a4:	f7fc fe5c 	bl	8019060 <malloc>
 801c3a8:	4602      	mov	r2, r0
 801c3aa:	6268      	str	r0, [r5, #36]	; 0x24
 801c3ac:	b920      	cbnz	r0, 801c3b8 <_Bfree+0x20>
 801c3ae:	4b09      	ldr	r3, [pc, #36]	; (801c3d4 <_Bfree+0x3c>)
 801c3b0:	4809      	ldr	r0, [pc, #36]	; (801c3d8 <_Bfree+0x40>)
 801c3b2:	218a      	movs	r1, #138	; 0x8a
 801c3b4:	f000 fe44 	bl	801d040 <__assert_func>
 801c3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c3bc:	6006      	str	r6, [r0, #0]
 801c3be:	60c6      	str	r6, [r0, #12]
 801c3c0:	b13c      	cbz	r4, 801c3d2 <_Bfree+0x3a>
 801c3c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c3c4:	6862      	ldr	r2, [r4, #4]
 801c3c6:	68db      	ldr	r3, [r3, #12]
 801c3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c3cc:	6021      	str	r1, [r4, #0]
 801c3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c3d2:	bd70      	pop	{r4, r5, r6, pc}
 801c3d4:	0801f876 	.word	0x0801f876
 801c3d8:	0801f97c 	.word	0x0801f97c

0801c3dc <__multadd>:
 801c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3e0:	690e      	ldr	r6, [r1, #16]
 801c3e2:	4607      	mov	r7, r0
 801c3e4:	4698      	mov	r8, r3
 801c3e6:	460c      	mov	r4, r1
 801c3e8:	f101 0014 	add.w	r0, r1, #20
 801c3ec:	2300      	movs	r3, #0
 801c3ee:	6805      	ldr	r5, [r0, #0]
 801c3f0:	b2a9      	uxth	r1, r5
 801c3f2:	fb02 8101 	mla	r1, r2, r1, r8
 801c3f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801c3fa:	0c2d      	lsrs	r5, r5, #16
 801c3fc:	fb02 c505 	mla	r5, r2, r5, ip
 801c400:	b289      	uxth	r1, r1
 801c402:	3301      	adds	r3, #1
 801c404:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801c408:	429e      	cmp	r6, r3
 801c40a:	f840 1b04 	str.w	r1, [r0], #4
 801c40e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801c412:	dcec      	bgt.n	801c3ee <__multadd+0x12>
 801c414:	f1b8 0f00 	cmp.w	r8, #0
 801c418:	d022      	beq.n	801c460 <__multadd+0x84>
 801c41a:	68a3      	ldr	r3, [r4, #8]
 801c41c:	42b3      	cmp	r3, r6
 801c41e:	dc19      	bgt.n	801c454 <__multadd+0x78>
 801c420:	6861      	ldr	r1, [r4, #4]
 801c422:	4638      	mov	r0, r7
 801c424:	3101      	adds	r1, #1
 801c426:	f7ff ff77 	bl	801c318 <_Balloc>
 801c42a:	4605      	mov	r5, r0
 801c42c:	b928      	cbnz	r0, 801c43a <__multadd+0x5e>
 801c42e:	4602      	mov	r2, r0
 801c430:	4b0d      	ldr	r3, [pc, #52]	; (801c468 <__multadd+0x8c>)
 801c432:	480e      	ldr	r0, [pc, #56]	; (801c46c <__multadd+0x90>)
 801c434:	21b5      	movs	r1, #181	; 0xb5
 801c436:	f000 fe03 	bl	801d040 <__assert_func>
 801c43a:	6922      	ldr	r2, [r4, #16]
 801c43c:	3202      	adds	r2, #2
 801c43e:	f104 010c 	add.w	r1, r4, #12
 801c442:	0092      	lsls	r2, r2, #2
 801c444:	300c      	adds	r0, #12
 801c446:	f7fc fe13 	bl	8019070 <memcpy>
 801c44a:	4621      	mov	r1, r4
 801c44c:	4638      	mov	r0, r7
 801c44e:	f7ff ffa3 	bl	801c398 <_Bfree>
 801c452:	462c      	mov	r4, r5
 801c454:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c458:	3601      	adds	r6, #1
 801c45a:	f8c3 8014 	str.w	r8, [r3, #20]
 801c45e:	6126      	str	r6, [r4, #16]
 801c460:	4620      	mov	r0, r4
 801c462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c466:	bf00      	nop
 801c468:	0801f8ec 	.word	0x0801f8ec
 801c46c:	0801f97c 	.word	0x0801f97c

0801c470 <__s2b>:
 801c470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c474:	460c      	mov	r4, r1
 801c476:	4615      	mov	r5, r2
 801c478:	461f      	mov	r7, r3
 801c47a:	2209      	movs	r2, #9
 801c47c:	3308      	adds	r3, #8
 801c47e:	4606      	mov	r6, r0
 801c480:	fb93 f3f2 	sdiv	r3, r3, r2
 801c484:	2100      	movs	r1, #0
 801c486:	2201      	movs	r2, #1
 801c488:	429a      	cmp	r2, r3
 801c48a:	db09      	blt.n	801c4a0 <__s2b+0x30>
 801c48c:	4630      	mov	r0, r6
 801c48e:	f7ff ff43 	bl	801c318 <_Balloc>
 801c492:	b940      	cbnz	r0, 801c4a6 <__s2b+0x36>
 801c494:	4602      	mov	r2, r0
 801c496:	4b19      	ldr	r3, [pc, #100]	; (801c4fc <__s2b+0x8c>)
 801c498:	4819      	ldr	r0, [pc, #100]	; (801c500 <__s2b+0x90>)
 801c49a:	21ce      	movs	r1, #206	; 0xce
 801c49c:	f000 fdd0 	bl	801d040 <__assert_func>
 801c4a0:	0052      	lsls	r2, r2, #1
 801c4a2:	3101      	adds	r1, #1
 801c4a4:	e7f0      	b.n	801c488 <__s2b+0x18>
 801c4a6:	9b08      	ldr	r3, [sp, #32]
 801c4a8:	6143      	str	r3, [r0, #20]
 801c4aa:	2d09      	cmp	r5, #9
 801c4ac:	f04f 0301 	mov.w	r3, #1
 801c4b0:	6103      	str	r3, [r0, #16]
 801c4b2:	dd16      	ble.n	801c4e2 <__s2b+0x72>
 801c4b4:	f104 0909 	add.w	r9, r4, #9
 801c4b8:	46c8      	mov	r8, r9
 801c4ba:	442c      	add	r4, r5
 801c4bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c4c0:	4601      	mov	r1, r0
 801c4c2:	3b30      	subs	r3, #48	; 0x30
 801c4c4:	220a      	movs	r2, #10
 801c4c6:	4630      	mov	r0, r6
 801c4c8:	f7ff ff88 	bl	801c3dc <__multadd>
 801c4cc:	45a0      	cmp	r8, r4
 801c4ce:	d1f5      	bne.n	801c4bc <__s2b+0x4c>
 801c4d0:	f1a5 0408 	sub.w	r4, r5, #8
 801c4d4:	444c      	add	r4, r9
 801c4d6:	1b2d      	subs	r5, r5, r4
 801c4d8:	1963      	adds	r3, r4, r5
 801c4da:	42bb      	cmp	r3, r7
 801c4dc:	db04      	blt.n	801c4e8 <__s2b+0x78>
 801c4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4e2:	340a      	adds	r4, #10
 801c4e4:	2509      	movs	r5, #9
 801c4e6:	e7f6      	b.n	801c4d6 <__s2b+0x66>
 801c4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c4ec:	4601      	mov	r1, r0
 801c4ee:	3b30      	subs	r3, #48	; 0x30
 801c4f0:	220a      	movs	r2, #10
 801c4f2:	4630      	mov	r0, r6
 801c4f4:	f7ff ff72 	bl	801c3dc <__multadd>
 801c4f8:	e7ee      	b.n	801c4d8 <__s2b+0x68>
 801c4fa:	bf00      	nop
 801c4fc:	0801f8ec 	.word	0x0801f8ec
 801c500:	0801f97c 	.word	0x0801f97c

0801c504 <__hi0bits>:
 801c504:	0c03      	lsrs	r3, r0, #16
 801c506:	041b      	lsls	r3, r3, #16
 801c508:	b9d3      	cbnz	r3, 801c540 <__hi0bits+0x3c>
 801c50a:	0400      	lsls	r0, r0, #16
 801c50c:	2310      	movs	r3, #16
 801c50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c512:	bf04      	itt	eq
 801c514:	0200      	lsleq	r0, r0, #8
 801c516:	3308      	addeq	r3, #8
 801c518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c51c:	bf04      	itt	eq
 801c51e:	0100      	lsleq	r0, r0, #4
 801c520:	3304      	addeq	r3, #4
 801c522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c526:	bf04      	itt	eq
 801c528:	0080      	lsleq	r0, r0, #2
 801c52a:	3302      	addeq	r3, #2
 801c52c:	2800      	cmp	r0, #0
 801c52e:	db05      	blt.n	801c53c <__hi0bits+0x38>
 801c530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c534:	f103 0301 	add.w	r3, r3, #1
 801c538:	bf08      	it	eq
 801c53a:	2320      	moveq	r3, #32
 801c53c:	4618      	mov	r0, r3
 801c53e:	4770      	bx	lr
 801c540:	2300      	movs	r3, #0
 801c542:	e7e4      	b.n	801c50e <__hi0bits+0xa>

0801c544 <__lo0bits>:
 801c544:	6803      	ldr	r3, [r0, #0]
 801c546:	f013 0207 	ands.w	r2, r3, #7
 801c54a:	4601      	mov	r1, r0
 801c54c:	d00b      	beq.n	801c566 <__lo0bits+0x22>
 801c54e:	07da      	lsls	r2, r3, #31
 801c550:	d424      	bmi.n	801c59c <__lo0bits+0x58>
 801c552:	0798      	lsls	r0, r3, #30
 801c554:	bf49      	itett	mi
 801c556:	085b      	lsrmi	r3, r3, #1
 801c558:	089b      	lsrpl	r3, r3, #2
 801c55a:	2001      	movmi	r0, #1
 801c55c:	600b      	strmi	r3, [r1, #0]
 801c55e:	bf5c      	itt	pl
 801c560:	600b      	strpl	r3, [r1, #0]
 801c562:	2002      	movpl	r0, #2
 801c564:	4770      	bx	lr
 801c566:	b298      	uxth	r0, r3
 801c568:	b9b0      	cbnz	r0, 801c598 <__lo0bits+0x54>
 801c56a:	0c1b      	lsrs	r3, r3, #16
 801c56c:	2010      	movs	r0, #16
 801c56e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801c572:	bf04      	itt	eq
 801c574:	0a1b      	lsreq	r3, r3, #8
 801c576:	3008      	addeq	r0, #8
 801c578:	071a      	lsls	r2, r3, #28
 801c57a:	bf04      	itt	eq
 801c57c:	091b      	lsreq	r3, r3, #4
 801c57e:	3004      	addeq	r0, #4
 801c580:	079a      	lsls	r2, r3, #30
 801c582:	bf04      	itt	eq
 801c584:	089b      	lsreq	r3, r3, #2
 801c586:	3002      	addeq	r0, #2
 801c588:	07da      	lsls	r2, r3, #31
 801c58a:	d403      	bmi.n	801c594 <__lo0bits+0x50>
 801c58c:	085b      	lsrs	r3, r3, #1
 801c58e:	f100 0001 	add.w	r0, r0, #1
 801c592:	d005      	beq.n	801c5a0 <__lo0bits+0x5c>
 801c594:	600b      	str	r3, [r1, #0]
 801c596:	4770      	bx	lr
 801c598:	4610      	mov	r0, r2
 801c59a:	e7e8      	b.n	801c56e <__lo0bits+0x2a>
 801c59c:	2000      	movs	r0, #0
 801c59e:	4770      	bx	lr
 801c5a0:	2020      	movs	r0, #32
 801c5a2:	4770      	bx	lr

0801c5a4 <__i2b>:
 801c5a4:	b510      	push	{r4, lr}
 801c5a6:	460c      	mov	r4, r1
 801c5a8:	2101      	movs	r1, #1
 801c5aa:	f7ff feb5 	bl	801c318 <_Balloc>
 801c5ae:	4602      	mov	r2, r0
 801c5b0:	b928      	cbnz	r0, 801c5be <__i2b+0x1a>
 801c5b2:	4b05      	ldr	r3, [pc, #20]	; (801c5c8 <__i2b+0x24>)
 801c5b4:	4805      	ldr	r0, [pc, #20]	; (801c5cc <__i2b+0x28>)
 801c5b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c5ba:	f000 fd41 	bl	801d040 <__assert_func>
 801c5be:	2301      	movs	r3, #1
 801c5c0:	6144      	str	r4, [r0, #20]
 801c5c2:	6103      	str	r3, [r0, #16]
 801c5c4:	bd10      	pop	{r4, pc}
 801c5c6:	bf00      	nop
 801c5c8:	0801f8ec 	.word	0x0801f8ec
 801c5cc:	0801f97c 	.word	0x0801f97c

0801c5d0 <__multiply>:
 801c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d4:	4614      	mov	r4, r2
 801c5d6:	690a      	ldr	r2, [r1, #16]
 801c5d8:	6923      	ldr	r3, [r4, #16]
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	bfb8      	it	lt
 801c5de:	460b      	movlt	r3, r1
 801c5e0:	460d      	mov	r5, r1
 801c5e2:	bfbc      	itt	lt
 801c5e4:	4625      	movlt	r5, r4
 801c5e6:	461c      	movlt	r4, r3
 801c5e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801c5ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c5f0:	68ab      	ldr	r3, [r5, #8]
 801c5f2:	6869      	ldr	r1, [r5, #4]
 801c5f4:	eb0a 0709 	add.w	r7, sl, r9
 801c5f8:	42bb      	cmp	r3, r7
 801c5fa:	b085      	sub	sp, #20
 801c5fc:	bfb8      	it	lt
 801c5fe:	3101      	addlt	r1, #1
 801c600:	f7ff fe8a 	bl	801c318 <_Balloc>
 801c604:	b930      	cbnz	r0, 801c614 <__multiply+0x44>
 801c606:	4602      	mov	r2, r0
 801c608:	4b42      	ldr	r3, [pc, #264]	; (801c714 <__multiply+0x144>)
 801c60a:	4843      	ldr	r0, [pc, #268]	; (801c718 <__multiply+0x148>)
 801c60c:	f240 115d 	movw	r1, #349	; 0x15d
 801c610:	f000 fd16 	bl	801d040 <__assert_func>
 801c614:	f100 0614 	add.w	r6, r0, #20
 801c618:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801c61c:	4633      	mov	r3, r6
 801c61e:	2200      	movs	r2, #0
 801c620:	4543      	cmp	r3, r8
 801c622:	d31e      	bcc.n	801c662 <__multiply+0x92>
 801c624:	f105 0c14 	add.w	ip, r5, #20
 801c628:	f104 0314 	add.w	r3, r4, #20
 801c62c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801c630:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801c634:	9202      	str	r2, [sp, #8]
 801c636:	ebac 0205 	sub.w	r2, ip, r5
 801c63a:	3a15      	subs	r2, #21
 801c63c:	f022 0203 	bic.w	r2, r2, #3
 801c640:	3204      	adds	r2, #4
 801c642:	f105 0115 	add.w	r1, r5, #21
 801c646:	458c      	cmp	ip, r1
 801c648:	bf38      	it	cc
 801c64a:	2204      	movcc	r2, #4
 801c64c:	9201      	str	r2, [sp, #4]
 801c64e:	9a02      	ldr	r2, [sp, #8]
 801c650:	9303      	str	r3, [sp, #12]
 801c652:	429a      	cmp	r2, r3
 801c654:	d808      	bhi.n	801c668 <__multiply+0x98>
 801c656:	2f00      	cmp	r7, #0
 801c658:	dc55      	bgt.n	801c706 <__multiply+0x136>
 801c65a:	6107      	str	r7, [r0, #16]
 801c65c:	b005      	add	sp, #20
 801c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c662:	f843 2b04 	str.w	r2, [r3], #4
 801c666:	e7db      	b.n	801c620 <__multiply+0x50>
 801c668:	f8b3 a000 	ldrh.w	sl, [r3]
 801c66c:	f1ba 0f00 	cmp.w	sl, #0
 801c670:	d020      	beq.n	801c6b4 <__multiply+0xe4>
 801c672:	f105 0e14 	add.w	lr, r5, #20
 801c676:	46b1      	mov	r9, r6
 801c678:	2200      	movs	r2, #0
 801c67a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801c67e:	f8d9 b000 	ldr.w	fp, [r9]
 801c682:	b2a1      	uxth	r1, r4
 801c684:	fa1f fb8b 	uxth.w	fp, fp
 801c688:	fb0a b101 	mla	r1, sl, r1, fp
 801c68c:	4411      	add	r1, r2
 801c68e:	f8d9 2000 	ldr.w	r2, [r9]
 801c692:	0c24      	lsrs	r4, r4, #16
 801c694:	0c12      	lsrs	r2, r2, #16
 801c696:	fb0a 2404 	mla	r4, sl, r4, r2
 801c69a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801c69e:	b289      	uxth	r1, r1
 801c6a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801c6a4:	45f4      	cmp	ip, lr
 801c6a6:	f849 1b04 	str.w	r1, [r9], #4
 801c6aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801c6ae:	d8e4      	bhi.n	801c67a <__multiply+0xaa>
 801c6b0:	9901      	ldr	r1, [sp, #4]
 801c6b2:	5072      	str	r2, [r6, r1]
 801c6b4:	9a03      	ldr	r2, [sp, #12]
 801c6b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c6ba:	3304      	adds	r3, #4
 801c6bc:	f1b9 0f00 	cmp.w	r9, #0
 801c6c0:	d01f      	beq.n	801c702 <__multiply+0x132>
 801c6c2:	6834      	ldr	r4, [r6, #0]
 801c6c4:	f105 0114 	add.w	r1, r5, #20
 801c6c8:	46b6      	mov	lr, r6
 801c6ca:	f04f 0a00 	mov.w	sl, #0
 801c6ce:	880a      	ldrh	r2, [r1, #0]
 801c6d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 801c6d4:	fb09 b202 	mla	r2, r9, r2, fp
 801c6d8:	4492      	add	sl, r2
 801c6da:	b2a4      	uxth	r4, r4
 801c6dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c6e0:	f84e 4b04 	str.w	r4, [lr], #4
 801c6e4:	f851 4b04 	ldr.w	r4, [r1], #4
 801c6e8:	f8be 2000 	ldrh.w	r2, [lr]
 801c6ec:	0c24      	lsrs	r4, r4, #16
 801c6ee:	fb09 2404 	mla	r4, r9, r4, r2
 801c6f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801c6f6:	458c      	cmp	ip, r1
 801c6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c6fc:	d8e7      	bhi.n	801c6ce <__multiply+0xfe>
 801c6fe:	9a01      	ldr	r2, [sp, #4]
 801c700:	50b4      	str	r4, [r6, r2]
 801c702:	3604      	adds	r6, #4
 801c704:	e7a3      	b.n	801c64e <__multiply+0x7e>
 801c706:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d1a5      	bne.n	801c65a <__multiply+0x8a>
 801c70e:	3f01      	subs	r7, #1
 801c710:	e7a1      	b.n	801c656 <__multiply+0x86>
 801c712:	bf00      	nop
 801c714:	0801f8ec 	.word	0x0801f8ec
 801c718:	0801f97c 	.word	0x0801f97c

0801c71c <__pow5mult>:
 801c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c720:	4615      	mov	r5, r2
 801c722:	f012 0203 	ands.w	r2, r2, #3
 801c726:	4606      	mov	r6, r0
 801c728:	460f      	mov	r7, r1
 801c72a:	d007      	beq.n	801c73c <__pow5mult+0x20>
 801c72c:	4c25      	ldr	r4, [pc, #148]	; (801c7c4 <__pow5mult+0xa8>)
 801c72e:	3a01      	subs	r2, #1
 801c730:	2300      	movs	r3, #0
 801c732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c736:	f7ff fe51 	bl	801c3dc <__multadd>
 801c73a:	4607      	mov	r7, r0
 801c73c:	10ad      	asrs	r5, r5, #2
 801c73e:	d03d      	beq.n	801c7bc <__pow5mult+0xa0>
 801c740:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c742:	b97c      	cbnz	r4, 801c764 <__pow5mult+0x48>
 801c744:	2010      	movs	r0, #16
 801c746:	f7fc fc8b 	bl	8019060 <malloc>
 801c74a:	4602      	mov	r2, r0
 801c74c:	6270      	str	r0, [r6, #36]	; 0x24
 801c74e:	b928      	cbnz	r0, 801c75c <__pow5mult+0x40>
 801c750:	4b1d      	ldr	r3, [pc, #116]	; (801c7c8 <__pow5mult+0xac>)
 801c752:	481e      	ldr	r0, [pc, #120]	; (801c7cc <__pow5mult+0xb0>)
 801c754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c758:	f000 fc72 	bl	801d040 <__assert_func>
 801c75c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c760:	6004      	str	r4, [r0, #0]
 801c762:	60c4      	str	r4, [r0, #12]
 801c764:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c76c:	b94c      	cbnz	r4, 801c782 <__pow5mult+0x66>
 801c76e:	f240 2171 	movw	r1, #625	; 0x271
 801c772:	4630      	mov	r0, r6
 801c774:	f7ff ff16 	bl	801c5a4 <__i2b>
 801c778:	2300      	movs	r3, #0
 801c77a:	f8c8 0008 	str.w	r0, [r8, #8]
 801c77e:	4604      	mov	r4, r0
 801c780:	6003      	str	r3, [r0, #0]
 801c782:	f04f 0900 	mov.w	r9, #0
 801c786:	07eb      	lsls	r3, r5, #31
 801c788:	d50a      	bpl.n	801c7a0 <__pow5mult+0x84>
 801c78a:	4639      	mov	r1, r7
 801c78c:	4622      	mov	r2, r4
 801c78e:	4630      	mov	r0, r6
 801c790:	f7ff ff1e 	bl	801c5d0 <__multiply>
 801c794:	4639      	mov	r1, r7
 801c796:	4680      	mov	r8, r0
 801c798:	4630      	mov	r0, r6
 801c79a:	f7ff fdfd 	bl	801c398 <_Bfree>
 801c79e:	4647      	mov	r7, r8
 801c7a0:	106d      	asrs	r5, r5, #1
 801c7a2:	d00b      	beq.n	801c7bc <__pow5mult+0xa0>
 801c7a4:	6820      	ldr	r0, [r4, #0]
 801c7a6:	b938      	cbnz	r0, 801c7b8 <__pow5mult+0x9c>
 801c7a8:	4622      	mov	r2, r4
 801c7aa:	4621      	mov	r1, r4
 801c7ac:	4630      	mov	r0, r6
 801c7ae:	f7ff ff0f 	bl	801c5d0 <__multiply>
 801c7b2:	6020      	str	r0, [r4, #0]
 801c7b4:	f8c0 9000 	str.w	r9, [r0]
 801c7b8:	4604      	mov	r4, r0
 801c7ba:	e7e4      	b.n	801c786 <__pow5mult+0x6a>
 801c7bc:	4638      	mov	r0, r7
 801c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7c2:	bf00      	nop
 801c7c4:	0801fad0 	.word	0x0801fad0
 801c7c8:	0801f876 	.word	0x0801f876
 801c7cc:	0801f97c 	.word	0x0801f97c

0801c7d0 <__lshift>:
 801c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7d4:	460c      	mov	r4, r1
 801c7d6:	6849      	ldr	r1, [r1, #4]
 801c7d8:	6923      	ldr	r3, [r4, #16]
 801c7da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c7de:	68a3      	ldr	r3, [r4, #8]
 801c7e0:	4607      	mov	r7, r0
 801c7e2:	4691      	mov	r9, r2
 801c7e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c7e8:	f108 0601 	add.w	r6, r8, #1
 801c7ec:	42b3      	cmp	r3, r6
 801c7ee:	db0b      	blt.n	801c808 <__lshift+0x38>
 801c7f0:	4638      	mov	r0, r7
 801c7f2:	f7ff fd91 	bl	801c318 <_Balloc>
 801c7f6:	4605      	mov	r5, r0
 801c7f8:	b948      	cbnz	r0, 801c80e <__lshift+0x3e>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	4b28      	ldr	r3, [pc, #160]	; (801c8a0 <__lshift+0xd0>)
 801c7fe:	4829      	ldr	r0, [pc, #164]	; (801c8a4 <__lshift+0xd4>)
 801c800:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c804:	f000 fc1c 	bl	801d040 <__assert_func>
 801c808:	3101      	adds	r1, #1
 801c80a:	005b      	lsls	r3, r3, #1
 801c80c:	e7ee      	b.n	801c7ec <__lshift+0x1c>
 801c80e:	2300      	movs	r3, #0
 801c810:	f100 0114 	add.w	r1, r0, #20
 801c814:	f100 0210 	add.w	r2, r0, #16
 801c818:	4618      	mov	r0, r3
 801c81a:	4553      	cmp	r3, sl
 801c81c:	db33      	blt.n	801c886 <__lshift+0xb6>
 801c81e:	6920      	ldr	r0, [r4, #16]
 801c820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c824:	f104 0314 	add.w	r3, r4, #20
 801c828:	f019 091f 	ands.w	r9, r9, #31
 801c82c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c830:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c834:	d02b      	beq.n	801c88e <__lshift+0xbe>
 801c836:	f1c9 0e20 	rsb	lr, r9, #32
 801c83a:	468a      	mov	sl, r1
 801c83c:	2200      	movs	r2, #0
 801c83e:	6818      	ldr	r0, [r3, #0]
 801c840:	fa00 f009 	lsl.w	r0, r0, r9
 801c844:	4302      	orrs	r2, r0
 801c846:	f84a 2b04 	str.w	r2, [sl], #4
 801c84a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c84e:	459c      	cmp	ip, r3
 801c850:	fa22 f20e 	lsr.w	r2, r2, lr
 801c854:	d8f3      	bhi.n	801c83e <__lshift+0x6e>
 801c856:	ebac 0304 	sub.w	r3, ip, r4
 801c85a:	3b15      	subs	r3, #21
 801c85c:	f023 0303 	bic.w	r3, r3, #3
 801c860:	3304      	adds	r3, #4
 801c862:	f104 0015 	add.w	r0, r4, #21
 801c866:	4584      	cmp	ip, r0
 801c868:	bf38      	it	cc
 801c86a:	2304      	movcc	r3, #4
 801c86c:	50ca      	str	r2, [r1, r3]
 801c86e:	b10a      	cbz	r2, 801c874 <__lshift+0xa4>
 801c870:	f108 0602 	add.w	r6, r8, #2
 801c874:	3e01      	subs	r6, #1
 801c876:	4638      	mov	r0, r7
 801c878:	612e      	str	r6, [r5, #16]
 801c87a:	4621      	mov	r1, r4
 801c87c:	f7ff fd8c 	bl	801c398 <_Bfree>
 801c880:	4628      	mov	r0, r5
 801c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c886:	f842 0f04 	str.w	r0, [r2, #4]!
 801c88a:	3301      	adds	r3, #1
 801c88c:	e7c5      	b.n	801c81a <__lshift+0x4a>
 801c88e:	3904      	subs	r1, #4
 801c890:	f853 2b04 	ldr.w	r2, [r3], #4
 801c894:	f841 2f04 	str.w	r2, [r1, #4]!
 801c898:	459c      	cmp	ip, r3
 801c89a:	d8f9      	bhi.n	801c890 <__lshift+0xc0>
 801c89c:	e7ea      	b.n	801c874 <__lshift+0xa4>
 801c89e:	bf00      	nop
 801c8a0:	0801f8ec 	.word	0x0801f8ec
 801c8a4:	0801f97c 	.word	0x0801f97c

0801c8a8 <__mcmp>:
 801c8a8:	b530      	push	{r4, r5, lr}
 801c8aa:	6902      	ldr	r2, [r0, #16]
 801c8ac:	690c      	ldr	r4, [r1, #16]
 801c8ae:	1b12      	subs	r2, r2, r4
 801c8b0:	d10e      	bne.n	801c8d0 <__mcmp+0x28>
 801c8b2:	f100 0314 	add.w	r3, r0, #20
 801c8b6:	3114      	adds	r1, #20
 801c8b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c8bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c8c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c8c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c8c8:	42a5      	cmp	r5, r4
 801c8ca:	d003      	beq.n	801c8d4 <__mcmp+0x2c>
 801c8cc:	d305      	bcc.n	801c8da <__mcmp+0x32>
 801c8ce:	2201      	movs	r2, #1
 801c8d0:	4610      	mov	r0, r2
 801c8d2:	bd30      	pop	{r4, r5, pc}
 801c8d4:	4283      	cmp	r3, r0
 801c8d6:	d3f3      	bcc.n	801c8c0 <__mcmp+0x18>
 801c8d8:	e7fa      	b.n	801c8d0 <__mcmp+0x28>
 801c8da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c8de:	e7f7      	b.n	801c8d0 <__mcmp+0x28>

0801c8e0 <__mdiff>:
 801c8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8e4:	460c      	mov	r4, r1
 801c8e6:	4606      	mov	r6, r0
 801c8e8:	4611      	mov	r1, r2
 801c8ea:	4620      	mov	r0, r4
 801c8ec:	4617      	mov	r7, r2
 801c8ee:	f7ff ffdb 	bl	801c8a8 <__mcmp>
 801c8f2:	1e05      	subs	r5, r0, #0
 801c8f4:	d110      	bne.n	801c918 <__mdiff+0x38>
 801c8f6:	4629      	mov	r1, r5
 801c8f8:	4630      	mov	r0, r6
 801c8fa:	f7ff fd0d 	bl	801c318 <_Balloc>
 801c8fe:	b930      	cbnz	r0, 801c90e <__mdiff+0x2e>
 801c900:	4b39      	ldr	r3, [pc, #228]	; (801c9e8 <__mdiff+0x108>)
 801c902:	4602      	mov	r2, r0
 801c904:	f240 2132 	movw	r1, #562	; 0x232
 801c908:	4838      	ldr	r0, [pc, #224]	; (801c9ec <__mdiff+0x10c>)
 801c90a:	f000 fb99 	bl	801d040 <__assert_func>
 801c90e:	2301      	movs	r3, #1
 801c910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c918:	bfa4      	itt	ge
 801c91a:	463b      	movge	r3, r7
 801c91c:	4627      	movge	r7, r4
 801c91e:	4630      	mov	r0, r6
 801c920:	6879      	ldr	r1, [r7, #4]
 801c922:	bfa6      	itte	ge
 801c924:	461c      	movge	r4, r3
 801c926:	2500      	movge	r5, #0
 801c928:	2501      	movlt	r5, #1
 801c92a:	f7ff fcf5 	bl	801c318 <_Balloc>
 801c92e:	b920      	cbnz	r0, 801c93a <__mdiff+0x5a>
 801c930:	4b2d      	ldr	r3, [pc, #180]	; (801c9e8 <__mdiff+0x108>)
 801c932:	4602      	mov	r2, r0
 801c934:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c938:	e7e6      	b.n	801c908 <__mdiff+0x28>
 801c93a:	693e      	ldr	r6, [r7, #16]
 801c93c:	60c5      	str	r5, [r0, #12]
 801c93e:	6925      	ldr	r5, [r4, #16]
 801c940:	f107 0114 	add.w	r1, r7, #20
 801c944:	f104 0914 	add.w	r9, r4, #20
 801c948:	f100 0e14 	add.w	lr, r0, #20
 801c94c:	f107 0210 	add.w	r2, r7, #16
 801c950:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801c954:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801c958:	46f2      	mov	sl, lr
 801c95a:	2700      	movs	r7, #0
 801c95c:	f859 3b04 	ldr.w	r3, [r9], #4
 801c960:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c964:	fa1f f883 	uxth.w	r8, r3
 801c968:	fa17 f78b 	uxtah	r7, r7, fp
 801c96c:	0c1b      	lsrs	r3, r3, #16
 801c96e:	eba7 0808 	sub.w	r8, r7, r8
 801c972:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c976:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c97a:	fa1f f888 	uxth.w	r8, r8
 801c97e:	141f      	asrs	r7, r3, #16
 801c980:	454d      	cmp	r5, r9
 801c982:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c986:	f84a 3b04 	str.w	r3, [sl], #4
 801c98a:	d8e7      	bhi.n	801c95c <__mdiff+0x7c>
 801c98c:	1b2b      	subs	r3, r5, r4
 801c98e:	3b15      	subs	r3, #21
 801c990:	f023 0303 	bic.w	r3, r3, #3
 801c994:	3304      	adds	r3, #4
 801c996:	3415      	adds	r4, #21
 801c998:	42a5      	cmp	r5, r4
 801c99a:	bf38      	it	cc
 801c99c:	2304      	movcc	r3, #4
 801c99e:	4419      	add	r1, r3
 801c9a0:	4473      	add	r3, lr
 801c9a2:	469e      	mov	lr, r3
 801c9a4:	460d      	mov	r5, r1
 801c9a6:	4565      	cmp	r5, ip
 801c9a8:	d30e      	bcc.n	801c9c8 <__mdiff+0xe8>
 801c9aa:	f10c 0203 	add.w	r2, ip, #3
 801c9ae:	1a52      	subs	r2, r2, r1
 801c9b0:	f022 0203 	bic.w	r2, r2, #3
 801c9b4:	3903      	subs	r1, #3
 801c9b6:	458c      	cmp	ip, r1
 801c9b8:	bf38      	it	cc
 801c9ba:	2200      	movcc	r2, #0
 801c9bc:	441a      	add	r2, r3
 801c9be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c9c2:	b17b      	cbz	r3, 801c9e4 <__mdiff+0x104>
 801c9c4:	6106      	str	r6, [r0, #16]
 801c9c6:	e7a5      	b.n	801c914 <__mdiff+0x34>
 801c9c8:	f855 8b04 	ldr.w	r8, [r5], #4
 801c9cc:	fa17 f488 	uxtah	r4, r7, r8
 801c9d0:	1422      	asrs	r2, r4, #16
 801c9d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801c9d6:	b2a4      	uxth	r4, r4
 801c9d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c9dc:	f84e 4b04 	str.w	r4, [lr], #4
 801c9e0:	1417      	asrs	r7, r2, #16
 801c9e2:	e7e0      	b.n	801c9a6 <__mdiff+0xc6>
 801c9e4:	3e01      	subs	r6, #1
 801c9e6:	e7ea      	b.n	801c9be <__mdiff+0xde>
 801c9e8:	0801f8ec 	.word	0x0801f8ec
 801c9ec:	0801f97c 	.word	0x0801f97c

0801c9f0 <__ulp>:
 801c9f0:	b082      	sub	sp, #8
 801c9f2:	ed8d 0b00 	vstr	d0, [sp]
 801c9f6:	9b01      	ldr	r3, [sp, #4]
 801c9f8:	4912      	ldr	r1, [pc, #72]	; (801ca44 <__ulp+0x54>)
 801c9fa:	4019      	ands	r1, r3
 801c9fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ca00:	2900      	cmp	r1, #0
 801ca02:	dd05      	ble.n	801ca10 <__ulp+0x20>
 801ca04:	2200      	movs	r2, #0
 801ca06:	460b      	mov	r3, r1
 801ca08:	ec43 2b10 	vmov	d0, r2, r3
 801ca0c:	b002      	add	sp, #8
 801ca0e:	4770      	bx	lr
 801ca10:	4249      	negs	r1, r1
 801ca12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ca16:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ca1a:	f04f 0200 	mov.w	r2, #0
 801ca1e:	f04f 0300 	mov.w	r3, #0
 801ca22:	da04      	bge.n	801ca2e <__ulp+0x3e>
 801ca24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ca28:	fa41 f300 	asr.w	r3, r1, r0
 801ca2c:	e7ec      	b.n	801ca08 <__ulp+0x18>
 801ca2e:	f1a0 0114 	sub.w	r1, r0, #20
 801ca32:	291e      	cmp	r1, #30
 801ca34:	bfda      	itte	le
 801ca36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ca3a:	fa20 f101 	lsrle.w	r1, r0, r1
 801ca3e:	2101      	movgt	r1, #1
 801ca40:	460a      	mov	r2, r1
 801ca42:	e7e1      	b.n	801ca08 <__ulp+0x18>
 801ca44:	7ff00000 	.word	0x7ff00000

0801ca48 <__b2d>:
 801ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca4a:	6905      	ldr	r5, [r0, #16]
 801ca4c:	f100 0714 	add.w	r7, r0, #20
 801ca50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ca54:	1f2e      	subs	r6, r5, #4
 801ca56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ca5a:	4620      	mov	r0, r4
 801ca5c:	f7ff fd52 	bl	801c504 <__hi0bits>
 801ca60:	f1c0 0320 	rsb	r3, r0, #32
 801ca64:	280a      	cmp	r0, #10
 801ca66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cae4 <__b2d+0x9c>
 801ca6a:	600b      	str	r3, [r1, #0]
 801ca6c:	dc14      	bgt.n	801ca98 <__b2d+0x50>
 801ca6e:	f1c0 0e0b 	rsb	lr, r0, #11
 801ca72:	fa24 f10e 	lsr.w	r1, r4, lr
 801ca76:	42b7      	cmp	r7, r6
 801ca78:	ea41 030c 	orr.w	r3, r1, ip
 801ca7c:	bf34      	ite	cc
 801ca7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ca82:	2100      	movcs	r1, #0
 801ca84:	3015      	adds	r0, #21
 801ca86:	fa04 f000 	lsl.w	r0, r4, r0
 801ca8a:	fa21 f10e 	lsr.w	r1, r1, lr
 801ca8e:	ea40 0201 	orr.w	r2, r0, r1
 801ca92:	ec43 2b10 	vmov	d0, r2, r3
 801ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca98:	42b7      	cmp	r7, r6
 801ca9a:	bf3a      	itte	cc
 801ca9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801caa0:	f1a5 0608 	subcc.w	r6, r5, #8
 801caa4:	2100      	movcs	r1, #0
 801caa6:	380b      	subs	r0, #11
 801caa8:	d017      	beq.n	801cada <__b2d+0x92>
 801caaa:	f1c0 0c20 	rsb	ip, r0, #32
 801caae:	fa04 f500 	lsl.w	r5, r4, r0
 801cab2:	42be      	cmp	r6, r7
 801cab4:	fa21 f40c 	lsr.w	r4, r1, ip
 801cab8:	ea45 0504 	orr.w	r5, r5, r4
 801cabc:	bf8c      	ite	hi
 801cabe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cac2:	2400      	movls	r4, #0
 801cac4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cac8:	fa01 f000 	lsl.w	r0, r1, r0
 801cacc:	fa24 f40c 	lsr.w	r4, r4, ip
 801cad0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cad4:	ea40 0204 	orr.w	r2, r0, r4
 801cad8:	e7db      	b.n	801ca92 <__b2d+0x4a>
 801cada:	ea44 030c 	orr.w	r3, r4, ip
 801cade:	460a      	mov	r2, r1
 801cae0:	e7d7      	b.n	801ca92 <__b2d+0x4a>
 801cae2:	bf00      	nop
 801cae4:	3ff00000 	.word	0x3ff00000

0801cae8 <__d2b>:
 801cae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801caec:	4689      	mov	r9, r1
 801caee:	2101      	movs	r1, #1
 801caf0:	ec57 6b10 	vmov	r6, r7, d0
 801caf4:	4690      	mov	r8, r2
 801caf6:	f7ff fc0f 	bl	801c318 <_Balloc>
 801cafa:	4604      	mov	r4, r0
 801cafc:	b930      	cbnz	r0, 801cb0c <__d2b+0x24>
 801cafe:	4602      	mov	r2, r0
 801cb00:	4b25      	ldr	r3, [pc, #148]	; (801cb98 <__d2b+0xb0>)
 801cb02:	4826      	ldr	r0, [pc, #152]	; (801cb9c <__d2b+0xb4>)
 801cb04:	f240 310a 	movw	r1, #778	; 0x30a
 801cb08:	f000 fa9a 	bl	801d040 <__assert_func>
 801cb0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cb10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cb14:	bb35      	cbnz	r5, 801cb64 <__d2b+0x7c>
 801cb16:	2e00      	cmp	r6, #0
 801cb18:	9301      	str	r3, [sp, #4]
 801cb1a:	d028      	beq.n	801cb6e <__d2b+0x86>
 801cb1c:	4668      	mov	r0, sp
 801cb1e:	9600      	str	r6, [sp, #0]
 801cb20:	f7ff fd10 	bl	801c544 <__lo0bits>
 801cb24:	9900      	ldr	r1, [sp, #0]
 801cb26:	b300      	cbz	r0, 801cb6a <__d2b+0x82>
 801cb28:	9a01      	ldr	r2, [sp, #4]
 801cb2a:	f1c0 0320 	rsb	r3, r0, #32
 801cb2e:	fa02 f303 	lsl.w	r3, r2, r3
 801cb32:	430b      	orrs	r3, r1
 801cb34:	40c2      	lsrs	r2, r0
 801cb36:	6163      	str	r3, [r4, #20]
 801cb38:	9201      	str	r2, [sp, #4]
 801cb3a:	9b01      	ldr	r3, [sp, #4]
 801cb3c:	61a3      	str	r3, [r4, #24]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	bf14      	ite	ne
 801cb42:	2202      	movne	r2, #2
 801cb44:	2201      	moveq	r2, #1
 801cb46:	6122      	str	r2, [r4, #16]
 801cb48:	b1d5      	cbz	r5, 801cb80 <__d2b+0x98>
 801cb4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cb4e:	4405      	add	r5, r0
 801cb50:	f8c9 5000 	str.w	r5, [r9]
 801cb54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cb58:	f8c8 0000 	str.w	r0, [r8]
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	b003      	add	sp, #12
 801cb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb68:	e7d5      	b.n	801cb16 <__d2b+0x2e>
 801cb6a:	6161      	str	r1, [r4, #20]
 801cb6c:	e7e5      	b.n	801cb3a <__d2b+0x52>
 801cb6e:	a801      	add	r0, sp, #4
 801cb70:	f7ff fce8 	bl	801c544 <__lo0bits>
 801cb74:	9b01      	ldr	r3, [sp, #4]
 801cb76:	6163      	str	r3, [r4, #20]
 801cb78:	2201      	movs	r2, #1
 801cb7a:	6122      	str	r2, [r4, #16]
 801cb7c:	3020      	adds	r0, #32
 801cb7e:	e7e3      	b.n	801cb48 <__d2b+0x60>
 801cb80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cb84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cb88:	f8c9 0000 	str.w	r0, [r9]
 801cb8c:	6918      	ldr	r0, [r3, #16]
 801cb8e:	f7ff fcb9 	bl	801c504 <__hi0bits>
 801cb92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cb96:	e7df      	b.n	801cb58 <__d2b+0x70>
 801cb98:	0801f8ec 	.word	0x0801f8ec
 801cb9c:	0801f97c 	.word	0x0801f97c

0801cba0 <__ratio>:
 801cba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba4:	4688      	mov	r8, r1
 801cba6:	4669      	mov	r1, sp
 801cba8:	4681      	mov	r9, r0
 801cbaa:	f7ff ff4d 	bl	801ca48 <__b2d>
 801cbae:	a901      	add	r1, sp, #4
 801cbb0:	4640      	mov	r0, r8
 801cbb2:	ec55 4b10 	vmov	r4, r5, d0
 801cbb6:	f7ff ff47 	bl	801ca48 <__b2d>
 801cbba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cbbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801cbc2:	eba3 0c02 	sub.w	ip, r3, r2
 801cbc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cbca:	1a9b      	subs	r3, r3, r2
 801cbcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801cbd0:	ec51 0b10 	vmov	r0, r1, d0
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	bfd6      	itet	le
 801cbd8:	460a      	movle	r2, r1
 801cbda:	462a      	movgt	r2, r5
 801cbdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801cbe0:	468b      	mov	fp, r1
 801cbe2:	462f      	mov	r7, r5
 801cbe4:	bfd4      	ite	le
 801cbe6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801cbea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801cbee:	4620      	mov	r0, r4
 801cbf0:	ee10 2a10 	vmov	r2, s0
 801cbf4:	465b      	mov	r3, fp
 801cbf6:	4639      	mov	r1, r7
 801cbf8:	f7e3 fe28 	bl	800084c <__aeabi_ddiv>
 801cbfc:	ec41 0b10 	vmov	d0, r0, r1
 801cc00:	b003      	add	sp, #12
 801cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc06 <__copybits>:
 801cc06:	3901      	subs	r1, #1
 801cc08:	b570      	push	{r4, r5, r6, lr}
 801cc0a:	1149      	asrs	r1, r1, #5
 801cc0c:	6914      	ldr	r4, [r2, #16]
 801cc0e:	3101      	adds	r1, #1
 801cc10:	f102 0314 	add.w	r3, r2, #20
 801cc14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cc18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cc1c:	1f05      	subs	r5, r0, #4
 801cc1e:	42a3      	cmp	r3, r4
 801cc20:	d30c      	bcc.n	801cc3c <__copybits+0x36>
 801cc22:	1aa3      	subs	r3, r4, r2
 801cc24:	3b11      	subs	r3, #17
 801cc26:	f023 0303 	bic.w	r3, r3, #3
 801cc2a:	3211      	adds	r2, #17
 801cc2c:	42a2      	cmp	r2, r4
 801cc2e:	bf88      	it	hi
 801cc30:	2300      	movhi	r3, #0
 801cc32:	4418      	add	r0, r3
 801cc34:	2300      	movs	r3, #0
 801cc36:	4288      	cmp	r0, r1
 801cc38:	d305      	bcc.n	801cc46 <__copybits+0x40>
 801cc3a:	bd70      	pop	{r4, r5, r6, pc}
 801cc3c:	f853 6b04 	ldr.w	r6, [r3], #4
 801cc40:	f845 6f04 	str.w	r6, [r5, #4]!
 801cc44:	e7eb      	b.n	801cc1e <__copybits+0x18>
 801cc46:	f840 3b04 	str.w	r3, [r0], #4
 801cc4a:	e7f4      	b.n	801cc36 <__copybits+0x30>

0801cc4c <__any_on>:
 801cc4c:	f100 0214 	add.w	r2, r0, #20
 801cc50:	6900      	ldr	r0, [r0, #16]
 801cc52:	114b      	asrs	r3, r1, #5
 801cc54:	4298      	cmp	r0, r3
 801cc56:	b510      	push	{r4, lr}
 801cc58:	db11      	blt.n	801cc7e <__any_on+0x32>
 801cc5a:	dd0a      	ble.n	801cc72 <__any_on+0x26>
 801cc5c:	f011 011f 	ands.w	r1, r1, #31
 801cc60:	d007      	beq.n	801cc72 <__any_on+0x26>
 801cc62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cc66:	fa24 f001 	lsr.w	r0, r4, r1
 801cc6a:	fa00 f101 	lsl.w	r1, r0, r1
 801cc6e:	428c      	cmp	r4, r1
 801cc70:	d10b      	bne.n	801cc8a <__any_on+0x3e>
 801cc72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc76:	4293      	cmp	r3, r2
 801cc78:	d803      	bhi.n	801cc82 <__any_on+0x36>
 801cc7a:	2000      	movs	r0, #0
 801cc7c:	bd10      	pop	{r4, pc}
 801cc7e:	4603      	mov	r3, r0
 801cc80:	e7f7      	b.n	801cc72 <__any_on+0x26>
 801cc82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cc86:	2900      	cmp	r1, #0
 801cc88:	d0f5      	beq.n	801cc76 <__any_on+0x2a>
 801cc8a:	2001      	movs	r0, #1
 801cc8c:	e7f6      	b.n	801cc7c <__any_on+0x30>

0801cc8e <_calloc_r>:
 801cc8e:	b513      	push	{r0, r1, r4, lr}
 801cc90:	434a      	muls	r2, r1
 801cc92:	4611      	mov	r1, r2
 801cc94:	9201      	str	r2, [sp, #4]
 801cc96:	f7fc fa51 	bl	801913c <_malloc_r>
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	b118      	cbz	r0, 801cca6 <_calloc_r+0x18>
 801cc9e:	9a01      	ldr	r2, [sp, #4]
 801cca0:	2100      	movs	r1, #0
 801cca2:	f7fc f9f3 	bl	801908c <memset>
 801cca6:	4620      	mov	r0, r4
 801cca8:	b002      	add	sp, #8
 801ccaa:	bd10      	pop	{r4, pc}

0801ccac <_realloc_r>:
 801ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccae:	4607      	mov	r7, r0
 801ccb0:	4614      	mov	r4, r2
 801ccb2:	460e      	mov	r6, r1
 801ccb4:	b921      	cbnz	r1, 801ccc0 <_realloc_r+0x14>
 801ccb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ccba:	4611      	mov	r1, r2
 801ccbc:	f7fc ba3e 	b.w	801913c <_malloc_r>
 801ccc0:	b922      	cbnz	r2, 801cccc <_realloc_r+0x20>
 801ccc2:	f7fc f9eb 	bl	801909c <_free_r>
 801ccc6:	4625      	mov	r5, r4
 801ccc8:	4628      	mov	r0, r5
 801ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cccc:	f000 fbbc 	bl	801d448 <_malloc_usable_size_r>
 801ccd0:	42a0      	cmp	r0, r4
 801ccd2:	d20f      	bcs.n	801ccf4 <_realloc_r+0x48>
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	4638      	mov	r0, r7
 801ccd8:	f7fc fa30 	bl	801913c <_malloc_r>
 801ccdc:	4605      	mov	r5, r0
 801ccde:	2800      	cmp	r0, #0
 801cce0:	d0f2      	beq.n	801ccc8 <_realloc_r+0x1c>
 801cce2:	4631      	mov	r1, r6
 801cce4:	4622      	mov	r2, r4
 801cce6:	f7fc f9c3 	bl	8019070 <memcpy>
 801ccea:	4631      	mov	r1, r6
 801ccec:	4638      	mov	r0, r7
 801ccee:	f7fc f9d5 	bl	801909c <_free_r>
 801ccf2:	e7e9      	b.n	801ccc8 <_realloc_r+0x1c>
 801ccf4:	4635      	mov	r5, r6
 801ccf6:	e7e7      	b.n	801ccc8 <_realloc_r+0x1c>

0801ccf8 <__ssputs_r>:
 801ccf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccfc:	688e      	ldr	r6, [r1, #8]
 801ccfe:	429e      	cmp	r6, r3
 801cd00:	4682      	mov	sl, r0
 801cd02:	460c      	mov	r4, r1
 801cd04:	4690      	mov	r8, r2
 801cd06:	461f      	mov	r7, r3
 801cd08:	d838      	bhi.n	801cd7c <__ssputs_r+0x84>
 801cd0a:	898a      	ldrh	r2, [r1, #12]
 801cd0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cd10:	d032      	beq.n	801cd78 <__ssputs_r+0x80>
 801cd12:	6825      	ldr	r5, [r4, #0]
 801cd14:	6909      	ldr	r1, [r1, #16]
 801cd16:	eba5 0901 	sub.w	r9, r5, r1
 801cd1a:	6965      	ldr	r5, [r4, #20]
 801cd1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cd24:	3301      	adds	r3, #1
 801cd26:	444b      	add	r3, r9
 801cd28:	106d      	asrs	r5, r5, #1
 801cd2a:	429d      	cmp	r5, r3
 801cd2c:	bf38      	it	cc
 801cd2e:	461d      	movcc	r5, r3
 801cd30:	0553      	lsls	r3, r2, #21
 801cd32:	d531      	bpl.n	801cd98 <__ssputs_r+0xa0>
 801cd34:	4629      	mov	r1, r5
 801cd36:	f7fc fa01 	bl	801913c <_malloc_r>
 801cd3a:	4606      	mov	r6, r0
 801cd3c:	b950      	cbnz	r0, 801cd54 <__ssputs_r+0x5c>
 801cd3e:	230c      	movs	r3, #12
 801cd40:	f8ca 3000 	str.w	r3, [sl]
 801cd44:	89a3      	ldrh	r3, [r4, #12]
 801cd46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd4a:	81a3      	strh	r3, [r4, #12]
 801cd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd54:	6921      	ldr	r1, [r4, #16]
 801cd56:	464a      	mov	r2, r9
 801cd58:	f7fc f98a 	bl	8019070 <memcpy>
 801cd5c:	89a3      	ldrh	r3, [r4, #12]
 801cd5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cd62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd66:	81a3      	strh	r3, [r4, #12]
 801cd68:	6126      	str	r6, [r4, #16]
 801cd6a:	6165      	str	r5, [r4, #20]
 801cd6c:	444e      	add	r6, r9
 801cd6e:	eba5 0509 	sub.w	r5, r5, r9
 801cd72:	6026      	str	r6, [r4, #0]
 801cd74:	60a5      	str	r5, [r4, #8]
 801cd76:	463e      	mov	r6, r7
 801cd78:	42be      	cmp	r6, r7
 801cd7a:	d900      	bls.n	801cd7e <__ssputs_r+0x86>
 801cd7c:	463e      	mov	r6, r7
 801cd7e:	4632      	mov	r2, r6
 801cd80:	6820      	ldr	r0, [r4, #0]
 801cd82:	4641      	mov	r1, r8
 801cd84:	f000 fb46 	bl	801d414 <memmove>
 801cd88:	68a3      	ldr	r3, [r4, #8]
 801cd8a:	6822      	ldr	r2, [r4, #0]
 801cd8c:	1b9b      	subs	r3, r3, r6
 801cd8e:	4432      	add	r2, r6
 801cd90:	60a3      	str	r3, [r4, #8]
 801cd92:	6022      	str	r2, [r4, #0]
 801cd94:	2000      	movs	r0, #0
 801cd96:	e7db      	b.n	801cd50 <__ssputs_r+0x58>
 801cd98:	462a      	mov	r2, r5
 801cd9a:	f7ff ff87 	bl	801ccac <_realloc_r>
 801cd9e:	4606      	mov	r6, r0
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d1e1      	bne.n	801cd68 <__ssputs_r+0x70>
 801cda4:	6921      	ldr	r1, [r4, #16]
 801cda6:	4650      	mov	r0, sl
 801cda8:	f7fc f978 	bl	801909c <_free_r>
 801cdac:	e7c7      	b.n	801cd3e <__ssputs_r+0x46>
	...

0801cdb0 <_svfiprintf_r>:
 801cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb4:	4698      	mov	r8, r3
 801cdb6:	898b      	ldrh	r3, [r1, #12]
 801cdb8:	061b      	lsls	r3, r3, #24
 801cdba:	b09d      	sub	sp, #116	; 0x74
 801cdbc:	4607      	mov	r7, r0
 801cdbe:	460d      	mov	r5, r1
 801cdc0:	4614      	mov	r4, r2
 801cdc2:	d50e      	bpl.n	801cde2 <_svfiprintf_r+0x32>
 801cdc4:	690b      	ldr	r3, [r1, #16]
 801cdc6:	b963      	cbnz	r3, 801cde2 <_svfiprintf_r+0x32>
 801cdc8:	2140      	movs	r1, #64	; 0x40
 801cdca:	f7fc f9b7 	bl	801913c <_malloc_r>
 801cdce:	6028      	str	r0, [r5, #0]
 801cdd0:	6128      	str	r0, [r5, #16]
 801cdd2:	b920      	cbnz	r0, 801cdde <_svfiprintf_r+0x2e>
 801cdd4:	230c      	movs	r3, #12
 801cdd6:	603b      	str	r3, [r7, #0]
 801cdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cddc:	e0d1      	b.n	801cf82 <_svfiprintf_r+0x1d2>
 801cdde:	2340      	movs	r3, #64	; 0x40
 801cde0:	616b      	str	r3, [r5, #20]
 801cde2:	2300      	movs	r3, #0
 801cde4:	9309      	str	r3, [sp, #36]	; 0x24
 801cde6:	2320      	movs	r3, #32
 801cde8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cdec:	f8cd 800c 	str.w	r8, [sp, #12]
 801cdf0:	2330      	movs	r3, #48	; 0x30
 801cdf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801cf9c <_svfiprintf_r+0x1ec>
 801cdf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cdfa:	f04f 0901 	mov.w	r9, #1
 801cdfe:	4623      	mov	r3, r4
 801ce00:	469a      	mov	sl, r3
 801ce02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce06:	b10a      	cbz	r2, 801ce0c <_svfiprintf_r+0x5c>
 801ce08:	2a25      	cmp	r2, #37	; 0x25
 801ce0a:	d1f9      	bne.n	801ce00 <_svfiprintf_r+0x50>
 801ce0c:	ebba 0b04 	subs.w	fp, sl, r4
 801ce10:	d00b      	beq.n	801ce2a <_svfiprintf_r+0x7a>
 801ce12:	465b      	mov	r3, fp
 801ce14:	4622      	mov	r2, r4
 801ce16:	4629      	mov	r1, r5
 801ce18:	4638      	mov	r0, r7
 801ce1a:	f7ff ff6d 	bl	801ccf8 <__ssputs_r>
 801ce1e:	3001      	adds	r0, #1
 801ce20:	f000 80aa 	beq.w	801cf78 <_svfiprintf_r+0x1c8>
 801ce24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce26:	445a      	add	r2, fp
 801ce28:	9209      	str	r2, [sp, #36]	; 0x24
 801ce2a:	f89a 3000 	ldrb.w	r3, [sl]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	f000 80a2 	beq.w	801cf78 <_svfiprintf_r+0x1c8>
 801ce34:	2300      	movs	r3, #0
 801ce36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ce3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ce3e:	f10a 0a01 	add.w	sl, sl, #1
 801ce42:	9304      	str	r3, [sp, #16]
 801ce44:	9307      	str	r3, [sp, #28]
 801ce46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ce4a:	931a      	str	r3, [sp, #104]	; 0x68
 801ce4c:	4654      	mov	r4, sl
 801ce4e:	2205      	movs	r2, #5
 801ce50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce54:	4851      	ldr	r0, [pc, #324]	; (801cf9c <_svfiprintf_r+0x1ec>)
 801ce56:	f7e3 f9c3 	bl	80001e0 <memchr>
 801ce5a:	9a04      	ldr	r2, [sp, #16]
 801ce5c:	b9d8      	cbnz	r0, 801ce96 <_svfiprintf_r+0xe6>
 801ce5e:	06d0      	lsls	r0, r2, #27
 801ce60:	bf44      	itt	mi
 801ce62:	2320      	movmi	r3, #32
 801ce64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ce68:	0711      	lsls	r1, r2, #28
 801ce6a:	bf44      	itt	mi
 801ce6c:	232b      	movmi	r3, #43	; 0x2b
 801ce6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ce72:	f89a 3000 	ldrb.w	r3, [sl]
 801ce76:	2b2a      	cmp	r3, #42	; 0x2a
 801ce78:	d015      	beq.n	801cea6 <_svfiprintf_r+0xf6>
 801ce7a:	9a07      	ldr	r2, [sp, #28]
 801ce7c:	4654      	mov	r4, sl
 801ce7e:	2000      	movs	r0, #0
 801ce80:	f04f 0c0a 	mov.w	ip, #10
 801ce84:	4621      	mov	r1, r4
 801ce86:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce8a:	3b30      	subs	r3, #48	; 0x30
 801ce8c:	2b09      	cmp	r3, #9
 801ce8e:	d94e      	bls.n	801cf2e <_svfiprintf_r+0x17e>
 801ce90:	b1b0      	cbz	r0, 801cec0 <_svfiprintf_r+0x110>
 801ce92:	9207      	str	r2, [sp, #28]
 801ce94:	e014      	b.n	801cec0 <_svfiprintf_r+0x110>
 801ce96:	eba0 0308 	sub.w	r3, r0, r8
 801ce9a:	fa09 f303 	lsl.w	r3, r9, r3
 801ce9e:	4313      	orrs	r3, r2
 801cea0:	9304      	str	r3, [sp, #16]
 801cea2:	46a2      	mov	sl, r4
 801cea4:	e7d2      	b.n	801ce4c <_svfiprintf_r+0x9c>
 801cea6:	9b03      	ldr	r3, [sp, #12]
 801cea8:	1d19      	adds	r1, r3, #4
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	9103      	str	r1, [sp, #12]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	bfbb      	ittet	lt
 801ceb2:	425b      	neglt	r3, r3
 801ceb4:	f042 0202 	orrlt.w	r2, r2, #2
 801ceb8:	9307      	strge	r3, [sp, #28]
 801ceba:	9307      	strlt	r3, [sp, #28]
 801cebc:	bfb8      	it	lt
 801cebe:	9204      	strlt	r2, [sp, #16]
 801cec0:	7823      	ldrb	r3, [r4, #0]
 801cec2:	2b2e      	cmp	r3, #46	; 0x2e
 801cec4:	d10c      	bne.n	801cee0 <_svfiprintf_r+0x130>
 801cec6:	7863      	ldrb	r3, [r4, #1]
 801cec8:	2b2a      	cmp	r3, #42	; 0x2a
 801ceca:	d135      	bne.n	801cf38 <_svfiprintf_r+0x188>
 801cecc:	9b03      	ldr	r3, [sp, #12]
 801cece:	1d1a      	adds	r2, r3, #4
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	9203      	str	r2, [sp, #12]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	bfb8      	it	lt
 801ced8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cedc:	3402      	adds	r4, #2
 801cede:	9305      	str	r3, [sp, #20]
 801cee0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801cfac <_svfiprintf_r+0x1fc>
 801cee4:	7821      	ldrb	r1, [r4, #0]
 801cee6:	2203      	movs	r2, #3
 801cee8:	4650      	mov	r0, sl
 801ceea:	f7e3 f979 	bl	80001e0 <memchr>
 801ceee:	b140      	cbz	r0, 801cf02 <_svfiprintf_r+0x152>
 801cef0:	2340      	movs	r3, #64	; 0x40
 801cef2:	eba0 000a 	sub.w	r0, r0, sl
 801cef6:	fa03 f000 	lsl.w	r0, r3, r0
 801cefa:	9b04      	ldr	r3, [sp, #16]
 801cefc:	4303      	orrs	r3, r0
 801cefe:	3401      	adds	r4, #1
 801cf00:	9304      	str	r3, [sp, #16]
 801cf02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf06:	4826      	ldr	r0, [pc, #152]	; (801cfa0 <_svfiprintf_r+0x1f0>)
 801cf08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf0c:	2206      	movs	r2, #6
 801cf0e:	f7e3 f967 	bl	80001e0 <memchr>
 801cf12:	2800      	cmp	r0, #0
 801cf14:	d038      	beq.n	801cf88 <_svfiprintf_r+0x1d8>
 801cf16:	4b23      	ldr	r3, [pc, #140]	; (801cfa4 <_svfiprintf_r+0x1f4>)
 801cf18:	bb1b      	cbnz	r3, 801cf62 <_svfiprintf_r+0x1b2>
 801cf1a:	9b03      	ldr	r3, [sp, #12]
 801cf1c:	3307      	adds	r3, #7
 801cf1e:	f023 0307 	bic.w	r3, r3, #7
 801cf22:	3308      	adds	r3, #8
 801cf24:	9303      	str	r3, [sp, #12]
 801cf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf28:	4433      	add	r3, r6
 801cf2a:	9309      	str	r3, [sp, #36]	; 0x24
 801cf2c:	e767      	b.n	801cdfe <_svfiprintf_r+0x4e>
 801cf2e:	fb0c 3202 	mla	r2, ip, r2, r3
 801cf32:	460c      	mov	r4, r1
 801cf34:	2001      	movs	r0, #1
 801cf36:	e7a5      	b.n	801ce84 <_svfiprintf_r+0xd4>
 801cf38:	2300      	movs	r3, #0
 801cf3a:	3401      	adds	r4, #1
 801cf3c:	9305      	str	r3, [sp, #20]
 801cf3e:	4619      	mov	r1, r3
 801cf40:	f04f 0c0a 	mov.w	ip, #10
 801cf44:	4620      	mov	r0, r4
 801cf46:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf4a:	3a30      	subs	r2, #48	; 0x30
 801cf4c:	2a09      	cmp	r2, #9
 801cf4e:	d903      	bls.n	801cf58 <_svfiprintf_r+0x1a8>
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d0c5      	beq.n	801cee0 <_svfiprintf_r+0x130>
 801cf54:	9105      	str	r1, [sp, #20]
 801cf56:	e7c3      	b.n	801cee0 <_svfiprintf_r+0x130>
 801cf58:	fb0c 2101 	mla	r1, ip, r1, r2
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	2301      	movs	r3, #1
 801cf60:	e7f0      	b.n	801cf44 <_svfiprintf_r+0x194>
 801cf62:	ab03      	add	r3, sp, #12
 801cf64:	9300      	str	r3, [sp, #0]
 801cf66:	462a      	mov	r2, r5
 801cf68:	4b0f      	ldr	r3, [pc, #60]	; (801cfa8 <_svfiprintf_r+0x1f8>)
 801cf6a:	a904      	add	r1, sp, #16
 801cf6c:	4638      	mov	r0, r7
 801cf6e:	f7fc f9df 	bl	8019330 <_printf_float>
 801cf72:	1c42      	adds	r2, r0, #1
 801cf74:	4606      	mov	r6, r0
 801cf76:	d1d6      	bne.n	801cf26 <_svfiprintf_r+0x176>
 801cf78:	89ab      	ldrh	r3, [r5, #12]
 801cf7a:	065b      	lsls	r3, r3, #25
 801cf7c:	f53f af2c 	bmi.w	801cdd8 <_svfiprintf_r+0x28>
 801cf80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf82:	b01d      	add	sp, #116	; 0x74
 801cf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf88:	ab03      	add	r3, sp, #12
 801cf8a:	9300      	str	r3, [sp, #0]
 801cf8c:	462a      	mov	r2, r5
 801cf8e:	4b06      	ldr	r3, [pc, #24]	; (801cfa8 <_svfiprintf_r+0x1f8>)
 801cf90:	a904      	add	r1, sp, #16
 801cf92:	4638      	mov	r0, r7
 801cf94:	f7fc fc70 	bl	8019878 <_printf_i>
 801cf98:	e7eb      	b.n	801cf72 <_svfiprintf_r+0x1c2>
 801cf9a:	bf00      	nop
 801cf9c:	0801fadc 	.word	0x0801fadc
 801cfa0:	0801fae6 	.word	0x0801fae6
 801cfa4:	08019331 	.word	0x08019331
 801cfa8:	0801ccf9 	.word	0x0801ccf9
 801cfac:	0801fae2 	.word	0x0801fae2

0801cfb0 <_read_r>:
 801cfb0:	b538      	push	{r3, r4, r5, lr}
 801cfb2:	4d07      	ldr	r5, [pc, #28]	; (801cfd0 <_read_r+0x20>)
 801cfb4:	4604      	mov	r4, r0
 801cfb6:	4608      	mov	r0, r1
 801cfb8:	4611      	mov	r1, r2
 801cfba:	2200      	movs	r2, #0
 801cfbc:	602a      	str	r2, [r5, #0]
 801cfbe:	461a      	mov	r2, r3
 801cfc0:	f7ef fc3c 	bl	800c83c <_read>
 801cfc4:	1c43      	adds	r3, r0, #1
 801cfc6:	d102      	bne.n	801cfce <_read_r+0x1e>
 801cfc8:	682b      	ldr	r3, [r5, #0]
 801cfca:	b103      	cbz	r3, 801cfce <_read_r+0x1e>
 801cfcc:	6023      	str	r3, [r4, #0]
 801cfce:	bd38      	pop	{r3, r4, r5, pc}
 801cfd0:	2000a9bc 	.word	0x2000a9bc
 801cfd4:	00000000 	.word	0x00000000

0801cfd8 <nan>:
 801cfd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cfe0 <nan+0x8>
 801cfdc:	4770      	bx	lr
 801cfde:	bf00      	nop
 801cfe0:	00000000 	.word	0x00000000
 801cfe4:	7ff80000 	.word	0x7ff80000

0801cfe8 <finitef>:
 801cfe8:	b082      	sub	sp, #8
 801cfea:	ed8d 0a01 	vstr	s0, [sp, #4]
 801cfee:	9801      	ldr	r0, [sp, #4]
 801cff0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cff4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801cff8:	bfac      	ite	ge
 801cffa:	2000      	movge	r0, #0
 801cffc:	2001      	movlt	r0, #1
 801cffe:	b002      	add	sp, #8
 801d000:	4770      	bx	lr

0801d002 <strncmp>:
 801d002:	b510      	push	{r4, lr}
 801d004:	b16a      	cbz	r2, 801d022 <strncmp+0x20>
 801d006:	3901      	subs	r1, #1
 801d008:	1884      	adds	r4, r0, r2
 801d00a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d00e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d012:	4293      	cmp	r3, r2
 801d014:	d103      	bne.n	801d01e <strncmp+0x1c>
 801d016:	42a0      	cmp	r0, r4
 801d018:	d001      	beq.n	801d01e <strncmp+0x1c>
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d1f5      	bne.n	801d00a <strncmp+0x8>
 801d01e:	1a98      	subs	r0, r3, r2
 801d020:	bd10      	pop	{r4, pc}
 801d022:	4610      	mov	r0, r2
 801d024:	e7fc      	b.n	801d020 <strncmp+0x1e>

0801d026 <__ascii_wctomb>:
 801d026:	b149      	cbz	r1, 801d03c <__ascii_wctomb+0x16>
 801d028:	2aff      	cmp	r2, #255	; 0xff
 801d02a:	bf85      	ittet	hi
 801d02c:	238a      	movhi	r3, #138	; 0x8a
 801d02e:	6003      	strhi	r3, [r0, #0]
 801d030:	700a      	strbls	r2, [r1, #0]
 801d032:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d036:	bf98      	it	ls
 801d038:	2001      	movls	r0, #1
 801d03a:	4770      	bx	lr
 801d03c:	4608      	mov	r0, r1
 801d03e:	4770      	bx	lr

0801d040 <__assert_func>:
 801d040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d042:	4614      	mov	r4, r2
 801d044:	461a      	mov	r2, r3
 801d046:	4b09      	ldr	r3, [pc, #36]	; (801d06c <__assert_func+0x2c>)
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	4605      	mov	r5, r0
 801d04c:	68d8      	ldr	r0, [r3, #12]
 801d04e:	b14c      	cbz	r4, 801d064 <__assert_func+0x24>
 801d050:	4b07      	ldr	r3, [pc, #28]	; (801d070 <__assert_func+0x30>)
 801d052:	9100      	str	r1, [sp, #0]
 801d054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d058:	4906      	ldr	r1, [pc, #24]	; (801d074 <__assert_func+0x34>)
 801d05a:	462b      	mov	r3, r5
 801d05c:	f000 f9a6 	bl	801d3ac <fiprintf>
 801d060:	f000 fc14 	bl	801d88c <abort>
 801d064:	4b04      	ldr	r3, [pc, #16]	; (801d078 <__assert_func+0x38>)
 801d066:	461c      	mov	r4, r3
 801d068:	e7f3      	b.n	801d052 <__assert_func+0x12>
 801d06a:	bf00      	nop
 801d06c:	20000048 	.word	0x20000048
 801d070:	0801faed 	.word	0x0801faed
 801d074:	0801fafa 	.word	0x0801fafa
 801d078:	0801fb28 	.word	0x0801fb28

0801d07c <__sflush_r>:
 801d07c:	898a      	ldrh	r2, [r1, #12]
 801d07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d082:	4605      	mov	r5, r0
 801d084:	0710      	lsls	r0, r2, #28
 801d086:	460c      	mov	r4, r1
 801d088:	d458      	bmi.n	801d13c <__sflush_r+0xc0>
 801d08a:	684b      	ldr	r3, [r1, #4]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	dc05      	bgt.n	801d09c <__sflush_r+0x20>
 801d090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d092:	2b00      	cmp	r3, #0
 801d094:	dc02      	bgt.n	801d09c <__sflush_r+0x20>
 801d096:	2000      	movs	r0, #0
 801d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d09e:	2e00      	cmp	r6, #0
 801d0a0:	d0f9      	beq.n	801d096 <__sflush_r+0x1a>
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d0a8:	682f      	ldr	r7, [r5, #0]
 801d0aa:	602b      	str	r3, [r5, #0]
 801d0ac:	d032      	beq.n	801d114 <__sflush_r+0x98>
 801d0ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d0b0:	89a3      	ldrh	r3, [r4, #12]
 801d0b2:	075a      	lsls	r2, r3, #29
 801d0b4:	d505      	bpl.n	801d0c2 <__sflush_r+0x46>
 801d0b6:	6863      	ldr	r3, [r4, #4]
 801d0b8:	1ac0      	subs	r0, r0, r3
 801d0ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d0bc:	b10b      	cbz	r3, 801d0c2 <__sflush_r+0x46>
 801d0be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d0c0:	1ac0      	subs	r0, r0, r3
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	4602      	mov	r2, r0
 801d0c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0c8:	6a21      	ldr	r1, [r4, #32]
 801d0ca:	4628      	mov	r0, r5
 801d0cc:	47b0      	blx	r6
 801d0ce:	1c43      	adds	r3, r0, #1
 801d0d0:	89a3      	ldrh	r3, [r4, #12]
 801d0d2:	d106      	bne.n	801d0e2 <__sflush_r+0x66>
 801d0d4:	6829      	ldr	r1, [r5, #0]
 801d0d6:	291d      	cmp	r1, #29
 801d0d8:	d82c      	bhi.n	801d134 <__sflush_r+0xb8>
 801d0da:	4a2a      	ldr	r2, [pc, #168]	; (801d184 <__sflush_r+0x108>)
 801d0dc:	40ca      	lsrs	r2, r1
 801d0de:	07d6      	lsls	r6, r2, #31
 801d0e0:	d528      	bpl.n	801d134 <__sflush_r+0xb8>
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	6062      	str	r2, [r4, #4]
 801d0e6:	04d9      	lsls	r1, r3, #19
 801d0e8:	6922      	ldr	r2, [r4, #16]
 801d0ea:	6022      	str	r2, [r4, #0]
 801d0ec:	d504      	bpl.n	801d0f8 <__sflush_r+0x7c>
 801d0ee:	1c42      	adds	r2, r0, #1
 801d0f0:	d101      	bne.n	801d0f6 <__sflush_r+0x7a>
 801d0f2:	682b      	ldr	r3, [r5, #0]
 801d0f4:	b903      	cbnz	r3, 801d0f8 <__sflush_r+0x7c>
 801d0f6:	6560      	str	r0, [r4, #84]	; 0x54
 801d0f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d0fa:	602f      	str	r7, [r5, #0]
 801d0fc:	2900      	cmp	r1, #0
 801d0fe:	d0ca      	beq.n	801d096 <__sflush_r+0x1a>
 801d100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d104:	4299      	cmp	r1, r3
 801d106:	d002      	beq.n	801d10e <__sflush_r+0x92>
 801d108:	4628      	mov	r0, r5
 801d10a:	f7fb ffc7 	bl	801909c <_free_r>
 801d10e:	2000      	movs	r0, #0
 801d110:	6360      	str	r0, [r4, #52]	; 0x34
 801d112:	e7c1      	b.n	801d098 <__sflush_r+0x1c>
 801d114:	6a21      	ldr	r1, [r4, #32]
 801d116:	2301      	movs	r3, #1
 801d118:	4628      	mov	r0, r5
 801d11a:	47b0      	blx	r6
 801d11c:	1c41      	adds	r1, r0, #1
 801d11e:	d1c7      	bne.n	801d0b0 <__sflush_r+0x34>
 801d120:	682b      	ldr	r3, [r5, #0]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d0c4      	beq.n	801d0b0 <__sflush_r+0x34>
 801d126:	2b1d      	cmp	r3, #29
 801d128:	d001      	beq.n	801d12e <__sflush_r+0xb2>
 801d12a:	2b16      	cmp	r3, #22
 801d12c:	d101      	bne.n	801d132 <__sflush_r+0xb6>
 801d12e:	602f      	str	r7, [r5, #0]
 801d130:	e7b1      	b.n	801d096 <__sflush_r+0x1a>
 801d132:	89a3      	ldrh	r3, [r4, #12]
 801d134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d138:	81a3      	strh	r3, [r4, #12]
 801d13a:	e7ad      	b.n	801d098 <__sflush_r+0x1c>
 801d13c:	690f      	ldr	r7, [r1, #16]
 801d13e:	2f00      	cmp	r7, #0
 801d140:	d0a9      	beq.n	801d096 <__sflush_r+0x1a>
 801d142:	0793      	lsls	r3, r2, #30
 801d144:	680e      	ldr	r6, [r1, #0]
 801d146:	bf08      	it	eq
 801d148:	694b      	ldreq	r3, [r1, #20]
 801d14a:	600f      	str	r7, [r1, #0]
 801d14c:	bf18      	it	ne
 801d14e:	2300      	movne	r3, #0
 801d150:	eba6 0807 	sub.w	r8, r6, r7
 801d154:	608b      	str	r3, [r1, #8]
 801d156:	f1b8 0f00 	cmp.w	r8, #0
 801d15a:	dd9c      	ble.n	801d096 <__sflush_r+0x1a>
 801d15c:	6a21      	ldr	r1, [r4, #32]
 801d15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d160:	4643      	mov	r3, r8
 801d162:	463a      	mov	r2, r7
 801d164:	4628      	mov	r0, r5
 801d166:	47b0      	blx	r6
 801d168:	2800      	cmp	r0, #0
 801d16a:	dc06      	bgt.n	801d17a <__sflush_r+0xfe>
 801d16c:	89a3      	ldrh	r3, [r4, #12]
 801d16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d172:	81a3      	strh	r3, [r4, #12]
 801d174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d178:	e78e      	b.n	801d098 <__sflush_r+0x1c>
 801d17a:	4407      	add	r7, r0
 801d17c:	eba8 0800 	sub.w	r8, r8, r0
 801d180:	e7e9      	b.n	801d156 <__sflush_r+0xda>
 801d182:	bf00      	nop
 801d184:	20400001 	.word	0x20400001

0801d188 <_fflush_r>:
 801d188:	b538      	push	{r3, r4, r5, lr}
 801d18a:	690b      	ldr	r3, [r1, #16]
 801d18c:	4605      	mov	r5, r0
 801d18e:	460c      	mov	r4, r1
 801d190:	b913      	cbnz	r3, 801d198 <_fflush_r+0x10>
 801d192:	2500      	movs	r5, #0
 801d194:	4628      	mov	r0, r5
 801d196:	bd38      	pop	{r3, r4, r5, pc}
 801d198:	b118      	cbz	r0, 801d1a2 <_fflush_r+0x1a>
 801d19a:	6983      	ldr	r3, [r0, #24]
 801d19c:	b90b      	cbnz	r3, 801d1a2 <_fflush_r+0x1a>
 801d19e:	f000 f887 	bl	801d2b0 <__sinit>
 801d1a2:	4b14      	ldr	r3, [pc, #80]	; (801d1f4 <_fflush_r+0x6c>)
 801d1a4:	429c      	cmp	r4, r3
 801d1a6:	d11b      	bne.n	801d1e0 <_fflush_r+0x58>
 801d1a8:	686c      	ldr	r4, [r5, #4]
 801d1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d0ef      	beq.n	801d192 <_fflush_r+0xa>
 801d1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d1b4:	07d0      	lsls	r0, r2, #31
 801d1b6:	d404      	bmi.n	801d1c2 <_fflush_r+0x3a>
 801d1b8:	0599      	lsls	r1, r3, #22
 801d1ba:	d402      	bmi.n	801d1c2 <_fflush_r+0x3a>
 801d1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1be:	f000 f927 	bl	801d410 <__retarget_lock_acquire_recursive>
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	4621      	mov	r1, r4
 801d1c6:	f7ff ff59 	bl	801d07c <__sflush_r>
 801d1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1cc:	07da      	lsls	r2, r3, #31
 801d1ce:	4605      	mov	r5, r0
 801d1d0:	d4e0      	bmi.n	801d194 <_fflush_r+0xc>
 801d1d2:	89a3      	ldrh	r3, [r4, #12]
 801d1d4:	059b      	lsls	r3, r3, #22
 801d1d6:	d4dd      	bmi.n	801d194 <_fflush_r+0xc>
 801d1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1da:	f000 f91a 	bl	801d412 <__retarget_lock_release_recursive>
 801d1de:	e7d9      	b.n	801d194 <_fflush_r+0xc>
 801d1e0:	4b05      	ldr	r3, [pc, #20]	; (801d1f8 <_fflush_r+0x70>)
 801d1e2:	429c      	cmp	r4, r3
 801d1e4:	d101      	bne.n	801d1ea <_fflush_r+0x62>
 801d1e6:	68ac      	ldr	r4, [r5, #8]
 801d1e8:	e7df      	b.n	801d1aa <_fflush_r+0x22>
 801d1ea:	4b04      	ldr	r3, [pc, #16]	; (801d1fc <_fflush_r+0x74>)
 801d1ec:	429c      	cmp	r4, r3
 801d1ee:	bf08      	it	eq
 801d1f0:	68ec      	ldreq	r4, [r5, #12]
 801d1f2:	e7da      	b.n	801d1aa <_fflush_r+0x22>
 801d1f4:	0801fb4c 	.word	0x0801fb4c
 801d1f8:	0801fb6c 	.word	0x0801fb6c
 801d1fc:	0801fb2c 	.word	0x0801fb2c

0801d200 <std>:
 801d200:	2300      	movs	r3, #0
 801d202:	b510      	push	{r4, lr}
 801d204:	4604      	mov	r4, r0
 801d206:	e9c0 3300 	strd	r3, r3, [r0]
 801d20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d20e:	6083      	str	r3, [r0, #8]
 801d210:	8181      	strh	r1, [r0, #12]
 801d212:	6643      	str	r3, [r0, #100]	; 0x64
 801d214:	81c2      	strh	r2, [r0, #14]
 801d216:	6183      	str	r3, [r0, #24]
 801d218:	4619      	mov	r1, r3
 801d21a:	2208      	movs	r2, #8
 801d21c:	305c      	adds	r0, #92	; 0x5c
 801d21e:	f7fb ff35 	bl	801908c <memset>
 801d222:	4b05      	ldr	r3, [pc, #20]	; (801d238 <std+0x38>)
 801d224:	6263      	str	r3, [r4, #36]	; 0x24
 801d226:	4b05      	ldr	r3, [pc, #20]	; (801d23c <std+0x3c>)
 801d228:	62a3      	str	r3, [r4, #40]	; 0x28
 801d22a:	4b05      	ldr	r3, [pc, #20]	; (801d240 <std+0x40>)
 801d22c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d22e:	4b05      	ldr	r3, [pc, #20]	; (801d244 <std+0x44>)
 801d230:	6224      	str	r4, [r4, #32]
 801d232:	6323      	str	r3, [r4, #48]	; 0x30
 801d234:	bd10      	pop	{r4, pc}
 801d236:	bf00      	nop
 801d238:	0801a091 	.word	0x0801a091
 801d23c:	0801a0b3 	.word	0x0801a0b3
 801d240:	0801a0eb 	.word	0x0801a0eb
 801d244:	0801a10f 	.word	0x0801a10f

0801d248 <_cleanup_r>:
 801d248:	4901      	ldr	r1, [pc, #4]	; (801d250 <_cleanup_r+0x8>)
 801d24a:	f000 b8c1 	b.w	801d3d0 <_fwalk_reent>
 801d24e:	bf00      	nop
 801d250:	0801d189 	.word	0x0801d189

0801d254 <__sfmoreglue>:
 801d254:	b570      	push	{r4, r5, r6, lr}
 801d256:	1e4a      	subs	r2, r1, #1
 801d258:	2568      	movs	r5, #104	; 0x68
 801d25a:	4355      	muls	r5, r2
 801d25c:	460e      	mov	r6, r1
 801d25e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d262:	f7fb ff6b 	bl	801913c <_malloc_r>
 801d266:	4604      	mov	r4, r0
 801d268:	b140      	cbz	r0, 801d27c <__sfmoreglue+0x28>
 801d26a:	2100      	movs	r1, #0
 801d26c:	e9c0 1600 	strd	r1, r6, [r0]
 801d270:	300c      	adds	r0, #12
 801d272:	60a0      	str	r0, [r4, #8]
 801d274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d278:	f7fb ff08 	bl	801908c <memset>
 801d27c:	4620      	mov	r0, r4
 801d27e:	bd70      	pop	{r4, r5, r6, pc}

0801d280 <__sfp_lock_acquire>:
 801d280:	4801      	ldr	r0, [pc, #4]	; (801d288 <__sfp_lock_acquire+0x8>)
 801d282:	f000 b8c5 	b.w	801d410 <__retarget_lock_acquire_recursive>
 801d286:	bf00      	nop
 801d288:	2000a9c8 	.word	0x2000a9c8

0801d28c <__sfp_lock_release>:
 801d28c:	4801      	ldr	r0, [pc, #4]	; (801d294 <__sfp_lock_release+0x8>)
 801d28e:	f000 b8c0 	b.w	801d412 <__retarget_lock_release_recursive>
 801d292:	bf00      	nop
 801d294:	2000a9c8 	.word	0x2000a9c8

0801d298 <__sinit_lock_acquire>:
 801d298:	4801      	ldr	r0, [pc, #4]	; (801d2a0 <__sinit_lock_acquire+0x8>)
 801d29a:	f000 b8b9 	b.w	801d410 <__retarget_lock_acquire_recursive>
 801d29e:	bf00      	nop
 801d2a0:	2000a9c3 	.word	0x2000a9c3

0801d2a4 <__sinit_lock_release>:
 801d2a4:	4801      	ldr	r0, [pc, #4]	; (801d2ac <__sinit_lock_release+0x8>)
 801d2a6:	f000 b8b4 	b.w	801d412 <__retarget_lock_release_recursive>
 801d2aa:	bf00      	nop
 801d2ac:	2000a9c3 	.word	0x2000a9c3

0801d2b0 <__sinit>:
 801d2b0:	b510      	push	{r4, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	f7ff fff0 	bl	801d298 <__sinit_lock_acquire>
 801d2b8:	69a3      	ldr	r3, [r4, #24]
 801d2ba:	b11b      	cbz	r3, 801d2c4 <__sinit+0x14>
 801d2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2c0:	f7ff bff0 	b.w	801d2a4 <__sinit_lock_release>
 801d2c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d2c8:	6523      	str	r3, [r4, #80]	; 0x50
 801d2ca:	4b13      	ldr	r3, [pc, #76]	; (801d318 <__sinit+0x68>)
 801d2cc:	4a13      	ldr	r2, [pc, #76]	; (801d31c <__sinit+0x6c>)
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	62a2      	str	r2, [r4, #40]	; 0x28
 801d2d2:	42a3      	cmp	r3, r4
 801d2d4:	bf04      	itt	eq
 801d2d6:	2301      	moveq	r3, #1
 801d2d8:	61a3      	streq	r3, [r4, #24]
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f000 f820 	bl	801d320 <__sfp>
 801d2e0:	6060      	str	r0, [r4, #4]
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	f000 f81c 	bl	801d320 <__sfp>
 801d2e8:	60a0      	str	r0, [r4, #8]
 801d2ea:	4620      	mov	r0, r4
 801d2ec:	f000 f818 	bl	801d320 <__sfp>
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	60e0      	str	r0, [r4, #12]
 801d2f4:	2104      	movs	r1, #4
 801d2f6:	6860      	ldr	r0, [r4, #4]
 801d2f8:	f7ff ff82 	bl	801d200 <std>
 801d2fc:	68a0      	ldr	r0, [r4, #8]
 801d2fe:	2201      	movs	r2, #1
 801d300:	2109      	movs	r1, #9
 801d302:	f7ff ff7d 	bl	801d200 <std>
 801d306:	68e0      	ldr	r0, [r4, #12]
 801d308:	2202      	movs	r2, #2
 801d30a:	2112      	movs	r1, #18
 801d30c:	f7ff ff78 	bl	801d200 <std>
 801d310:	2301      	movs	r3, #1
 801d312:	61a3      	str	r3, [r4, #24]
 801d314:	e7d2      	b.n	801d2bc <__sinit+0xc>
 801d316:	bf00      	nop
 801d318:	0801f6d4 	.word	0x0801f6d4
 801d31c:	0801d249 	.word	0x0801d249

0801d320 <__sfp>:
 801d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d322:	4607      	mov	r7, r0
 801d324:	f7ff ffac 	bl	801d280 <__sfp_lock_acquire>
 801d328:	4b1e      	ldr	r3, [pc, #120]	; (801d3a4 <__sfp+0x84>)
 801d32a:	681e      	ldr	r6, [r3, #0]
 801d32c:	69b3      	ldr	r3, [r6, #24]
 801d32e:	b913      	cbnz	r3, 801d336 <__sfp+0x16>
 801d330:	4630      	mov	r0, r6
 801d332:	f7ff ffbd 	bl	801d2b0 <__sinit>
 801d336:	3648      	adds	r6, #72	; 0x48
 801d338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d33c:	3b01      	subs	r3, #1
 801d33e:	d503      	bpl.n	801d348 <__sfp+0x28>
 801d340:	6833      	ldr	r3, [r6, #0]
 801d342:	b30b      	cbz	r3, 801d388 <__sfp+0x68>
 801d344:	6836      	ldr	r6, [r6, #0]
 801d346:	e7f7      	b.n	801d338 <__sfp+0x18>
 801d348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d34c:	b9d5      	cbnz	r5, 801d384 <__sfp+0x64>
 801d34e:	4b16      	ldr	r3, [pc, #88]	; (801d3a8 <__sfp+0x88>)
 801d350:	60e3      	str	r3, [r4, #12]
 801d352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d356:	6665      	str	r5, [r4, #100]	; 0x64
 801d358:	f000 f859 	bl	801d40e <__retarget_lock_init_recursive>
 801d35c:	f7ff ff96 	bl	801d28c <__sfp_lock_release>
 801d360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d368:	6025      	str	r5, [r4, #0]
 801d36a:	61a5      	str	r5, [r4, #24]
 801d36c:	2208      	movs	r2, #8
 801d36e:	4629      	mov	r1, r5
 801d370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d374:	f7fb fe8a 	bl	801908c <memset>
 801d378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d37c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d380:	4620      	mov	r0, r4
 801d382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d384:	3468      	adds	r4, #104	; 0x68
 801d386:	e7d9      	b.n	801d33c <__sfp+0x1c>
 801d388:	2104      	movs	r1, #4
 801d38a:	4638      	mov	r0, r7
 801d38c:	f7ff ff62 	bl	801d254 <__sfmoreglue>
 801d390:	4604      	mov	r4, r0
 801d392:	6030      	str	r0, [r6, #0]
 801d394:	2800      	cmp	r0, #0
 801d396:	d1d5      	bne.n	801d344 <__sfp+0x24>
 801d398:	f7ff ff78 	bl	801d28c <__sfp_lock_release>
 801d39c:	230c      	movs	r3, #12
 801d39e:	603b      	str	r3, [r7, #0]
 801d3a0:	e7ee      	b.n	801d380 <__sfp+0x60>
 801d3a2:	bf00      	nop
 801d3a4:	0801f6d4 	.word	0x0801f6d4
 801d3a8:	ffff0001 	.word	0xffff0001

0801d3ac <fiprintf>:
 801d3ac:	b40e      	push	{r1, r2, r3}
 801d3ae:	b503      	push	{r0, r1, lr}
 801d3b0:	4601      	mov	r1, r0
 801d3b2:	ab03      	add	r3, sp, #12
 801d3b4:	4805      	ldr	r0, [pc, #20]	; (801d3cc <fiprintf+0x20>)
 801d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ba:	6800      	ldr	r0, [r0, #0]
 801d3bc:	9301      	str	r3, [sp, #4]
 801d3be:	f000 f875 	bl	801d4ac <_vfiprintf_r>
 801d3c2:	b002      	add	sp, #8
 801d3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d3c8:	b003      	add	sp, #12
 801d3ca:	4770      	bx	lr
 801d3cc:	20000048 	.word	0x20000048

0801d3d0 <_fwalk_reent>:
 801d3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3d4:	4606      	mov	r6, r0
 801d3d6:	4688      	mov	r8, r1
 801d3d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d3dc:	2700      	movs	r7, #0
 801d3de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d3e2:	f1b9 0901 	subs.w	r9, r9, #1
 801d3e6:	d505      	bpl.n	801d3f4 <_fwalk_reent+0x24>
 801d3e8:	6824      	ldr	r4, [r4, #0]
 801d3ea:	2c00      	cmp	r4, #0
 801d3ec:	d1f7      	bne.n	801d3de <_fwalk_reent+0xe>
 801d3ee:	4638      	mov	r0, r7
 801d3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3f4:	89ab      	ldrh	r3, [r5, #12]
 801d3f6:	2b01      	cmp	r3, #1
 801d3f8:	d907      	bls.n	801d40a <_fwalk_reent+0x3a>
 801d3fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d3fe:	3301      	adds	r3, #1
 801d400:	d003      	beq.n	801d40a <_fwalk_reent+0x3a>
 801d402:	4629      	mov	r1, r5
 801d404:	4630      	mov	r0, r6
 801d406:	47c0      	blx	r8
 801d408:	4307      	orrs	r7, r0
 801d40a:	3568      	adds	r5, #104	; 0x68
 801d40c:	e7e9      	b.n	801d3e2 <_fwalk_reent+0x12>

0801d40e <__retarget_lock_init_recursive>:
 801d40e:	4770      	bx	lr

0801d410 <__retarget_lock_acquire_recursive>:
 801d410:	4770      	bx	lr

0801d412 <__retarget_lock_release_recursive>:
 801d412:	4770      	bx	lr

0801d414 <memmove>:
 801d414:	4288      	cmp	r0, r1
 801d416:	b510      	push	{r4, lr}
 801d418:	eb01 0402 	add.w	r4, r1, r2
 801d41c:	d902      	bls.n	801d424 <memmove+0x10>
 801d41e:	4284      	cmp	r4, r0
 801d420:	4623      	mov	r3, r4
 801d422:	d807      	bhi.n	801d434 <memmove+0x20>
 801d424:	1e43      	subs	r3, r0, #1
 801d426:	42a1      	cmp	r1, r4
 801d428:	d008      	beq.n	801d43c <memmove+0x28>
 801d42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d42e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d432:	e7f8      	b.n	801d426 <memmove+0x12>
 801d434:	4402      	add	r2, r0
 801d436:	4601      	mov	r1, r0
 801d438:	428a      	cmp	r2, r1
 801d43a:	d100      	bne.n	801d43e <memmove+0x2a>
 801d43c:	bd10      	pop	{r4, pc}
 801d43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d446:	e7f7      	b.n	801d438 <memmove+0x24>

0801d448 <_malloc_usable_size_r>:
 801d448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d44c:	1f18      	subs	r0, r3, #4
 801d44e:	2b00      	cmp	r3, #0
 801d450:	bfbc      	itt	lt
 801d452:	580b      	ldrlt	r3, [r1, r0]
 801d454:	18c0      	addlt	r0, r0, r3
 801d456:	4770      	bx	lr

0801d458 <__sfputc_r>:
 801d458:	6893      	ldr	r3, [r2, #8]
 801d45a:	3b01      	subs	r3, #1
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	b410      	push	{r4}
 801d460:	6093      	str	r3, [r2, #8]
 801d462:	da08      	bge.n	801d476 <__sfputc_r+0x1e>
 801d464:	6994      	ldr	r4, [r2, #24]
 801d466:	42a3      	cmp	r3, r4
 801d468:	db01      	blt.n	801d46e <__sfputc_r+0x16>
 801d46a:	290a      	cmp	r1, #10
 801d46c:	d103      	bne.n	801d476 <__sfputc_r+0x1e>
 801d46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d472:	f000 b94b 	b.w	801d70c <__swbuf_r>
 801d476:	6813      	ldr	r3, [r2, #0]
 801d478:	1c58      	adds	r0, r3, #1
 801d47a:	6010      	str	r0, [r2, #0]
 801d47c:	7019      	strb	r1, [r3, #0]
 801d47e:	4608      	mov	r0, r1
 801d480:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d484:	4770      	bx	lr

0801d486 <__sfputs_r>:
 801d486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d488:	4606      	mov	r6, r0
 801d48a:	460f      	mov	r7, r1
 801d48c:	4614      	mov	r4, r2
 801d48e:	18d5      	adds	r5, r2, r3
 801d490:	42ac      	cmp	r4, r5
 801d492:	d101      	bne.n	801d498 <__sfputs_r+0x12>
 801d494:	2000      	movs	r0, #0
 801d496:	e007      	b.n	801d4a8 <__sfputs_r+0x22>
 801d498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d49c:	463a      	mov	r2, r7
 801d49e:	4630      	mov	r0, r6
 801d4a0:	f7ff ffda 	bl	801d458 <__sfputc_r>
 801d4a4:	1c43      	adds	r3, r0, #1
 801d4a6:	d1f3      	bne.n	801d490 <__sfputs_r+0xa>
 801d4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d4ac <_vfiprintf_r>:
 801d4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4b0:	460d      	mov	r5, r1
 801d4b2:	b09d      	sub	sp, #116	; 0x74
 801d4b4:	4614      	mov	r4, r2
 801d4b6:	4698      	mov	r8, r3
 801d4b8:	4606      	mov	r6, r0
 801d4ba:	b118      	cbz	r0, 801d4c4 <_vfiprintf_r+0x18>
 801d4bc:	6983      	ldr	r3, [r0, #24]
 801d4be:	b90b      	cbnz	r3, 801d4c4 <_vfiprintf_r+0x18>
 801d4c0:	f7ff fef6 	bl	801d2b0 <__sinit>
 801d4c4:	4b89      	ldr	r3, [pc, #548]	; (801d6ec <_vfiprintf_r+0x240>)
 801d4c6:	429d      	cmp	r5, r3
 801d4c8:	d11b      	bne.n	801d502 <_vfiprintf_r+0x56>
 801d4ca:	6875      	ldr	r5, [r6, #4]
 801d4cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4ce:	07d9      	lsls	r1, r3, #31
 801d4d0:	d405      	bmi.n	801d4de <_vfiprintf_r+0x32>
 801d4d2:	89ab      	ldrh	r3, [r5, #12]
 801d4d4:	059a      	lsls	r2, r3, #22
 801d4d6:	d402      	bmi.n	801d4de <_vfiprintf_r+0x32>
 801d4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d4da:	f7ff ff99 	bl	801d410 <__retarget_lock_acquire_recursive>
 801d4de:	89ab      	ldrh	r3, [r5, #12]
 801d4e0:	071b      	lsls	r3, r3, #28
 801d4e2:	d501      	bpl.n	801d4e8 <_vfiprintf_r+0x3c>
 801d4e4:	692b      	ldr	r3, [r5, #16]
 801d4e6:	b9eb      	cbnz	r3, 801d524 <_vfiprintf_r+0x78>
 801d4e8:	4629      	mov	r1, r5
 801d4ea:	4630      	mov	r0, r6
 801d4ec:	f000 f960 	bl	801d7b0 <__swsetup_r>
 801d4f0:	b1c0      	cbz	r0, 801d524 <_vfiprintf_r+0x78>
 801d4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d4f4:	07dc      	lsls	r4, r3, #31
 801d4f6:	d50e      	bpl.n	801d516 <_vfiprintf_r+0x6a>
 801d4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4fc:	b01d      	add	sp, #116	; 0x74
 801d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d502:	4b7b      	ldr	r3, [pc, #492]	; (801d6f0 <_vfiprintf_r+0x244>)
 801d504:	429d      	cmp	r5, r3
 801d506:	d101      	bne.n	801d50c <_vfiprintf_r+0x60>
 801d508:	68b5      	ldr	r5, [r6, #8]
 801d50a:	e7df      	b.n	801d4cc <_vfiprintf_r+0x20>
 801d50c:	4b79      	ldr	r3, [pc, #484]	; (801d6f4 <_vfiprintf_r+0x248>)
 801d50e:	429d      	cmp	r5, r3
 801d510:	bf08      	it	eq
 801d512:	68f5      	ldreq	r5, [r6, #12]
 801d514:	e7da      	b.n	801d4cc <_vfiprintf_r+0x20>
 801d516:	89ab      	ldrh	r3, [r5, #12]
 801d518:	0598      	lsls	r0, r3, #22
 801d51a:	d4ed      	bmi.n	801d4f8 <_vfiprintf_r+0x4c>
 801d51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d51e:	f7ff ff78 	bl	801d412 <__retarget_lock_release_recursive>
 801d522:	e7e9      	b.n	801d4f8 <_vfiprintf_r+0x4c>
 801d524:	2300      	movs	r3, #0
 801d526:	9309      	str	r3, [sp, #36]	; 0x24
 801d528:	2320      	movs	r3, #32
 801d52a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d52e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d532:	2330      	movs	r3, #48	; 0x30
 801d534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d6f8 <_vfiprintf_r+0x24c>
 801d538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d53c:	f04f 0901 	mov.w	r9, #1
 801d540:	4623      	mov	r3, r4
 801d542:	469a      	mov	sl, r3
 801d544:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d548:	b10a      	cbz	r2, 801d54e <_vfiprintf_r+0xa2>
 801d54a:	2a25      	cmp	r2, #37	; 0x25
 801d54c:	d1f9      	bne.n	801d542 <_vfiprintf_r+0x96>
 801d54e:	ebba 0b04 	subs.w	fp, sl, r4
 801d552:	d00b      	beq.n	801d56c <_vfiprintf_r+0xc0>
 801d554:	465b      	mov	r3, fp
 801d556:	4622      	mov	r2, r4
 801d558:	4629      	mov	r1, r5
 801d55a:	4630      	mov	r0, r6
 801d55c:	f7ff ff93 	bl	801d486 <__sfputs_r>
 801d560:	3001      	adds	r0, #1
 801d562:	f000 80aa 	beq.w	801d6ba <_vfiprintf_r+0x20e>
 801d566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d568:	445a      	add	r2, fp
 801d56a:	9209      	str	r2, [sp, #36]	; 0x24
 801d56c:	f89a 3000 	ldrb.w	r3, [sl]
 801d570:	2b00      	cmp	r3, #0
 801d572:	f000 80a2 	beq.w	801d6ba <_vfiprintf_r+0x20e>
 801d576:	2300      	movs	r3, #0
 801d578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d580:	f10a 0a01 	add.w	sl, sl, #1
 801d584:	9304      	str	r3, [sp, #16]
 801d586:	9307      	str	r3, [sp, #28]
 801d588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d58c:	931a      	str	r3, [sp, #104]	; 0x68
 801d58e:	4654      	mov	r4, sl
 801d590:	2205      	movs	r2, #5
 801d592:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d596:	4858      	ldr	r0, [pc, #352]	; (801d6f8 <_vfiprintf_r+0x24c>)
 801d598:	f7e2 fe22 	bl	80001e0 <memchr>
 801d59c:	9a04      	ldr	r2, [sp, #16]
 801d59e:	b9d8      	cbnz	r0, 801d5d8 <_vfiprintf_r+0x12c>
 801d5a0:	06d1      	lsls	r1, r2, #27
 801d5a2:	bf44      	itt	mi
 801d5a4:	2320      	movmi	r3, #32
 801d5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d5aa:	0713      	lsls	r3, r2, #28
 801d5ac:	bf44      	itt	mi
 801d5ae:	232b      	movmi	r3, #43	; 0x2b
 801d5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d5b4:	f89a 3000 	ldrb.w	r3, [sl]
 801d5b8:	2b2a      	cmp	r3, #42	; 0x2a
 801d5ba:	d015      	beq.n	801d5e8 <_vfiprintf_r+0x13c>
 801d5bc:	9a07      	ldr	r2, [sp, #28]
 801d5be:	4654      	mov	r4, sl
 801d5c0:	2000      	movs	r0, #0
 801d5c2:	f04f 0c0a 	mov.w	ip, #10
 801d5c6:	4621      	mov	r1, r4
 801d5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5cc:	3b30      	subs	r3, #48	; 0x30
 801d5ce:	2b09      	cmp	r3, #9
 801d5d0:	d94e      	bls.n	801d670 <_vfiprintf_r+0x1c4>
 801d5d2:	b1b0      	cbz	r0, 801d602 <_vfiprintf_r+0x156>
 801d5d4:	9207      	str	r2, [sp, #28]
 801d5d6:	e014      	b.n	801d602 <_vfiprintf_r+0x156>
 801d5d8:	eba0 0308 	sub.w	r3, r0, r8
 801d5dc:	fa09 f303 	lsl.w	r3, r9, r3
 801d5e0:	4313      	orrs	r3, r2
 801d5e2:	9304      	str	r3, [sp, #16]
 801d5e4:	46a2      	mov	sl, r4
 801d5e6:	e7d2      	b.n	801d58e <_vfiprintf_r+0xe2>
 801d5e8:	9b03      	ldr	r3, [sp, #12]
 801d5ea:	1d19      	adds	r1, r3, #4
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	9103      	str	r1, [sp, #12]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	bfbb      	ittet	lt
 801d5f4:	425b      	neglt	r3, r3
 801d5f6:	f042 0202 	orrlt.w	r2, r2, #2
 801d5fa:	9307      	strge	r3, [sp, #28]
 801d5fc:	9307      	strlt	r3, [sp, #28]
 801d5fe:	bfb8      	it	lt
 801d600:	9204      	strlt	r2, [sp, #16]
 801d602:	7823      	ldrb	r3, [r4, #0]
 801d604:	2b2e      	cmp	r3, #46	; 0x2e
 801d606:	d10c      	bne.n	801d622 <_vfiprintf_r+0x176>
 801d608:	7863      	ldrb	r3, [r4, #1]
 801d60a:	2b2a      	cmp	r3, #42	; 0x2a
 801d60c:	d135      	bne.n	801d67a <_vfiprintf_r+0x1ce>
 801d60e:	9b03      	ldr	r3, [sp, #12]
 801d610:	1d1a      	adds	r2, r3, #4
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	9203      	str	r2, [sp, #12]
 801d616:	2b00      	cmp	r3, #0
 801d618:	bfb8      	it	lt
 801d61a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d61e:	3402      	adds	r4, #2
 801d620:	9305      	str	r3, [sp, #20]
 801d622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d708 <_vfiprintf_r+0x25c>
 801d626:	7821      	ldrb	r1, [r4, #0]
 801d628:	2203      	movs	r2, #3
 801d62a:	4650      	mov	r0, sl
 801d62c:	f7e2 fdd8 	bl	80001e0 <memchr>
 801d630:	b140      	cbz	r0, 801d644 <_vfiprintf_r+0x198>
 801d632:	2340      	movs	r3, #64	; 0x40
 801d634:	eba0 000a 	sub.w	r0, r0, sl
 801d638:	fa03 f000 	lsl.w	r0, r3, r0
 801d63c:	9b04      	ldr	r3, [sp, #16]
 801d63e:	4303      	orrs	r3, r0
 801d640:	3401      	adds	r4, #1
 801d642:	9304      	str	r3, [sp, #16]
 801d644:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d648:	482c      	ldr	r0, [pc, #176]	; (801d6fc <_vfiprintf_r+0x250>)
 801d64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d64e:	2206      	movs	r2, #6
 801d650:	f7e2 fdc6 	bl	80001e0 <memchr>
 801d654:	2800      	cmp	r0, #0
 801d656:	d03f      	beq.n	801d6d8 <_vfiprintf_r+0x22c>
 801d658:	4b29      	ldr	r3, [pc, #164]	; (801d700 <_vfiprintf_r+0x254>)
 801d65a:	bb1b      	cbnz	r3, 801d6a4 <_vfiprintf_r+0x1f8>
 801d65c:	9b03      	ldr	r3, [sp, #12]
 801d65e:	3307      	adds	r3, #7
 801d660:	f023 0307 	bic.w	r3, r3, #7
 801d664:	3308      	adds	r3, #8
 801d666:	9303      	str	r3, [sp, #12]
 801d668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d66a:	443b      	add	r3, r7
 801d66c:	9309      	str	r3, [sp, #36]	; 0x24
 801d66e:	e767      	b.n	801d540 <_vfiprintf_r+0x94>
 801d670:	fb0c 3202 	mla	r2, ip, r2, r3
 801d674:	460c      	mov	r4, r1
 801d676:	2001      	movs	r0, #1
 801d678:	e7a5      	b.n	801d5c6 <_vfiprintf_r+0x11a>
 801d67a:	2300      	movs	r3, #0
 801d67c:	3401      	adds	r4, #1
 801d67e:	9305      	str	r3, [sp, #20]
 801d680:	4619      	mov	r1, r3
 801d682:	f04f 0c0a 	mov.w	ip, #10
 801d686:	4620      	mov	r0, r4
 801d688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d68c:	3a30      	subs	r2, #48	; 0x30
 801d68e:	2a09      	cmp	r2, #9
 801d690:	d903      	bls.n	801d69a <_vfiprintf_r+0x1ee>
 801d692:	2b00      	cmp	r3, #0
 801d694:	d0c5      	beq.n	801d622 <_vfiprintf_r+0x176>
 801d696:	9105      	str	r1, [sp, #20]
 801d698:	e7c3      	b.n	801d622 <_vfiprintf_r+0x176>
 801d69a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d69e:	4604      	mov	r4, r0
 801d6a0:	2301      	movs	r3, #1
 801d6a2:	e7f0      	b.n	801d686 <_vfiprintf_r+0x1da>
 801d6a4:	ab03      	add	r3, sp, #12
 801d6a6:	9300      	str	r3, [sp, #0]
 801d6a8:	462a      	mov	r2, r5
 801d6aa:	4b16      	ldr	r3, [pc, #88]	; (801d704 <_vfiprintf_r+0x258>)
 801d6ac:	a904      	add	r1, sp, #16
 801d6ae:	4630      	mov	r0, r6
 801d6b0:	f7fb fe3e 	bl	8019330 <_printf_float>
 801d6b4:	4607      	mov	r7, r0
 801d6b6:	1c78      	adds	r0, r7, #1
 801d6b8:	d1d6      	bne.n	801d668 <_vfiprintf_r+0x1bc>
 801d6ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d6bc:	07d9      	lsls	r1, r3, #31
 801d6be:	d405      	bmi.n	801d6cc <_vfiprintf_r+0x220>
 801d6c0:	89ab      	ldrh	r3, [r5, #12]
 801d6c2:	059a      	lsls	r2, r3, #22
 801d6c4:	d402      	bmi.n	801d6cc <_vfiprintf_r+0x220>
 801d6c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d6c8:	f7ff fea3 	bl	801d412 <__retarget_lock_release_recursive>
 801d6cc:	89ab      	ldrh	r3, [r5, #12]
 801d6ce:	065b      	lsls	r3, r3, #25
 801d6d0:	f53f af12 	bmi.w	801d4f8 <_vfiprintf_r+0x4c>
 801d6d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d6d6:	e711      	b.n	801d4fc <_vfiprintf_r+0x50>
 801d6d8:	ab03      	add	r3, sp, #12
 801d6da:	9300      	str	r3, [sp, #0]
 801d6dc:	462a      	mov	r2, r5
 801d6de:	4b09      	ldr	r3, [pc, #36]	; (801d704 <_vfiprintf_r+0x258>)
 801d6e0:	a904      	add	r1, sp, #16
 801d6e2:	4630      	mov	r0, r6
 801d6e4:	f7fc f8c8 	bl	8019878 <_printf_i>
 801d6e8:	e7e4      	b.n	801d6b4 <_vfiprintf_r+0x208>
 801d6ea:	bf00      	nop
 801d6ec:	0801fb4c 	.word	0x0801fb4c
 801d6f0:	0801fb6c 	.word	0x0801fb6c
 801d6f4:	0801fb2c 	.word	0x0801fb2c
 801d6f8:	0801fadc 	.word	0x0801fadc
 801d6fc:	0801fae6 	.word	0x0801fae6
 801d700:	08019331 	.word	0x08019331
 801d704:	0801d487 	.word	0x0801d487
 801d708:	0801fae2 	.word	0x0801fae2

0801d70c <__swbuf_r>:
 801d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d70e:	460e      	mov	r6, r1
 801d710:	4614      	mov	r4, r2
 801d712:	4605      	mov	r5, r0
 801d714:	b118      	cbz	r0, 801d71e <__swbuf_r+0x12>
 801d716:	6983      	ldr	r3, [r0, #24]
 801d718:	b90b      	cbnz	r3, 801d71e <__swbuf_r+0x12>
 801d71a:	f7ff fdc9 	bl	801d2b0 <__sinit>
 801d71e:	4b21      	ldr	r3, [pc, #132]	; (801d7a4 <__swbuf_r+0x98>)
 801d720:	429c      	cmp	r4, r3
 801d722:	d12b      	bne.n	801d77c <__swbuf_r+0x70>
 801d724:	686c      	ldr	r4, [r5, #4]
 801d726:	69a3      	ldr	r3, [r4, #24]
 801d728:	60a3      	str	r3, [r4, #8]
 801d72a:	89a3      	ldrh	r3, [r4, #12]
 801d72c:	071a      	lsls	r2, r3, #28
 801d72e:	d52f      	bpl.n	801d790 <__swbuf_r+0x84>
 801d730:	6923      	ldr	r3, [r4, #16]
 801d732:	b36b      	cbz	r3, 801d790 <__swbuf_r+0x84>
 801d734:	6923      	ldr	r3, [r4, #16]
 801d736:	6820      	ldr	r0, [r4, #0]
 801d738:	1ac0      	subs	r0, r0, r3
 801d73a:	6963      	ldr	r3, [r4, #20]
 801d73c:	b2f6      	uxtb	r6, r6
 801d73e:	4283      	cmp	r3, r0
 801d740:	4637      	mov	r7, r6
 801d742:	dc04      	bgt.n	801d74e <__swbuf_r+0x42>
 801d744:	4621      	mov	r1, r4
 801d746:	4628      	mov	r0, r5
 801d748:	f7ff fd1e 	bl	801d188 <_fflush_r>
 801d74c:	bb30      	cbnz	r0, 801d79c <__swbuf_r+0x90>
 801d74e:	68a3      	ldr	r3, [r4, #8]
 801d750:	3b01      	subs	r3, #1
 801d752:	60a3      	str	r3, [r4, #8]
 801d754:	6823      	ldr	r3, [r4, #0]
 801d756:	1c5a      	adds	r2, r3, #1
 801d758:	6022      	str	r2, [r4, #0]
 801d75a:	701e      	strb	r6, [r3, #0]
 801d75c:	6963      	ldr	r3, [r4, #20]
 801d75e:	3001      	adds	r0, #1
 801d760:	4283      	cmp	r3, r0
 801d762:	d004      	beq.n	801d76e <__swbuf_r+0x62>
 801d764:	89a3      	ldrh	r3, [r4, #12]
 801d766:	07db      	lsls	r3, r3, #31
 801d768:	d506      	bpl.n	801d778 <__swbuf_r+0x6c>
 801d76a:	2e0a      	cmp	r6, #10
 801d76c:	d104      	bne.n	801d778 <__swbuf_r+0x6c>
 801d76e:	4621      	mov	r1, r4
 801d770:	4628      	mov	r0, r5
 801d772:	f7ff fd09 	bl	801d188 <_fflush_r>
 801d776:	b988      	cbnz	r0, 801d79c <__swbuf_r+0x90>
 801d778:	4638      	mov	r0, r7
 801d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d77c:	4b0a      	ldr	r3, [pc, #40]	; (801d7a8 <__swbuf_r+0x9c>)
 801d77e:	429c      	cmp	r4, r3
 801d780:	d101      	bne.n	801d786 <__swbuf_r+0x7a>
 801d782:	68ac      	ldr	r4, [r5, #8]
 801d784:	e7cf      	b.n	801d726 <__swbuf_r+0x1a>
 801d786:	4b09      	ldr	r3, [pc, #36]	; (801d7ac <__swbuf_r+0xa0>)
 801d788:	429c      	cmp	r4, r3
 801d78a:	bf08      	it	eq
 801d78c:	68ec      	ldreq	r4, [r5, #12]
 801d78e:	e7ca      	b.n	801d726 <__swbuf_r+0x1a>
 801d790:	4621      	mov	r1, r4
 801d792:	4628      	mov	r0, r5
 801d794:	f000 f80c 	bl	801d7b0 <__swsetup_r>
 801d798:	2800      	cmp	r0, #0
 801d79a:	d0cb      	beq.n	801d734 <__swbuf_r+0x28>
 801d79c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d7a0:	e7ea      	b.n	801d778 <__swbuf_r+0x6c>
 801d7a2:	bf00      	nop
 801d7a4:	0801fb4c 	.word	0x0801fb4c
 801d7a8:	0801fb6c 	.word	0x0801fb6c
 801d7ac:	0801fb2c 	.word	0x0801fb2c

0801d7b0 <__swsetup_r>:
 801d7b0:	4b32      	ldr	r3, [pc, #200]	; (801d87c <__swsetup_r+0xcc>)
 801d7b2:	b570      	push	{r4, r5, r6, lr}
 801d7b4:	681d      	ldr	r5, [r3, #0]
 801d7b6:	4606      	mov	r6, r0
 801d7b8:	460c      	mov	r4, r1
 801d7ba:	b125      	cbz	r5, 801d7c6 <__swsetup_r+0x16>
 801d7bc:	69ab      	ldr	r3, [r5, #24]
 801d7be:	b913      	cbnz	r3, 801d7c6 <__swsetup_r+0x16>
 801d7c0:	4628      	mov	r0, r5
 801d7c2:	f7ff fd75 	bl	801d2b0 <__sinit>
 801d7c6:	4b2e      	ldr	r3, [pc, #184]	; (801d880 <__swsetup_r+0xd0>)
 801d7c8:	429c      	cmp	r4, r3
 801d7ca:	d10f      	bne.n	801d7ec <__swsetup_r+0x3c>
 801d7cc:	686c      	ldr	r4, [r5, #4]
 801d7ce:	89a3      	ldrh	r3, [r4, #12]
 801d7d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7d4:	0719      	lsls	r1, r3, #28
 801d7d6:	d42c      	bmi.n	801d832 <__swsetup_r+0x82>
 801d7d8:	06dd      	lsls	r5, r3, #27
 801d7da:	d411      	bmi.n	801d800 <__swsetup_r+0x50>
 801d7dc:	2309      	movs	r3, #9
 801d7de:	6033      	str	r3, [r6, #0]
 801d7e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d7e4:	81a3      	strh	r3, [r4, #12]
 801d7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d7ea:	e03e      	b.n	801d86a <__swsetup_r+0xba>
 801d7ec:	4b25      	ldr	r3, [pc, #148]	; (801d884 <__swsetup_r+0xd4>)
 801d7ee:	429c      	cmp	r4, r3
 801d7f0:	d101      	bne.n	801d7f6 <__swsetup_r+0x46>
 801d7f2:	68ac      	ldr	r4, [r5, #8]
 801d7f4:	e7eb      	b.n	801d7ce <__swsetup_r+0x1e>
 801d7f6:	4b24      	ldr	r3, [pc, #144]	; (801d888 <__swsetup_r+0xd8>)
 801d7f8:	429c      	cmp	r4, r3
 801d7fa:	bf08      	it	eq
 801d7fc:	68ec      	ldreq	r4, [r5, #12]
 801d7fe:	e7e6      	b.n	801d7ce <__swsetup_r+0x1e>
 801d800:	0758      	lsls	r0, r3, #29
 801d802:	d512      	bpl.n	801d82a <__swsetup_r+0x7a>
 801d804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d806:	b141      	cbz	r1, 801d81a <__swsetup_r+0x6a>
 801d808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d80c:	4299      	cmp	r1, r3
 801d80e:	d002      	beq.n	801d816 <__swsetup_r+0x66>
 801d810:	4630      	mov	r0, r6
 801d812:	f7fb fc43 	bl	801909c <_free_r>
 801d816:	2300      	movs	r3, #0
 801d818:	6363      	str	r3, [r4, #52]	; 0x34
 801d81a:	89a3      	ldrh	r3, [r4, #12]
 801d81c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d820:	81a3      	strh	r3, [r4, #12]
 801d822:	2300      	movs	r3, #0
 801d824:	6063      	str	r3, [r4, #4]
 801d826:	6923      	ldr	r3, [r4, #16]
 801d828:	6023      	str	r3, [r4, #0]
 801d82a:	89a3      	ldrh	r3, [r4, #12]
 801d82c:	f043 0308 	orr.w	r3, r3, #8
 801d830:	81a3      	strh	r3, [r4, #12]
 801d832:	6923      	ldr	r3, [r4, #16]
 801d834:	b94b      	cbnz	r3, 801d84a <__swsetup_r+0x9a>
 801d836:	89a3      	ldrh	r3, [r4, #12]
 801d838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d840:	d003      	beq.n	801d84a <__swsetup_r+0x9a>
 801d842:	4621      	mov	r1, r4
 801d844:	4630      	mov	r0, r6
 801d846:	f000 f84d 	bl	801d8e4 <__smakebuf_r>
 801d84a:	89a0      	ldrh	r0, [r4, #12]
 801d84c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d850:	f010 0301 	ands.w	r3, r0, #1
 801d854:	d00a      	beq.n	801d86c <__swsetup_r+0xbc>
 801d856:	2300      	movs	r3, #0
 801d858:	60a3      	str	r3, [r4, #8]
 801d85a:	6963      	ldr	r3, [r4, #20]
 801d85c:	425b      	negs	r3, r3
 801d85e:	61a3      	str	r3, [r4, #24]
 801d860:	6923      	ldr	r3, [r4, #16]
 801d862:	b943      	cbnz	r3, 801d876 <__swsetup_r+0xc6>
 801d864:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d868:	d1ba      	bne.n	801d7e0 <__swsetup_r+0x30>
 801d86a:	bd70      	pop	{r4, r5, r6, pc}
 801d86c:	0781      	lsls	r1, r0, #30
 801d86e:	bf58      	it	pl
 801d870:	6963      	ldrpl	r3, [r4, #20]
 801d872:	60a3      	str	r3, [r4, #8]
 801d874:	e7f4      	b.n	801d860 <__swsetup_r+0xb0>
 801d876:	2000      	movs	r0, #0
 801d878:	e7f7      	b.n	801d86a <__swsetup_r+0xba>
 801d87a:	bf00      	nop
 801d87c:	20000048 	.word	0x20000048
 801d880:	0801fb4c 	.word	0x0801fb4c
 801d884:	0801fb6c 	.word	0x0801fb6c
 801d888:	0801fb2c 	.word	0x0801fb2c

0801d88c <abort>:
 801d88c:	b508      	push	{r3, lr}
 801d88e:	2006      	movs	r0, #6
 801d890:	f000 f890 	bl	801d9b4 <raise>
 801d894:	2001      	movs	r0, #1
 801d896:	f7ee ffc7 	bl	800c828 <_exit>

0801d89a <__swhatbuf_r>:
 801d89a:	b570      	push	{r4, r5, r6, lr}
 801d89c:	460e      	mov	r6, r1
 801d89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8a2:	2900      	cmp	r1, #0
 801d8a4:	b096      	sub	sp, #88	; 0x58
 801d8a6:	4614      	mov	r4, r2
 801d8a8:	461d      	mov	r5, r3
 801d8aa:	da07      	bge.n	801d8bc <__swhatbuf_r+0x22>
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	602b      	str	r3, [r5, #0]
 801d8b0:	89b3      	ldrh	r3, [r6, #12]
 801d8b2:	061a      	lsls	r2, r3, #24
 801d8b4:	d410      	bmi.n	801d8d8 <__swhatbuf_r+0x3e>
 801d8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8ba:	e00e      	b.n	801d8da <__swhatbuf_r+0x40>
 801d8bc:	466a      	mov	r2, sp
 801d8be:	f000 f895 	bl	801d9ec <_fstat_r>
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	dbf2      	blt.n	801d8ac <__swhatbuf_r+0x12>
 801d8c6:	9a01      	ldr	r2, [sp, #4]
 801d8c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d8cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d8d0:	425a      	negs	r2, r3
 801d8d2:	415a      	adcs	r2, r3
 801d8d4:	602a      	str	r2, [r5, #0]
 801d8d6:	e7ee      	b.n	801d8b6 <__swhatbuf_r+0x1c>
 801d8d8:	2340      	movs	r3, #64	; 0x40
 801d8da:	2000      	movs	r0, #0
 801d8dc:	6023      	str	r3, [r4, #0]
 801d8de:	b016      	add	sp, #88	; 0x58
 801d8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d8e4 <__smakebuf_r>:
 801d8e4:	898b      	ldrh	r3, [r1, #12]
 801d8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d8e8:	079d      	lsls	r5, r3, #30
 801d8ea:	4606      	mov	r6, r0
 801d8ec:	460c      	mov	r4, r1
 801d8ee:	d507      	bpl.n	801d900 <__smakebuf_r+0x1c>
 801d8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d8f4:	6023      	str	r3, [r4, #0]
 801d8f6:	6123      	str	r3, [r4, #16]
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	6163      	str	r3, [r4, #20]
 801d8fc:	b002      	add	sp, #8
 801d8fe:	bd70      	pop	{r4, r5, r6, pc}
 801d900:	ab01      	add	r3, sp, #4
 801d902:	466a      	mov	r2, sp
 801d904:	f7ff ffc9 	bl	801d89a <__swhatbuf_r>
 801d908:	9900      	ldr	r1, [sp, #0]
 801d90a:	4605      	mov	r5, r0
 801d90c:	4630      	mov	r0, r6
 801d90e:	f7fb fc15 	bl	801913c <_malloc_r>
 801d912:	b948      	cbnz	r0, 801d928 <__smakebuf_r+0x44>
 801d914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d918:	059a      	lsls	r2, r3, #22
 801d91a:	d4ef      	bmi.n	801d8fc <__smakebuf_r+0x18>
 801d91c:	f023 0303 	bic.w	r3, r3, #3
 801d920:	f043 0302 	orr.w	r3, r3, #2
 801d924:	81a3      	strh	r3, [r4, #12]
 801d926:	e7e3      	b.n	801d8f0 <__smakebuf_r+0xc>
 801d928:	4b0d      	ldr	r3, [pc, #52]	; (801d960 <__smakebuf_r+0x7c>)
 801d92a:	62b3      	str	r3, [r6, #40]	; 0x28
 801d92c:	89a3      	ldrh	r3, [r4, #12]
 801d92e:	6020      	str	r0, [r4, #0]
 801d930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d934:	81a3      	strh	r3, [r4, #12]
 801d936:	9b00      	ldr	r3, [sp, #0]
 801d938:	6163      	str	r3, [r4, #20]
 801d93a:	9b01      	ldr	r3, [sp, #4]
 801d93c:	6120      	str	r0, [r4, #16]
 801d93e:	b15b      	cbz	r3, 801d958 <__smakebuf_r+0x74>
 801d940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d944:	4630      	mov	r0, r6
 801d946:	f000 f863 	bl	801da10 <_isatty_r>
 801d94a:	b128      	cbz	r0, 801d958 <__smakebuf_r+0x74>
 801d94c:	89a3      	ldrh	r3, [r4, #12]
 801d94e:	f023 0303 	bic.w	r3, r3, #3
 801d952:	f043 0301 	orr.w	r3, r3, #1
 801d956:	81a3      	strh	r3, [r4, #12]
 801d958:	89a0      	ldrh	r0, [r4, #12]
 801d95a:	4305      	orrs	r5, r0
 801d95c:	81a5      	strh	r5, [r4, #12]
 801d95e:	e7cd      	b.n	801d8fc <__smakebuf_r+0x18>
 801d960:	0801d249 	.word	0x0801d249

0801d964 <_raise_r>:
 801d964:	291f      	cmp	r1, #31
 801d966:	b538      	push	{r3, r4, r5, lr}
 801d968:	4604      	mov	r4, r0
 801d96a:	460d      	mov	r5, r1
 801d96c:	d904      	bls.n	801d978 <_raise_r+0x14>
 801d96e:	2316      	movs	r3, #22
 801d970:	6003      	str	r3, [r0, #0]
 801d972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d976:	bd38      	pop	{r3, r4, r5, pc}
 801d978:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d97a:	b112      	cbz	r2, 801d982 <_raise_r+0x1e>
 801d97c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d980:	b94b      	cbnz	r3, 801d996 <_raise_r+0x32>
 801d982:	4620      	mov	r0, r4
 801d984:	f000 f830 	bl	801d9e8 <_getpid_r>
 801d988:	462a      	mov	r2, r5
 801d98a:	4601      	mov	r1, r0
 801d98c:	4620      	mov	r0, r4
 801d98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d992:	f000 b817 	b.w	801d9c4 <_kill_r>
 801d996:	2b01      	cmp	r3, #1
 801d998:	d00a      	beq.n	801d9b0 <_raise_r+0x4c>
 801d99a:	1c59      	adds	r1, r3, #1
 801d99c:	d103      	bne.n	801d9a6 <_raise_r+0x42>
 801d99e:	2316      	movs	r3, #22
 801d9a0:	6003      	str	r3, [r0, #0]
 801d9a2:	2001      	movs	r0, #1
 801d9a4:	e7e7      	b.n	801d976 <_raise_r+0x12>
 801d9a6:	2400      	movs	r4, #0
 801d9a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d9ac:	4628      	mov	r0, r5
 801d9ae:	4798      	blx	r3
 801d9b0:	2000      	movs	r0, #0
 801d9b2:	e7e0      	b.n	801d976 <_raise_r+0x12>

0801d9b4 <raise>:
 801d9b4:	4b02      	ldr	r3, [pc, #8]	; (801d9c0 <raise+0xc>)
 801d9b6:	4601      	mov	r1, r0
 801d9b8:	6818      	ldr	r0, [r3, #0]
 801d9ba:	f7ff bfd3 	b.w	801d964 <_raise_r>
 801d9be:	bf00      	nop
 801d9c0:	20000048 	.word	0x20000048

0801d9c4 <_kill_r>:
 801d9c4:	b538      	push	{r3, r4, r5, lr}
 801d9c6:	4d07      	ldr	r5, [pc, #28]	; (801d9e4 <_kill_r+0x20>)
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	4604      	mov	r4, r0
 801d9cc:	4608      	mov	r0, r1
 801d9ce:	4611      	mov	r1, r2
 801d9d0:	602b      	str	r3, [r5, #0]
 801d9d2:	f7ee ff19 	bl	800c808 <_kill>
 801d9d6:	1c43      	adds	r3, r0, #1
 801d9d8:	d102      	bne.n	801d9e0 <_kill_r+0x1c>
 801d9da:	682b      	ldr	r3, [r5, #0]
 801d9dc:	b103      	cbz	r3, 801d9e0 <_kill_r+0x1c>
 801d9de:	6023      	str	r3, [r4, #0]
 801d9e0:	bd38      	pop	{r3, r4, r5, pc}
 801d9e2:	bf00      	nop
 801d9e4:	2000a9bc 	.word	0x2000a9bc

0801d9e8 <_getpid_r>:
 801d9e8:	f7ee bf06 	b.w	800c7f8 <_getpid>

0801d9ec <_fstat_r>:
 801d9ec:	b538      	push	{r3, r4, r5, lr}
 801d9ee:	4d07      	ldr	r5, [pc, #28]	; (801da0c <_fstat_r+0x20>)
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	4604      	mov	r4, r0
 801d9f4:	4608      	mov	r0, r1
 801d9f6:	4611      	mov	r1, r2
 801d9f8:	602b      	str	r3, [r5, #0]
 801d9fa:	f7ee ff64 	bl	800c8c6 <_fstat>
 801d9fe:	1c43      	adds	r3, r0, #1
 801da00:	d102      	bne.n	801da08 <_fstat_r+0x1c>
 801da02:	682b      	ldr	r3, [r5, #0]
 801da04:	b103      	cbz	r3, 801da08 <_fstat_r+0x1c>
 801da06:	6023      	str	r3, [r4, #0]
 801da08:	bd38      	pop	{r3, r4, r5, pc}
 801da0a:	bf00      	nop
 801da0c:	2000a9bc 	.word	0x2000a9bc

0801da10 <_isatty_r>:
 801da10:	b538      	push	{r3, r4, r5, lr}
 801da12:	4d06      	ldr	r5, [pc, #24]	; (801da2c <_isatty_r+0x1c>)
 801da14:	2300      	movs	r3, #0
 801da16:	4604      	mov	r4, r0
 801da18:	4608      	mov	r0, r1
 801da1a:	602b      	str	r3, [r5, #0]
 801da1c:	f7ee ff63 	bl	800c8e6 <_isatty>
 801da20:	1c43      	adds	r3, r0, #1
 801da22:	d102      	bne.n	801da2a <_isatty_r+0x1a>
 801da24:	682b      	ldr	r3, [r5, #0]
 801da26:	b103      	cbz	r3, 801da2a <_isatty_r+0x1a>
 801da28:	6023      	str	r3, [r4, #0]
 801da2a:	bd38      	pop	{r3, r4, r5, pc}
 801da2c:	2000a9bc 	.word	0x2000a9bc

0801da30 <atanf>:
 801da30:	b538      	push	{r3, r4, r5, lr}
 801da32:	ee10 5a10 	vmov	r5, s0
 801da36:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801da3a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801da3e:	eef0 7a40 	vmov.f32	s15, s0
 801da42:	db10      	blt.n	801da66 <atanf+0x36>
 801da44:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801da48:	dd04      	ble.n	801da54 <atanf+0x24>
 801da4a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801da4e:	eeb0 0a67 	vmov.f32	s0, s15
 801da52:	bd38      	pop	{r3, r4, r5, pc}
 801da54:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801db8c <atanf+0x15c>
 801da58:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801db90 <atanf+0x160>
 801da5c:	2d00      	cmp	r5, #0
 801da5e:	bfd8      	it	le
 801da60:	eef0 7a40 	vmovle.f32	s15, s0
 801da64:	e7f3      	b.n	801da4e <atanf+0x1e>
 801da66:	4b4b      	ldr	r3, [pc, #300]	; (801db94 <atanf+0x164>)
 801da68:	429c      	cmp	r4, r3
 801da6a:	dc10      	bgt.n	801da8e <atanf+0x5e>
 801da6c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801da70:	da0a      	bge.n	801da88 <atanf+0x58>
 801da72:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801db98 <atanf+0x168>
 801da76:	ee30 7a07 	vadd.f32	s14, s0, s14
 801da7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801da82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da86:	dce2      	bgt.n	801da4e <atanf+0x1e>
 801da88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da8c:	e013      	b.n	801dab6 <atanf+0x86>
 801da8e:	f000 f8e3 	bl	801dc58 <fabsf>
 801da92:	4b42      	ldr	r3, [pc, #264]	; (801db9c <atanf+0x16c>)
 801da94:	429c      	cmp	r4, r3
 801da96:	dc4f      	bgt.n	801db38 <atanf+0x108>
 801da98:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801da9c:	429c      	cmp	r4, r3
 801da9e:	dc41      	bgt.n	801db24 <atanf+0xf4>
 801daa0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801daa4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801daa8:	eea0 7a27 	vfma.f32	s14, s0, s15
 801daac:	2300      	movs	r3, #0
 801daae:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dab2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dab6:	1c5a      	adds	r2, r3, #1
 801dab8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801dabc:	eddf 5a38 	vldr	s11, [pc, #224]	; 801dba0 <atanf+0x170>
 801dac0:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801dba4 <atanf+0x174>
 801dac4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801dba8 <atanf+0x178>
 801dac8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801dbac <atanf+0x17c>
 801dacc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801dad0:	eea7 6a25 	vfma.f32	s12, s14, s11
 801dad4:	eddf 5a36 	vldr	s11, [pc, #216]	; 801dbb0 <atanf+0x180>
 801dad8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801dadc:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801dbb4 <atanf+0x184>
 801dae0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dae4:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dbb8 <atanf+0x188>
 801dae8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801daec:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801dbbc <atanf+0x18c>
 801daf0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801daf4:	eddf 5a32 	vldr	s11, [pc, #200]	; 801dbc0 <atanf+0x190>
 801daf8:	eee7 5a05 	vfma.f32	s11, s14, s10
 801dafc:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801dbc4 <atanf+0x194>
 801db00:	eea5 5a87 	vfma.f32	s10, s11, s14
 801db04:	eddf 5a30 	vldr	s11, [pc, #192]	; 801dbc8 <atanf+0x198>
 801db08:	eee5 5a07 	vfma.f32	s11, s10, s14
 801db0c:	eea5 0a87 	vfma.f32	s0, s11, s14
 801db10:	ee20 0a07 	vmul.f32	s0, s0, s14
 801db14:	eea6 0a26 	vfma.f32	s0, s12, s13
 801db18:	ee27 0a80 	vmul.f32	s0, s15, s0
 801db1c:	d121      	bne.n	801db62 <atanf+0x132>
 801db1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801db22:	e794      	b.n	801da4e <atanf+0x1e>
 801db24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801db28:	ee30 7a67 	vsub.f32	s14, s0, s15
 801db2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801db30:	2301      	movs	r3, #1
 801db32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db36:	e7be      	b.n	801dab6 <atanf+0x86>
 801db38:	4b24      	ldr	r3, [pc, #144]	; (801dbcc <atanf+0x19c>)
 801db3a:	429c      	cmp	r4, r3
 801db3c:	dc0b      	bgt.n	801db56 <atanf+0x126>
 801db3e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801db42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db46:	eea0 7a27 	vfma.f32	s14, s0, s15
 801db4a:	2302      	movs	r3, #2
 801db4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801db50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801db54:	e7af      	b.n	801dab6 <atanf+0x86>
 801db56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801db5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db5e:	2303      	movs	r3, #3
 801db60:	e7a9      	b.n	801dab6 <atanf+0x86>
 801db62:	4a1b      	ldr	r2, [pc, #108]	; (801dbd0 <atanf+0x1a0>)
 801db64:	491b      	ldr	r1, [pc, #108]	; (801dbd4 <atanf+0x1a4>)
 801db66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801db6a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801db6e:	ed93 7a00 	vldr	s14, [r3]
 801db72:	ee30 0a47 	vsub.f32	s0, s0, s14
 801db76:	2d00      	cmp	r5, #0
 801db78:	ee70 7a67 	vsub.f32	s15, s0, s15
 801db7c:	ed92 0a00 	vldr	s0, [r2]
 801db80:	ee70 7a67 	vsub.f32	s15, s0, s15
 801db84:	bfb8      	it	lt
 801db86:	eef1 7a67 	vneglt.f32	s15, s15
 801db8a:	e760      	b.n	801da4e <atanf+0x1e>
 801db8c:	3fc90fdb 	.word	0x3fc90fdb
 801db90:	bfc90fdb 	.word	0xbfc90fdb
 801db94:	3edfffff 	.word	0x3edfffff
 801db98:	7149f2ca 	.word	0x7149f2ca
 801db9c:	3f97ffff 	.word	0x3f97ffff
 801dba0:	3c8569d7 	.word	0x3c8569d7
 801dba4:	3d4bda59 	.word	0x3d4bda59
 801dba8:	bd15a221 	.word	0xbd15a221
 801dbac:	be4ccccd 	.word	0xbe4ccccd
 801dbb0:	3d886b35 	.word	0x3d886b35
 801dbb4:	3dba2e6e 	.word	0x3dba2e6e
 801dbb8:	3e124925 	.word	0x3e124925
 801dbbc:	3eaaaaab 	.word	0x3eaaaaab
 801dbc0:	bd6ef16b 	.word	0xbd6ef16b
 801dbc4:	bd9d8795 	.word	0xbd9d8795
 801dbc8:	bde38e38 	.word	0xbde38e38
 801dbcc:	401bffff 	.word	0x401bffff
 801dbd0:	0801fb8c 	.word	0x0801fb8c
 801dbd4:	0801fb9c 	.word	0x0801fb9c

0801dbd8 <cosf>:
 801dbd8:	ee10 3a10 	vmov	r3, s0
 801dbdc:	b507      	push	{r0, r1, r2, lr}
 801dbde:	4a1c      	ldr	r2, [pc, #112]	; (801dc50 <cosf+0x78>)
 801dbe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dbe4:	4293      	cmp	r3, r2
 801dbe6:	dc04      	bgt.n	801dbf2 <cosf+0x1a>
 801dbe8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801dc54 <cosf+0x7c>
 801dbec:	f000 fdb8 	bl	801e760 <__kernel_cosf>
 801dbf0:	e004      	b.n	801dbfc <cosf+0x24>
 801dbf2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dbf6:	db04      	blt.n	801dc02 <cosf+0x2a>
 801dbf8:	ee30 0a40 	vsub.f32	s0, s0, s0
 801dbfc:	b003      	add	sp, #12
 801dbfe:	f85d fb04 	ldr.w	pc, [sp], #4
 801dc02:	4668      	mov	r0, sp
 801dc04:	f000 fc6c 	bl	801e4e0 <__ieee754_rem_pio2f>
 801dc08:	f000 0003 	and.w	r0, r0, #3
 801dc0c:	2801      	cmp	r0, #1
 801dc0e:	d007      	beq.n	801dc20 <cosf+0x48>
 801dc10:	2802      	cmp	r0, #2
 801dc12:	d00e      	beq.n	801dc32 <cosf+0x5a>
 801dc14:	b9a0      	cbnz	r0, 801dc40 <cosf+0x68>
 801dc16:	eddd 0a01 	vldr	s1, [sp, #4]
 801dc1a:	ed9d 0a00 	vldr	s0, [sp]
 801dc1e:	e7e5      	b.n	801dbec <cosf+0x14>
 801dc20:	eddd 0a01 	vldr	s1, [sp, #4]
 801dc24:	ed9d 0a00 	vldr	s0, [sp]
 801dc28:	f001 f884 	bl	801ed34 <__kernel_sinf>
 801dc2c:	eeb1 0a40 	vneg.f32	s0, s0
 801dc30:	e7e4      	b.n	801dbfc <cosf+0x24>
 801dc32:	eddd 0a01 	vldr	s1, [sp, #4]
 801dc36:	ed9d 0a00 	vldr	s0, [sp]
 801dc3a:	f000 fd91 	bl	801e760 <__kernel_cosf>
 801dc3e:	e7f5      	b.n	801dc2c <cosf+0x54>
 801dc40:	eddd 0a01 	vldr	s1, [sp, #4]
 801dc44:	ed9d 0a00 	vldr	s0, [sp]
 801dc48:	2001      	movs	r0, #1
 801dc4a:	f001 f873 	bl	801ed34 <__kernel_sinf>
 801dc4e:	e7d5      	b.n	801dbfc <cosf+0x24>
 801dc50:	3f490fd8 	.word	0x3f490fd8
 801dc54:	00000000 	.word	0x00000000

0801dc58 <fabsf>:
 801dc58:	ee10 3a10 	vmov	r3, s0
 801dc5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dc60:	ee00 3a10 	vmov	s0, r3
 801dc64:	4770      	bx	lr
	...

0801dc68 <sinf>:
 801dc68:	ee10 3a10 	vmov	r3, s0
 801dc6c:	b507      	push	{r0, r1, r2, lr}
 801dc6e:	4a1d      	ldr	r2, [pc, #116]	; (801dce4 <sinf+0x7c>)
 801dc70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dc74:	4293      	cmp	r3, r2
 801dc76:	dc05      	bgt.n	801dc84 <sinf+0x1c>
 801dc78:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801dce8 <sinf+0x80>
 801dc7c:	2000      	movs	r0, #0
 801dc7e:	f001 f859 	bl	801ed34 <__kernel_sinf>
 801dc82:	e004      	b.n	801dc8e <sinf+0x26>
 801dc84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dc88:	db04      	blt.n	801dc94 <sinf+0x2c>
 801dc8a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801dc8e:	b003      	add	sp, #12
 801dc90:	f85d fb04 	ldr.w	pc, [sp], #4
 801dc94:	4668      	mov	r0, sp
 801dc96:	f000 fc23 	bl	801e4e0 <__ieee754_rem_pio2f>
 801dc9a:	f000 0003 	and.w	r0, r0, #3
 801dc9e:	2801      	cmp	r0, #1
 801dca0:	d008      	beq.n	801dcb4 <sinf+0x4c>
 801dca2:	2802      	cmp	r0, #2
 801dca4:	d00d      	beq.n	801dcc2 <sinf+0x5a>
 801dca6:	b9b0      	cbnz	r0, 801dcd6 <sinf+0x6e>
 801dca8:	eddd 0a01 	vldr	s1, [sp, #4]
 801dcac:	ed9d 0a00 	vldr	s0, [sp]
 801dcb0:	2001      	movs	r0, #1
 801dcb2:	e7e4      	b.n	801dc7e <sinf+0x16>
 801dcb4:	eddd 0a01 	vldr	s1, [sp, #4]
 801dcb8:	ed9d 0a00 	vldr	s0, [sp]
 801dcbc:	f000 fd50 	bl	801e760 <__kernel_cosf>
 801dcc0:	e7e5      	b.n	801dc8e <sinf+0x26>
 801dcc2:	eddd 0a01 	vldr	s1, [sp, #4]
 801dcc6:	ed9d 0a00 	vldr	s0, [sp]
 801dcca:	2001      	movs	r0, #1
 801dccc:	f001 f832 	bl	801ed34 <__kernel_sinf>
 801dcd0:	eeb1 0a40 	vneg.f32	s0, s0
 801dcd4:	e7db      	b.n	801dc8e <sinf+0x26>
 801dcd6:	eddd 0a01 	vldr	s1, [sp, #4]
 801dcda:	ed9d 0a00 	vldr	s0, [sp]
 801dcde:	f000 fd3f 	bl	801e760 <__kernel_cosf>
 801dce2:	e7f5      	b.n	801dcd0 <sinf+0x68>
 801dce4:	3f490fd8 	.word	0x3f490fd8
 801dce8:	00000000 	.word	0x00000000

0801dcec <atan2f>:
 801dcec:	f000 b898 	b.w	801de20 <__ieee754_atan2f>

0801dcf0 <powf>:
 801dcf0:	b508      	push	{r3, lr}
 801dcf2:	ed2d 8b04 	vpush	{d8-d9}
 801dcf6:	eeb0 9a40 	vmov.f32	s18, s0
 801dcfa:	eef0 8a60 	vmov.f32	s17, s1
 801dcfe:	f000 f92f 	bl	801df60 <__ieee754_powf>
 801dd02:	4b43      	ldr	r3, [pc, #268]	; (801de10 <powf+0x120>)
 801dd04:	f993 3000 	ldrsb.w	r3, [r3]
 801dd08:	3301      	adds	r3, #1
 801dd0a:	eeb0 8a40 	vmov.f32	s16, s0
 801dd0e:	d012      	beq.n	801dd36 <powf+0x46>
 801dd10:	eef4 8a68 	vcmp.f32	s17, s17
 801dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd18:	d60d      	bvs.n	801dd36 <powf+0x46>
 801dd1a:	eeb4 9a49 	vcmp.f32	s18, s18
 801dd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd22:	d70d      	bvc.n	801dd40 <powf+0x50>
 801dd24:	eef5 8a40 	vcmp.f32	s17, #0.0
 801dd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dd30:	bf08      	it	eq
 801dd32:	eeb0 8a67 	vmoveq.f32	s16, s15
 801dd36:	eeb0 0a48 	vmov.f32	s0, s16
 801dd3a:	ecbd 8b04 	vpop	{d8-d9}
 801dd3e:	bd08      	pop	{r3, pc}
 801dd40:	eddf 9a34 	vldr	s19, [pc, #208]	; 801de14 <powf+0x124>
 801dd44:	eeb4 9a69 	vcmp.f32	s18, s19
 801dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd4c:	d116      	bne.n	801dd7c <powf+0x8c>
 801dd4e:	eef4 8a69 	vcmp.f32	s17, s19
 801dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd56:	d057      	beq.n	801de08 <powf+0x118>
 801dd58:	eeb0 0a68 	vmov.f32	s0, s17
 801dd5c:	f7ff f944 	bl	801cfe8 <finitef>
 801dd60:	2800      	cmp	r0, #0
 801dd62:	d0e8      	beq.n	801dd36 <powf+0x46>
 801dd64:	eef4 8ae9 	vcmpe.f32	s17, s19
 801dd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd6c:	d5e3      	bpl.n	801dd36 <powf+0x46>
 801dd6e:	f7fb f94d 	bl	801900c <__errno>
 801dd72:	2321      	movs	r3, #33	; 0x21
 801dd74:	6003      	str	r3, [r0, #0]
 801dd76:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801de18 <powf+0x128>
 801dd7a:	e7dc      	b.n	801dd36 <powf+0x46>
 801dd7c:	f7ff f934 	bl	801cfe8 <finitef>
 801dd80:	bb50      	cbnz	r0, 801ddd8 <powf+0xe8>
 801dd82:	eeb0 0a49 	vmov.f32	s0, s18
 801dd86:	f7ff f92f 	bl	801cfe8 <finitef>
 801dd8a:	b328      	cbz	r0, 801ddd8 <powf+0xe8>
 801dd8c:	eeb0 0a68 	vmov.f32	s0, s17
 801dd90:	f7ff f92a 	bl	801cfe8 <finitef>
 801dd94:	b300      	cbz	r0, 801ddd8 <powf+0xe8>
 801dd96:	eeb4 8a48 	vcmp.f32	s16, s16
 801dd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd9e:	d706      	bvc.n	801ddae <powf+0xbe>
 801dda0:	f7fb f934 	bl	801900c <__errno>
 801dda4:	2321      	movs	r3, #33	; 0x21
 801dda6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801ddaa:	6003      	str	r3, [r0, #0]
 801ddac:	e7c3      	b.n	801dd36 <powf+0x46>
 801ddae:	f7fb f92d 	bl	801900c <__errno>
 801ddb2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801ddb6:	2322      	movs	r3, #34	; 0x22
 801ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddbc:	6003      	str	r3, [r0, #0]
 801ddbe:	d508      	bpl.n	801ddd2 <powf+0xe2>
 801ddc0:	eeb0 0a68 	vmov.f32	s0, s17
 801ddc4:	f001 f840 	bl	801ee48 <rintf>
 801ddc8:	eeb4 0a68 	vcmp.f32	s0, s17
 801ddcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddd0:	d1d1      	bne.n	801dd76 <powf+0x86>
 801ddd2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801de1c <powf+0x12c>
 801ddd6:	e7ae      	b.n	801dd36 <powf+0x46>
 801ddd8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801dddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde0:	d1a9      	bne.n	801dd36 <powf+0x46>
 801dde2:	eeb0 0a49 	vmov.f32	s0, s18
 801dde6:	f7ff f8ff 	bl	801cfe8 <finitef>
 801ddea:	2800      	cmp	r0, #0
 801ddec:	d0a3      	beq.n	801dd36 <powf+0x46>
 801ddee:	eeb0 0a68 	vmov.f32	s0, s17
 801ddf2:	f7ff f8f9 	bl	801cfe8 <finitef>
 801ddf6:	2800      	cmp	r0, #0
 801ddf8:	d09d      	beq.n	801dd36 <powf+0x46>
 801ddfa:	f7fb f907 	bl	801900c <__errno>
 801ddfe:	2322      	movs	r3, #34	; 0x22
 801de00:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801de14 <powf+0x124>
 801de04:	6003      	str	r3, [r0, #0]
 801de06:	e796      	b.n	801dd36 <powf+0x46>
 801de08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801de0c:	e793      	b.n	801dd36 <powf+0x46>
 801de0e:	bf00      	nop
 801de10:	2000021c 	.word	0x2000021c
 801de14:	00000000 	.word	0x00000000
 801de18:	ff800000 	.word	0xff800000
 801de1c:	7f800000 	.word	0x7f800000

0801de20 <__ieee754_atan2f>:
 801de20:	ee10 2a90 	vmov	r2, s1
 801de24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801de28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801de2c:	b510      	push	{r4, lr}
 801de2e:	eef0 7a40 	vmov.f32	s15, s0
 801de32:	dc06      	bgt.n	801de42 <__ieee754_atan2f+0x22>
 801de34:	ee10 0a10 	vmov	r0, s0
 801de38:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801de3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801de40:	dd04      	ble.n	801de4c <__ieee754_atan2f+0x2c>
 801de42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801de46:	eeb0 0a67 	vmov.f32	s0, s15
 801de4a:	bd10      	pop	{r4, pc}
 801de4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801de50:	d103      	bne.n	801de5a <__ieee754_atan2f+0x3a>
 801de52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de56:	f7ff bdeb 	b.w	801da30 <atanf>
 801de5a:	1794      	asrs	r4, r2, #30
 801de5c:	f004 0402 	and.w	r4, r4, #2
 801de60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801de64:	b943      	cbnz	r3, 801de78 <__ieee754_atan2f+0x58>
 801de66:	2c02      	cmp	r4, #2
 801de68:	d05e      	beq.n	801df28 <__ieee754_atan2f+0x108>
 801de6a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801df3c <__ieee754_atan2f+0x11c>
 801de6e:	2c03      	cmp	r4, #3
 801de70:	bf08      	it	eq
 801de72:	eef0 7a47 	vmoveq.f32	s15, s14
 801de76:	e7e6      	b.n	801de46 <__ieee754_atan2f+0x26>
 801de78:	b941      	cbnz	r1, 801de8c <__ieee754_atan2f+0x6c>
 801de7a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801df40 <__ieee754_atan2f+0x120>
 801de7e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801df44 <__ieee754_atan2f+0x124>
 801de82:	2800      	cmp	r0, #0
 801de84:	bfb8      	it	lt
 801de86:	eef0 7a40 	vmovlt.f32	s15, s0
 801de8a:	e7dc      	b.n	801de46 <__ieee754_atan2f+0x26>
 801de8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801de90:	d110      	bne.n	801deb4 <__ieee754_atan2f+0x94>
 801de92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801de96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801de9a:	d107      	bne.n	801deac <__ieee754_atan2f+0x8c>
 801de9c:	2c02      	cmp	r4, #2
 801de9e:	d846      	bhi.n	801df2e <__ieee754_atan2f+0x10e>
 801dea0:	4b29      	ldr	r3, [pc, #164]	; (801df48 <__ieee754_atan2f+0x128>)
 801dea2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801dea6:	edd4 7a00 	vldr	s15, [r4]
 801deaa:	e7cc      	b.n	801de46 <__ieee754_atan2f+0x26>
 801deac:	2c02      	cmp	r4, #2
 801deae:	d841      	bhi.n	801df34 <__ieee754_atan2f+0x114>
 801deb0:	4b26      	ldr	r3, [pc, #152]	; (801df4c <__ieee754_atan2f+0x12c>)
 801deb2:	e7f6      	b.n	801dea2 <__ieee754_atan2f+0x82>
 801deb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801deb8:	d0df      	beq.n	801de7a <__ieee754_atan2f+0x5a>
 801deba:	1a5b      	subs	r3, r3, r1
 801debc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801dec0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801dec4:	da1a      	bge.n	801defc <__ieee754_atan2f+0xdc>
 801dec6:	2a00      	cmp	r2, #0
 801dec8:	da01      	bge.n	801dece <__ieee754_atan2f+0xae>
 801deca:	313c      	adds	r1, #60	; 0x3c
 801decc:	db19      	blt.n	801df02 <__ieee754_atan2f+0xe2>
 801dece:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801ded2:	f7ff fec1 	bl	801dc58 <fabsf>
 801ded6:	f7ff fdab 	bl	801da30 <atanf>
 801deda:	eef0 7a40 	vmov.f32	s15, s0
 801dede:	2c01      	cmp	r4, #1
 801dee0:	d012      	beq.n	801df08 <__ieee754_atan2f+0xe8>
 801dee2:	2c02      	cmp	r4, #2
 801dee4:	d017      	beq.n	801df16 <__ieee754_atan2f+0xf6>
 801dee6:	2c00      	cmp	r4, #0
 801dee8:	d0ad      	beq.n	801de46 <__ieee754_atan2f+0x26>
 801deea:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801df50 <__ieee754_atan2f+0x130>
 801deee:	ee77 7a80 	vadd.f32	s15, s15, s0
 801def2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801df54 <__ieee754_atan2f+0x134>
 801def6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801defa:	e7a4      	b.n	801de46 <__ieee754_atan2f+0x26>
 801defc:	eddf 7a10 	vldr	s15, [pc, #64]	; 801df40 <__ieee754_atan2f+0x120>
 801df00:	e7ed      	b.n	801dede <__ieee754_atan2f+0xbe>
 801df02:	eddf 7a15 	vldr	s15, [pc, #84]	; 801df58 <__ieee754_atan2f+0x138>
 801df06:	e7ea      	b.n	801dede <__ieee754_atan2f+0xbe>
 801df08:	ee17 3a90 	vmov	r3, s15
 801df0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801df10:	ee07 3a90 	vmov	s15, r3
 801df14:	e797      	b.n	801de46 <__ieee754_atan2f+0x26>
 801df16:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801df50 <__ieee754_atan2f+0x130>
 801df1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801df1e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801df54 <__ieee754_atan2f+0x134>
 801df22:	ee70 7a67 	vsub.f32	s15, s0, s15
 801df26:	e78e      	b.n	801de46 <__ieee754_atan2f+0x26>
 801df28:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801df54 <__ieee754_atan2f+0x134>
 801df2c:	e78b      	b.n	801de46 <__ieee754_atan2f+0x26>
 801df2e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801df5c <__ieee754_atan2f+0x13c>
 801df32:	e788      	b.n	801de46 <__ieee754_atan2f+0x26>
 801df34:	eddf 7a08 	vldr	s15, [pc, #32]	; 801df58 <__ieee754_atan2f+0x138>
 801df38:	e785      	b.n	801de46 <__ieee754_atan2f+0x26>
 801df3a:	bf00      	nop
 801df3c:	c0490fdb 	.word	0xc0490fdb
 801df40:	3fc90fdb 	.word	0x3fc90fdb
 801df44:	bfc90fdb 	.word	0xbfc90fdb
 801df48:	0801fbac 	.word	0x0801fbac
 801df4c:	0801fbb8 	.word	0x0801fbb8
 801df50:	33bbbd2e 	.word	0x33bbbd2e
 801df54:	40490fdb 	.word	0x40490fdb
 801df58:	00000000 	.word	0x00000000
 801df5c:	3f490fdb 	.word	0x3f490fdb

0801df60 <__ieee754_powf>:
 801df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df64:	ee10 5a90 	vmov	r5, s1
 801df68:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801df6c:	ed2d 8b02 	vpush	{d8}
 801df70:	eeb0 8a40 	vmov.f32	s16, s0
 801df74:	eef0 8a60 	vmov.f32	s17, s1
 801df78:	f000 8291 	beq.w	801e49e <__ieee754_powf+0x53e>
 801df7c:	ee10 8a10 	vmov	r8, s0
 801df80:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801df84:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801df88:	dc06      	bgt.n	801df98 <__ieee754_powf+0x38>
 801df8a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801df8e:	dd0a      	ble.n	801dfa6 <__ieee754_powf+0x46>
 801df90:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801df94:	f000 8283 	beq.w	801e49e <__ieee754_powf+0x53e>
 801df98:	ecbd 8b02 	vpop	{d8}
 801df9c:	48d8      	ldr	r0, [pc, #864]	; (801e300 <__ieee754_powf+0x3a0>)
 801df9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dfa2:	f7fb bfdd 	b.w	8019f60 <nanf>
 801dfa6:	f1b8 0f00 	cmp.w	r8, #0
 801dfaa:	da1f      	bge.n	801dfec <__ieee754_powf+0x8c>
 801dfac:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801dfb0:	da2e      	bge.n	801e010 <__ieee754_powf+0xb0>
 801dfb2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801dfb6:	f2c0 827b 	blt.w	801e4b0 <__ieee754_powf+0x550>
 801dfba:	15fb      	asrs	r3, r7, #23
 801dfbc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801dfc0:	fa47 f603 	asr.w	r6, r7, r3
 801dfc4:	fa06 f303 	lsl.w	r3, r6, r3
 801dfc8:	42bb      	cmp	r3, r7
 801dfca:	f040 8271 	bne.w	801e4b0 <__ieee754_powf+0x550>
 801dfce:	f006 0601 	and.w	r6, r6, #1
 801dfd2:	f1c6 0602 	rsb	r6, r6, #2
 801dfd6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801dfda:	d120      	bne.n	801e01e <__ieee754_powf+0xbe>
 801dfdc:	2d00      	cmp	r5, #0
 801dfde:	f280 8264 	bge.w	801e4aa <__ieee754_powf+0x54a>
 801dfe2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dfe6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801dfea:	e00d      	b.n	801e008 <__ieee754_powf+0xa8>
 801dfec:	2600      	movs	r6, #0
 801dfee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801dff2:	d1f0      	bne.n	801dfd6 <__ieee754_powf+0x76>
 801dff4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801dff8:	f000 8251 	beq.w	801e49e <__ieee754_powf+0x53e>
 801dffc:	dd0a      	ble.n	801e014 <__ieee754_powf+0xb4>
 801dffe:	2d00      	cmp	r5, #0
 801e000:	f280 8250 	bge.w	801e4a4 <__ieee754_powf+0x544>
 801e004:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801e304 <__ieee754_powf+0x3a4>
 801e008:	ecbd 8b02 	vpop	{d8}
 801e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e010:	2602      	movs	r6, #2
 801e012:	e7ec      	b.n	801dfee <__ieee754_powf+0x8e>
 801e014:	2d00      	cmp	r5, #0
 801e016:	daf5      	bge.n	801e004 <__ieee754_powf+0xa4>
 801e018:	eeb1 0a68 	vneg.f32	s0, s17
 801e01c:	e7f4      	b.n	801e008 <__ieee754_powf+0xa8>
 801e01e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801e022:	d102      	bne.n	801e02a <__ieee754_powf+0xca>
 801e024:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e028:	e7ee      	b.n	801e008 <__ieee754_powf+0xa8>
 801e02a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801e02e:	eeb0 0a48 	vmov.f32	s0, s16
 801e032:	d108      	bne.n	801e046 <__ieee754_powf+0xe6>
 801e034:	f1b8 0f00 	cmp.w	r8, #0
 801e038:	db05      	blt.n	801e046 <__ieee754_powf+0xe6>
 801e03a:	ecbd 8b02 	vpop	{d8}
 801e03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e042:	f000 bb89 	b.w	801e758 <__ieee754_sqrtf>
 801e046:	f7ff fe07 	bl	801dc58 <fabsf>
 801e04a:	b124      	cbz	r4, 801e056 <__ieee754_powf+0xf6>
 801e04c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801e050:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801e054:	d117      	bne.n	801e086 <__ieee754_powf+0x126>
 801e056:	2d00      	cmp	r5, #0
 801e058:	bfbc      	itt	lt
 801e05a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801e05e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801e062:	f1b8 0f00 	cmp.w	r8, #0
 801e066:	dacf      	bge.n	801e008 <__ieee754_powf+0xa8>
 801e068:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801e06c:	ea54 0306 	orrs.w	r3, r4, r6
 801e070:	d104      	bne.n	801e07c <__ieee754_powf+0x11c>
 801e072:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e076:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801e07a:	e7c5      	b.n	801e008 <__ieee754_powf+0xa8>
 801e07c:	2e01      	cmp	r6, #1
 801e07e:	d1c3      	bne.n	801e008 <__ieee754_powf+0xa8>
 801e080:	eeb1 0a40 	vneg.f32	s0, s0
 801e084:	e7c0      	b.n	801e008 <__ieee754_powf+0xa8>
 801e086:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801e08a:	3801      	subs	r0, #1
 801e08c:	ea56 0300 	orrs.w	r3, r6, r0
 801e090:	d104      	bne.n	801e09c <__ieee754_powf+0x13c>
 801e092:	ee38 8a48 	vsub.f32	s16, s16, s16
 801e096:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801e09a:	e7b5      	b.n	801e008 <__ieee754_powf+0xa8>
 801e09c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801e0a0:	dd6b      	ble.n	801e17a <__ieee754_powf+0x21a>
 801e0a2:	4b99      	ldr	r3, [pc, #612]	; (801e308 <__ieee754_powf+0x3a8>)
 801e0a4:	429c      	cmp	r4, r3
 801e0a6:	dc06      	bgt.n	801e0b6 <__ieee754_powf+0x156>
 801e0a8:	2d00      	cmp	r5, #0
 801e0aa:	daab      	bge.n	801e004 <__ieee754_powf+0xa4>
 801e0ac:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801e30c <__ieee754_powf+0x3ac>
 801e0b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e0b4:	e7a8      	b.n	801e008 <__ieee754_powf+0xa8>
 801e0b6:	4b96      	ldr	r3, [pc, #600]	; (801e310 <__ieee754_powf+0x3b0>)
 801e0b8:	429c      	cmp	r4, r3
 801e0ba:	dd02      	ble.n	801e0c2 <__ieee754_powf+0x162>
 801e0bc:	2d00      	cmp	r5, #0
 801e0be:	dcf5      	bgt.n	801e0ac <__ieee754_powf+0x14c>
 801e0c0:	e7a0      	b.n	801e004 <__ieee754_powf+0xa4>
 801e0c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e0c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e0ca:	eddf 6a92 	vldr	s13, [pc, #584]	; 801e314 <__ieee754_powf+0x3b4>
 801e0ce:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801e0d2:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e0d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e0da:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e0de:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e0e6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801e318 <__ieee754_powf+0x3b8>
 801e0ea:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801e0ee:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801e31c <__ieee754_powf+0x3bc>
 801e0f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e0f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801e320 <__ieee754_powf+0x3c0>
 801e0fa:	eef0 6a67 	vmov.f32	s13, s15
 801e0fe:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e102:	ee16 3a90 	vmov	r3, s13
 801e106:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e10a:	f023 030f 	bic.w	r3, r3, #15
 801e10e:	ee00 3a90 	vmov	s1, r3
 801e112:	eee0 0a47 	vfms.f32	s1, s0, s14
 801e116:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e11a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801e11e:	f025 050f 	bic.w	r5, r5, #15
 801e122:	ee07 5a10 	vmov	s14, r5
 801e126:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e12a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e12e:	ee07 3a90 	vmov	s15, r3
 801e132:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e136:	3e01      	subs	r6, #1
 801e138:	ea56 0200 	orrs.w	r2, r6, r0
 801e13c:	ee07 5a10 	vmov	s14, r5
 801e140:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e144:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e148:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e14c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801e150:	ee17 4a10 	vmov	r4, s14
 801e154:	bf08      	it	eq
 801e156:	eeb0 8a40 	vmoveq.f32	s16, s0
 801e15a:	2c00      	cmp	r4, #0
 801e15c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e160:	f340 8184 	ble.w	801e46c <__ieee754_powf+0x50c>
 801e164:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801e168:	f340 80fc 	ble.w	801e364 <__ieee754_powf+0x404>
 801e16c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801e30c <__ieee754_powf+0x3ac>
 801e170:	ee28 0a27 	vmul.f32	s0, s16, s15
 801e174:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e178:	e746      	b.n	801e008 <__ieee754_powf+0xa8>
 801e17a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801e17e:	bf01      	itttt	eq
 801e180:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801e324 <__ieee754_powf+0x3c4>
 801e184:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e188:	f06f 0217 	mvneq.w	r2, #23
 801e18c:	ee17 4a90 	vmoveq	r4, s15
 801e190:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801e194:	bf18      	it	ne
 801e196:	2200      	movne	r2, #0
 801e198:	3b7f      	subs	r3, #127	; 0x7f
 801e19a:	4413      	add	r3, r2
 801e19c:	4a62      	ldr	r2, [pc, #392]	; (801e328 <__ieee754_powf+0x3c8>)
 801e19e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801e1a2:	4294      	cmp	r4, r2
 801e1a4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801e1a8:	dd06      	ble.n	801e1b8 <__ieee754_powf+0x258>
 801e1aa:	4a60      	ldr	r2, [pc, #384]	; (801e32c <__ieee754_powf+0x3cc>)
 801e1ac:	4294      	cmp	r4, r2
 801e1ae:	f340 80a4 	ble.w	801e2fa <__ieee754_powf+0x39a>
 801e1b2:	3301      	adds	r3, #1
 801e1b4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801e1b8:	2400      	movs	r4, #0
 801e1ba:	4a5d      	ldr	r2, [pc, #372]	; (801e330 <__ieee754_powf+0x3d0>)
 801e1bc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801e1c0:	ee07 1a90 	vmov	s15, r1
 801e1c4:	ed92 7a00 	vldr	s14, [r2]
 801e1c8:	4a5a      	ldr	r2, [pc, #360]	; (801e334 <__ieee754_powf+0x3d4>)
 801e1ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 801e1ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e1d2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801e1d6:	1049      	asrs	r1, r1, #1
 801e1d8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801e1dc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801e1e0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801e1e4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801e1e8:	ee06 1a10 	vmov	s12, r1
 801e1ec:	ee65 4a26 	vmul.f32	s9, s10, s13
 801e1f0:	ee36 7a47 	vsub.f32	s14, s12, s14
 801e1f4:	ee14 7a90 	vmov	r7, s9
 801e1f8:	4017      	ands	r7, r2
 801e1fa:	ee05 7a90 	vmov	s11, r7
 801e1fe:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801e202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e206:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801e338 <__ieee754_powf+0x3d8>
 801e20a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801e20e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801e212:	ee25 6a26 	vmul.f32	s12, s10, s13
 801e216:	eddf 6a49 	vldr	s13, [pc, #292]	; 801e33c <__ieee754_powf+0x3dc>
 801e21a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801e21e:	eddf 6a48 	vldr	s13, [pc, #288]	; 801e340 <__ieee754_powf+0x3e0>
 801e222:	eee7 6a27 	vfma.f32	s13, s14, s15
 801e226:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801e314 <__ieee754_powf+0x3b4>
 801e22a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801e22e:	eddf 6a45 	vldr	s13, [pc, #276]	; 801e344 <__ieee754_powf+0x3e4>
 801e232:	eee7 6a27 	vfma.f32	s13, s14, s15
 801e236:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801e348 <__ieee754_powf+0x3e8>
 801e23a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801e23e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801e242:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801e246:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e24a:	eee5 6a07 	vfma.f32	s13, s10, s14
 801e24e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801e252:	eef0 7a45 	vmov.f32	s15, s10
 801e256:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801e25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e25e:	ee17 1a90 	vmov	r1, s15
 801e262:	4011      	ands	r1, r2
 801e264:	ee07 1a90 	vmov	s15, r1
 801e268:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801e26c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801e270:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e274:	ee27 7a24 	vmul.f32	s14, s14, s9
 801e278:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e27c:	eeb0 6a47 	vmov.f32	s12, s14
 801e280:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e284:	ee16 1a10 	vmov	r1, s12
 801e288:	4011      	ands	r1, r2
 801e28a:	ee06 1a90 	vmov	s13, r1
 801e28e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801e292:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801e34c <__ieee754_powf+0x3ec>
 801e296:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801e350 <__ieee754_powf+0x3f0>
 801e29a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e29e:	ee06 1a10 	vmov	s12, r1
 801e2a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e2a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801e354 <__ieee754_powf+0x3f4>
 801e2aa:	492b      	ldr	r1, [pc, #172]	; (801e358 <__ieee754_powf+0x3f8>)
 801e2ac:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e2b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e2b4:	edd1 7a00 	vldr	s15, [r1]
 801e2b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e2bc:	ee07 3a90 	vmov	s15, r3
 801e2c0:	4b26      	ldr	r3, [pc, #152]	; (801e35c <__ieee754_powf+0x3fc>)
 801e2c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e2c6:	eef0 7a47 	vmov.f32	s15, s14
 801e2ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e2ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e2d2:	edd4 0a00 	vldr	s1, [r4]
 801e2d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e2de:	ee17 3a90 	vmov	r3, s15
 801e2e2:	4013      	ands	r3, r2
 801e2e4:	ee07 3a90 	vmov	s15, r3
 801e2e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801e2ec:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801e2f0:	eee6 6a65 	vfms.f32	s13, s12, s11
 801e2f4:	ee77 7a66 	vsub.f32	s15, s14, s13
 801e2f8:	e70f      	b.n	801e11a <__ieee754_powf+0x1ba>
 801e2fa:	2401      	movs	r4, #1
 801e2fc:	e75d      	b.n	801e1ba <__ieee754_powf+0x25a>
 801e2fe:	bf00      	nop
 801e300:	0801fb28 	.word	0x0801fb28
 801e304:	00000000 	.word	0x00000000
 801e308:	3f7ffff7 	.word	0x3f7ffff7
 801e30c:	7149f2ca 	.word	0x7149f2ca
 801e310:	3f800007 	.word	0x3f800007
 801e314:	3eaaaaab 	.word	0x3eaaaaab
 801e318:	3fb8aa3b 	.word	0x3fb8aa3b
 801e31c:	36eca570 	.word	0x36eca570
 801e320:	3fb8aa00 	.word	0x3fb8aa00
 801e324:	4b800000 	.word	0x4b800000
 801e328:	001cc471 	.word	0x001cc471
 801e32c:	005db3d6 	.word	0x005db3d6
 801e330:	0801fbc4 	.word	0x0801fbc4
 801e334:	fffff000 	.word	0xfffff000
 801e338:	3e6c3255 	.word	0x3e6c3255
 801e33c:	3e53f142 	.word	0x3e53f142
 801e340:	3e8ba305 	.word	0x3e8ba305
 801e344:	3edb6db7 	.word	0x3edb6db7
 801e348:	3f19999a 	.word	0x3f19999a
 801e34c:	3f76384f 	.word	0x3f76384f
 801e350:	3f763800 	.word	0x3f763800
 801e354:	369dc3a0 	.word	0x369dc3a0
 801e358:	0801fbd4 	.word	0x0801fbd4
 801e35c:	0801fbcc 	.word	0x0801fbcc
 801e360:	3338aa3c 	.word	0x3338aa3c
 801e364:	f040 8092 	bne.w	801e48c <__ieee754_powf+0x52c>
 801e368:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801e360 <__ieee754_powf+0x400>
 801e36c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e370:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801e374:	eef4 6ac7 	vcmpe.f32	s13, s14
 801e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37c:	f73f aef6 	bgt.w	801e16c <__ieee754_powf+0x20c>
 801e380:	15db      	asrs	r3, r3, #23
 801e382:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801e386:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801e38a:	4103      	asrs	r3, r0
 801e38c:	4423      	add	r3, r4
 801e38e:	4949      	ldr	r1, [pc, #292]	; (801e4b4 <__ieee754_powf+0x554>)
 801e390:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e394:	3a7f      	subs	r2, #127	; 0x7f
 801e396:	4111      	asrs	r1, r2
 801e398:	ea23 0101 	bic.w	r1, r3, r1
 801e39c:	ee07 1a10 	vmov	s14, r1
 801e3a0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801e3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801e3a8:	f1c2 0217 	rsb	r2, r2, #23
 801e3ac:	4110      	asrs	r0, r2
 801e3ae:	2c00      	cmp	r4, #0
 801e3b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e3b4:	bfb8      	it	lt
 801e3b6:	4240      	neglt	r0, r0
 801e3b8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e3bc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801e4b8 <__ieee754_powf+0x558>
 801e3c0:	ee17 3a10 	vmov	r3, s14
 801e3c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e3c8:	f023 030f 	bic.w	r3, r3, #15
 801e3cc:	ee07 3a10 	vmov	s14, r3
 801e3d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e3d4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e3d8:	eddf 7a38 	vldr	s15, [pc, #224]	; 801e4bc <__ieee754_powf+0x55c>
 801e3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e3e0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801e3e4:	eddf 6a36 	vldr	s13, [pc, #216]	; 801e4c0 <__ieee754_powf+0x560>
 801e3e8:	eeb0 0a67 	vmov.f32	s0, s15
 801e3ec:	eea7 0a26 	vfma.f32	s0, s14, s13
 801e3f0:	eeb0 6a40 	vmov.f32	s12, s0
 801e3f4:	eea7 6a66 	vfms.f32	s12, s14, s13
 801e3f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e3fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801e400:	eddf 6a30 	vldr	s13, [pc, #192]	; 801e4c4 <__ieee754_powf+0x564>
 801e404:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801e4c8 <__ieee754_powf+0x568>
 801e408:	eea7 6a26 	vfma.f32	s12, s14, s13
 801e40c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801e4cc <__ieee754_powf+0x56c>
 801e410:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e414:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801e4d0 <__ieee754_powf+0x570>
 801e418:	eea6 6a87 	vfma.f32	s12, s13, s14
 801e41c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801e4d4 <__ieee754_powf+0x574>
 801e420:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e424:	eeb0 6a40 	vmov.f32	s12, s0
 801e428:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801e42c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e430:	eeb0 7a46 	vmov.f32	s14, s12
 801e434:	ee77 6a66 	vsub.f32	s13, s14, s13
 801e438:	ee20 6a06 	vmul.f32	s12, s0, s12
 801e43c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801e440:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801e444:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e448:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e44c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e450:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801e454:	ee10 3a10 	vmov	r3, s0
 801e458:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801e45c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e460:	da1a      	bge.n	801e498 <__ieee754_powf+0x538>
 801e462:	f7fb fd83 	bl	8019f6c <scalbnf>
 801e466:	ee20 0a08 	vmul.f32	s0, s0, s16
 801e46a:	e5cd      	b.n	801e008 <__ieee754_powf+0xa8>
 801e46c:	4a1a      	ldr	r2, [pc, #104]	; (801e4d8 <__ieee754_powf+0x578>)
 801e46e:	4293      	cmp	r3, r2
 801e470:	dd02      	ble.n	801e478 <__ieee754_powf+0x518>
 801e472:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801e4dc <__ieee754_powf+0x57c>
 801e476:	e67b      	b.n	801e170 <__ieee754_powf+0x210>
 801e478:	d108      	bne.n	801e48c <__ieee754_powf+0x52c>
 801e47a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e47e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801e482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e486:	f6ff af7b 	blt.w	801e380 <__ieee754_powf+0x420>
 801e48a:	e7f2      	b.n	801e472 <__ieee754_powf+0x512>
 801e48c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801e490:	f73f af76 	bgt.w	801e380 <__ieee754_powf+0x420>
 801e494:	2000      	movs	r0, #0
 801e496:	e78f      	b.n	801e3b8 <__ieee754_powf+0x458>
 801e498:	ee00 3a10 	vmov	s0, r3
 801e49c:	e7e3      	b.n	801e466 <__ieee754_powf+0x506>
 801e49e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e4a2:	e5b1      	b.n	801e008 <__ieee754_powf+0xa8>
 801e4a4:	eeb0 0a68 	vmov.f32	s0, s17
 801e4a8:	e5ae      	b.n	801e008 <__ieee754_powf+0xa8>
 801e4aa:	eeb0 0a48 	vmov.f32	s0, s16
 801e4ae:	e5ab      	b.n	801e008 <__ieee754_powf+0xa8>
 801e4b0:	2600      	movs	r6, #0
 801e4b2:	e590      	b.n	801dfd6 <__ieee754_powf+0x76>
 801e4b4:	007fffff 	.word	0x007fffff
 801e4b8:	3f317218 	.word	0x3f317218
 801e4bc:	35bfbe8c 	.word	0x35bfbe8c
 801e4c0:	3f317200 	.word	0x3f317200
 801e4c4:	3331bb4c 	.word	0x3331bb4c
 801e4c8:	b5ddea0e 	.word	0xb5ddea0e
 801e4cc:	388ab355 	.word	0x388ab355
 801e4d0:	bb360b61 	.word	0xbb360b61
 801e4d4:	3e2aaaab 	.word	0x3e2aaaab
 801e4d8:	43160000 	.word	0x43160000
 801e4dc:	0da24260 	.word	0x0da24260

0801e4e0 <__ieee754_rem_pio2f>:
 801e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4e2:	ee10 6a10 	vmov	r6, s0
 801e4e6:	4b8e      	ldr	r3, [pc, #568]	; (801e720 <__ieee754_rem_pio2f+0x240>)
 801e4e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801e4ec:	429d      	cmp	r5, r3
 801e4ee:	b087      	sub	sp, #28
 801e4f0:	eef0 7a40 	vmov.f32	s15, s0
 801e4f4:	4604      	mov	r4, r0
 801e4f6:	dc05      	bgt.n	801e504 <__ieee754_rem_pio2f+0x24>
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	ed80 0a00 	vstr	s0, [r0]
 801e4fe:	6043      	str	r3, [r0, #4]
 801e500:	2000      	movs	r0, #0
 801e502:	e01a      	b.n	801e53a <__ieee754_rem_pio2f+0x5a>
 801e504:	4b87      	ldr	r3, [pc, #540]	; (801e724 <__ieee754_rem_pio2f+0x244>)
 801e506:	429d      	cmp	r5, r3
 801e508:	dc46      	bgt.n	801e598 <__ieee754_rem_pio2f+0xb8>
 801e50a:	2e00      	cmp	r6, #0
 801e50c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801e728 <__ieee754_rem_pio2f+0x248>
 801e510:	4b86      	ldr	r3, [pc, #536]	; (801e72c <__ieee754_rem_pio2f+0x24c>)
 801e512:	f025 050f 	bic.w	r5, r5, #15
 801e516:	dd1f      	ble.n	801e558 <__ieee754_rem_pio2f+0x78>
 801e518:	429d      	cmp	r5, r3
 801e51a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e51e:	d00e      	beq.n	801e53e <__ieee754_rem_pio2f+0x5e>
 801e520:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801e730 <__ieee754_rem_pio2f+0x250>
 801e524:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801e528:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e52c:	ed80 0a00 	vstr	s0, [r0]
 801e530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e534:	2001      	movs	r0, #1
 801e536:	edc4 7a01 	vstr	s15, [r4, #4]
 801e53a:	b007      	add	sp, #28
 801e53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e53e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801e734 <__ieee754_rem_pio2f+0x254>
 801e542:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801e738 <__ieee754_rem_pio2f+0x258>
 801e546:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e54a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801e54e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e552:	edc0 6a00 	vstr	s13, [r0]
 801e556:	e7eb      	b.n	801e530 <__ieee754_rem_pio2f+0x50>
 801e558:	429d      	cmp	r5, r3
 801e55a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e55e:	d00e      	beq.n	801e57e <__ieee754_rem_pio2f+0x9e>
 801e560:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801e730 <__ieee754_rem_pio2f+0x250>
 801e564:	ee37 0a87 	vadd.f32	s0, s15, s14
 801e568:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e56c:	ed80 0a00 	vstr	s0, [r0]
 801e570:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e578:	edc4 7a01 	vstr	s15, [r4, #4]
 801e57c:	e7dd      	b.n	801e53a <__ieee754_rem_pio2f+0x5a>
 801e57e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801e734 <__ieee754_rem_pio2f+0x254>
 801e582:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801e738 <__ieee754_rem_pio2f+0x258>
 801e586:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e58a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801e58e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e592:	edc0 6a00 	vstr	s13, [r0]
 801e596:	e7eb      	b.n	801e570 <__ieee754_rem_pio2f+0x90>
 801e598:	4b68      	ldr	r3, [pc, #416]	; (801e73c <__ieee754_rem_pio2f+0x25c>)
 801e59a:	429d      	cmp	r5, r3
 801e59c:	dc72      	bgt.n	801e684 <__ieee754_rem_pio2f+0x1a4>
 801e59e:	f7ff fb5b 	bl	801dc58 <fabsf>
 801e5a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e740 <__ieee754_rem_pio2f+0x260>
 801e5a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e5aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e5b6:	ee17 0a90 	vmov	r0, s15
 801e5ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e728 <__ieee754_rem_pio2f+0x248>
 801e5be:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e5c2:	281f      	cmp	r0, #31
 801e5c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801e730 <__ieee754_rem_pio2f+0x250>
 801e5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5cc:	eeb1 6a47 	vneg.f32	s12, s14
 801e5d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e5d4:	ee16 2a90 	vmov	r2, s13
 801e5d8:	dc1c      	bgt.n	801e614 <__ieee754_rem_pio2f+0x134>
 801e5da:	495a      	ldr	r1, [pc, #360]	; (801e744 <__ieee754_rem_pio2f+0x264>)
 801e5dc:	1e47      	subs	r7, r0, #1
 801e5de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801e5e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801e5e6:	428b      	cmp	r3, r1
 801e5e8:	d014      	beq.n	801e614 <__ieee754_rem_pio2f+0x134>
 801e5ea:	6022      	str	r2, [r4, #0]
 801e5ec:	ed94 7a00 	vldr	s14, [r4]
 801e5f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e5f4:	2e00      	cmp	r6, #0
 801e5f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e5fa:	ed84 0a01 	vstr	s0, [r4, #4]
 801e5fe:	da9c      	bge.n	801e53a <__ieee754_rem_pio2f+0x5a>
 801e600:	eeb1 7a47 	vneg.f32	s14, s14
 801e604:	eeb1 0a40 	vneg.f32	s0, s0
 801e608:	ed84 7a00 	vstr	s14, [r4]
 801e60c:	ed84 0a01 	vstr	s0, [r4, #4]
 801e610:	4240      	negs	r0, r0
 801e612:	e792      	b.n	801e53a <__ieee754_rem_pio2f+0x5a>
 801e614:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e618:	15eb      	asrs	r3, r5, #23
 801e61a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801e61e:	2d08      	cmp	r5, #8
 801e620:	dde3      	ble.n	801e5ea <__ieee754_rem_pio2f+0x10a>
 801e622:	eddf 7a44 	vldr	s15, [pc, #272]	; 801e734 <__ieee754_rem_pio2f+0x254>
 801e626:	eef0 6a40 	vmov.f32	s13, s0
 801e62a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e62e:	ee30 0a66 	vsub.f32	s0, s0, s13
 801e632:	eea6 0a27 	vfma.f32	s0, s12, s15
 801e636:	eddf 7a40 	vldr	s15, [pc, #256]	; 801e738 <__ieee754_rem_pio2f+0x258>
 801e63a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801e63e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801e642:	eef0 7a40 	vmov.f32	s15, s0
 801e646:	ee15 2a90 	vmov	r2, s11
 801e64a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e64e:	1a5b      	subs	r3, r3, r1
 801e650:	2b19      	cmp	r3, #25
 801e652:	dc04      	bgt.n	801e65e <__ieee754_rem_pio2f+0x17e>
 801e654:	edc4 5a00 	vstr	s11, [r4]
 801e658:	eeb0 0a66 	vmov.f32	s0, s13
 801e65c:	e7c6      	b.n	801e5ec <__ieee754_rem_pio2f+0x10c>
 801e65e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e748 <__ieee754_rem_pio2f+0x268>
 801e662:	eeb0 0a66 	vmov.f32	s0, s13
 801e666:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e66a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e66e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801e74c <__ieee754_rem_pio2f+0x26c>
 801e672:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e676:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e67a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e67e:	ed84 7a00 	vstr	s14, [r4]
 801e682:	e7b3      	b.n	801e5ec <__ieee754_rem_pio2f+0x10c>
 801e684:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801e688:	db06      	blt.n	801e698 <__ieee754_rem_pio2f+0x1b8>
 801e68a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e68e:	edc0 7a01 	vstr	s15, [r0, #4]
 801e692:	edc0 7a00 	vstr	s15, [r0]
 801e696:	e733      	b.n	801e500 <__ieee754_rem_pio2f+0x20>
 801e698:	15ea      	asrs	r2, r5, #23
 801e69a:	3a86      	subs	r2, #134	; 0x86
 801e69c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e6a0:	ee07 3a90 	vmov	s15, r3
 801e6a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e6a8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801e750 <__ieee754_rem_pio2f+0x270>
 801e6ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6b4:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e6b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e6bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e6c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e6c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6c8:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e6cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e6d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d8:	edcd 7a05 	vstr	s15, [sp, #20]
 801e6dc:	d11e      	bne.n	801e71c <__ieee754_rem_pio2f+0x23c>
 801e6de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6e6:	bf14      	ite	ne
 801e6e8:	2302      	movne	r3, #2
 801e6ea:	2301      	moveq	r3, #1
 801e6ec:	4919      	ldr	r1, [pc, #100]	; (801e754 <__ieee754_rem_pio2f+0x274>)
 801e6ee:	9101      	str	r1, [sp, #4]
 801e6f0:	2102      	movs	r1, #2
 801e6f2:	9100      	str	r1, [sp, #0]
 801e6f4:	a803      	add	r0, sp, #12
 801e6f6:	4621      	mov	r1, r4
 801e6f8:	f000 f892 	bl	801e820 <__kernel_rem_pio2f>
 801e6fc:	2e00      	cmp	r6, #0
 801e6fe:	f6bf af1c 	bge.w	801e53a <__ieee754_rem_pio2f+0x5a>
 801e702:	edd4 7a00 	vldr	s15, [r4]
 801e706:	eef1 7a67 	vneg.f32	s15, s15
 801e70a:	edc4 7a00 	vstr	s15, [r4]
 801e70e:	edd4 7a01 	vldr	s15, [r4, #4]
 801e712:	eef1 7a67 	vneg.f32	s15, s15
 801e716:	edc4 7a01 	vstr	s15, [r4, #4]
 801e71a:	e779      	b.n	801e610 <__ieee754_rem_pio2f+0x130>
 801e71c:	2303      	movs	r3, #3
 801e71e:	e7e5      	b.n	801e6ec <__ieee754_rem_pio2f+0x20c>
 801e720:	3f490fd8 	.word	0x3f490fd8
 801e724:	4016cbe3 	.word	0x4016cbe3
 801e728:	3fc90f80 	.word	0x3fc90f80
 801e72c:	3fc90fd0 	.word	0x3fc90fd0
 801e730:	37354443 	.word	0x37354443
 801e734:	37354400 	.word	0x37354400
 801e738:	2e85a308 	.word	0x2e85a308
 801e73c:	43490f80 	.word	0x43490f80
 801e740:	3f22f984 	.word	0x3f22f984
 801e744:	0801fbdc 	.word	0x0801fbdc
 801e748:	2e85a300 	.word	0x2e85a300
 801e74c:	248d3132 	.word	0x248d3132
 801e750:	43800000 	.word	0x43800000
 801e754:	0801fc5c 	.word	0x0801fc5c

0801e758 <__ieee754_sqrtf>:
 801e758:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e75c:	4770      	bx	lr
	...

0801e760 <__kernel_cosf>:
 801e760:	ee10 3a10 	vmov	r3, s0
 801e764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e768:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e76c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801e770:	da05      	bge.n	801e77e <__kernel_cosf+0x1e>
 801e772:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e776:	ee17 2a90 	vmov	r2, s15
 801e77a:	2a00      	cmp	r2, #0
 801e77c:	d03d      	beq.n	801e7fa <__kernel_cosf+0x9a>
 801e77e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801e782:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801e800 <__kernel_cosf+0xa0>
 801e786:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801e804 <__kernel_cosf+0xa4>
 801e78a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801e808 <__kernel_cosf+0xa8>
 801e78e:	4a1f      	ldr	r2, [pc, #124]	; (801e80c <__kernel_cosf+0xac>)
 801e790:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e794:	4293      	cmp	r3, r2
 801e796:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e810 <__kernel_cosf+0xb0>
 801e79a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801e79e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801e814 <__kernel_cosf+0xb4>
 801e7a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e7a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801e818 <__kernel_cosf+0xb8>
 801e7aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 801e7ae:	eeb0 7a66 	vmov.f32	s14, s13
 801e7b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e7b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e7ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801e7be:	ee67 6a25 	vmul.f32	s13, s14, s11
 801e7c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801e7c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e7ca:	dc04      	bgt.n	801e7d6 <__kernel_cosf+0x76>
 801e7cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801e7d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 801e7d4:	4770      	bx	lr
 801e7d6:	4a11      	ldr	r2, [pc, #68]	; (801e81c <__kernel_cosf+0xbc>)
 801e7d8:	4293      	cmp	r3, r2
 801e7da:	bfda      	itte	le
 801e7dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801e7e0:	ee06 3a90 	vmovle	s13, r3
 801e7e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801e7e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e7ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 801e7f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e7f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e7f8:	4770      	bx	lr
 801e7fa:	eeb0 0a46 	vmov.f32	s0, s12
 801e7fe:	4770      	bx	lr
 801e800:	ad47d74e 	.word	0xad47d74e
 801e804:	310f74f6 	.word	0x310f74f6
 801e808:	3d2aaaab 	.word	0x3d2aaaab
 801e80c:	3e999999 	.word	0x3e999999
 801e810:	b493f27c 	.word	0xb493f27c
 801e814:	37d00d01 	.word	0x37d00d01
 801e818:	bab60b61 	.word	0xbab60b61
 801e81c:	3f480000 	.word	0x3f480000

0801e820 <__kernel_rem_pio2f>:
 801e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e824:	ed2d 8b04 	vpush	{d8-d9}
 801e828:	b0d7      	sub	sp, #348	; 0x15c
 801e82a:	4616      	mov	r6, r2
 801e82c:	4698      	mov	r8, r3
 801e82e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e830:	4bbb      	ldr	r3, [pc, #748]	; (801eb20 <__kernel_rem_pio2f+0x300>)
 801e832:	9001      	str	r0, [sp, #4]
 801e834:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801e838:	1d33      	adds	r3, r6, #4
 801e83a:	460d      	mov	r5, r1
 801e83c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801e840:	db29      	blt.n	801e896 <__kernel_rem_pio2f+0x76>
 801e842:	1ef1      	subs	r1, r6, #3
 801e844:	bf48      	it	mi
 801e846:	1d31      	addmi	r1, r6, #4
 801e848:	10c9      	asrs	r1, r1, #3
 801e84a:	1c4c      	adds	r4, r1, #1
 801e84c:	00e3      	lsls	r3, r4, #3
 801e84e:	9302      	str	r3, [sp, #8]
 801e850:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e852:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801e856:	eba1 0009 	sub.w	r0, r1, r9
 801e85a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801e85e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801e862:	eb07 0c09 	add.w	ip, r7, r9
 801e866:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801e86a:	2300      	movs	r3, #0
 801e86c:	4563      	cmp	r3, ip
 801e86e:	dd14      	ble.n	801e89a <__kernel_rem_pio2f+0x7a>
 801e870:	ab1a      	add	r3, sp, #104	; 0x68
 801e872:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801e876:	46cc      	mov	ip, r9
 801e878:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801e87c:	f1c8 0b01 	rsb	fp, r8, #1
 801e880:	eb0b 020c 	add.w	r2, fp, ip
 801e884:	4297      	cmp	r7, r2
 801e886:	db27      	blt.n	801e8d8 <__kernel_rem_pio2f+0xb8>
 801e888:	f8dd e004 	ldr.w	lr, [sp, #4]
 801e88c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801e890:	4618      	mov	r0, r3
 801e892:	2200      	movs	r2, #0
 801e894:	e016      	b.n	801e8c4 <__kernel_rem_pio2f+0xa4>
 801e896:	2100      	movs	r1, #0
 801e898:	e7d7      	b.n	801e84a <__kernel_rem_pio2f+0x2a>
 801e89a:	42d8      	cmn	r0, r3
 801e89c:	bf5d      	ittte	pl
 801e89e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801e8a2:	ee07 2a90 	vmovpl	s15, r2
 801e8a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e8aa:	eef0 7a47 	vmovmi.f32	s15, s14
 801e8ae:	ecea 7a01 	vstmia	sl!, {s15}
 801e8b2:	3301      	adds	r3, #1
 801e8b4:	e7da      	b.n	801e86c <__kernel_rem_pio2f+0x4c>
 801e8b6:	ecfe 6a01 	vldmia	lr!, {s13}
 801e8ba:	ed90 7a00 	vldr	s14, [r0]
 801e8be:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e8c2:	3201      	adds	r2, #1
 801e8c4:	454a      	cmp	r2, r9
 801e8c6:	f1a0 0004 	sub.w	r0, r0, #4
 801e8ca:	ddf4      	ble.n	801e8b6 <__kernel_rem_pio2f+0x96>
 801e8cc:	ecea 7a01 	vstmia	sl!, {s15}
 801e8d0:	3304      	adds	r3, #4
 801e8d2:	f10c 0c01 	add.w	ip, ip, #1
 801e8d6:	e7d3      	b.n	801e880 <__kernel_rem_pio2f+0x60>
 801e8d8:	ab06      	add	r3, sp, #24
 801e8da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801e8de:	9304      	str	r3, [sp, #16]
 801e8e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e8e2:	eddf 8a92 	vldr	s17, [pc, #584]	; 801eb2c <__kernel_rem_pio2f+0x30c>
 801e8e6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801eb28 <__kernel_rem_pio2f+0x308>
 801e8ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e8ee:	9303      	str	r3, [sp, #12]
 801e8f0:	46ba      	mov	sl, r7
 801e8f2:	ab56      	add	r3, sp, #344	; 0x158
 801e8f4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e8f8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801e8fc:	ab06      	add	r3, sp, #24
 801e8fe:	4618      	mov	r0, r3
 801e900:	4652      	mov	r2, sl
 801e902:	2a00      	cmp	r2, #0
 801e904:	dc51      	bgt.n	801e9aa <__kernel_rem_pio2f+0x18a>
 801e906:	4620      	mov	r0, r4
 801e908:	9305      	str	r3, [sp, #20]
 801e90a:	f7fb fb2f 	bl	8019f6c <scalbnf>
 801e90e:	eeb0 8a40 	vmov.f32	s16, s0
 801e912:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e916:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e91a:	f000 fa53 	bl	801edc4 <floorf>
 801e91e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e922:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e926:	2c00      	cmp	r4, #0
 801e928:	9b05      	ldr	r3, [sp, #20]
 801e92a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e92e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801e932:	edcd 7a00 	vstr	s15, [sp]
 801e936:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e93a:	dd4b      	ble.n	801e9d4 <__kernel_rem_pio2f+0x1b4>
 801e93c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801e940:	aa06      	add	r2, sp, #24
 801e942:	f1c4 0e08 	rsb	lr, r4, #8
 801e946:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801e94a:	ee17 1a90 	vmov	r1, s15
 801e94e:	fa42 f00e 	asr.w	r0, r2, lr
 801e952:	4401      	add	r1, r0
 801e954:	9100      	str	r1, [sp, #0]
 801e956:	fa00 f00e 	lsl.w	r0, r0, lr
 801e95a:	a906      	add	r1, sp, #24
 801e95c:	1a12      	subs	r2, r2, r0
 801e95e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801e962:	f1c4 0007 	rsb	r0, r4, #7
 801e966:	fa42 fb00 	asr.w	fp, r2, r0
 801e96a:	f1bb 0f00 	cmp.w	fp, #0
 801e96e:	dd43      	ble.n	801e9f8 <__kernel_rem_pio2f+0x1d8>
 801e970:	9a00      	ldr	r2, [sp, #0]
 801e972:	f04f 0e00 	mov.w	lr, #0
 801e976:	3201      	adds	r2, #1
 801e978:	9200      	str	r2, [sp, #0]
 801e97a:	4670      	mov	r0, lr
 801e97c:	45f2      	cmp	sl, lr
 801e97e:	dc6c      	bgt.n	801ea5a <__kernel_rem_pio2f+0x23a>
 801e980:	2c00      	cmp	r4, #0
 801e982:	dd04      	ble.n	801e98e <__kernel_rem_pio2f+0x16e>
 801e984:	2c01      	cmp	r4, #1
 801e986:	d079      	beq.n	801ea7c <__kernel_rem_pio2f+0x25c>
 801e988:	2c02      	cmp	r4, #2
 801e98a:	f000 8082 	beq.w	801ea92 <__kernel_rem_pio2f+0x272>
 801e98e:	f1bb 0f02 	cmp.w	fp, #2
 801e992:	d131      	bne.n	801e9f8 <__kernel_rem_pio2f+0x1d8>
 801e994:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e998:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e99c:	b360      	cbz	r0, 801e9f8 <__kernel_rem_pio2f+0x1d8>
 801e99e:	4620      	mov	r0, r4
 801e9a0:	f7fb fae4 	bl	8019f6c <scalbnf>
 801e9a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e9a8:	e026      	b.n	801e9f8 <__kernel_rem_pio2f+0x1d8>
 801e9aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e9ae:	3a01      	subs	r2, #1
 801e9b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e9b4:	a942      	add	r1, sp, #264	; 0x108
 801e9b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e9ba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801e9be:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e9c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e9c6:	eca0 0a01 	vstmia	r0!, {s0}
 801e9ca:	ed9c 0a00 	vldr	s0, [ip]
 801e9ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e9d2:	e796      	b.n	801e902 <__kernel_rem_pio2f+0xe2>
 801e9d4:	d107      	bne.n	801e9e6 <__kernel_rem_pio2f+0x1c6>
 801e9d6:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801e9da:	a906      	add	r1, sp, #24
 801e9dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e9e0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801e9e4:	e7c1      	b.n	801e96a <__kernel_rem_pio2f+0x14a>
 801e9e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e9ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9f2:	da2f      	bge.n	801ea54 <__kernel_rem_pio2f+0x234>
 801e9f4:	f04f 0b00 	mov.w	fp, #0
 801e9f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea00:	f040 8098 	bne.w	801eb34 <__kernel_rem_pio2f+0x314>
 801ea04:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801ea08:	469c      	mov	ip, r3
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	45bc      	cmp	ip, r7
 801ea0e:	da48      	bge.n	801eaa2 <__kernel_rem_pio2f+0x282>
 801ea10:	2a00      	cmp	r2, #0
 801ea12:	d05f      	beq.n	801ead4 <__kernel_rem_pio2f+0x2b4>
 801ea14:	aa06      	add	r2, sp, #24
 801ea16:	3c08      	subs	r4, #8
 801ea18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ea1c:	2900      	cmp	r1, #0
 801ea1e:	d07d      	beq.n	801eb1c <__kernel_rem_pio2f+0x2fc>
 801ea20:	4620      	mov	r0, r4
 801ea22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ea26:	9301      	str	r3, [sp, #4]
 801ea28:	f7fb faa0 	bl	8019f6c <scalbnf>
 801ea2c:	9b01      	ldr	r3, [sp, #4]
 801ea2e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801eb2c <__kernel_rem_pio2f+0x30c>
 801ea32:	4619      	mov	r1, r3
 801ea34:	2900      	cmp	r1, #0
 801ea36:	f280 80af 	bge.w	801eb98 <__kernel_rem_pio2f+0x378>
 801ea3a:	4618      	mov	r0, r3
 801ea3c:	2400      	movs	r4, #0
 801ea3e:	2800      	cmp	r0, #0
 801ea40:	f2c0 80d0 	blt.w	801ebe4 <__kernel_rem_pio2f+0x3c4>
 801ea44:	a942      	add	r1, sp, #264	; 0x108
 801ea46:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801ea4a:	4a36      	ldr	r2, [pc, #216]	; (801eb24 <__kernel_rem_pio2f+0x304>)
 801ea4c:	eddf 7a38 	vldr	s15, [pc, #224]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801ea50:	2100      	movs	r1, #0
 801ea52:	e0bb      	b.n	801ebcc <__kernel_rem_pio2f+0x3ac>
 801ea54:	f04f 0b02 	mov.w	fp, #2
 801ea58:	e78a      	b.n	801e970 <__kernel_rem_pio2f+0x150>
 801ea5a:	681a      	ldr	r2, [r3, #0]
 801ea5c:	b948      	cbnz	r0, 801ea72 <__kernel_rem_pio2f+0x252>
 801ea5e:	b11a      	cbz	r2, 801ea68 <__kernel_rem_pio2f+0x248>
 801ea60:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ea64:	601a      	str	r2, [r3, #0]
 801ea66:	2201      	movs	r2, #1
 801ea68:	f10e 0e01 	add.w	lr, lr, #1
 801ea6c:	3304      	adds	r3, #4
 801ea6e:	4610      	mov	r0, r2
 801ea70:	e784      	b.n	801e97c <__kernel_rem_pio2f+0x15c>
 801ea72:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801ea76:	601a      	str	r2, [r3, #0]
 801ea78:	4602      	mov	r2, r0
 801ea7a:	e7f5      	b.n	801ea68 <__kernel_rem_pio2f+0x248>
 801ea7c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801ea80:	ab06      	add	r3, sp, #24
 801ea82:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ea86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ea8a:	aa06      	add	r2, sp, #24
 801ea8c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801ea90:	e77d      	b.n	801e98e <__kernel_rem_pio2f+0x16e>
 801ea92:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801ea96:	ab06      	add	r3, sp, #24
 801ea98:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ea9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eaa0:	e7f3      	b.n	801ea8a <__kernel_rem_pio2f+0x26a>
 801eaa2:	a906      	add	r1, sp, #24
 801eaa4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801eaa8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801eaac:	4302      	orrs	r2, r0
 801eaae:	e7ad      	b.n	801ea0c <__kernel_rem_pio2f+0x1ec>
 801eab0:	3001      	adds	r0, #1
 801eab2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801eab6:	2a00      	cmp	r2, #0
 801eab8:	d0fa      	beq.n	801eab0 <__kernel_rem_pio2f+0x290>
 801eaba:	a91a      	add	r1, sp, #104	; 0x68
 801eabc:	eb0a 0208 	add.w	r2, sl, r8
 801eac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801eac4:	f10a 0301 	add.w	r3, sl, #1
 801eac8:	eb0a 0100 	add.w	r1, sl, r0
 801eacc:	4299      	cmp	r1, r3
 801eace:	da04      	bge.n	801eada <__kernel_rem_pio2f+0x2ba>
 801ead0:	468a      	mov	sl, r1
 801ead2:	e70e      	b.n	801e8f2 <__kernel_rem_pio2f+0xd2>
 801ead4:	9b04      	ldr	r3, [sp, #16]
 801ead6:	2001      	movs	r0, #1
 801ead8:	e7eb      	b.n	801eab2 <__kernel_rem_pio2f+0x292>
 801eada:	9803      	ldr	r0, [sp, #12]
 801eadc:	f8dd c004 	ldr.w	ip, [sp, #4]
 801eae0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801eae4:	9000      	str	r0, [sp, #0]
 801eae6:	ee07 0a90 	vmov	s15, r0
 801eaea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eaee:	2000      	movs	r0, #0
 801eaf0:	ece2 7a01 	vstmia	r2!, {s15}
 801eaf4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801eaf8:	4696      	mov	lr, r2
 801eafa:	4548      	cmp	r0, r9
 801eafc:	dd06      	ble.n	801eb0c <__kernel_rem_pio2f+0x2ec>
 801eafe:	a842      	add	r0, sp, #264	; 0x108
 801eb00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801eb04:	edc0 7a00 	vstr	s15, [r0]
 801eb08:	3301      	adds	r3, #1
 801eb0a:	e7df      	b.n	801eacc <__kernel_rem_pio2f+0x2ac>
 801eb0c:	ecfc 6a01 	vldmia	ip!, {s13}
 801eb10:	ed3e 7a01 	vldmdb	lr!, {s14}
 801eb14:	3001      	adds	r0, #1
 801eb16:	eee6 7a87 	vfma.f32	s15, s13, s14
 801eb1a:	e7ee      	b.n	801eafa <__kernel_rem_pio2f+0x2da>
 801eb1c:	3b01      	subs	r3, #1
 801eb1e:	e779      	b.n	801ea14 <__kernel_rem_pio2f+0x1f4>
 801eb20:	0801ffa0 	.word	0x0801ffa0
 801eb24:	0801ff74 	.word	0x0801ff74
 801eb28:	43800000 	.word	0x43800000
 801eb2c:	3b800000 	.word	0x3b800000
 801eb30:	00000000 	.word	0x00000000
 801eb34:	9b02      	ldr	r3, [sp, #8]
 801eb36:	eeb0 0a48 	vmov.f32	s0, s16
 801eb3a:	1b98      	subs	r0, r3, r6
 801eb3c:	f7fb fa16 	bl	8019f6c <scalbnf>
 801eb40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801eb28 <__kernel_rem_pio2f+0x308>
 801eb44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801eb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb4c:	db1b      	blt.n	801eb86 <__kernel_rem_pio2f+0x366>
 801eb4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801eb2c <__kernel_rem_pio2f+0x30c>
 801eb52:	ee60 7a27 	vmul.f32	s15, s0, s15
 801eb56:	aa06      	add	r2, sp, #24
 801eb58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eb5c:	a906      	add	r1, sp, #24
 801eb5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eb62:	3408      	adds	r4, #8
 801eb64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801eb68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eb6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eb70:	ee10 3a10 	vmov	r3, s0
 801eb74:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801eb78:	ee17 2a90 	vmov	r2, s15
 801eb7c:	f10a 0301 	add.w	r3, sl, #1
 801eb80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801eb84:	e74c      	b.n	801ea20 <__kernel_rem_pio2f+0x200>
 801eb86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eb8a:	aa06      	add	r2, sp, #24
 801eb8c:	ee10 3a10 	vmov	r3, s0
 801eb90:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801eb94:	4653      	mov	r3, sl
 801eb96:	e743      	b.n	801ea20 <__kernel_rem_pio2f+0x200>
 801eb98:	aa42      	add	r2, sp, #264	; 0x108
 801eb9a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801eb9e:	aa06      	add	r2, sp, #24
 801eba0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801eba4:	9201      	str	r2, [sp, #4]
 801eba6:	ee07 2a90 	vmov	s15, r2
 801ebaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ebae:	3901      	subs	r1, #1
 801ebb0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ebb4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ebb8:	edc0 7a00 	vstr	s15, [r0]
 801ebbc:	e73a      	b.n	801ea34 <__kernel_rem_pio2f+0x214>
 801ebbe:	ecf2 6a01 	vldmia	r2!, {s13}
 801ebc2:	ecb6 7a01 	vldmia	r6!, {s14}
 801ebc6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ebca:	3101      	adds	r1, #1
 801ebcc:	42b9      	cmp	r1, r7
 801ebce:	dc01      	bgt.n	801ebd4 <__kernel_rem_pio2f+0x3b4>
 801ebd0:	428c      	cmp	r4, r1
 801ebd2:	daf4      	bge.n	801ebbe <__kernel_rem_pio2f+0x39e>
 801ebd4:	aa56      	add	r2, sp, #344	; 0x158
 801ebd6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801ebda:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801ebde:	3801      	subs	r0, #1
 801ebe0:	3401      	adds	r4, #1
 801ebe2:	e72c      	b.n	801ea3e <__kernel_rem_pio2f+0x21e>
 801ebe4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ebe6:	2a02      	cmp	r2, #2
 801ebe8:	dc0a      	bgt.n	801ec00 <__kernel_rem_pio2f+0x3e0>
 801ebea:	2a00      	cmp	r2, #0
 801ebec:	dc61      	bgt.n	801ecb2 <__kernel_rem_pio2f+0x492>
 801ebee:	d03c      	beq.n	801ec6a <__kernel_rem_pio2f+0x44a>
 801ebf0:	9b00      	ldr	r3, [sp, #0]
 801ebf2:	f003 0007 	and.w	r0, r3, #7
 801ebf6:	b057      	add	sp, #348	; 0x15c
 801ebf8:	ecbd 8b04 	vpop	{d8-d9}
 801ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ec02:	2a03      	cmp	r2, #3
 801ec04:	d1f4      	bne.n	801ebf0 <__kernel_rem_pio2f+0x3d0>
 801ec06:	aa2e      	add	r2, sp, #184	; 0xb8
 801ec08:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ec0c:	4608      	mov	r0, r1
 801ec0e:	461c      	mov	r4, r3
 801ec10:	2c00      	cmp	r4, #0
 801ec12:	f1a0 0004 	sub.w	r0, r0, #4
 801ec16:	dc59      	bgt.n	801eccc <__kernel_rem_pio2f+0x4ac>
 801ec18:	4618      	mov	r0, r3
 801ec1a:	2801      	cmp	r0, #1
 801ec1c:	f1a1 0104 	sub.w	r1, r1, #4
 801ec20:	dc64      	bgt.n	801ecec <__kernel_rem_pio2f+0x4cc>
 801ec22:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801ec26:	2b01      	cmp	r3, #1
 801ec28:	dc70      	bgt.n	801ed0c <__kernel_rem_pio2f+0x4ec>
 801ec2a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801ec2e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801ec32:	f1bb 0f00 	cmp.w	fp, #0
 801ec36:	d172      	bne.n	801ed1e <__kernel_rem_pio2f+0x4fe>
 801ec38:	edc5 6a00 	vstr	s13, [r5]
 801ec3c:	ed85 7a01 	vstr	s14, [r5, #4]
 801ec40:	edc5 7a02 	vstr	s15, [r5, #8]
 801ec44:	e7d4      	b.n	801ebf0 <__kernel_rem_pio2f+0x3d0>
 801ec46:	aa2e      	add	r2, sp, #184	; 0xb8
 801ec48:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ec4c:	ed91 7a00 	vldr	s14, [r1]
 801ec50:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ec54:	3b01      	subs	r3, #1
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	daf5      	bge.n	801ec46 <__kernel_rem_pio2f+0x426>
 801ec5a:	f1bb 0f00 	cmp.w	fp, #0
 801ec5e:	d001      	beq.n	801ec64 <__kernel_rem_pio2f+0x444>
 801ec60:	eef1 7a67 	vneg.f32	s15, s15
 801ec64:	edc5 7a00 	vstr	s15, [r5]
 801ec68:	e7c2      	b.n	801ebf0 <__kernel_rem_pio2f+0x3d0>
 801ec6a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801ec6e:	e7f2      	b.n	801ec56 <__kernel_rem_pio2f+0x436>
 801ec70:	aa2e      	add	r2, sp, #184	; 0xb8
 801ec72:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801ec76:	edd0 7a00 	vldr	s15, [r0]
 801ec7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ec7e:	3901      	subs	r1, #1
 801ec80:	2900      	cmp	r1, #0
 801ec82:	daf5      	bge.n	801ec70 <__kernel_rem_pio2f+0x450>
 801ec84:	f1bb 0f00 	cmp.w	fp, #0
 801ec88:	d017      	beq.n	801ecba <__kernel_rem_pio2f+0x49a>
 801ec8a:	eef1 7a47 	vneg.f32	s15, s14
 801ec8e:	edc5 7a00 	vstr	s15, [r5]
 801ec92:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ec96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec9a:	a82f      	add	r0, sp, #188	; 0xbc
 801ec9c:	2101      	movs	r1, #1
 801ec9e:	428b      	cmp	r3, r1
 801eca0:	da0e      	bge.n	801ecc0 <__kernel_rem_pio2f+0x4a0>
 801eca2:	f1bb 0f00 	cmp.w	fp, #0
 801eca6:	d001      	beq.n	801ecac <__kernel_rem_pio2f+0x48c>
 801eca8:	eef1 7a67 	vneg.f32	s15, s15
 801ecac:	edc5 7a01 	vstr	s15, [r5, #4]
 801ecb0:	e79e      	b.n	801ebf0 <__kernel_rem_pio2f+0x3d0>
 801ecb2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801eb30 <__kernel_rem_pio2f+0x310>
 801ecb6:	4619      	mov	r1, r3
 801ecb8:	e7e2      	b.n	801ec80 <__kernel_rem_pio2f+0x460>
 801ecba:	eef0 7a47 	vmov.f32	s15, s14
 801ecbe:	e7e6      	b.n	801ec8e <__kernel_rem_pio2f+0x46e>
 801ecc0:	ecb0 7a01 	vldmia	r0!, {s14}
 801ecc4:	3101      	adds	r1, #1
 801ecc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ecca:	e7e8      	b.n	801ec9e <__kernel_rem_pio2f+0x47e>
 801eccc:	edd0 7a00 	vldr	s15, [r0]
 801ecd0:	edd0 6a01 	vldr	s13, [r0, #4]
 801ecd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ecd8:	3c01      	subs	r4, #1
 801ecda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ecde:	ed80 7a00 	vstr	s14, [r0]
 801ece2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ece6:	edc0 7a01 	vstr	s15, [r0, #4]
 801ecea:	e791      	b.n	801ec10 <__kernel_rem_pio2f+0x3f0>
 801ecec:	edd1 7a00 	vldr	s15, [r1]
 801ecf0:	edd1 6a01 	vldr	s13, [r1, #4]
 801ecf4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ecf8:	3801      	subs	r0, #1
 801ecfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ecfe:	ed81 7a00 	vstr	s14, [r1]
 801ed02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed06:	edc1 7a01 	vstr	s15, [r1, #4]
 801ed0a:	e786      	b.n	801ec1a <__kernel_rem_pio2f+0x3fa>
 801ed0c:	aa2e      	add	r2, sp, #184	; 0xb8
 801ed0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ed12:	ed91 7a00 	vldr	s14, [r1]
 801ed16:	3b01      	subs	r3, #1
 801ed18:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ed1c:	e783      	b.n	801ec26 <__kernel_rem_pio2f+0x406>
 801ed1e:	eef1 6a66 	vneg.f32	s13, s13
 801ed22:	eeb1 7a47 	vneg.f32	s14, s14
 801ed26:	edc5 6a00 	vstr	s13, [r5]
 801ed2a:	ed85 7a01 	vstr	s14, [r5, #4]
 801ed2e:	eef1 7a67 	vneg.f32	s15, s15
 801ed32:	e785      	b.n	801ec40 <__kernel_rem_pio2f+0x420>

0801ed34 <__kernel_sinf>:
 801ed34:	ee10 3a10 	vmov	r3, s0
 801ed38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ed3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801ed40:	da04      	bge.n	801ed4c <__kernel_sinf+0x18>
 801ed42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ed46:	ee17 3a90 	vmov	r3, s15
 801ed4a:	b35b      	cbz	r3, 801eda4 <__kernel_sinf+0x70>
 801ed4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ed50:	eddf 7a15 	vldr	s15, [pc, #84]	; 801eda8 <__kernel_sinf+0x74>
 801ed54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801edac <__kernel_sinf+0x78>
 801ed58:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ed5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801edb0 <__kernel_sinf+0x7c>
 801ed60:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ed64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801edb4 <__kernel_sinf+0x80>
 801ed68:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ed6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801edb8 <__kernel_sinf+0x84>
 801ed70:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ed74:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ed78:	b930      	cbnz	r0, 801ed88 <__kernel_sinf+0x54>
 801ed7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801edbc <__kernel_sinf+0x88>
 801ed7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ed82:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ed86:	4770      	bx	lr
 801ed88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ed8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ed90:	eee0 7a86 	vfma.f32	s15, s1, s12
 801ed94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801ed98:	eddf 7a09 	vldr	s15, [pc, #36]	; 801edc0 <__kernel_sinf+0x8c>
 801ed9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801eda0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801eda4:	4770      	bx	lr
 801eda6:	bf00      	nop
 801eda8:	2f2ec9d3 	.word	0x2f2ec9d3
 801edac:	b2d72f34 	.word	0xb2d72f34
 801edb0:	3638ef1b 	.word	0x3638ef1b
 801edb4:	b9500d01 	.word	0xb9500d01
 801edb8:	3c088889 	.word	0x3c088889
 801edbc:	be2aaaab 	.word	0xbe2aaaab
 801edc0:	3e2aaaab 	.word	0x3e2aaaab

0801edc4 <floorf>:
 801edc4:	ee10 3a10 	vmov	r3, s0
 801edc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801edcc:	3a7f      	subs	r2, #127	; 0x7f
 801edce:	2a16      	cmp	r2, #22
 801edd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801edd4:	dc2a      	bgt.n	801ee2c <floorf+0x68>
 801edd6:	2a00      	cmp	r2, #0
 801edd8:	da11      	bge.n	801edfe <floorf+0x3a>
 801edda:	eddf 7a18 	vldr	s15, [pc, #96]	; 801ee3c <floorf+0x78>
 801edde:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ede2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ede6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edea:	dd05      	ble.n	801edf8 <floorf+0x34>
 801edec:	2b00      	cmp	r3, #0
 801edee:	da23      	bge.n	801ee38 <floorf+0x74>
 801edf0:	4a13      	ldr	r2, [pc, #76]	; (801ee40 <floorf+0x7c>)
 801edf2:	2900      	cmp	r1, #0
 801edf4:	bf18      	it	ne
 801edf6:	4613      	movne	r3, r2
 801edf8:	ee00 3a10 	vmov	s0, r3
 801edfc:	4770      	bx	lr
 801edfe:	4911      	ldr	r1, [pc, #68]	; (801ee44 <floorf+0x80>)
 801ee00:	4111      	asrs	r1, r2
 801ee02:	420b      	tst	r3, r1
 801ee04:	d0fa      	beq.n	801edfc <floorf+0x38>
 801ee06:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801ee3c <floorf+0x78>
 801ee0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ee0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee16:	ddef      	ble.n	801edf8 <floorf+0x34>
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	bfbe      	ittt	lt
 801ee1c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801ee20:	fa40 f202 	asrlt.w	r2, r0, r2
 801ee24:	189b      	addlt	r3, r3, r2
 801ee26:	ea23 0301 	bic.w	r3, r3, r1
 801ee2a:	e7e5      	b.n	801edf8 <floorf+0x34>
 801ee2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ee30:	d3e4      	bcc.n	801edfc <floorf+0x38>
 801ee32:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ee36:	4770      	bx	lr
 801ee38:	2300      	movs	r3, #0
 801ee3a:	e7dd      	b.n	801edf8 <floorf+0x34>
 801ee3c:	7149f2ca 	.word	0x7149f2ca
 801ee40:	bf800000 	.word	0xbf800000
 801ee44:	007fffff 	.word	0x007fffff

0801ee48 <rintf>:
 801ee48:	ee10 2a10 	vmov	r2, s0
 801ee4c:	b513      	push	{r0, r1, r4, lr}
 801ee4e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ee52:	397f      	subs	r1, #127	; 0x7f
 801ee54:	2916      	cmp	r1, #22
 801ee56:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801ee5a:	dc47      	bgt.n	801eeec <rintf+0xa4>
 801ee5c:	b32b      	cbz	r3, 801eeaa <rintf+0x62>
 801ee5e:	2900      	cmp	r1, #0
 801ee60:	ee10 3a10 	vmov	r3, s0
 801ee64:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801ee68:	da21      	bge.n	801eeae <rintf+0x66>
 801ee6a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801ee6e:	425b      	negs	r3, r3
 801ee70:	4921      	ldr	r1, [pc, #132]	; (801eef8 <rintf+0xb0>)
 801ee72:	0a5b      	lsrs	r3, r3, #9
 801ee74:	0d12      	lsrs	r2, r2, #20
 801ee76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ee7a:	0512      	lsls	r2, r2, #20
 801ee7c:	4313      	orrs	r3, r2
 801ee7e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801ee82:	ee07 3a90 	vmov	s15, r3
 801ee86:	edd1 6a00 	vldr	s13, [r1]
 801ee8a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801ee8e:	ed8d 7a01 	vstr	s14, [sp, #4]
 801ee92:	eddd 7a01 	vldr	s15, [sp, #4]
 801ee96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ee9a:	ee17 3a90 	vmov	r3, s15
 801ee9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eea2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801eea6:	ee00 3a10 	vmov	s0, r3
 801eeaa:	b002      	add	sp, #8
 801eeac:	bd10      	pop	{r4, pc}
 801eeae:	4a13      	ldr	r2, [pc, #76]	; (801eefc <rintf+0xb4>)
 801eeb0:	410a      	asrs	r2, r1
 801eeb2:	4213      	tst	r3, r2
 801eeb4:	d0f9      	beq.n	801eeaa <rintf+0x62>
 801eeb6:	0854      	lsrs	r4, r2, #1
 801eeb8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801eebc:	d006      	beq.n	801eecc <rintf+0x84>
 801eebe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801eec2:	ea23 0304 	bic.w	r3, r3, r4
 801eec6:	fa42 f101 	asr.w	r1, r2, r1
 801eeca:	430b      	orrs	r3, r1
 801eecc:	4a0a      	ldr	r2, [pc, #40]	; (801eef8 <rintf+0xb0>)
 801eece:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801eed2:	ed90 7a00 	vldr	s14, [r0]
 801eed6:	ee07 3a90 	vmov	s15, r3
 801eeda:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eede:	edcd 7a01 	vstr	s15, [sp, #4]
 801eee2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801eee6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801eeea:	e7de      	b.n	801eeaa <rintf+0x62>
 801eeec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eef0:	d3db      	bcc.n	801eeaa <rintf+0x62>
 801eef2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eef6:	e7d8      	b.n	801eeaa <rintf+0x62>
 801eef8:	0801ffac 	.word	0x0801ffac
 801eefc:	007fffff 	.word	0x007fffff

0801ef00 <_init>:
 801ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef02:	bf00      	nop
 801ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef06:	bc08      	pop	{r3}
 801ef08:	469e      	mov	lr, r3
 801ef0a:	4770      	bx	lr

0801ef0c <_fini>:
 801ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef0e:	bf00      	nop
 801ef10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef12:	bc08      	pop	{r3}
 801ef14:	469e      	mov	lr, r3
 801ef16:	4770      	bx	lr
